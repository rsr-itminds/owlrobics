/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={135:function(t,e,n){(function(){"use strict";function t(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}var e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){return t==Array.prototype||t==Object.prototype||(t[e]=n.value),t},i=function(t){t=["object"==typeof globalThis&&globalThis,t,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g];for(var e=0;e<t.length;++e){var i=t[e];if(i&&i.Math==Math)return i}throw Error("Cannot find global object")}(this);function r(t,n){if(n)t:{var r=i;t=t.split(".");for(var s=0;s<t.length-1;s++){var a=t[s];if(!(a in r))break t;r=r[a]}(n=n(s=r[t=t[t.length-1]]))!=s&&null!=n&&e(r,t,{configurable:!0,writable:!0,value:n})}}function s(t){return(t={next:t})[Symbol.iterator]=function(){return this},t}function a(e){var n="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return n?n.call(e):{next:t(e)}}function o(){this.i=!1,this.g=null,this.o=void 0,this.j=1,this.m=0,this.h=null}function l(t){if(t.i)throw new TypeError("Generator is already running");t.i=!0}function c(t,e){t.h={F:e,G:!0},t.j=t.m}function h(t){this.g=new o,this.h=t}function u(t,e,n,i){try{var r=e.call(t.g.g,n);if(!(r instanceof Object))throw new TypeError("Iterator result "+r+" is not an object");if(!r.done)return t.g.i=!1,r;var s=r.value}catch(e){return t.g.g=null,c(t.g,e),d(t)}return t.g.g=null,i.call(t.g,s),d(t)}function d(t){for(;t.g.j;)try{var e=t.h(t.g);if(e)return t.g.i=!1,{value:e.value,done:!1}}catch(e){t.g.o=void 0,c(t.g,e)}if(t.g.i=!1,t.g.h){if(e=t.g.h,t.g.h=null,e.G)throw e.F;return{value:e.return,done:!0}}return{value:void 0,done:!0}}function p(t){this.next=function(e){return l(t.g),t.g.g?e=u(t,t.g.g.next,e,t.g.l):(t.g.l(e),e=d(t)),e},this.throw=function(e){return l(t.g),t.g.g?e=u(t,t.g.g.throw,e,t.g.l):(c(t.g,e),e=d(t)),e},this.return=function(e){return function(t,e){l(t.g);var n=t.g.g;return n?u(t,"return"in n?n.return:function(t){return{value:t,done:!0}},e,t.g.return):(t.g.return(e),d(t))}(t,e)},this[Symbol.iterator]=function(){return this}}function f(t){function e(e){return t.next(e)}function n(e){return t.throw(e)}return new Promise((function(i,r){!function t(s){s.done?i(s.value):Promise.resolve(s.value).then(e,n).then(t,r)}(t.next())}))}r("Symbol",(function(t){function n(t,n){this.g=t,e(this,"description",{configurable:!0,writable:!0,value:n})}if(t)return t;n.prototype.toString=function(){return this.g};var i="jscomp_symbol_"+(1e9*Math.random()>>>0)+"_",r=0;return function t(e){if(this instanceof t)throw new TypeError("Symbol is not a constructor");return new n(i+(e||"")+"_"+r++,e)}})),r("Symbol.iterator",(function(n){if(n)return n;n=Symbol("Symbol.iterator");for(var r="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),a=0;a<r.length;a++){var o=i[r[a]];"function"==typeof o&&"function"!=typeof o.prototype[n]&&e(o.prototype,n,{configurable:!0,writable:!0,value:function(){return s(t(this))}})}return n})),o.prototype.l=function(t){this.o=t},o.prototype.return=function(t){this.h={return:t},this.j=this.m},r("Promise",(function(t){function e(t){this.h=0,this.i=void 0,this.g=[],this.o=!1;var e=this.j();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.g=null}function r(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.h=function(t){if(null==this.g){this.g=[];var e=this;this.i((function(){e.l()}))}this.g.push(t)};var s=i.setTimeout;n.prototype.i=function(t){s(t,0)},n.prototype.l=function(){for(;this.g&&this.g.length;){var t=this.g;this.g=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.j(t)}}}this.g=null},n.prototype.j=function(t){this.i((function(){throw t}))},e.prototype.j=function(){function t(t){return function(i){n||(n=!0,t.call(e,i))}}var e=this,n=!1;return{resolve:t(this.A),reject:t(this.l)}},e.prototype.A=function(t){if(t===this)this.l(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.C(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.v(t):this.m(t)}},e.prototype.v=function(t){var e=void 0;try{e=t.then}catch(t){return void this.l(t)}"function"==typeof e?this.D(e,t):this.m(t)},e.prototype.l=function(t){this.u(2,t)},e.prototype.m=function(t){this.u(1,t)},e.prototype.u=function(t,e){if(0!=this.h)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.h);this.h=t,this.i=e,2===this.h&&this.B(),this.H()},e.prototype.B=function(){var t=this;s((function(){if(t.I()){var e=i.console;void 0!==e&&e.error(t.i)}}),1)},e.prototype.I=function(){if(this.o)return!1;var t=i.CustomEvent,e=i.Event,n=i.dispatchEvent;return void 0===n||("function"==typeof t?t=new t("unhandledrejection",{cancelable:!0}):"function"==typeof e?t=new e("unhandledrejection",{cancelable:!0}):(t=i.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection",!1,!0,t),t.promise=this,t.reason=this.i,n(t))},e.prototype.H=function(){if(null!=this.g){for(var t=0;t<this.g.length;++t)o.h(this.g[t]);this.g=null}};var o=new n;return e.prototype.C=function(t){var e=this.j();t.s(e.resolve,e.reject)},e.prototype.D=function(t,e){var n=this.j();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function i(t,e){return"function"==typeof t?function(e){try{r(t(e))}catch(t){s(t)}}:e}var r,s,a=new e((function(t,e){r=t,s=e}));return this.s(i(t,r),i(n,s)),a},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.s=function(t,e){function n(){switch(i.h){case 1:t(i.i);break;case 2:e(i.i);break;default:throw Error("Unexpected state: "+i.h)}}var i=this;null==this.g?o.h(n):this.g.push(n),this.o=!0},e.resolve=r,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var i=a(t),s=i.next();!s.done;s=i.next())r(s.value).s(e,n)}))},e.all=function(t){var n=a(t),i=n.next();return i.done?r([]):new e((function(t,e){function s(e){return function(n){a[e]=n,0==--o&&t(a)}}var a=[],o=0;do{a.push(void 0),o++,r(i.value).s(s(a.length-1),e),i=n.next()}while(!i.done)}))},e}));var m="function"==typeof Object.assign?Object.assign:function(t,e){for(var n=1;n<arguments.length;n++){var i=arguments[n];if(i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};r("Object.assign",(function(t){return t||m}));var g=this||self,v={facingMode:"user",width:640,height:480};function y(t,e){this.video=t,this.i=0,this.h=Object.assign(Object.assign({},v),e)}function x(t){window.requestAnimationFrame((function(){!function(t){var e=null;t.video.paused||t.video.currentTime===t.i||(t.i=t.video.currentTime,e=t.h.onFrame()),e?e.then((function(){x(t)})):x(t)}(t)}))}y.prototype.stop=function(){var t,e,n,i=this;return f(new p(new h((function(r){if(i.g){for(t=i.g.getTracks(),e=a(t),n=e.next();!n.done;n=e.next())n.value.stop();i.g=void 0}r.j=0}))))},y.prototype.start=function(){var t,e=this;return f(new p(new h((function(n){return navigator.mediaDevices&&navigator.mediaDevices.getUserMedia||alert("No navigator.mediaDevices.getUserMedia exists."),t=e.h,n.return(navigator.mediaDevices.getUserMedia({video:{facingMode:t.facingMode,width:t.width,height:t.height}}).then((function(t){!function(t,e){t.g=e,t.video.srcObject=e,t.video.onloadedmetadata=function(){t.video.play(),x(t)}}(e,t)})).catch((function(t){var e="Failed to acquire camera feed: "+t;throw console.error(e),alert(e),t})))}))))};var _,b=["Camera"],w=g;b[0]in w||void 0===w.execScript||w.execScript("var "+b[0]);for(;b.length&&(_=b.shift());)b.length||void 0===y?w=w[_]&&w[_]!==Object.prototype[_]?w[_]:w[_]={}:w[_]=y}).call(this)},423:function(t,e,n){(function(){"use strict";function t(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}var e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){return t==Array.prototype||t==Object.prototype||(t[e]=n.value),t},i=function(t){t=["object"==typeof globalThis&&globalThis,t,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g];for(var e=0;e<t.length;++e){var i=t[e];if(i&&i.Math==Math)return i}throw Error("Cannot find global object")}(this);function r(t,n){if(n)t:{var r=i;t=t.split(".");for(var s=0;s<t.length-1;s++){var a=t[s];if(!(a in r))break t;r=r[a]}(n=n(s=r[t=t[t.length-1]]))!=s&&null!=n&&e(r,t,{configurable:!0,writable:!0,value:n})}}function s(e){var n="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return n?n.call(e):{next:t(e)}}var a="function"==typeof Object.assign?Object.assign:function(t,e){for(var n=1;n<arguments.length;n++){var i=arguments[n];if(i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};function o(t){return t||Array.prototype.fill}r("Object.assign",(function(t){return t||a})),r("Array.prototype.fill",(function(t){return t||function(t,e,n){var i=this.length||0;for(0>e&&(e=Math.max(0,i+e)),(null==n||n>i)&&(n=i),0>(n=Number(n))&&(n=Math.max(0,i+n)),e=Number(e||0);e<n;e++)this[e]=t;return this}})),r("Int8Array.prototype.fill",o),r("Uint8Array.prototype.fill",o),r("Uint8ClampedArray.prototype.fill",o),r("Int16Array.prototype.fill",o),r("Uint16Array.prototype.fill",o),r("Int32Array.prototype.fill",o),r("Uint32Array.prototype.fill",o),r("Float32Array.prototype.fill",o),r("Float64Array.prototype.fill",o);var l=this||self;function c(t,e){t=t.split(".");var n,i=l;t[0]in i||void 0===i.execScript||i.execScript("var "+t[0]);for(;t.length&&(n=t.shift());)t.length||void 0===e?i=i[n]&&i[n]!==Object.prototype[n]?i[n]:i[n]={}:i[n]=e}var h={color:"white",lineWidth:4,radius:6,visibilityMin:.5};function u(t){return t=t||{},Object.assign(Object.assign(Object.assign({},h),{fillColor:t.color}),t)}function d(t,e){return t instanceof Function?t(e):t}function p(t,e,n){return Math.max(Math.min(e,n),Math.min(Math.max(e,n),t))}c("clamp",p),c("drawLandmarks",(function(t,e,n){if(e){n=u(n),t.save();for(var i=t.canvas,r=0,a=(e=s(e)).next();!a.done;a=e.next())if(void 0!==(a=a.value)&&(void 0===a.visibility||a.visibility>n.visibilityMin)){t.fillStyle=d(n.fillColor,{index:r,from:a}),t.strokeStyle=d(n.color,{index:r,from:a}),t.lineWidth=d(n.lineWidth,{index:r,from:a});var o=new Path2D;o.arc(a.x*i.width,a.y*i.height,d(n.radius,{index:r,from:a}),0,2*Math.PI),t.fill(o),t.stroke(o),++r}t.restore()}})),c("drawConnectors",(function(t,e,n,i){if(e&&n){i=u(i),t.save();for(var r=t.canvas,a=0,o=(n=s(n)).next();!o.done;o=n.next()){var l=o.value;t.beginPath(),o=e[l[0]],l=e[l[1]],o&&l&&(void 0===o.visibility||o.visibility>i.visibilityMin)&&(void 0===l.visibility||l.visibility>i.visibilityMin)&&(t.strokeStyle=d(i.color,{index:a,from:o,to:l}),t.lineWidth=d(i.lineWidth,{index:a,from:o,to:l}),t.moveTo(o.x*r.width,o.y*r.height),t.lineTo(l.x*r.width,l.y*r.height)),++a,t.stroke()}t.restore()}})),c("drawRectangle",(function(t,e,n){n=u(n),t.save();var i=t.canvas;t.beginPath(),t.lineWidth=d(n.lineWidth,{}),t.strokeStyle=d(n.color,{}),t.fillStyle=d(n.fillColor,{}),t.translate(e.xCenter*i.width,e.yCenter*i.height),t.rotate(e.rotation*Math.PI/180),t.rect(-e.width/2*i.width,-e.height/2*i.height,e.width*i.width,e.height*i.height),t.translate(-e.xCenter*i.width,-e.yCenter*i.height),t.stroke(),t.fill(),t.restore()})),c("lerp",(function(t,e,n,i,r){return p(i*(1-(t-e)/(n-e))+r*(1-(n-t)/(n-e)),i,r)}))}).call(this)},264:function(t,e,n){(function(){"use strict";var t;function e(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}var i="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){return t==Array.prototype||t==Object.prototype||(t[e]=n.value),t},r=function(t){t=["object"==typeof globalThis&&globalThis,t,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g];for(var e=0;e<t.length;++e){var i=t[e];if(i&&i.Math==Math)return i}throw Error("Cannot find global object")}(this);function s(t,e){if(e)t:{var n=r;t=t.split(".");for(var s=0;s<t.length-1;s++){var a=t[s];if(!(a in n))break t;n=n[a]}(e=e(s=n[t=t[t.length-1]]))!=s&&null!=e&&i(n,t,{configurable:!0,writable:!0,value:e})}}function a(t){return(t={next:t})[Symbol.iterator]=function(){return this},t}function o(t){var n="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return n?n.call(t):{next:e(t)}}function l(t){if(!(t instanceof Array)){t=o(t);for(var e,n=[];!(e=t.next()).done;)n.push(e.value);t=n}return t}s("Symbol",(function(t){function e(t,e){this.g=t,i(this,"description",{configurable:!0,writable:!0,value:e})}if(t)return t;e.prototype.toString=function(){return this.g};var n="jscomp_symbol_"+(1e9*Math.random()>>>0)+"_",r=0;return function t(i){if(this instanceof t)throw new TypeError("Symbol is not a constructor");return new e(n+(i||"")+"_"+r++,i)}})),s("Symbol.iterator",(function(t){if(t)return t;t=Symbol("Symbol.iterator");for(var n="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),s=0;s<n.length;s++){var o=r[n[s]];"function"==typeof o&&"function"!=typeof o.prototype[t]&&i(o.prototype,t,{configurable:!0,writable:!0,value:function(){return a(e(this))}})}return t}));var c,h="function"==typeof Object.create?Object.create:function(t){function e(){}return e.prototype=t,new e};if("function"==typeof Object.setPrototypeOf)c=Object.setPrototypeOf;else{var u;t:{var d={};try{d.__proto__={a:!0},u=d.a;break t}catch(t){}u=!1}c=u?function(t,e){if(t.__proto__=e,t.__proto__!==e)throw new TypeError(t+" is not extensible");return t}:null}var p=c;function f(t,e){if(t.prototype=h(e.prototype),t.prototype.constructor=t,p)p(t,e);else for(var n in e)if("prototype"!=n)if(Object.defineProperties){var i=Object.getOwnPropertyDescriptor(e,n);i&&Object.defineProperty(t,n,i)}else t[n]=e[n];t.ea=e.prototype}function m(){this.l=!1,this.i=null,this.h=void 0,this.g=1,this.s=this.m=0,this.j=null}function g(t){if(t.l)throw new TypeError("Generator is already running");t.l=!0}function v(t,e){t.j={U:e,V:!0},t.g=t.m||t.s}function y(t,e,n){return t.g=n,{value:e}}function x(t){this.g=new m,this.h=t}function _(t,e,n,i){try{var r=e.call(t.g.i,n);if(!(r instanceof Object))throw new TypeError("Iterator result "+r+" is not an object");if(!r.done)return t.g.l=!1,r;var s=r.value}catch(e){return t.g.i=null,v(t.g,e),b(t)}return t.g.i=null,i.call(t.g,s),b(t)}function b(t){for(;t.g.g;)try{var e=t.h(t.g);if(e)return t.g.l=!1,{value:e.value,done:!1}}catch(e){t.g.h=void 0,v(t.g,e)}if(t.g.l=!1,t.g.j){if(e=t.g.j,t.g.j=null,e.V)throw e.U;return{value:e.return,done:!0}}return{value:void 0,done:!0}}function w(t){this.next=function(e){return g(t.g),t.g.i?e=_(t,t.g.i.next,e,t.g.o):(t.g.o(e),e=b(t)),e},this.throw=function(e){return g(t.g),t.g.i?e=_(t,t.g.i.throw,e,t.g.o):(v(t.g,e),e=b(t)),e},this.return=function(e){return function(t,e){g(t.g);var n=t.g.i;return n?_(t,"return"in n?n.return:function(t){return{value:t,done:!0}},e,t.g.return):(t.g.return(e),b(t))}(t,e)},this[Symbol.iterator]=function(){return this}}function M(t){return function(t){function e(e){return t.next(e)}function n(e){return t.throw(e)}return new Promise((function(i,r){!function t(s){s.done?i(s.value):Promise.resolve(s.value).then(e,n).then(t,r)}(t.next())}))}(new w(new x(t)))}m.prototype.o=function(t){this.h=t},m.prototype.return=function(t){this.j={return:t},this.g=this.s},s("Promise",(function(t){function e(t){this.h=0,this.i=void 0,this.g=[],this.o=!1;var e=this.j();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.g=null}function i(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.h=function(t){if(null==this.g){this.g=[];var e=this;this.i((function(){e.l()}))}this.g.push(t)};var s=r.setTimeout;n.prototype.i=function(t){s(t,0)},n.prototype.l=function(){for(;this.g&&this.g.length;){var t=this.g;this.g=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.j(t)}}}this.g=null},n.prototype.j=function(t){this.i((function(){throw t}))},e.prototype.j=function(){function t(t){return function(i){n||(n=!0,t.call(e,i))}}var e=this,n=!1;return{resolve:t(this.C),reject:t(this.l)}},e.prototype.C=function(t){if(t===this)this.l(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.F(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.v(t):this.m(t)}},e.prototype.v=function(t){var e=void 0;try{e=t.then}catch(t){return void this.l(t)}"function"==typeof e?this.G(e,t):this.m(t)},e.prototype.l=function(t){this.s(2,t)},e.prototype.m=function(t){this.s(1,t)},e.prototype.s=function(t,e){if(0!=this.h)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.h);this.h=t,this.i=e,2===this.h&&this.D(),this.A()},e.prototype.D=function(){var t=this;s((function(){if(t.B()){var e=r.console;void 0!==e&&e.error(t.i)}}),1)},e.prototype.B=function(){if(this.o)return!1;var t=r.CustomEvent,e=r.Event,n=r.dispatchEvent;return void 0===n||("function"==typeof t?t=new t("unhandledrejection",{cancelable:!0}):"function"==typeof e?t=new e("unhandledrejection",{cancelable:!0}):(t=r.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection",!1,!0,t),t.promise=this,t.reason=this.i,n(t))},e.prototype.A=function(){if(null!=this.g){for(var t=0;t<this.g.length;++t)a.h(this.g[t]);this.g=null}};var a=new n;return e.prototype.F=function(t){var e=this.j();t.J(e.resolve,e.reject)},e.prototype.G=function(t,e){var n=this.j();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function i(t,e){return"function"==typeof t?function(e){try{r(t(e))}catch(t){s(t)}}:e}var r,s,a=new e((function(t,e){r=t,s=e}));return this.J(i(t,r),i(n,s)),a},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.J=function(t,e){function n(){switch(i.h){case 1:t(i.i);break;case 2:e(i.i);break;default:throw Error("Unexpected state: "+i.h)}}var i=this;null==this.g?a.h(n):this.g.push(n),this.o=!0},e.resolve=i,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var r=o(t),s=r.next();!s.done;s=r.next())i(s.value).J(e,n)}))},e.all=function(t){var n=o(t),r=n.next();return r.done?i([]):new e((function(t,e){function s(e){return function(n){a[e]=n,0==--o&&t(a)}}var a=[],o=0;do{a.push(void 0),o++,i(r.value).J(s(a.length-1),e),r=n.next()}while(!r.done)}))},e}));var S="function"==typeof Object.assign?Object.assign:function(t,e){for(var n=1;n<arguments.length;n++){var i=arguments[n];if(i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};s("Object.assign",(function(t){return t||S})),s("Object.is",(function(t){return t||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}})),s("Array.prototype.includes",(function(t){return t||function(t,e){var n=this;n instanceof String&&(n=String(n));var i=n.length;for(0>(e=e||0)&&(e=Math.max(e+i,0));e<i;e++){var r=n[e];if(r===t||Object.is(r,t))return!0}return!1}})),s("String.prototype.includes",(function(t){return t||function(t,e){if(null==this)throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(t instanceof RegExp)throw new TypeError("First argument to String.prototype.includes must not be a regular expression");return-1!==this.indexOf(t,e||0)}})),s("Array.prototype.keys",(function(t){return t||function(){return function(t,e){t instanceof String&&(t+="");var n=0,i=!1,r={next:function(){if(!i&&n<t.length){var r=n++;return{value:e(r,t[r]),done:!1}}return i=!0,{done:!0,value:void 0}}};return r[Symbol.iterator]=function(){return r},r}(this,(function(t){return t}))}}));var E=this||self;function T(t,e){t=t.split(".");var n,i=E;t[0]in i||void 0===i.execScript||i.execScript("var "+t[0]);for(;t.length&&(n=t.shift());)t.length||void 0===e?i=i[n]&&i[n]!==Object.prototype[n]?i[n]:i[n]={}:i[n]=e}function A(t){!function(t){E.setTimeout((function(){throw t}),0)}(t)}function R(t,e){A(Error("Invalid wire type: "+t+" (at position "+e+")"))}function L(){A(Error("Failed to read varint, encoding is invalid."))}function C(t,e){return e=String.fromCharCode.apply(null,e),null==t?e:t+e}var P,D,I="undefined"!=typeof TextDecoder,N="undefined"!=typeof TextEncoder;function O(t){if(N)t=(D||(D=new TextEncoder)).encode(t);else{var e=void 0;e=void 0!==e&&e;for(var n=0,i=new Uint8Array(3*t.length),r=0;r<t.length;r++){var s=t.charCodeAt(r);if(128>s)i[n++]=s;else{if(2048>s)i[n++]=s>>6|192;else{if(55296<=s&&57343>=s){if(56319>=s&&r<t.length){var a=t.charCodeAt(++r);if(56320<=a&&57343>=a){s=1024*(s-55296)+a-56320+65536,i[n++]=s>>18|240,i[n++]=s>>12&63|128,i[n++]=s>>6&63|128,i[n++]=63&s|128;continue}r--}if(e)throw Error("Found an unpaired surrogate");s=65533}i[n++]=s>>12|224,i[n++]=s>>6&63|128}i[n++]=63&s|128}}t=i.subarray(0,n)}return t}var z={},U=null;function F(t){var e;void 0===e&&(e=0),H(),e=z[e];for(var n=Array(Math.floor(t.length/3)),i=e[64]||"",r=0,s=0;r<t.length-2;r+=3){var a=t[r],o=t[r+1],l=t[r+2],c=e[a>>2];a=e[(3&a)<<4|o>>4],o=e[(15&o)<<2|l>>6],l=e[63&l],n[s++]=c+a+o+l}switch(c=0,l=i,t.length-r){case 2:l=e[(15&(c=t[r+1]))<<2]||i;case 1:t=t[r],n[s]=e[t>>2]+e[(3&t)<<4|c>>4]+l+i}return n.join("")}function B(t){var e=t.length,n=3*e/4;n%3?n=Math.floor(n):-1!="=.".indexOf(t[e-1])&&(n=-1!="=.".indexOf(t[e-2])?n-2:n-1);var i=new Uint8Array(n),r=0;return function(t,e){function n(e){for(;i<t.length;){var n=t.charAt(i++),r=U[n];if(null!=r)return r;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}H();for(var i=0;;){var r=n(-1),s=n(0),a=n(64),o=n(64);if(64===o&&-1===r)break;e(r<<2|s>>4),64!=a&&(e(s<<4&240|a>>2),64!=o&&e(a<<6&192|o))}}(t,(function(t){i[r++]=t})),i.subarray(0,r)}function H(){if(!U){U={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++){var i=t.concat(e[n].split(""));z[n]=i;for(var r=0;r<i.length;r++){var s=i[r];void 0===U[s]&&(U[s]=r)}}}}var k,G="function"==typeof Uint8Array;function V(t){if(this.g=t,null!==t&&0===t.length)throw Error("ByteString should be constructed with non-empty values")}V.prototype.toJSON=function(){if(null==this.g)var t="";else t=this.g,t=this.g=null==t||"string"==typeof t?t:G&&t instanceof Uint8Array?F(t):null;return t};var W="function"==typeof Uint8Array.prototype.slice;function j(t,e,n){return e===n?k||(k=new Uint8Array(0)):W?t.slice(e,n):new Uint8Array(t.subarray(e,n))}var X=0;function q(t,e){e=void 0!==(e=void 0===e?{}:e).u&&e.u,this.h=null,this.g=this.i=this.l=0,this.j=!1,this.u=e,t&&Y(this,t)}function Y(t,e){t.h=function(t){if(t.constructor===Uint8Array)return t;if(t.constructor===ArrayBuffer)return new Uint8Array(t);if(t.constructor===Array)return new Uint8Array(t);if(t.constructor===String)return B(t);if(t.constructor===V){if(null==t.g)var e=k||(k=new Uint8Array(0));else{e=Uint8Array;var n=t.g;n=null==n||G&&null!=n&&n instanceof Uint8Array?n:"string"==typeof n?B(n):null,e=new e(t=t.g=n)}return e}if(t instanceof Uint8Array)return new Uint8Array(t.buffer,t.byteOffset,t.byteLength);throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, or Array of numbers")}(e),t.l=0,t.i=t.h.length,t.g=t.l}function J(t){t.g>t.i&&(t.j=!0,A(Error("Tried to read past the end of the data "+t.g+" > "+t.i)))}function Z(t){var e=t.h,n=e[t.g],i=127&n;return 128>n?(t.g+=1,J(t),i):(i|=(127&(n=e[t.g+1]))<<7,128>n?(t.g+=2,J(t),i):(i|=(127&(n=e[t.g+2]))<<14,128>n?(t.g+=3,J(t),i):(i|=(127&(n=e[t.g+3]))<<21,128>n?(t.g+=4,J(t),i):(i|=(15&(n=e[t.g+4]))<<28,128>n?(t.g+=5,J(t),i>>>0):(t.g+=5,128<=e[t.g++]&&128<=e[t.g++]&&128<=e[t.g++]&&128<=e[t.g++]&&128<=e[t.g++]?(t.j=!0,L(),i):(J(t),i))))))}q.prototype.reset=function(){this.g=this.l};var K=[];function Q(){this.g=new Uint8Array(64),this.h=0}function $(t,e){if(!(t.h+1<t.g.length)){var n=t.g;t.g=new Uint8Array(Math.ceil(1+2*t.g.length)),t.g.set(n)}t.g[t.h++]=e}function tt(t,e){for(;127<e;)$(t,127&e|128),e>>>=7;$(t,e)}function et(t){var e={},n=void 0!==e.N&&e.N;this.m={u:void 0!==e.u&&e.u},this.N=n,e=this.m,K.length?(n=K.pop(),e&&(n.u=e.u),t&&Y(n,t),t=n):t=new q(t,e),this.g=t,this.l=this.g.g,this.h=this.i=-1,this.j=!1}function nt(t){var e=t.g;if((e=e.g==e.i)||(e=t.j)||(e=(e=t.g).j||0>e.g||e.g>e.i),e)return!1;t.l=t.g.g;var n=Z(t.g);return e=n>>>3,0<=(n&=7)&&5>=n?(t.i=e,t.h=n,!0):(t.j=!0,R(n,t.l),!1)}function it(t){switch(t.h){case 0:if(0!=t.h)it(t);else t:{for(var e=(t=t.g).g,n=0;10>n;n++){if(0==(128&t.h[e])){t.g=e+1,J(t);break t}e++}t.j=!0,L()}break;case 1:(t=t.g).g+=8,J(t);break;case 2:2!=t.h?it(t):(e=Z(t.g),(t=t.g).g+=e,J(t));break;case 5:(t=t.g).g+=4,J(t);break;case 3:for(e=t.i;;){if(!nt(t)){t.j=!0,A(Error("Unmatched start-group tag: stream EOF"));break}if(4==t.h){t.i!=e&&(t.j=!0,A(Error("Unmatched end-group tag")));break}it(t)}break;default:t.j=!0,R(t.h,t.l)}}function rt(t,e,n){t.N||(t=j(t.g.h,n,t.g.g),(n=e.m)?n.push(t):e.m=[t])}Q.prototype.length=function(){return this.h},Q.prototype.end=function(){var t=this.g,e=this.h;return this.h=0,j(t,0,e)},et.prototype.reset=function(){this.g.reset(),this.h=this.i=-1};var st=[];function at(){this.h=[],this.i=0,this.g=new Q}function ot(t,e){0!==e.length&&(t.h.push(e),t.i+=e.length)}function lt(t,e,n){tt(t.g,8*e+2),tt(t.g,n.length),ot(t,t.g.end()),ot(t,n)}var ct,ht="function"==typeof Symbol&&"symbol"==typeof Symbol()?Symbol(void 0):void 0;function ut(t,e){Object.isFrozen(t)||(ht?t[ht]|=e:void 0!==t.g?t.g|=e:Object.defineProperties(t,{g:{value:e,configurable:!0,writable:!0,enumerable:!1}}))}function dt(t){return t?null==(e=ht?t[ht]:t.g)?0:e:0;var e}function pt(t){return Array.isArray(t)?(ut(t,1),t):t}function ft(t){if(!Array.isArray(t))throw Error("cannot mark non-array as immutable");ut(t,2)}function mt(t){return null!==t&&"object"==typeof t&&t.constructor===Object}function gt(t){switch(typeof t){case"number":return isFinite(t)?t:String(t);case"object":return G&&null!=t&&t instanceof Uint8Array?F(t):t;default:return t}}function vt(t,e){if(null!=t)return Array.isArray(t)||mt(t)?yt(t,e):e(t)}function yt(t,e){if(Array.isArray(t)){for(var n=Array(t.length),i=0;i<t.length;i++)n[i]=vt(t[i],e);return 1&dt(t)&&pt(n),n}for(i in n={},t)n[i]=vt(t[i],e);return n}function xt(t,e,n){var i=ct;if(ct=null,t||(t=i),i=this.constructor.ca,t||(t=i?[i]:[]),this.j=(i?0:-1)-(this.constructor.aa||0),this.i=null,this.g=t,t=(i=this.g.length)-1,i&&mt(i=this.g[t])?(this.l=t-this.j,this.h=i):void 0!==e&&-1<e?(this.l=Math.max(e,t+1-this.j),this.h=null):this.l=Number.MAX_VALUE,n)for(e=0;e<n.length;e++)(t=n[e])<this.l?(t+=this.j,(i=this.g[t])?pt(i):this.g[t]=wt):(Mt(this),(i=this.h[t])?pt(i):this.h[t]=wt)}var _t,bt,wt=Object.freeze(pt([]));function Mt(t){var e=t.l+t.j;t.g[e]||(t.h=t.g[e]={})}function St(t,e,n){return-1===e?null:void 0!==n&&n||e>=t.l?t.h?t.h[e]:void 0:t.g[e+t.j]}function Et(t,e,n){n=void 0===n||n;var i=void 0!==i&&i,r=St(t,e,i);return null==r&&(r=wt),r===wt?At(t,e,r=pt([]),i):n&&Array.isArray(r)&&2&dt(r)&&At(t,e,r=r.slice(),i),r}function Tt(t,e,n){return null==(t=null==(t=St(t,e))?t:+t)?void 0===n?0:n:t}function At(t,e,n,i){void 0!==i&&i||e>=t.l?(Mt(t),t.h[e]=n):t.g[e+t.j]=n}function Rt(t,e,n){t.i||(t.i={});var i=t.i[n];if(!i){var r=Et(t,n,!1);i=[];for(var s=!!Array.isArray(r)&&!!(2&dt(r)),a=0;a<r.length;a++)i[a]=new e(r[a]),s&&ft(i[a].g);s&&(ft(i),Object.freeze(i)),t.i[n]=i}return i}function Lt(t,e,n,i,r){var s=Rt(t,i,e);n=n||new i,t=Et(t,e),null!=r?(s.splice(r,0,n),t.splice(r,0,Ct(n))):(s.push(n),t.push(Ct(n)))}function Ct(t){if(t.i)for(var e in t.i){var n=t.i[e];if(Array.isArray(n))for(var i=0;i<n.length;i++)n[i]&&Ct(n[i]);else n&&Ct(n)}return t.g}function Pt(t,e){return null==(t=St(t,e))?0:t}function Dt(t,e){return null==(t=St(t,e))?"":t}function It(t,e){if(t=t.m){ot(e,e.g.end());for(var n=0;n<t.length;n++)ot(e,t[n])}}function Nt(t){var e=t[0];switch(t.length){case 2:var n=t[1];return function(t,i,r){return e(t,i,r,n)};case 3:var i=t[1],r=t[2];return function(t,n,s){return e(t,n,s,i,r)};case 4:var s=t[1],a=t[2],o=t[3];return function(t,n,i){return e(t,n,i,s,a,o)};default:throw Error("unsupported number of parameters, expected [2-4], got "+t.length)}}function Ot(t,e,n){for(;nt(e)&&4!=e.h;){var i=e.i,r=n[i];if(r){if(Array.isArray(r)&&(r=n[i]=Nt(r)),!r(e,t,i)){r=t;var s=(i=e).l;it(i),rt(i,r,s)}}else r=t,s=(i=e).l,it(i),rt(i,r,s)}return t}function zt(t,e){var n=new at;if(e(t,n),0===(t=n.i+n.g.length()))n=new Uint8Array(0);else{t=new Uint8Array(t);for(var i=n.h,r=i.length,s=e=0;s<r;s++){var a=i[s];0!==a.length&&(t.set(a,e),e+=a.length)}0!==(r=(i=n.g).h)&&(t.set(i.g.subarray(0,r),e),i.h=0),n.h=[t],n=t}return n}function Ut(t,e,n){if(st.length){var i=st.pop();t&&(Y(i.g,t),i.i=-1,i.h=-1),t=i}else t=new et(t);try{return n(new e,t)}finally{(e=t.g).h=null,e.l=0,e.i=0,e.g=0,e.j=!1,e.u=!1,t.i=-1,t.h=-1,t.j=!1,100>st.length&&st.push(t)}}function Ft(t,e,n){if(null!=(e=St(e,n))){tt(t.g,8*n+5),t=t.g;var i=e;0===(i=(n=0>i?1:0)?-i:i)?X=0<1/i?0:2147483648:isNaN(i)?X=2147483647:34028234663852886e22<i?X=(n<<31|2139095040)>>>0:11754943508222875e-54>i?(i=Math.round(i/Math.pow(2,-149)),X=(n<<31|i)>>>0):(e=Math.floor(Math.log(i)/Math.LN2),i*=Math.pow(2,-e),16777216<=(i=Math.round(8388608*i))&&++e,X=(n<<31|e+127<<23|8388607&i)>>>0),$(t,(n=X)>>>0&255),$(t,n>>>8&255),$(t,n>>>16&255),$(t,n>>>24&255)}}function Bt(t,e,n){if(5!==t.h)return!1;var i=(t=t.g).h[t.g],r=t.h[t.g+1],s=t.h[t.g+2],a=t.h[t.g+3];return t.g+=4,J(t),t=2*((r=(i<<0|r<<8|s<<16|a<<24)>>>0)>>31)+1,i=r>>>23&255,r&=8388607,At(e,n,255==i?r?NaN:1/0*t:0==i?t*Math.pow(2,-149)*r:t*Math.pow(2,i-150)*(r+Math.pow(2,23))),!0}function Ht(t,e,n){if(0!==t.h)return!1;for(var i=t.g,r=128,s=0,a=t=0;4>a&&128<=r;a++)s|=(127&(r=i.h[i.g++]))<<7*a;if(128<=r&&(s|=(127&(r=i.h[i.g++]))<<28,t|=(127&r)>>4),128<=r)for(a=0;5>a&&128<=r;a++)t|=(127&(r=i.h[i.g++]))<<7*a+3;return 128>r?(i=s>>>0,(t=2147483648&(r=t>>>0))&&(r=~r>>>0,0==(i=1+~i>>>0)&&(r=r+1>>>0)),i=4294967296*r+(i>>>0),t=t?-i:i):(i.j=!0,L(),t=void 0),At(e,n,t),!0}function kt(t,e,n){return 0===t.h&&(At(e,n,Z(t.g)),!0)}function Gt(t,e,n){if(2!==t.h)return!1;var i,r=Z(t.g),s=(t=t.g).g;if(t.g+=r,J(t),t=t.h,I)(i=P)||(i=P=new TextDecoder("utf-8",{fatal:!1})),i=i.decode(t.subarray(s,s+r));else{r=s+r;for(var a,o,l,c=[],h=null;s<r;)128>(a=t[s++])?c.push(a):224>a?s>=r?c.push(65533):(o=t[s++],194>a||128!=(192&o)?(s--,c.push(65533)):c.push((31&a)<<6|63&o)):240>a?s>=r-1?c.push(65533):128!=(192&(o=t[s++]))||224===a&&160>o||237===a&&160<=o||128!=(192&(i=t[s++]))?(s--,c.push(65533)):c.push((15&a)<<12|(63&o)<<6|63&i):244>=a?s>=r-2?c.push(65533):128!=(192&(o=t[s++]))||0!=o-144+(a<<28)>>30||128!=(192&(i=t[s++]))||128!=(192&(l=t[s++]))?(s--,c.push(65533)):(a=(7&a)<<18|(63&o)<<12|(63&i)<<6|63&l,a-=65536,c.push(55296+(a>>10&1023),56320+(1023&a))):c.push(65533),8192<=c.length&&(h=C(h,c),c.length=0);i=C(h,c)}return At(e,n,i),!0}function Vt(t,e,n,i,r){if(2!==t.h)return!1;var s=new i,a=t.g.i,o=Z(t.g),l=t.g.g+o;if(t.g.i=l,r(s,t),0!=(r=l-t.g.g))throw Error("Message parsing ended unexpectedly. Expected to read "+o+" bytes, instead read "+(o-r)+" bytes, either the data ended unexpectedly or the message misreported its own length");return t.g.g=l,t.g.i=a,Lt(e,n,s,i,void 0),!0}function Wt(t){xt.call(this,t)}function jt(t,e){var n=St(t,1);if(null!=n&&null!=n){tt(e.g,8);var i=e.g;if(0<=n)tt(i,n);else{for(var r=0;9>r;r++)$(i,127&n|128),n>>=7;$(i,1)}}Ft(e,t,2),null!=(i=St(t,3))&&lt(e,3,O(i)),null!=(i=St(t,4))&&lt(e,4,O(i)),It(t,e)}function Xt(t,e){return Ot(t,e,_t||(_t={1:kt,2:Bt,3:Gt,4:Gt}))}function qt(t){xt.call(this,t,-1,Kt)}function Yt(t,e){return Ot(t,e,bt||(bt={1:[Vt,Wt,Xt]}))}xt.prototype.toJSON=function(){return yt(Ct(this),gt)},xt.prototype.toString=function(){return Ct(this).toString()},f(Wt,xt),f(qt,xt),qt.prototype.addClassification=function(t,e){return Lt(this,1,t,Wt,e),this};var Jt,Zt,Kt=[1];function Qt(t){xt.call(this,t)}function $t(t,e){Ft(e,t,1),Ft(e,t,2),Ft(e,t,3),Ft(e,t,4),Ft(e,t,5),It(t,e)}function te(t,e){return Ot(t,e,Jt||(Jt={1:Bt,2:Bt,3:Bt,4:Bt,5:Bt}))}function ee(t){xt.call(this,t,-1,re)}function ne(t,e){return Ot(t,e,Zt||(Zt={1:[Vt,Qt,te]}))}f(Qt,xt),f(ee,xt);var ie,re=[1];function se(t){xt.call(this,t)}function ae(t,e){Ft(e,t,1),Ft(e,t,2),Ft(e,t,3),Ft(e,t,4),Ft(e,t,5);var n=St(t,6);if(null!=n&&null!=n){tt(e.g,48);var i=e.g,r=n;n=0>r;var s=(r=Math.abs(r))>>>0;for(r=Math.floor((r-s)/4294967296),r>>>=0,n&&(r=~r>>>0,4294967295<(s=1+(~s>>>0))&&(s=0,4294967295<++r&&(r=0))),n=X=s,s=r;0<s||127<n;)$(i,127&n|128),n=(n>>>7|s<<25)>>>0,s>>>=7;$(i,n)}It(t,e)}function oe(t,e){return Ot(t,e,ie||(ie={1:Bt,2:Bt,3:Bt,4:Bt,5:Bt,6:Ht}))}function le(t,e,n){if(n=t.createShader(0===n?t.VERTEX_SHADER:t.FRAGMENT_SHADER),t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+t.getShaderInfoLog(n));return n}function ce(t){return Rt(t,Wt,1).map((function(t){return{index:Pt(t,1),X:Tt(t,2),label:null!=St(t,3)?Dt(t,3):void 0,displayName:null!=St(t,4)?Dt(t,4):void 0}}))}function he(t){return{x:Tt(t,1),y:Tt(t,2),z:Tt(t,3),visibility:null!=St(t,4)?Tt(t,4):void 0}}function ue(t){return Rt(Ut(t,ee,ne),Qt,1).map(he)}function de(t,e){this.h=t,this.g=e,this.l=0}function pe(t,e,n){return function(t,e){var n=t.g;if(void 0===t.m){var i=le(n,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),r=le(n,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),s=n.createProgram();if(n.attachShader(s,i),n.attachShader(s,r),n.linkProgram(s),!n.getProgramParameter(s,n.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+n.getProgramInfoLog(s));i=t.m=s,n.useProgram(i),r=n.getUniformLocation(i,"sampler0"),t.j={I:n.getAttribLocation(i,"aVertex"),H:n.getAttribLocation(i,"aTex"),da:r},t.s=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,t.s),n.enableVertexAttribArray(t.j.I),n.vertexAttribPointer(t.j.I,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),t.o=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,t.o),n.enableVertexAttribArray(t.j.H),n.vertexAttribPointer(t.j.H,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),n.uniform1i(r,0)}i=t.j,n.useProgram(t.m),n.canvas.width=e.width,n.canvas.height=e.height,n.viewport(0,0,e.width,e.height),n.activeTexture(n.TEXTURE0),t.h.bindTexture2d(e.glName),n.enableVertexAttribArray(i.I),n.bindBuffer(n.ARRAY_BUFFER,t.s),n.vertexAttribPointer(i.I,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(i.H),n.bindBuffer(n.ARRAY_BUFFER,t.o),n.vertexAttribPointer(i.H,2,n.FLOAT,!1,0,0),n.bindFramebuffer(n.DRAW_FRAMEBUFFER?n.DRAW_FRAMEBUFFER:n.FRAMEBUFFER,null),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),n.colorMask(!0,!0,!0,!0),n.drawArrays(n.TRIANGLE_FAN,0,4),n.disableVertexAttribArray(i.I),n.disableVertexAttribArray(i.H),n.bindBuffer(n.ARRAY_BUFFER,null),t.h.bindTexture2d(0)}(t,e),"function"==typeof t.g.canvas.transferToImageBitmap?Promise.resolve(t.g.canvas.transferToImageBitmap()):n?Promise.resolve(t.g.canvas):"function"==typeof createImageBitmap?createImageBitmap(t.g.canvas):(void 0===t.i&&(t.i=document.createElement("canvas")),new Promise((function(e){t.i.height=t.g.canvas.height,t.i.width=t.g.canvas.width,t.i.getContext("2d",{}).drawImage(t.g.canvas,0,0,t.g.canvas.width,t.g.canvas.height),e(t.i)})))}function fe(t){this.g=t}f(se,xt);var me=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function ge(t,e){return e+t}function ve(t,e){window[t]=e}function ye(t){if(this.g=t,this.listeners={},this.j={},this.F={},this.m={},this.s={},this.G=this.o=this.R=!0,this.C=Promise.resolve(),this.P="",this.B={},this.locateFile=t&&t.locateFile||ge,"object"==typeof window)var e=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else{if("undefined"==typeof location)throw Error("solutions can only be loaded on a web page or in a web worker");e=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/"}if(this.S=e,t.options)for(var n=(e=o(Object.keys(t.options))).next();!n.done;n=e.next()){n=n.value;var i=t.options[n].default;void 0!==i&&(this.j[n]="function"==typeof i?i():i)}}function xe(t,e){var n,i;return M((function(r){return e in t.F?r.return(t.F[e]):(n=t.locateFile(e,""),i=fetch(n).then((function(t){return t.arrayBuffer()})),t.F[e]=i,r.return(i))}))}function _e(t,e){for(var n=e.name||"$",i=[].concat(l(e.wants)),r=new t.h.StringList,s=o(e.wants),a=s.next();!a.done;a=s.next())r.push_back(a.value);s=t.h.PacketListener.implement({onResults:function(r){for(var s={},a=0;a<e.wants.length;++a)s[i[a]]=r.get(a);var l=t.listeners[n];l&&(t.C=function(t,e,n){var i,r,s,a,l,c,h,u,d,p,f,m,g,v;return M((function(x){switch(x.g){case 1:if(!n)return x.return(e);for(i={},r=0,s=o(Object.keys(n)),a=s.next();!a.done;a=s.next())l=a.value,"string"!=typeof(c=n[l])&&"texture"===c.type&&void 0!==e[c.stream]&&++r;1<r&&(t.G=!1),h=o(Object.keys(n)),a=h.next();case 2:if(a.done){x.g=4;break}if(u=a.value,"string"==typeof(d=n[u]))return g=i,v=u,y(x,function(t,e,n){var i;return M((function(r){return"number"==typeof n||n instanceof Uint8Array||n instanceof t.h.Uint8BlobList?r.return(n):n instanceof t.h.Texture2dDataOut?((i=t.s[e])||(i=new de(t.h,t.D),t.s[e]=i),r.return(pe(i,n,t.G))):r.return(void 0)}))}(t,u,e[d]),14);if(p=e[d.stream],"detection_list"===d.type){if(p){for(var _=p.getRectList(),b=p.getLandmarksList(),w=p.getClassificationsList(),S=[],E=0;E<_.size();++E){var T=Ut(_.get(E),se,oe);T={T:{Y:Tt(T,1),Z:Tt(T,2),height:Tt(T,3),width:Tt(T,4),rotation:Tt(T,5,0),W:Pt(T,6)},O:ue(b.get(E)),M:ce(Ut(w.get(E),qt,Yt))},S.push(T)}_=S}else _=[];i[u]=_,x.g=7;break}if("proto_list"===d.type){if(p){for(_=Array(p.size()),b=0;b<p.size();b++)_[b]=p.get(b);p.delete()}else _=[];i[u]=_,x.g=7;break}if(void 0===p){x.g=3;break}if("float_list"===d.type){i[u]=p,x.g=7;break}if("proto"===d.type){i[u]=p,x.g=7;break}if("texture"!==d.type)throw Error("Unknown output config type: '"+d.type+"'");return(f=t.s[u])||(f=new de(t.h,t.D),t.s[u]=f),y(x,pe(f,p,t.G),13);case 13:m=x.h,i[u]=m;case 7:d.transform&&i[u]&&(i[u]=d.transform(i[u])),x.g=3;break;case 14:g[v]=x.h;case 3:a=h.next(),x.g=2;break;case 4:return x.return(i)}}))}(t,s,e.outs).then((function(n){n=l(n);for(var r=0;r<e.wants.length;++r){var a=s[i[r]];"object"==typeof a&&a.hasOwnProperty&&a.hasOwnProperty("delete")&&a.delete()}n&&(t.C=n)})))}}),t.i.attachMultiListener(r,s),r.delete()}function be(t){switch(void 0===t&&(t=0),t){case 1:return"pose_landmark_full.tflite";case 2:return"pose_landmark_heavy.tflite";default:return"pose_landmark_lite.tflite"}}function we(t){var e=this;t=t||{},this.g=new ye({locateFile:t.locateFile,files:function(t){return[{url:"pose_solution_packed_assets_loader.js"},{simd:!1,url:"pose_solution_wasm_bin.js"},{simd:!0,url:"pose_solution_simd_wasm_bin.js"},{data:!0,url:be(t.modelComplexity)}]},graph:{url:"pose_web.binarypb"},listeners:[{wants:["pose_landmarks","world_landmarks","segmentation_mask","image_transformed"],outs:{image:{type:"texture",stream:"image_transformed"},poseLandmarks:{type:"proto",stream:"pose_landmarks",transform:ue},poseWorldLandmarks:{type:"proto",stream:"world_landmarks",transform:ue},segmentationMask:{type:"texture",stream:"segmentation_mask"}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document},selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},modelComplexity:{type:1,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorModelComplexity",fieldName:"int_value"},onChange:function(t){var n,i,r;return M((function(s){return 1==s.g?(n=be(t),i="third_party/mediapipe/modules/pose_landmark/"+n,y(s,xe(e.g,n),2)):(r=s.h,e.g.overrideFile(i,r),s.return(!0))}))}},smoothLandmarks:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothLandmarks",fieldName:"bool_value"}},enableSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorEnableSegmentation",fieldName:"bool_value"}},smoothSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothSegmentation",fieldName:"bool_value"}},minDetectionConfidence:{type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"poselandmarkgpu__posedetectiongpu__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}},minTrackingConfidence:{type:1,graphOptionXref:{calculatorType:"ThresholdingCalculator",calculatorName:"poselandmarkgpu__poselandmarkbyroigpu__tensorstoposelandmarksandsegmentation__ThresholdingCalculator",fieldName:"threshold"}}}})}(t=ye.prototype).close=function(){return this.i&&this.i.delete(),Promise.resolve()},t.reset=function(){var t=this;return M((function(e){t.i&&(t.i.reset(),t.m={},t.s={}),e.g=0}))},t.setOptions=function(t,e){var n=this;if(e=e||this.g.options){for(var i=[],r=[],s={},a=o(Object.keys(t)),l=a.next();!l.done;s={K:s.K,L:s.L},l=a.next()){var c=l.value;c in this.j&&this.j[c]===t[c]||(this.j[c]=t[c],void 0!==(l=e[c])&&(l.onChange&&(s.K=l.onChange,s.L=t[c],i.push(function(t){return function(){return M((function(e){if(1==e.g)return y(e,t.K(t.L),2);!0===e.h&&(n.o=!0),e.g=0}))}}(s))),l.graphOptionXref&&(c={valueNumber:1===l.type?t[c]:0,valueBoolean:0===l.type&&t[c],valueString:2===l.type?t[c]:""},l=Object.assign(Object.assign(Object.assign({},{calculatorName:"",calculatorIndex:0}),l.graphOptionXref),c),r.push(l))))}0===i.length&&0===r.length||(this.o=!0,this.A=(void 0===this.A?[]:this.A).concat(r),this.v=(void 0===this.v?[]:this.v).concat(i))}},t.initialize=function(){var t=this;return M((function(e){return 1==e.g?y(e,function(t){var e,n,i,r,s,a,o,c,h,u,d;return M((function(p){switch(p.g){case 1:return t.R?(e=void 0===t.g.files?[]:"function"==typeof t.g.files?t.g.files(t.j):t.g.files,y(p,M((function(t){switch(t.g){case 1:return t.m=2,y(t,WebAssembly.instantiate(me),4);case 4:t.g=3,t.m=0;break;case 2:return t.m=0,t.j=null,t.return(!1);case 3:return t.return(!0)}})),2)):p.return();case 2:if(n=p.h,"object"==typeof window)return ve("createMediapipeSolutionsWasm",{locateFile:t.locateFile}),ve("createMediapipeSolutionsPackedAssets",{locateFile:t.locateFile}),a=e.filter((function(t){return void 0!==t.data})),o=e.filter((function(t){return void 0===t.data})),c=Promise.all(a.map((function(e){var n=xe(t,e.url);if(void 0!==e.path){var i=e.path;n=n.then((function(e){return t.overrideFile(i,e),Promise.resolve(e)}))}return n}))),h=Promise.all(o.map((function(e){return void 0===e.simd||e.simd&&n||!e.simd&&!n?function(t){var e=document.createElement("script");return e.setAttribute("src",t),e.setAttribute("crossorigin","anonymous"),new Promise((function(t){e.addEventListener("load",(function(){t()}),!1),e.addEventListener("error",(function(){t()}),!1),document.body.appendChild(e)}))}(t.locateFile(e.url,t.S)):Promise.resolve()}))).then((function(){var e,n,i;return M((function(r){if(1==r.g)return e=window.createMediapipeSolutionsWasm,n=window.createMediapipeSolutionsPackedAssets,i=t,y(r,e(n),2);i.h=r.h,r.g=0}))})),u=M((function(e){return t.g.graph&&t.g.graph.url?e=y(e,xe(t,t.g.graph.url),0):(e.g=0,e=void 0),e})),y(p,Promise.all([h,c,u]),7);if("function"!=typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");return i=e.filter((function(t){return void 0===t.simd||t.simd&&n||!t.simd&&!n})).map((function(e){return t.locateFile(e.url,t.S)})),importScripts.apply(null,l(i)),r=t,y(p,createMediapipeSolutionsWasm(Module),6);case 6:r.h=p.h,t.l=new OffscreenCanvas(1,1),t.h.canvas=t.l,s=t.h.GL.createContext(t.l,{antialias:!1,alpha:!1,ba:"undefined"!=typeof WebGL2RenderingContext?2:1}),t.h.GL.makeContextCurrent(s),p.g=4;break;case 7:if(t.l=document.createElement("canvas"),!(d=t.l.getContext("webgl2",{}))&&!(d=t.l.getContext("webgl",{})))return alert("Failed to create WebGL canvas context when passing video frame."),p.return();t.D=d,t.h.canvas=t.l,t.h.createContext(t.l,!0,!0,{});case 4:t.i=new t.h.SolutionWasm,t.R=!1,p.g=0}}))}(t),2):3!=e.g?y(e,function(t){var e,n,i,r,s,a,l,c;return M((function(h){if(1==h.g)return t.g.graph&&t.g.graph.url&&t.P===t.g.graph.url?h.return():(t.o=!0,t.g.graph&&t.g.graph.url?(t.P=t.g.graph.url,y(h,xe(t,t.g.graph.url),3)):void(h.g=2));for(2!=h.g&&(e=h.h,t.i.loadGraph(e)),n=o(Object.keys(t.B)),i=n.next();!i.done;i=n.next())r=i.value,t.i.overrideFile(r,t.B[r]);if(t.B={},t.g.listeners)for(s=o(t.g.listeners),a=s.next();!a.done;a=s.next())l=a.value,_e(t,l);c=t.j,t.j={},t.setOptions(c),h.g=0}))}(t),3):y(e,function(t){var e,n,i,r,s,a;return M((function(l){switch(l.g){case 1:if(!t.o)return l.return();if(!t.v){l.g=2;break}e=o(t.v),n=e.next();case 3:if(n.done){l.g=5;break}return y(l,(0,n.value)(),4);case 4:n=e.next(),l.g=3;break;case 5:t.v=void 0;case 2:if(t.A){for(i=new t.h.GraphOptionChangeRequestList,r=o(t.A),s=r.next();!s.done;s=r.next())a=s.value,i.push_back(a);t.i.changeOptions(i),i.delete(),t.A=void 0}t.o=!1,l.g=0}}))}(t),0)}))},t.overrideFile=function(t,e){this.i?this.i.overrideFile(t,e):this.B[t]=e},t.clearOverriddenFiles=function(){this.B={},this.i&&this.i.clearOverriddenFiles()},t.send=function(t,e){var n,i,r,s,a,l,c,h,u,d=this;return M((function(p){switch(p.g){case 1:return d.g.inputs?(n=1e3*(null==e?performance.now():e),y(p,d.C,2)):p.return();case 2:return y(p,d.initialize(),3);case 3:for(i=new d.h.PacketDataList,r=o(Object.keys(t)),s=r.next();!s.done;s=r.next())if(a=s.value,l=d.g.inputs[a]){t:{var f=t[a];switch(l.type){case"video":var m=d.m[l.stream];if(m||(m=new de(d.h,d.D),d.m[l.stream]=m),0===m.l&&(m.l=m.h.createTexture()),"undefined"!=typeof HTMLVideoElement&&f instanceof HTMLVideoElement)var g=f.videoWidth,v=f.videoHeight;else"undefined"!=typeof HTMLImageElement&&f instanceof HTMLImageElement?(g=f.naturalWidth,v=f.naturalHeight):(g=f.width,v=f.height);v={glName:m.l,width:g,height:v},(g=m.g).canvas.width=v.width,g.canvas.height=v.height,g.activeTexture(g.TEXTURE0),m.h.bindTexture2d(m.l),g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,f),m.h.bindTexture2d(0),m=v;break t;case"detections":for((m=d.m[l.stream])||(m=new fe(d.h),d.m[l.stream]=m),m.data||(m.data=new m.g.DetectionListData),m.data.reset(f.length),v=0;v<f.length;++v){g=f[v];var x=m.data,_=x.setBoundingBox,b=v,w=g.T,M=new se;if(At(M,1,w.Y),At(M,2,w.Z),At(M,3,w.height),At(M,4,w.width),At(M,5,w.rotation),At(M,6,w.W),w=zt(M,ae),_.call(x,b,w),g.O)for(x=0;x<g.O.length;++x){var S=!!(M=g.O[x]).visibility;b=(_=m.data).addNormalizedLandmark,w=v,M=Object.assign(Object.assign({},M),{visibility:S?M.visibility:0}),At(S=new Qt,1,M.x),At(S,2,M.y),At(S,3,M.z),M.visibility&&At(S,4,M.visibility),M=zt(S,$t),b.call(_,w,M)}if(g.M)for(x=0;x<g.M.length;++x)b=(_=m.data).addClassification,w=v,M=g.M[x],At(S=new Wt,2,M.X),M.index&&At(S,1,M.index),M.label&&At(S,3,M.label),M.displayName&&At(S,4,M.displayName),M=zt(S,jt),b.call(_,w,M)}m=m.data;break t;default:m={}}}switch(c=m,h=l.stream,l.type){case"video":i.pushTexture2d(Object.assign(Object.assign({},c),{stream:h,timestamp:n}));break;case"detections":(u=c).stream=h,u.timestamp=n,i.pushDetectionList(u);break;default:throw Error("Unknown input config type: '"+l.type+"'")}}return d.i.send(i),y(p,d.C,4);case 4:i.delete(),p.g=0}}))},t.onResults=function(t,e){this.listeners[e||"$"]=t},T("Solution",ye),T("OptionType",{BOOL:0,NUMBER:1,$:2,0:"BOOL",1:"NUMBER",2:"STRING"}),(t=we.prototype).reset=function(){this.g.reset()},t.close=function(){return this.g.close(),Promise.resolve()},t.onResults=function(t){this.g.onResults(t)},t.initialize=function(){var t=this;return M((function(e){return y(e,t.g.initialize(),0)}))},t.send=function(t,e){var n=this;return M((function(i){return y(i,n.g.send(t,e),0)}))},t.setOptions=function(t){this.g.setOptions(t)},T("Pose",we),T("POSE_CONNECTIONS",[[0,1],[1,2],[2,3],[3,7],[0,4],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[13,15],[15,17],[15,19],[15,21],[17,19],[12,14],[14,16],[16,18],[16,20],[16,22],[18,20],[11,23],[12,24],[23,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[27,31],[28,32]]),T("POSE_LANDMARKS",{NOSE:0,LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,LEFT_EAR:7,RIGHT_EAR:8,LEFT_RIGHT:9,RIGHT_LEFT:10,LEFT_SHOULDER:11,RIGHT_SHOULDER:12,LEFT_ELBOW:13,RIGHT_ELBOW:14,LEFT_WRIST:15,RIGHT_WRIST:16,LEFT_PINKY:17,RIGHT_PINKY:18,LEFT_INDEX:19,RIGHT_INDEX:20,LEFT_THUMB:21,RIGHT_THUMB:22,LEFT_HIP:23,RIGHT_HIP:24,LEFT_KNEE:25,RIGHT_KNEE:26,LEFT_ANKLE:27,RIGHT_ANKLE:28,LEFT_HEEL:29,RIGHT_HEEL:30,LEFT_FOOT_INDEX:31,RIGHT_FOOT_INDEX:32}),T("POSE_LANDMARKS_LEFT",{LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,LEFT_EAR:7,LEFT_RIGHT:9,LEFT_SHOULDER:11,LEFT_ELBOW:13,LEFT_WRIST:15,LEFT_PINKY:17,LEFT_INDEX:19,LEFT_THUMB:21,LEFT_HIP:23,LEFT_KNEE:25,LEFT_ANKLE:27,LEFT_HEEL:29,LEFT_FOOT_INDEX:31}),T("POSE_LANDMARKS_RIGHT",{RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,RIGHT_EAR:8,RIGHT_LEFT:10,RIGHT_SHOULDER:12,RIGHT_ELBOW:14,RIGHT_WRIST:16,RIGHT_PINKY:18,RIGHT_INDEX:20,RIGHT_THUMB:22,RIGHT_HIP:24,RIGHT_KNEE:26,RIGHT_ANKLE:28,RIGHT_HEEL:30,RIGHT_FOOT_INDEX:32}),T("POSE_LANDMARKS_NEUTRAL",{NOSE:0}),T("VERSION","0.5.1635988162")}).call(this)}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var s=e[i]={exports:{}};return t[i].call(s.exports,s,s.exports,n),s.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";var t=n(264);const e=100,i=301,r=302,s=306,a=1e3,o=1001,l=1002,c=1003,h=1006,u=1008,d=1009,p=1012,f=1014,m=1015,g=1016,v=1020,y=1023,x=1026,_=1027,b=33776,w=33777,M=33778,S=33779,E=2300,T=2301,A=2302,R=2400,L=2401,C=2402,P=3e3,D=3001,I="srgb",N="srgb-linear",O=7680,z=35044,U=35048,F="300 es",B=1035;class H{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,i=n.length;e<i;e++)n[e].call(this,t);t.target=null}}}const k=[];for(let t=0;t<256;t++)k[t]=(t<16?"0":"")+t.toString(16);const G=Math.PI/180,V=180/Math.PI;function W(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(k[255&t]+k[t>>8&255]+k[t>>16&255]+k[t>>24&255]+"-"+k[255&e]+k[e>>8&255]+"-"+k[e>>16&15|64]+k[e>>24&255]+"-"+k[63&n|128]+k[n>>8&255]+"-"+k[n>>16&255]+k[n>>24&255]+k[255&i]+k[i>>8&255]+k[i>>16&255]+k[i>>24&255]).toLowerCase()}function j(t,e,n){return Math.max(e,Math.min(n,t))}function X(t,e,n){return(1-n)*t+n*e}function q(t){return 0==(t&t-1)&&0!==t}function Y(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}class J{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.x=r*n-s*i+t.x,this.y=r*i+s*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}J.prototype.isVector2=!0;class Z{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,n,i,r,s,a,o,l){const c=this.elements;return c[0]=t,c[1]=i,c[2]=a,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=s,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[3],o=n[6],l=n[1],c=n[4],h=n[7],u=n[2],d=n[5],p=n[8],f=i[0],m=i[3],g=i[6],v=i[1],y=i[4],x=i[7],_=i[2],b=i[5],w=i[8];return r[0]=s*f+a*v+o*_,r[3]=s*m+a*y+o*b,r[6]=s*g+a*x+o*w,r[1]=l*f+c*v+h*_,r[4]=l*m+c*y+h*b,r[7]=l*g+c*x+h*w,r[2]=u*f+d*v+p*_,r[5]=u*m+d*y+p*b,r[8]=u*g+d*x+p*w,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8];return e*s*c-e*a*l-n*r*c+n*a*o+i*r*l-i*s*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=c*s-a*l,u=a*o-c*r,d=l*r-s*o,p=e*h+n*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const f=1/p;return t[0]=h*f,t[1]=(i*l-c*n)*f,t[2]=(a*n-i*s)*f,t[3]=u*f,t[4]=(c*e-i*o)*f,t[5]=(i*r-a*e)*f,t[6]=d*f,t[7]=(n*o-l*e)*f,t[8]=(s*e-n*r)*f,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,s,a){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*s+l*a)+s+t,-i*l,i*o,-i*(-l*s+o*a)+a+e,0,0,1),this}scale(t,e){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this}rotate(t){const e=Math.cos(t),n=Math.sin(t),i=this.elements,r=i[0],s=i[3],a=i[6],o=i[1],l=i[4],c=i[7];return i[0]=e*r+n*o,i[3]=e*s+n*l,i[6]=e*a+n*c,i[1]=-n*r+e*o,i[4]=-n*s+e*l,i[7]=-n*a+e*c,this}translate(t,e){const n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}function K(t){for(let e=t.length-1;e>=0;--e)if(t[e]>65535)return!0;return!1}function Q(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function $(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function tt(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}Z.prototype.isMatrix3=!0,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;const et={[I]:{[N]:$},[N]:{[I]:tt}},nt={legacyMode:!0,get workingColorSpace(){return N},set workingColorSpace(t){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(t,e,n){if(this.legacyMode||e===n||!e||!n)return t;if(et[e]&&void 0!==et[e][n]){const i=et[e][n];return t.r=i(t.r),t.g=i(t.g),t.b=i(t.b),t}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(t,e){return this.convert(t,this.workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this.workingColorSpace)}},it={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},rt={r:0,g:0,b:0},st={h:0,s:0,l:0},at={h:0,s:0,l:0};function ot(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function lt(t,e){return e.r=t.r,e.g=t.g,e.b=t.b,e}class ct{constructor(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e="srgb"){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,nt.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i="srgb-linear"){return this.r=t,this.g=e,this.b=n,nt.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i="srgb-linear"){if(t=(t%(r=1)+r)%r,e=j(e,0,1),n=j(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=ot(r,i,t+1/3),this.g=ot(r,i,t),this.b=ot(r,i,t-1/3)}var r;return nt.toWorkingColorSpace(this,i),this}setStyle(t,e="srgb"){function n(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const r=i[1],s=i[2];switch(r){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,nt.toWorkingColorSpace(this,e),n(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,nt.toWorkingColorSpace(this,e),n(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s)){const i=parseFloat(t[1])/360,r=parseInt(t[2],10)/100,s=parseInt(t[3],10)/100;return n(t[4]),this.setHSL(i,r,s,e)}}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=i[1],n=t.length;if(3===n)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,nt.toWorkingColorSpace(this,e),this;if(6===n)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,nt.toWorkingColorSpace(this,e),this}return t&&t.length>0?this.setColorName(t,e):this}setColorName(t,e="srgb"){const n=it[t.toLowerCase()];return void 0!==n?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=$(t.r),this.g=$(t.g),this.b=$(t.b),this}copyLinearToSRGB(t){return this.r=tt(t.r),this.g=tt(t.g),this.b=tt(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t="srgb"){return nt.fromWorkingColorSpace(lt(this,rt),t),j(255*rt.r,0,255)<<16^j(255*rt.g,0,255)<<8^j(255*rt.b,0,255)<<0}getHexString(t="srgb"){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e="srgb-linear"){nt.fromWorkingColorSpace(lt(this,rt),e);const n=rt.r,i=rt.g,r=rt.b,s=Math.max(n,i,r),a=Math.min(n,i,r);let o,l;const c=(a+s)/2;if(a===s)o=0,l=0;else{const t=s-a;switch(l=c<=.5?t/(s+a):t/(2-s-a),s){case n:o=(i-r)/t+(i<r?6:0);break;case i:o=(r-n)/t+2;break;case r:o=(n-i)/t+4}o/=6}return t.h=o,t.s=l,t.l=c,t}getRGB(t,e="srgb-linear"){return nt.fromWorkingColorSpace(lt(this,rt),e),t.r=rt.r,t.g=rt.g,t.b=rt.b,t}getStyle(t="srgb"){return nt.fromWorkingColorSpace(lt(this,rt),t),t!==I?`color(${t} ${rt.r} ${rt.g} ${rt.b})`:`rgb(${255*rt.r|0},${255*rt.g|0},${255*rt.b|0})`}offsetHSL(t,e,n){return this.getHSL(st),st.h+=t,st.s+=e,st.l+=n,this.setHSL(st.h,st.s,st.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(st),t.getHSL(at);const n=X(st.h,at.h,e),i=X(st.s,at.s,e),r=X(st.l,at.l,e);return this.setHSL(n,i,r),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}let ht;ct.NAMES=it,ct.prototype.isColor=!0,ct.prototype.r=1,ct.prototype.g=1,ct.prototype.b=1;class ut{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===ht&&(ht=Q("canvas")),ht.width=t.width,ht.height=t.height;const n=ht.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=ht}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=Q("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),r=i.data;for(let t=0;t<r.length;t++)r[t]=255*$(r[t]/255);return n.putImageData(i,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*$(e[t]/255)):e[t]=$(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}class dt{constructor(t=null){this.uuid=W(),this.data=t,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let t;if(Array.isArray(i)){t=[];for(let e=0,n=i.length;e<n;e++)i[e].isDataTexture?t.push(pt(i[e].image)):t.push(pt(i[e]))}else t=pt(i);n.url=t}return e||(t.images[this.uuid]=n),n}}function pt(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?ut.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}dt.prototype.isSource=!0;let ft=0;class mt extends H{constructor(t=mt.DEFAULT_IMAGE,e=mt.DEFAULT_MAPPING,n=1001,i=1001,r=1006,s=1008,a=1023,o=1009,l=1,c=3e3){super(),Object.defineProperty(this,"id",{value:ft++}),this.uuid=W(),this.name="",this.source=new dt(t),this.mipmaps=[],this.mapping=e,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new J(0,0),this.repeat=new J(1,1),this.center=new J(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Z,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case a:t.x=t.x-Math.floor(t.x);break;case o:t.x=t.x<0?0:1;break;case l:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case a:t.y=t.y-Math.floor(t.y);break;case o:t.y=t.y<0?0:1;break;case l:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}}mt.DEFAULT_IMAGE=null,mt.DEFAULT_MAPPING=300,mt.prototype.isTexture=!0;class gt{constructor(t=0,e=0,n=0,i=1){this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i+s[12]*r,this.y=s[1]*e+s[5]*n+s[9]*i+s[13]*r,this.z=s[2]*e+s[6]*n+s[10]*i+s[14]*r,this.w=s[3]*e+s[7]*n+s[11]*i+s[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const s=.01,a=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],f=o[2],m=o[6],g=o[10];if(Math.abs(c-u)<s&&Math.abs(h-f)<s&&Math.abs(p-m)<s){if(Math.abs(c+u)<a&&Math.abs(h+f)<a&&Math.abs(p+m)<a&&Math.abs(l+d+g-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,v=(g+1)/2,y=(c+u)/4,x=(h+f)/4,_=(p+m)/4;return t>o&&t>v?t<s?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(t),i=y/n,r=x/n):o>v?o<s?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=y/i,r=_/i):v<s?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(v),n=x/r,i=_/r),this.set(n,i,r,e),this}let v=Math.sqrt((m-p)*(m-p)+(h-f)*(h-f)+(u-c)*(u-c));return Math.abs(v)<.001&&(v=1),this.x=(m-p)/v,this.y=(h-f)/v,this.z=(u-c)/v,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}gt.prototype.isVector4=!0;class vt extends H{constructor(t,e,n={}){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new gt(0,0,t,e),this.scissorTest=!1,this.viewport=new gt(0,0,t,e);const i={width:t,height:e,depth:1};this.texture=new mt(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.internalFormat=void 0!==n.internalFormat?n.internalFormat:null,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:h,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null,this.samples=void 0!==n.samples?n.samples:0}setSize(t,e,n=1){this.width===t&&this.height===e&&this.depth===n||(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.isRenderTargetTexture=!0,this.texture.image=Object.assign({},t.texture.image),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}vt.prototype.isWebGLRenderTarget=!0;class yt extends mt{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=c,this.minFilter=c,this.wrapR=o,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}yt.prototype.isDataArrayTexture=!0,class extends vt{constructor(t,e,n){super(t,e),this.depth=n,this.texture=new yt(null,t,e,n),this.texture.isRenderTargetTexture=!0}}.prototype.isWebGLArrayRenderTarget=!0;class xt extends mt{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=c,this.minFilter=c,this.wrapR=o,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}xt.prototype.isData3DTexture=!0,class extends vt{constructor(t,e,n){super(t,e),this.depth=n,this.texture=new xt(null,t,e,n),this.texture.isRenderTargetTexture=!0}}.prototype.isWebGL3DRenderTarget=!0,class extends vt{constructor(t,e,n,i={}){super(t,e,i);const r=this.texture;this.texture=[];for(let t=0;t<n;t++)this.texture[t]=r.clone(),this.texture[t].isRenderTargetTexture=!0}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.texture.length;i<r;i++)this.texture[i].image.width=t,this.texture[i].image.height=e,this.texture[i].image.depth=n;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,n=t.texture.length;e<n;e++)this.texture[e]=t.texture[e].clone();return this}}.prototype.isWebGLMultipleRenderTargets=!0;class _t{constructor(t=0,e=0,n=0,i=1){this._x=t,this._y=e,this._z=n,this._w=i}static slerp(t,e,n,i){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(t,e,i)}static slerpFlat(t,e,n,i,r,s,a){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const u=r[s+0],d=r[s+1],p=r[s+2],f=r[s+3];if(0===a)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===a)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=f);if(h!==f||o!==u||l!==d||c!==p){let t=1-a;const e=o*u+l*d+c*p+h*f,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),s=Math.atan2(r,e*n);t=Math.sin(t*s)/r,a=Math.sin(a*s)/r}const r=a*n;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+f*r,t===1-a){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,s){const a=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=r[s],u=r[s+1],d=r[s+2],p=r[s+3];return t[e]=a*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-a*d,t[e+2]=l*p+c*d+a*u-o*h,t[e+3]=c*p-a*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=t._x,i=t._y,r=t._z,s=t._order,a=Math.cos,o=Math.sin,l=a(n/2),c=a(i/2),h=a(r/2),u=o(n/2),d=o(i/2),p=o(r/2);switch(s){case"XYZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"YXZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"ZXY":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"ZYX":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"YZX":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case"XZY":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],s=e[1],a=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=n+a+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(s-i)*t}else if(n>a&&n>h){const t=2*Math.sqrt(1+n-a-h);this._w=(c-o)/t,this._x=.25*t,this._y=(i+s)/t,this._z=(r+l)/t}else if(a>h){const t=2*Math.sqrt(1+a-n-h);this._w=(r-l)/t,this._x=(i+s)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-n-a);this._w=(s-i)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(j(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,s=t._w,a=e._x,o=e._y,l=e._z,c=e._w;return this._x=n*c+s*a+i*l-r*o,this._y=i*c+s*o+r*a-n*l,this._z=r*c+s*l+n*o-i*a,this._w=s*c-n*a-i*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,i=this._y,r=this._z,s=this._w;let a=s*t._w+n*t._x+i*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=s,this._x=n,this._y=i,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;return this._w=t*s+e*this._w,this._x=t*n+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,a),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=s*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=Math.random(),e=Math.sqrt(1-t),n=Math.sqrt(t),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(e*Math.cos(i),n*Math.sin(r),n*Math.cos(r),e*Math.sin(i))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}_t.prototype.isQuaternion=!0;class bt{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Mt.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Mt.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,s=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*s,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*s,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*s,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,s=t.y,a=t.z,o=t.w,l=o*e+s*i-a*n,c=o*n+a*e-r*i,h=o*i+r*n-s*e,u=-r*e-s*n-a*i;return this.x=l*o+u*-r+c*-a-h*-s,this.y=c*o+u*-s+h*-r-l*-a,this.z=h*o+u*-a+l*-s-c*-r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=i*o-r*a,this.y=r*s-n*o,this.z=n*a-i*s,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return wt.copy(this).projectOnVector(t),this.sub(wt)}reflect(t){return this.sub(wt.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(j(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=2*(Math.random()-.5),e=Math.random()*Math.PI*2,n=Math.sqrt(1-t**2);return this.x=n*Math.cos(e),this.y=n*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}bt.prototype.isVector3=!0;const wt=new bt,Mt=new _t;class St{constructor(t=new bt(1/0,1/0,1/0),e=new bt(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,n=1/0,i=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.length;o<l;o+=3){const l=t[o],c=t[o+1],h=t[o+2];l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,n,i),this.max.set(r,s,a),this}setFromBufferAttribute(t){let e=1/0,n=1/0,i=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o),c=t.getY(o),h=t.getZ(o);l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,n,i),this.max.set(r,s,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Tt.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(void 0!==n)if(e&&null!=n.attributes&&void 0!==n.attributes.position){const e=n.attributes.position;for(let n=0,i=e.count;n<i;n++)Tt.fromBufferAttribute(e,n).applyMatrix4(t.matrixWorld),this.expandByPoint(Tt)}else null===n.boundingBox&&n.computeBoundingBox(),At.copy(n.boundingBox),At.applyMatrix4(t.matrixWorld),this.union(At);const i=t.children;for(let t=0,n=i.length;t<n;t++)this.expandByObject(i[t],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Tt),Tt.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Nt),Ot.subVectors(this.max,Nt),Rt.subVectors(t.a,Nt),Lt.subVectors(t.b,Nt),Ct.subVectors(t.c,Nt),Pt.subVectors(Lt,Rt),Dt.subVectors(Ct,Lt),It.subVectors(Rt,Ct);let e=[0,-Pt.z,Pt.y,0,-Dt.z,Dt.y,0,-It.z,It.y,Pt.z,0,-Pt.x,Dt.z,0,-Dt.x,It.z,0,-It.x,-Pt.y,Pt.x,0,-Dt.y,Dt.x,0,-It.y,It.x,0];return!!Ft(e,Rt,Lt,Ct,Ot)&&(e=[1,0,0,0,1,0,0,0,1],!!Ft(e,Rt,Lt,Ct,Ot)&&(zt.crossVectors(Pt,Dt),e=[zt.x,zt.y,zt.z],Ft(e,Rt,Lt,Ct,Ot)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Tt.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(Tt).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(Et[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Et[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Et[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Et[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Et[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Et[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Et[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Et[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Et)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}St.prototype.isBox3=!0;const Et=[new bt,new bt,new bt,new bt,new bt,new bt,new bt,new bt],Tt=new bt,At=new St,Rt=new bt,Lt=new bt,Ct=new bt,Pt=new bt,Dt=new bt,It=new bt,Nt=new bt,Ot=new bt,zt=new bt,Ut=new bt;function Ft(t,e,n,i,r){for(let s=0,a=t.length-3;s<=a;s+=3){Ut.fromArray(t,s);const a=r.x*Math.abs(Ut.x)+r.y*Math.abs(Ut.y)+r.z*Math.abs(Ut.z),o=e.dot(Ut),l=n.dot(Ut),c=i.dot(Ut);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>a)return!1}return!0}const Bt=new St,Ht=new bt,kt=new bt,Gt=new bt;class Vt{constructor(t=new bt,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):Bt.setFromPoints(t).getCenter(n);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){Gt.subVectors(t,this.center);const e=Gt.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.add(Gt.multiplyScalar(n/t)),this.radius+=n}return this}union(t){return!0===this.center.equals(t.center)?kt.set(0,0,1).multiplyScalar(t.radius):kt.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint(Ht.copy(t.center).add(kt)),this.expandByPoint(Ht.copy(t.center).sub(kt)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Wt=new bt,jt=new bt,Xt=new bt,qt=new bt,Yt=new bt,Jt=new bt,Zt=new bt;class Kt{constructor(t=new bt,e=new bt(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Wt)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Wt.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Wt.copy(this.direction).multiplyScalar(e).add(this.origin),Wt.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){jt.copy(t).add(e).multiplyScalar(.5),Xt.copy(e).sub(t).normalize(),qt.copy(this.origin).sub(jt);const r=.5*t.distanceTo(e),s=-this.direction.dot(Xt),a=qt.dot(this.direction),o=-qt.dot(Xt),l=qt.lengthSq(),c=Math.abs(1-s*s);let h,u,d,p;if(c>0)if(h=s*o-a,u=s*a-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+s*u+2*a)+u*(s*h+u+2*o)+l}else u=r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-s*r+a)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(s*r+a)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=s>0?-r:r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;return n&&n.copy(this.direction).multiplyScalar(h).add(this.origin),i&&i.copy(Xt).multiplyScalar(u).add(jt),d}intersectSphere(t,e){Wt.subVectors(t.center,this.origin);const n=Wt.dot(this.direction),i=Wt.dot(Wt)-n*n,r=t.radius*t.radius;if(i>r)return null;const s=Math.sqrt(r-i),a=n-s,o=n+s;return a<0&&o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,s,a,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,s=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,s=(t.min.y-u.y)*c),n>s||r>i?null:((r>n||n!=n)&&(n=r),(s<i||i!=i)&&(i=s),h>=0?(a=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(a=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),n>o||a>i?null:((a>n||n!=n)&&(n=a),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,Wt)}intersectTriangle(t,e,n,i,r){Yt.subVectors(e,t),Jt.subVectors(n,t),Zt.crossVectors(Yt,Jt);let s,a=this.direction.dot(Zt);if(a>0){if(i)return null;s=1}else{if(!(a<0))return null;s=-1,a=-a}qt.subVectors(this.origin,t);const o=s*this.direction.dot(Jt.crossVectors(qt,Jt));if(o<0)return null;const l=s*this.direction.dot(Yt.cross(qt));if(l<0)return null;if(o+l>a)return null;const c=-s*qt.dot(Zt);return c<0?null:this.at(c/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Qt{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,n,i,r,s,a,o,l,c,h,u,d,p,f,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=s,g[9]=a,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Qt).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/$t.setFromMatrixColumn(t,0).length(),r=1/$t.setFromMatrixColumn(t,1).length(),s=1/$t.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*s,e[9]=n[9]*s,e[10]=n[10]*s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,n=t.x,i=t.y,r=t.z,s=Math.cos(n),a=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){const t=s*c,n=s*h,i=a*c,r=a*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=n+i*l,e[5]=t-r*l,e[9]=-a*o,e[2]=r-t*l,e[6]=i+n*l,e[10]=s*o}else if("YXZ"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t+r*a,e[4]=i*a-n,e[8]=s*l,e[1]=s*h,e[5]=s*c,e[9]=-a,e[2]=n*a-i,e[6]=r+t*a,e[10]=s*o}else if("ZXY"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t-r*a,e[4]=-s*h,e[8]=i+n*a,e[1]=n+i*a,e[5]=s*c,e[9]=r-t*a,e[2]=-s*l,e[6]=a,e[10]=s*o}else if("ZYX"===t.order){const t=s*c,n=s*h,i=a*c,r=a*h;e[0]=o*c,e[4]=i*l-n,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=n*l-i,e[2]=-l,e[6]=a*o,e[10]=s*o}else if("YZX"===t.order){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=s*c,e[9]=-a*c,e[2]=-l*c,e[6]=n*h+i,e[10]=t-r*h}else if("XZY"===t.order){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=s*c,e[9]=n*h-i,e[2]=i*h-n,e[6]=a*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(ee,t,ne)}lookAt(t,e,n){const i=this.elements;return se.subVectors(t,e),0===se.lengthSq()&&(se.z=1),se.normalize(),ie.crossVectors(n,se),0===ie.lengthSq()&&(1===Math.abs(n.z)?se.x+=1e-4:se.z+=1e-4,se.normalize(),ie.crossVectors(n,se)),ie.normalize(),re.crossVectors(se,ie),i[0]=ie.x,i[4]=re.x,i[8]=se.x,i[1]=ie.y,i[5]=re.y,i[9]=se.y,i[2]=ie.z,i[6]=re.z,i[10]=se.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[4],o=n[8],l=n[12],c=n[1],h=n[5],u=n[9],d=n[13],p=n[2],f=n[6],m=n[10],g=n[14],v=n[3],y=n[7],x=n[11],_=n[15],b=i[0],w=i[4],M=i[8],S=i[12],E=i[1],T=i[5],A=i[9],R=i[13],L=i[2],C=i[6],P=i[10],D=i[14],I=i[3],N=i[7],O=i[11],z=i[15];return r[0]=s*b+a*E+o*L+l*I,r[4]=s*w+a*T+o*C+l*N,r[8]=s*M+a*A+o*P+l*O,r[12]=s*S+a*R+o*D+l*z,r[1]=c*b+h*E+u*L+d*I,r[5]=c*w+h*T+u*C+d*N,r[9]=c*M+h*A+u*P+d*O,r[13]=c*S+h*R+u*D+d*z,r[2]=p*b+f*E+m*L+g*I,r[6]=p*w+f*T+m*C+g*N,r[10]=p*M+f*A+m*P+g*O,r[14]=p*S+f*R+m*D+g*z,r[3]=v*b+y*E+x*L+_*I,r[7]=v*w+y*T+x*C+_*N,r[11]=v*M+y*A+x*P+_*O,r[15]=v*S+y*R+x*D+_*z,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],s=t[1],a=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-i*l*h-r*a*u+n*l*u+i*a*d-n*o*d)+t[7]*(+e*o*d-e*l*u+r*s*u-i*s*d+i*l*c-r*o*c)+t[11]*(+e*l*h-e*a*d-r*s*h+n*s*d+r*a*c-n*l*c)+t[15]*(-i*a*c-e*o*h+e*a*u+i*s*h-n*s*u+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15],v=h*m*l-f*u*l+f*o*d-a*m*d-h*o*g+a*u*g,y=p*u*l-c*m*l-p*o*d+s*m*d+c*o*g-s*u*g,x=c*f*l-p*h*l+p*a*d-s*f*d-c*a*g+s*h*g,_=p*h*o-c*f*o-p*a*u+s*f*u+c*a*m-s*h*m,b=e*v+n*y+i*x+r*_;if(0===b)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/b;return t[0]=v*w,t[1]=(f*u*r-h*m*r-f*i*d+n*m*d+h*i*g-n*u*g)*w,t[2]=(a*m*r-f*o*r+f*i*l-n*m*l-a*i*g+n*o*g)*w,t[3]=(h*o*r-a*u*r-h*i*l+n*u*l+a*i*d-n*o*d)*w,t[4]=y*w,t[5]=(c*m*r-p*u*r+p*i*d-e*m*d-c*i*g+e*u*g)*w,t[6]=(p*o*r-s*m*r-p*i*l+e*m*l+s*i*g-e*o*g)*w,t[7]=(s*u*r-c*o*r+c*i*l-e*u*l-s*i*d+e*o*d)*w,t[8]=x*w,t[9]=(p*h*r-c*f*r-p*n*d+e*f*d+c*n*g-e*h*g)*w,t[10]=(s*f*r-p*a*r+p*n*l-e*f*l-s*n*g+e*a*g)*w,t[11]=(c*a*r-s*h*r-c*n*l+e*h*l+s*n*d-e*a*d)*w,t[12]=_*w,t[13]=(c*f*i-p*h*i+p*n*u-e*f*u-c*n*m+e*h*m)*w,t[14]=(p*a*i-s*f*i-p*n*o+e*f*o+s*n*m-e*a*m)*w,t[15]=(s*h*i-c*a*i+c*n*o-e*h*o-s*n*u+e*a*u)*w,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,s=t.x,a=t.y,o=t.z,l=r*s,c=r*a;return this.set(l*s+n,l*a-i*o,l*o+i*a,0,l*a+i*o,c*a+n,c*o-i*s,0,l*o-i*a,c*o+i*s,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,s){return this.set(1,n,r,0,t,1,s,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,s=e._y,a=e._z,o=e._w,l=r+r,c=s+s,h=a+a,u=r*l,d=r*c,p=r*h,f=s*c,m=s*h,g=a*h,v=o*l,y=o*c,x=o*h,_=n.x,b=n.y,w=n.z;return i[0]=(1-(f+g))*_,i[1]=(d+x)*_,i[2]=(p-y)*_,i[3]=0,i[4]=(d-x)*b,i[5]=(1-(u+g))*b,i[6]=(m+v)*b,i[7]=0,i[8]=(p+y)*w,i[9]=(m-v)*w,i[10]=(1-(u+f))*w,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=$t.set(i[0],i[1],i[2]).length();const s=$t.set(i[4],i[5],i[6]).length(),a=$t.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],te.copy(this);const o=1/r,l=1/s,c=1/a;return te.elements[0]*=o,te.elements[1]*=o,te.elements[2]*=o,te.elements[4]*=l,te.elements[5]*=l,te.elements[6]*=l,te.elements[8]*=c,te.elements[9]*=c,te.elements[10]*=c,e.setFromRotationMatrix(te),n.x=r,n.y=s,n.z=a,this}makePerspective(t,e,n,i,r,s){void 0===s&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const a=this.elements,o=2*r/(e-t),l=2*r/(n-i),c=(e+t)/(e-t),h=(n+i)/(n-i),u=-(s+r)/(s-r),d=-2*s*r/(s-r);return a[0]=o,a[4]=0,a[8]=c,a[12]=0,a[1]=0,a[5]=l,a[9]=h,a[13]=0,a[2]=0,a[6]=0,a[10]=u,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,n,i,r,s){const a=this.elements,o=1/(e-t),l=1/(n-i),c=1/(s-r),h=(e+t)*o,u=(n+i)*l,d=(s+r)*c;return a[0]=2*o,a[4]=0,a[8]=0,a[12]=-h,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-u,a[2]=0,a[6]=0,a[10]=-2*c,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}Qt.prototype.isMatrix4=!0;const $t=new bt,te=new Qt,ee=new bt(0,0,0),ne=new bt(1,1,1),ie=new bt,re=new bt,se=new bt,ae=new Qt,oe=new _t;class le{constructor(t=0,e=0,n=0,i=le.DefaultOrder){this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],s=i[4],a=i[8],o=i[1],l=i[5],c=i[9],h=i[2],u=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(j(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-j(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(j(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-j(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(j(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-j(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return ae.makeRotationFromQuaternion(t),this.setFromRotationMatrix(ae,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return oe.setFromEuler(this),this.setFromQuaternion(oe,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}le.prototype.isEuler=!0,le.DefaultOrder="XYZ",le.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class ce{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}isEnabled(t){return 0!=(this.mask&(1<<t|0))}}let he=0;const ue=new bt,de=new _t,pe=new Qt,fe=new bt,me=new bt,ge=new bt,ve=new _t,ye=new bt(1,0,0),xe=new bt(0,1,0),_e=new bt(0,0,1),be={type:"added"},we={type:"removed"};class Me extends H{constructor(){super(),Object.defineProperty(this,"id",{value:he++}),this.uuid=W(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Me.DefaultUp.clone();const t=new bt,e=new le,n=new _t,i=new bt(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Qt},normalMatrix:{value:new Z}}),this.matrix=new Qt,this.matrixWorld=new Qt,this.matrixAutoUpdate=Me.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new ce,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return de.setFromAxisAngle(t,e),this.quaternion.multiply(de),this}rotateOnWorldAxis(t,e){return de.setFromAxisAngle(t,e),this.quaternion.premultiply(de),this}rotateX(t){return this.rotateOnAxis(ye,t)}rotateY(t){return this.rotateOnAxis(xe,t)}rotateZ(t){return this.rotateOnAxis(_e,t)}translateOnAxis(t,e){return ue.copy(t).applyQuaternion(this.quaternion),this.position.add(ue.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(ye,t)}translateY(t){return this.translateOnAxis(xe,t)}translateZ(t){return this.translateOnAxis(_e,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(pe.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?fe.copy(t):fe.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),me.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?pe.lookAt(me,fe,this.up):pe.lookAt(fe,me,this.up),this.quaternion.setFromRotationMatrix(pe),i&&(pe.extractRotation(i.matrixWorld),de.setFromRotationMatrix(pe),this.quaternion.premultiply(de.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(be)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(we)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(we)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),pe.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),pe.multiply(t.parent.matrixWorld)),t.applyMatrix4(pe),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(me,t,ge),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(me,ve,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const i=n[e];r(t.shapes,i)}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++)e.push(r(t.materials,this.material[n]));i.material=e}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];i.animations.push(r(t.animations,n))}}if(e){const e=s(t.geometries),i=s(t.materials),r=s(t.textures),a=s(t.images),o=s(t.shapes),l=s(t.skeletons),c=s(t.animations),h=s(t.nodes);e.length>0&&(n.geometries=e),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),a.length>0&&(n.images=a),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),h.length>0&&(n.nodes=h)}return n.object=i,n;function s(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}return this}}Me.DefaultUp=new bt(0,1,0),Me.DefaultMatrixAutoUpdate=!0,Me.prototype.isObject3D=!0;const Se=new bt,Ee=new bt,Te=new bt,Ae=new bt,Re=new bt,Le=new bt,Ce=new bt,Pe=new bt,De=new bt,Ie=new bt;class Ne{constructor(t=new bt,e=new bt,n=new bt){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Se.subVectors(t,e),i.cross(Se);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){Se.subVectors(i,e),Ee.subVectors(n,e),Te.subVectors(t,e);const s=Se.dot(Se),a=Se.dot(Ee),o=Se.dot(Te),l=Ee.dot(Ee),c=Ee.dot(Te),h=s*l-a*a;if(0===h)return r.set(-2,-1,-1);const u=1/h,d=(l*o-a*c)*u,p=(s*c-a*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,Ae),Ae.x>=0&&Ae.y>=0&&Ae.x+Ae.y<=1}static getUV(t,e,n,i,r,s,a,o){return this.getBarycoord(t,e,n,i,Ae),o.set(0,0),o.addScaledVector(r,Ae.x),o.addScaledVector(s,Ae.y),o.addScaledVector(a,Ae.z),o}static isFrontFacing(t,e,n,i){return Se.subVectors(n,e),Ee.subVectors(t,e),Se.cross(Ee).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Se.subVectors(this.c,this.b),Ee.subVectors(this.a,this.b),.5*Se.cross(Ee).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Ne.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Ne.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,i,r){return Ne.getUV(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return Ne.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Ne.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let s,a;Re.subVectors(i,n),Le.subVectors(r,n),Pe.subVectors(t,n);const o=Re.dot(Pe),l=Le.dot(Pe);if(o<=0&&l<=0)return e.copy(n);De.subVectors(t,i);const c=Re.dot(De),h=Le.dot(De);if(c>=0&&h<=c)return e.copy(i);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return s=o/(o-c),e.copy(n).addScaledVector(Re,s);Ie.subVectors(t,r);const d=Re.dot(Ie),p=Le.dot(Ie);if(p>=0&&d<=p)return e.copy(r);const f=d*l-o*p;if(f<=0&&l>=0&&p<=0)return a=l/(l-p),e.copy(n).addScaledVector(Le,a);const m=c*p-d*h;if(m<=0&&h-c>=0&&d-p>=0)return Ce.subVectors(r,i),a=(h-c)/(h-c+(d-p)),e.copy(i).addScaledVector(Ce,a);const g=1/(m+f+u);return s=f*g,a=u*g,e.copy(n).addScaledVector(Re,s).addScaledVector(Le,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let Oe=0;class ze extends H{constructor(){super(),Object.defineProperty(this,"id",{value:Oe++}),this.uuid=W(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=e,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=O,this.stencilZFail=O,this.stencilZPass=O,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if("shading"===e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===n;continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}ze.prototype.isMaterial=!0,ze.fromType=function(){return null};class Ue extends ze{constructor(t){super(),this.type="MeshBasicMaterial",this.color=new ct(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}Ue.prototype.isMeshBasicMaterial=!0;const Fe=new bt,Be=new J;class He{constructor(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=z,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),r=new ct),e[n++]=r.r,e[n++]=r.g,e[n++]=r.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),r=new J),e[n++]=r.x,e[n++]=r.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),r=new bt),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),r=new gt),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z,e[n++]=r.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)Be.fromBufferAttribute(this,e),Be.applyMatrix3(t),this.setXY(e,Be.x,Be.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)Fe.fromBufferAttribute(this,e),Fe.applyMatrix3(t),this.setXYZ(e,Fe.x,Fe.y,Fe.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)Fe.fromBufferAttribute(this,e),Fe.applyMatrix4(t),this.setXYZ(e,Fe.x,Fe.y,Fe.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Fe.fromBufferAttribute(this,e),Fe.applyNormalMatrix(t),this.setXYZ(e,Fe.x,Fe.y,Fe.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Fe.fromBufferAttribute(this,e),Fe.transformDirection(t),this.setXYZ(e,Fe.x,Fe.y,Fe.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==z&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}He.prototype.isBufferAttribute=!0;class ke extends He{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class Ge extends He{constructor(t,e,n){super(new Uint32Array(t),e,n)}}(class extends He{constructor(t,e,n){super(new Uint16Array(t),e,n)}}).prototype.isFloat16BufferAttribute=!0;class Ve extends He{constructor(t,e,n){super(new Float32Array(t),e,n)}}let We=0;const je=new Qt,Xe=new Me,qe=new bt,Ye=new St,Je=new St,Ze=new bt;class Ke extends H{constructor(){super(),Object.defineProperty(this,"id",{value:We++}),this.uuid=W(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(K(t)?Ge:ke)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new Z).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return je.makeRotationFromQuaternion(t),this.applyMatrix4(je),this}rotateX(t){return je.makeRotationX(t),this.applyMatrix4(je),this}rotateY(t){return je.makeRotationY(t),this.applyMatrix4(je),this}rotateZ(t){return je.makeRotationZ(t),this.applyMatrix4(je),this}translate(t,e,n){return je.makeTranslation(t,e,n),this.applyMatrix4(je),this}scale(t,e,n){return je.makeScale(t,e,n),this.applyMatrix4(je),this}lookAt(t){return Xe.lookAt(t),Xe.updateMatrix(),this.applyMatrix4(Xe.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(qe).negate(),this.translate(qe.x,qe.y,qe.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new Ve(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new St);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new bt(-1/0,-1/0,-1/0),new bt(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Ye.setFromBufferAttribute(n),this.morphTargetsRelative?(Ze.addVectors(this.boundingBox.min,Ye.min),this.boundingBox.expandByPoint(Ze),Ze.addVectors(this.boundingBox.max,Ye.max),this.boundingBox.expandByPoint(Ze)):(this.boundingBox.expandByPoint(Ye.min),this.boundingBox.expandByPoint(Ye.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Vt);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new bt,1/0);if(t){const n=this.boundingSphere.center;if(Ye.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Je.setFromBufferAttribute(n),this.morphTargetsRelative?(Ze.addVectors(Ye.min,Je.min),Ye.expandByPoint(Ze),Ze.addVectors(Ye.max,Je.max),Ye.expandByPoint(Ze)):(Ye.expandByPoint(Je.min),Ye.expandByPoint(Je.max))}Ye.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++)Ze.fromBufferAttribute(t,e),i=Math.max(i,n.distanceToSquared(Ze));if(e)for(let r=0,s=e.length;r<s;r++){const s=e[r],a=this.morphTargetsRelative;for(let e=0,r=s.count;e<r;e++)Ze.fromBufferAttribute(s,e),a&&(qe.fromBufferAttribute(t,e),Ze.add(qe)),i=Math.max(i,n.distanceToSquared(Ze))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=t.array,i=e.position.array,r=e.normal.array,s=e.uv.array,a=i.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new He(new Float32Array(4*a),4));const o=this.getAttribute("tangent").array,l=[],c=[];for(let t=0;t<a;t++)l[t]=new bt,c[t]=new bt;const h=new bt,u=new bt,d=new bt,p=new J,f=new J,m=new J,g=new bt,v=new bt;function y(t,e,n){h.fromArray(i,3*t),u.fromArray(i,3*e),d.fromArray(i,3*n),p.fromArray(s,2*t),f.fromArray(s,2*e),m.fromArray(s,2*n),u.sub(h),d.sub(h),f.sub(p),m.sub(p);const r=1/(f.x*m.y-m.x*f.y);isFinite(r)&&(g.copy(u).multiplyScalar(m.y).addScaledVector(d,-f.y).multiplyScalar(r),v.copy(d).multiplyScalar(f.x).addScaledVector(u,-m.x).multiplyScalar(r),l[t].add(g),l[e].add(g),l[n].add(g),c[t].add(v),c[e].add(v),c[n].add(v))}let x=this.groups;0===x.length&&(x=[{start:0,count:n.length}]);for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)y(n[t+0],n[t+1],n[t+2])}const _=new bt,b=new bt,w=new bt,M=new bt;function S(t){w.fromArray(r,3*t),M.copy(w);const e=l[t];_.copy(e),_.sub(w.multiplyScalar(w.dot(e))).normalize(),b.crossVectors(M,e);const n=b.dot(c[t])<0?-1:1;o[4*t]=_.x,o[4*t+1]=_.y,o[4*t+2]=_.z,o[4*t+3]=n}for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)S(n[t+0]),S(n[t+1]),S(n[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let n=this.getAttribute("normal");if(void 0===n)n=new He(new Float32Array(3*e.count),3),this.setAttribute("normal",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const i=new bt,r=new bt,s=new bt,a=new bt,o=new bt,l=new bt,c=new bt,h=new bt;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),f=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),s.fromBufferAttribute(e,f),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),a.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,f),a.add(c),o.add(c),l.add(c),n.setXYZ(d,a.x,a.y,a.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(f,l.x,l.y,l.z)}else for(let t=0,a=e.count;t<a;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),s.fromBufferAttribute(e,t+2),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),n.setXYZ(t+0,c.x,c.y,c.z),n.setXYZ(t+1,c.x,c.y,c.z),n.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const i in n){if(void 0===t.attributes[i])continue;const r=n[i].array,s=t.attributes[i],a=s.array,o=s.itemSize*e,l=Math.min(a.length,r.length-o);for(let t=0,e=o;t<l;t++,e++)r[e]=a[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)Ze.fromBufferAttribute(t,e),Ze.normalize(),t.setXYZ(e,Ze.x,Ze.y,Ze.z)}toNonIndexed(){function t(t,e){const n=t.array,i=t.itemSize,r=t.normalized,s=new n.constructor(e.length*i);let a=0,o=0;for(let r=0,l=e.length;r<l;r++){a=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)s[o++]=n[a++]}return new He(s,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Ke,n=this.index.array,i=this.attributes;for(const r in i){const s=t(i[r],n);e.setAttribute(r,s)}const r=this.morphAttributes;for(const i in r){const s=[],a=r[i];for(let e=0,i=a.length;e<i;e++){const i=t(a[e],n);s.push(i)}e.morphAttributes[i]=s}e.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let t=0,n=s.length;t<n;t++){const n=s[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){const i=n[e];t.data.attributes[e]=i.toJSON(t.data)}const i={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],s=[];for(let e=0,i=n.length;e<i;e++){const i=n[e];s.push(i.toJSON(t.data))}s.length>0&&(i[e]=s,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return null!==a&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const i=t.attributes;for(const t in i){const n=i[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],i=r[t];for(let t=0,r=i.length;t<r;t++)n.push(i[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const s=t.groups;for(let t=0,e=s.length;t<e;t++){const e=s[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,void 0!==t.parameters&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}Ke.prototype.isBufferGeometry=!0;const Qe=new Qt,$e=new Kt,tn=new Vt,en=new bt,nn=new bt,rn=new bt,sn=new bt,an=new bt,on=new bt,ln=new bt,cn=new bt,hn=new bt,un=new J,dn=new J,pn=new J,fn=new bt,mn=new bt;class gn extends Me{constructor(t=new Ke,e=new Ue){super(),this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0===i)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),tn.copy(n.boundingSphere),tn.applyMatrix4(r),!1===t.ray.intersectsSphere(tn))return;if(Qe.copy(r).invert(),$e.copy(t.ray).applyMatrix4(Qe),null!==n.boundingBox&&!1===$e.intersectsBox(n.boundingBox))return;let s;if(n.isBufferGeometry){const r=n.index,a=n.attributes.position,o=n.morphAttributes.position,l=n.morphTargetsRelative,c=n.attributes.uv,h=n.attributes.uv2,u=n.groups,d=n.drawRange;if(null!==r)if(Array.isArray(i))for(let n=0,p=u.length;n<p;n++){const p=u[n],f=i[p.materialIndex];for(let n=Math.max(p.start,d.start),i=Math.min(r.count,Math.min(p.start+p.count,d.start+d.count));n<i;n+=3){const i=r.getX(n),u=r.getX(n+1),d=r.getX(n+2);s=vn(this,f,t,$e,a,o,l,c,h,i,u,d),s&&(s.faceIndex=Math.floor(n/3),s.face.materialIndex=p.materialIndex,e.push(s))}}else for(let n=Math.max(0,d.start),u=Math.min(r.count,d.start+d.count);n<u;n+=3){const u=r.getX(n),d=r.getX(n+1),p=r.getX(n+2);s=vn(this,i,t,$e,a,o,l,c,h,u,d,p),s&&(s.faceIndex=Math.floor(n/3),e.push(s))}else if(void 0!==a)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],p=i[r.materialIndex];for(let n=Math.max(r.start,d.start),i=Math.min(a.count,Math.min(r.start+r.count,d.start+d.count));n<i;n+=3)s=vn(this,p,t,$e,a,o,l,c,h,n,n+1,n+2),s&&(s.faceIndex=Math.floor(n/3),s.face.materialIndex=r.materialIndex,e.push(s))}else for(let n=Math.max(0,d.start),r=Math.min(a.count,d.start+d.count);n<r;n+=3)s=vn(this,i,t,$e,a,o,l,c,h,n,n+1,n+2),s&&(s.faceIndex=Math.floor(n/3),e.push(s))}else n.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function vn(t,e,n,i,r,s,a,o,l,c,h,u){en.fromBufferAttribute(r,c),nn.fromBufferAttribute(r,h),rn.fromBufferAttribute(r,u);const d=t.morphTargetInfluences;if(s&&d){ln.set(0,0,0),cn.set(0,0,0),hn.set(0,0,0);for(let t=0,e=s.length;t<e;t++){const e=d[t],n=s[t];0!==e&&(sn.fromBufferAttribute(n,c),an.fromBufferAttribute(n,h),on.fromBufferAttribute(n,u),a?(ln.addScaledVector(sn,e),cn.addScaledVector(an,e),hn.addScaledVector(on,e)):(ln.addScaledVector(sn.sub(en),e),cn.addScaledVector(an.sub(nn),e),hn.addScaledVector(on.sub(rn),e)))}en.add(ln),nn.add(cn),rn.add(hn)}t.isSkinnedMesh&&(t.boneTransform(c,en),t.boneTransform(h,nn),t.boneTransform(u,rn));const p=function(t,e,n,i,r,s,a,o){let l;if(l=1===e.side?i.intersectTriangle(a,s,r,!0,o):i.intersectTriangle(r,s,a,2!==e.side,o),null===l)return null;mn.copy(o),mn.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(mn);return c<n.near||c>n.far?null:{distance:c,point:mn.clone(),object:t}}(t,e,n,i,en,nn,rn,fn);if(p){o&&(un.fromBufferAttribute(o,c),dn.fromBufferAttribute(o,h),pn.fromBufferAttribute(o,u),p.uv=Ne.getUV(fn,en,nn,rn,un,dn,pn,new J)),l&&(un.fromBufferAttribute(l,c),dn.fromBufferAttribute(l,h),pn.fromBufferAttribute(l,u),p.uv2=Ne.getUV(fn,en,nn,rn,un,dn,pn,new J));const t={a:c,b:h,c:u,normal:new bt,materialIndex:0};Ne.getNormal(en,nn,rn,t.normal),p.face=t}return p}gn.prototype.isMesh=!0;class yn extends Ke{constructor(t=1,e=1,n=1,i=1,r=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:s};const a=this;i=Math.floor(i),r=Math.floor(r),s=Math.floor(s);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,n,i,r,s,p,f,m,g,v){const y=s/m,x=p/g,_=s/2,b=p/2,w=f/2,M=m+1,S=g+1;let E=0,T=0;const A=new bt;for(let s=0;s<S;s++){const a=s*x-b;for(let o=0;o<M;o++){const u=o*y-_;A[t]=u*i,A[e]=a*r,A[n]=w,l.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=f>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/m),h.push(1-s/g),E+=1}}for(let t=0;t<g;t++)for(let e=0;e<m;e++){const n=u+e+M*t,i=u+e+M*(t+1),r=u+(e+1)+M*(t+1),s=u+(e+1)+M*t;o.push(n,i,s),o.push(i,r,s),T+=6}a.addGroup(d,T,v),d+=T,u+=E}p("z","y","x",-1,-1,n,e,t,s,r,0),p("z","y","x",1,-1,n,e,-t,s,r,1),p("x","z","y",1,1,t,n,e,i,s,2),p("x","z","y",1,-1,t,n,-e,i,s,3),p("x","y","z",1,-1,t,e,n,i,r,4),p("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute("position",new Ve(l,3)),this.setAttribute("normal",new Ve(c,3)),this.setAttribute("uv",new Ve(h,2))}static fromJSON(t){return new yn(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function xn(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}}return e}function _n(t){const e={};for(let n=0;n<t.length;n++){const i=xn(t[n]);for(const t in i)e[t]=i[t]}return e}const bn={clone:xn,merge:_n};class wn extends ze{constructor(t){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=xn(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;i&&i.isTexture?e.uniforms[n]={type:"t",value:i.toJSON(t).uuid}:i&&i.isColor?e.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?e.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?e.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?e.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?e.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?e.uniforms[n]={type:"m4",value:i.toArray()}:e.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}wn.prototype.isShaderMaterial=!0;class Mn extends Me{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Qt,this.projectionMatrix=new Qt,this.projectionMatrixInverse=new Qt}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}Mn.prototype.isCamera=!0;class Sn extends Mn{constructor(t=50,e=1,n=.1,i=2e3){super(),this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*V*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*G*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*V*Math.atan(Math.tan(.5*G*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,s){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*G*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const s=this.view;if(null!==this.view&&this.view.enabled){const t=s.fullWidth,a=s.fullHeight;r+=s.offsetX*i/t,e-=s.offsetY*n/a,i*=s.width/t,n*=s.height/a}const a=this.filmOffset;0!==a&&(r+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}Sn.prototype.isPerspectiveCamera=!0;const En=90;class Tn extends Me{constructor(t,e,n){if(super(),this.type="CubeCamera",!0!==n.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=n;const i=new Sn(En,1,t,e);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new bt(1,0,0)),this.add(i);const r=new Sn(En,1,t,e);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new bt(-1,0,0)),this.add(r);const s=new Sn(En,1,t,e);s.layers=this.layers,s.up.set(0,0,1),s.lookAt(new bt(0,1,0)),this.add(s);const a=new Sn(En,1,t,e);a.layers=this.layers,a.up.set(0,0,-1),a.lookAt(new bt(0,-1,0)),this.add(a);const o=new Sn(En,1,t,e);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new bt(0,0,1)),this.add(o);const l=new Sn(En,1,t,e);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new bt(0,0,-1)),this.add(l)}update(t,e){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[i,r,s,a,o,l]=this.children,c=t.getRenderTarget(),h=t.outputEncoding,u=t.toneMapping,d=t.xr.enabled;t.outputEncoding=P,t.toneMapping=0,t.xr.enabled=!1;const p=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0),t.render(e,i),t.setRenderTarget(n,1),t.render(e,r),t.setRenderTarget(n,2),t.render(e,s),t.setRenderTarget(n,3),t.render(e,a),t.setRenderTarget(n,4),t.render(e,o),n.texture.generateMipmaps=p,t.setRenderTarget(n,5),t.render(e,l),t.setRenderTarget(c),t.outputEncoding=h,t.toneMapping=u,t.xr.enabled=d,n.texture.needsPMREMUpdate=!0}}class An extends mt{constructor(t,e,n,r,s,a,o,l,c,h){super(t=void 0!==t?t:[],e=void 0!==e?e:i,n,r,s,a,o,l,c,h),this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}An.prototype.isCubeTexture=!0;class Rn extends vt{constructor(t,e={}){super(t,t,e);const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new An(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:h}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={tEquirect:{value:null}},i="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",r="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",s=new yn(5,5,5),a=new wn({name:"CubemapFromEquirect",uniforms:xn(n),vertexShader:i,fragmentShader:r,side:1,blending:0});a.uniforms.tEquirect.value=e;const o=new gn(s,a),l=e.minFilter;return e.minFilter===u&&(e.minFilter=h),new Tn(1,10,this).update(t,o),e.minFilter=l,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,i);t.setRenderTarget(r)}}Rn.prototype.isWebGLCubeRenderTarget=!0;const Ln=new bt,Cn=new bt,Pn=new Z;class Dn{constructor(t=new bt(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Ln.subVectors(n,e).cross(Cn.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const n=t.delta(Ln),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(n).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||Pn.getNormalMatrix(t),i=this.coplanarPoint(Ln).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Dn.prototype.isPlane=!0;const In=new Vt,Nn=new bt;class On{constructor(t=new Dn,e=new Dn,n=new Dn,i=new Dn,r=new Dn,s=new Dn){this.planes=[t,e,n,i,r,s]}set(t,e,n,i,r,s){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(r),a[5].copy(s),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t){const e=this.planes,n=t.elements,i=n[0],r=n[1],s=n[2],a=n[3],o=n[4],l=n[5],c=n[6],h=n[7],u=n[8],d=n[9],p=n[10],f=n[11],m=n[12],g=n[13],v=n[14],y=n[15];return e[0].setComponents(a-i,h-o,f-u,y-m).normalize(),e[1].setComponents(a+i,h+o,f+u,y+m).normalize(),e[2].setComponents(a+r,h+l,f+d,y+g).normalize(),e[3].setComponents(a-r,h-l,f-d,y-g).normalize(),e[4].setComponents(a-s,h-c,f-p,y-v).normalize(),e[5].setComponents(a+s,h+c,f+p,y+v).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),In.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(In)}intersectsSprite(t){return In.center.set(0,0,0),In.radius=.7071067811865476,In.applyMatrix4(t.matrixWorld),this.intersectsSphere(In)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(Nn.x=i.normal.x>0?t.max.x:t.min.x,Nn.y=i.normal.y>0?t.max.y:t.min.y,Nn.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(Nn)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function zn(){let t=null,e=!1,n=null,i=null;function r(e,s){n(e,s),i=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(i=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function Un(t,e){const n=e.isWebGL2,i=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),i.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=i.get(e);n&&(t.deleteBuffer(n.buffer),i.delete(e))},update:function(e,r){if(e.isGLBufferAttribute){const t=i.get(e);return void((!t||t.version<e.version)&&i.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const s=i.get(e);void 0===s?i.set(e,function(e,i){const r=e.array,s=e.usage,a=t.createBuffer();let o;if(t.bindBuffer(i,a),t.bufferData(i,r,s),e.onUploadCallback(),r instanceof Float32Array)o=5126;else if(r instanceof Uint16Array)if(e.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");o=5131}else o=5123;else if(r instanceof Int16Array)o=5122;else if(r instanceof Uint32Array)o=5125;else if(r instanceof Int32Array)o=5124;else if(r instanceof Int8Array)o=5120;else if(r instanceof Uint8Array)o=5121;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);o=5121}return{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(e,r)):s.version<e.version&&(function(e,i,r){const s=i.array,a=i.updateRange;t.bindBuffer(r,e),-1===a.count?t.bufferSubData(r,0,s):(n?t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s,a.offset,a.count):t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s.subarray(a.offset,a.offset+a.count)),a.count=-1)}(s.buffer,e,r),s.version=e.version)}}}class Fn extends Ke{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,s=e/2,a=Math.floor(n),o=Math.floor(i),l=a+1,c=o+1,h=t/a,u=e/o,d=[],p=[],f=[],m=[];for(let t=0;t<c;t++){const e=t*u-s;for(let n=0;n<l;n++){const i=n*h-r;p.push(i,-e,0),f.push(0,0,1),m.push(n/a),m.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<a;e++){const n=e+l*t,i=e+l*(t+1),r=e+1+l*(t+1),s=e+1+l*t;d.push(n,i,s),d.push(i,r,s)}this.setIndex(d),this.setAttribute("position",new Ve(p,3)),this.setAttribute("normal",new Ve(f,3)),this.setAttribute("uv",new Ve(m,2))}static fromJSON(t){return new Fn(t.width,t.height,t.widthSegments,t.heightSegments)}}const Bn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\t#endif\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},Hn={common:{diffuse:{value:new ct(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Z},uv2Transform:{value:new Z},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new J(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new ct(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new ct(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Z}},sprite:{diffuse:{value:new ct(16777215)},opacity:{value:1},center:{value:new J(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Z}}},kn={basic:{uniforms:_n([Hn.common,Hn.specularmap,Hn.envmap,Hn.aomap,Hn.lightmap,Hn.fog]),vertexShader:Bn.meshbasic_vert,fragmentShader:Bn.meshbasic_frag},lambert:{uniforms:_n([Hn.common,Hn.specularmap,Hn.envmap,Hn.aomap,Hn.lightmap,Hn.emissivemap,Hn.fog,Hn.lights,{emissive:{value:new ct(0)}}]),vertexShader:Bn.meshlambert_vert,fragmentShader:Bn.meshlambert_frag},phong:{uniforms:_n([Hn.common,Hn.specularmap,Hn.envmap,Hn.aomap,Hn.lightmap,Hn.emissivemap,Hn.bumpmap,Hn.normalmap,Hn.displacementmap,Hn.fog,Hn.lights,{emissive:{value:new ct(0)},specular:{value:new ct(1118481)},shininess:{value:30}}]),vertexShader:Bn.meshphong_vert,fragmentShader:Bn.meshphong_frag},standard:{uniforms:_n([Hn.common,Hn.envmap,Hn.aomap,Hn.lightmap,Hn.emissivemap,Hn.bumpmap,Hn.normalmap,Hn.displacementmap,Hn.roughnessmap,Hn.metalnessmap,Hn.fog,Hn.lights,{emissive:{value:new ct(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Bn.meshphysical_vert,fragmentShader:Bn.meshphysical_frag},toon:{uniforms:_n([Hn.common,Hn.aomap,Hn.lightmap,Hn.emissivemap,Hn.bumpmap,Hn.normalmap,Hn.displacementmap,Hn.gradientmap,Hn.fog,Hn.lights,{emissive:{value:new ct(0)}}]),vertexShader:Bn.meshtoon_vert,fragmentShader:Bn.meshtoon_frag},matcap:{uniforms:_n([Hn.common,Hn.bumpmap,Hn.normalmap,Hn.displacementmap,Hn.fog,{matcap:{value:null}}]),vertexShader:Bn.meshmatcap_vert,fragmentShader:Bn.meshmatcap_frag},points:{uniforms:_n([Hn.points,Hn.fog]),vertexShader:Bn.points_vert,fragmentShader:Bn.points_frag},dashed:{uniforms:_n([Hn.common,Hn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Bn.linedashed_vert,fragmentShader:Bn.linedashed_frag},depth:{uniforms:_n([Hn.common,Hn.displacementmap]),vertexShader:Bn.depth_vert,fragmentShader:Bn.depth_frag},normal:{uniforms:_n([Hn.common,Hn.bumpmap,Hn.normalmap,Hn.displacementmap,{opacity:{value:1}}]),vertexShader:Bn.meshnormal_vert,fragmentShader:Bn.meshnormal_frag},sprite:{uniforms:_n([Hn.sprite,Hn.fog]),vertexShader:Bn.sprite_vert,fragmentShader:Bn.sprite_frag},background:{uniforms:{uvTransform:{value:new Z},t2D:{value:null}},vertexShader:Bn.background_vert,fragmentShader:Bn.background_frag},cube:{uniforms:_n([Hn.envmap,{opacity:{value:1}}]),vertexShader:Bn.cube_vert,fragmentShader:Bn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Bn.equirect_vert,fragmentShader:Bn.equirect_frag},distanceRGBA:{uniforms:_n([Hn.common,Hn.displacementmap,{referencePosition:{value:new bt},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Bn.distanceRGBA_vert,fragmentShader:Bn.distanceRGBA_frag},shadow:{uniforms:_n([Hn.lights,Hn.fog,{color:{value:new ct(0)},opacity:{value:1}}]),vertexShader:Bn.shadow_vert,fragmentShader:Bn.shadow_frag}};function Gn(t,e,n,i,r,a){const o=new ct(0);let l,c,h=!0===r?0:1,u=null,d=0,p=null;function f(t,e){n.buffers.color.setClear(t.r,t.g,t.b,e,a)}return{getClearColor:function(){return o},setClearColor:function(t,e=1){o.set(t),h=e,f(o,h)},getClearAlpha:function(){return h},setClearAlpha:function(t){h=t,f(o,h)},render:function(n,r){let a=!1,m=!0===r.isScene?r.background:null;m&&m.isTexture&&(m=e.get(m));const g=t.xr,v=g.getSession&&g.getSession();v&&"additive"===v.environmentBlendMode&&(m=null),null===m?f(o,h):m&&m.isColor&&(f(m,1),a=!0),(t.autoClear||a)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),m&&(m.isCubeTexture||m.mapping===s)?(void 0===c&&(c=new gn(new yn(1,1,1),new wn({name:"BackgroundCubeMaterial",uniforms:xn(kn.cube.uniforms),vertexShader:kn.cube.vertexShader,fragmentShader:kn.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(c)),c.material.uniforms.envMap.value=m,c.material.uniforms.flipEnvMap.value=m.isCubeTexture&&!1===m.isRenderTargetTexture?-1:1,u===m&&d===m.version&&p===t.toneMapping||(c.material.needsUpdate=!0,u=m,d=m.version,p=t.toneMapping),n.unshift(c,c.geometry,c.material,0,0,null)):m&&m.isTexture&&(void 0===l&&(l=new gn(new Fn(2,2),new wn({name:"BackgroundMaterial",uniforms:xn(kn.background.uniforms),vertexShader:kn.background.vertexShader,fragmentShader:kn.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(l)),l.material.uniforms.t2D.value=m,!0===m.matrixAutoUpdate&&m.updateMatrix(),l.material.uniforms.uvTransform.value.copy(m.matrix),u===m&&d===m.version&&p===t.toneMapping||(l.material.needsUpdate=!0,u=m,d=m.version,p=t.toneMapping),n.unshift(l,l.geometry,l.material,0,0,null))}}}function Vn(t,e,n,i){const r=t.getParameter(34921),s=i.isWebGL2?null:e.get("OES_vertex_array_object"),a=i.isWebGL2||null!==s,o={},l=p(null);let c=l,h=!1;function u(e){return i.isWebGL2?t.bindVertexArray(e):s.bindVertexArrayOES(e)}function d(e){return i.isWebGL2?t.deleteVertexArray(e):s.deleteVertexArrayOES(e)}function p(t){const e=[],n=[],i=[];for(let t=0;t<r;t++)e[t]=0,n[t]=0,i[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:n,attributeDivisors:i,object:t,attributes:{},index:null}}function f(){const t=c.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function m(t){g(t,0)}function g(n,r){const s=c.newAttributes,a=c.enabledAttributes,o=c.attributeDivisors;s[n]=1,0===a[n]&&(t.enableVertexAttribArray(n),a[n]=1),o[n]!==r&&((i.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),o[n]=r)}function v(){const e=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function y(e,n,r,s,a,o){!0!==i.isWebGL2||5124!==r&&5125!==r?t.vertexAttribPointer(e,n,r,s,a,o):t.vertexAttribIPointer(e,n,r,a,o)}function x(){_(),h=!0,c!==l&&(c=l,u(c.object))}function _(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,d,x,_){let b=!1;if(a){const e=function(e,n,r){const a=!0===r.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let h=c[a];return void 0===h&&(h=p(i.isWebGL2?t.createVertexArray():s.createVertexArrayOES()),c[a]=h),h}(x,d,l);c!==e&&(c=e,u(c.object)),b=function(t,e){const n=c.attributes,i=t.attributes;let r=0;for(const t in i){const e=n[t],s=i[t];if(void 0===e)return!0;if(e.attribute!==s)return!0;if(e.data!==s.data)return!0;r++}return c.attributesNum!==r||c.index!==e}(x,_),b&&function(t,e){const n={},i=t.attributes;let r=0;for(const t in i){const e=i[t],s={};s.attribute=e,e.data&&(s.data=e.data),n[t]=s,r++}c.attributes=n,c.attributesNum=r,c.index=e}(x,_)}else{const t=!0===l.wireframe;c.geometry===x.id&&c.program===d.id&&c.wireframe===t||(c.geometry=x.id,c.program=d.id,c.wireframe=t,b=!0)}!0===r.isInstancedMesh&&(b=!0),null!==_&&n.update(_,34963),(b||h)&&(h=!1,function(r,s,a,o){if(!1===i.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;f();const l=o.attributes,c=a.getAttributes(),h=s.defaultAttributeValues;for(const e in c){const i=c[e];if(i.location>=0){let s=l[e];if(void 0===s&&("instanceMatrix"===e&&r.instanceMatrix&&(s=r.instanceMatrix),"instanceColor"===e&&r.instanceColor&&(s=r.instanceColor)),void 0!==s){const e=s.normalized,a=s.itemSize,l=n.get(s);if(void 0===l)continue;const c=l.buffer,h=l.type,u=l.bytesPerElement;if(s.isInterleavedBufferAttribute){const n=s.data,l=n.stride,d=s.offset;if(n.isInstancedInterleavedBuffer){for(let t=0;t<i.locationSize;t++)g(i.location+t,n.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let t=0;t<i.locationSize;t++)m(i.location+t);t.bindBuffer(34962,c);for(let t=0;t<i.locationSize;t++)y(i.location+t,a/i.locationSize,h,e,l*u,(d+a/i.locationSize*t)*u)}else{if(s.isInstancedBufferAttribute){for(let t=0;t<i.locationSize;t++)g(i.location+t,s.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let t=0;t<i.locationSize;t++)m(i.location+t);t.bindBuffer(34962,c);for(let t=0;t<i.locationSize;t++)y(i.location+t,a/i.locationSize,h,e,a*u,a/i.locationSize*t*u)}}else if(void 0!==h){const n=h[e];if(void 0!==n)switch(n.length){case 2:t.vertexAttrib2fv(i.location,n);break;case 3:t.vertexAttrib3fv(i.location,n);break;case 4:t.vertexAttrib4fv(i.location,n);break;default:t.vertexAttrib1fv(i.location,n)}}}}v()}(r,l,d,x),null!==_&&t.bindBuffer(34963,n.get(_).buffer))},reset:x,resetDefaultState:_,dispose:function(){x();for(const t in o){const e=o[t];for(const t in e){const n=e[t];for(const t in n)d(n[t].object),delete n[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const n=e[t];for(const t in n)d(n[t].object),delete n[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function(t){for(const e in o){const n=o[e];if(void 0===n[t.id])continue;const i=n[t.id];for(const t in i)d(i[t].object),delete i[t];delete n[t.id]}},initAttributes:f,enableAttribute:m,disableUnusedAttributes:v}}function Wn(t,e,n,i){const r=i.isWebGL2;let s;this.setMode=function(t){s=t},this.render=function(e,i){t.drawArrays(s,e,i),n.update(i,s,1)},this.renderInstances=function(i,a,o){if(0===o)return;let l,c;if(r)l=t,c="drawArraysInstanced";else if(l=e.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](s,i,a,o),n.update(a,s,o)}}function jn(t,e,n){let i;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const s="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let a=void 0!==n.precision?n.precision:"highp";const o=r(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);const l=s||e.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,h=t.getParameter(34930),u=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),f=t.getParameter(34921),m=t.getParameter(36347),g=t.getParameter(36348),v=t.getParameter(36349),y=u>0,x=s||e.has("OES_texture_float");return{isWebGL2:s,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==i)return i;if(!0===e.has("EXT_texture_filter_anisotropic")){const n=e.get("EXT_texture_filter_anisotropic");i=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,precision:a,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:y,floatFragmentTextures:x,floatVertexTextures:y&&x,maxSamples:s?t.getParameter(36183):0}}function Xn(t){const e=this;let n=null,i=0,r=!1,s=!1;const a=new Dn,o=new Z,l={value:null,needsUpdate:!1};function c(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0}function h(t,n,i,r){const s=null!==t?t.length:0;let c=null;if(0!==s){if(c=l.value,!0!==r||null===c){const e=i+4*s,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,n=i;e!==s;++e,n+=4)a.copy(t[e]).applyMatrix4(r,o),a.normal.toArray(c,n),c[n+3]=a.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=s,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,s){const a=0!==t.length||e||0!==i||r;return r=e,n=h(t,s,0),i=t.length,a},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(e,a,o){const u=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,f=t.get(e);if(!r||null===u||0===u.length||s&&!p)s?h(null):c();else{const t=s?0:i,e=4*t;let r=f.clippingState||null;l.value=r,r=h(u,a,e,o);for(let t=0;t!==e;++t)r[t]=n[t];f.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function qn(t){let e=new WeakMap;function n(t,e){return 303===e?t.mapping=i:304===e&&(t.mapping=r),t}function s(t){const n=t.target;n.removeEventListener("dispose",s);const i=e.get(n);void 0!==i&&(e.delete(n),i.dispose())}return{get:function(i){if(i&&i.isTexture&&!1===i.isRenderTargetTexture){const r=i.mapping;if(303===r||304===r){if(e.has(i))return n(e.get(i).texture,i.mapping);{const r=i.image;if(r&&r.height>0){const a=new Rn(r.height/2);return a.fromEquirectangularTexture(t,i),e.set(i,a),i.addEventListener("dispose",s),n(a.texture,i.mapping)}return null}}}return i},dispose:function(){e=new WeakMap}}}kn.physical={uniforms:_n([kn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new J(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new ct(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new J},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new ct(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new ct(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Bn.meshphysical_vert,fragmentShader:Bn.meshphysical_frag};class Yn extends Mn{constructor(t=-1,e=1,n=1,i=-1,r=.1,s=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=s,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,s){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,s=n+t,a=i+e,o=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,s=r+t*this.view.width,a-=e*this.view.offsetY,o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}Yn.prototype.isOrthographicCamera=!0;const Jn=[.125,.215,.35,.446,.526,.582],Zn=new Yn,Kn=new ct;let Qn=null;const $n=(1+Math.sqrt(5))/2,ti=1/$n,ei=[new bt(1,1,1),new bt(-1,1,1),new bt(1,1,-1),new bt(-1,1,-1),new bt(0,$n,ti),new bt(0,$n,-ti),new bt(ti,0,$n),new bt(-ti,0,$n),new bt($n,ti,0),new bt(-$n,ti,0)];class ni{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Qn=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=ai(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=si(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Qn),t.scissorTest=!1,ri(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===i||t.mapping===r?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Qn=this._renderer.getRenderTarget();const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize-32,n={magFilter:h,minFilter:h,generateMipmaps:!1,type:g,format:y,encoding:P,depthBuffer:!1},i=ii(t,e,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=ii(t,e,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],n=[],i=[];let r=t;const s=t-4+1+Jn.length;for(let a=0;a<s;a++){const s=Math.pow(2,r);n.push(s);let o=1/s;a>t-4?o=Jn[a-t+4-1]:0===a&&(o=0),i.push(o);const l=1/(s-1),c=-l/2,h=1+l/2,u=[c,c,h,c,h,h,c,c,h,h,c,h],d=6,p=6,f=3,m=2,g=1,v=new Float32Array(f*p*d),y=new Float32Array(m*p*d),x=new Float32Array(g*p*d);for(let t=0;t<d;t++){const e=t%3*2/3-1,n=t>2?0:-1,i=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];v.set(i,f*p*t),y.set(u,m*p*t);const r=[t,t,t,t,t,t];x.set(r,g*p*t)}const _=new Ke;_.setAttribute("position",new He(v,f)),_.setAttribute("uv",new He(y,m)),_.setAttribute("faceIndex",new He(x,g)),e.push(_),r>4&&r--}return{lodPlanes:e,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(t,e,n){const i=new Float32Array(20),r=new bt(0,1,0);return new wn({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(i,t,e)}return i}_compileMaterial(t){const e=new gn(this._lodPlanes[0],t);this._renderer.compile(e,Zn)}_sceneToCubeUV(t,e,n,i){const r=new Sn(90,1,e,n),s=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(Kn),o.toneMapping=0,o.autoClear=!1;const h=new Ue({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),u=new gn(new yn,h);let d=!1;const p=t.background;p?p.isColor&&(h.color.copy(p),t.background=null,d=!0):(h.color.copy(Kn),d=!0);for(let e=0;e<6;e++){const n=e%3;0===n?(r.up.set(0,s[e],0),r.lookAt(a[e],0,0)):1===n?(r.up.set(0,0,s[e]),r.lookAt(0,a[e],0)):(r.up.set(0,s[e],0),r.lookAt(0,0,a[e]));const l=this._cubeSize;ri(i,n*l,e>2?l:0,l,l),o.setRenderTarget(i),d&&o.render(u,r),o.render(t,r)}u.geometry.dispose(),u.material.dispose(),o.toneMapping=c,o.autoClear=l,t.background=p}_textureToCubeUV(t,e){const n=this._renderer,s=t.mapping===i||t.mapping===r;s?(null===this._cubemapMaterial&&(this._cubemapMaterial=ai()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=si());const a=s?this._cubemapMaterial:this._equirectMaterial,o=new gn(this._lodPlanes[0],a);a.uniforms.envMap.value=t;const l=this._cubeSize;ri(e,0,0,3*l,2*l),n.setRenderTarget(e),n.render(o,Zn)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let e=1;e<this._lodPlanes.length;e++){const n=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]),i=ei[(e-1)%ei.length];this._blur(t,e-1,e,n,i)}e.autoClear=n}_blur(t,e,n,i,r){const s=this._pingPongRenderTarget;this._halfBlur(t,s,e,n,i,"latitudinal",r),this._halfBlur(s,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,s,a){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==s&&"longitudinal"!==s&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new gn(this._lodPlanes[i],l),h=l.uniforms,u=this._sizeLods[n]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,f=isFinite(r)?1+Math.floor(3*p):20;f>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const m=[];let g=0;for(let t=0;t<20;++t){const e=t/p,n=Math.exp(-e*e/2);m.push(n),0===t?g+=n:t<f&&(g+=2*n)}for(let t=0;t<m.length;t++)m[t]=m[t]/g;h.envMap.value=t.texture,h.samples.value=f,h.weights.value=m,h.latitudinal.value="latitudinal"===s,a&&(h.poleAxis.value=a);const{_lodMax:v}=this;h.dTheta.value=d,h.mipInt.value=v-n;const y=this._sizeLods[i];ri(e,3*y*(i>v-4?i-v+4:0),4*(this._cubeSize-y),3*y,2*y),o.setRenderTarget(e),o.render(c,Zn)}}function ii(t,e,n){const i=new vt(t,e,n);return i.texture.mapping=s,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function ri(t,e,n,i,r){t.viewport.set(e,n,i,r),t.scissor.set(e,n,i,r)}function si(){return new wn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function ai(){return new wn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function oi(t){let e=new WeakMap,n=null;function s(t){const n=t.target;n.removeEventListener("dispose",s);const i=e.get(n);void 0!==i&&(e.delete(n),i.dispose())}return{get:function(a){if(a&&a.isTexture){const o=a.mapping,l=303===o||304===o,c=o===i||o===r;if(l||c){if(a.isRenderTargetTexture&&!0===a.needsPMREMUpdate){a.needsPMREMUpdate=!1;let i=e.get(a);return null===n&&(n=new ni(t)),i=l?n.fromEquirectangular(a,i):n.fromCubemap(a,i),e.set(a,i),i.texture}if(e.has(a))return e.get(a).texture;{const i=a.image;if(l&&i&&i.height>0||c&&i&&function(t){let e=0;for(let n=0;n<6;n++)void 0!==t[n]&&e++;return 6===e}(i)){null===n&&(n=new ni(t));const i=l?n.fromEquirectangular(a):n.fromCubemap(a);return e.set(a,i),a.addEventListener("dispose",s),i.texture}return null}}}return a},dispose:function(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function li(t){const e={};function n(n){if(void 0!==e[n])return e[n];let i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}return e[n]=i,i}return{has:function(t){return null!==n(t)},init:function(t){t.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(t){const e=n(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function ci(t,e,n,i){const r={},s=new WeakMap;function a(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener("dispose",a),delete r[o.id];const l=s.get(o);l&&(e.remove(l),s.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],i=t.index,r=t.attributes.position;let a=0;if(null!==i){const t=i.array;a=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0],r=t[e+1],s=t[e+2];n.push(i,r,r,s,s,i)}}else{const t=r.array;a=r.version;for(let e=0,i=t.length/3-1;e<i;e+=3){const t=e+0,i=e+1,r=e+2;n.push(t,i,i,r,r,t)}}const o=new(K(n)?Ge:ke)(n,1);o.version=a;const l=s.get(t);l&&e.remove(l),s.set(t,o)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",a),r[e.id]=!0,n.memory.geometries++),e},update:function(t){const n=t.attributes;for(const t in n)e.update(n[t],34962);const i=t.morphAttributes;for(const t in i){const n=i[t];for(let t=0,i=n.length;t<i;t++)e.update(n[t],34962)}},getWireframeAttribute:function(t){const e=s.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return s.get(t)}}}function hi(t,e,n,i){const r=i.isWebGL2;let s,a,o;this.setMode=function(t){s=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,i){t.drawElements(s,i,a,e*o),n.update(i,s,1)},this.renderInstances=function(i,l,c){if(0===c)return;let h,u;if(r)h=t,u="drawElementsInstanced";else if(h=e.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[u](s,l,a,i*o,c),n.update(l,s,c)}}function ui(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,n,i){switch(e.calls++,n){case 4:e.triangles+=i*(t/3);break;case 1:e.lines+=i*(t/2);break;case 3:e.lines+=i*(t-1);break;case 2:e.lines+=i*t;break;case 0:e.points+=i*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function di(t,e){return t[0]-e[0]}function pi(t,e){return Math.abs(e[1])-Math.abs(t[1])}function fi(t,e){let n=1;const i=e.isInterleavedBufferAttribute?e.data.array:e.array;i instanceof Int8Array?n=127:i instanceof Int16Array?n=32767:i instanceof Int32Array?n=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",i),t.divideScalar(n)}function mi(t,e,n){const i={},r=new Float32Array(8),s=new WeakMap,a=new gt,o=[];for(let t=0;t<8;t++)o[t]=[t,0];return{update:function(l,c,h,u){const d=l.morphTargetInfluences;if(!0===e.isWebGL2){const p=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,f=void 0!==p?p.length:0;let g=s.get(c);if(void 0===g||g.count!==f){void 0!==g&&g.texture.dispose();const x=void 0!==c.morphAttributes.position,_=void 0!==c.morphAttributes.normal,b=void 0!==c.morphAttributes.color,w=c.morphAttributes.position||[],M=c.morphAttributes.normal||[],S=c.morphAttributes.color||[];let E=0;!0===x&&(E=1),!0===_&&(E=2),!0===b&&(E=3);let T=c.attributes.position.count*E,A=1;T>e.maxTextureSize&&(A=Math.ceil(T/e.maxTextureSize),T=e.maxTextureSize);const R=new Float32Array(T*A*4*f),L=new yt(R,T,A,f);L.type=m,L.needsUpdate=!0;const C=4*E;for(let D=0;D<f;D++){const I=w[D],N=M[D],O=S[D],z=T*A*4*D;for(let U=0;U<I.count;U++){const F=U*C;!0===x&&(a.fromBufferAttribute(I,U),!0===I.normalized&&fi(a,I),R[z+F+0]=a.x,R[z+F+1]=a.y,R[z+F+2]=a.z,R[z+F+3]=0),!0===_&&(a.fromBufferAttribute(N,U),!0===N.normalized&&fi(a,N),R[z+F+4]=a.x,R[z+F+5]=a.y,R[z+F+6]=a.z,R[z+F+7]=0),!0===b&&(a.fromBufferAttribute(O,U),!0===O.normalized&&fi(a,O),R[z+F+8]=a.x,R[z+F+9]=a.y,R[z+F+10]=a.z,R[z+F+11]=4===O.itemSize?a.w:1)}}function P(){L.dispose(),s.delete(c),c.removeEventListener("dispose",P)}g={count:f,texture:L,size:new J(T,A)},s.set(c,g),c.addEventListener("dispose",P)}let v=0;for(let B=0;B<d.length;B++)v+=d[B];const y=c.morphTargetsRelative?1:1-v;u.getUniforms().setValue(t,"morphTargetBaseInfluence",y),u.getUniforms().setValue(t,"morphTargetInfluences",d),u.getUniforms().setValue(t,"morphTargetsTexture",g.texture,n),u.getUniforms().setValue(t,"morphTargetsTextureSize",g.size)}else{const H=void 0===d?0:d.length;let k=i[c.id];if(void 0===k||k.length!==H){k=[];for(let X=0;X<H;X++)k[X]=[X,0];i[c.id]=k}for(let q=0;q<H;q++){const Y=k[q];Y[0]=q,Y[1]=d[q]}k.sort(pi);for(let Z=0;Z<8;Z++)Z<H&&k[Z][1]?(o[Z][0]=k[Z][0],o[Z][1]=k[Z][1]):(o[Z][0]=Number.MAX_SAFE_INTEGER,o[Z][1]=0);o.sort(di);const G=c.morphAttributes.position,V=c.morphAttributes.normal;let W=0;for(let K=0;K<8;K++){const Q=o[K],$=Q[0],tt=Q[1];$!==Number.MAX_SAFE_INTEGER&&tt?(G&&c.getAttribute("morphTarget"+K)!==G[$]&&c.setAttribute("morphTarget"+K,G[$]),V&&c.getAttribute("morphNormal"+K)!==V[$]&&c.setAttribute("morphNormal"+K,V[$]),r[K]=tt,W+=tt):(G&&!0===c.hasAttribute("morphTarget"+K)&&c.deleteAttribute("morphTarget"+K),V&&!0===c.hasAttribute("morphNormal"+K)&&c.deleteAttribute("morphNormal"+K),r[K]=0)}const j=c.morphTargetsRelative?1:1-W;u.getUniforms().setValue(t,"morphTargetBaseInfluence",j),u.getUniforms().setValue(t,"morphTargetInfluences",r)}}}}function gi(t,e,n,i){let r=new WeakMap;function s(t){const e=t.target;e.removeEventListener("dispose",s),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(t){const a=i.render.frame,o=t.geometry,l=e.get(t,o);return r.get(l)!==a&&(e.update(l),r.set(l,a)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",s)&&t.addEventListener("dispose",s),n.update(t.instanceMatrix,34962),null!==t.instanceColor&&n.update(t.instanceColor,34962)),l},dispose:function(){r=new WeakMap}}}const vi=new mt,yi=new yt,xi=new xt,_i=new An,bi=[],wi=[],Mi=new Float32Array(16),Si=new Float32Array(9),Ei=new Float32Array(4);function Ti(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let s=bi[r];if(void 0===s&&(s=new Float32Array(r),bi[r]=s),0!==e){i.toArray(s,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(s,r)}return s}function Ai(t,e){if(t.length!==e.length)return!1;for(let n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function Ri(t,e){for(let n=0,i=e.length;n<i;n++)t[n]=e[n]}function Li(t,e){let n=wi[e];void 0===n&&(n=new Int32Array(e),wi[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function Ci(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function Pi(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Ai(n,e))return;t.uniform2fv(this.addr,e),Ri(n,e)}}function Di(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(Ai(n,e))return;t.uniform3fv(this.addr,e),Ri(n,e)}}function Ii(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Ai(n,e))return;t.uniform4fv(this.addr,e),Ri(n,e)}}function Ni(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Ai(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),Ri(n,e)}else{if(Ai(n,i))return;Ei.set(i),t.uniformMatrix2fv(this.addr,!1,Ei),Ri(n,i)}}function Oi(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Ai(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),Ri(n,e)}else{if(Ai(n,i))return;Si.set(i),t.uniformMatrix3fv(this.addr,!1,Si),Ri(n,i)}}function zi(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Ai(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),Ri(n,e)}else{if(Ai(n,i))return;Mi.set(i),t.uniformMatrix4fv(this.addr,!1,Mi),Ri(n,i)}}function Ui(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function Fi(t,e){const n=this.cache;Ai(n,e)||(t.uniform2iv(this.addr,e),Ri(n,e))}function Bi(t,e){const n=this.cache;Ai(n,e)||(t.uniform3iv(this.addr,e),Ri(n,e))}function Hi(t,e){const n=this.cache;Ai(n,e)||(t.uniform4iv(this.addr,e),Ri(n,e))}function ki(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Gi(t,e){const n=this.cache;Ai(n,e)||(t.uniform2uiv(this.addr,e),Ri(n,e))}function Vi(t,e){const n=this.cache;Ai(n,e)||(t.uniform3uiv(this.addr,e),Ri(n,e))}function Wi(t,e){const n=this.cache;Ai(n,e)||(t.uniform4uiv(this.addr,e),Ri(n,e))}function ji(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2D(e||vi,r)}function Xi(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||xi,r)}function qi(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(e||_i,r)}function Yi(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||yi,r)}function Ji(t,e){t.uniform1fv(this.addr,e)}function Zi(t,e){const n=Ti(e,this.size,2);t.uniform2fv(this.addr,n)}function Ki(t,e){const n=Ti(e,this.size,3);t.uniform3fv(this.addr,n)}function Qi(t,e){const n=Ti(e,this.size,4);t.uniform4fv(this.addr,n)}function $i(t,e){const n=Ti(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function tr(t,e){const n=Ti(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function er(t,e){const n=Ti(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function nr(t,e){t.uniform1iv(this.addr,e)}function ir(t,e){t.uniform2iv(this.addr,e)}function rr(t,e){t.uniform3iv(this.addr,e)}function sr(t,e){t.uniform4iv(this.addr,e)}function ar(t,e){t.uniform1uiv(this.addr,e)}function or(t,e){t.uniform2uiv(this.addr,e)}function lr(t,e){t.uniform3uiv(this.addr,e)}function cr(t,e){t.uniform4uiv(this.addr,e)}function hr(t,e,n){const i=e.length,r=Li(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture2D(e[t]||vi,r[t])}function ur(t,e,n){const i=e.length,r=Li(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture3D(e[t]||xi,r[t])}function dr(t,e,n){const i=e.length,r=Li(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTextureCube(e[t]||_i,r[t])}function pr(t,e,n){const i=e.length,r=Li(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture2DArray(e[t]||yi,r[t])}function fr(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return Ci;case 35664:return Pi;case 35665:return Di;case 35666:return Ii;case 35674:return Ni;case 35675:return Oi;case 35676:return zi;case 5124:case 35670:return Ui;case 35667:case 35671:return Fi;case 35668:case 35672:return Bi;case 35669:case 35673:return Hi;case 5125:return ki;case 36294:return Gi;case 36295:return Vi;case 36296:return Wi;case 35678:case 36198:case 36298:case 36306:case 35682:return ji;case 35679:case 36299:case 36307:return Xi;case 35680:case 36300:case 36308:case 36293:return qi;case 36289:case 36303:case 36311:case 36292:return Yi}}(e.type)}function mr(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Ji;case 35664:return Zi;case 35665:return Ki;case 35666:return Qi;case 35674:return $i;case 35675:return tr;case 35676:return er;case 5124:case 35670:return nr;case 35667:case 35671:return ir;case 35668:case 35672:return rr;case 35669:case 35673:return sr;case 5125:return ar;case 36294:return or;case 36295:return lr;case 36296:return cr;case 35678:case 36198:case 36298:case 36306:case 35682:return hr;case 35679:case 36299:case 36307:return ur;case 35680:case 36300:case 36308:case 36293:return dr;case 36289:case 36303:case 36311:case 36292:return pr}}(e.type)}function gr(t){this.id=t,this.seq=[],this.map={}}mr.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),Ri(e,t)},gr.prototype.setValue=function(t,e,n){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const s=i[r];s.setValue(t,e[s.id],n)}};const vr=/(\w+)(\])?(\[|\.)?/g;function yr(t,e){t.seq.push(e),t.map[e.id]=e}function xr(t,e,n){const i=t.name,r=i.length;for(vr.lastIndex=0;;){const s=vr.exec(i),a=vr.lastIndex;let o=s[1];const l="]"===s[2],c=s[3];if(l&&(o|=0),void 0===c||"["===c&&a+2===r){yr(n,void 0===c?new fr(o,t,e):new mr(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new gr(o),yr(n,t)),n=t}}}function _r(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,35718);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);xr(n,t.getUniformLocation(e,n.name),this)}}function br(t,e,n){const i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}_r.prototype.setValue=function(t,e,n,i){const r=this.map[e];void 0!==r&&r.setValue(t,n,i)},_r.prototype.setOptional=function(t,e,n){const i=e[n];void 0!==i&&this.setValue(t,n,i)},_r.upload=function(t,e,n,i){for(let r=0,s=e.length;r!==s;++r){const s=e[r],a=n[s.id];!1!==a.needsUpdate&&s.setValue(t,a.value,i)}},_r.seqWithValue=function(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];r.id in e&&n.push(r)}return n};let wr=0;function Mr(t,e,n){const i=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();if(i&&""===r)return"";const s=parseInt(/ERROR: 0:(\d+)/.exec(r)[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+function(t,e){const n=t.split("\n"),i=[],r=Math.max(e-6,0),s=Math.min(e+6,n.length);for(let t=r;t<s;t++)i.push(t+1+": "+n[t]);return i.join("\n")}(t.getShaderSource(e),s)}function Sr(t,e){const n=function(t){switch(t){case P:return["Linear","( value )"];case D:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function Er(t,e){let n;switch(e){case 1:n="Linear";break;case 2:n="Reinhard";break;case 3:n="OptimizedCineon";break;case 4:n="ACESFilmic";break;case 5:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Tr(t){return""!==t}function Ar(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Rr(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Lr=/^[ \t]*#include +<([\w\d./]+)>/gm;function Cr(t){return t.replace(Lr,Pr)}function Pr(t,e){const n=Bn[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return Cr(n)}const Dr=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Ir=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Nr(t){return t.replace(Ir,zr).replace(Dr,Or)}function Or(t,e,n,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),zr(0,e,n,i)}function zr(t,e,n,i){let r="";for(let t=parseInt(e);t<parseInt(n);t++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function Ur(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function Fr(t,e,n,a){const o=t.getContext(),l=n.defines;let c=n.vertexShader,h=n.fragmentShader;const u=function(t){let e="SHADOWMAP_TYPE_BASIC";return 1===t.shadowMapType?e="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?e="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(e="SHADOWMAP_TYPE_VSM"),e}(n),d=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case i:case r:e="ENVMAP_TYPE_CUBE";break;case s:e="ENVMAP_TYPE_CUBE_UV"}return e}(n),p=function(t){let e="ENVMAP_MODE_REFLECTION";return t.envMap&&t.envMapMode===r&&(e="ENVMAP_MODE_REFRACTION"),e}(n),f=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:e="ENVMAP_BLENDING_MULTIPLY";break;case 1:e="ENVMAP_BLENDING_MIX";break;case 2:e="ENVMAP_BLENDING_ADD"}return e}(n),m=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const n=Math.log2(e/32+1)+3,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),g=n.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUVHeight||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Tr).join("\n")}(n),v=function(t){const e=[];for(const n in t){const i=t[n];!1!==i&&e.push("#define "+n+" "+i)}return e.join("\n")}(l),y=o.createProgram();let x,_,b=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(x=[v].filter(Tr).join("\n"),x.length>0&&(x+="\n"),_=[g,v].filter(Tr).join("\n"),_.length>0&&(_+="\n")):(x=[Ur(n),"#define SHADER_NAME "+n.shaderName,v,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+p:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+u:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Tr).join("\n"),_=[g,Ur(n),"#define SHADER_NAME "+n.shaderName,v,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+d:"",n.envMap?"#define "+p:"",n.envMap?"#define "+f:"",m?"#define CUBEUV_TEXEL_WIDTH "+m.texelWidth:"",m?"#define CUBEUV_TEXEL_HEIGHT "+m.texelHeight:"",m?"#define CUBEUV_MAX_MIP "+m.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+u:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?Bn.tonemapping_pars_fragment:"",0!==n.toneMapping?Er("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Bn.encodings_pars_fragment,Sr("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Tr).join("\n")),c=Cr(c),c=Ar(c,n),c=Rr(c,n),h=Cr(h),h=Ar(h,n),h=Rr(h,n),c=Nr(c),h=Nr(h),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(b="#version 300 es\n",x=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+x,_=["#define varying in",n.glslVersion===F?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===F?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const w=b+_+h,M=br(o,35633,b+x+c),S=br(o,35632,w);if(o.attachShader(y,M),o.attachShader(y,S),void 0!==n.index0AttributeName?o.bindAttribLocation(y,0,n.index0AttributeName):!0===n.morphTargets&&o.bindAttribLocation(y,0,"position"),o.linkProgram(y),t.debug.checkShaderErrors){const t=o.getProgramInfoLog(y).trim(),e=o.getShaderInfoLog(M).trim(),n=o.getShaderInfoLog(S).trim();let i=!0,r=!0;if(!1===o.getProgramParameter(y,35714)){i=!1;const e=Mr(o,M,"vertex"),n=Mr(o,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+o.getError()+" - VALIDATE_STATUS "+o.getProgramParameter(y,35715)+"\n\nProgram Info Log: "+t+"\n"+e+"\n"+n)}else""!==t?console.warn("THREE.WebGLProgram: Program Info Log:",t):""!==e&&""!==n||(r=!1);r&&(this.diagnostics={runnable:i,programLog:t,vertexShader:{log:e,prefix:x},fragmentShader:{log:n,prefix:_}})}let E,T;return o.deleteShader(M),o.deleteShader(S),this.getUniforms=function(){return void 0===E&&(E=new _r(o,y)),E},this.getAttributes=function(){return void 0===T&&(T=function(t,e){const n={},i=t.getProgramParameter(e,35721);for(let r=0;r<i;r++){const i=t.getActiveAttrib(e,r),s=i.name;let a=1;35674===i.type&&(a=2),35675===i.type&&(a=3),35676===i.type&&(a=4),n[s]={type:i.type,location:t.getAttribLocation(e,s),locationSize:a}}return n}(o,y)),T},this.destroy=function(){a.releaseStatesOfProgram(this),o.deleteProgram(y),this.program=void 0},this.name=n.shaderName,this.id=wr++,this.cacheKey=e,this.usedTimes=1,this.program=y,this.vertexShader=M,this.fragmentShader=S,this}let Br=0;class Hr{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),r=this._getShaderStage(n),s=this._getShaderCacheForMaterial(t);return!1===s.has(i)&&(s.add(i),i.usedTimes++),!1===s.has(r)&&(s.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;return!1===e.has(t)&&e.set(t,new Set),e.get(t)}_getShaderStage(t){const e=this.shaderCache;if(!1===e.has(t)){const n=new kr(t);e.set(t,n)}return e.get(t)}}class kr{constructor(t){this.id=Br++,this.code=t,this.usedTimes=0}}function Gr(t,e,n,i,r,a,o){const l=new ce,c=new Hr,h=[],u=r.isWebGL2,d=r.logarithmicDepthBuffer,p=r.floatVertexTextures,f=r.maxVertexUniforms,m=r.vertexTextures;let g=r.precision;const v={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(a,l,h,y,x){const _=y.fog,b=x.geometry,w=a.isMeshStandardMaterial?y.environment:null,M=(a.isMeshStandardMaterial?n:e).get(a.envMap||w),S=M&&M.mapping===s?M.image.height:null,E=v[a.type],T=x.isSkinnedMesh?function(t){const e=t.skeleton.bones;if(p)return 1024;{const t=f,n=Math.floor((t-20)/4),i=Math.min(n,e.length);return i<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+i+"."),0):i}}(x):0;null!==a.precision&&(g=r.getMaxPrecision(a.precision),g!==a.precision&&console.warn("THREE.WebGLProgram.getParameters:",a.precision,"not supported, using",g,"instead."));const A=b.morphAttributes.position||b.morphAttributes.normal||b.morphAttributes.color,R=void 0!==A?A.length:0;let L,C,I,N,O=0;if(void 0!==b.morphAttributes.position&&(O=1),void 0!==b.morphAttributes.normal&&(O=2),void 0!==b.morphAttributes.color&&(O=3),E){const t=kn[E];L=t.vertexShader,C=t.fragmentShader}else L=a.vertexShader,C=a.fragmentShader,c.update(a),I=c.getVertexShaderID(a),N=c.getFragmentShaderID(a);const z=t.getRenderTarget(),U=a.alphaTest>0,F=a.clearcoat>0;return{isWebGL2:u,shaderID:E,shaderName:a.type,vertexShader:L,fragmentShader:C,defines:a.defines,customVertexShaderID:I,customFragmentShaderID:N,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:g,instancing:!0===x.isInstancedMesh,instancingColor:!0===x.isInstancedMesh&&null!==x.instanceColor,supportsVertexTextures:m,outputEncoding:null===z?t.outputEncoding:!0===z.isXRRenderTarget?z.texture.encoding:P,map:!!a.map,matcap:!!a.matcap,envMap:!!M,envMapMode:M&&M.mapping,envMapCubeUVHeight:S,lightMap:!!a.lightMap,aoMap:!!a.aoMap,emissiveMap:!!a.emissiveMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,objectSpaceNormalMap:1===a.normalMapType,tangentSpaceNormalMap:0===a.normalMapType,decodeVideoTexture:!!a.map&&!0===a.map.isVideoTexture&&a.map.encoding===D,clearcoat:F,clearcoatMap:F&&!!a.clearcoatMap,clearcoatRoughnessMap:F&&!!a.clearcoatRoughnessMap,clearcoatNormalMap:F&&!!a.clearcoatNormalMap,displacementMap:!!a.displacementMap,roughnessMap:!!a.roughnessMap,metalnessMap:!!a.metalnessMap,specularMap:!!a.specularMap,specularIntensityMap:!!a.specularIntensityMap,specularColorMap:!!a.specularColorMap,opaque:!1===a.transparent&&1===a.blending,alphaMap:!!a.alphaMap,alphaTest:U,gradientMap:!!a.gradientMap,sheen:a.sheen>0,sheenColorMap:!!a.sheenColorMap,sheenRoughnessMap:!!a.sheenRoughnessMap,transmission:a.transmission>0,transmissionMap:!!a.transmissionMap,thicknessMap:!!a.thicknessMap,combine:a.combine,vertexTangents:!!a.normalMap&&!!b.attributes.tangent,vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!b.attributes.color&&4===b.attributes.color.itemSize,vertexUvs:!!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatMap||a.clearcoatRoughnessMap||a.clearcoatNormalMap||a.displacementMap||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularColorMap||a.sheenColorMap||a.sheenRoughnessMap),uvsVertexOnly:!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatNormalMap||a.transmission>0||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularColorMap||a.sheen>0||a.sheenColorMap||a.sheenRoughnessMap||!a.displacementMap),fog:!!_,useFog:a.fog,fogExp2:_&&_.isFogExp2,flatShading:!!a.flatShading,sizeAttenuation:a.sizeAttenuation,logarithmicDepthBuffer:d,skinning:!0===x.isSkinnedMesh&&T>0,maxBones:T,useVertexTexture:p,morphTargets:void 0!==b.morphAttributes.position,morphNormals:void 0!==b.morphAttributes.normal,morphColors:void 0!==b.morphAttributes.color,morphTargetsCount:R,morphTextureStride:O,numDirLights:l.directional.length,numPointLights:l.point.length,numSpotLights:l.spot.length,numRectAreaLights:l.rectArea.length,numHemiLights:l.hemi.length,numDirLightShadows:l.directionalShadowMap.length,numPointLightShadows:l.pointShadowMap.length,numSpotLightShadows:l.spotShadowMap.length,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:a.dithering,shadowMapEnabled:t.shadowMap.enabled&&h.length>0,shadowMapType:t.shadowMap.type,toneMapping:a.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:a.premultipliedAlpha,doubleSided:2===a.side,flipSided:1===a.side,depthPacking:void 0!==a.depthPacking&&a.depthPacking,index0AttributeName:a.index0AttributeName,extensionDerivatives:a.extensions&&a.extensions.derivatives,extensionFragDepth:a.extensions&&a.extensions.fragDepth,extensionDrawBuffers:a.extensions&&a.extensions.drawBuffers,extensionShaderTextureLOD:a.extensions&&a.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||i.has("EXT_shader_texture_lod"),customProgramCacheKey:a.customProgramCacheKey()}},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.customVertexShaderID),n.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(function(t,e){t.push(e.precision),t.push(e.outputEncoding),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.combine),t.push(e.vertexUvs),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.maxBones),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection)}(n,e),function(t,e){l.disableAll(),e.isWebGL2&&l.enable(0),e.supportsVertexTextures&&l.enable(1),e.instancing&&l.enable(2),e.instancingColor&&l.enable(3),e.map&&l.enable(4),e.matcap&&l.enable(5),e.envMap&&l.enable(6),e.lightMap&&l.enable(7),e.aoMap&&l.enable(8),e.emissiveMap&&l.enable(9),e.bumpMap&&l.enable(10),e.normalMap&&l.enable(11),e.objectSpaceNormalMap&&l.enable(12),e.tangentSpaceNormalMap&&l.enable(13),e.clearcoat&&l.enable(14),e.clearcoatMap&&l.enable(15),e.clearcoatRoughnessMap&&l.enable(16),e.clearcoatNormalMap&&l.enable(17),e.displacementMap&&l.enable(18),e.specularMap&&l.enable(19),e.roughnessMap&&l.enable(20),e.metalnessMap&&l.enable(21),e.gradientMap&&l.enable(22),e.alphaMap&&l.enable(23),e.alphaTest&&l.enable(24),e.vertexColors&&l.enable(25),e.vertexAlphas&&l.enable(26),e.vertexUvs&&l.enable(27),e.vertexTangents&&l.enable(28),e.uvsVertexOnly&&l.enable(29),e.fog&&l.enable(30),t.push(l.mask),l.disableAll(),e.useFog&&l.enable(0),e.flatShading&&l.enable(1),e.logarithmicDepthBuffer&&l.enable(2),e.skinning&&l.enable(3),e.useVertexTexture&&l.enable(4),e.morphTargets&&l.enable(5),e.morphNormals&&l.enable(6),e.morphColors&&l.enable(7),e.premultipliedAlpha&&l.enable(8),e.shadowMapEnabled&&l.enable(9),e.physicallyCorrectLights&&l.enable(10),e.doubleSided&&l.enable(11),e.flipSided&&l.enable(12),e.depthPacking&&l.enable(13),e.dithering&&l.enable(14),e.specularIntensityMap&&l.enable(15),e.specularColorMap&&l.enable(16),e.transmission&&l.enable(17),e.transmissionMap&&l.enable(18),e.thicknessMap&&l.enable(19),e.sheen&&l.enable(20),e.sheenColorMap&&l.enable(21),e.sheenRoughnessMap&&l.enable(22),e.decodeVideoTexture&&l.enable(23),e.opaque&&l.enable(24),t.push(l.mask)}(n,e),n.push(t.outputEncoding)),n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=v[t.type];let n;if(e){const t=kn[e];n=bn.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let i;for(let t=0,e=h.length;t<e;t++){const e=h[t];if(e.cacheKey===n){i=e,++i.usedTimes;break}}return void 0===i&&(i=new Fr(t,n,e,a),h.push(i)),i},releaseProgram:function(t){if(0==--t.usedTimes){const e=h.indexOf(t);h[e]=h[h.length-1],h.pop(),t.destroy()}},releaseShaderCache:function(t){c.remove(t)},programs:h,dispose:function(){c.dispose()}}}function Vr(){let t=new WeakMap;return{get:function(e){let n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,i){t.get(e)[n]=i},dispose:function(){t=new WeakMap}}}function Wr(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function jr(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Xr(){const t=[];let e=0;const n=[],i=[],r=[];function s(n,i,r,s,a,o){let l=t[e];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:s,renderOrder:n.renderOrder,z:a,group:o},t[e]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=s,l.renderOrder=n.renderOrder,l.z=a,l.group=o),e++,l}return{opaque:n,transmissive:i,transparent:r,init:function(){e=0,n.length=0,i.length=0,r.length=0},push:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?i.push(h):!0===a.transparent?r.push(h):n.push(h)},unshift:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?i.unshift(h):!0===a.transparent?r.unshift(h):n.unshift(h)},finish:function(){for(let n=e,i=t.length;n<i;n++){const e=t[n];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){n.length>1&&n.sort(t||Wr),i.length>1&&i.sort(e||jr),r.length>1&&r.sort(e||jr)}}}function qr(){let t=new WeakMap;return{get:function(e,n){let i;return!1===t.has(e)?(i=new Xr,t.set(e,[i])):n>=t.get(e).length?(i=new Xr,t.get(e).push(i)):i=t.get(e)[n],i},dispose:function(){t=new WeakMap}}}function Yr(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new bt,color:new ct};break;case"SpotLight":n={position:new bt,direction:new bt,color:new ct,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new bt,color:new ct,distance:0,decay:0};break;case"HemisphereLight":n={direction:new bt,skyColor:new ct,groundColor:new ct};break;case"RectAreaLight":n={color:new ct,position:new bt,halfWidth:new bt,halfHeight:new bt}}return t[e.id]=n,n}}}let Jr=0;function Zr(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function Kr(t,e){const n=new Yr,i=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new J};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new J,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)r.probe.push(new bt);const s=new bt,a=new Qt,o=new Qt;return{setup:function(s,a){let o=0,l=0,c=0;for(let t=0;t<9;t++)r.probe[t].set(0,0,0);let h=0,u=0,d=0,p=0,f=0,m=0,g=0,v=0;s.sort(Zr);const y=!0!==a?Math.PI:1;for(let t=0,e=s.length;t<e;t++){const e=s[t],a=e.color,x=e.intensity,_=e.distance,b=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)o+=a.r*x*y,l+=a.g*x*y,c+=a.b*x*y;else if(e.isLightProbe)for(let t=0;t<9;t++)r.probe[t].addScaledVector(e.sh.coefficients[t],x);else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.directionalShadow[h]=n,r.directionalShadowMap[h]=b,r.directionalShadowMatrix[h]=e.shadow.matrix,m++}r.directional[h]=t,h++}else if(e.isSpotLight){const t=n.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(a).multiplyScalar(x*y),t.distance=_,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.spotShadow[d]=n,r.spotShadowMap[d]=b,r.spotShadowMatrix[d]=e.shadow.matrix,v++}r.spot[d]=t,d++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(a).multiplyScalar(x),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),r.rectArea[p]=t,p++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,n.shadowCameraNear=t.camera.near,n.shadowCameraFar=t.camera.far,r.pointShadow[u]=n,r.pointShadowMap[u]=b,r.pointShadowMatrix[u]=e.shadow.matrix,g++}r.point[u]=t,u++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(x*y),t.groundColor.copy(e.groundColor).multiplyScalar(x*y),r.hemi[f]=t,f++}}p>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(r.rectAreaLTC1=Hn.LTC_FLOAT_1,r.rectAreaLTC2=Hn.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=Hn.LTC_HALF_1,r.rectAreaLTC2=Hn.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=c;const x=r.hash;x.directionalLength===h&&x.pointLength===u&&x.spotLength===d&&x.rectAreaLength===p&&x.hemiLength===f&&x.numDirectionalShadows===m&&x.numPointShadows===g&&x.numSpotShadows===v||(r.directional.length=h,r.spot.length=d,r.rectArea.length=p,r.point.length=u,r.hemi.length=f,r.directionalShadow.length=m,r.directionalShadowMap.length=m,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=v,r.spotShadowMap.length=v,r.directionalShadowMatrix.length=m,r.pointShadowMatrix.length=g,r.spotShadowMatrix.length=v,x.directionalLength=h,x.pointLength=u,x.spotLength=d,x.rectAreaLength=p,x.hemiLength=f,x.numDirectionalShadows=m,x.numPointShadows=g,x.numSpotShadows=v,r.version=Jr++)},setupView:function(t,e){let n=0,i=0,l=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=r.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),n++}else if(d.isSpotLight){const t=r.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),l++}else if(d.isRectAreaLight){const t=r.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),o.identity(),a.copy(d.matrixWorld),a.premultiply(u),o.extractRotation(a),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(o),t.halfHeight.applyMatrix4(o),c++}else if(d.isPointLight){const t=r.point[i];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),i++}else if(d.isHemisphereLight){const t=r.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),t.direction.normalize(),h++}}},state:r}}function Qr(t,e){const n=new Kr(t,e),i=[],r=[];return{init:function(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function(t){n.setup(i,t)},setupLightsView:function(t){n.setupView(i,t)},pushLight:function(t){i.push(t)},pushShadow:function(t){r.push(t)}}}function $r(t,e){let n=new WeakMap;return{get:function(i,r=0){let s;return!1===n.has(i)?(s=new Qr(t,e),n.set(i,[s])):r>=n.get(i).length?(s=new Qr(t,e),n.get(i).push(s)):s=n.get(i)[r],s},dispose:function(){n=new WeakMap}}}class ts extends ze{constructor(t){super(),this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}ts.prototype.isMeshDepthMaterial=!0;class es extends ze{constructor(t){super(),this.type="MeshDistanceMaterial",this.referencePosition=new bt,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function ns(t,e,n){let i=new On;const r=new J,s=new J,a=new gt,o=new ts({depthPacking:3201}),l=new es,h={},u=n.maxTextureSize,d={0:1,1:0,2:2},p=new wn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new J},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),f=p.clone();f.defines.HORIZONTAL_PASS=1;const m=new Ke;m.setAttribute("position",new He(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const g=new gn(m,p),v=this;function x(n,i){const r=e.update(g);p.defines.VSM_SAMPLES!==n.blurSamples&&(p.defines.VSM_SAMPLES=n.blurSamples,f.defines.VSM_SAMPLES=n.blurSamples,p.needsUpdate=!0,f.needsUpdate=!0),p.uniforms.shadow_pass.value=n.map.texture,p.uniforms.resolution.value=n.mapSize,p.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(i,null,r,p,g,null),f.uniforms.shadow_pass.value=n.mapPass.texture,f.uniforms.resolution.value=n.mapSize,f.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(i,null,r,f,g,null)}function _(e,n,i,r,s,a){let c=null;const u=!0===i.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(c=void 0!==u?u:!0===i.isPointLight?l:o,t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0){const t=c.uuid,e=n.uuid;let i=h[t];void 0===i&&(i={},h[t]=i);let r=i[e];void 0===r&&(r=c.clone(),i[e]=r),c=r}return c.visible=n.visible,c.wireframe=n.wireframe,c.side=3===a?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:d[n.side],c.alphaMap=n.alphaMap,c.alphaTest=n.alphaTest,c.clipShadows=n.clipShadows,c.clippingPlanes=n.clippingPlanes,c.clipIntersection=n.clipIntersection,c.displacementMap=n.displacementMap,c.displacementScale=n.displacementScale,c.displacementBias=n.displacementBias,c.wireframeLinewidth=n.wireframeLinewidth,c.linewidth=n.linewidth,!0===i.isPointLight&&!0===c.isMeshDistanceMaterial&&(c.referencePosition.setFromMatrixPosition(i.matrixWorld),c.nearDistance=r,c.farDistance=s),c}function b(n,r,s,a,o){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&3===o)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,n.matrixWorld);const i=e.update(n),r=n.material;if(Array.isArray(r)){const e=i.groups;for(let l=0,c=e.length;l<c;l++){const c=e[l],h=r[c.materialIndex];if(h&&h.visible){const e=_(n,h,a,s.near,s.far,o);t.renderBufferDirect(s,null,i,e,n,c)}}}else if(r.visible){const e=_(n,r,a,s.near,s.far,o);t.renderBufferDirect(s,null,i,e,n,null)}}const l=n.children;for(let t=0,e=l.length;t<e;t++)b(l[t],r,s,a,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,n,o){if(!1===v.enabled)return;if(!1===v.autoUpdate&&!1===v.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),h=t.getActiveCubeFace(),d=t.getActiveMipmapLevel(),p=t.state;p.setBlending(0),p.buffers.color.setClear(1,1,1,1),p.buffers.depth.setTest(!0),p.setScissorTest(!1);for(let l=0,h=e.length;l<h;l++){const h=e[l],d=h.shadow;if(void 0===d){console.warn("THREE.WebGLShadowMap:",h,"has no shadow.");continue}if(!1===d.autoUpdate&&!1===d.needsUpdate)continue;r.copy(d.mapSize);const f=d.getFrameExtents();if(r.multiply(f),s.copy(d.mapSize),(r.x>u||r.y>u)&&(r.x>u&&(s.x=Math.floor(u/f.x),r.x=s.x*f.x,d.mapSize.x=s.x),r.y>u&&(s.y=Math.floor(u/f.y),r.y=s.y*f.y,d.mapSize.y=s.y)),null!==d.map||d.isPointLightShadow||3!==this.type||(d.map=new vt(r.x,r.y),d.map.texture.name=h.name+".shadowMap",d.mapPass=new vt(r.x,r.y),d.camera.updateProjectionMatrix()),null===d.map){const t={minFilter:c,magFilter:c,format:y};d.map=new vt(r.x,r.y,t),d.map.texture.name=h.name+".shadowMap",d.camera.updateProjectionMatrix()}t.setRenderTarget(d.map),t.clear();const m=d.getViewportCount();for(let t=0;t<m;t++){const e=d.getViewport(t);a.set(s.x*e.x,s.y*e.y,s.x*e.z,s.y*e.w),p.viewport(a),d.updateMatrices(h,t),i=d.getFrustum(),b(n,o,d.camera,h,this.type)}d.isPointLightShadow||3!==this.type||x(d,o),d.needsUpdate=!1}v.needsUpdate=!1,t.setRenderTarget(l,h,d)}}function is(t,n,i){const r=i.isWebGL2,s=new function(){let e=!1;const n=new gt;let i=null;const r=new gt(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,s,a,o){!0===o&&(e*=a,i*=a,s*=a),n.set(e,i,s,a),!1===r.equals(n)&&(t.clearColor(e,i,s,a),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}},a=new function(){let e=!1,n=null,i=null,r=null;return{setTest:function(t){t?B(2929):H(2929)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){if(e)switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:default:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517)}else t.depthFunc(515);i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}},o=new function(){let e=!1,n=null,i=null,r=null,s=null,a=null,o=null,l=null,c=null;return{setTest:function(t){e||(t?B(2960):H(2960))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,a){i===e&&r===n&&s===a||(t.stencilFunc(e,n,a),i=e,r=n,s=a)},setOp:function(e,n,i){a===e&&o===n&&l===i||(t.stencilOp(e,n,i),a=e,o=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,s=null,a=null,o=null,l=null,c=null}}};let l={},c={},h=new WeakMap,u=[],d=null,p=!1,f=null,m=null,g=null,v=null,y=null,x=null,_=null,b=!1,w=null,M=null,S=null,E=null,T=null;const A=t.getParameter(35661);let R=!1,L=0;const C=t.getParameter(7938);-1!==C.indexOf("WebGL")?(L=parseFloat(/^WebGL (\d)/.exec(C)[1]),R=L>=1):-1!==C.indexOf("OpenGL ES")&&(L=parseFloat(/^OpenGL ES (\d)/.exec(C)[1]),R=L>=2);let P=null,D={};const I=t.getParameter(3088),N=t.getParameter(2978),O=(new gt).fromArray(I),z=(new gt).fromArray(N);function U(e,n,i){const r=new Uint8Array(4),s=t.createTexture();t.bindTexture(e,s),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<i;e++)t.texImage2D(n+e,0,6408,1,1,0,6408,5121,r);return s}const F={};function B(e){!0!==l[e]&&(t.enable(e),l[e]=!0)}function H(e){!1!==l[e]&&(t.disable(e),l[e]=!1)}F[3553]=U(3553,3553,1),F[34067]=U(34067,34069,6),s.setClear(0,0,0,1),a.setClear(1),o.setClear(0),B(2929),a.setFunc(3),W(!1),j(1),B(2884),V(0);const k={[e]:32774,101:32778,102:32779};if(r)k[103]=32775,k[104]=32776;else{const t=n.get("EXT_blend_minmax");null!==t&&(k[103]=t.MIN_EXT,k[104]=t.MAX_EXT)}const G={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function V(n,i,r,s,a,o,l,c){if(0!==n){if(!1===p&&(B(3042),p=!0),5===n)a=a||i,o=o||r,l=l||s,i===m&&a===y||(t.blendEquationSeparate(k[i],k[a]),m=i,y=a),r===g&&s===v&&o===x&&l===_||(t.blendFuncSeparate(G[r],G[s],G[o],G[l]),g=r,v=s,x=o,_=l),f=n,b=null;else if(n!==f||c!==b){if(m===e&&y===e||(t.blendEquation(32774),m=e,y=e),c)switch(n){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",n)}else switch(n){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",n)}g=null,v=null,x=null,_=null,f=n,b=c}}else!0===p&&(H(3042),p=!1)}function W(e){w!==e&&(e?t.frontFace(2304):t.frontFace(2305),w=e)}function j(e){0!==e?(B(2884),e!==M&&(1===e?t.cullFace(1029):2===e?t.cullFace(1028):t.cullFace(1032))):H(2884),M=e}function X(e,n,i){e?(B(32823),E===n&&T===i||(t.polygonOffset(n,i),E=n,T=i)):H(32823)}function q(e){void 0===e&&(e=33984+A-1),P!==e&&(t.activeTexture(e),P=e)}return{buffers:{color:s,depth:a,stencil:o},enable:B,disable:H,bindFramebuffer:function(e,n){return c[e]!==n&&(t.bindFramebuffer(e,n),c[e]=n,r&&(36009===e&&(c[36160]=n),36160===e&&(c[36009]=n)),!0)},drawBuffers:function(e,r){let s=u,a=!1;if(e)if(s=h.get(r),void 0===s&&(s=[],h.set(r,s)),e.isWebGLMultipleRenderTargets){const t=e.texture;if(s.length!==t.length||36064!==s[0]){for(let e=0,n=t.length;e<n;e++)s[e]=36064+e;s.length=t.length,a=!0}}else 36064!==s[0]&&(s[0]=36064,a=!0);else 1029!==s[0]&&(s[0]=1029,a=!0);a&&(i.isWebGL2?t.drawBuffers(s):n.get("WEBGL_draw_buffers").drawBuffersWEBGL(s))},useProgram:function(e){return d!==e&&(t.useProgram(e),d=e,!0)},setBlending:V,setMaterial:function(t,e){2===t.side?H(2884):B(2884);let n=1===t.side;e&&(n=!n),W(n),1===t.blending&&!1===t.transparent?V(0):V(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),s.setMask(t.colorWrite);const i=t.stencilWrite;o.setTest(i),i&&(o.setMask(t.stencilWriteMask),o.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),o.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),X(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?B(32926):H(32926)},setFlipSided:W,setCullFace:j,setLineWidth:function(e){e!==S&&(R&&t.lineWidth(e),S=e)},setPolygonOffset:X,setScissorTest:function(t){t?B(3089):H(3089)},activeTexture:q,bindTexture:function(e,n){null===P&&q();let i=D[P];void 0===i&&(i={type:void 0,texture:void 0},D[P]=i),i.type===e&&i.texture===n||(t.bindTexture(e,n||F[e]),i.type=e,i.texture=n)},unbindTexture:function(){const e=D[P];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===O.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),O.copy(e))},viewport:function(e){!1===z.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),z.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===r&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),l={},P=null,D={},c={},h=new WeakMap,u=[],d=null,p=!1,f=null,m=null,g=null,v=null,y=null,x=null,_=null,b=!1,w=null,M=null,S=null,E=null,T=null,O.set(0,0,t.canvas.width,t.canvas.height),z.set(0,0,t.canvas.width,t.canvas.height),s.reset(),a.reset(),o.reset()}}}function rs(t,e,n,i,r,s,b){const w=r.isWebGL2,M=r.maxTextures,S=r.maxCubemapSize,E=r.maxTextureSize,T=r.maxSamples,A=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,R=/OculusBrowser/g.test(navigator.userAgent),L=new WeakMap;let C;const I=new WeakMap;let N=!1;try{N="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function O(t,e){return N?new OffscreenCanvas(t,e):Q("canvas")}function z(t,e,n,i){let r=1;if((t.width>i||t.height>i)&&(r=i/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const i=e?Y:Math.floor,s=i(r*t.width),a=i(r*t.height);void 0===C&&(C=O(s,a));const o=n?O(s,a):C;return o.width=s,o.height=a,o.getContext("2d").drawImage(t,0,0,s,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+s+"x"+a+")."),o}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function U(t){return q(t.width)&&q(t.height)}function F(t,e){return t.generateMipmaps&&e&&t.minFilter!==c&&t.minFilter!==h}function H(e){t.generateMipmap(e)}function k(n,i,r,s,a=!1){if(!1===w)return i;if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let o=i;return 6403===i&&(5126===r&&(o=33326),5131===r&&(o=33325),5121===r&&(o=33321)),33319===i&&(5126===r&&(o=33328),5131===r&&(o=33327),5121===r&&(o=33323)),6408===i&&(5126===r&&(o=34836),5131===r&&(o=34842),5121===r&&(o=s===D&&!1===a?35907:32856),32819===r&&(o=32854),32820===r&&(o=32855)),33325!==o&&33326!==o&&33327!==o&&33328!==o&&34842!==o&&34836!==o||e.get("EXT_color_buffer_float"),o}function G(t,e,n){return!0===F(t,n)||t.isFramebufferTexture&&t.minFilter!==c&&t.minFilter!==h?Math.log2(Math.max(e.width,e.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?e.mipmaps.length:1}function V(t){return t===c||1004===t||1005===t?9728:9729}function W(t){const e=t.target;e.removeEventListener("dispose",W),function(t){const e=i.get(t);if(void 0===e.__webglInit)return;const n=t.source,r=I.get(n);if(r){const i=r[e.__cacheKey];i.usedTimes--,0===i.usedTimes&&X(t),0===Object.keys(r).length&&I.delete(n)}i.remove(t)}(e),e.isVideoTexture&&L.delete(e)}function j(e){const n=e.target;n.removeEventListener("dispose",j),function(e){const n=e.texture,r=i.get(e),s=i.get(n);if(void 0!==s.__webglTexture&&(t.deleteTexture(s.__webglTexture),b.memory.textures--),e.depthTexture&&e.depthTexture.dispose(),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e]);else t.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer&&t.deleteRenderbuffer(r.__webglColorRenderbuffer),r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),b.memory.textures--),i.remove(n[e])}i.remove(n),i.remove(e)}(n)}function X(e){const n=i.get(e);t.deleteTexture(n.__webglTexture);const r=e.source;delete I.get(r)[n.__cacheKey],b.memory.textures--}let J=0;function Z(t,e){const r=i.get(t);if(t.isVideoTexture&&function(t){const e=b.render.frame;L.get(t)!==e&&(L.set(t,e),t.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&r.__version!==t.version){const n=t.image;if(null===n)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==n.complete)return void nt(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+e),n.bindTexture(3553,r.__webglTexture)}const K={[a]:10497,[o]:33071,[l]:33648},$={[c]:9728,1004:9984,1005:9986,[h]:9729,1007:9985,[u]:9987};function tt(n,s,a){if(a?(t.texParameteri(n,10242,K[s.wrapS]),t.texParameteri(n,10243,K[s.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,K[s.wrapR]),t.texParameteri(n,10240,$[s.magFilter]),t.texParameteri(n,10241,$[s.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),s.wrapS===o&&s.wrapT===o||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,10240,V(s.magFilter)),t.texParameteri(n,10241,V(s.minFilter)),s.minFilter!==c&&s.minFilter!==h&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const a=e.get("EXT_texture_filter_anisotropic");if(s.type===m&&!1===e.has("OES_texture_float_linear"))return;if(!1===w&&s.type===g&&!1===e.has("OES_texture_half_float_linear"))return;(s.anisotropy>1||i.get(s).__currentAnisotropy)&&(t.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(s.anisotropy,r.getMaxAnisotropy())),i.get(s).__currentAnisotropy=s.anisotropy)}}function et(e,n){let i=!1;void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",W));const r=n.source;let s=I.get(r);void 0===s&&(s={},I.set(r,s));const a=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.encoding),e.join()}(n);if(a!==e.__cacheKey){void 0===s[a]&&(s[a]={texture:t.createTexture(),usedTimes:0},b.memory.textures++,i=!0),s[a].usedTimes++;const r=s[e.__cacheKey];void 0!==r&&(s[e.__cacheKey].usedTimes--,0===r.usedTimes&&X(n)),e.__cacheKey=a,e.__webglTexture=s[a].texture}return i}function nt(e,i,r){let a=3553;i.isDataArrayTexture&&(a=35866),i.isData3DTexture&&(a=32879);const l=et(e,i),u=i.source;if(n.activeTexture(33984+r),n.bindTexture(a,e.__webglTexture),u.version!==u.__currentVersion||!0===l){t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const r=function(t){return!w&&(t.wrapS!==o||t.wrapT!==o||t.minFilter!==c&&t.minFilter!==h)}(i)&&!1===U(i.image);let l=z(i.image,r,!1,E);l=lt(i,l);const d=U(l)||w,g=s.convert(i.format,i.encoding);let b,M=s.convert(i.type),S=k(i.internalFormat,g,M,i.encoding,i.isVideoTexture);tt(a,i,d);const T=i.mipmaps,A=w&&!0!==i.isVideoTexture,R=void 0===e.__version,L=G(i,l,d);if(i.isDepthTexture)S=6402,w?S=i.type===m?36012:i.type===f?33190:i.type===v?35056:33189:i.type===m&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),i.format===x&&6402===S&&i.type!==p&&i.type!==f&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=p,M=s.convert(i.type)),i.format===_&&6402===S&&(S=34041,i.type!==v&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=v,M=s.convert(i.type))),A&&R?n.texStorage2D(3553,1,S,l.width,l.height):n.texImage2D(3553,0,S,l.width,l.height,0,g,M,null);else if(i.isDataTexture)if(T.length>0&&d){A&&R&&n.texStorage2D(3553,L,S,T[0].width,T[0].height);for(let t=0,e=T.length;t<e;t++)b=T[t],A?n.texSubImage2D(3553,t,0,0,b.width,b.height,g,M,b.data):n.texImage2D(3553,t,S,b.width,b.height,0,g,M,b.data);i.generateMipmaps=!1}else A?(R&&n.texStorage2D(3553,L,S,l.width,l.height),n.texSubImage2D(3553,0,0,0,l.width,l.height,g,M,l.data)):n.texImage2D(3553,0,S,l.width,l.height,0,g,M,l.data);else if(i.isCompressedTexture){A&&R&&n.texStorage2D(3553,L,S,T[0].width,T[0].height);for(let t=0,e=T.length;t<e;t++)b=T[t],i.format!==y?null!==g?A?n.compressedTexSubImage2D(3553,t,0,0,b.width,b.height,g,b.data):n.compressedTexImage2D(3553,t,S,b.width,b.height,0,b.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):A?n.texSubImage2D(3553,t,0,0,b.width,b.height,g,M,b.data):n.texImage2D(3553,t,S,b.width,b.height,0,g,M,b.data)}else if(i.isDataArrayTexture)A?(R&&n.texStorage3D(35866,L,S,l.width,l.height,l.depth),n.texSubImage3D(35866,0,0,0,0,l.width,l.height,l.depth,g,M,l.data)):n.texImage3D(35866,0,S,l.width,l.height,l.depth,0,g,M,l.data);else if(i.isData3DTexture)A?(R&&n.texStorage3D(32879,L,S,l.width,l.height,l.depth),n.texSubImage3D(32879,0,0,0,0,l.width,l.height,l.depth,g,M,l.data)):n.texImage3D(32879,0,S,l.width,l.height,l.depth,0,g,M,l.data);else if(i.isFramebufferTexture)A&&R?n.texStorage2D(3553,L,S,l.width,l.height):n.texImage2D(3553,0,S,l.width,l.height,0,g,M,null);else if(T.length>0&&d){A&&R&&n.texStorage2D(3553,L,S,T[0].width,T[0].height);for(let t=0,e=T.length;t<e;t++)b=T[t],A?n.texSubImage2D(3553,t,0,0,g,M,b):n.texImage2D(3553,t,S,g,M,b);i.generateMipmaps=!1}else A?(R&&n.texStorage2D(3553,L,S,l.width,l.height),n.texSubImage2D(3553,0,0,0,g,M,l)):n.texImage2D(3553,0,S,g,M,l);F(i,d)&&H(a),u.__currentVersion=u.version,i.onUpdate&&i.onUpdate(i)}e.__version=i.version}function it(e,r,a,o,l){const c=s.convert(a.format,a.encoding),h=s.convert(a.type),u=k(a.internalFormat,c,h,a.encoding);i.get(r).__hasExternalTextures||(32879===l||35866===l?n.texImage3D(l,0,u,r.width,r.height,r.depth,0,c,h,null):n.texImage2D(l,0,u,r.width,r.height,0,c,h,null)),n.bindFramebuffer(36160,e),ot(r)?A.framebufferTexture2DMultisampleEXT(36160,o,l,i.get(a).__webglTexture,0,at(r)):t.framebufferTexture2D(36160,o,l,i.get(a).__webglTexture,0),n.bindFramebuffer(36160,null)}function rt(e,n,i){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){let r=33189;if(i||ot(n)){const e=n.depthTexture;e&&e.isDepthTexture&&(e.type===m?r=36012:e.type===f&&(r=33190));const i=at(n);ot(n)?A.renderbufferStorageMultisampleEXT(36161,i,r,n.width,n.height):t.renderbufferStorageMultisample(36161,i,r,n.width,n.height)}else t.renderbufferStorage(36161,r,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){const r=at(n);i&&!1===ot(n)?t.renderbufferStorageMultisample(36161,r,35056,n.width,n.height):ot(n)?A.renderbufferStorageMultisampleEXT(36161,r,35056,n.width,n.height):t.renderbufferStorage(36161,34041,n.width,n.height),t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===n.isWebGLMultipleRenderTargets?n.texture[0]:n.texture,r=s.convert(e.format,e.encoding),a=s.convert(e.type),o=k(e.internalFormat,r,a,e.encoding),l=at(n);i&&!1===ot(n)?t.renderbufferStorageMultisample(36161,l,o,n.width,n.height):ot(n)?A.renderbufferStorageMultisampleEXT(36161,l,o,n.width,n.height):t.renderbufferStorage(36161,o,n.width,n.height)}t.bindRenderbuffer(36161,null)}function st(e){const r=i.get(e),s=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(s)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(36160,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),Z(r.depthTexture,0);const s=i.get(r.depthTexture).__webglTexture,a=at(r);if(r.depthTexture.format===x)ot(r)?A.framebufferTexture2DMultisampleEXT(36160,36096,3553,s,0,a):t.framebufferTexture2D(36160,36096,3553,s,0);else{if(r.depthTexture.format!==_)throw new Error("Unknown depthTexture format");ot(r)?A.framebufferTexture2DMultisampleEXT(36160,33306,3553,s,0,a):t.framebufferTexture2D(36160,33306,3553,s,0)}}(r.__webglFramebuffer,e)}else if(s){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(36160,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=t.createRenderbuffer(),rt(r.__webglDepthbuffer[i],e,!1)}else n.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),rt(r.__webglDepthbuffer,e,!1);n.bindFramebuffer(36160,null)}function at(t){return Math.min(T,t.samples)}function ot(t){const n=i.get(t);return w&&t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function lt(t,n){const i=t.encoding,r=t.format,s=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||t.format===B||i!==P&&(i===D?!1===w?!0===e.has("EXT_sRGB")&&r===y?(t.format=B,t.minFilter=h,t.generateMipmaps=!1):n=ut.sRGBToLinear(n):r===y&&s===d||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",i)),n}this.allocateTextureUnit=function(){const t=J;return t>=M&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+M),J+=1,t},this.resetTextureUnits=function(){J=0},this.setTexture2D=Z,this.setTexture2DArray=function(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?nt(r,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?nt(r,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,r.__webglTexture))},this.setTextureCube=function(e,r){const a=i.get(e);e.version>0&&a.__version!==e.version?function(e,i,r){if(6!==i.image.length)return;const a=et(e,i),o=i.source;if(n.activeTexture(33984+r),n.bindTexture(34067,e.__webglTexture),o.version!==o.__currentVersion||!0===a){t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const r=i.isCompressedTexture||i.image[0].isCompressedTexture,a=i.image[0]&&i.image[0].isDataTexture,l=[];for(let t=0;t<6;t++)l[t]=r||a?a?i.image[t].image:i.image[t]:z(i.image[t],!1,!0,S),l[t]=lt(i,l[t]);const c=l[0],h=U(c)||w,u=s.convert(i.format,i.encoding),d=s.convert(i.type),p=k(i.internalFormat,u,d,i.encoding),f=w&&!0!==i.isVideoTexture,m=void 0===e.__version;let g,v=G(i,c,h);if(tt(34067,i,h),r){f&&m&&n.texStorage2D(34067,v,p,c.width,c.height);for(let t=0;t<6;t++){g=l[t].mipmaps;for(let e=0;e<g.length;e++){const r=g[e];i.format!==y?null!==u?f?n.compressedTexSubImage2D(34069+t,e,0,0,r.width,r.height,u,r.data):n.compressedTexImage2D(34069+t,e,p,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):f?n.texSubImage2D(34069+t,e,0,0,r.width,r.height,u,d,r.data):n.texImage2D(34069+t,e,p,r.width,r.height,0,u,d,r.data)}}}else{g=i.mipmaps,f&&m&&(g.length>0&&v++,n.texStorage2D(34067,v,p,l[0].width,l[0].height));for(let t=0;t<6;t++)if(a){f?n.texSubImage2D(34069+t,0,0,0,l[t].width,l[t].height,u,d,l[t].data):n.texImage2D(34069+t,0,p,l[t].width,l[t].height,0,u,d,l[t].data);for(let e=0;e<g.length;e++){const i=g[e].image[t].image;f?n.texSubImage2D(34069+t,e+1,0,0,i.width,i.height,u,d,i.data):n.texImage2D(34069+t,e+1,p,i.width,i.height,0,u,d,i.data)}}else{f?n.texSubImage2D(34069+t,0,0,0,u,d,l[t]):n.texImage2D(34069+t,0,p,u,d,l[t]);for(let e=0;e<g.length;e++){const i=g[e];f?n.texSubImage2D(34069+t,e+1,0,0,u,d,i.image[t]):n.texImage2D(34069+t,e+1,p,u,d,i.image[t])}}}F(i,h)&&H(34067),o.__currentVersion=o.version,i.onUpdate&&i.onUpdate(i)}e.__version=i.version}(a,e,r):(n.activeTexture(33984+r),n.bindTexture(34067,a.__webglTexture))},this.rebindTextures=function(t,e,n){const r=i.get(t);void 0!==e&&it(r.__webglFramebuffer,t,t.texture,36064,3553),void 0!==n&&st(t)},this.setupRenderTarget=function(e){const a=e.texture,o=i.get(e),l=i.get(a);e.addEventListener("dispose",j),!0!==e.isWebGLMultipleRenderTargets&&(void 0===l.__webglTexture&&(l.__webglTexture=t.createTexture()),l.__version=a.version,b.memory.textures++);const c=!0===e.isWebGLCubeRenderTarget,h=!0===e.isWebGLMultipleRenderTargets,u=U(e)||w;if(c){o.__webglFramebuffer=[];for(let e=0;e<6;e++)o.__webglFramebuffer[e]=t.createFramebuffer()}else if(o.__webglFramebuffer=t.createFramebuffer(),h)if(r.drawBuffers){const n=e.texture;for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),b.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(w&&e.samples>0&&!1===ot(e)){o.__webglMultisampledFramebuffer=t.createFramebuffer(),o.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,o.__webglColorRenderbuffer);const i=s.convert(a.format,a.encoding),r=s.convert(a.type),l=k(a.internalFormat,i,r,a.encoding),c=at(e);t.renderbufferStorageMultisample(36161,c,l,e.width,e.height),n.bindFramebuffer(36160,o.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,o.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(o.__webglDepthRenderbuffer=t.createRenderbuffer(),rt(o.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(36160,null)}if(c){n.bindTexture(34067,l.__webglTexture),tt(34067,a,u);for(let t=0;t<6;t++)it(o.__webglFramebuffer[t],e,a,36064,34069+t);F(a,u)&&H(34067),n.unbindTexture()}else if(h){const t=e.texture;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=i.get(s);n.bindTexture(3553,a.__webglTexture),tt(3553,s,u),it(o.__webglFramebuffer,e,s,36064+r,3553),F(s,u)&&H(3553)}n.unbindTexture()}else{let t=3553;(e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(w?t=e.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(t,l.__webglTexture),tt(t,a,u),it(o.__webglFramebuffer,e,a,36064,t),F(a,u)&&H(t),n.unbindTexture()}e.depthBuffer&&st(e)},this.updateRenderTargetMipmap=function(t){const e=U(t)||w,r=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let s=0,a=r.length;s<a;s++){const a=r[s];if(F(a,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,r=i.get(a).__webglTexture;n.bindTexture(e,r),H(e),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(w&&e.samples>0&&!1===ot(e)){const r=e.width,s=e.height;let a=16384;const o=[36064],l=e.stencilBuffer?33306:36096;e.depthBuffer&&o.push(l);const c=i.get(e),h=void 0!==c.__ignoreDepthValues&&c.__ignoreDepthValues;!1===h&&(e.depthBuffer&&(a|=256),e.stencilBuffer&&(a|=1024)),n.bindFramebuffer(36008,c.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,c.__webglFramebuffer),!0===h&&(t.invalidateFramebuffer(36008,[l]),t.invalidateFramebuffer(36009,[l])),t.blitFramebuffer(0,0,r,s,0,0,r,s,a,9728),R&&t.invalidateFramebuffer(36008,o),n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,c.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=st,this.setupFrameBufferTexture=it,this.useMultisampledRTT=ot}function ss(t,e,n){const i=n.isWebGL2;return{convert:function(t,n=null){let r;if(t===d)return 5121;if(1017===t)return 32819;if(1018===t)return 32820;if(1010===t)return 5120;if(1011===t)return 5122;if(t===p)return 5123;if(1013===t)return 5124;if(t===f)return 5125;if(t===m)return 5126;if(t===g)return i?5131:(r=e.get("OES_texture_half_float"),null!==r?r.HALF_FLOAT_OES:null);if(1021===t)return 6406;if(t===y)return 6408;if(1024===t)return 6409;if(1025===t)return 6410;if(t===x)return 6402;if(t===_)return 34041;if(1028===t)return 6403;if(1022===t)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(t===B)return r=e.get("EXT_sRGB"),null!==r?r.SRGB_ALPHA_EXT:null;if(1029===t)return 36244;if(1030===t)return 33319;if(1031===t)return 33320;if(1033===t)return 36249;if(t===b||t===w||t===M||t===S)if(n===D){if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===r)return null;if(t===b)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(t===w)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(t===M)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(t===S)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(r=e.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(t===b)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===w)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===M)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===S)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===t||35841===t||35842===t||35843===t){if(r=e.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(35840===t)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===t)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===t)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===t)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===t)return r=e.get("WEBGL_compressed_texture_etc1"),null!==r?r.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===t||37496===t){if(r=e.get("WEBGL_compressed_texture_etc"),null===r)return null;if(37492===t)return n===D?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(37496===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(37808===t||37809===t||37810===t||37811===t||37812===t||37813===t||37814===t||37815===t||37816===t||37817===t||37818===t||37819===t||37820===t||37821===t){if(r=e.get("WEBGL_compressed_texture_astc"),null===r)return null;if(37808===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===t)return n===D?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(36492===t){if(r=e.get("EXT_texture_compression_bptc"),null===r)return null;if(36492===t)return n===D?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT}return t===v?i?34042:(r=e.get("WEBGL_depth_texture"),null!==r?r.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}es.prototype.isMeshDistanceMaterial=!0;class as extends Sn{constructor(t=[]){super(),this.cameras=t}}as.prototype.isArrayCamera=!0;class os extends Me{constructor(){super(),this.type="Group"}}os.prototype.isGroup=!0;const ls={type:"move"};class cs{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new os,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new os,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new bt,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new bt),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new os,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new bt,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new bt),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,s=null;const a=this._targetRay,o=this._grip,l=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState)if(null!==a&&(i=e.getPose(t.targetRaySpace,n),null!==i&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(ls))),l&&t.hand){s=!0;for(const i of t.hand.values()){const t=e.getJointPose(i,n);if(void 0===l.joints[i.jointName]){const t=new os;t.matrixAutoUpdate=!1,t.visible=!1,l.joints[i.jointName]=t,l.add(t)}const r=l.joints[i.jointName];null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=t.radius),r.visible=null!==t}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],a=i.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&a>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!l.inputState.pinching&&a<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));return null!==a&&(a.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==s),this}}class hs extends mt{constructor(t,e,n,i,r,s,a,o,l,h){if((h=void 0!==h?h:x)!==x&&h!==_)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&h===x&&(n=p),void 0===n&&h===_&&(n=v),super(null,i,r,s,a,o,h,n,l),this.image={width:t,height:e},this.magFilter=void 0!==a?a:c,this.minFilter=void 0!==o?o:c,this.flipY=!1,this.generateMipmaps=!1}}hs.prototype.isDepthTexture=!0;class us extends H{constructor(t,e){super();const n=this;let i=null,r=1,s=null,a="local-floor",o=null,l=null,c=null,h=null,u=null;const f=e.getContextAttributes();let m=null,g=null;const b=[],w=new Map,M=new Sn;M.layers.enable(1),M.viewport=new gt;const S=new Sn;S.layers.enable(2),S.viewport=new gt;const E=[M,S],T=new as;T.layers.enable(1),T.layers.enable(2);let A=null,R=null;function L(t){const e=w.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function C(){w.forEach((function(t,e){t.disconnect(e)})),w.clear(),A=null,R=null,t.setRenderTarget(m),h=null,c=null,l=null,i=null,g=null,U.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function P(t){const e=i.inputSources;for(let t=0;t<b.length;t++)w.set(e[t],b[t]);for(let e=0;e<t.removed.length;e++){const n=t.removed[e],i=w.get(n);i&&(i.dispatchEvent({type:"disconnected",data:n}),w.delete(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e],i=w.get(n);i&&i.dispatchEvent({type:"connected",data:n})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=b[t];return void 0===e&&(e=new cs,b[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=b[t];return void 0===e&&(e=new cs,b[t]=e),e.getGripSpace()},this.getHand=function(t){let e=b[t];return void 0===e&&(e=new cs,b[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){a=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return s},this.getBaseLayer=function(){return null!==c?c:h},this.getBinding=function(){return l},this.getFrame=function(){return u},this.getSession=function(){return i},this.setSession=async function(o){if(i=o,null!==i){if(m=t.getRenderTarget(),i.addEventListener("select",L),i.addEventListener("selectstart",L),i.addEventListener("selectend",L),i.addEventListener("squeeze",L),i.addEventListener("squeezestart",L),i.addEventListener("squeezeend",L),i.addEventListener("end",C),i.addEventListener("inputsourceschange",P),!0!==f.xrCompatible&&await e.makeXRCompatible(),void 0===i.renderState.layers||!1===t.capabilities.isWebGL2){const n={antialias:void 0!==i.renderState.layers||f.antialias,alpha:f.alpha,depth:f.depth,stencil:f.stencil,framebufferScaleFactor:r};h=new XRWebGLLayer(i,e,n),i.updateRenderState({baseLayer:h}),g=new vt(h.framebufferWidth,h.framebufferHeight,{format:y,type:d,encoding:t.outputEncoding})}else{let n=null,s=null,a=null;f.depth&&(a=f.stencil?35056:33190,n=f.stencil?_:x,s=f.stencil?v:p);const o={colorFormat:t.outputEncoding===D?35907:32856,depthFormat:a,scaleFactor:r};l=new XRWebGLBinding(i,e),c=l.createProjectionLayer(o),i.updateRenderState({layers:[c]}),g=new vt(c.textureWidth,c.textureHeight,{format:y,type:d,depthTexture:new hs(c.textureWidth,c.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:f.stencil,encoding:t.outputEncoding,samples:f.antialias?4:0}),t.properties.get(g).__ignoreDepthValues=c.ignoreDepthValues}g.isXRRenderTarget=!0,this.setFoveation(1),s=await i.requestReferenceSpace(a),U.setContext(i),U.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};const I=new bt,N=new bt;function O(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===i)return;T.near=S.near=M.near=t.near,T.far=S.far=M.far=t.far,A===T.near&&R===T.far||(i.updateRenderState({depthNear:T.near,depthFar:T.far}),A=T.near,R=T.far);const e=t.parent,n=T.cameras;O(T,e);for(let t=0;t<n.length;t++)O(n[t],e);T.matrixWorld.decompose(T.position,T.quaternion,T.scale),t.position.copy(T.position),t.quaternion.copy(T.quaternion),t.scale.copy(T.scale),t.matrix.copy(T.matrix),t.matrixWorld.copy(T.matrixWorld);const r=t.children;for(let t=0,e=r.length;t<e;t++)r[t].updateMatrixWorld(!0);2===n.length?function(t,e,n){I.setFromMatrixPosition(e.matrixWorld),N.setFromMatrixPosition(n.matrixWorld);const i=I.distanceTo(N),r=e.projectionMatrix.elements,s=n.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(s[8]+1)/s[0],d=a*h,p=a*u,f=i/(-h+u),m=f*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=a+f,v=o+f,y=d-m,x=p+(i-m),_=l*o/v*g,b=c*o/v*g;t.projectionMatrix.makePerspective(y,x,_,b,g,v)}(T,M,S):T.projectionMatrix.copy(M.projectionMatrix)},this.getCamera=function(){return T},this.getFoveation=function(){return null!==c?c.fixedFoveation:null!==h?h.fixedFoveation:void 0},this.setFoveation=function(t){null!==c&&(c.fixedFoveation=t),null!==h&&void 0!==h.fixedFoveation&&(h.fixedFoveation=t)};let z=null;const U=new zn;U.setAnimationLoop((function(e,n){if(o=n.getViewerPose(s),u=n,null!==o){const e=o.views;null!==h&&(t.setRenderTargetFramebuffer(g,h.framebuffer),t.setRenderTarget(g));let n=!1;e.length!==T.cameras.length&&(T.cameras.length=0,n=!0);for(let i=0;i<e.length;i++){const r=e[i];let s=null;if(null!==h)s=h.getViewport(r);else{const e=l.getViewSubImage(c,r);s=e.viewport,0===i&&(t.setRenderTargetTextures(g,e.colorTexture,c.ignoreDepthValues?void 0:e.depthStencilTexture),t.setRenderTarget(g))}const a=E[i];a.matrix.fromArray(r.transform.matrix),a.projectionMatrix.fromArray(r.projectionMatrix),a.viewport.set(s.x,s.y,s.width,s.height),0===i&&T.matrix.copy(a.matrix),!0===n&&T.cameras.push(a)}}const r=i.inputSources;for(let t=0;t<b.length;t++){const e=b[t],i=r[t];e.update(i,n,s)}z&&z(e,n),u=null})),this.setAnimationLoop=function(t){z=t},this.dispose=function(){}}}function ds(t,e){function n(n,i){n.opacity.value=i.opacity,i.color&&n.diffuse.value.copy(i.color),i.emissive&&n.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(n.map.value=i.map),i.alphaMap&&(n.alphaMap.value=i.alphaMap),i.bumpMap&&(n.bumpMap.value=i.bumpMap,n.bumpScale.value=i.bumpScale,1===i.side&&(n.bumpScale.value*=-1)),i.displacementMap&&(n.displacementMap.value=i.displacementMap,n.displacementScale.value=i.displacementScale,n.displacementBias.value=i.displacementBias),i.emissiveMap&&(n.emissiveMap.value=i.emissiveMap),i.normalMap&&(n.normalMap.value=i.normalMap,n.normalScale.value.copy(i.normalScale),1===i.side&&n.normalScale.value.negate()),i.specularMap&&(n.specularMap.value=i.specularMap),i.alphaTest>0&&(n.alphaTest.value=i.alphaTest);const r=e.get(i).envMap;if(r&&(n.envMap.value=r,n.flipEnvMap.value=r.isCubeTexture&&!1===r.isRenderTargetTexture?-1:1,n.reflectivity.value=i.reflectivity,n.ior.value=i.ior,n.refractionRatio.value=i.refractionRatio),i.lightMap){n.lightMap.value=i.lightMap;const e=!0!==t.physicallyCorrectLights?Math.PI:1;n.lightMapIntensity.value=i.lightMapIntensity*e}let s,a;i.aoMap&&(n.aoMap.value=i.aoMap,n.aoMapIntensity.value=i.aoMapIntensity),i.map?s=i.map:i.specularMap?s=i.specularMap:i.displacementMap?s=i.displacementMap:i.normalMap?s=i.normalMap:i.bumpMap?s=i.bumpMap:i.roughnessMap?s=i.roughnessMap:i.metalnessMap?s=i.metalnessMap:i.alphaMap?s=i.alphaMap:i.emissiveMap?s=i.emissiveMap:i.clearcoatMap?s=i.clearcoatMap:i.clearcoatNormalMap?s=i.clearcoatNormalMap:i.clearcoatRoughnessMap?s=i.clearcoatRoughnessMap:i.specularIntensityMap?s=i.specularIntensityMap:i.specularColorMap?s=i.specularColorMap:i.transmissionMap?s=i.transmissionMap:i.thicknessMap?s=i.thicknessMap:i.sheenColorMap?s=i.sheenColorMap:i.sheenRoughnessMap&&(s=i.sheenRoughnessMap),void 0!==s&&(s.isWebGLRenderTarget&&(s=s.texture),!0===s.matrixAutoUpdate&&s.updateMatrix(),n.uvTransform.value.copy(s.matrix)),i.aoMap?a=i.aoMap:i.lightMap&&(a=i.lightMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),n.uv2Transform.value.copy(a.matrix))}return{refreshFogUniforms:function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(t,i,r,s,a){i.isMeshBasicMaterial||i.isMeshLambertMaterial?n(t,i):i.isMeshToonMaterial?(n(t,i),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(t,i)):i.isMeshPhongMaterial?(n(t,i),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4)}(t,i)):i.isMeshStandardMaterial?(n(t,i),function(t,n){t.roughness.value=n.roughness,t.metalness.value=n.metalness,n.roughnessMap&&(t.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(t.metalnessMap.value=n.metalnessMap),e.get(n).envMap&&(t.envMapIntensity.value=n.envMapIntensity)}(t,i),i.isMeshPhysicalMaterial&&function(t,e,n){t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap)),e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate())),e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=n.texture,t.transmissionSamplerSize.value.set(n.width,n.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor)),t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap),e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap)}(t,i,a)):i.isMeshMatcapMaterial?(n(t,i),function(t,e){e.matcap&&(t.matcap.value=e.matcap)}(t,i)):i.isMeshDepthMaterial?n(t,i):i.isMeshDistanceMaterial?(n(t,i),function(t,e){t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,i)):i.isMeshNormalMaterial?n(t,i):i.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,i),i.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,i)):i.isPointsMaterial?function(t,e,n,i){let r;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*n,t.scale.value=.5*i,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?r=e.map:e.alphaMap&&(r=e.alphaMap),void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix))}(t,i,r,s):i.isSpriteMaterial?function(t,e){let n;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?n=e.map:e.alphaMap&&(n=e.alphaMap),void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(t,i):i.isShadowMaterial?(t.color.value.copy(i.color),t.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}function ps(t={}){const e=void 0!==t.canvas?t.canvas:function(){const t=Q("canvas");return t.style.display="block",t}(),n=void 0!==t.context?t.context:null,i=void 0===t.depth||t.depth,r=void 0===t.stencil||t.stencil,s=void 0!==t.antialias&&t.antialias,a=void 0===t.premultipliedAlpha||t.premultipliedAlpha,o=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,l=void 0!==t.powerPreference?t.powerPreference:"default",c=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let h;h=void 0!==t.context?n.getContextAttributes().alpha:void 0!==t.alpha&&t.alpha;let p=null,f=null;const v=[],x=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=P,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const _=this;let b=!1,w=0,M=0,S=null,E=-1,T=null;const A=new gt,R=new gt;let L=null,C=e.width,D=e.height,I=1,N=null,O=null;const z=new gt(0,0,C,D),U=new gt(0,0,C,D);let F=!1;const B=new On;let H=!1,k=!1,G=null;const V=new Qt,W=new J,j=new bt,X={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function q(){return null===S?I:1}let Z,K,$,tt,et,nt,it,rt,st,at,ot,lt,ct,ht,ut,dt,pt,ft,mt,yt,xt,_t,wt,Mt=n;function St(t,n){for(let i=0;i<t.length;i++){const r=t[i],s=e.getContext(r,n);if(null!==s)return s}return null}try{const t={alpha:!0,depth:i,stencil:r,antialias:s,premultipliedAlpha:a,preserveDrawingBuffer:o,powerPreference:l,failIfMajorPerformanceCaveat:c};if("setAttribute"in e&&e.setAttribute("data-engine","three.js r139"),e.addEventListener("webglcontextlost",At,!1),e.addEventListener("webglcontextrestored",Rt,!1),null===Mt){const e=["webgl2","webgl","experimental-webgl"];if(!0===_.isWebGL1Renderer&&e.shift(),Mt=St(e,t),null===Mt)throw St(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===Mt.getShaderPrecisionFormat&&(Mt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function Et(){Z=new li(Mt),K=new jn(Mt,Z,t),Z.init(K),_t=new ss(Mt,Z,K),$=new is(Mt,Z,K),tt=new ui(Mt),et=new Vr,nt=new rs(Mt,Z,$,et,K,_t,tt),it=new qn(_),rt=new oi(_),st=new Un(Mt,K),wt=new Vn(Mt,Z,st,K),at=new ci(Mt,st,tt,wt),ot=new gi(Mt,at,st,tt),mt=new mi(Mt,K,nt),dt=new Xn(et),lt=new Gr(_,it,rt,Z,K,wt,dt),ct=new ds(_,et),ht=new qr,ut=new $r(Z,K),ft=new Gn(_,it,$,ot,h,a),pt=new ns(_,ot,K),yt=new Wn(Mt,Z,tt,K),xt=new hi(Mt,Z,tt,K),tt.programs=lt.programs,_.capabilities=K,_.extensions=Z,_.properties=et,_.renderLists=ht,_.shadowMap=pt,_.state=$,_.info=tt}Et();const Tt=new us(_,Mt);function At(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),b=!0}function Rt(){console.log("THREE.WebGLRenderer: Context Restored."),b=!1;const t=tt.autoReset,e=pt.enabled,n=pt.autoUpdate,i=pt.needsUpdate,r=pt.type;Et(),tt.autoReset=t,pt.enabled=e,pt.autoUpdate=n,pt.needsUpdate=i,pt.type=r}function Lt(t){const e=t.target;e.removeEventListener("dispose",Lt),function(t){(function(t){const e=et.get(t).programs;void 0!==e&&(e.forEach((function(t){lt.releaseProgram(t)})),t.isShaderMaterial&&lt.releaseShaderCache(t))})(t),et.remove(t)}(e)}this.xr=Tt,this.getContext=function(){return Mt},this.getContextAttributes=function(){return Mt.getContextAttributes()},this.forceContextLoss=function(){const t=Z.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=Z.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(t){void 0!==t&&(I=t,this.setSize(C,D,!1))},this.getSize=function(t){return t.set(C,D)},this.setSize=function(t,n,i){Tt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(C=t,D=n,e.width=Math.floor(t*I),e.height=Math.floor(n*I),!1!==i&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return t.set(C*I,D*I).floor()},this.setDrawingBufferSize=function(t,n,i){C=t,D=n,I=i,e.width=Math.floor(t*i),e.height=Math.floor(n*i),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return t.copy(A)},this.getViewport=function(t){return t.copy(z)},this.setViewport=function(t,e,n,i){t.isVector4?z.set(t.x,t.y,t.z,t.w):z.set(t,e,n,i),$.viewport(A.copy(z).multiplyScalar(I).floor())},this.getScissor=function(t){return t.copy(U)},this.setScissor=function(t,e,n,i){t.isVector4?U.set(t.x,t.y,t.z,t.w):U.set(t,e,n,i),$.scissor(R.copy(U).multiplyScalar(I).floor())},this.getScissorTest=function(){return F},this.setScissorTest=function(t){$.setScissorTest(F=t)},this.setOpaqueSort=function(t){N=t},this.setTransparentSort=function(t){O=t},this.getClearColor=function(t){return t.copy(ft.getClearColor())},this.setClearColor=function(){ft.setClearColor.apply(ft,arguments)},this.getClearAlpha=function(){return ft.getClearAlpha()},this.setClearAlpha=function(){ft.setClearAlpha.apply(ft,arguments)},this.clear=function(t=!0,e=!0,n=!0){let i=0;t&&(i|=16384),e&&(i|=256),n&&(i|=1024),Mt.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",At,!1),e.removeEventListener("webglcontextrestored",Rt,!1),ht.dispose(),ut.dispose(),et.dispose(),it.dispose(),rt.dispose(),ot.dispose(),wt.dispose(),lt.dispose(),Tt.dispose(),Tt.removeEventListener("sessionstart",Pt),Tt.removeEventListener("sessionend",Dt),G&&(G.dispose(),G=null),It.stop()},this.renderBufferDirect=function(t,e,n,i,r,s){null===e&&(e=X);const a=r.isMesh&&r.matrixWorld.determinant()<0,o=function(t,e,n,i,r){!0!==e.isScene&&(e=X),nt.resetTextureUnits();const s=e.fog,a=i.isMeshStandardMaterial?e.environment:null,o=null===S?_.outputEncoding:!0===S.isXRRenderTarget?S.texture.encoding:P,l=(i.isMeshStandardMaterial?rt:it).get(i.envMap||a),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,h=!!i.normalMap&&!!n.attributes.tangent,u=!!n.morphAttributes.position,d=!!n.morphAttributes.normal,p=!!n.morphAttributes.color,m=i.toneMapped?_.toneMapping:0,g=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,v=void 0!==g?g.length:0,y=et.get(i),x=f.state.lights;if(!0===H&&(!0===k||t!==T)){const e=t===T&&i.id===E;dt.setState(i,t,e)}let b=!1;i.version===y.__version?y.needsLights&&y.lightsStateVersion!==x.state.version||y.outputEncoding!==o||r.isInstancedMesh&&!1===y.instancing?b=!0:r.isInstancedMesh||!0!==y.instancing?r.isSkinnedMesh&&!1===y.skinning?b=!0:r.isSkinnedMesh||!0!==y.skinning?y.envMap!==l||i.fog&&y.fog!==s?b=!0:void 0===y.numClippingPlanes||y.numClippingPlanes===dt.numPlanes&&y.numIntersection===dt.numIntersection?(y.vertexAlphas!==c||y.vertexTangents!==h||y.morphTargets!==u||y.morphNormals!==d||y.morphColors!==p||y.toneMapping!==m||!0===K.isWebGL2&&y.morphTargetsCount!==v)&&(b=!0):b=!0:b=!0:b=!0:(b=!0,y.__version=i.version);let w=y.currentProgram;!0===b&&(w=Ft(i,e,r));let M=!1,A=!1,R=!1;const L=w.getUniforms(),C=y.uniforms;if($.useProgram(w.program)&&(M=!0,A=!0,R=!0),i.id!==E&&(E=i.id,A=!0),M||T!==t){if(L.setValue(Mt,"projectionMatrix",t.projectionMatrix),K.logarithmicDepthBuffer&&L.setValue(Mt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),T!==t&&(T=t,A=!0,R=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){const e=L.map.cameraPosition;void 0!==e&&e.setValue(Mt,j.setFromMatrixPosition(t.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&L.setValue(Mt,"isOrthographic",!0===t.isOrthographicCamera),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.isShadowMaterial||r.isSkinnedMesh)&&L.setValue(Mt,"viewMatrix",t.matrixWorldInverse)}if(r.isSkinnedMesh){L.setOptional(Mt,r,"bindMatrix"),L.setOptional(Mt,r,"bindMatrixInverse");const t=r.skeleton;t&&(K.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),L.setValue(Mt,"boneTexture",t.boneTexture,nt),L.setValue(Mt,"boneTextureSize",t.boneTextureSize)):L.setOptional(Mt,t,"boneMatrices"))}const N=n.morphAttributes;var O,z;return(void 0!==N.position||void 0!==N.normal||void 0!==N.color&&!0===K.isWebGL2)&&mt.update(r,n,i,w),(A||y.receiveShadow!==r.receiveShadow)&&(y.receiveShadow=r.receiveShadow,L.setValue(Mt,"receiveShadow",r.receiveShadow)),A&&(L.setValue(Mt,"toneMappingExposure",_.toneMappingExposure),y.needsLights&&(z=R,(O=C).ambientLightColor.needsUpdate=z,O.lightProbe.needsUpdate=z,O.directionalLights.needsUpdate=z,O.directionalLightShadows.needsUpdate=z,O.pointLights.needsUpdate=z,O.pointLightShadows.needsUpdate=z,O.spotLights.needsUpdate=z,O.spotLightShadows.needsUpdate=z,O.rectAreaLights.needsUpdate=z,O.hemisphereLights.needsUpdate=z),s&&i.fog&&ct.refreshFogUniforms(C,s),ct.refreshMaterialUniforms(C,i,I,D,G),_r.upload(Mt,y.uniformsList,C,nt)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(_r.upload(Mt,y.uniformsList,C,nt),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&L.setValue(Mt,"center",r.center),L.setValue(Mt,"modelViewMatrix",r.modelViewMatrix),L.setValue(Mt,"normalMatrix",r.normalMatrix),L.setValue(Mt,"modelMatrix",r.matrixWorld),w}(t,e,n,i,r);$.setMaterial(i,a);let l=n.index;const c=n.attributes.position;if(null===l){if(void 0===c||0===c.count)return}else if(0===l.count)return;let h,u=1;!0===i.wireframe&&(l=at.getWireframeAttribute(n),u=2),wt.setup(r,i,o,n,l);let d=yt;null!==l&&(h=st.get(l),d=xt,d.setIndex(h));const p=null!==l?l.count:c.count,m=n.drawRange.start*u,g=n.drawRange.count*u,v=null!==s?s.start*u:0,y=null!==s?s.count*u:1/0,x=Math.max(m,v),b=Math.min(p,m+g,v+y)-1,w=Math.max(0,b-x+1);if(0!==w){if(r.isMesh)!0===i.wireframe?($.setLineWidth(i.wireframeLinewidth*q()),d.setMode(1)):d.setMode(4);else if(r.isLine){let t=i.linewidth;void 0===t&&(t=1),$.setLineWidth(t*q()),r.isLineSegments?d.setMode(1):r.isLineLoop?d.setMode(2):d.setMode(3)}else r.isPoints?d.setMode(0):r.isSprite&&d.setMode(4);if(r.isInstancedMesh)d.renderInstances(x,w,r.count);else if(n.isInstancedBufferGeometry){const t=Math.min(n.instanceCount,n._maxInstanceCount);d.renderInstances(x,w,t)}else d.render(x,w)}},this.compile=function(t,e){f=ut.get(t),f.init(),x.push(f),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(f.pushLight(t),t.castShadow&&f.pushShadow(t))})),f.setupLights(_.physicallyCorrectLights),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let i=0;i<n.length;i++)Ft(n[i],t,e);else Ft(n,t,e)})),x.pop(),f=null};let Ct=null;function Pt(){It.stop()}function Dt(){It.start()}const It=new zn;function Nt(t,e,n,i){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)f.pushLight(t),t.castShadow&&f.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||B.intersectsSprite(t)){i&&j.setFromMatrixPosition(t.matrixWorld).applyMatrix4(V);const e=ot.update(t),r=t.material;r.visible&&p.push(t,e,r,n,j.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==tt.render.frame&&(t.skeleton.update(),t.skeleton.frame=tt.render.frame),!t.frustumCulled||B.intersectsObject(t))){i&&j.setFromMatrixPosition(t.matrixWorld).applyMatrix4(V);const e=ot.update(t),r=t.material;if(Array.isArray(r)){const i=e.groups;for(let s=0,a=i.length;s<a;s++){const a=i[s],o=r[a.materialIndex];o&&o.visible&&p.push(t,e,o,n,j.z,a)}}else r.visible&&p.push(t,e,r,n,j.z,null)}const r=t.children;for(let t=0,s=r.length;t<s;t++)Nt(r[t],e,n,i)}function Ot(t,e,n,i){const r=t.opaque,a=t.transmissive,o=t.transparent;f.setupLightsView(n),a.length>0&&function(t,e,n){const i=K.isWebGL2;null===G&&(G=new vt(1,1,{generateMipmaps:!0,type:null!==_t.convert(g)?g:d,minFilter:u,samples:i&&!0===s?4:0})),_.getDrawingBufferSize(W),i?G.setSize(W.x,W.y):G.setSize(Y(W.x),Y(W.y));const r=_.getRenderTarget();_.setRenderTarget(G),_.clear();const a=_.toneMapping;_.toneMapping=0,zt(t,e,n),_.toneMapping=a,nt.updateMultisampleRenderTarget(G),nt.updateRenderTargetMipmap(G),_.setRenderTarget(r)}(r,e,n),i&&$.viewport(A.copy(i)),r.length>0&&zt(r,e,n),a.length>0&&zt(a,e,n),o.length>0&&zt(o,e,n),$.buffers.depth.setTest(!0),$.buffers.depth.setMask(!0),$.buffers.color.setMask(!0),$.setPolygonOffset(!1)}function zt(t,e,n){const i=!0===e.isScene?e.overrideMaterial:null;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=s.object,o=s.geometry,l=null===i?s.material:i,c=s.group;a.layers.test(n.layers)&&Ut(a,e,n,o,l,c)}}function Ut(t,e,n,i,r,s){t.onBeforeRender(_,e,n,i,r,s),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),r.onBeforeRender(_,e,n,i,t,s),!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,_.renderBufferDirect(n,e,i,r,t,s),r.side=0,r.needsUpdate=!0,_.renderBufferDirect(n,e,i,r,t,s),r.side=2):_.renderBufferDirect(n,e,i,r,t,s),t.onAfterRender(_,e,n,i,r,s)}function Ft(t,e,n){!0!==e.isScene&&(e=X);const i=et.get(t),r=f.state.lights,s=f.state.shadowsArray,a=r.state.version,o=lt.getParameters(t,r.state,s,e,n),l=lt.getProgramCacheKey(o);let c=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null,i.fog=e.fog,i.envMap=(t.isMeshStandardMaterial?rt:it).get(t.envMap||i.environment),void 0===c&&(t.addEventListener("dispose",Lt),c=new Map,i.programs=c);let h=c.get(l);if(void 0!==h){if(i.currentProgram===h&&i.lightsStateVersion===a)return Bt(t,o),h}else o.uniforms=lt.getUniforms(t),t.onBuild(n,o,_),t.onBeforeCompile(o,_),h=lt.acquireProgram(o,l),c.set(l,h),i.uniforms=o.uniforms;const u=i.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(u.clippingPlanes=dt.uniform),Bt(t,o),i.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),i.lightsStateVersion=a,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotShadowMatrix.value=r.state.spotShadowMatrix,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix);const d=h.getUniforms(),p=_r.seqWithValue(d.seq,u);return i.currentProgram=h,i.uniformsList=p,h}function Bt(t,e){const n=et.get(t);n.outputEncoding=e.outputEncoding,n.instancing=e.instancing,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.morphColors=e.morphColors,n.morphTargetsCount=e.morphTargetsCount,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents,n.toneMapping=e.toneMapping}It.setAnimationLoop((function(t){Ct&&Ct(t)})),"undefined"!=typeof self&&It.setContext(self),this.setAnimationLoop=function(t){Ct=t,Tt.setAnimationLoop(t),null===t?It.stop():It.start()},Tt.addEventListener("sessionstart",Pt),Tt.addEventListener("sessionend",Dt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===b)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===Tt.enabled&&!0===Tt.isPresenting&&(!0===Tt.cameraAutoUpdate&&Tt.updateCamera(e),e=Tt.getCamera()),!0===t.isScene&&t.onBeforeRender(_,t,e,S),f=ut.get(t,x.length),f.init(),x.push(f),V.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),B.setFromProjectionMatrix(V),k=this.localClippingEnabled,H=dt.init(this.clippingPlanes,k,e),p=ht.get(t,v.length),p.init(),v.push(p),Nt(t,e,0,_.sortObjects),p.finish(),!0===_.sortObjects&&p.sort(N,O),!0===H&&dt.beginShadows();const n=f.state.shadowsArray;if(pt.render(n,t,e),!0===H&&dt.endShadows(),!0===this.info.autoReset&&this.info.reset(),ft.render(p,t),f.setupLights(_.physicallyCorrectLights),e.isArrayCamera){const n=e.cameras;for(let e=0,i=n.length;e<i;e++){const i=n[e];Ot(p,t,i,i.viewport)}}else Ot(p,t,e);null!==S&&(nt.updateMultisampleRenderTarget(S),nt.updateRenderTargetMipmap(S)),!0===t.isScene&&t.onAfterRender(_,t,e),wt.resetDefaultState(),E=-1,T=null,x.pop(),f=x.length>0?x[x.length-1]:null,v.pop(),p=v.length>0?v[v.length-1]:null},this.getActiveCubeFace=function(){return w},this.getActiveMipmapLevel=function(){return M},this.getRenderTarget=function(){return S},this.setRenderTargetTextures=function(t,e,n){et.get(t.texture).__webglTexture=e,et.get(t.depthTexture).__webglTexture=n;const i=et.get(t);i.__hasExternalTextures=!0,i.__hasExternalTextures&&(i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===Z.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(t,e){const n=et.get(t);n.__webglFramebuffer=e,n.__useDefaultFramebuffer=void 0===e},this.setRenderTarget=function(t,e=0,n=0){S=t,w=e,M=n;let i=!0;if(t){const e=et.get(t);void 0!==e.__useDefaultFramebuffer?($.bindFramebuffer(36160,null),i=!1):void 0===e.__webglFramebuffer?nt.setupRenderTarget(t):e.__hasExternalTextures&&nt.rebindTextures(t,et.get(t.texture).__webglTexture,et.get(t.depthTexture).__webglTexture)}let r=null,s=!1,a=!1;if(t){const n=t.texture;(n.isData3DTexture||n.isDataArrayTexture)&&(a=!0);const i=et.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=i[e],s=!0):r=K.isWebGL2&&t.samples>0&&!1===nt.useMultisampledRTT(t)?et.get(t).__webglMultisampledFramebuffer:i,A.copy(t.viewport),R.copy(t.scissor),L=t.scissorTest}else A.copy(z).multiplyScalar(I).floor(),R.copy(U).multiplyScalar(I).floor(),L=F;if($.bindFramebuffer(36160,r)&&K.drawBuffers&&i&&$.drawBuffers(t,r),$.viewport(A),$.scissor(R),$.setScissorTest(L),s){const i=et.get(t.texture);Mt.framebufferTexture2D(36160,36064,34069+e,i.__webglTexture,n)}else if(a){const i=et.get(t.texture),r=e||0;Mt.framebufferTextureLayer(36160,36064,i.__webglTexture,n||0,r)}E=-1},this.readRenderTargetPixels=function(t,e,n,i,r,s,a){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=et.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){$.bindFramebuffer(36160,o);try{const a=t.texture,o=a.format,l=a.type;if(o!==y&&_t.convert(o)!==Mt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===g&&(Z.has("EXT_color_buffer_half_float")||K.isWebGL2&&Z.has("EXT_color_buffer_float"));if(!(l===d||_t.convert(l)===Mt.getParameter(35738)||l===m&&(K.isWebGL2||Z.has("OES_texture_float")||Z.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&Mt.readPixels(e,n,i,r,_t.convert(o),_t.convert(l),s)}finally{const t=null!==S?et.get(S).__webglFramebuffer:null;$.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,n=0){if(!0!==e.isFramebufferTexture)return void console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");const i=Math.pow(2,-n),r=Math.floor(e.image.width*i),s=Math.floor(e.image.height*i);nt.setTexture2D(e,0),Mt.copyTexSubImage2D(3553,n,0,0,t.x,t.y,r,s),$.unbindTexture()},this.copyTextureToTexture=function(t,e,n,i=0){const r=e.image.width,s=e.image.height,a=_t.convert(n.format),o=_t.convert(n.type);nt.setTexture2D(n,0),Mt.pixelStorei(37440,n.flipY),Mt.pixelStorei(37441,n.premultiplyAlpha),Mt.pixelStorei(3317,n.unpackAlignment),e.isDataTexture?Mt.texSubImage2D(3553,i,t.x,t.y,r,s,a,o,e.image.data):e.isCompressedTexture?Mt.compressedTexSubImage2D(3553,i,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,a,e.mipmaps[0].data):Mt.texSubImage2D(3553,i,t.x,t.y,a,o,e.image),0===i&&n.generateMipmaps&&Mt.generateMipmap(3553),$.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n,i,r=0){if(_.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const s=t.max.x-t.min.x+1,a=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=_t.convert(i.format),c=_t.convert(i.type);let h;if(i.isData3DTexture)nt.setTexture3D(i,0),h=32879;else{if(!i.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");nt.setTexture2DArray(i,0),h=35866}Mt.pixelStorei(37440,i.flipY),Mt.pixelStorei(37441,i.premultiplyAlpha),Mt.pixelStorei(3317,i.unpackAlignment);const u=Mt.getParameter(3314),d=Mt.getParameter(32878),p=Mt.getParameter(3316),f=Mt.getParameter(3315),m=Mt.getParameter(32877),g=n.isCompressedTexture?n.mipmaps[0]:n.image;Mt.pixelStorei(3314,g.width),Mt.pixelStorei(32878,g.height),Mt.pixelStorei(3316,t.min.x),Mt.pixelStorei(3315,t.min.y),Mt.pixelStorei(32877,t.min.z),n.isDataTexture||n.isData3DTexture?Mt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,g.data):n.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Mt.compressedTexSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,g.data)):Mt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,g),Mt.pixelStorei(3314,u),Mt.pixelStorei(32878,d),Mt.pixelStorei(3316,p),Mt.pixelStorei(3315,f),Mt.pixelStorei(32877,m),0===r&&i.generateMipmaps&&Mt.generateMipmap(h),$.unbindTexture()},this.initTexture=function(t){nt.setTexture2D(t,0),$.unbindTexture()},this.resetState=function(){w=0,M=0,S=null,$.reset(),wt.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}ps.prototype.isWebGLRenderer=!0,class extends ps{}.prototype.isWebGL1Renderer=!0;class fs{constructor(t,e=25e-5){this.name="",this.color=new ct(t),this.density=e}clone(){return new fs(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}fs.prototype.isFogExp2=!0;class ms{constructor(t,e=1,n=1e3){this.name="",this.color=new ct(t),this.near=e,this.far=n}clone(){return new ms(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}ms.prototype.isFog=!0;class gs extends Me{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}gs.prototype.isScene=!0;class vs{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=z,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=W()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=W()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=W()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}vs.prototype.isInterleavedBuffer=!0;const ys=new bt;class xs{constructor(t,e,n,i=!1){this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)ys.fromBufferAttribute(this,e),ys.applyMatrix4(t),this.setXYZ(e,ys.x,ys.y,ys.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)ys.fromBufferAttribute(this,e),ys.applyNormalMatrix(t),this.setXYZ(e,ys.x,ys.y,ys.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)ys.fromBufferAttribute(this,e),ys.transformDirection(t),this.setXYZ(e,ys.x,ys.y,ys.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return new He(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new xs(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}xs.prototype.isInterleavedBufferAttribute=!0;class _s extends ze{constructor(t){super(),this.type="SpriteMaterial",this.color=new ct(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let bs;_s.prototype.isSpriteMaterial=!0;const ws=new bt,Ms=new bt,Ss=new bt,Es=new J,Ts=new J,As=new Qt,Rs=new bt,Ls=new bt,Cs=new bt,Ps=new J,Ds=new J,Is=new J;function Ns(t,e,n,i,r,s){Es.subVectors(t,n).addScalar(.5).multiply(i),void 0!==r?(Ts.x=s*Es.x-r*Es.y,Ts.y=r*Es.x+s*Es.y):Ts.copy(Es),t.copy(e),t.x+=Ts.x,t.y+=Ts.y,t.applyMatrix4(As)}(class extends Me{constructor(t){if(super(),this.type="Sprite",void 0===bs){bs=new Ke;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new vs(t,5);bs.setIndex([0,1,2,0,2,3]),bs.setAttribute("position",new xs(e,3,0,!1)),bs.setAttribute("uv",new xs(e,2,3,!1))}this.geometry=bs,this.material=void 0!==t?t:new _s,this.center=new J(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Ms.setFromMatrixScale(this.matrixWorld),As.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),Ss.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&Ms.multiplyScalar(-Ss.z);const n=this.material.rotation;let i,r;0!==n&&(r=Math.cos(n),i=Math.sin(n));const s=this.center;Ns(Rs.set(-.5,-.5,0),Ss,s,Ms,i,r),Ns(Ls.set(.5,-.5,0),Ss,s,Ms,i,r),Ns(Cs.set(.5,.5,0),Ss,s,Ms,i,r),Ps.set(0,0),Ds.set(1,0),Is.set(1,1);let a=t.ray.intersectTriangle(Rs,Ls,Cs,!1,ws);if(null===a&&(Ns(Ls.set(-.5,.5,0),Ss,s,Ms,i,r),Ds.set(0,1),a=t.ray.intersectTriangle(Rs,Cs,Ls,!1,ws),null===a))return;const o=t.ray.origin.distanceTo(ws);o<t.near||o>t.far||e.push({distance:o,point:ws.clone(),uv:Ne.getUV(ws,Rs,Ls,Cs,Ps,Ds,Is,new J),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}).prototype.isSprite=!0;const Os=new bt,zs=new gt,Us=new gt,Fs=new bt,Bs=new Qt;class Hs extends gn{constructor(t,e){super(t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Qt,this.bindMatrixInverse=new Qt}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new gt,e=this.geometry.attributes.skinWeight;for(let n=0,i=e.count;n<i;n++){t.fromBufferAttribute(e,n);const i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const n=this.skeleton,i=this.geometry;zs.fromBufferAttribute(i.attributes.skinIndex,t),Us.fromBufferAttribute(i.attributes.skinWeight,t),Os.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const i=Us.getComponent(t);if(0!==i){const r=zs.getComponent(t);Bs.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]),e.addScaledVector(Fs.copy(Os).applyMatrix4(Bs),i)}}return e.applyMatrix4(this.bindMatrixInverse)}}Hs.prototype.isSkinnedMesh=!0;(class extends Me{constructor(){super(),this.type="Bone"}}).prototype.isBone=!0;(class extends mt{constructor(t=null,e=1,n=1,i,r,s,a,o,l=1003,c=1003,h,u){super(null,s,a,o,l,c,i,r,h,u),this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}).prototype.isDataTexture=!0;class ks extends He{constructor(t,e,n,i=1){"number"==typeof n&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(t,e,n),this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}ks.prototype.isInstancedBufferAttribute=!0;const Gs=new Qt,Vs=new Qt,Ws=[],js=new gn;(class extends gn{constructor(t,e,n){super(t,e),this.instanceMatrix=new ks(new Float32Array(16*n),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const n=this.matrixWorld,i=this.count;if(js.geometry=this.geometry,js.material=this.material,void 0!==js.material)for(let r=0;r<i;r++){this.getMatrixAt(r,Gs),Vs.multiplyMatrices(n,Gs),js.matrixWorld=Vs,js.raycast(t,Ws);for(let t=0,n=Ws.length;t<n;t++){const n=Ws[t];n.instanceId=r,n.object=this,e.push(n)}Ws.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new ks(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}).prototype.isInstancedMesh=!0;class Xs extends ze{constructor(t){super(),this.type="LineBasicMaterial",this.color=new ct(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}Xs.prototype.isLineBasicMaterial=!0;const qs=new bt,Ys=new bt,Js=new Qt,Zs=new Kt,Ks=new Vt;class Qs extends Me{constructor(t=new Ke,e=new Xs){super(),this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,i=e.count;t<i;t++)qs.fromBufferAttribute(e,t-1),Ys.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=qs.distanceTo(Ys);t.setAttribute("lineDistance",new Ve(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,s=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Ks.copy(n.boundingSphere),Ks.applyMatrix4(i),Ks.radius+=r,!1===t.ray.intersectsSphere(Ks))return;Js.copy(i).invert(),Zs.copy(t.ray).applyMatrix4(Js);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=new bt,c=new bt,h=new bt,u=new bt,d=this.isLineSegments?2:1;if(n.isBufferGeometry){const i=n.index,r=n.attributes.position;if(null!==i)for(let n=Math.max(0,s.start),a=Math.min(i.count,s.start+s.count)-1;n<a;n+=d){const s=i.getX(n),a=i.getX(n+1);if(l.fromBufferAttribute(r,s),c.fromBufferAttribute(r,a),Zs.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const d=t.ray.origin.distanceTo(u);d<t.near||d>t.far||e.push({distance:d,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}else for(let n=Math.max(0,s.start),i=Math.min(r.count,s.start+s.count)-1;n<i;n+=d){if(l.fromBufferAttribute(r,n),c.fromBufferAttribute(r,n+1),Zs.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const i=t.ray.origin.distanceTo(u);i<t.near||i>t.far||e.push({distance:i,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else n.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Qs.prototype.isLine=!0;const $s=new bt,ta=new bt;class ea extends Qs{constructor(t,e){super(t,e),this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[];for(let t=0,i=e.count;t<i;t+=2)$s.fromBufferAttribute(e,t),ta.fromBufferAttribute(e,t+1),n[t]=0===t?0:n[t-1],n[t+1]=n[t]+$s.distanceTo(ta);t.setAttribute("lineDistance",new Ve(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}ea.prototype.isLineSegments=!0;(class extends Qs{constructor(t,e){super(t,e),this.type="LineLoop"}}).prototype.isLineLoop=!0;class na extends ze{constructor(t){super(),this.type="PointsMaterial",this.color=new ct(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}na.prototype.isPointsMaterial=!0;const ia=new Qt,ra=new Kt,sa=new Vt,aa=new bt;function oa(t,e,n,i,r,s,a){const o=ra.distanceSqToPoint(t);if(o<n){const n=new bt;ra.closestPointToPoint(t,n),n.applyMatrix4(i);const l=r.ray.origin.distanceTo(n);if(l<r.near||l>r.far)return;s.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,object:a})}}(class extends Me{constructor(t=new Ke,e=new na){super(),this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold,s=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),sa.copy(n.boundingSphere),sa.applyMatrix4(i),sa.radius+=r,!1===t.ray.intersectsSphere(sa))return;ia.copy(i).invert(),ra.copy(t.ray).applyMatrix4(ia);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(n.isBufferGeometry){const r=n.index,a=n.attributes.position;if(null!==r)for(let n=Math.max(0,s.start),l=Math.min(r.count,s.start+s.count);n<l;n++){const s=r.getX(n);aa.fromBufferAttribute(a,s),oa(aa,s,o,i,t,e,this)}else for(let n=Math.max(0,s.start),r=Math.min(a.count,s.start+s.count);n<r;n++)aa.fromBufferAttribute(a,n),oa(aa,n,o,i,t,e,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}).prototype.isPoints=!0,class extends mt{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l),this.minFilter=void 0!==s?s:h,this.magFilter=void 0!==r?r:h,this.generateMipmaps=!1;const c=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){c.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1=="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}.prototype.isVideoTexture=!0,class extends mt{constructor(t,e,n){super({width:t,height:e}),this.format=n,this.magFilter=c,this.minFilter=c,this.generateMipmaps=!1,this.needsUpdate=!0}}.prototype.isFramebufferTexture=!0;(class extends mt{constructor(t,e,n,i,r,s,a,o,l,c,h,u){super(null,s,a,o,l,c,i,r,h,u),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isCompressedTexture=!0,class extends mt{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l),this.needsUpdate=!0}}.prototype.isCanvasTexture=!0;class la{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,i=this.getPoint(0),r=0;e.push(0);for(let s=1;s<=t;s++)n=this.getPoint(s/t),r+=n.distanceTo(i),e.push(r),i=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let i=0;const r=n.length;let s;s=e||t*n[r-1];let a,o=0,l=r-1;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),a=n[i]-s,a<0)o=i+1;else{if(!(a>0)){l=i;break}l=i-1}if(i=l,n[i]===s)return i/(r-1);const c=n[i];return(i+(s-c)/(n[i+1]-c))/(r-1)}getTangent(t,e){const n=1e-4;let i=t-n,r=t+n;i<0&&(i=0),r>1&&(r=1);const s=this.getPoint(i),a=this.getPoint(r),o=e||(s.isVector2?new J:new bt);return o.copy(a).sub(s).normalize(),o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new bt,i=[],r=[],s=[],a=new bt,o=new Qt;for(let e=0;e<=t;e++){const n=e/t;i[e]=this.getTangentAt(n,new bt)}r[0]=new bt,s[0]=new bt;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x),h=Math.abs(i[0].y),u=Math.abs(i[0].z);c<=l&&(l=c,n.set(1,0,0)),h<=l&&(l=h,n.set(0,1,0)),u<=l&&n.set(0,0,1),a.crossVectors(i[0],n).normalize(),r[0].crossVectors(i[0],a),s[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),s[e]=s[e-1].clone(),a.crossVectors(i[e-1],i[e]),a.length()>Number.EPSILON){a.normalize();const t=Math.acos(j(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,t))}s[e].crossVectors(i[e],r[e])}if(!0===e){let e=Math.acos(j(r[0].dot(r[t]),-1,1));e/=t,i[0].dot(a.crossVectors(r[0],r[t]))>0&&(e=-e);for(let n=1;n<=t;n++)r[n].applyMatrix4(o.makeRotationAxis(i[n],e*n)),s[n].crossVectors(i[n],r[n])}return{tangents:i,normals:r,binormals:s}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class ca extends la{constructor(t=0,e=0,n=1,i=1,r=0,s=2*Math.PI,a=!1,o=0){super(),this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=i,this.aStartAngle=r,this.aEndAngle=s,this.aClockwise=a,this.aRotation=o}getPoint(t,e){const n=e||new J,i=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=s?0:i),!0!==this.aClockwise||s||(r===i?r=-i:r-=i);const a=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=o-this.aX,i=l-this.aY;o=n*t-i*e+this.aX,l=n*e+i*t+this.aY}return n.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}ca.prototype.isEllipseCurve=!0;class ha extends ca{constructor(t,e,n,i,r,s){super(t,e,n,n,i,r,s),this.type="ArcCurve"}}function ua(){let t=0,e=0,n=0,i=0;function r(r,s,a,o){t=r,e=a,n=-3*r+3*s-2*a-o,i=2*r-2*s+a+o}return{initCatmullRom:function(t,e,n,i,s){r(e,n,s*(n-t),s*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,s,a,o){let l=(e-t)/s-(n-t)/(s+a)+(n-e)/a,c=(n-e)/a-(i-e)/(a+o)+(i-n)/o;l*=a,c*=a,r(e,n,l,c)},calc:function(r){const s=r*r;return t+e*r+n*s+i*(s*r)}}}ha.prototype.isArcCurve=!0;const da=new bt,pa=new ua,fa=new ua,ma=new ua;class ga extends la{constructor(t=[],e=!1,n="centripetal",i=.5){super(),this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=n,this.tension=i}getPoint(t,e=new bt){const n=e,i=this.points,r=i.length,s=(r-(this.closed?0:1))*t;let a,o,l=Math.floor(s),c=s-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/r)+1)*r:0===c&&l===r-1&&(l=r-2,c=1),this.closed||l>0?a=i[(l-1)%r]:(da.subVectors(i[0],i[1]).add(i[0]),a=da);const h=i[l%r],u=i[(l+1)%r];if(this.closed||l+2<r?o=i[(l+2)%r]:(da.subVectors(i[r-1],i[r-2]).add(i[r-1]),o=da),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(a.distanceToSquared(h),t),n=Math.pow(h.distanceToSquared(u),t),i=Math.pow(u.distanceToSquared(o),t);n<1e-4&&(n=1),e<1e-4&&(e=n),i<1e-4&&(i=n),pa.initNonuniformCatmullRom(a.x,h.x,u.x,o.x,e,n,i),fa.initNonuniformCatmullRom(a.y,h.y,u.y,o.y,e,n,i),ma.initNonuniformCatmullRom(a.z,h.z,u.z,o.z,e,n,i)}else"catmullrom"===this.curveType&&(pa.initCatmullRom(a.x,h.x,u.x,o.x,this.tension),fa.initCatmullRom(a.y,h.y,u.y,o.y,this.tension),ma.initCatmullRom(a.z,h.z,u.z,o.z,this.tension));return n.set(pa.calc(c),fa.calc(c),ma.calc(c)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new bt).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function va(t,e,n,i,r){const s=.5*(i-e),a=.5*(r-n),o=t*t;return(2*n-2*i+s+a)*(t*o)+(-3*n+3*i-2*s-a)*o+s*t+n}function ya(t,e,n,i){return function(t,e){const n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,i)}function xa(t,e,n,i,r){return function(t,e){const n=1-t;return n*n*n*e}(t,e)+function(t,e){const n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,i)+function(t,e){return t*t*t*e}(t,r)}ga.prototype.isCatmullRomCurve3=!0;class _a extends la{constructor(t=new J,e=new J,n=new J,i=new J){super(),this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new J){const n=e,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(xa(t,i.x,r.x,s.x,a.x),xa(t,i.y,r.y,s.y,a.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}_a.prototype.isCubicBezierCurve=!0;class ba extends la{constructor(t=new bt,e=new bt,n=new bt,i=new bt){super(),this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new bt){const n=e,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(xa(t,i.x,r.x,s.x,a.x),xa(t,i.y,r.y,s.y,a.y),xa(t,i.z,r.z,s.z,a.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}ba.prototype.isCubicBezierCurve3=!0;class wa extends la{constructor(t=new J,e=new J){super(),this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new J){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const n=e||new J;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}wa.prototype.isLineCurve=!0;class Ma extends la{constructor(t=new J,e=new J,n=new J){super(),this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new J){const n=e,i=this.v0,r=this.v1,s=this.v2;return n.set(ya(t,i.x,r.x,s.x),ya(t,i.y,r.y,s.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Ma.prototype.isQuadraticBezierCurve=!0;class Sa extends la{constructor(t=new bt,e=new bt,n=new bt){super(),this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new bt){const n=e,i=this.v0,r=this.v1,s=this.v2;return n.set(ya(t,i.x,r.x,s.x),ya(t,i.y,r.y,s.y),ya(t,i.z,r.z,s.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Sa.prototype.isQuadraticBezierCurve3=!0;class Ea extends la{constructor(t=[]){super(),this.type="SplineCurve",this.points=t}getPoint(t,e=new J){const n=e,i=this.points,r=(i.length-1)*t,s=Math.floor(r),a=r-s,o=i[0===s?s:s-1],l=i[s],c=i[s>i.length-2?i.length-1:s+1],h=i[s>i.length-3?i.length-1:s+2];return n.set(va(a,o.x,l.x,c.x,h.x),va(a,o.y,l.y,c.y,h.y)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new J).fromArray(n))}return this}}Ea.prototype.isSplineCurve=!0;var Ta=Object.freeze({__proto__:null,ArcCurve:ha,CatmullRomCurve3:ga,CubicBezierCurve:_a,CubicBezierCurve3:ba,EllipseCurve:ca,LineCurve:wa,LineCurve3:class extends la{constructor(t=new bt,e=new bt){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new bt){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}},QuadraticBezierCurve:Ma,QuadraticBezierCurve3:Sa,SplineCurve:Ea});class Aa extends la{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new wa(e,t))}getPoint(t,e){const n=t*this.getLength(),i=this.getCurveLengths();let r=0;for(;r<i.length;){if(i[r]>=n){const t=i[r]-n,s=this.curves[r],a=s.getLength(),o=0===a?0:1-t/a;return s.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let n=0,i=this.curves.length;n<i;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const s=r[i],a=s.isEllipseCurve?2*t:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?t*s.points.length:t,o=s.getPoints(a);for(let t=0;t<o.length;t++){const i=o[t];n&&n.equals(i)||(e.push(i),n=i)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){const n=this.curves[e];t.curves.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new Ta[n.type]).fromJSON(n))}return this}}class Ra extends Aa{constructor(t){super(),this.type="Path",this.currentPoint=new J,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new wa(this.currentPoint.clone(),new J(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,i){const r=new Ma(this.currentPoint.clone(),new J(t,e),new J(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this}bezierCurveTo(t,e,n,i,r,s){const a=new _a(this.currentPoint.clone(),new J(t,e),new J(n,i),new J(r,s));return this.curves.push(a),this.currentPoint.set(r,s),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new Ea(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,i,r,s){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+a,e+o,n,i,r,s),this}absarc(t,e,n,i,r,s){return this.absellipse(t,e,n,n,i,r,s),this}ellipse(t,e,n,i,r,s,a,o){const l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(t+l,e+c,n,i,r,s,a,o),this}absellipse(t,e,n,i,r,s,a,o){const l=new ca(t,e,n,i,r,s,a,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}new bt,new bt,new bt,new Ne;class La extends Ra{constructor(t){super(t),this.uuid=W(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,i=this.holes.length;n<i;n++)e[n]=this.holes[n].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){const n=this.holes[e];t.holes.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new Ra).fromJSON(n))}return this}}function Ca(t,e,n,i,r){let s,a;if(r===function(t,e,n,i){let r=0;for(let s=e,a=n-i;s<n;s+=i)r+=(t[a]-t[s])*(t[s+1]+t[a+1]),a=s;return r}(t,e,n,i)>0)for(s=e;s<n;s+=i)a=Ka(s,t[s],t[s+1],a);else for(s=n-i;s>=e;s-=i)a=Ka(s,t[s],t[s+1],a);return a&&ja(a,a.next)&&(Qa(a),a=a.next),a}function Pa(t,e){if(!t)return t;e||(e=t);let n,i=t;do{if(n=!1,i.steiner||!ja(i,i.next)&&0!==Wa(i.prev,i,i.next))i=i.next;else{if(Qa(i),i=e=i.prev,i===i.next)break;n=!0}}while(n||i!==e);return e}function Da(t,e,n,i,r,s,a){if(!t)return;!a&&s&&function(t,e,n,i){let r=t;do{null===r.z&&(r.z=Ha(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,n,i,r,s,a,o,l,c=1;do{for(n=t,t=null,s=null,a=0;n;){for(a++,i=n,o=0,e=0;e<c&&(o++,i=i.nextZ,i);e++);for(l=c;o>0||l>0&&i;)0!==o&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,o--):(r=i,i=i.nextZ,l--),s?s.nextZ=r:t=r,r.prevZ=s,s=r;n=i}s.nextZ=null,c*=2}while(a>1)}(r)}(t,i,r,s);let o,l,c=t;for(;t.prev!==t.next;)if(o=t.prev,l=t.next,s?Na(t,i,r,s):Ia(t))e.push(o.i/n),e.push(t.i/n),e.push(l.i/n),Qa(t),t=l.next,c=l.next;else if((t=l)===c){a?1===a?Da(t=Oa(Pa(t),e,n),e,n,i,r,s,2):2===a&&za(t,e,n,i,r,s):Da(Pa(t),e,n,i,r,s,1);break}}function Ia(t){const e=t.prev,n=t,i=t.next;if(Wa(e,n,i)>=0)return!1;let r=t.next.next;for(;r!==t.prev;){if(Ga(e.x,e.y,n.x,n.y,i.x,i.y,r.x,r.y)&&Wa(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function Na(t,e,n,i){const r=t.prev,s=t,a=t.next;if(Wa(r,s,a)>=0)return!1;const o=r.x<s.x?r.x<a.x?r.x:a.x:s.x<a.x?s.x:a.x,l=r.y<s.y?r.y<a.y?r.y:a.y:s.y<a.y?s.y:a.y,c=r.x>s.x?r.x>a.x?r.x:a.x:s.x>a.x?s.x:a.x,h=r.y>s.y?r.y>a.y?r.y:a.y:s.y>a.y?s.y:a.y,u=Ha(o,l,e,n,i),d=Ha(c,h,e,n,i);let p=t.prevZ,f=t.nextZ;for(;p&&p.z>=u&&f&&f.z<=d;){if(p!==t.prev&&p!==t.next&&Ga(r.x,r.y,s.x,s.y,a.x,a.y,p.x,p.y)&&Wa(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,f!==t.prev&&f!==t.next&&Ga(r.x,r.y,s.x,s.y,a.x,a.y,f.x,f.y)&&Wa(f.prev,f,f.next)>=0)return!1;f=f.nextZ}for(;p&&p.z>=u;){if(p!==t.prev&&p!==t.next&&Ga(r.x,r.y,s.x,s.y,a.x,a.y,p.x,p.y)&&Wa(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;f&&f.z<=d;){if(f!==t.prev&&f!==t.next&&Ga(r.x,r.y,s.x,s.y,a.x,a.y,f.x,f.y)&&Wa(f.prev,f,f.next)>=0)return!1;f=f.nextZ}return!0}function Oa(t,e,n){let i=t;do{const r=i.prev,s=i.next.next;!ja(r,s)&&Xa(r,i,i.next,s)&&Ja(r,s)&&Ja(s,r)&&(e.push(r.i/n),e.push(i.i/n),e.push(s.i/n),Qa(i),Qa(i.next),i=t=s),i=i.next}while(i!==t);return Pa(i)}function za(t,e,n,i,r,s){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&Va(a,t)){let o=Za(a,t);return a=Pa(a,a.next),o=Pa(o,o.next),Da(a,e,n,i,r,s),void Da(o,e,n,i,r,s)}t=t.next}a=a.next}while(a!==t)}function Ua(t,e){return t.x-e.x}function Fa(t,e){if(e=function(t,e){let n=e;const i=t.x,r=t.y;let s,a=-1/0;do{if(r<=n.y&&r>=n.next.y&&n.next.y!==n.y){const t=n.x+(r-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=i&&t>a){if(a=t,t===i){if(r===n.y)return n;if(r===n.next.y)return n.next}s=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!s)return null;if(i===a)return s;const o=s,l=s.x,c=s.y;let h,u=1/0;n=s;do{i>=n.x&&n.x>=l&&i!==n.x&&Ga(r<c?i:a,r,l,c,r<c?a:i,r,n.x,n.y)&&(h=Math.abs(r-n.y)/(i-n.x),Ja(n,t)&&(h<u||h===u&&(n.x>s.x||n.x===s.x&&Ba(s,n)))&&(s=n,u=h)),n=n.next}while(n!==o);return s}(t,e),e){const n=Za(e,t);Pa(e,e.next),Pa(n,n.next)}}function Ba(t,e){return Wa(t.prev,t,e.prev)<0&&Wa(e.next,t,t.next)<0}function Ha(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-i)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function ka(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function Ga(t,e,n,i,r,s,a,o){return(r-a)*(e-o)-(t-a)*(s-o)>=0&&(t-a)*(i-o)-(n-a)*(e-o)>=0&&(n-a)*(s-o)-(r-a)*(i-o)>=0}function Va(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Xa(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(Ja(t,e)&&Ja(e,t)&&function(t,e){let n=t,i=!1;const r=(t.x+e.x)/2,s=(t.y+e.y)/2;do{n.y>s!=n.next.y>s&&n.next.y!==n.y&&r<(n.next.x-n.x)*(s-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i}(t,e)&&(Wa(t.prev,t,e.prev)||Wa(t,e.prev,e))||ja(t,e)&&Wa(t.prev,t,t.next)>0&&Wa(e.prev,e,e.next)>0)}function Wa(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function ja(t,e){return t.x===e.x&&t.y===e.y}function Xa(t,e,n,i){const r=Ya(Wa(t,e,n)),s=Ya(Wa(t,e,i)),a=Ya(Wa(n,i,t)),o=Ya(Wa(n,i,e));return r!==s&&a!==o||!(0!==r||!qa(t,n,e))||!(0!==s||!qa(t,i,e))||!(0!==a||!qa(n,t,i))||!(0!==o||!qa(n,e,i))}function qa(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function Ya(t){return t>0?1:t<0?-1:0}function Ja(t,e){return Wa(t.prev,t,t.next)<0?Wa(t,e,t.next)>=0&&Wa(t,t.prev,e)>=0:Wa(t,e,t.prev)<0||Wa(t,t.next,e)<0}function Za(t,e){const n=new $a(t.i,t.x,t.y),i=new $a(e.i,e.x,e.y),r=t.next,s=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,s.next=i,i.prev=s,i}function Ka(t,e,n,i){const r=new $a(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function Qa(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function $a(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class to{static area(t){const e=t.length;let n=0;for(let i=e-1,r=0;r<e;i=r++)n+=t[i].x*t[r].y-t[r].x*t[i].y;return.5*n}static isClockWise(t){return to.area(t)<0}static triangulateShape(t,e){const n=[],i=[],r=[];eo(t),no(n,t);let s=t.length;e.forEach(eo);for(let t=0;t<e.length;t++)i.push(s),s+=e[t].length,no(n,e[t]);const a=function(t,e,n=2){const i=e&&e.length,r=i?e[0]*n:t.length;let s=Ca(t,0,r,n,!0);const a=[];if(!s||s.next===s.prev)return a;let o,l,c,h,u,d,p;if(i&&(s=function(t,e,n,i){const r=[];let s,a,o,l,c;for(s=0,a=e.length;s<a;s++)o=e[s]*i,l=s<a-1?e[s+1]*i:t.length,c=Ca(t,o,l,i,!1),c===c.next&&(c.steiner=!0),r.push(ka(c));for(r.sort(Ua),s=0;s<r.length;s++)Fa(r[s],n),n=Pa(n,n.next);return n}(t,e,s,n)),t.length>80*n){o=c=t[0],l=h=t[1];for(let e=n;e<r;e+=n)u=t[e],d=t[e+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=0!==p?1/p:0}return Da(s,a,n,o,l,p),a}(n,i);for(let t=0;t<a.length;t+=3)r.push(a.slice(t,t+3));return r}}function eo(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function no(t,e){for(let n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}class io extends Ke{constructor(t=new La([new J(.5,.5),new J(-.5,.5),new J(-.5,-.5),new J(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,i=[],r=[];for(let e=0,n=t.length;e<n;e++)s(t[e]);function s(t){const s=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1;let l=void 0!==e.depth?e.depth:1,c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:.2,u=void 0!==e.bevelSize?e.bevelSize:h-.1,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const f=e.extrudePath,m=void 0!==e.UVGenerator?e.UVGenerator:ro;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),l=e.amount);let g,v,y,x,_,b=!1;f&&(g=f.getSpacedPoints(o),b=!0,c=!1,v=f.computeFrenetFrames(o,!1),y=new bt,x=new bt,_=new bt),c||(p=0,h=0,u=0,d=0);const w=t.extractPoints(a);let M=w.shape;const S=w.holes;if(!to.isClockWise(M)){M=M.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];to.isClockWise(e)&&(S[t]=e.reverse())}}const E=to.triangulateShape(M,S),T=M;for(let t=0,e=S.length;t<e;t++){const e=S[t];M=M.concat(e)}function A(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}const R=M.length,L=E.length;function C(t,e,n){let i,r,s;const a=t.x-e.x,o=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=a*a+o*o,u=a*c-o*l;if(Math.abs(u)>Number.EPSILON){const u=Math.sqrt(h),d=Math.sqrt(l*l+c*c),p=e.x-o/u,f=e.y+a/u,m=((n.x-c/d-p)*c-(n.y+l/d-f)*l)/(a*c-o*l);i=p+a*m-t.x,r=f+o*m-t.y;const g=i*i+r*r;if(g<=2)return new J(i,r);s=Math.sqrt(g/2)}else{let t=!1;a>Number.EPSILON?l>Number.EPSILON&&(t=!0):a<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(c)&&(t=!0),t?(i=-o,r=a,s=Math.sqrt(h)):(i=a,r=o,s=Math.sqrt(h/2))}return new J(i/s,r/s)}const P=[];for(let t=0,e=T.length,n=e-1,i=t+1;t<e;t++,n++,i++)n===e&&(n=0),i===e&&(i=0),P[t]=C(T[t],T[n],T[i]);const D=[];let I,N=P.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];I=[];for(let t=0,n=e.length,i=n-1,r=t+1;t<n;t++,i++,r++)i===n&&(i=0),r===n&&(r=0),I[t]=C(e[t],e[i],e[r]);D.push(I),N=N.concat(I)}for(let t=0;t<p;t++){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=T.length;t<e;t++){const e=A(T[t],P[t],i);U(e.x,e.y,-n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];I=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],I[t],i);U(r.x,r.y,-n)}}}const O=u+d;for(let t=0;t<R;t++){const e=c?A(M[t],N[t],O):M[t];b?(x.copy(v.normals[0]).multiplyScalar(e.x),y.copy(v.binormals[0]).multiplyScalar(e.y),_.copy(g[0]).add(x).add(y),U(_.x,_.y,_.z)):U(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<R;e++){const n=c?A(M[e],N[e],O):M[e];b?(x.copy(v.normals[t]).multiplyScalar(n.x),y.copy(v.binormals[t]).multiplyScalar(n.y),_.copy(g[t]).add(x).add(y),U(_.x,_.y,_.z)):U(n.x,n.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=T.length;t<e;t++){const e=A(T[t],P[t],i);U(e.x,e.y,l+n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];I=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],I[t],i);b?U(r.x,r.y+g[o-1].y,g[o-1].x+n):U(r.x,r.y,l+n)}}}function z(t,e){let n=t.length;for(;--n>=0;){const i=n;let r=n-1;r<0&&(r=t.length-1);for(let t=0,n=o+2*p;t<n;t++){const n=R*t,s=R*(t+1);B(e+i+n,e+r+n,e+r+s,e+i+s)}}}function U(t,e,n){s.push(t),s.push(e),s.push(n)}function F(t,e,r){H(t),H(e),H(r);const s=i.length/3,a=m.generateTopUV(n,i,s-3,s-2,s-1);k(a[0]),k(a[1]),k(a[2])}function B(t,e,r,s){H(t),H(e),H(s),H(e),H(r),H(s);const a=i.length/3,o=m.generateSideWallUV(n,i,a-6,a-3,a-2,a-1);k(o[0]),k(o[1]),k(o[3]),k(o[1]),k(o[2]),k(o[3])}function H(t){i.push(s[3*t+0]),i.push(s[3*t+1]),i.push(s[3*t+2])}function k(t){r.push(t.x),r.push(t.y)}!function(){const t=i.length/3;if(c){let t=0,e=R*t;for(let t=0;t<L;t++){const n=E[t];F(n[2]+e,n[1]+e,n[0]+e)}t=o+2*p,e=R*t;for(let t=0;t<L;t++){const n=E[t];F(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<L;t++){const e=E[t];F(e[2],e[1],e[0])}for(let t=0;t<L;t++){const e=E[t];F(e[0]+R*o,e[1]+R*o,e[2]+R*o)}}n.addGroup(t,i.length/3-t,0)}(),function(){const t=i.length/3;let e=0;z(T,e),e+=T.length;for(let t=0,n=S.length;t<n;t++){const n=S[t];z(n,e),e+=n.length}n.addGroup(t,i.length/3-t,1)}()}this.setAttribute("position",new Ve(i,3)),this.setAttribute("uv",new Ve(r,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,n){if(n.shapes=[],Array.isArray(t))for(let e=0,i=t.length;e<i;e++){const i=t[e];n.shapes.push(i.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}const i=t.options.extrudePath;return void 0!==i&&(t.options.extrudePath=(new Ta[i.type]).fromJSON(i)),new io(n,t.options)}}const ro={generateTopUV:function(t,e,n,i,r){const s=e[3*n],a=e[3*n+1],o=e[3*i],l=e[3*i+1],c=e[3*r],h=e[3*r+1];return[new J(s,a),new J(o,l),new J(c,h)]},generateSideWallUV:function(t,e,n,i,r,s){const a=e[3*n],o=e[3*n+1],l=e[3*n+2],c=e[3*i],h=e[3*i+1],u=e[3*i+2],d=e[3*r],p=e[3*r+1],f=e[3*r+2],m=e[3*s],g=e[3*s+1],v=e[3*s+2];return Math.abs(o-h)<Math.abs(a-c)?[new J(a,1-l),new J(c,1-u),new J(d,1-f),new J(m,1-v)]:[new J(o,1-l),new J(h,1-u),new J(p,1-f),new J(g,1-v)]}};class so extends Ke{constructor(t=new La([new J(0,.5),new J(-.5,-.5),new J(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const n=[],i=[],r=[],s=[];let a=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(a,o,e),a+=o,o=0;function l(t){const a=i.length/3,l=t.extractPoints(e);let c=l.shape;const h=l.holes;!1===to.isClockWise(c)&&(c=c.reverse());for(let t=0,e=h.length;t<e;t++){const e=h[t];!0===to.isClockWise(e)&&(h[t]=e.reverse())}const u=to.triangulateShape(c,h);for(let t=0,e=h.length;t<e;t++){const e=h[t];c=c.concat(e)}for(let t=0,e=c.length;t<e;t++){const e=c[t];i.push(e.x,e.y,0),r.push(0,0,1),s.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t],i=e[0]+a,r=e[1]+a,s=e[2]+a;n.push(i,r,s),o+=3}}this.setIndex(n),this.setAttribute("position",new Ve(i,3)),this.setAttribute("normal",new Ve(r,3)),this.setAttribute("uv",new Ve(s,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let n=0,i=t.length;n<i;n++){const i=t[n];e.shapes.push(i.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}return new so(n,t.curveSegments)}}class ao extends ze{constructor(t){super(),this.type="ShadowMaterial",this.color=new ct(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}ao.prototype.isShadowMaterial=!0;class oo extends wn{constructor(t){super(t),this.type="RawShaderMaterial"}}oo.prototype.isRawShaderMaterial=!0;class lo extends ze{constructor(t){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new ct(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ct(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}lo.prototype.isMeshStandardMaterial=!0;class co extends lo{constructor(t){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new J(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return j(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.sheenColor=new ct(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new ct(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new ct(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(t)}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.ior=t.ior,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}co.prototype.isMeshPhysicalMaterial=!0;class ho extends ze{constructor(t){super(),this.type="MeshPhongMaterial",this.color=new ct(16777215),this.specular=new ct(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ct(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}ho.prototype.isMeshPhongMaterial=!0;class uo extends ze{constructor(t){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new ct(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ct(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}uo.prototype.isMeshToonMaterial=!0;class po extends ze{constructor(t){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}po.prototype.isMeshNormalMaterial=!0;class fo extends ze{constructor(t){super(),this.type="MeshLambertMaterial",this.color=new ct(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ct(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}fo.prototype.isMeshLambertMaterial=!0;class mo extends ze{constructor(t){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new ct(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this}}mo.prototype.isMeshMatcapMaterial=!0;class go extends Xs{constructor(t){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}go.prototype.isLineDashedMaterial=!0;const vo={ShadowMaterial:ao,SpriteMaterial:_s,RawShaderMaterial:oo,ShaderMaterial:wn,PointsMaterial:na,MeshPhysicalMaterial:co,MeshStandardMaterial:lo,MeshPhongMaterial:ho,MeshToonMaterial:uo,MeshNormalMaterial:po,MeshLambertMaterial:fo,MeshDepthMaterial:ts,MeshDistanceMaterial:es,MeshBasicMaterial:Ue,MeshMatcapMaterial:mo,LineDashedMaterial:go,LineBasicMaterial:Xs,Material:ze};ze.fromType=function(t){return new vo[t]};const yo={arraySlice:function(t,e,n){return yo.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,n=new Array(e);for(let t=0;t!==e;++t)n[t]=t;return n.sort((function(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){const i=t.length,r=new t.constructor(i);for(let s=0,a=0;a!==i;++s){const i=n[s]*e;for(let n=0;n!==e;++n)r[a++]=t[i+n]}return r},flattenJSON:function(t,e,n,i){let r=1,s=t[0];for(;void 0!==s&&void 0===s[i];)s=t[r++];if(void 0===s)return;let a=s[i];if(void 0!==a)if(Array.isArray(a))do{a=s[i],void 0!==a&&(e.push(s.time),n.push.apply(n,a)),s=t[r++]}while(void 0!==s);else if(void 0!==a.toArray)do{a=s[i],void 0!==a&&(e.push(s.time),a.toArray(n,n.length)),s=t[r++]}while(void 0!==s);else do{a=s[i],void 0!==a&&(e.push(s.time),n.push(a)),s=t[r++]}while(void 0!==s)},subclip:function(t,e,n,i,r=30){const s=t.clone();s.name=e;const a=[];for(let t=0;t<s.tracks.length;++t){const e=s.tracks[t],o=e.getValueSize(),l=[],c=[];for(let t=0;t<e.times.length;++t){const s=e.times[t]*r;if(!(s<n||s>=i)){l.push(e.times[t]);for(let n=0;n<o;++n)c.push(e.values[t*o+n])}}0!==l.length&&(e.times=yo.convertArray(l,e.times.constructor),e.values=yo.convertArray(c,e.values.constructor),a.push(e))}s.tracks=a;let o=1/0;for(let t=0;t<s.tracks.length;++t)o>s.tracks[t].times[0]&&(o=s.tracks[t].times[0]);for(let t=0;t<s.tracks.length;++t)s.tracks[t].shift(-1*o);return s.resetDuration(),s},makeClipAdditive:function(t,e=0,n=t,i=30){i<=0&&(i=30);const r=n.tracks.length,s=e/i;for(let e=0;e<r;++e){const i=n.tracks[e],r=i.ValueTypeName;if("bool"===r||"string"===r)continue;const a=t.tracks.find((function(t){return t.name===i.name&&t.ValueTypeName===r}));if(void 0===a)continue;let o=0;const l=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const h=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const u=i.times.length-1;let d;if(s<=i.times[0]){const t=o,e=l-o;d=yo.arraySlice(i.values,t,e)}else if(s>=i.times[u]){const t=u*l+o,e=t+l-o;d=yo.arraySlice(i.values,t,e)}else{const t=i.createInterpolant(),e=o,n=l-o;t.evaluate(s),d=yo.arraySlice(t.resultBuffer,e,n)}"quaternion"===r&&(new _t).fromArray(d).normalize().conjugate().toArray(d);const p=a.times.length;for(let t=0;t<p;++t){const e=t*h+c;if("quaternion"===r)_t.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e);else{const t=h-2*c;for(let n=0;n<t;++n)a.values[e+n]-=d[n]}}}return t.blendMode=2501,t}};class xo{constructor(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let s;n:{i:if(!(t<i)){for(let s=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,r)}if(n===s)break;if(r=i,i=e[++n],t<i)break e}s=e.length;break n}if(t>=r)break t;{const a=e[1];t<a&&(n=2,r=a);for(let s=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(n===s)break;if(i=r,r=e[--n-1],t>=r)break e}s=n,n=0}}for(;n<s;){const i=n+s>>>1;t<e[i]?s=i:n=i+1}if(i=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(void 0===i)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,r,t)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}xo.prototype.beforeStart_=xo.prototype.copySampleValue_,xo.prototype.afterEnd_=xo.prototype.copySampleValue_;class _o extends xo{constructor(t,e,n,i){super(t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:R,endingEnd:R}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,s=t+1,a=i[r],o=i[s];if(void 0===a)switch(this.getSettings_().endingStart){case L:r=t,a=2*e-n;break;case C:r=i.length-2,a=e+i[r]-i[r+1];break;default:r=t,a=n}if(void 0===o)switch(this.getSettings_().endingEnd){case L:s=t,o=2*n-e;break;case C:s=1,o=n+i[1]-i[0];break;default:s=t-1,o=e}const l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-a),this._weightNext=l/(o-n),this._offsetPrev=r*c,this._offsetNext=s*c}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(n-e)/(i-e),f=p*p,m=f*p,g=-u*m+2*u*f-u*p,v=(1+u)*m+(-1.5-2*u)*f+(-.5+u)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f;for(let t=0;t!==a;++t)r[t]=g*s[c+t]+v*s[l+t]+y*s[o+t]+x*s[h+t];return r}}class bo extends xo{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=(n-e)/(i-e),h=1-c;for(let t=0;t!==a;++t)r[t]=s[l+t]*h+s[o+t]*c;return r}}class wo extends xo{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class Mo{constructor(t,e,n,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=yo.convertArray(e,this.TimeBufferType),this.values=yo.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:yo.convertArray(t.times,Array),values:yo.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new wo(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new bo(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new _o(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case E:e=this.InterpolantFactoryMethodDiscrete;break;case T:e=this.InterpolantFactoryMethodLinear;break;case A:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return E;case this.InterpolantFactoryMethodLinear:return T;case this.InterpolantFactoryMethodSmooth:return A}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]*=t}return this}trim(t,e){const n=this.times,i=n.length;let r=0,s=i-1;for(;r!==i&&n[r]<t;)++r;for(;-1!==s&&n[s]>e;)--s;if(++s,0!==r||s!==i){r>=s&&(s=Math.max(s,1),r=s-1);const t=this.getValueSize();this.times=yo.arraySlice(n,r,s),this.values=yo.arraySlice(this.values,r*t,s*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let s=null;for(let e=0;e!==r;e++){const i=n[e];if("number"==typeof i&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i),t=!1;break}if(null!==s&&s>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,s),t=!1;break}s=i}if(void 0!==i&&yo.isTypedArray(i))for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n),t=!1;break}}return t}optimize(){const t=yo.arraySlice(this.times),e=yo.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===A,r=t.length-1;let s=1;for(let a=1;a<r;++a){let r=!1;const o=t[a];if(o!==t[a+1]&&(1!==a||o!==t[0]))if(i)r=!0;else{const t=a*n,i=t-n,s=t+n;for(let a=0;a!==n;++a){const n=e[t+a];if(n!==e[i+a]||n!==e[s+a]){r=!0;break}}}if(r){if(a!==s){t[s]=t[a];const i=a*n,r=s*n;for(let t=0;t!==n;++t)e[r+t]=e[i+t]}++s}}if(r>0){t[s]=t[r];for(let t=r*n,i=s*n,a=0;a!==n;++a)e[i+a]=e[t+a];++s}return s!==t.length?(this.times=yo.arraySlice(t,0,s),this.values=yo.arraySlice(e,0,s*n)):(this.times=t,this.values=e),this}clone(){const t=yo.arraySlice(this.times,0),e=yo.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}Mo.prototype.TimeBufferType=Float32Array,Mo.prototype.ValueBufferType=Float32Array,Mo.prototype.DefaultInterpolation=T;class So extends Mo{}So.prototype.ValueTypeName="bool",So.prototype.ValueBufferType=Array,So.prototype.DefaultInterpolation=E,So.prototype.InterpolantFactoryMethodLinear=void 0,So.prototype.InterpolantFactoryMethodSmooth=void 0;class Eo extends Mo{}Eo.prototype.ValueTypeName="color";class To extends Mo{}To.prototype.ValueTypeName="number";class Ao extends xo{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=(n-e)/(i-e);let l=t*a;for(let t=l+a;l!==t;l+=4)_t.slerpFlat(r,0,s,l-a,s,l,o);return r}}class Ro extends Mo{InterpolantFactoryMethodLinear(t){return new Ao(this.times,this.values,this.getValueSize(),t)}}Ro.prototype.ValueTypeName="quaternion",Ro.prototype.DefaultInterpolation=T,Ro.prototype.InterpolantFactoryMethodSmooth=void 0;class Lo extends Mo{}Lo.prototype.ValueTypeName="string",Lo.prototype.ValueBufferType=Array,Lo.prototype.DefaultInterpolation=E,Lo.prototype.InterpolantFactoryMethodLinear=void 0,Lo.prototype.InterpolantFactoryMethodSmooth=void 0;class Co extends Mo{}Co.prototype.ValueTypeName="vector";class Po{constructor(t,e=-1,n,i=2500){this.name=t,this.tracks=n,this.duration=e,this.blendMode=i,this.uuid=W(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,i=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t)e.push(Do(n[t]).scale(i));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],n=t.tracks,i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=n.length;t!==i;++t)e.push(Mo.toJSON(n[t]));return i}static CreateFromMorphTargetSequence(t,e,n,i){const r=e.length,s=[];for(let t=0;t<r;t++){let a=[],o=[];a.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const l=yo.getKeyframeOrder(a);a=yo.sortedArray(a,1,l),o=yo.sortedArray(o,1,l),i||0!==a[0]||(a.push(r),o.push(o[0])),s.push(new To(".morphTargetInfluences["+e[t].name+"]",a,o).scale(1/n))}return new this(t,-1,s)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++)if(n[t].name===e)return n[t];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const i={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e],s=n.name.match(r);if(s&&s.length>1){const t=s[1];let e=i[t];e||(i[t]=e=[]),e.push(n)}}const s=[];for(const t in i)s.push(this.CreateFromMorphTargetSequence(t,i[t],e,n));return s}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(t,e,n,i,r){if(0!==n.length){const s=[],a=[];yo.flattenJSON(n,s,a,i),0!==s.length&&r.push(new t(e,s,a))}},i=[],r=t.name||"default",s=t.fps||30,a=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let n=0;n<r[e].morphTargets.length;n++)t[r[e].morphTargets[n]]=-1;for(const n in t){const t=[],s=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time),s.push(i.morphTarget===n?1:0)}i.push(new To(".morphTargetInfluence["+n+"]",t,s))}o=t.length*s}else{const s=".bones["+e[t].name+"]";n(Co,s+".position",r,"pos",i),n(Ro,s+".quaternion",r,"rot",i),n(Co,s+".scale",r,"scl",i)}}return 0===i.length?null:new this(r,o,i,a)}resetDuration(){let t=0;for(let e=0,n=this.tracks.length;e!==n;++e){const n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Do(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return To;case"vector":case"vector2":case"vector3":case"vector4":return Co;case"color":return Eo;case"quaternion":return Ro;case"bool":case"boolean":return So;case"string":return Lo}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],n=[];yo.flattenJSON(t.keys,e,n,"value"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const Io={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};const No=new class{constructor(t,e,n){const i=this;let r,s=!1,a=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===s&&void 0!==i.onStart&&i.onStart(t,a,o),s=!0},this.itemEnd=function(t){a++,void 0!==i.onProgress&&i.onProgress(t,a,o),a===o&&(s=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e],i=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null}}};class Oo{constructor(t){this.manager=void 0!==t?t:No,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(i,r){n.load(t,i,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const zo={};class Uo extends Oo{constructor(t){super(t)}load(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=Io.get(t);if(void 0!==r)return this.manager.itemStart(t),setTimeout((()=>{e&&e(r),this.manager.itemEnd(t)}),0),r;if(void 0!==zo[t])return void zo[t].push({onLoad:e,onProgress:n,onError:i});zo[t]=[],zo[t].push({onLoad:e,onProgress:n,onError:i});const s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,o=this.responseType;fetch(s).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const n=zo[t],i=e.body.getReader(),r=e.headers.get("Content-Length"),s=r?parseInt(r):0,a=0!==s;let o=0;const l=new ReadableStream({start(t){!function e(){i.read().then((({done:i,value:r})=>{if(i)t.close();else{o+=r.byteLength;const i=new ProgressEvent("progress",{lengthComputable:a,loaded:o,total:s});for(let t=0,e=n.length;t<e;t++){const e=n[t];e.onProgress&&e.onProgress(i)}t.enqueue(r),e()}}))}()}});return new Response(l)}throw Error(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`)})).then((t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,a)));case"json":return t.json();default:if(void 0===a)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(a),n=e&&e[1]?e[1].toLowerCase():void 0,i=new TextDecoder(n);return t.arrayBuffer().then((t=>i.decode(t)))}}})).then((e=>{Io.add(t,e);const n=zo[t];delete zo[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onLoad&&i.onLoad(e)}})).catch((e=>{const n=zo[t];if(void 0===n)throw this.manager.itemError(t),e;delete zo[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class Fo extends Oo{constructor(t){super(t)}load(t,e,n,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=Io.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a=Q("img");function o(){c(),Io.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){c(),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,!1),a.removeEventListener("error",l,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",l,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a}}class Bo extends Oo{constructor(t){super(t)}load(t,e,n,i){const r=new An,s=new Fo(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);let a=0;function o(n){s.load(t[n],(function(t){r.images[n]=t,a++,6===a&&(r.needsUpdate=!0,e&&e(r))}),void 0,i)}for(let e=0;e<t.length;++e)o(e);return r}}class Ho extends Oo{constructor(t){super(t)}load(t,e,n,i){const r=new mt,s=new Fo(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r)}),n,i),r}}class ko extends Me{constructor(t,e=1){super(),this.type="Light",this.color=new ct(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}ko.prototype.isLight=!0;(class extends ko{constructor(t,e,n){super(t,n),this.type="HemisphereLight",this.position.copy(Me.DefaultUp),this.updateMatrix(),this.groundColor=new ct(e)}copy(t){return ko.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}).prototype.isHemisphereLight=!0;const Go=new Qt,Vo=new bt,Wo=new bt;class jo{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new J(512,512),this.map=null,this.mapPass=null,this.matrix=new Qt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new On,this._frameExtents=new J(1,1),this._viewportCount=1,this._viewports=[new gt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;Vo.setFromMatrixPosition(t.matrixWorld),e.position.copy(Vo),Wo.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(Wo),e.updateMatrixWorld(),Go.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Go),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class Xo extends jo{constructor(){super(new Sn(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,n=2*V*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&i===e.aspect&&r===e.far||(e.fov=n,e.aspect=i,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}Xo.prototype.isSpotLightShadow=!0;(class extends ko{constructor(t,e,n=0,i=Math.PI/3,r=0,s=1){super(t,e),this.type="SpotLight",this.position.copy(Me.DefaultUp),this.updateMatrix(),this.target=new Me,this.distance=n,this.angle=i,this.penumbra=r,this.decay=s,this.shadow=new Xo}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isSpotLight=!0;const qo=new Qt,Yo=new bt,Jo=new bt;class Zo extends jo{constructor(){super(new Sn(90,1,.5,500)),this._frameExtents=new J(4,2),this._viewportCount=6,this._viewports=[new gt(2,1,1,1),new gt(0,1,1,1),new gt(3,1,1,1),new gt(1,1,1,1),new gt(3,0,1,1),new gt(1,0,1,1)],this._cubeDirections=[new bt(1,0,0),new bt(-1,0,0),new bt(0,0,1),new bt(0,0,-1),new bt(0,1,0),new bt(0,-1,0)],this._cubeUps=[new bt(0,1,0),new bt(0,1,0),new bt(0,1,0),new bt(0,1,0),new bt(0,0,1),new bt(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),Yo.setFromMatrixPosition(t.matrixWorld),n.position.copy(Yo),Jo.copy(n.position),Jo.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(Jo),n.updateMatrixWorld(),i.makeTranslation(-Yo.x,-Yo.y,-Yo.z),qo.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(qo)}}Zo.prototype.isPointLightShadow=!0;(class extends ko{constructor(t,e,n=0,i=1){super(t,e),this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Zo}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}).prototype.isPointLight=!0;class Ko extends jo{constructor(){super(new Yn(-5,5,5,-5,.5,500))}}Ko.prototype.isDirectionalLightShadow=!0;(class extends ko{constructor(t,e){super(t,e),this.type="DirectionalLight",this.position.copy(Me.DefaultUp),this.updateMatrix(),this.target=new Me,this.shadow=new Ko}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isDirectionalLight=!0;(class extends ko{constructor(t,e){super(t,e),this.type="AmbientLight"}}).prototype.isAmbientLight=!0;(class extends ko{constructor(t,e,n=10,i=10){super(t,e),this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}).prototype.isRectAreaLight=!0;class Qo{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new bt)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,i=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.282095),e.addScaledVector(s[1],.488603*i),e.addScaledVector(s[2],.488603*r),e.addScaledVector(s[3],.488603*n),e.addScaledVector(s[4],n*i*1.092548),e.addScaledVector(s[5],i*r*1.092548),e.addScaledVector(s[6],.315392*(3*r*r-1)),e.addScaledVector(s[7],n*r*1.092548),e.addScaledVector(s[8],.546274*(n*n-i*i)),e}getIrradianceAt(t,e){const n=t.x,i=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.886227),e.addScaledVector(s[1],1.023328*i),e.addScaledVector(s[2],1.023328*r),e.addScaledVector(s[3],1.023328*n),e.addScaledVector(s[4],.858086*n*i),e.addScaledVector(s[5],.858086*i*r),e.addScaledVector(s[6],.743125*r*r-.247708),e.addScaledVector(s[7],.858086*n*r),e.addScaledVector(s[8],.429043*(n*n-i*i)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+3*i);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+3*i);return t}static getBasisAt(t,e){const n=t.x,i=t.y,r=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*r,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*n*r,e[8]=.546274*(n*n-i*i)}}Qo.prototype.isSphericalHarmonics3=!0;class $o extends ko{constructor(t=new Qo,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}$o.prototype.isLightProbe=!0;let tl;(class extends Ke{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}).prototype.isInstancedBufferGeometry=!0,class extends Oo{constructor(t){super(t),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=Io.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a={};a.credentials="anonymous"===this.crossOrigin?"same-origin":"include",a.headers=this.requestHeader,fetch(t,a).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(n){Io.add(t,n),e&&e(n),r.manager.itemEnd(t)})).catch((function(e){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}}.prototype.isImageBitmapLoader=!0;class el extends Oo{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new Uo(this.manager);s.setResponseType("arraybuffer"),s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(n){try{const t=n.slice(0);(void 0===tl&&(tl=new(window.AudioContext||window.webkitAudioContext)),tl).decodeAudioData(t,(function(t){e(t)}))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}}(class extends $o{constructor(t,e,n=1){super(void 0,n);const i=(new ct).set(t),r=(new ct).set(e),s=new bt(i.r,i.g,i.b),a=new bt(r.r,r.g,r.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(s).add(a).multiplyScalar(o),this.sh.coefficients[1].copy(s).sub(a).multiplyScalar(l)}}).prototype.isHemisphereLightProbe=!0,class extends $o{constructor(t,e=1){super(void 0,e);const n=(new ct).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}.prototype.isAmbientLightProbe=!0;class nl{constructor(t,e,n){let i,r,s;switch(this.binding=t,this.valueSize=n,e){case"quaternion":i=this._slerp,r=this._slerpAdditive,s=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case"string":case"bool":i=this._select,r=this._select,s=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:i=this._lerp,r=this._lerpAdditive,s=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=s,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,i=this.valueSize,r=t*i+i;let s=this.cumulativeWeight;if(0===s){for(let t=0;t!==i;++t)n[r+t]=n[t];s=e}else{s+=e;const t=e/s;this._mixBufferRegion(n,r,0,t,i)}this.cumulativeWeight=s}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,i=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,i,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,s=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(n,i,t,1-r,e)}s>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(n[t]!==n[t+e]){a.setValue(n,i);break}}saveOriginalState(){const t=this.binding,e=this.buffer,n=this.valueSize,i=n*this._origIndex;t.getValue(e,i);for(let t=n,r=i;t!==r;++t)e[t]=e[i+t%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let n=t;n<e;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[e+n]=this.buffer[t+n]}_select(t,e,n,i,r){if(i>=.5)for(let i=0;i!==r;++i)t[e+i]=t[n+i]}_slerp(t,e,n,i){_t.slerpFlat(t,e,t,e,t,n,i)}_slerpAdditive(t,e,n,i,r){const s=this._workIndex*r;_t.multiplyQuaternionsFlat(t,s,t,e,t,n),_t.slerpFlat(t,e,t,e,t,s,i)}_lerp(t,e,n,i,r){const s=1-i;for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]*s+t[n+a]*i}}_lerpAdditive(t,e,n,i,r){for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]+t[n+s]*i}}}const il=new RegExp("[\\[\\]\\.:\\/]","g"),rl="[^\\[\\]\\.:\\/]",sl="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",al=/((?:WC+[\/:])*)/.source.replace("WC",rl),ol=/(WCOD+)?/.source.replace("WCOD",sl),ll=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",rl),cl=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",rl),hl=new RegExp("^"+al+ol+ll+cl+"$"),ul=["material","materials","bones"];class dl{constructor(t,e,n){this.path=e,this.parsedPath=n||dl.parseTrackName(e),this.node=dl.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new dl.Composite(t,e,n):new dl(t,e,n)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(il,"")}static parseTrackName(t){const e=hl.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){const t=n.nodeName.substring(i+1);-1!==ul.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const s=n(r.children);if(s)return s}return null},i=n(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)t[e++]=n[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=dl.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(n){let i=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==i){if(void 0===t[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[i]}}const s=t[i];if(void 0===s){const n=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",t)}let a=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(o=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}dl.Composite=class{constructor(t,e,n){const i=n||dl.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},dl.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},dl.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},dl.prototype.GetterByBindingType=[dl.prototype._getValue_direct,dl.prototype._getValue_array,dl.prototype._getValue_arrayElement,dl.prototype._getValue_toArray],dl.prototype.SetterByBindingTypeAndVersioning=[[dl.prototype._setValue_direct,dl.prototype._setValue_direct_setNeedsUpdate,dl.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[dl.prototype._setValue_array,dl.prototype._setValue_array_setNeedsUpdate,dl.prototype._setValue_array_setMatrixWorldNeedsUpdate],[dl.prototype._setValue_arrayElement,dl.prototype._setValue_arrayElement_setNeedsUpdate,dl.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[dl.prototype._setValue_fromArray,dl.prototype._setValue_fromArray_setNeedsUpdate,dl.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class pl{constructor(t,e,n=null,i=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=i;const r=e.tracks,s=r.length,a=new Array(s),o={endingStart:R,endingEnd:R};for(let t=0;t!==s;++t){const e=r[t].createInterpolant(null);a[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(s),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,i=t._clip.duration,r=i/n,s=n/i;t.warp(1,r,e),this.warp(s,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const i=this._mixer,r=i.time,s=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=r,o[1]=r+n,l[0]=t/s,l[1]=e/s,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,i){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const i=(t-r)*n;if(i<0||0===n)return;this._startTime=null,e=n*i}e*=this._updateTimeScale(t);const s=this._updateTime(e),a=this._updateWeight(t);if(a>0){const t=this._interpolants,e=this._propertyBindings;if(2501===this.blendMode)for(let n=0,i=t.length;n!==i;++n)t[n].evaluate(s),e[n].accumulateAdditive(a);else for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(s),e[n].accumulate(i,a)}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(null!==n){const i=n.evaluate(t)[0];e*=i,t>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;null!==n&&(e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,n=this.loop;let i=this.time+t,r=this._loopCount;const s=2202===n;if(0===t)return-1===r?i:s&&1==(1&r)?e-i:i;if(2200===n){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(i>=e)i=e;else{if(!(i<0)){this.time=i;break t}i=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,s)):this._setEndings(0===this.repetitions,!0,s)),i>=e||i<0){const n=Math.floor(i/e);i-=e*n,r+=Math.abs(n);const a=this.repetitions-r;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=t>0?e:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===a){const e=t<0;this._setEndings(e,!e,s)}else this._setEndings(!1,!1,s);this._loopCount=r,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else this.time=i;if(s&&1==(1&r))return e-i}return i}_setEndings(t,e,n){const i=this._interpolantSettings;n?(i.endingStart=L,i.endingEnd=L):(i.endingStart=t?this.zeroSlopeAtStart?L:R:C,i.endingEnd=e?this.zeroSlopeAtEnd?L:R:C)}_scheduleFading(t,e,n){const i=this._mixer,r=i.time;let s=this._weightInterpolant;null===s&&(s=i._lendControlInterpolant(),this._weightInterpolant=s);const a=s.parameterPositions,o=s.sampleValues;return a[0]=r,o[0]=e,a[1]=r+t,o[1]=n,this}}(class extends H{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,s=t._propertyBindings,a=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let c=l[o];void 0===c&&(c={},l[o]=c);for(let t=0;t!==r;++t){const r=i[t],l=r.name;let h=c[l];if(void 0!==h)++h.referenceCount,s[t]=h;else{if(h=s[t],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,l));continue}const i=e&&e._propertyBindings[t].binding.parsedPath;h=new nl(dl.create(n,l,i),r.ValueTypeName,r.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,l),s[t]=h}a[t].resultBuffer=h.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==n.useCount++&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const i=this._actions,r=this._actionsByClip;let s=r[e];if(void 0===s)s={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=s;else{const e=s.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=i.length,i.push(t),s.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i,e[i]=n,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null,delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete s[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.referenceCount&&this._removeInactiveBinding(n)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_addInactiveBinding(t,e,n){const i=this._bindingsByRootAndName,r=this._bindings;let s=i[e];void 0===s&&(s={},i[e]=s),s[n]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,s=this._bindingsByRootAndName,a=s[i],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete a[r],0===Object.keys(a).length&&delete s[i]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new bo(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=n,e[n]=r}clipAction(t,e,n){const i=e||this._root,r=i.uuid;let s="string"==typeof t?Po.findByName(i,t):t;const a=null!==s?s.uuid:t,o=this._actionsByClip[a];let l=null;if(void 0===n&&(n=null!==s?s.blendMode:2500),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===n)return t;l=o.knownActions[0],null===s&&(s=l._clip)}if(null===s)return null;const c=new pl(this,s,e,n);return this._bindAction(c,l),this._addInactiveAction(c,a,r),c}existingAction(t,e){const n=e||this._root,i=n.uuid,r="string"==typeof t?Po.findByName(n,t):t,s=r?r.uuid:t,a=this._actionsByClip[s];return void 0!==a&&a.actionByRoot[i]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,i=this.time+=t,r=Math.sign(t),s=this._accuIndex^=1;for(let a=0;a!==n;++a)e[a]._update(i,t,r,s);const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)a[t].apply(s);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){const t=r.knownActions;for(let n=0,i=t.length;n!==i;++n){const i=t[n];this._deactivateAction(i);const r=i._cacheIndex,s=e[e.length-1];i._cacheIndex=null,i._byClipCacheIndex=null,s._cacheIndex=r,e[r]=s,e.pop(),this._removeInactiveBindingsForAction(i)}delete i[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const i=n[t].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}const i=this._bindingsByRootAndName[e];if(void 0!==i)for(const t in i){const e=i[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);class fl{constructor(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}clone(){return new fl(void 0===this.value.clone?this.value:this.value.clone())}}(class extends vs{constructor(t,e,n=1){super(t,e),this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}).prototype.isInstancedInterleavedBuffer=!0;class ml{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(j(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}const gl=new J;class vl{constructor(t=new J(1/0,1/0),e=new J(-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=gl.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return gl.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}vl.prototype.isBox2=!0;const yl=new bt,xl=new Qt,_l=new Qt;function bl(t){const e=[];!0===t.isBone&&e.push(t);for(let n=0;n<t.children.length;n++)e.push.apply(e,bl(t.children[n]));return e}const wl=new ArrayBuffer(4),Ml=(new Float32Array(wl),new Uint32Array(wl),new Uint32Array(512)),Sl=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(Ml[t]=0,Ml[256|t]=32768,Sl[t]=24,Sl[256|t]=24):e<-14?(Ml[t]=1024>>-e-14,Ml[256|t]=1024>>-e-14|32768,Sl[t]=-e-1,Sl[256|t]=-e-1):e<=15?(Ml[t]=e+15<<10,Ml[256|t]=e+15<<10|32768,Sl[t]=13,Sl[256|t]=13):e<128?(Ml[t]=31744,Ml[256|t]=64512,Sl[t]=24,Sl[256|t]=24):(Ml[t]=31744,Ml[256|t]=64512,Sl[t]=13,Sl[256|t]=13)}const El=new Uint32Array(2048),Tl=new Uint32Array(64),Al=new Uint32Array(64);for(let t=1;t<1024;++t){let e=t<<13,n=0;for(;0==(8388608&e);)e<<=1,n-=8388608;e&=-8388609,n+=947912704,El[t]=e|n}for(let t=1024;t<2048;++t)El[t]=939524096+(t-1024<<13);for(let t=1;t<31;++t)Tl[t]=t<<23;Tl[31]=1199570944,Tl[32]=2147483648;for(let t=33;t<63;++t)Tl[t]=2147483648+(t-32<<23);Tl[63]=3347054592;for(let t=1;t<64;++t)32!==t&&(Al[t]=1024);function Rl(){return new Me}function Ll(t){var e=new Ho,n=new yn(t.width,t.height,0),i=new Ue({map:e.load("./images/".concat(t.name,".png")),transparent:!0});return new gn(n,i)}function Cl(t){return{x:t.reduce((function(t,e){return e.x+t}),0)/t.length,y:t.reduce((function(t,e){return e.y+t}),0)/t.length,z:t.reduce((function(t,e){return e.z+t}),0)/t.length}}function Pl(t,e){return Math.atan2(e.y-t.y,e.x-t.x)}la.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(la.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Ra.prototype.fromPoints=function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)},class extends ea{constructor(t=10,e=10,n=4473924,i=8947848){n=new ct(n),i=new ct(i);const r=e/2,s=t/e,a=t/2,o=[],l=[];for(let t=0,c=0,h=-a;t<=e;t++,h+=s){o.push(-a,0,h,a,0,h),o.push(h,0,-a,h,0,a);const e=t===r?n:i;e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3}const c=new Ke;c.setAttribute("position",new Ve(o,3)),c.setAttribute("color",new Ve(l,3)),super(c,new Xs({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},class extends ea{constructor(t){const e=bl(t),n=new Ke,i=[],r=[],s=new ct(0,0,1),a=new ct(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];n.parent&&n.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(s.r,s.g,s.b),r.push(a.r,a.g,a.b))}n.setAttribute("position",new Ve(i,3)),n.setAttribute("color",new Ve(r,3)),super(n,new Xs({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,i=n.getAttribute("position");_l.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(xl.multiplyMatrices(_l,r.matrixWorld),yl.setFromMatrixPosition(xl),i.setXYZ(n,yl.x,yl.y,yl.z),xl.multiplyMatrices(_l,r.parent.matrixWorld),yl.setFromMatrixPosition(xl),i.setXYZ(n+1,yl.x,yl.y,yl.z),n+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Oo.prototype.extractUrlBase=function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),class{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let n=0,i=t.length;n<i;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.slice(0,e+1)}static resolveURL(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}.extractUrlBase(t)},Oo.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},vl.prototype.center=function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},vl.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},vl.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},vl.prototype.size=function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)},St.prototype.center=function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},St.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},St.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},St.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},St.prototype.size=function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)},le.prototype.toVector3=function(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")},Vt.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},On.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},Z.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Z.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},Z.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},Z.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},Z.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},Z.prototype.getInverse=function(t){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Qt.prototype.extractPosition=function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},Qt.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Qt.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new bt).setFromMatrixColumn(this,3)},Qt.prototype.setRotationFromQuaternion=function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},Qt.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Qt.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Qt.prototype.multiplyVector4=function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Qt.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Qt.prototype.rotateAxis=function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},Qt.prototype.crossVector=function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Qt.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Qt.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Qt.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Qt.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Qt.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Qt.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Qt.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Qt.prototype.makeFrustum=function(t,e,n,i,r,s){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,i,n,r,s)},Qt.prototype.getInverse=function(t){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Dn.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},_t.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},_t.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Kt.prototype.isIntersectionBox=function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},Kt.prototype.isIntersectionPlane=function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},Kt.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},Ne.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},Ne.prototype.barycoordFromPoint=function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},Ne.prototype.midpoint=function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},Ne.prototypenormal=function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},Ne.prototype.plane=function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)},Ne.barycoordFromPoint=function(t,e,n,i,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Ne.getBarycoord(t,e,n,i,r)},Ne.normal=function(t,e,n,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Ne.getNormal(t,e,n,i)},La.prototype.extractAllPoints=function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},La.prototype.extrude=function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new io(this,t)},La.prototype.makeGeometry=function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new so(this,t)},J.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},J.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},J.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},bt.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},bt.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},bt.prototype.getPositionFromMatrix=function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},bt.prototype.getScaleFromMatrix=function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},bt.prototype.getColumnFromMatrix=function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},bt.prototype.applyProjection=function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},bt.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},bt.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},bt.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},gt.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},gt.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Me.prototype.getChildByName=function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},Me.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},Me.prototype.translate=function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},Me.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},Me.prototype.applyMatrix=function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(Me.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),gn.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(gn.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Hs.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Sn.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(ko.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(He.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===U},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(U)}}}),He.prototype.setDynamic=function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?U:z),this},He.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},He.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},Ke.prototype.addIndex=function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},Ke.prototype.addAttribute=function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new He(arguments[1],arguments[2])))},Ke.prototype.addDrawCall=function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},Ke.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},Ke.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},Ke.prototype.removeAttribute=function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},Ke.prototype.applyMatrix=function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(Ke.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),vs.prototype.setDynamic=function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?U:z),this},vs.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},io.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},io.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},io.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},gs.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},fl.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(ze.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new ct}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===t}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties(wn.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),ps.prototype.clearTarget=function(t,e,n,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,n,i)},ps.prototype.animate=function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},ps.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},ps.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},ps.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},ps.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},ps.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},ps.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},ps.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},ps.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},ps.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},ps.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},ps.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},ps.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},ps.prototype.enableScissorTest=function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},ps.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},ps.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},ps.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},ps.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},ps.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},ps.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},ps.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},ps.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},ps.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},ps.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(ps.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?D:P}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}},gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}}),Object.defineProperties(ns.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(vt.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),class extends Me{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return(new el).load(t,(function(t){e.setBuffer(t)})),this},Tn.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)},Tn.prototype.clear=function(t,e,n,i){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(t,e,n,i)},ut.crossOrigin=void 0,ut.loadTexture=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const r=new Ho;r.setCrossOrigin(this.crossOrigin);const s=r.load(t,n,void 0,i);return e&&(s.mapping=e),s},ut.loadTextureCube=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const r=new Bo;r.setCrossOrigin(this.crossOrigin);const s=r.load(t,n,void 0,i);return e&&(s.mapping=e),s},ut.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},ut.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"139"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="139");const Dl={type:"change"},Il={type:"start"},Nl={type:"end"};class Ol extends H{constructor(t,e){super(),void 0===e&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),e===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=t,this.domElement=e,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new bt,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:0,MIDDLE:1,RIGHT:2},this.touches={ONE:0,TWO:2},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return a.phi},this.getAzimuthalAngle=function(){return a.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(t){t.addEventListener("keydown",V),this._domElementKeyEvents=t},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(Dl),n.update(),r=i.NONE},this.update=function(){const e=new bt,u=(new _t).setFromUnitVectors(t.up,new bt(0,1,0)),d=u.clone().invert(),p=new bt,f=new _t,m=2*Math.PI;return function(){const t=n.object.position;e.copy(t).sub(n.target),e.applyQuaternion(u),a.setFromVector3(e),n.autoRotate&&r===i.NONE&&M(2*Math.PI/60/60*n.autoRotateSpeed),n.enableDamping?(a.theta+=o.theta*n.dampingFactor,a.phi+=o.phi*n.dampingFactor):(a.theta+=o.theta,a.phi+=o.phi);let g=n.minAzimuthAngle,v=n.maxAzimuthAngle;return isFinite(g)&&isFinite(v)&&(g<-Math.PI?g+=m:g>Math.PI&&(g-=m),v<-Math.PI?v+=m:v>Math.PI&&(v-=m),a.theta=g<=v?Math.max(g,Math.min(v,a.theta)):a.theta>(g+v)/2?Math.max(g,a.theta):Math.min(v,a.theta)),a.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,a.phi)),a.makeSafe(),a.radius*=l,a.radius=Math.max(n.minDistance,Math.min(n.maxDistance,a.radius)),!0===n.enableDamping?n.target.addScaledVector(c,n.dampingFactor):n.target.add(c),e.setFromSpherical(a),e.applyQuaternion(d),t.copy(n.target).add(e),n.object.lookAt(n.target),!0===n.enableDamping?(o.theta*=1-n.dampingFactor,o.phi*=1-n.dampingFactor,c.multiplyScalar(1-n.dampingFactor)):(o.set(0,0,0),c.set(0,0,0)),l=1,!!(h||p.distanceToSquared(n.object.position)>s||8*(1-f.dot(n.object.quaternion))>s)&&(n.dispatchEvent(Dl),p.copy(n.object.position),f.copy(n.object.quaternion),h=!1,!0)}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",W),n.domElement.removeEventListener("pointerdown",F),n.domElement.removeEventListener("pointercancel",k),n.domElement.removeEventListener("wheel",G),n.domElement.removeEventListener("pointermove",B),n.domElement.removeEventListener("pointerup",H),null!==n._domElementKeyEvents&&n._domElementKeyEvents.removeEventListener("keydown",V)};const n=this,i={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let r=i.NONE;const s=1e-6,a=new ml,o=new ml;let l=1;const c=new bt;let h=!1;const u=new J,d=new J,p=new J,f=new J,m=new J,g=new J,v=new J,y=new J,x=new J,_=[],b={};function w(){return Math.pow(.95,n.zoomSpeed)}function M(t){o.theta-=t}function S(t){o.phi-=t}const E=function(){const t=new bt;return function(e,n){t.setFromMatrixColumn(n,0),t.multiplyScalar(-e),c.add(t)}}(),T=function(){const t=new bt;return function(e,i){!0===n.screenSpacePanning?t.setFromMatrixColumn(i,1):(t.setFromMatrixColumn(i,0),t.crossVectors(n.object.up,t)),t.multiplyScalar(e),c.add(t)}}(),A=function(){const t=new bt;return function(e,i){const r=n.domElement;if(n.object.isPerspectiveCamera){const s=n.object.position;t.copy(s).sub(n.target);let a=t.length();a*=Math.tan(n.object.fov/2*Math.PI/180),E(2*e*a/r.clientHeight,n.object.matrix),T(2*i*a/r.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(E(e*(n.object.right-n.object.left)/n.object.zoom/r.clientWidth,n.object.matrix),T(i*(n.object.top-n.object.bottom)/n.object.zoom/r.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function R(t){n.object.isPerspectiveCamera?l/=t:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom*t)),n.object.updateProjectionMatrix(),h=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function L(t){n.object.isPerspectiveCamera?l*=t:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/t)),n.object.updateProjectionMatrix(),h=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function C(t){u.set(t.clientX,t.clientY)}function P(t){f.set(t.clientX,t.clientY)}function D(){if(1===_.length)u.set(_[0].pageX,_[0].pageY);else{const t=.5*(_[0].pageX+_[1].pageX),e=.5*(_[0].pageY+_[1].pageY);u.set(t,e)}}function I(){if(1===_.length)f.set(_[0].pageX,_[0].pageY);else{const t=.5*(_[0].pageX+_[1].pageX),e=.5*(_[0].pageY+_[1].pageY);f.set(t,e)}}function N(){const t=_[0].pageX-_[1].pageX,e=_[0].pageY-_[1].pageY,n=Math.sqrt(t*t+e*e);v.set(0,n)}function O(t){if(1==_.length)d.set(t.pageX,t.pageY);else{const e=q(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);d.set(n,i)}p.subVectors(d,u).multiplyScalar(n.rotateSpeed);const e=n.domElement;M(2*Math.PI*p.x/e.clientHeight),S(2*Math.PI*p.y/e.clientHeight),u.copy(d)}function z(t){if(1===_.length)m.set(t.pageX,t.pageY);else{const e=q(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);m.set(n,i)}g.subVectors(m,f).multiplyScalar(n.panSpeed),A(g.x,g.y),f.copy(m)}function U(t){const e=q(t),i=t.pageX-e.x,r=t.pageY-e.y,s=Math.sqrt(i*i+r*r);y.set(0,s),x.set(0,Math.pow(y.y/v.y,n.zoomSpeed)),R(x.y),v.copy(y)}function F(t){!1!==n.enabled&&(0===_.length&&(n.domElement.setPointerCapture(t.pointerId),n.domElement.addEventListener("pointermove",B),n.domElement.addEventListener("pointerup",H)),function(t){_.push(t)}(t),"touch"===t.pointerType?function(t){switch(X(t),_.length){case 1:switch(n.touches.ONE){case 0:if(!1===n.enableRotate)return;D(),r=i.TOUCH_ROTATE;break;case 1:if(!1===n.enablePan)return;I(),r=i.TOUCH_PAN;break;default:r=i.NONE}break;case 2:switch(n.touches.TWO){case 2:if(!1===n.enableZoom&&!1===n.enablePan)return;n.enableZoom&&N(),n.enablePan&&I(),r=i.TOUCH_DOLLY_PAN;break;case 3:if(!1===n.enableZoom&&!1===n.enableRotate)return;n.enableZoom&&N(),n.enableRotate&&D(),r=i.TOUCH_DOLLY_ROTATE;break;default:r=i.NONE}break;default:r=i.NONE}r!==i.NONE&&n.dispatchEvent(Il)}(t):function(t){let e;switch(t.button){case 0:e=n.mouseButtons.LEFT;break;case 1:e=n.mouseButtons.MIDDLE;break;case 2:e=n.mouseButtons.RIGHT;break;default:e=-1}switch(e){case 1:if(!1===n.enableZoom)return;!function(t){v.set(t.clientX,t.clientY)}(t),r=i.DOLLY;break;case 0:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===n.enablePan)return;P(t),r=i.PAN}else{if(!1===n.enableRotate)return;C(t),r=i.ROTATE}break;case 2:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===n.enableRotate)return;C(t),r=i.ROTATE}else{if(!1===n.enablePan)return;P(t),r=i.PAN}break;default:r=i.NONE}r!==i.NONE&&n.dispatchEvent(Il)}(t))}function B(t){!1!==n.enabled&&("touch"===t.pointerType?function(t){switch(X(t),r){case i.TOUCH_ROTATE:if(!1===n.enableRotate)return;O(t),n.update();break;case i.TOUCH_PAN:if(!1===n.enablePan)return;z(t),n.update();break;case i.TOUCH_DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(t){n.enableZoom&&U(t),n.enablePan&&z(t)}(t),n.update();break;case i.TOUCH_DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(t){n.enableZoom&&U(t),n.enableRotate&&O(t)}(t),n.update();break;default:r=i.NONE}}(t):function(t){if(!1!==n.enabled)switch(r){case i.ROTATE:if(!1===n.enableRotate)return;!function(t){d.set(t.clientX,t.clientY),p.subVectors(d,u).multiplyScalar(n.rotateSpeed);const e=n.domElement;M(2*Math.PI*p.x/e.clientHeight),S(2*Math.PI*p.y/e.clientHeight),u.copy(d),n.update()}(t);break;case i.DOLLY:if(!1===n.enableZoom)return;!function(t){y.set(t.clientX,t.clientY),x.subVectors(y,v),x.y>0?R(w()):x.y<0&&L(w()),v.copy(y),n.update()}(t);break;case i.PAN:if(!1===n.enablePan)return;!function(t){m.set(t.clientX,t.clientY),g.subVectors(m,f).multiplyScalar(n.panSpeed),A(g.x,g.y),f.copy(m),n.update()}(t)}}(t))}function H(t){j(t),0===_.length&&(n.domElement.releasePointerCapture(t.pointerId),n.domElement.removeEventListener("pointermove",B),n.domElement.removeEventListener("pointerup",H)),n.dispatchEvent(Nl),r=i.NONE}function k(t){j(t)}function G(t){!1!==n.enabled&&!1!==n.enableZoom&&r===i.NONE&&(t.preventDefault(),n.dispatchEvent(Il),function(t){t.deltaY<0?L(w()):t.deltaY>0&&R(w()),n.update()}(t),n.dispatchEvent(Nl))}function V(t){!1!==n.enabled&&!1!==n.enablePan&&function(t){let e=!1;switch(t.code){case n.keys.UP:A(0,n.keyPanSpeed),e=!0;break;case n.keys.BOTTOM:A(0,-n.keyPanSpeed),e=!0;break;case n.keys.LEFT:A(n.keyPanSpeed,0),e=!0;break;case n.keys.RIGHT:A(-n.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),n.update())}(t)}function W(t){!1!==n.enabled&&t.preventDefault()}function j(t){delete b[t.pointerId];for(let e=0;e<_.length;e++)if(_[e].pointerId==t.pointerId)return void _.splice(e,1)}function X(t){let e=b[t.pointerId];void 0===e&&(e=new J,b[t.pointerId]=e),e.set(t.pageX,t.pageY)}function q(t){const e=t.pointerId===_[0].pointerId?_[1]:_[0];return b[e.pointerId]}n.domElement.addEventListener("contextmenu",W),n.domElement.addEventListener("pointerdown",F),n.domElement.addEventListener("pointercancel",k),n.domElement.addEventListener("wheel",G,{passive:!1}),this.update()}}var zl,Ul=function(){function t(t){this.scene=new gs,this.scene.background=new ct("white");var e=t.getBoundingClientRect(),n=e.width,i=e.height;this.renderer=new ps({canvas:t}),this.renderer.setSize(n,i),this.camera=new Sn,this.camera.aspect=n/i,this.camera.updateProjectionMatrix(),this.controls=new Ol(this.camera,t)}return t.prototype.render=function(){this.controls.update(),this.renderer.render(this.scene,this.camera)},t}(),Fl=(zl=function(t,e){return zl=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},zl(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}zl(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),Bl=function(e){function n(t){var n=e.call(this,t)||this;return n.owl=null,n.build(),n}return Fl(n,e),n.prototype.update=function(e){var n=this.owl;if(n&&e.poseLandmarks){var i=e.poseLandmarks.map((function(t){return{x:100*t.x-50,y:-(100*t.y-50),z:100*t.z-50}})),r=Cl([i[t.POSE_LANDMARKS.LEFT_SHOULDER],i[t.POSE_LANDMARKS.RIGHT_SHOULDER]]),s=Cl([i[t.POSE_LANDMARKS.LEFT_HIP],i[t.POSE_LANDMARKS.RIGHT_HIP]]);n.torso.rotation.z=Math.PI/2+Pl(r,s),n.neck.rotation.z=-Math.PI/2+Pl(r,i[t.POSE_LANDMARKS.NOSE])-n.torso.rotation.z,n.leftShoulder.rotation.z=-.7+Pl(i[t.POSE_LANDMARKS.LEFT_SHOULDER],i[t.POSE_LANDMARKS.LEFT_ELBOW])-n.torso.rotation.z,n.leftElbow.rotation.z=Math.PI/4+Pl(i[t.POSE_LANDMARKS.LEFT_ELBOW],i[t.POSE_LANDMARKS.LEFT_WRIST])-n.leftShoulder.rotation.z-n.torso.rotation.z,n.rightShoulder.rotation.z=.7+Math.PI+Pl(i[t.POSE_LANDMARKS.RIGHT_SHOULDER],i[t.POSE_LANDMARKS.RIGHT_ELBOW])-n.torso.rotation.z,n.rightElbow.rotation.z=-.7+Math.PI+Pl(i[t.POSE_LANDMARKS.RIGHT_ELBOW],i[t.POSE_LANDMARKS.RIGHT_WRIST])-n.rightShoulder.rotation.z-n.torso.rotation.z,n.leftHip.rotation.z=Math.PI/2+Pl(i[t.POSE_LANDMARKS.LEFT_HIP],i[t.POSE_LANDMARKS_LEFT.LEFT_KNEE])-n.torso.rotation.z,n.rightHip.rotation.z=Math.PI/2+Pl(i[t.POSE_LANDMARKS.RIGHT_HIP],i[t.POSE_LANDMARKS_RIGHT.RIGHT_KNEE])-n.torso.rotation.z,this.render()}},n.prototype.build=function(){var t,e,n,i,r,s,a,o,l,c,h,u,d,p,f;this.owl=(t=Ll({name:"torso",height:69.225,width:58.423}),e=Rl(),n=Ll({name:"head",height:68.125,width:83.547}),i=Rl(),r=Ll({name:"left-leg",width:39.414,height:41.437}),s=Rl(),a=Ll({name:"right-leg",width:39.414,height:41.437}),o=Rl(),l=Ll({name:"left-upper-wing",width:25.96,height:36.565}),c=Rl(),h=Ll({name:"left-lower-wing",width:44.92,height:34.711}),u=Rl(),d=Ll({name:"right-upper-wing",width:25.96,height:36.565}),p=Rl(),f=Ll({name:"right-lower-wing",width:44.92,height:34.711}),t.add(e),e.position.y=35,e.position.z=1,e.add(n),n.position.y=25,t.add(i),i.position.x=20,i.position.y=-20,i.position.z=-1,i.add(r),r.position.x=-5,r.position.y=-7,r.position.z=-1,t.add(s),s.position.x=-20,s.position.y=-20,s.position.z=-1,s.add(a),a.position.x=2,a.position.y=-7,a.position.z=-1,t.add(o),o.position.x=22,o.position.y=17,o.add(l),l.position.x=10,l.position.y=2,l.position.z=-1,l.add(c),c.position.x=7,c.position.y=12,c.position.z=1,c.add(h),h.position.x=20,h.position.y=-8,h.position.z=-1,t.add(u),u.position.x=-23,u.position.y=17,u.add(d),d.position.x=-10,d.position.y=2,d.position.z=-1,d.add(p),p.position.x=-7,p.position.y=12,p.position.z=1,p.add(f),f.position.x=-20,f.position.y=-8,f.position.z=-1,{anchor:t,torso:t,neck:e,head:n,leftHip:i,leftLeg:r,rightHip:s,rightLeg:a,leftShoulder:o,leftUpperWing:l,leftElbow:c,leftLowerWing:h,rightShoulder:u,rightUpperWing:d,rightElbow:p,rightLowerWing:f}),this.scene.add(this.owl.anchor),this.camera.position.z=250},n}(Ul),Hl=n(135),kl=function(){function e(e,n){void 0===e&&(e=360),void 0===n&&(n=640);var i=this;this.listeners=[];var r=document.createElement("video");this.pose=new t.Pose({locateFile:function(t){return"https://cdn.jsdelivr.net/npm/@mediapipe/pose/".concat(t)}}),this.pose.setOptions({modelComplexity:1,smoothLandmarks:!0,enableSegmentation:!0,smoothSegmentation:!0,minDetectionConfidence:.5,minTrackingConfidence:.5}),this.pose.onResults((function(t){return i.notifyListeners(t)})),this.camera=new Hl.Camera(r,{onFrame:function(){return i.pose.send({image:r})},width:n,height:e})}return e.prototype.start=function(){this.camera.start()},e.prototype.stop=function(){this.camera.stop()},e.prototype.addListener=function(t){this.listeners.push(t)},e.prototype.removeListener=function(t){this.listeners.splice(this.listeners.indexOf(t),1)},e.prototype.notifyListeners=function(t){this.listeners.forEach((function(e){return e(t)}))},e}(),Gl=n(423),Vl=function(){function e(t){this.canvas=t}return e.prototype.update=function(e){var n=this.canvas.getContext("2d");n.drawImage(e.image,0,0,this.canvas.width,this.canvas.height),n.globalCompositeOperation="source-over",(0,Gl.drawConnectors)(n,e.poseLandmarks,t.POSE_CONNECTIONS,{color:"#0000ff",lineWidth:.2}),(0,Gl.drawLandmarks)(n,e.poseLandmarks,{color:"#00ff00",radius:.5}),n.restore()},e}();!function(){var t=null,e=new kl;e.addListener((function(e){return t=e})),e.start();var n=[new Vl(document.getElementById("video-canvas")),new Bl(document.getElementById("owl-canvas"))];!function e(){requestAnimationFrame(e),t&&n.forEach((function(e){return e.update(t)}))}()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7a0NBQUEsV0FLQSxhQUFhLFNBQVNBLEVBQUVDLEdBQUcsSUFBSUMsRUFBRSxFQUFFLE9BQU8sV0FBVyxPQUFPQSxFQUFFRCxFQUFFRSxPQUFPLENBQUNDLE1BQUssRUFBR0MsTUFBTUosRUFBRUMsTUFBTSxDQUFDRSxNQUFLLElBQUssSUFBSUUsRUFBRSxtQkFBbUJDLE9BQU9DLGlCQUFpQkQsT0FBT0UsZUFBZSxTQUFTUixFQUFFQyxFQUFFUSxHQUFHLE9BQUdULEdBQUdVLE1BQU1DLFdBQVdYLEdBQUdNLE9BQU9LLFlBQW1CWCxFQUFFQyxHQUFHUSxFQUFFTCxPQUFUSixHQUN1QlksRUFBelEsU0FBV1osR0FBR0EsRUFBRSxDQUFDLGlCQUFpQmEsWUFBWUEsV0FBV2IsRUFBRSxpQkFBaUJjLFFBQVFBLE9BQU8saUJBQWlCQyxNQUFNQSxLQUFLLGlCQUFpQixFQUFBQyxHQUFRLEVBQUFBLEdBQVEsSUFBSSxJQUFJZixFQUFFLEVBQUVBLEVBQUVELEVBQUVFLFNBQVNELEVBQUUsQ0FBQyxJQUFJUSxFQUFFVCxFQUFFQyxHQUFHLEdBQUdRLEdBQUdBLEVBQUVRLE1BQU1BLEtBQUssT0FBT1IsRUFBRSxNQUFNUyxNQUFNLDZCQUFvQ0MsQ0FBRUMsTUFBTSxTQUFTQyxFQUFFckIsRUFBRUMsR0FBRyxHQUFHQSxFQUFFRCxFQUFFLENBQUMsSUFBSVMsRUFBRUcsRUFBRVosRUFBRUEsRUFBRXNCLE1BQU0sS0FBSyxJQUFJLElBQUlDLEVBQUUsRUFBRUEsRUFBRXZCLEVBQUVFLE9BQU8sRUFBRXFCLElBQUksQ0FBQyxJQUFJQyxFQUFFeEIsRUFBRXVCLEdBQUcsS0FBS0MsS0FBS2YsR0FBRyxNQUFNVCxFQUFFUyxFQUFFQSxFQUFFZSxJQUEwQnZCLEVBQUVBLEVBQVRzQixFQUFFZCxFQUFsQlQsRUFBRUEsRUFBRUEsRUFBRUUsT0FBTyxPQUFvQnFCLEdBQUcsTUFBTXRCLEdBQUdJLEVBQUVJLEVBQUVULEVBQUUsQ0FBQ3lCLGNBQWEsRUFBR0MsVUFBUyxFQUFHdEIsTUFBTUgsS0FFN0UsU0FBUzBCLEVBQUUzQixHQUF5RCxPQUF0REEsRUFBRSxDQUFDNEIsS0FBSzVCLElBQUs2QixPQUFPQyxVQUFVLFdBQVcsT0FBT1YsTUFBYXBCLEVBQzNkLFNBQVMrQixFQUFFL0IsR0FBRyxJQUFJQyxFQUFFLG9CQUFvQjRCLFFBQVFBLE9BQU9DLFVBQVU5QixFQUFFNkIsT0FBT0MsVUFBVSxPQUFPN0IsRUFBRUEsRUFBRStCLEtBQUtoQyxHQUFHLENBQUM0QixLQUFLN0IsRUFBRUMsSUFBSSxTQUFTaUMsSUFBSWIsS0FBS2MsR0FBRSxFQUFHZCxLQUFLSixFQUFFLEtBQUtJLEtBQUtlLE9BQUUsRUFBT2YsS0FBS2dCLEVBQUUsRUFBRWhCLEtBQUtpQixFQUFFLEVBQUVqQixLQUFLSSxFQUFFLEtBQUssU0FBU2MsRUFBRXRDLEdBQUcsR0FBR0EsRUFBRWtDLEVBQUUsTUFBTSxJQUFJSyxVQUFVLGdDQUFnQ3ZDLEVBQUVrQyxHQUFFLEVBQXVDLFNBQVNNLEVBQUV4QyxFQUFFQyxHQUFHRCxFQUFFd0IsRUFBRSxDQUFDaUIsRUFBRXhDLEVBQUV5QyxHQUFFLEdBQUkxQyxFQUFFb0MsRUFBRXBDLEVBQUVxQyxFQUFrRSxTQUFTTSxFQUFFM0MsR0FBR29CLEtBQUtKLEVBQUUsSUFBSWlCLEVBQUViLEtBQUtJLEVBQUV4QixFQUN0UyxTQUFTNEMsRUFBRTVDLEVBQUVDLEVBQUVRLEVBQUVjLEdBQUcsSUFBSSxJQUFJQyxFQUFFdkIsRUFBRStCLEtBQUtoQyxFQUFFZ0IsRUFBRUEsRUFBRVAsR0FBRyxLQUFLZSxhQUFhbEIsUUFBUSxNQUFNLElBQUlpQyxVQUFVLG1CQUFtQmYsRUFBRSxxQkFBcUIsSUFBSUEsRUFBRXJCLEtBQUssT0FBT0gsRUFBRWdCLEVBQUVrQixHQUFFLEVBQUdWLEVBQUUsSUFBSXFCLEVBQUVyQixFQUFFcEIsTUFBTSxNQUFNMEMsR0FBRyxPQUFPOUMsRUFBRWdCLEVBQUVBLEVBQUUsS0FBS3dCLEVBQUV4QyxFQUFFZ0IsRUFBRThCLEdBQUdDLEVBQUUvQyxHQUE0QixPQUF6QkEsRUFBRWdCLEVBQUVBLEVBQUUsS0FBS08sRUFBRVMsS0FBS2hDLEVBQUVnQixFQUFFNkIsR0FBVUUsRUFBRS9DLEdBQ3JaLFNBQVMrQyxFQUFFL0MsR0FBRyxLQUFLQSxFQUFFZ0IsRUFBRW9CLEdBQUcsSUFBSSxJQUFJbkMsRUFBRUQsRUFBRXdCLEVBQUV4QixFQUFFZ0IsR0FBRyxHQUFHZixFQUFFLE9BQU9ELEVBQUVnQixFQUFFa0IsR0FBRSxFQUFHLENBQUM5QixNQUFNSCxFQUFFRyxNQUFNRCxNQUFLLEdBQUksTUFBTU0sR0FBR1QsRUFBRWdCLEVBQUVtQixPQUFFLEVBQU9LLEVBQUV4QyxFQUFFZ0IsRUFBRVAsR0FBWSxHQUFUVCxFQUFFZ0IsRUFBRWtCLEdBQUUsRUFBTWxDLEVBQUVnQixFQUFFUSxFQUFFLENBQW9CLEdBQW5CdkIsRUFBRUQsRUFBRWdCLEVBQUVRLEVBQUV4QixFQUFFZ0IsRUFBRVEsRUFBRSxLQUFRdkIsRUFBRXlDLEVBQUUsTUFBTXpDLEVBQUV3QyxFQUFFLE1BQU0sQ0FBQ3JDLE1BQU1ILEVBQUUrQyxPQUFPN0MsTUFBSyxHQUFJLE1BQU0sQ0FBQ0MsV0FBTSxFQUFPRCxNQUFLLEdBQ3hPLFNBQVM4QyxFQUFFakQsR0FBR29CLEtBQUtRLEtBQUssU0FBUzNCLEdBQTRELE9BQXpEcUMsRUFBRXRDLEVBQUVnQixHQUFHaEIsRUFBRWdCLEVBQUVBLEVBQUVmLEVBQUUyQyxFQUFFNUMsRUFBRUEsRUFBRWdCLEVBQUVBLEVBQUVZLEtBQUszQixFQUFFRCxFQUFFZ0IsRUFBRTZCLElBQUk3QyxFQUFFZ0IsRUFBRTZCLEVBQUU1QyxHQUFHQSxFQUFFOEMsRUFBRS9DLElBQVdDLEdBQUdtQixLQUFLOEIsTUFBTSxTQUFTakQsR0FBZ0UsT0FBN0RxQyxFQUFFdEMsRUFBRWdCLEdBQUdoQixFQUFFZ0IsRUFBRUEsRUFBRWYsRUFBRTJDLEVBQUU1QyxFQUFFQSxFQUFFZ0IsRUFBRUEsRUFBUyxNQUFFZixFQUFFRCxFQUFFZ0IsRUFBRTZCLElBQUlMLEVBQUV4QyxFQUFFZ0IsRUFBRWYsR0FBR0EsRUFBRThDLEVBQUUvQyxJQUFXQyxHQUFHbUIsS0FBSzRCLE9BQU8sU0FBUy9DLEdBQUcsT0FGN04sU0FBV0QsRUFBRUMsR0FBR3FDLEVBQUV0QyxFQUFFZ0IsR0FBRyxJQUFJUCxFQUFFVCxFQUFFZ0IsRUFBRUEsRUFBRSxPQUFHUCxFQUFTbUMsRUFBRTVDLEVBQUUsV0FBV1MsRUFBRUEsRUFBVSxPQUFFLFNBQVNjLEdBQUcsTUFBTSxDQUFDbkIsTUFBTW1CLEVBQUVwQixNQUFLLElBQUtGLEVBQUVELEVBQUVnQixFQUFFZ0MsU0FBUWhELEVBQUVnQixFQUFFZ0MsT0FBTy9DLEdBQVU4QyxFQUFFL0MsSUFFOEVtRCxDQUFFbkQsRUFBRUMsSUFBSW1CLEtBQUtTLE9BQU9DLFVBQVUsV0FBVyxPQUFPVixNQUFNLFNBQVNnQyxFQUFFcEQsR0FBRyxTQUFTQyxFQUFFc0IsR0FBRyxPQUFPdkIsRUFBRTRCLEtBQUtMLEdBQUcsU0FBU2QsRUFBRWMsR0FBRyxPQUFPdkIsRUFBRWtELE1BQU0zQixHQUFHLE9BQU8sSUFBSThCLFNBQVEsU0FBUzlCLEVBQUVDLElBQUcsU0FBU3FCLEVBQUVDLEdBQUdBLEVBQUUzQyxLQUFLb0IsRUFBRXVCLEVBQUUxQyxPQUFPaUQsUUFBUUMsUUFBUVIsRUFBRTFDLE9BQU9tRCxLQUFLdEQsRUFBRVEsR0FBRzhDLEtBQUtWLEVBQUVyQixHQUFHcUIsQ0FBRTdDLEVBQUU0QixXQUx6ZFAsRUFBRSxVQUFTLFNBQVNyQixHQUEySCxTQUFTUyxFQUFFb0MsRUFBRUMsR0FBRzFCLEtBQUtKLEVBQUU2QixFQUFFeEMsRUFBRWUsS0FBSyxjQUFjLENBQUNLLGNBQWEsRUFBR0MsVUFBUyxFQUFHdEIsTUFBTTBDLElBQUksR0FBRzlDLEVBQUUsT0FBT0EsRUFBRVMsRUFBRUUsVUFBVTZDLFNBQVMsV0FBVyxPQUFPcEMsS0FBS0osR0FBRyxJQUFJTyxFQUFFLGtCQUFrQixJQUFJTixLQUFLd0MsV0FBVyxHQUFHLElBQUlqQyxFQUFFLEVBQUUsT0FBalUsU0FBU3ZCLEVBQUU0QyxHQUFHLEdBQUd6QixnQkFBZ0JuQixFQUFFLE1BQU0sSUFBSXNDLFVBQVUsK0JBQStCLE9BQU8sSUFBSTlCLEVBQUVjLEdBQUdzQixHQUFHLElBQUksSUFBSXJCLElBQUlxQixPQUM1SXhCLEVBQUUsbUJBQWtCLFNBQVNyQixHQUFHLEdBQUdBLEVBQUUsT0FBT0EsRUFBRUEsRUFBRTZCLE9BQU8sbUJBQW1CLElBQUksSUFBSTVCLEVBQUUsdUhBQXVIcUIsTUFBTSxLQUFLYixFQUFFLEVBQUVBLEVBQUVSLEVBQUVDLE9BQU9PLElBQUksQ0FBQyxJQUFJYyxFQUFFWCxFQUFFWCxFQUFFUSxJQUFJLG1CQUFvQmMsR0FBRyxtQkFBbUJBLEVBQUVaLFVBQVVYLElBQUlLLEVBQUVrQixFQUFFWixVQUFVWCxFQUFFLENBQUN5QixjQUFhLEVBQUdDLFVBQVMsRUFBR3RCLE1BQU0sV0FBVyxPQUFPdUIsRUFBRTVCLEVBQUVxQixVQUFVLE9BQU9wQixLQUMxSGlDLEVBQUV0QixVQUFVa0MsRUFBRSxTQUFTN0MsR0FBR29CLEtBQUtlLEVBQUVuQyxHQUEwQ2lDLEVBQUV0QixVQUFVcUMsT0FBTyxTQUFTaEQsR0FBR29CLEtBQUtJLEVBQUUsQ0FBQ3dCLE9BQU9oRCxHQUFHb0IsS0FBS2dCLEVBQUVoQixLQUFLaUIsR0FJMVpoQixFQUFFLFdBQVUsU0FBU3JCLEdBQUcsU0FBU0MsRUFBRTZDLEdBQUcxQixLQUFLSSxFQUFFLEVBQUVKLEtBQUtjLE9BQUUsRUFBT2QsS0FBS0osRUFBRSxHQUFHSSxLQUFLZSxHQUFFLEVBQUcsSUFBSXVCLEVBQUV0QyxLQUFLZ0IsSUFBSSxJQUFJVSxFQUFFWSxFQUFFSixRQUFRSSxFQUFFQyxRQUFRLE1BQU0zQyxHQUFHMEMsRUFBRUMsT0FBTzNDLElBQUksU0FBU1AsSUFBSVcsS0FBS0osRUFBRSxLQUFLLFNBQVNPLEVBQUV1QixHQUFHLE9BQU9BLGFBQWE3QyxFQUFFNkMsRUFBRSxJQUFJN0MsR0FBRSxTQUFTeUQsR0FBR0EsRUFBRVosTUFBSyxHQUFHOUMsRUFBRSxPQUFPQSxFQUFFUyxFQUFFRSxVQUFVYSxFQUFFLFNBQVNzQixHQUFHLEdBQUcsTUFBTTFCLEtBQUtKLEVBQUUsQ0FBQ0ksS0FBS0osRUFBRSxHQUFHLElBQUkwQyxFQUFFdEMsS0FBS0EsS0FBS2MsR0FBRSxXQUFXd0IsRUFBRWIsT0FBTXpCLEtBQUtKLEVBQUU0QyxLQUFLZCxJQUFJLElBQUl0QixFQUFFWixFQUFFaUQsV0FBV3BELEVBQUVFLFVBQVV1QixFQUFFLFNBQVNZLEdBQUd0QixFQUFFc0IsRUFBRSxJQUFJckMsRUFBRUUsVUFBVWtDLEVBQUUsV0FBVyxLQUFLekIsS0FBS0osR0FBR0ksS0FBS0osRUFBRWQsUUFBUSxDQUFDLElBQUk0QyxFQUFFMUIsS0FBS0osRUFBRUksS0FBS0osRUFBRSxHQUFHLElBQUksSUFBSTBDLEVBQUUsRUFBRUEsRUFBRVosRUFBRTVDLFNBQVN3RCxFQUFFLENBQUMsSUFBSTFDLEVBQ2xnQjhCLEVBQUVZLEdBQUdaLEVBQUVZLEdBQUcsS0FBSyxJQUFJMUMsSUFBSSxNQUFNOEMsR0FBRzFDLEtBQUtnQixFQUFFMEIsS0FBSzFDLEtBQUtKLEVBQUUsTUFBTVAsRUFBRUUsVUFBVXlCLEVBQUUsU0FBU1UsR0FBRzFCLEtBQUtjLEdBQUUsV0FBVyxNQUFNWSxNQUFNN0MsRUFBRVUsVUFBVXlCLEVBQUUsV0FBVyxTQUFTVSxFQUFFZ0IsR0FBRyxPQUFPLFNBQVN6QixHQUFHckIsSUFBSUEsR0FBRSxFQUFHOEMsRUFBRTlCLEtBQUswQixFQUFFckIsS0FBSyxJQUFJcUIsRUFBRXRDLEtBQUtKLEdBQUUsRUFBRyxNQUFNLENBQUNzQyxRQUFRUixFQUFFMUIsS0FBS29CLEdBQUdtQixPQUFPYixFQUFFMUIsS0FBS3lCLEtBQUs1QyxFQUFFVSxVQUFVNkIsRUFBRSxTQUFTTSxHQUFHLEdBQUdBLElBQUkxQixLQUFLQSxLQUFLeUIsRUFBRSxJQUFJTixVQUFVLDRDQUE0QyxHQUFHTyxhQUFhN0MsRUFBRW1CLEtBQUsrQixFQUFFTCxPQUFPLENBQUM5QyxFQUFFLGNBQWM4QyxHQUFHLElBQUssU0FBUyxJQUFJWSxFQUFFLE1BQU1aLEVBQUUsTUFBTTlDLEVBQUUsSUFBSyxXQUFXMEQsR0FBRSxFQUFHLE1BQU0xRCxFQUFFLFFBQVEwRCxHQUFFLEVBQUdBLEVBQUV0QyxLQUFLQyxFQUFFeUIsR0FBRzFCLEtBQUtpQixFQUFFUyxLQUMxZjdDLEVBQUVVLFVBQVVVLEVBQUUsU0FBU3lCLEdBQUcsSUFBSVksT0FBRSxFQUFPLElBQUlBLEVBQUVaLEVBQUVTLEtBQUssTUFBTXZDLEdBQWEsWUFBVkksS0FBS3lCLEVBQUU3QixHQUFVLG1CQUFtQjBDLEVBQUV0QyxLQUFLd0IsRUFBRWMsRUFBRVosR0FBRzFCLEtBQUtpQixFQUFFUyxJQUFJN0MsRUFBRVUsVUFBVWtDLEVBQUUsU0FBU0MsR0FBRzFCLEtBQUtSLEVBQUUsRUFBRWtDLElBQUk3QyxFQUFFVSxVQUFVMEIsRUFBRSxTQUFTUyxHQUFHMUIsS0FBS1IsRUFBRSxFQUFFa0MsSUFBSTdDLEVBQUVVLFVBQVVDLEVBQUUsU0FBU2tDLEVBQUVZLEdBQUcsR0FBRyxHQUFHdEMsS0FBS0ksRUFBRSxNQUFNTixNQUFNLGlCQUFpQjRCLEVBQUUsS0FBS1ksRUFBRSxzQ0FBc0N0QyxLQUFLSSxHQUFHSixLQUFLSSxFQUFFc0IsRUFBRTFCLEtBQUtjLEVBQUV3QixFQUFFLElBQUl0QyxLQUFLSSxHQUFHSixLQUFLdUIsSUFBSXZCLEtBQUsyQixLQUFLOUMsRUFBRVUsVUFBVWdDLEVBQUUsV0FBVyxJQUFJRyxFQUFFMUIsS0FBS0ksR0FBRSxXQUFXLEdBQUdzQixFQUFFRyxJQUFJLENBQUMsSUFBSVMsRUFBRTlDLEVBQUVtRCxhQUFRLElBQXFCTCxHQUFHQSxFQUFFTSxNQUFNbEIsRUFBRVosTUFBSyxJQUFJakMsRUFBRVUsVUFBVXNDLEVBQ3hmLFdBQVcsR0FBRzdCLEtBQUtlLEVBQUUsT0FBTSxFQUFHLElBQUlXLEVBQUVsQyxFQUFFcUQsWUFBWVAsRUFBRTlDLEVBQUVzRCxNQUFNbEQsRUFBRUosRUFBRXVELGNBQWMsWUFBRyxJQUFxQm5ELElBQVcsbUJBQW9COEIsRUFBRUEsRUFBRSxJQUFJQSxFQUFFLHFCQUFxQixDQUFDc0IsWUFBVyxJQUFLLG1CQUFvQlYsRUFBRVosRUFBRSxJQUFJWSxFQUFFLHFCQUFxQixDQUFDVSxZQUFXLEtBQU10QixFQUFFbEMsRUFBRXlELFNBQVNDLFlBQVksZ0JBQWlCQyxnQkFBZ0Isc0JBQXFCLEdBQUcsRUFBR3pCLEdBQUlBLEVBQUUwQixRQUFRcEQsS0FBSzBCLEVBQUUyQixPQUFPckQsS0FBS2MsRUFBU2xCLEVBQUU4QixLQUFJN0MsRUFBRVUsVUFBVW9DLEVBQUUsV0FBVyxHQUFHLE1BQU0zQixLQUFLSixFQUFFLENBQUMsSUFBSSxJQUFJOEIsRUFBRSxFQUFFQSxFQUFFMUIsS0FBS0osRUFBRWQsU0FBUzRDLEVBQUVELEVBQUVyQixFQUFFSixLQUFLSixFQUFFOEIsSUFBSTFCLEtBQUtKLEVBQUUsT0FBTyxJQUFJNkIsRUFBRSxJQUFJcEMsRUFFdEIsT0FGd0JSLEVBQUVVLFVBQVV3QyxFQUM5ZixTQUFTTCxHQUFHLElBQUlZLEVBQUV0QyxLQUFLZ0IsSUFBSVUsRUFBRTRCLEVBQUVoQixFQUFFSixRQUFRSSxFQUFFQyxTQUFTMUQsRUFBRVUsVUFBVWlDLEVBQUUsU0FBU0UsRUFBRVksR0FBRyxJQUFJMUMsRUFBRUksS0FBS2dCLElBQUksSUFBSVUsRUFBRWQsS0FBSzBCLEVBQUUxQyxFQUFFc0MsUUFBUXRDLEVBQUUyQyxRQUFRLE1BQU1HLEdBQUc5QyxFQUFFMkMsT0FBT0csS0FBSzdELEVBQUVVLFVBQVU0QyxLQUFLLFNBQVNULEVBQUVZLEdBQUcsU0FBUzFDLEVBQUUyRCxFQUFFQyxHQUFHLE1BQU0sbUJBQW1CRCxFQUFFLFNBQVNFLEdBQUcsSUFBSWYsRUFBRWEsRUFBRUUsSUFBSSxNQUFNcEMsR0FBR0osRUFBRUksS0FBS21DLEVBQUUsSUFBSWQsRUFBRXpCLEVBQUVLLEVBQUUsSUFBSXpDLEdBQUUsU0FBUzBFLEVBQUVDLEdBQUdkLEVBQUVhLEVBQUV0QyxFQUFFdUMsS0FBMEIsT0FBdEJ4RCxLQUFLc0QsRUFBRTFELEVBQUU4QixFQUFFZ0IsR0FBRzlDLEVBQUUwQyxFQUFFckIsSUFBV0ssR0FBR3pDLEVBQUVVLFVBQVVtRSxNQUFNLFNBQVNoQyxHQUFHLE9BQU8xQixLQUFLbUMsVUFBSyxFQUFPVCxJQUFJN0MsRUFBRVUsVUFBVStELEVBQUUsU0FBUzVCLEVBQUVZLEdBQUcsU0FBUzFDLElBQUksT0FBTzhDLEVBQUV0QyxHQUFHLEtBQUssRUFBRXNCLEVBQUVnQixFQUFFNUIsR0FBRyxNQUFNLEtBQUssRUFBRXdCLEVBQUVJLEVBQUU1QixHQUFHLE1BQU0sUUFBUSxNQUFNaEIsTUFBTSxxQkFDOWY0QyxFQUFFdEMsSUFBSyxJQUFJc0MsRUFBRTFDLEtBQUssTUFBTUEsS0FBS0osRUFBRTZCLEVBQUVyQixFQUFFUixHQUFHSSxLQUFLSixFQUFFNEMsS0FBSzVDLEdBQUdJLEtBQUtlLEdBQUUsR0FBSWxDLEVBQUVxRCxRQUFRL0IsRUFBRXRCLEVBQUUwRCxPQUFPLFNBQVNiLEdBQUcsT0FBTyxJQUFJN0MsR0FBRSxTQUFTeUQsRUFBRTFDLEdBQUdBLEVBQUU4QixPQUFNN0MsRUFBRThFLEtBQUssU0FBU2pDLEdBQUcsT0FBTyxJQUFJN0MsR0FBRSxTQUFTeUQsRUFBRTFDLEdBQUcsSUFBSSxJQUFJOEMsRUFBRS9CLEVBQUVlLEdBQUdULEVBQUV5QixFQUFFbEMsUUFBUVMsRUFBRWxDLEtBQUtrQyxFQUFFeUIsRUFBRWxDLE9BQU9MLEVBQUVjLEVBQUVqQyxPQUFPc0UsRUFBRWhCLEVBQUUxQyxPQUFNZixFQUFFK0UsSUFBSSxTQUFTbEMsR0FBRyxJQUFJWSxFQUFFM0IsRUFBRWUsR0FBRzlCLEVBQUUwQyxFQUFFOUIsT0FBTyxPQUFPWixFQUFFYixLQUFLb0IsRUFBRSxJQUFJLElBQUl0QixHQUFFLFNBQVM2RCxFQUFFekIsR0FBRyxTQUFTSyxFQUFFbUMsR0FBRyxPQUFPLFNBQVNwQyxHQUFHa0MsRUFBRUUsR0FBR3BDLEVBQU0sS0FBSm1DLEdBQVVkLEVBQUVhLElBQUksSUFBSUEsRUFBRSxHQUFHQyxFQUFFLEVBQUUsR0FBR0QsRUFBRWYsVUFBSyxHQUFRZ0IsSUFBSXJELEVBQUVQLEVBQUVaLE9BQU9zRSxFQUFFaEMsRUFBRWlDLEVBQUV6RSxPQUFPLEdBQUdtQyxHQUFHckIsRUFBRTBDLEVBQUU5QixjQUFjWixFQUFFYixVQUFnQkYsS0FDamUsSUFBSWdGLEVBQUUsbUJBQW1CM0UsT0FBTzRFLE9BQU81RSxPQUFPNEUsT0FBTyxTQUFTbEYsRUFBRUMsR0FBRyxJQUFJLElBQUlRLEVBQUUsRUFBRUEsRUFBRTBFLFVBQVVqRixPQUFPTyxJQUFJLENBQUMsSUFBSWMsRUFBRTRELFVBQVUxRSxHQUFHLEdBQUdjLEVBQUUsSUFBSSxJQUFJQyxLQUFLRCxFQUFFakIsT0FBT0ssVUFBVXlFLGVBQWVwRCxLQUFLVCxFQUFFQyxLQUFLeEIsRUFBRXdCLEdBQUdELEVBQUVDLElBQUksT0FBT3hCLEdBQUdxQixFQUFFLGlCQUFnQixTQUFTckIsR0FBRyxPQUFPQSxHQUFHaUYsS0FBSSxJQUFJSSxFQUFFakUsTUFBTUwsS0FBU3VFLEVBQUUsQ0FBQ0MsV0FBVyxPQUFPQyxNQUFNLElBQUlDLE9BQU8sS0FBSyxTQUFTQyxFQUFFMUYsRUFBRUMsR0FBR21CLEtBQUt1RSxNQUFNM0YsRUFBRW9CLEtBQUtjLEVBQUUsRUFBRWQsS0FBS0ksRUFBRWxCLE9BQU80RSxPQUFPNUUsT0FBTzRFLE9BQU8sR0FBR0ksR0FBR3JGLEdBRTFZLFNBQVMyRixFQUFFNUYsR0FBR2MsT0FBTytFLHVCQUFzQixZQUFxSCxTQUFXN0YsR0FBRyxJQUFJQyxFQUFFLEtBQUtELEVBQUUyRixNQUFNRyxRQUFROUYsRUFBRTJGLE1BQU1JLGNBQWMvRixFQUFFa0MsSUFBSWxDLEVBQUVrQyxFQUFFbEMsRUFBRTJGLE1BQU1JLFlBQVk5RixFQUFFRCxFQUFFd0IsRUFBRXdFLFdBQVcvRixFQUFFQSxFQUFFc0QsTUFBSyxXQUFXcUMsRUFBRTVGLE1BQUs0RixFQUFFNUYsR0FBclBpRyxDQUFFakcsTUFGcVYwRixFQUFFL0UsVUFBVXVGLEtBQUssV0FBVyxJQUFXakcsRUFBRVEsRUFBRWMsRUFBWHZCLEVBQUVvQixLQUFhLE9BQU9nQyxFQUFFLElBQUlILEVBQUUsSUFBSU4sR0FBRSxTQUFTRSxHQUFHLEdBQUc3QyxFQUFFZ0IsRUFBRSxDQUEwQixJQUF6QmYsRUFBRUQsRUFBRWdCLEVBQUVtRixZQUFZMUYsRUFBRXNCLEVBQUU5QixHQUFPc0IsRUFBRWQsRUFBRW1CLFFBQVFMLEVBQUVwQixLQUFLb0IsRUFBRWQsRUFBRW1CLE9BQVNMLEVBQUVuQixNQUFROEYsT0FBT2xHLEVBQUVnQixPQUFFLEVBQU82QixFQUFFVCxFQUFFLFFBQ2xrQnNELEVBQUUvRSxVQUFVeUYsTUFBTSxXQUFXLElBQVduRyxFQUFQRCxFQUFFb0IsS0FBTyxPQUFPZ0MsRUFBRSxJQUFJSCxFQUFFLElBQUlOLEdBQUUsU0FBU2xDLEdBQThILE9BQTNINEYsVUFBVUMsY0FBY0QsVUFBVUMsYUFBYUMsY0FBY0MsTUFBTSxrREFBa0R2RyxFQUFFRCxFQUFFd0IsRUFBU2YsRUFBRXVDLE9BQU9xRCxVQUFVQyxhQUFhQyxhQUFhLENBQUNaLE1BQU0sQ0FBQ0osV0FBV3RGLEVBQUVzRixXQUFXQyxNQUFNdkYsRUFBRXVGLE1BQU1DLE9BQU94RixFQUFFd0YsVUFBVWxDLE1BQUssU0FBU2hDLElBQzVRLFNBQVd2QixFQUFFQyxHQUFHRCxFQUFFZ0IsRUFBRWYsRUFBRUQsRUFBRTJGLE1BQU1jLFVBQVV4RyxFQUFFRCxFQUFFMkYsTUFBTWUsaUJBQWlCLFdBQVcxRyxFQUFFMkYsTUFBTWdCLE9BQU9mLEVBQUU1RixJQURnTDRHLENBQUU1RyxFQUFFdUIsTUFBS3VELE9BQU0sU0FBU3ZELEdBQUcsSUFBSUMsRUFBRSxrQ0FBa0NELEVBQTRCLE1BQTFCd0MsUUFBUUMsTUFBTXhDLEdBQUdnRixNQUFNaEYsR0FBU0QsWUFDbkksSUFDdFNzRixFQUQwU0MsRUFBRSxDQUFDLFVBQVVDLEVBQUUxQixFQUFFeUIsRUFBRSxLQUFLQyxRQUFHLElBQW9CQSxFQUFFQyxZQUFZRCxFQUFFQyxXQUFXLE9BQU9GLEVBQUUsSUFDclksS0FBVUEsRUFBRTVHLFNBQVMyRyxFQUFFQyxFQUFFRyxVQUFVSCxFQUFFNUcsYUFBUSxJQUFTd0YsRUFBbUNxQixFQUFqQ0EsRUFBRUYsSUFBSUUsRUFBRUYsS0FBS3ZHLE9BQU9LLFVBQVVrRyxHQUFLRSxFQUFFRixHQUFLRSxFQUFFRixHQUFHLEdBQUdFLEVBQUVGLEdBQUduQixJQUFLMUQsS0FBS1osNEJDdEJ6SCxXQUtBLGFBQWEsU0FBU0ksRUFBRXhCLEdBQUcsSUFBSThDLEVBQUUsRUFBRSxPQUFPLFdBQVcsT0FBT0EsRUFBRTlDLEVBQUVFLE9BQU8sQ0FBQ0MsTUFBSyxFQUFHQyxNQUFNSixFQUFFOEMsTUFBTSxDQUFDM0MsTUFBSyxJQUFLLElBQUkwQyxFQUFFLG1CQUFtQnZDLE9BQU9DLGlCQUFpQkQsT0FBT0UsZUFBZSxTQUFTUixFQUFFOEMsRUFBRTdDLEdBQUcsT0FBR0QsR0FBR1UsTUFBTUMsV0FBV1gsR0FBR00sT0FBT0ssWUFBbUJYLEVBQUU4QyxHQUFHN0MsRUFBRUcsT0FBVEosR0FDdUJELEVBQXpRLFNBQVdDLEdBQUdBLEVBQUUsQ0FBQyxpQkFBaUJhLFlBQVlBLFdBQVdiLEVBQUUsaUJBQWlCYyxRQUFRQSxPQUFPLGlCQUFpQkMsTUFBTUEsS0FBSyxpQkFBaUIsRUFBQUMsR0FBUSxFQUFBQSxHQUFRLElBQUksSUFBSThCLEVBQUUsRUFBRUEsRUFBRTlDLEVBQUVFLFNBQVM0QyxFQUFFLENBQUMsSUFBSTdDLEVBQUVELEVBQUU4QyxHQUFHLEdBQUc3QyxHQUFHQSxFQUFFZ0IsTUFBTUEsS0FBSyxPQUFPaEIsRUFBRSxNQUFNaUIsTUFBTSw2QkFBb0NtQixDQUFFakIsTUFBTSxTQUFTdUQsRUFBRTNFLEVBQUU4QyxHQUFHLEdBQUdBLEVBQUU5QyxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRUMsRUFBRUEsRUFBRXNCLE1BQU0sS0FBSyxJQUFJLElBQUlvQyxFQUFFLEVBQUVBLEVBQUUxRCxFQUFFRSxPQUFPLEVBQUV3RCxJQUFJLENBQUMsSUFBSWpELEVBQUVULEVBQUUwRCxHQUFHLEtBQUtqRCxLQUFLUixHQUFHLE1BQU1ELEVBQUVDLEVBQUVBLEVBQUVRLElBQTBCcUMsRUFBRUEsRUFBVFksRUFBRXpELEVBQWxCRCxFQUFFQSxFQUFFQSxFQUFFRSxPQUFPLE9BQW9Cd0QsR0FBRyxNQUFNWixHQUFHRCxFQUFFNUMsRUFBRUQsRUFBRSxDQUFDeUIsY0FBYSxFQUFHQyxVQUFTLEVBQUd0QixNQUFNMEMsS0FDN2QsU0FBU3pDLEVBQUVMLEdBQUcsSUFBSThDLEVBQUUsb0JBQW9CakIsUUFBUUEsT0FBT0MsVUFBVTlCLEVBQUU2QixPQUFPQyxVQUFVLE9BQU9nQixFQUFFQSxFQUFFZCxLQUFLaEMsR0FBRyxDQUFDNEIsS0FBS0osRUFBRXhCLElBQUksSUFBSTRFLEVBQUUsbUJBQW1CdEUsT0FBTzRFLE9BQU81RSxPQUFPNEUsT0FBTyxTQUFTbEYsRUFBRThDLEdBQUcsSUFBSSxJQUFJN0MsRUFBRSxFQUFFQSxFQUFFa0YsVUFBVWpGLE9BQU9ELElBQUksQ0FBQyxJQUFJeUQsRUFBRXlCLFVBQVVsRixHQUFHLEdBQUd5RCxFQUFFLElBQUksSUFBSWpELEtBQUtpRCxFQUFFcEQsT0FBT0ssVUFBVXlFLGVBQWVwRCxLQUFLMEIsRUFBRWpELEtBQUtULEVBQUVTLEdBQUdpRCxFQUFFakQsSUFBSSxPQUFPVCxHQUNwRyxTQUFTbUIsRUFBRW5CLEdBQUcsT0FBT0EsR0FBSVUsTUFBTUMsVUFBVXVHLEtBRDhEdkMsRUFBRSxpQkFBZ0IsU0FBUzNFLEdBQUcsT0FBT0EsR0FBRzRFLEtBQzFXRCxFQUFFLHdCQUF1QixTQUFTM0UsR0FBRyxPQUFPQSxHQUFJLFNBQVM4QyxFQUFFN0MsRUFBRXlELEdBQUcsSUFBSWpELEVBQUVXLEtBQUtsQixRQUFRLEVBQW9GLElBQWxGLEVBQUVELElBQUlBLEVBQUVnQixLQUFLa0csSUFBSSxFQUFFMUcsRUFBRVIsS0FBTyxNQUFNeUQsR0FBR0EsRUFBRWpELEtBQUVpRCxFQUFFakQsR0FBYyxHQUFaaUQsRUFBRTBELE9BQU8xRCxNQUFTQSxFQUFFekMsS0FBS2tHLElBQUksRUFBRTFHLEVBQUVpRCxJQUFRekQsRUFBRW1ILE9BQU9uSCxHQUFHLEdBQUdBLEVBQUV5RCxFQUFFekQsSUFBSW1CLEtBQUtuQixHQUFHNkMsRUFBRSxPQUFPMUIsU0FBc0R1RCxFQUFFLDJCQUEyQnhELEdBQUd3RCxFQUFFLDRCQUE0QnhELEdBQUd3RCxFQUFFLG1DQUFtQ3hELEdBQUd3RCxFQUFFLDRCQUE0QnhELEdBQUd3RCxFQUFFLDZCQUE2QnhELEdBQUd3RCxFQUFFLDRCQUE0QnhELEdBQ25kd0QsRUFBRSw2QkFBNkJ4RCxHQUFHd0QsRUFBRSw4QkFBOEJ4RCxHQUFHd0QsRUFBRSw4QkFBOEJ4RCxHQUFHLElBQUlQLEVBQUVRLE1BQU1MLEtBQUssU0FBU00sRUFBRXJCLEVBQUU4QyxHQUFHOUMsRUFBRUEsRUFBRXNCLE1BQU0sS0FBSyxJQUFzRm9DLEVBQWxGekQsRUFBRVcsRUFBRVosRUFBRSxLQUFLQyxRQUFHLElBQW9CQSxFQUFFK0csWUFBWS9HLEVBQUUrRyxXQUFXLE9BQU9oSCxFQUFFLElBQUksS0FBVUEsRUFBRUUsU0FBU3dELEVBQUUxRCxFQUFFaUgsVUFBVWpILEVBQUVFLGFBQVEsSUFBUzRDLEVBQW1DN0MsRUFBakNBLEVBQUV5RCxJQUFJekQsRUFBRXlELEtBQUtwRCxPQUFPSyxVQUFVK0MsR0FBS3pELEVBQUV5RCxHQUFLekQsRUFBRXlELEdBQUcsR0FBR3pELEVBQUV5RCxHQUFHWixFQUFHLElBQUluQixFQUFFLENBQUMwRixNQUFNLFFBQVFDLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxjQUFjLElBQUksU0FBU3pGLEVBQUUvQixHQUFXLE9BQVJBLEVBQUVBLEdBQUcsR0FBVU0sT0FBTzRFLE9BQU81RSxPQUFPNEUsT0FBTzVFLE9BQU80RSxPQUFPLEdBQUd2RCxHQUFHLENBQUM4RixVQUFVekgsRUFBRXFILFFBQVFySCxHQUFHLFNBQVNpQyxFQUFFakMsRUFBRThDLEdBQUcsT0FBTzlDLGFBQWEwSCxTQUFTMUgsRUFBRThDLEdBQUc5QyxFQUFFLFNBQVNzQyxFQUFFdEMsRUFBRThDLEVBQUU3QyxHQUFHLE9BQU9nQixLQUFLa0csSUFBSWxHLEtBQUswRyxJQUFJN0UsRUFBRTdDLEdBQUdnQixLQUFLMEcsSUFBSTFHLEtBQUtrRyxJQUFJckUsRUFBRTdDLEdBQUdELElBQUlxQixFQUFFLFFBQVFpQixHQUNsb0JqQixFQUFFLGlCQUFnQixTQUFTckIsRUFBRThDLEVBQUU3QyxHQUFHLEdBQUc2QyxFQUFFLENBQUM3QyxFQUFFOEIsRUFBRTlCLEdBQUdELEVBQUU0SCxPQUFpQyxJQUExQixJQUFJbEUsRUFBRTFELEVBQUU2SCxPQUFPcEgsRUFBRSxFQUFpQmMsR0FBZnVCLEVBQUV6QyxFQUFFeUMsSUFBZWxCLFFBQVFMLEVBQUVwQixLQUFLb0IsRUFBRXVCLEVBQUVsQixPQUFPLFFBQWEsS0FBVkwsRUFBRUEsRUFBRW5CLGNBQW1CLElBQVNtQixFQUFFdUcsWUFBWXZHLEVBQUV1RyxXQUFXN0gsRUFBRXVILGVBQWUsQ0FBQ3hILEVBQUUrSCxVQUFVOUYsRUFBRWhDLEVBQUV3SCxVQUFVLENBQUNPLE1BQU12SCxFQUFFd0gsS0FBSzFHLElBQUl2QixFQUFFa0ksWUFBWWpHLEVBQUVoQyxFQUFFb0gsTUFBTSxDQUFDVyxNQUFNdkgsRUFBRXdILEtBQUsxRyxJQUFJdkIsRUFBRXNILFVBQVVyRixFQUFFaEMsRUFBRXFILFVBQVUsQ0FBQ1UsTUFBTXZILEVBQUV3SCxLQUFLMUcsSUFBSSxJQUFJUCxFQUFFLElBQUltSCxPQUFPbkgsRUFBRW9ILElBQUk3RyxFQUFFUSxFQUFFMkIsRUFBRThCLE1BQU1qRSxFQUFFVSxFQUFFeUIsRUFBRStCLE9BQU94RCxFQUFFaEMsRUFBRXNILE9BQU8sQ0FBQ1MsTUFBTXZILEVBQUV3SCxLQUFLMUcsSUFBSSxFQUFFLEVBQUVOLEtBQUtvSCxJQUFJckksRUFBRWtILEtBQUtsRyxHQUFHaEIsRUFBRXNJLE9BQU90SCxLQUFLUCxFQUFFVCxFQUFFdUksY0FDaGNsSCxFQUFFLGtCQUFpQixTQUFTckIsRUFBRThDLEVBQUU3QyxFQUFFeUQsR0FBRyxHQUFHWixHQUFHN0MsRUFBRSxDQUFDeUQsRUFBRTNCLEVBQUUyQixHQUFHMUQsRUFBRTRILE9BQWlDLElBQTFCLElBQUluSCxFQUFFVCxFQUFFNkgsT0FBT3RHLEVBQUUsRUFBaUJQLEdBQWZmLEVBQUVJLEVBQUVKLElBQWUyQixRQUFRWixFQUFFYixLQUFLYSxFQUFFZixFQUFFMkIsT0FBTyxDQUFDLElBQUlrQyxFQUFFOUMsRUFBRVosTUFBTUosRUFBRXdJLFlBQVl4SCxFQUFFOEIsRUFBRWdCLEVBQUUsSUFBSUEsRUFBRWhCLEVBQUVnQixFQUFFLElBQUk5QyxHQUFHOEMsU0FBSSxJQUFTOUMsRUFBRThHLFlBQVk5RyxFQUFFOEcsV0FBV3BFLEVBQUU4RCxzQkFBaUIsSUFBUzFELEVBQUVnRSxZQUFZaEUsRUFBRWdFLFdBQVdwRSxFQUFFOEQsaUJBQWlCeEgsRUFBRWtJLFlBQVlqRyxFQUFFeUIsRUFBRTJELE1BQU0sQ0FBQ1csTUFBTXpHLEVBQUUwRyxLQUFLakgsRUFBRXlILEdBQUczRSxJQUFJOUQsRUFBRXNILFVBQVVyRixFQUFFeUIsRUFBRTRELFVBQVUsQ0FBQ1UsTUFBTXpHLEVBQUUwRyxLQUFLakgsRUFBRXlILEdBQUczRSxJQUFJOUQsRUFBRTBJLE9BQU8xSCxFQUFFZSxFQUFFdEIsRUFBRStFLE1BQU14RSxFQUFFaUIsRUFBRXhCLEVBQUVnRixRQUFRekYsRUFBRTJJLE9BQU83RSxFQUFFL0IsRUFBRXRCLEVBQUUrRSxNQUFNMUIsRUFBRTdCLEVBQUV4QixFQUFFZ0YsV0FBV2xFLEVBQUV2QixFQUFFc0ksU0FBU3RJLEVBQUV1SSxjQUM1ZGxILEVBQUUsaUJBQWdCLFNBQVNyQixFQUFFOEMsRUFBRTdDLEdBQUdBLEVBQUU4QixFQUFFOUIsR0FBR0QsRUFBRTRILE9BQU8sSUFBSWxFLEVBQUUxRCxFQUFFNkgsT0FBTzdILEVBQUV3SSxZQUFZeEksRUFBRXNILFVBQVVyRixFQUFFaEMsRUFBRXFILFVBQVUsSUFBSXRILEVBQUVrSSxZQUFZakcsRUFBRWhDLEVBQUVvSCxNQUFNLElBQUlySCxFQUFFK0gsVUFBVTlGLEVBQUVoQyxFQUFFd0gsVUFBVSxJQUFJekgsRUFBRTRJLFVBQVU5RixFQUFFK0YsUUFBUW5GLEVBQUU4QixNQUFNMUMsRUFBRWdHLFFBQVFwRixFQUFFK0IsUUFBUXpGLEVBQUUrSSxPQUFPakcsRUFBRWtHLFNBQVMvSCxLQUFLb0gsR0FBRyxLQUFLckksRUFBRWlKLE1BQU1uRyxFQUFFMEMsTUFBTSxFQUFFOUIsRUFBRThCLE9BQU8xQyxFQUFFMkMsT0FBTyxFQUFFL0IsRUFBRStCLE9BQU8zQyxFQUFFMEMsTUFBTTlCLEVBQUU4QixNQUFNMUMsRUFBRTJDLE9BQU8vQixFQUFFK0IsUUFBUXpGLEVBQUU0SSxXQUFXOUYsRUFBRStGLFFBQVFuRixFQUFFOEIsT0FBTzFDLEVBQUVnRyxRQUFRcEYsRUFBRStCLFFBQVF6RixFQUFFc0ksU0FBU3RJLEVBQUVrSCxPQUFPbEgsRUFBRXVJLGFBQVlsSCxFQUFFLFFBQU8sU0FBU3JCLEVBQUU4QyxFQUFFN0MsRUFBRXlELEVBQUVqRCxHQUFHLE9BQU82QixFQUFFb0IsR0FBRyxHQUFHMUQsRUFBRThDLElBQUk3QyxFQUFFNkMsSUFBSXJDLEdBQUcsR0FBR1IsRUFBRUQsSUFBSUMsRUFBRTZDLElBQUlZLEVBQUVqRCxRQUFRdUIsS0FBS1osNEJDWjNmLFdBS0EsYUFBYSxJQUFJVyxFQUFFLFNBQVNtSCxFQUFHbEosR0FBRyxJQUFJQyxFQUFFLEVBQUUsT0FBTyxXQUFXLE9BQU9BLEVBQUVELEVBQUVFLE9BQU8sQ0FBQ0MsTUFBSyxFQUFHQyxNQUFNSixFQUFFQyxNQUFNLENBQUNFLE1BQUssSUFBSyxJQUFJZ0osRUFBRyxtQkFBbUI3SSxPQUFPQyxpQkFBaUJELE9BQU9FLGVBQWUsU0FBU1IsRUFBRUMsRUFBRTZDLEdBQUcsT0FBRzlDLEdBQUdVLE1BQU1DLFdBQVdYLEdBQUdNLE9BQU9LLFlBQW1CWCxFQUFFQyxHQUFHNkMsRUFBRTFDLE9BQVRKLEdBQ2dCaUMsRUFBMVEsU0FBWWpDLEdBQUdBLEVBQUUsQ0FBQyxpQkFBaUJhLFlBQVlBLFdBQVdiLEVBQUUsaUJBQWlCYyxRQUFRQSxPQUFPLGlCQUFpQkMsTUFBTUEsS0FBSyxpQkFBaUIsRUFBQUMsR0FBUSxFQUFBQSxHQUFRLElBQUksSUFBSWYsRUFBRSxFQUFFQSxFQUFFRCxFQUFFRSxTQUFTRCxFQUFFLENBQUMsSUFBSTZDLEVBQUU5QyxFQUFFQyxHQUFHLEdBQUc2QyxHQUFHQSxFQUFFN0IsTUFBTUEsS0FBSyxPQUFPNkIsRUFBRSxNQUFNNUIsTUFBTSw2QkFBb0NrSSxDQUFHaEksTUFBTSxTQUFTdUIsRUFBRTNDLEVBQUVDLEdBQUcsR0FBR0EsRUFBRUQsRUFBRSxDQUFDLElBQUk4QyxFQUFFYixFQUFFakMsRUFBRUEsRUFBRXNCLE1BQU0sS0FBSyxJQUFJLElBQUlvQyxFQUFFLEVBQUVBLEVBQUUxRCxFQUFFRSxPQUFPLEVBQUV3RCxJQUFJLENBQUMsSUFBSWpELEVBQUVULEVBQUUwRCxHQUFHLEtBQUtqRCxLQUFLcUMsR0FBRyxNQUFNOUMsRUFBRThDLEVBQUVBLEVBQUVyQyxJQUEwQlIsRUFBRUEsRUFBVHlELEVBQUVaLEVBQWxCOUMsRUFBRUEsRUFBRUEsRUFBRUUsT0FBTyxPQUFvQndELEdBQUcsTUFBTXpELEdBQUdrSixFQUFHckcsRUFBRTlDLEVBQUUsQ0FBQ3lCLGNBQWEsRUFBR0MsVUFBUyxFQUFHdEIsTUFBTUgsS0FFN0UsU0FBU29KLEVBQUdySixHQUF5RCxPQUF0REEsRUFBRSxDQUFDNEIsS0FBSzVCLElBQUs2QixPQUFPQyxVQUFVLFdBQVcsT0FBT1YsTUFBYXBCLEVBQy9kLFNBQVNtRCxFQUFFbkQsR0FBRyxJQUFJQyxFQUFFLG9CQUFvQjRCLFFBQVFBLE9BQU9DLFVBQVU5QixFQUFFNkIsT0FBT0MsVUFBVSxPQUFPN0IsRUFBRUEsRUFBRStCLEtBQUtoQyxHQUFHLENBQUM0QixLQUFLc0gsRUFBR2xKLElBQUksU0FBU3NKLEVBQUd0SixHQUFHLEtBQUtBLGFBQWFVLE9BQU8sQ0FBQ1YsRUFBRW1ELEVBQUVuRCxHQUFHLElBQUksSUFBSUMsRUFBRTZDLEVBQUUsS0FBSzdDLEVBQUVELEVBQUU0QixRQUFRekIsTUFBTTJDLEVBQUVjLEtBQUszRCxFQUFFRyxPQUFPSixFQUFFOEMsRUFBRSxPQUFPOUMsRUFGbE8yQyxFQUFFLFVBQVMsU0FBUzNDLEdBQTJILFNBQVM4QyxFQUFFOUIsRUFBRU8sR0FBR0gsS0FBS0osRUFBRUEsRUFBRW1JLEVBQUcvSCxLQUFLLGNBQWMsQ0FBQ0ssY0FBYSxFQUFHQyxVQUFTLEVBQUd0QixNQUFNbUIsSUFBSSxHQUFHdkIsRUFBRSxPQUFPQSxFQUFFOEMsRUFBRW5DLFVBQVU2QyxTQUFTLFdBQVcsT0FBT3BDLEtBQUtKLEdBQUcsSUFBSTBDLEVBQUUsa0JBQWtCLElBQUl6QyxLQUFLd0MsV0FBVyxHQUFHLElBQUloRCxFQUFFLEVBQUUsT0FBbFUsU0FBU1IsRUFBRWUsR0FBRyxHQUFHSSxnQkFBZ0JuQixFQUFFLE1BQU0sSUFBSXNDLFVBQVUsK0JBQStCLE9BQU8sSUFBSU8sRUFBRVksR0FBRzFDLEdBQUcsSUFBSSxJQUFJUCxJQUFJTyxPQUM1STJCLEVBQUUsbUJBQWtCLFNBQVMzQyxHQUFHLEdBQUdBLEVBQUUsT0FBT0EsRUFBRUEsRUFBRTZCLE9BQU8sbUJBQW1CLElBQUksSUFBSTVCLEVBQUUsdUhBQXVIcUIsTUFBTSxLQUFLd0IsRUFBRSxFQUFFQSxFQUFFN0MsRUFBRUMsT0FBTzRDLElBQUksQ0FBQyxJQUFJWSxFQUFFekIsRUFBRWhDLEVBQUU2QyxJQUFJLG1CQUFvQlksR0FBRyxtQkFBbUJBLEVBQUUvQyxVQUFVWCxJQUFJbUosRUFBR3pGLEVBQUUvQyxVQUFVWCxFQUFFLENBQUN5QixjQUFhLEVBQUdDLFVBQVMsRUFBR3RCLE1BQU0sV0FBVyxPQUFPaUosRUFBR0gsRUFBRzlILFVBQVUsT0FBT3BCLEtBQzNLLElBQTRHdUosRUFBeEdDLEVBQUcsbUJBQW1CbEosT0FBT21KLE9BQU9uSixPQUFPbUosT0FBTyxTQUFTekosR0FBRyxTQUFTQyxLQUFtQixPQUFkQSxFQUFFVSxVQUFVWCxFQUFTLElBQUlDLEdBQzdVLEdBQUcsbUJBQW1CSyxPQUFPb0osZUFBZUgsRUFBR2pKLE9BQU9vSixtQkFBbUIsQ0FBQyxJQUFJQyxFQUFHM0osRUFBRSxDQUFDLElBQWM0SixFQUFHLEdBQUcsSUFBSUEsRUFBR0MsVUFBcEIsQ0FBQzdKLEdBQUUsR0FBOEIySixFQUFHQyxFQUFHNUosRUFBRSxNQUFNQSxFQUFFLE1BQU1BLElBQUkySixHQUFHLEVBQUdKLEVBQUdJLEVBQUcsU0FBUzNKLEVBQUVDLEdBQWlCLEdBQWRELEVBQUU2SixVQUFVNUosRUFBS0QsRUFBRTZKLFlBQVk1SixFQUFFLE1BQU0sSUFBSXNDLFVBQVV2QyxFQUFFLHNCQUFzQixPQUFPQSxHQUFHLEtBQUssSUFBSThKLEVBQUdQLEVBQ25SLFNBQVMxRSxFQUFFN0UsRUFBRUMsR0FBeUQsR0FBdERELEVBQUVXLFVBQVU2SSxFQUFHdkosRUFBRVUsV0FBV1gsRUFBRVcsVUFBVW9KLFlBQVkvSixFQUFLOEosRUFBR0EsRUFBRzlKLEVBQUVDLFFBQVEsSUFBSSxJQUFJNkMsS0FBSzdDLEVBQUUsR0FBRyxhQUFhNkMsRUFBRSxHQUFHeEMsT0FBT0MsaUJBQWlCLENBQUMsSUFBSW1ELEVBQUVwRCxPQUFPMEoseUJBQXlCL0osRUFBRTZDLEdBQUdZLEdBQUdwRCxPQUFPRSxlQUFlUixFQUFFOEMsRUFBRVksUUFBUTFELEVBQUU4QyxHQUFHN0MsRUFBRTZDLEdBQUc5QyxFQUFFc0osR0FBR3JKLEVBQUVVLFVBQVUsU0FBU3NKLElBQUs3SSxLQUFLeUIsR0FBRSxFQUFHekIsS0FBS2MsRUFBRSxLQUFLZCxLQUFLSSxPQUFFLEVBQU9KLEtBQUtKLEVBQUUsRUFBRUksS0FBS3NELEVBQUV0RCxLQUFLaUIsRUFBRSxFQUFFakIsS0FBS2dCLEVBQUUsS0FBSyxTQUFTOEgsRUFBR2xLLEdBQUcsR0FBR0EsRUFBRTZDLEVBQUUsTUFBTSxJQUFJTixVQUFVLGdDQUFnQ3ZDLEVBQUU2QyxHQUFFLEVBQ3RhLFNBQVNzSCxFQUFHbkssRUFBRUMsR0FBR0QsRUFBRW9DLEVBQUUsQ0FBQ2dJLEVBQUVuSyxFQUFFb0ssR0FBRSxHQUFJckssRUFBRWdCLEVBQUVoQixFQUFFcUMsR0FBR3JDLEVBQUUwRSxFQUFtRSxTQUFTakMsRUFBRXpDLEVBQUVDLEVBQUU2QyxHQUFTLE9BQU45QyxFQUFFZ0IsRUFBRThCLEVBQVEsQ0FBQzFDLE1BQU1ILEdBQUcsU0FBU3FLLEVBQUd0SyxHQUFHb0IsS0FBS0osRUFBRSxJQUFJaUosRUFBRzdJLEtBQUtJLEVBQUV4QixFQUMxTCxTQUFTdUssRUFBR3ZLLEVBQUVDLEVBQUU2QyxFQUFFWSxHQUFHLElBQUksSUFBSWpELEVBQUVSLEVBQUUrQixLQUFLaEMsRUFBRWdCLEVBQUVrQixFQUFFWSxHQUFHLEtBQUtyQyxhQUFhSCxRQUFRLE1BQU0sSUFBSWlDLFVBQVUsbUJBQW1COUIsRUFBRSxxQkFBcUIsSUFBSUEsRUFBRU4sS0FBSyxPQUFPSCxFQUFFZ0IsRUFBRTZCLEdBQUUsRUFBR3BDLEVBQUUsSUFBSU8sRUFBRVAsRUFBRUwsTUFBTSxNQUFNbUIsR0FBRyxPQUFPdkIsRUFBRWdCLEVBQUVrQixFQUFFLEtBQUtpSSxFQUFHbkssRUFBRWdCLEVBQUVPLEdBQUdtQixFQUFFMUMsR0FBNEIsT0FBekJBLEVBQUVnQixFQUFFa0IsRUFBRSxLQUFLd0IsRUFBRTFCLEtBQUtoQyxFQUFFZ0IsRUFBRUEsR0FBVTBCLEVBQUUxQyxHQUFHLFNBQVMwQyxFQUFFMUMsR0FBRyxLQUFLQSxFQUFFZ0IsRUFBRUEsR0FBRyxJQUFJLElBQUlmLEVBQUVELEVBQUV3QixFQUFFeEIsRUFBRWdCLEdBQUcsR0FBR2YsRUFBRSxPQUFPRCxFQUFFZ0IsRUFBRTZCLEdBQUUsRUFBRyxDQUFDekMsTUFBTUgsRUFBRUcsTUFBTUQsTUFBSyxHQUFJLE1BQU0yQyxHQUFHOUMsRUFBRWdCLEVBQUVRLE9BQUUsRUFBTzJJLEVBQUduSyxFQUFFZ0IsRUFBRThCLEdBQVksR0FBVDlDLEVBQUVnQixFQUFFNkIsR0FBRSxFQUFNN0MsRUFBRWdCLEVBQUVvQixFQUFFLENBQW9CLEdBQW5CbkMsRUFBRUQsRUFBRWdCLEVBQUVvQixFQUFFcEMsRUFBRWdCLEVBQUVvQixFQUFFLEtBQVFuQyxFQUFFb0ssRUFBRSxNQUFNcEssRUFBRW1LLEVBQUUsTUFBTSxDQUFDaEssTUFBTUgsRUFBRStDLE9BQU83QyxNQUFLLEdBQUksTUFBTSxDQUFDQyxXQUFNLEVBQU9ELE1BQUssR0FDMWUsU0FBU3FLLEVBQUd4SyxHQUFHb0IsS0FBS1EsS0FBSyxTQUFTM0IsR0FBOEQsT0FBM0RpSyxFQUFHbEssRUFBRWdCLEdBQUdoQixFQUFFZ0IsRUFBRWtCLEVBQUVqQyxFQUFFc0ssRUFBR3ZLLEVBQUVBLEVBQUVnQixFQUFFa0IsRUFBRU4sS0FBSzNCLEVBQUVELEVBQUVnQixFQUFFbUIsSUFBSW5DLEVBQUVnQixFQUFFbUIsRUFBRWxDLEdBQUdBLEVBQUV5QyxFQUFFMUMsSUFBV0MsR0FBR21CLEtBQUs4QixNQUFNLFNBQVNqRCxHQUFtRSxPQUFoRWlLLEVBQUdsSyxFQUFFZ0IsR0FBR2hCLEVBQUVnQixFQUFFa0IsRUFBRWpDLEVBQUVzSyxFQUFHdkssRUFBRUEsRUFBRWdCLEVBQUVrQixFQUFTLE1BQUVqQyxFQUFFRCxFQUFFZ0IsRUFBRW1CLElBQUlnSSxFQUFHbkssRUFBRWdCLEVBQUVmLEdBQUdBLEVBQUV5QyxFQUFFMUMsSUFBV0MsR0FBR21CLEtBQUs0QixPQUFPLFNBQVMvQyxHQUFHLE9BRnZDLFNBQVlELEVBQUVDLEdBQUdpSyxFQUFHbEssRUFBRWdCLEdBQUcsSUFBSThCLEVBQUU5QyxFQUFFZ0IsRUFBRWtCLEVBQUUsT0FBR1ksRUFBU3lILEVBQUd2SyxFQUFFLFdBQVc4QyxFQUFFQSxFQUFVLE9BQUUsU0FBU1ksR0FBRyxNQUFNLENBQUN0RCxNQUFNc0QsRUFBRXZELE1BQUssSUFBS0YsRUFBRUQsRUFBRWdCLEVBQUVnQyxTQUFRaEQsRUFBRWdCLEVBQUVnQyxPQUFPL0MsR0FBVXlDLEVBQUUxQyxJQUUzR3lLLENBQUd6SyxFQUFFQyxJQUFJbUIsS0FBS1MsT0FBT0MsVUFBVSxXQUFXLE9BQU9WLE1BQzNSLFNBQVMyQixFQUFFL0MsR0FBRyxPQURtUixTQUFZQSxHQUFHLFNBQVNDLEVBQUV5RCxHQUFHLE9BQU8xRCxFQUFFNEIsS0FBSzhCLEdBQUcsU0FBU1osRUFBRVksR0FBRyxPQUFPMUQsRUFBRWtELE1BQU1RLEdBQUcsT0FBTyxJQUFJTCxTQUFRLFNBQVNLLEVBQUVqRCxJQUFHLFNBQVNPLEVBQUVPLEdBQUdBLEVBQUVwQixLQUFLdUQsRUFBRW5DLEVBQUVuQixPQUFPaUQsUUFBUUMsUUFBUS9CLEVBQUVuQixPQUFPbUQsS0FBS3RELEVBQUU2QyxHQUFHUyxLQUFLdkMsRUFBRVAsR0FBR08sQ0FBRWhCLEVBQUU0QixXQUM1YzhJLENBQUcsSUFBSUYsRUFBRyxJQUFJRixFQUFHdEssS0FKbVlpSyxFQUFHdEosVUFBVXdCLEVBQUUsU0FBU25DLEdBQUdvQixLQUFLSSxFQUFFeEIsR0FDOVppSyxFQUFHdEosVUFBVXFDLE9BQU8sU0FBU2hELEdBQUdvQixLQUFLZ0IsRUFBRSxDQUFDWSxPQUFPaEQsR0FBR29CLEtBQUtKLEVBQUVJLEtBQUtzRCxHQUkzRy9CLEVBQUUsV0FBVSxTQUFTM0MsR0FBRyxTQUFTQyxFQUFFc0IsR0FBR0gsS0FBS0ksRUFBRSxFQUFFSixLQUFLYyxPQUFFLEVBQU9kLEtBQUtKLEVBQUUsR0FBR0ksS0FBS2UsR0FBRSxFQUFHLElBQUkyQixFQUFFMUMsS0FBS2dCLElBQUksSUFBSWIsRUFBRXVDLEVBQUVSLFFBQVFRLEVBQUVILFFBQVEsTUFBTW5DLEdBQUdzQyxFQUFFSCxPQUFPbkMsSUFBSSxTQUFTc0IsSUFBSTFCLEtBQUtKLEVBQUUsS0FBSyxTQUFTMEMsRUFBRW5DLEdBQUcsT0FBT0EsYUFBYXRCLEVBQUVzQixFQUFFLElBQUl0QixHQUFFLFNBQVM2RCxHQUFHQSxFQUFFdkMsTUFBSyxHQUFHdkIsRUFBRSxPQUFPQSxFQUFFOEMsRUFBRW5DLFVBQVVhLEVBQUUsU0FBU0QsR0FBRyxHQUFHLE1BQU1ILEtBQUtKLEVBQUUsQ0FBQ0ksS0FBS0osRUFBRSxHQUFHLElBQUk4QyxFQUFFMUMsS0FBS0EsS0FBS2MsR0FBRSxXQUFXNEIsRUFBRWpCLE9BQU16QixLQUFLSixFQUFFNEMsS0FBS3JDLElBQUksSUFBSWQsRUFBRXdCLEVBQUU0QixXQUFXZixFQUFFbkMsVUFBVXVCLEVBQUUsU0FBU1gsR0FBR2QsRUFBRWMsRUFBRSxJQUFJdUIsRUFBRW5DLFVBQVVrQyxFQUFFLFdBQVcsS0FBS3pCLEtBQUtKLEdBQUdJLEtBQUtKLEVBQUVkLFFBQVEsQ0FBQyxJQUFJcUIsRUFBRUgsS0FBS0osRUFBRUksS0FBS0osRUFBRSxHQUFHLElBQUksSUFBSThDLEVBQUUsRUFBRUEsRUFBRXZDLEVBQUVyQixTQUFTNEQsRUFBRSxDQUFDLElBQUl0QyxFQUNsZ0JELEVBQUV1QyxHQUFHdkMsRUFBRXVDLEdBQUcsS0FBSyxJQUFJdEMsSUFBSSxNQUFNcUIsR0FBR3pCLEtBQUtnQixFQUFFUyxLQUFLekIsS0FBS0osRUFBRSxNQUFNOEIsRUFBRW5DLFVBQVV5QixFQUFFLFNBQVNiLEdBQUdILEtBQUtjLEdBQUUsV0FBVyxNQUFNWCxNQUFNdEIsRUFBRVUsVUFBVXlCLEVBQUUsV0FBVyxTQUFTYixFQUFFc0IsR0FBRyxPQUFPLFNBQVM5QyxHQUFHeUIsSUFBSUEsR0FBRSxFQUFHcUIsRUFBRWIsS0FBSzhCLEVBQUUvRCxLQUFLLElBQUkrRCxFQUFFMUMsS0FBS0ksR0FBRSxFQUFHLE1BQU0sQ0FBQzhCLFFBQVEvQixFQUFFSCxLQUFLK0IsR0FBR1EsT0FBT3BDLEVBQUVILEtBQUt5QixLQUFLNUMsRUFBRVUsVUFBVXdDLEVBQUUsU0FBUzVCLEdBQUcsR0FBR0EsSUFBSUgsS0FBS0EsS0FBS3lCLEVBQUUsSUFBSU4sVUFBVSw0Q0FBNEMsR0FBR2hCLGFBQWF0QixFQUFFbUIsS0FBS3FCLEVBQUVsQixPQUFPLENBQUN2QixFQUFFLGNBQWN1QixHQUFHLElBQUssU0FBUyxJQUFJdUMsRUFBRSxNQUFNdkMsRUFBRSxNQUFNdkIsRUFBRSxJQUFLLFdBQVc4RCxHQUFFLEVBQUcsTUFBTTlELEVBQUUsUUFBUThELEdBQUUsRUFBR0EsRUFBRTFDLEtBQUtDLEVBQUVFLEdBQUdILEtBQUtpQixFQUFFZCxLQUMxZnRCLEVBQUVVLFVBQVVVLEVBQUUsU0FBU0UsR0FBRyxJQUFJdUMsT0FBRSxFQUFPLElBQUlBLEVBQUV2QyxFQUFFZ0MsS0FBSyxNQUFNL0IsR0FBYSxZQUFWSixLQUFLeUIsRUFBRXJCLEdBQVUsbUJBQW1Cc0MsRUFBRTFDLEtBQUtzQixFQUFFb0IsRUFBRXZDLEdBQUdILEtBQUtpQixFQUFFZCxJQUFJdEIsRUFBRVUsVUFBVWtDLEVBQUUsU0FBU3RCLEdBQUdILEtBQUtzRCxFQUFFLEVBQUVuRCxJQUFJdEIsRUFBRVUsVUFBVTBCLEVBQUUsU0FBU2QsR0FBR0gsS0FBS3NELEVBQUUsRUFBRW5ELElBQUl0QixFQUFFVSxVQUFVK0QsRUFBRSxTQUFTbkQsRUFBRXVDLEdBQUcsR0FBRyxHQUFHMUMsS0FBS0ksRUFBRSxNQUFNTixNQUFNLGlCQUFpQkssRUFBRSxLQUFLdUMsRUFBRSxzQ0FBc0MxQyxLQUFLSSxHQUFHSixLQUFLSSxFQUFFRCxFQUFFSCxLQUFLYyxFQUFFNEIsRUFBRSxJQUFJMUMsS0FBS0ksR0FBR0osS0FBS3dCLElBQUl4QixLQUFLb0IsS0FBS3ZDLEVBQUVVLFVBQVVpQyxFQUFFLFdBQVcsSUFBSXJCLEVBQUVILEtBQUtYLEdBQUUsV0FBVyxHQUFHYyxFQUFFb0IsSUFBSSxDQUFDLElBQUltQixFQUFFN0IsRUFBRThCLGFBQVEsSUFBcUJELEdBQUdBLEVBQUVFLE1BQU16QyxFQUFFVyxNQUFLLElBQUlqQyxFQUFFVSxVQUFVZ0MsRUFDeGYsV0FBVyxHQUFHdkIsS0FBS2UsRUFBRSxPQUFNLEVBQUcsSUFBSVosRUFBRVUsRUFBRWdDLFlBQVlILEVBQUU3QixFQUFFaUMsTUFBTTFDLEVBQUVTLEVBQUVrQyxjQUFjLFlBQUcsSUFBcUIzQyxJQUFXLG1CQUFvQkQsRUFBRUEsRUFBRSxJQUFJQSxFQUFFLHFCQUFxQixDQUFDNkMsWUFBVyxJQUFLLG1CQUFvQk4sRUFBRXZDLEVBQUUsSUFBSXVDLEVBQUUscUJBQXFCLENBQUNNLFlBQVcsS0FBTTdDLEVBQUVVLEVBQUVvQyxTQUFTQyxZQUFZLGdCQUFpQkMsZ0JBQWdCLHNCQUFxQixHQUFHLEVBQUdoRCxHQUFJQSxFQUFFaUQsUUFBUXBELEtBQUtHLEVBQUVrRCxPQUFPckQsS0FBS2MsRUFBU1YsRUFBRUQsS0FBSXRCLEVBQUVVLFVBQVU2QixFQUFFLFdBQVcsR0FBRyxNQUFNcEIsS0FBS0osRUFBRSxDQUFDLElBQUksSUFBSU8sRUFBRSxFQUFFQSxFQUFFSCxLQUFLSixFQUFFZCxTQUFTcUIsRUFBRVAsRUFBRVEsRUFBRUosS0FBS0osRUFBRU8sSUFBSUgsS0FBS0osRUFBRSxPQUFPLElBQUlBLEVBQUUsSUFBSThCLEVBRXRCLE9BRndCN0MsRUFBRVUsVUFBVThCLEVBQzlmLFNBQVNsQixHQUFHLElBQUl1QyxFQUFFMUMsS0FBS2dCLElBQUliLEVBQUU2QixFQUFFVSxFQUFFUixRQUFRUSxFQUFFSCxTQUFTMUQsRUFBRVUsVUFBVStCLEVBQUUsU0FBU25CLEVBQUV1QyxHQUFHLElBQUl0QyxFQUFFSixLQUFLZ0IsSUFBSSxJQUFJYixFQUFFUyxLQUFLOEIsRUFBRXRDLEVBQUU4QixRQUFROUIsRUFBRW1DLFFBQVEsTUFBTWQsR0FBR3JCLEVBQUVtQyxPQUFPZCxLQUFLNUMsRUFBRVUsVUFBVTRDLEtBQUssU0FBU2hDLEVBQUV1QyxHQUFHLFNBQVN0QyxFQUFFbUQsRUFBRXRDLEdBQUcsTUFBTSxtQkFBbUJzQyxFQUFFLFNBQVN0RSxHQUFHLElBQUl3QyxFQUFFOEIsRUFBRXRFLElBQUksTUFBTWMsR0FBR3BCLEVBQUVvQixLQUFLa0IsRUFBRSxJQUFJUSxFQUFFOUMsRUFBRTZFLEVBQUUsSUFBSTNFLEdBQUUsU0FBUzBFLEVBQUV0QyxHQUFHUSxFQUFFOEIsRUFBRTVFLEVBQUVzQyxLQUEwQixPQUF0QmpCLEtBQUtnQyxFQUFFNUIsRUFBRUQsRUFBRXNCLEdBQUdyQixFQUFFc0MsRUFBRS9ELElBQVc2RSxHQUFHM0UsRUFBRVUsVUFBVW1FLE1BQU0sU0FBU3ZELEdBQUcsT0FBT0gsS0FBS21DLFVBQUssRUFBT2hDLElBQUl0QixFQUFFVSxVQUFVeUMsRUFBRSxTQUFTN0IsRUFBRXVDLEdBQUcsU0FBU3RDLElBQUksT0FBT3FCLEVBQUVyQixHQUFHLEtBQUssRUFBRUQsRUFBRXNCLEVBQUVYLEdBQUcsTUFBTSxLQUFLLEVBQUU0QixFQUFFakIsRUFBRVgsR0FBRyxNQUFNLFFBQVEsTUFBTWhCLE1BQU0scUJBQzlmMkIsRUFBRXJCLElBQUssSUFBSXFCLEVBQUV6QixLQUFLLE1BQU1BLEtBQUtKLEVBQUVBLEVBQUVRLEVBQUVBLEdBQUdKLEtBQUtKLEVBQUU0QyxLQUFLcEMsR0FBR0osS0FBS2UsR0FBRSxHQUFJbEMsRUFBRXFELFFBQVFJLEVBQUV6RCxFQUFFMEQsT0FBTyxTQUFTcEMsR0FBRyxPQUFPLElBQUl0QixHQUFFLFNBQVM2RCxFQUFFdEMsR0FBR0EsRUFBRUQsT0FBTXRCLEVBQUU4RSxLQUFLLFNBQVN4RCxHQUFHLE9BQU8sSUFBSXRCLEdBQUUsU0FBUzZELEVBQUV0QyxHQUFHLElBQUksSUFBSXFCLEVBQUVNLEVBQUU1QixHQUFHeEIsRUFBRThDLEVBQUVqQixRQUFRN0IsRUFBRUksS0FBS0osRUFBRThDLEVBQUVqQixPQUFPOEIsRUFBRTNELEVBQUVLLE9BQU9nRCxFQUFFVSxFQUFFdEMsT0FBTXZCLEVBQUUrRSxJQUFJLFNBQVN6RCxHQUFHLElBQUl1QyxFQUFFWCxFQUFFNUIsR0FBR0MsRUFBRXNDLEVBQUVsQyxPQUFPLE9BQU9KLEVBQUVyQixLQUFLdUQsRUFBRSxJQUFJLElBQUl6RCxHQUFFLFNBQVM0QyxFQUFFOUMsR0FBRyxTQUFTNkUsRUFBRXZFLEdBQUcsT0FBTyxTQUFTYyxHQUFHd0QsRUFBRXRFLEdBQUdjLEVBQU0sS0FBSmtCLEdBQVVRLEVBQUU4QixJQUFJLElBQUlBLEVBQUUsR0FBR3RDLEVBQUUsRUFBRSxHQUFHc0MsRUFBRWYsVUFBSyxHQUFRdkIsSUFBSXFCLEVBQUVsQyxFQUFFcEIsT0FBT2dELEVBQUV3QixFQUFFRCxFQUFFekUsT0FBTyxHQUFHSCxHQUFHeUIsRUFBRXNDLEVBQUVsQyxjQUFjSixFQUFFckIsVUFBZ0JGLEtBQ2pRLElBQUkwSyxFQUFHLG1CQUFtQnJLLE9BQU80RSxPQUFPNUUsT0FBTzRFLE9BQU8sU0FBU2xGLEVBQUVDLEdBQUcsSUFBSSxJQUFJNkMsRUFBRSxFQUFFQSxFQUFFcUMsVUFBVWpGLE9BQU80QyxJQUFJLENBQUMsSUFBSVksRUFBRXlCLFVBQVVyQyxHQUFHLEdBQUdZLEVBQUUsSUFBSSxJQUFJakQsS0FBS2lELEVBQUVwRCxPQUFPSyxVQUFVeUUsZUFBZXBELEtBQUswQixFQUFFakQsS0FBS1QsRUFBRVMsR0FBR2lELEVBQUVqRCxJQUFJLE9BQU9ULEdBQUcyQyxFQUFFLGlCQUFnQixTQUFTM0MsR0FBRyxPQUFPQSxHQUFHMkssS0FDeGRoSSxFQUFFLGFBQVksU0FBUzNDLEdBQUcsT0FBT0EsR0FBSSxTQUFTQyxFQUFFNkMsR0FBRyxPQUFPN0MsSUFBSTZDLEVBQUUsSUFBSTdDLEdBQUcsRUFBRUEsR0FBSSxFQUFFNkMsRUFBRTdDLEdBQUlBLEdBQUc2QyxHQUFJQSxNQUFLSCxFQUFFLDRCQUEyQixTQUFTM0MsR0FBRyxPQUFPQSxHQUFJLFNBQVNDLEVBQUU2QyxHQUFHLElBQUlZLEVBQUV0QyxLQUFLc0MsYUFBYWtILFNBQVNsSCxFQUFFa0gsT0FBT2xILElBQUksSUFBSWpELEVBQUVpRCxFQUFFeEQsT0FBYyxJQUFJLEdBQVg0QyxFQUFFQSxHQUFHLEtBQVlBLEVBQUU3QixLQUFLa0csSUFBSXJFLEVBQUVyQyxFQUFFLElBQUlxQyxFQUFFckMsRUFBRXFDLElBQUksQ0FBQyxJQUFJOUIsRUFBRTBDLEVBQUVaLEdBQUcsR0FBRzlCLElBQUlmLEdBQUdLLE9BQU91SyxHQUFHN0osRUFBRWYsR0FBRyxPQUFNLEVBQUcsT0FBTSxNQUNoVTBDLEVBQUUsNkJBQTRCLFNBQVMzQyxHQUFHLE9BQU9BLEdBQUksU0FBU0MsRUFBRTZDLEdBQUcsR0FBRyxNQUFNMUIsS0FBSyxNQUFNLElBQUltQixVQUFVLGdGQUFnRixHQUFHdEMsYUFBYTZLLE9BQU8sTUFBTSxJQUFJdkksVUFBVSxnRkFBZ0YsT0FBTyxJQUFJbkIsS0FBSzJKLFFBQVE5SyxFQUFFNkMsR0FBRyxPQUFNSCxFQUFFLHdCQUF1QixTQUFTM0MsR0FBRyxPQUFPQSxHQUFJLFdBQVcsT0FGOVksU0FBWUEsRUFBRUMsR0FBR0QsYUFBYTRLLFNBQVM1SyxHQUFHLElBQUksSUFBSThDLEVBQUUsRUFBRVksR0FBRSxFQUFHakQsRUFBRSxDQUFDbUIsS0FBSyxXQUFXLElBQUk4QixHQUFHWixFQUFFOUMsRUFBRUUsT0FBTyxDQUFDLElBQUljLEVBQUU4QixJQUFJLE1BQU0sQ0FBQzFDLE1BQU1ILEVBQUVlLEVBQUVoQixFQUFFZ0IsSUFBSWIsTUFBSyxHQUFTLE9BQUx1RCxHQUFFLEVBQVMsQ0FBQ3ZELE1BQUssRUFBR0MsV0FBTSxLQUFrRCxPQUF4Q0ssRUFBRW9CLE9BQU9DLFVBQVUsV0FBVyxPQUFPckIsR0FBVUEsRUFFdUx1SyxDQUFHNUosTUFBSyxTQUFTbkIsR0FBRyxPQUFPQSxTQUFPLElBQUlnTCxFQUFHN0osTUFBTUwsS0FDcGMsU0FBU3FDLEVBQUVwRCxFQUFFQyxHQUFHRCxFQUFFQSxFQUFFc0IsTUFBTSxLQUFLLElBQXVGb0MsRUFBbkZaLEVBQUVtSSxFQUFHakwsRUFBRSxLQUFLOEMsUUFBRyxJQUFvQkEsRUFBRWtFLFlBQVlsRSxFQUFFa0UsV0FBVyxPQUFPaEgsRUFBRSxJQUFJLEtBQVVBLEVBQUVFLFNBQVN3RCxFQUFFMUQsRUFBRWlILFVBQVVqSCxFQUFFRSxhQUFRLElBQVNELEVBQW1DNkMsRUFBakNBLEVBQUVZLElBQUlaLEVBQUVZLEtBQUtwRCxPQUFPSyxVQUFVK0MsR0FBS1osRUFBRVksR0FBS1osRUFBRVksR0FBRyxHQUFHWixFQUFFWSxHQUFHekQsRUFBeUQsU0FBU2dGLEVBQUVqRixJQUFqRSxTQUFZQSxHQUFHaUwsRUFBR3BILFlBQVcsV0FBVyxNQUFNN0QsSUFBSSxHQUFrQmtMLENBQUdsTCxHQUFpRCxTQUFTbUwsRUFBR25MLEVBQUVDLEdBQUdnRixFQUFFL0QsTUFBTSxzQkFBc0JsQixFQUFFLGlCQUFpQkMsRUFBRSxNQUFNLFNBQVNtTCxJQUFLbkcsRUFBRS9ELE1BQU0sZ0RBQWlELFNBQVNtSyxFQUFHckwsRUFBRUMsR0FBdUMsT0FBcENBLEVBQUUySyxPQUFPVSxhQUFhQyxNQUFNLEtBQUt0TCxHQUFVLE1BQU1ELEVBQUVDLEVBQUVELEVBQUVDLEVBQUUsSUFBSXVMLEVBQXVDQyxFQUFwQ0MsRUFBRyxvQkFBcUJDLFlBQWVDLEVBQUcsb0JBQXFCQyxZQUN6bkIsU0FBU0MsRUFBRzlMLEdBQUcsR0FBRzRMLEVBQUc1TCxHQUFHeUwsSUFBS0EsRUFBRyxJQUFJSSxjQUFjRSxPQUFPL0wsT0FBTyxDQUFDLElBQUlDLE9BQUUsRUFBT0EsT0FBRSxJQUFTQSxHQUFLQSxFQUFFLElBQUksSUFBSTZDLEVBQUUsRUFBRVksRUFBRSxJQUFJc0ksV0FBVyxFQUFFaE0sRUFBRUUsUUFBUU8sRUFBRSxFQUFFQSxFQUFFVCxFQUFFRSxPQUFPTyxJQUFJLENBQUMsSUFBSU8sRUFBRWhCLEVBQUVpTSxXQUFXeEwsR0FBRyxHQUFHLElBQUlPLEVBQUUwQyxFQUFFWixLQUFLOUIsTUFBTSxDQUFDLEdBQUcsS0FBS0EsRUFBRTBDLEVBQUVaLEtBQUs5QixHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsT0FBT0EsR0FBRyxPQUFPQSxFQUFFLENBQUMsR0FBRyxPQUFPQSxHQUFHUCxFQUFFVCxFQUFFRSxPQUFPLENBQUMsSUFBSXFCLEVBQUV2QixFQUFFaU0sYUFBYXhMLEdBQUcsR0FBRyxPQUFPYyxHQUFHLE9BQU9BLEVBQUUsQ0FBQ1AsRUFBRSxNQUFNQSxFQUFFLE9BQU9PLEVBQUUsTUFBTSxNQUFNbUMsRUFBRVosS0FBSzlCLEdBQUcsR0FBRyxJQUFJMEMsRUFBRVosS0FBSzlCLEdBQUcsR0FBRyxHQUFHLElBQUkwQyxFQUFFWixLQUFLOUIsR0FBRyxFQUFFLEdBQUcsSUFBSTBDLEVBQUVaLEtBQU8sR0FBRjlCLEVBQUssSUFBSSxTQUFjUCxJQUFJLEdBQUdSLEVBQUUsTUFBTWlCLE1BQU0sK0JBQStCRixFQUFFLE1BQU0wQyxFQUFFWixLQUMzZjlCLEdBQUcsR0FBRyxJQUFJMEMsRUFBRVosS0FBSzlCLEdBQUcsRUFBRSxHQUFHLElBQUkwQyxFQUFFWixLQUFPLEdBQUY5QixFQUFLLEtBQUtoQixFQUFFMEQsRUFBRXdJLFNBQVMsRUFBRXBKLEdBQUcsT0FBTzlDLEVBQUcsSUFBSW1NLEVBQUcsR0FBRzlHLEVBQUUsS0FBSyxTQUFTK0csRUFBR3BNLEdBQUcsSUFBSUMsT0FBRSxJQUFTQSxJQUFJQSxFQUFFLEdBQUdvTSxJQUFLcE0sRUFBRWtNLEVBQUdsTSxHQUFHLElBQUksSUFBSTZDLEVBQUVwQyxNQUFNTyxLQUFLcUwsTUFBTXRNLEVBQUVFLE9BQU8sSUFBSXdELEVBQUV6RCxFQUFFLEtBQUssR0FBR1EsRUFBRSxFQUFFTyxFQUFFLEVBQUVQLEVBQUVULEVBQUVFLE9BQU8sRUFBRU8sR0FBRyxFQUFFLENBQUMsSUFBSWMsRUFBRXZCLEVBQUVTLEdBQUdxRCxFQUFFOUQsRUFBRVMsRUFBRSxHQUFHZSxFQUFFeEIsRUFBRVMsRUFBRSxHQUFHb0MsRUFBRTVDLEVBQUVzQixHQUFHLEdBQUdBLEVBQUV0QixHQUFLLEVBQUZzQixJQUFNLEVBQUV1QyxHQUFHLEdBQUdBLEVBQUU3RCxHQUFLLEdBQUY2RCxJQUFPLEVBQUV0QyxHQUFHLEdBQUdBLEVBQUV2QixFQUFJLEdBQUZ1QixHQUFNc0IsRUFBRTlCLEtBQUs2QixFQUFFdEIsRUFBRXVDLEVBQUV0QyxFQUFVLE9BQVJxQixFQUFFLEVBQUVyQixFQUFFa0MsRUFBUzFELEVBQUVFLE9BQU9PLEdBQUcsS0FBSyxFQUFXZSxFQUFFdkIsR0FBSyxJQUFoQjRDLEVBQUU3QyxFQUFFUyxFQUFFLE1BQWUsSUFBSWlELEVBQUUsS0FBSyxFQUFFMUQsRUFBRUEsRUFBRVMsR0FBR3FDLEVBQUU5QixHQUFHZixFQUFFRCxHQUFHLEdBQUdDLEdBQUssRUFBRkQsSUFBTSxFQUFFNkMsR0FBRyxHQUFHckIsRUFBRWtDLEVBQUUsT0FBT1osRUFBRXlKLEtBQUssSUFDaGMsU0FBU0MsRUFBR3hNLEdBQUcsSUFBSUMsRUFBRUQsRUFBRUUsT0FBTzRDLEVBQUUsRUFBRTdDLEVBQUUsRUFBRTZDLEVBQUUsRUFBRUEsRUFBRTdCLEtBQUtxTCxNQUFNeEosSUFBSSxHQUFHLEtBQUtpSSxRQUFRL0ssRUFBRUMsRUFBRSxNQUFNNkMsR0FBRyxHQUFHLEtBQUtpSSxRQUFRL0ssRUFBRUMsRUFBRSxJQUFJNkMsRUFBRSxFQUFFQSxFQUFFLEdBQUcsSUFBSVksRUFBRSxJQUFJc0ksV0FBV2xKLEdBQUdyQyxFQUFFLEVBQThCLE9BQ2pMLFNBQVlULEVBQUVDLEdBQUcsU0FBUzZDLEVBQUV0QixHQUFHLEtBQUtrQyxFQUFFMUQsRUFBRUUsUUFBUSxDQUFDLElBQUkyQyxFQUFFN0MsRUFBRXlNLE9BQU8vSSxLQUFLM0QsRUFBRXNGLEVBQUV4QyxHQUFHLEdBQUcsTUFBTTlDLEVBQUUsT0FBT0EsRUFBRSxJQUFJLGNBQWMyTSxLQUFLN0osR0FBRyxNQUFNM0IsTUFBTSxvQ0FBb0MyQixHQUFJLE9BQU9yQixFQUFFNkssSUFBSyxJQUFJLElBQUkzSSxFQUFFLElBQUksQ0FBQyxJQUFJakQsRUFBRXFDLEdBQUcsR0FBRzlCLEVBQUU4QixFQUFFLEdBQUd2QixFQUFFdUIsRUFBRSxJQUFJZ0IsRUFBRWhCLEVBQUUsSUFBSSxHQUFHLEtBQUtnQixJQUFJLElBQUlyRCxFQUFFLE1BQU1SLEVBQUVRLEdBQUcsRUFBRU8sR0FBRyxHQUFHLElBQUlPLElBQUl0QixFQUFFZSxHQUFHLEVBQUUsSUFBSU8sR0FBRyxHQUFHLElBQUl1QyxHQUFHN0QsRUFBRXNCLEdBQUcsRUFBRSxJQUFJdUMsS0FEeks2SSxDQUFHM00sR0FBRSxTQUFTZ0IsR0FBRzBDLEVBQUVqRCxLQUFLTyxLQUFXMEMsRUFBRXdJLFNBQVMsRUFBRXpMLEdBRXJNLFNBQVM0TCxJQUFLLElBQUloSCxFQUFFLENBQUNBLEVBQUUsR0FBRyxJQUFJLElBQUlyRixFQUFFLGlFQUFpRXNCLE1BQU0sSUFBSXJCLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxNQUFNLE1BQU02QyxFQUFFLEVBQUUsRUFBRUEsRUFBRUEsSUFBSSxDQUFDLElBQUlZLEVBQUUxRCxFQUFFNE0sT0FBTzNNLEVBQUU2QyxHQUFHeEIsTUFBTSxLQUFLNkssRUFBR3JKLEdBQUdZLEVBQUUsSUFBSSxJQUFJakQsRUFBRSxFQUFFQSxFQUFFaUQsRUFBRXhELE9BQU9PLElBQUksQ0FBQyxJQUFJTyxFQUFFMEMsRUFBRWpELFFBQUcsSUFBUzRFLEVBQUVyRSxLQUFLcUUsRUFBRXJFLEdBQUdQLE1BQU8sSUFBc0NvTSxFQUFsQ0MsRUFBRyxtQkFBb0JkLFdBQWMsU0FBU2UsRUFBRy9NLEdBQVksR0FBVG9CLEtBQUtKLEVBQUVoQixFQUFLLE9BQU9BLEdBQUcsSUFBSUEsRUFBRUUsT0FBTyxNQUFNZ0IsTUFBTSwwREFBMkQ2TCxFQUFHcE0sVUFBVXFNLE9BQU8sV0FBVyxHQUFHLE1BQU01TCxLQUFLSixFQUFFLElBQUloQixFQUFFLFFBQVFBLEVBQUVvQixLQUFLSixFQUFFaEIsRUFBRW9CLEtBQUtKLEVBQUUsTUFBTWhCLEdBQUcsaUJBQWtCQSxFQUFFQSxFQUFFOE0sR0FBSTlNLGFBQWFnTSxXQUFXSSxFQUFHcE0sR0FBRyxLQUFLLE9BQU9BLEdBQUcsSUFBSWlOLEVBQUcsbUJBQW9CakIsV0FBV3JMLFVBQVV1TSxNQUFNLFNBQVNDLEVBQUduTixFQUFFQyxFQUFFNkMsR0FBRyxPQUFPN0MsSUFBSTZDLEVBQUUrSixJQUFLQSxFQUFHLElBQUliLFdBQVcsSUFBSWlCLEVBQUdqTixFQUFFa04sTUFBTWpOLEVBQUU2QyxHQUFHLElBQUlrSixXQUFXaE0sRUFBRWtNLFNBQVNqTSxFQUFFNkMsSUFBSSxJQUFJd0MsRUFBRSxFQUU1dUIsU0FBUzhILEVBQUdwTixFQUFFQyxHQUFxQkEsT0FBRSxLQUFwQkEsT0FBRSxJQUFTQSxFQUFFLEdBQUdBLEdBQWVXLEdBQUtYLEVBQUVXLEVBQUVRLEtBQUtJLEVBQUUsS0FBS0osS0FBS0osRUFBRUksS0FBS2MsRUFBRWQsS0FBS3lCLEVBQUUsRUFBRXpCLEtBQUtnQixHQUFFLEVBQUdoQixLQUFLUixFQUFFWCxFQUFFRCxHQUFHcU4sRUFBR2pNLEtBQUtwQixHQUFHLFNBQVNxTixFQUFHck4sRUFBRUMsR0FBR0QsRUFBRXdCLEVBRGxKLFNBQVl4QixHQUFHLEdBQUdBLEVBQUUrSixjQUFjaUMsV0FBVyxPQUFPaE0sRUFBRSxHQUFHQSxFQUFFK0osY0FBY3VELFlBQVksT0FBTyxJQUFJdEIsV0FBV2hNLEdBQUcsR0FBR0EsRUFBRStKLGNBQWNySixNQUFNLE9BQU8sSUFBSXNMLFdBQVdoTSxHQUFHLEdBQUdBLEVBQUUrSixjQUFjYSxPQUFPLE9BQU80QixFQUFHeE0sR0FBRyxHQUFHQSxFQUFFK0osY0FBY2dELEVBQUcsQ0FBQyxHQUFHLE1BQU0vTSxFQUFFZ0IsRUFBRSxJQUFJZixFQUFFNE0sSUFBS0EsRUFBRyxJQUFJYixXQUFXLFFBQVEsQ0FBQy9MLEVBQUUrTCxXQUFXLElBQUlsSixFQUFFOUMsRUFBRWdCLEVBQUU4QixFQUFFLE1BQU1BLEdBQUdnSyxHQUFJLE1BQU1oSyxHQUFHQSxhQUFha0osV0FBV2xKLEVBQUUsaUJBQWtCQSxFQUFFMEosRUFBRzFKLEdBQUcsS0FBYTdDLEVBQUUsSUFBSUEsRUFBZEQsRUFBRUEsRUFBRWdCLEVBQUU4QixHQUFhLE9BQU83QyxFQUFFLEdBQUdELGFBQWFnTSxXQUFXLE9BQU8sSUFBSUEsV0FBV2hNLEVBQUV1TixPQUFPdk4sRUFBRXdOLFdBQVd4TixFQUFFeU4sWUFBWSxNQUFNdk0sTUFBTSw2SEFDbFd3TSxDQUFHek4sR0FBR0QsRUFBRTZDLEVBQUUsRUFBRTdDLEVBQUVrQyxFQUFFbEMsRUFBRXdCLEVBQUV0QixPQUFPRixFQUFFZ0IsRUFBRWhCLEVBQUU2QyxFQUErQyxTQUFTK0QsRUFBRTVHLEdBQUdBLEVBQUVnQixFQUFFaEIsRUFBRWtDLElBQUlsQyxFQUFFb0MsR0FBRSxFQUFHNkMsRUFBRS9ELE1BQU0sMENBQTBDbEIsRUFBRWdCLEVBQUUsTUFBTWhCLEVBQUVrQyxLQUNqVSxTQUFTMEQsRUFBRTVGLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXdCLEVBQUVzQixFQUFFN0MsRUFBRUQsRUFBRWdCLEdBQUcwQyxFQUFJLElBQUZaLEVBQU0sT0FBRyxJQUFJQSxHQUFTOUMsRUFBRWdCLEdBQUcsRUFBRTRGLEVBQUU1RyxHQUFHMEQsSUFBYUEsSUFBTSxLQUFqQlosRUFBRTdDLEVBQUVELEVBQUVnQixFQUFFLE1BQWUsRUFBSyxJQUFJOEIsR0FBUzlDLEVBQUVnQixHQUFHLEVBQUU0RixFQUFFNUcsR0FBRzBELElBQWFBLElBQU0sS0FBakJaLEVBQUU3QyxFQUFFRCxFQUFFZ0IsRUFBRSxNQUFlLEdBQU0sSUFBSThCLEdBQVM5QyxFQUFFZ0IsR0FBRyxFQUFFNEYsRUFBRTVHLEdBQUcwRCxJQUFhQSxJQUFNLEtBQWpCWixFQUFFN0MsRUFBRUQsRUFBRWdCLEVBQUUsTUFBZSxHQUFNLElBQUk4QixHQUFTOUMsRUFBRWdCLEdBQUcsRUFBRTRGLEVBQUU1RyxHQUFHMEQsSUFBYUEsSUFBTSxJQUFqQlosRUFBRTdDLEVBQUVELEVBQUVnQixFQUFFLE1BQWMsR0FBTSxJQUFJOEIsR0FBUzlDLEVBQUVnQixHQUFHLEVBQUU0RixFQUFFNUcsR0FBRzBELElBQUksSUFBRTFELEVBQUVnQixHQUFHLEVBQUssS0FBS2YsRUFBRUQsRUFBRWdCLE1BQU0sS0FBS2YsRUFBRUQsRUFBRWdCLE1BQU0sS0FBS2YsRUFBRUQsRUFBRWdCLE1BQU0sS0FBS2YsRUFBRUQsRUFBRWdCLE1BQU0sS0FBS2YsRUFBRUQsRUFBRWdCLE1BQVloQixFQUFFb0MsR0FBRSxFQUFHZ0osSUFBSzFILElBQUVrRCxFQUFFNUcsR0FBVTBELFFBRHZPMEosRUFBR3pNLFVBQVVnTixNQUFNLFdBQVd2TSxLQUFLSixFQUFFSSxLQUFLeUIsR0FDK0wsSUFBSStLLEVBQUcsR0FBRyxTQUFTQyxJQUFLek0sS0FBS0osRUFBRSxJQUFJZ0wsV0FBVyxJQUFJNUssS0FBS0ksRUFBRSxFQUFFLFNBQVN5RSxFQUFFakcsRUFBRUMsR0FBRyxLQUFLRCxFQUFFd0IsRUFBRSxFQUFFeEIsRUFBRWdCLEVBQUVkLFFBQVEsQ0FBQyxJQUFJNEMsRUFBRTlDLEVBQUVnQixFQUFFaEIsRUFBRWdCLEVBQUUsSUFBSWdMLFdBQVcvSyxLQUFLNk0sS0FBSyxFQUFFLEVBQUU5TixFQUFFZ0IsRUFBRWQsU0FBU0YsRUFBRWdCLEVBQUUrTSxJQUFJakwsR0FBRzlDLEVBQUVnQixFQUFFaEIsRUFBRXdCLEtBQUt2QixFQUE2SCxTQUFTNkcsR0FBRTlHLEVBQUVDLEdBQUcsS0FBSyxJQUFJQSxHQUFHZ0csRUFBRWpHLEVBQUksSUFBRkMsRUFBTSxLQUFLQSxLQUFLLEVBQUVnRyxFQUFFakcsRUFBRUMsR0FBSSxTQUFTK04sR0FBR2hPLEdBQUcsSUFBSUMsRUFBRSxHQUFHNkMsT0FBRSxJQUFTN0MsRUFBRXlGLEdBQUt6RixFQUFFeUYsRUFBRXRFLEtBQUtpQixFQUFFLENBQUN6QixPQUFFLElBQVNYLEVBQUVXLEdBQUtYLEVBQUVXLEdBQUdRLEtBQUtzRSxFQUFFNUMsRUFBRTdDLEVBQUVtQixLQUFLaUIsRUFBRXVMLEVBQUcxTixRQUFRNEMsRUFBRThLLEVBQUdLLE1BQU1oTyxJQUFJNkMsRUFBRWxDLEVBQUVYLEVBQUVXLEdBQUdaLEdBQUdxTixFQUFHdkssRUFBRTlDLEdBQUdBLEVBQUU4QyxHQUFHOUMsRUFBRSxJQUFJb04sRUFBR3BOLEVBQUVDLEdBQUdtQixLQUFLSixFQUFFaEIsRUFBRW9CLEtBQUt5QixFQUFFekIsS0FBS0osRUFBRUEsRUFBRUksS0FBS0ksRUFBRUosS0FBS2MsR0FBRyxFQUFFZCxLQUFLZ0IsR0FBRSxFQUFrRSxTQUFTOEwsR0FBR2xPLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWdCLEVBQXVELElBQXBEZixFQUFFQSxFQUFFZSxHQUFHZixFQUFFaUMsS0FBS2pDLEVBQUVELEVBQUVvQyxLQUFXbkMsR0FBTkEsRUFBRUQsRUFBRWdCLEdBQU1vQixHQUFHLEVBQUVuQyxFQUFFZSxHQUFHZixFQUFFZSxFQUFFZixFQUFFaUMsR0FBTWpDLEVBQUUsT0FBTSxFQUFHRCxFQUFFNkMsRUFBRTdDLEVBQUVnQixFQUFFQSxFQUFFLElBQUk4QixFQUFFOEMsRUFBRTVGLEVBQUVnQixHQUFnQixPQUFiZixFQUFFNkMsSUFBSSxFQUFZLElBQVZBLEdBQUcsSUFBYSxHQUFHQSxHQUE4QjlDLEVBQUVrQyxFQUFFakMsRUFBRUQsRUFBRXdCLEVBQUVzQixHQUFRLElBQXRDOUMsRUFBRW9DLEdBQUUsRUFBRytJLEVBQUdySSxFQUFFOUMsRUFBRTZDLElBQUcsR0FDcHNDLFNBQVNzTCxHQUFHbk8sR0FBRyxPQUFPQSxFQUFFd0IsR0FBRyxLQUFLLEVBQUUsR0FBRyxHQUFHeEIsRUFBRXdCLEVBQUUyTSxHQUFHbk8sUUFBUUEsRUFBRSxDQUFPLElBQUksSUFBSUMsR0FBZEQsRUFBRUEsRUFBRWdCLEdBQWNBLEVBQUU4QixFQUFFLEVBQUUsR0FBR0EsRUFBRUEsSUFBSSxDQUFDLEdBQUcsSUFBWSxJQUFQOUMsRUFBRXdCLEVBQUV2QixJQUFRLENBQUNELEVBQUVnQixFQUFFZixFQUFFLEVBQUUyRyxFQUFFNUcsR0FBRyxNQUFNQSxFQUFFQyxJQUFJRCxFQUFFb0MsR0FBRSxFQUFHZ0osSUFBSyxNQUFNLEtBQUssR0FBRXBMLEVBQUVBLEVBQUVnQixHQUFJQSxHQUFHLEVBQUU0RixFQUFFNUcsR0FBRyxNQUFNLEtBQUssRUFBRSxHQUFHQSxFQUFFd0IsRUFBRTJNLEdBQUduTyxJQUFJQyxFQUFFMkYsRUFBRTVGLEVBQUVnQixJQUFHaEIsRUFBRUEsRUFBRWdCLEdBQUlBLEdBQUdmLEVBQUUyRyxFQUFFNUcsSUFBSSxNQUFNLEtBQUssR0FBRUEsRUFBRUEsRUFBRWdCLEdBQUlBLEdBQUcsRUFBRTRGLEVBQUU1RyxHQUFHLE1BQU0sS0FBSyxFQUFRLElBQU5DLEVBQUVELEVBQUVrQyxJQUFJLENBQUMsSUFBSWdNLEdBQUdsTyxHQUFHLENBQUNBLEVBQUVvQyxHQUFFLEVBQUc2QyxFQUFFL0QsTUFBTSwwQ0FBMEMsTUFBTSxHQUFHLEdBQUdsQixFQUFFd0IsRUFBRSxDQUFDeEIsRUFBRWtDLEdBQUdqQyxJQUFJRCxFQUFFb0MsR0FBRSxFQUFHNkMsRUFBRS9ELE1BQU0sNkJBQTZCLE1BQU1pTixHQUFHbk8sR0FBWSxNQUFNLFFBQVFBLEVBQUVvQyxHQUFFLEVBQUcrSSxFQUFHbkwsRUFBRXdCLEVBQUV4QixFQUFFNkMsSUFDOWQsU0FBU3VMLEdBQUdwTyxFQUFFQyxFQUFFNkMsR0FBRzlDLEVBQUUwRixJQUFJMUYsRUFBRW1OLEVBQUduTixFQUFFZ0IsRUFBRVEsRUFBRXNCLEVBQUU5QyxFQUFFZ0IsRUFBRUEsSUFBSThCLEVBQUU3QyxFQUFFb0MsR0FBR1MsRUFBRWMsS0FBSzVELEdBQUdDLEVBQUVvQyxFQUFFLENBQUNyQyxJQUYrZ0I2TixFQUFHbE4sVUFBVVQsT0FBTyxXQUFXLE9BQU9rQixLQUFLSSxHQUFHcU0sRUFBR2xOLFVBQVUwTixJQUFJLFdBQVcsSUFBSXJPLEVBQUVvQixLQUFLSixFQUFFZixFQUFFbUIsS0FBS0ksRUFBVyxPQUFUSixLQUFLSSxFQUFFLEVBQVMyTCxFQUFHbk4sRUFBRSxFQUFFQyxJQUFrUitOLEdBQUdyTixVQUFVZ04sTUFBTSxXQUFXdk0sS0FBS0osRUFBRTJNLFFBQVF2TSxLQUFLSSxFQUFFSixLQUFLYyxHQUFHLEdBRWg5QixJQUFJb00sR0FBRyxHQUFHLFNBQVNDLEtBQUtuTixLQUFLSSxFQUFFLEdBQUdKLEtBQUtjLEVBQUUsRUFBRWQsS0FBS0osRUFBRSxJQUFJNk0sRUFBRyxTQUFTVyxHQUFHeE8sRUFBRUMsR0FBRyxJQUFJQSxFQUFFQyxTQUFTRixFQUFFd0IsRUFBRW9DLEtBQUszRCxHQUFHRCxFQUFFa0MsR0FBR2pDLEVBQUVDLFFBQVEsU0FBU3VPLEdBQUd6TyxFQUFFQyxFQUFFNkMsR0FBR2dFLEdBQUU5RyxFQUFFZ0IsRUFBRSxFQUFFZixFQUFFLEdBQUc2RyxHQUFFOUcsRUFBRWdCLEVBQUU4QixFQUFFNUMsUUFBUXNPLEdBQUd4TyxFQUFFQSxFQUFFZ0IsRUFBRXFOLE9BQU9HLEdBQUd4TyxFQUFFOEMsR0FBSSxJQUFrN0I0TCxHQUE5NkJDLEdBQUcsbUJBQW9COU0sUUFBUSxpQkFBa0JBLFNBQVNBLFlBQU8sUUFBUSxFQUFPLFNBQVMrTSxHQUFHNU8sRUFBRUMsR0FBR0ssT0FBT3VPLFNBQVM3TyxLQUFLMk8sR0FBRzNPLEVBQUUyTyxLQUFLMU8sT0FBRSxJQUFTRCxFQUFFZ0IsRUFBRWhCLEVBQUVnQixHQUFHZixFQUFFSyxPQUFPQyxpQkFBaUJQLEVBQUUsQ0FBQ2dCLEVBQUUsQ0FBQ1osTUFBTUgsRUFBRXdCLGNBQWEsRUFBR0MsVUFBUyxFQUFHb04sWUFBVyxNQUFPLFNBQVNDLEdBQUcvTyxHQUFHLE9BQUlBLEVBQXlDLE9BQXJCQyxFQUFIME8sR0FBSzNPLEVBQUUyTyxJQUFNM08sRUFBRWdCLEdBQWlCLEVBQUVmLEVBQTFDLEVBQUUsSUFBSUEsRUFBc0MsU0FBUytPLEdBQUdoUCxHQUFHLE9BQUlVLE1BQU11TyxRQUFRalAsSUFBWTRPLEdBQUc1TyxFQUFFLEdBQVVBLEdBQWpCQSxFQUFtQixTQUFTa1AsR0FBR2xQLEdBQUcsSUFBSVUsTUFBTXVPLFFBQVFqUCxHQUFHLE1BQU1rQixNQUFNLHNDQUFzQzBOLEdBQUc1TyxFQUFFLEdBQUksU0FBU21QLEdBQUduUCxHQUFHLE9BQU8sT0FBT0EsR0FBRyxpQkFBa0JBLEdBQUdBLEVBQUUrSixjQUFjekosT0FBTyxTQUFTOE8sR0FBR3BQLEdBQUcsY0FBY0EsR0FBRyxJQUFLLFNBQVMsT0FBT3FQLFNBQVNyUCxHQUFHQSxFQUFFNEssT0FBTzVLLEdBQUcsSUFBSyxTQUFTLE9BQU84TSxHQUFJLE1BQU05TSxHQUFHQSxhQUFhZ00sV0FBV0ksRUFBR3BNLEdBQUdBLEVBQUUsUUFBUSxPQUFPQSxHQUFJLFNBQVNzUCxHQUFHdFAsRUFBRUMsR0FBRyxHQUFHLE1BQU1ELEVBQUUsT0FBT1UsTUFBTXVPLFFBQVFqUCxJQUFJbVAsR0FBR25QLEdBQUd1UCxHQUFHdlAsRUFBRUMsR0FBR0EsRUFBRUQsR0FBRyxTQUFTdVAsR0FBR3ZQLEVBQUVDLEdBQUcsR0FBR1MsTUFBTXVPLFFBQVFqUCxHQUFHLENBQUMsSUFBSSxJQUFJOEMsRUFBRXBDLE1BQU1WLEVBQUVFLFFBQVF3RCxFQUFFLEVBQUVBLEVBQUUxRCxFQUFFRSxPQUFPd0QsSUFBSVosRUFBRVksR0FBRzRMLEdBQUd0UCxFQUFFMEQsR0FBR3pELEdBQWtCLE9BQVQsRUFBTjhPLEdBQUcvTyxJQUFNZ1AsR0FBR2xNLEdBQVVBLEVBQU8sSUFBSVksS0FBVFosRUFBRSxHQUFZOUMsRUFBRThDLEVBQUVZLEdBQUc0TCxHQUFHdFAsRUFBRTBELEdBQUd6RCxHQUFHLE9BQU82QyxFQUFVLFNBQVMrRCxHQUFFN0csRUFBRUMsRUFBRTZDLEdBQUcsSUFBSVksRUFBRWdMLEdBQWtTLEdBQS9SQSxHQUFHLEtBQUsxTyxJQUFJQSxFQUFFMEQsR0FBR0EsRUFBRXRDLEtBQUsySSxZQUFZWCxHQUFHcEosSUFBSUEsRUFBRTBELEVBQUUsQ0FBQ0EsR0FBRyxJQUFJdEMsS0FBS2dCLEdBQUdzQixFQUFFLEdBQUcsSUFBSXRDLEtBQUsySSxZQUFZYixJQUFJLEdBQUc5SCxLQUFLYyxFQUFFLEtBQUtkLEtBQUtKLEVBQUVoQixFQUFxQkEsR0FBaEIwRCxFQUFFdEMsS0FBS0osRUFBRWQsUUFBVyxFQUFLd0QsR0FBZ0J5TCxHQUFaekwsRUFBRXRDLEtBQUtKLEVBQUVoQixLQUFXb0IsS0FBS3lCLEVBQUU3QyxFQUFFb0IsS0FBS2dCLEVBQUVoQixLQUFLSSxFQUFFa0MsUUFBVSxJQUFTekQsSUFBSSxFQUFFQSxHQUFHbUIsS0FBS3lCLEVBQUU1QixLQUFLa0csSUFBSWxILEVBQUVELEVBQUUsRUFBRW9CLEtBQUtnQixHQUFHaEIsS0FBS0ksRUFBRSxNQUFNSixLQUFLeUIsRUFBRXVFLE9BQU9vSSxVQUFhMU0sRUFBRSxJQUFJN0MsRUFBRSxFQUFFQSxFQUFFNkMsRUFBRTVDLE9BQU9ELEtBQUlELEVBQUU4QyxFQUFFN0MsSUFBS21CLEtBQUt5QixHQUFHN0MsR0FBR29CLEtBQUtnQixHQUFHc0IsRUFBRXRDLEtBQUtKLEVBQUVoQixJQUFJZ1AsR0FBR3RMLEdBQUd0QyxLQUFLSixFQUFFaEIsR0FBR3lQLEtBQUtDLEdBQUd0TyxPQUFPc0MsRUFBRXRDLEtBQUtJLEVBQUV4QixJQUFJZ1AsR0FBR3RMLEdBQUd0QyxLQUFLSSxFQUFFeEIsR0FBR3lQLElBQUksSUFXeHZDRSxHQUE4VUMsR0FYODZCSCxHQUFHblAsT0FBT3VQLE9BQU9iLEdBQUcsS0FDanBELFNBQVNVLEdBQUcxUCxHQUFHLElBQUlDLEVBQUVELEVBQUU2QyxFQUFFN0MsRUFBRW9DLEVBQUVwQyxFQUFFZ0IsRUFBRWYsS0FBS0QsRUFBRXdCLEVBQUV4QixFQUFFZ0IsRUFBRWYsR0FBRyxJQUFJLFNBQVNtSyxHQUFFcEssRUFBRUMsRUFBRTZDLEdBQUcsT0FBTyxJQUFJN0MsRUFBRSxVQUFNLElBQVM2QyxHQUFJQSxHQUFJN0MsR0FBR0QsRUFBRTZDLEVBQUU3QyxFQUFFd0IsRUFBRXhCLEVBQUV3QixFQUFFdkIsUUFBRyxFQUFPRCxFQUFFZ0IsRUFBRWYsRUFBRUQsRUFBRW9DLEdBQUcsU0FBUzBOLEdBQUc5UCxFQUFFQyxFQUFFNkMsR0FBR0EsT0FBRSxJQUFTQSxHQUFLQSxFQUFFLElBQUlZLE9BQUUsSUFBU0EsR0FBS0EsRUFBTWpELEVBQUUySixHQUFFcEssRUFBRUMsRUFBRXlELEdBQXVHLE9BQXBHLE1BQU1qRCxJQUFJQSxFQUFFZ1AsSUFBSWhQLElBQUlnUCxHQUFhcEYsR0FBRXJLLEVBQUVDLEVBQWJRLEVBQUV1TyxHQUFHLElBQVl0TCxHQUFJWixHQUFHcEMsTUFBTXVPLFFBQVF4TyxJQUFVLEVBQU5zTyxHQUFHdE8sSUFBbUI0SixHQUFFckssRUFBRUMsRUFBaEJRLEVBQUVBLEVBQUV5TSxRQUFnQnhKLEdBQVdqRCxFQUFFLFNBQVNzUCxHQUFFL1AsRUFBRUMsRUFBRTZDLEdBQTJCLE9BQU8sT0FBdEI5QyxFQUFFLE9BQVhBLEVBQUVvSyxHQUFFcEssRUFBRUMsSUFBYUQsR0FBR0EsUUFBaUIsSUFBUzhDLEVBQUUsRUFBRUEsRUFBRTlDLEVBQUUsU0FBU3FLLEdBQUVySyxFQUFFQyxFQUFFNkMsRUFBRVksUUFBSSxJQUFTQSxHQUFJQSxHQUFJekQsR0FBR0QsRUFBRTZDLEdBQUc2TSxHQUFHMVAsR0FBR0EsRUFBRXdCLEVBQUV2QixHQUFHNkMsR0FBRzlDLEVBQUVnQixFQUFFZixFQUFFRCxFQUFFb0MsR0FBR1UsRUFDemQsU0FBU2tOLEdBQUdoUSxFQUFFQyxFQUFFNkMsR0FBRzlDLEVBQUVrQyxJQUFJbEMsRUFBRWtDLEVBQUUsSUFBSSxJQUFJd0IsRUFBRTFELEVBQUVrQyxFQUFFWSxHQUFHLElBQUlZLEVBQUUsQ0FBQyxJQUFJakQsRUFBRXFQLEdBQUc5UCxFQUFFOEMsR0FBRSxHQUFJWSxFQUFFLEdBQUcsSUFBSSxJQUFJMUMsSUFBRU4sTUFBTXVPLFFBQVF4TyxPQUFZLEVBQU5zTyxHQUFHdE8sSUFBU2MsRUFBRSxFQUFFQSxFQUFFZCxFQUFFUCxPQUFPcUIsSUFBSW1DLEVBQUVuQyxHQUFHLElBQUl0QixFQUFFUSxFQUFFYyxJQUFJUCxHQUFHa08sR0FBR3hMLEVBQUVuQyxHQUFHUCxHQUFHQSxJQUFJa08sR0FBR3hMLEdBQUdwRCxPQUFPdVAsT0FBT25NLElBQUkxRCxFQUFFa0MsRUFBRVksR0FBR1ksRUFBRSxPQUFPQSxFQUFFLFNBQVN1TSxHQUFHalEsRUFBRUMsRUFBRTZDLEVBQUVZLEVBQUVqRCxHQUFHLElBQUlPLEVBQUVnUCxHQUFHaFEsRUFBRTBELEVBQUV6RCxHQUFHNkMsRUFBRUEsR0FBSSxJQUFJWSxFQUFFMUQsRUFBRThQLEdBQUc5UCxFQUFFQyxHQUFHLE1BQVFRLEdBQUdPLEVBQUVrUCxPQUFPelAsRUFBRSxFQUFFcUMsR0FBRzlDLEVBQUVrUSxPQUFPelAsRUFBRSxFQUFFMFAsR0FBRXJOLE1BQU05QixFQUFFNEMsS0FBS2QsR0FBRzlDLEVBQUU0RCxLQUFLdU0sR0FBRXJOLEtBQ3JWLFNBQVNxTixHQUFFblEsR0FBRyxHQUFHQSxFQUFFa0MsRUFBRSxJQUFJLElBQUlqQyxLQUFLRCxFQUFFa0MsRUFBRSxDQUFDLElBQUlZLEVBQUU5QyxFQUFFa0MsRUFBRWpDLEdBQUcsR0FBR1MsTUFBTXVPLFFBQVFuTSxHQUFHLElBQUksSUFBSVksRUFBRSxFQUFFQSxFQUFFWixFQUFFNUMsT0FBT3dELElBQUlaLEVBQUVZLElBQUl5TSxHQUFFck4sRUFBRVksU0FBU1osR0FBR3FOLEdBQUVyTixHQUFHLE9BQU85QyxFQUFFZ0IsRUFBNkQsU0FBU29QLEdBQUdwUSxFQUFFQyxHQUFZLE9BQU8sT0FBaEJELEVBQUVvSyxHQUFFcEssRUFBRUMsSUFBa0IsRUFBRUQsRUFBRSxTQUFTcVEsR0FBR3JRLEVBQUVDLEdBQVksT0FBTyxPQUFoQkQsRUFBRW9LLEdBQUVwSyxFQUFFQyxJQUFrQixHQUFHRCxFQUFHLFNBQVNzUSxHQUFHdFEsRUFBRUMsR0FBRyxHQUFHRCxFQUFFQSxFQUFFcUMsRUFBRSxDQUFDbU0sR0FBR3ZPLEVBQUVBLEVBQUVlLEVBQUVxTixPQUFPLElBQUksSUFBSXZMLEVBQUUsRUFBRUEsRUFBRTlDLEVBQUVFLE9BQU80QyxJQUFJMEwsR0FBR3ZPLEVBQUVELEVBQUU4QyxLQUFLLFNBQVN5TixHQUFHdlEsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUcsT0FBT0EsRUFBRUUsUUFBUSxLQUFLLEVBQUUsSUFBSTRDLEVBQUU5QyxFQUFFLEdBQUcsT0FBTyxTQUFTd0IsRUFBRXFCLEVBQUU5QyxHQUFHLE9BQU9FLEVBQUV1QixFQUFFcUIsRUFBRTlDLEVBQUUrQyxJQUFJLEtBQUssRUFBRSxJQUFJWSxFQUFFMUQsRUFBRSxHQUFHUyxFQUFFVCxFQUFFLEdBQUcsT0FBTyxTQUFTd0IsRUFBRXFCLEVBQUU5QyxHQUFHLE9BQU9FLEVBQUV1QixFQUFFcUIsRUFBRTlDLEVBQUUyRCxFQUFFakQsSUFBSSxLQUFLLEVBQUUsSUFBSU8sRUFBRWhCLEVBQUUsR0FBR3VCLEVBQUV2QixFQUFFLEdBQUc4RCxFQUFFOUQsRUFBRSxHQUFHLE9BQU8sU0FBU3dCLEVBQUVxQixFQUFFOUMsR0FBRyxPQUFPRSxFQUFFdUIsRUFBRXFCLEVBQUU5QyxFQUFFaUIsRUFBRU8sRUFBRXVDLElBQUksUUFBUSxNQUFNNUMsTUFBTSx5REFBeURsQixFQUFFRSxTQUMzckIsU0FBU3NRLEdBQUd4USxFQUFFQyxFQUFFNkMsR0FBRyxLQUFLb0wsR0FBR2pPLElBQUksR0FBR0EsRUFBRXVCLEdBQUcsQ0FBQyxJQUFJa0MsRUFBRXpELEVBQUVpQyxFQUFFekIsRUFBRXFDLEVBQUVZLEdBQUcsR0FBR2pELEdBQUcsR0FBR0MsTUFBTXVPLFFBQVF4TyxLQUFLQSxFQUFFcUMsRUFBRVksR0FBRzZNLEdBQUc5UCxLQUFLQSxFQUFFUixFQUFFRCxFQUFFMEQsR0FBRyxDQUFLakQsRUFBRVQsRUFBRSxJQUFJZ0IsR0FBWjBDLEVBQUV6RCxHQUFjNEMsRUFBRXNMLEdBQUd6SyxHQUFHMEssR0FBRzFLLEVBQUVqRCxFQUFFTyxTQUFhUCxFQUFFVCxFQUFFZ0IsR0FBUjBDLEVBQUV6RCxHQUFVNEMsRUFBRXNMLEdBQUd6SyxHQUFHMEssR0FBRzFLLEVBQUVqRCxFQUFFTyxHQUFHLE9BQU9oQixFQUFFLFNBQVN5USxHQUFHelEsRUFBRUMsR0FBRyxJQUFJNkMsRUFBRSxJQUFJeUwsR0FBNkIsR0FBMUJ0TyxFQUFFRCxFQUFFOEMsR0FBeUIsS0FBdEI5QyxFQUFFOEMsRUFBRVosRUFBRVksRUFBRTlCLEVBQUVkLFVBQWtCNEMsRUFBRSxJQUFJa0osV0FBVyxPQUFPLENBQUNoTSxFQUFFLElBQUlnTSxXQUFXaE0sR0FBRyxJQUFJLElBQUkwRCxFQUFFWixFQUFFdEIsRUFBRWYsRUFBRWlELEVBQUV4RCxPQUFPYyxFQUFFZixFQUFFLEVBQUVlLEVBQUVQLEVBQUVPLElBQUksQ0FBQyxJQUFJTyxFQUFFbUMsRUFBRTFDLEdBQUcsSUFBSU8sRUFBRXJCLFNBQVNGLEVBQUUrTixJQUFJeE0sRUFBRXRCLEdBQUdBLEdBQUdzQixFQUFFckIsUUFBb0IsS0FBTk8sR0FBTmlELEVBQUVaLEVBQUU5QixHQUFNUSxLQUFVeEIsRUFBRStOLElBQUlySyxFQUFFMUMsRUFBRWtMLFNBQVMsRUFBRXpMLEdBQUdSLEdBQUd5RCxFQUFFbEMsRUFBRSxHQUFHc0IsRUFBRXRCLEVBQUUsQ0FBQ3hCLEdBQUc4QyxFQUFFOUMsRUFBRSxPQUFPOEMsRUFDOWMsU0FBUzROLEdBQUcxUSxFQUFFQyxFQUFFNkMsR0FBRyxHQUFHd0wsR0FBR3BPLE9BQU8sQ0FBQyxJQUFJd0QsRUFBRTRLLEdBQUdMLE1BQU1qTyxJQUFJcU4sRUFBRzNKLEVBQUUxQyxFQUFFaEIsR0FBRzBELEVBQUV4QixHQUFHLEVBQUV3QixFQUFFbEMsR0FBRyxHQUFHeEIsRUFBRTBELE9BQU8xRCxFQUFFLElBQUlnTyxHQUFHaE8sR0FBRyxJQUFJLE9BQU84QyxFQUFFLElBQUk3QyxFQUFFRCxHQUFHLFNBQVFDLEVBQUVELEVBQUVnQixHQUFJUSxFQUFFLEtBQUt2QixFQUFFNEMsRUFBRSxFQUFFNUMsRUFBRWlDLEVBQUUsRUFBRWpDLEVBQUVlLEVBQUUsRUFBRWYsRUFBRW1DLEdBQUUsRUFBR25DLEVBQUVXLEdBQUUsRUFBR1osRUFBRWtDLEdBQUcsRUFBRWxDLEVBQUV3QixHQUFHLEVBQUV4QixFQUFFb0MsR0FBRSxFQUFHLElBQUlrTSxHQUFHcE8sUUFBUW9PLEdBQUcxSyxLQUFLNUQsSUFDM04sU0FBUzJRLEdBQUUzUSxFQUFFQyxFQUFFNkMsR0FBWSxHQUFHLE9BQVo3QyxFQUFFbUssR0FBRW5LLEVBQUU2QyxJQUFjLENBQUNnRSxHQUFFOUcsRUFBRWdCLEVBQUUsRUFBRThCLEVBQUUsR0FBRzlDLEVBQUVBLEVBQUVnQixFQUFFLElBQUkwQyxFQUFFekQsRUFBcUIsS0FBbkJ5RCxHQUFHWixFQUFFLEVBQUVZLEVBQUUsRUFBRSxJQUFJQSxFQUFFQSxHQUFjNEIsRUFBTixFQUFFLEVBQUU1QixFQUFNLEVBQVMsV0FBWWtOLE1BQU1sTixHQUFRNEIsRUFBRSxXQUFZLHFCQUFzQjVCLEVBQU80QixHQUFHeEMsR0FBRyxHQUFHLGNBQWMsRUFBRyxzQkFBdUJZLEdBQUdBLEVBQUV6QyxLQUFLNFAsTUFBTW5OLEVBQUV6QyxLQUFLNlAsSUFBSSxHQUFHLE1BQVV4TCxHQUFHeEMsR0FBRyxHQUFHWSxLQUFLLElBQUl6RCxFQUFFZ0IsS0FBS3FMLE1BQU1yTCxLQUFLOFAsSUFBSXJOLEdBQUd6QyxLQUFLK1AsS0FBS3ROLEdBQUd6QyxLQUFLNlAsSUFBSSxHQUFHN1EsR0FBMkIsV0FBeEJ5RCxFQUFFekMsS0FBSzRQLE1BQU0sUUFBUW5OLE9BQWtCekQsRUFBTXFGLEdBQUd4QyxHQUFHLEdBQUc3QyxFQUFFLEtBQUssR0FBSyxRQUFGeUQsS0FBYSxHQUFPdUMsRUFBRWpHLEdBQU44QyxFQUFFd0MsS0FBVSxFQUFFLEtBQUtXLEVBQUVqRyxFQUFFOEMsSUFBSSxFQUFFLEtBQUttRCxFQUFFakcsRUFBRThDLElBQUksR0FBRyxLQUFLbUQsRUFBRWpHLEVBQUU4QyxJQUFJLEdBQUcsTUFDaGUsU0FBU21PLEdBQUVqUixFQUFFQyxFQUFFNkMsR0FBRyxHQUFHLElBQUk5QyxFQUFFd0IsRUFBRSxPQUFNLEVBQVMsSUFBSWtDLEdBQVYxRCxFQUFFQSxFQUFFZ0IsR0FBVVEsRUFBRXhCLEVBQUVnQixHQUFPUCxFQUFFVCxFQUFFd0IsRUFBRXhCLEVBQUVnQixFQUFFLEdBQU9BLEVBQUVoQixFQUFFd0IsRUFBRXhCLEVBQUVnQixFQUFFLEdBQUdPLEVBQUV2QixFQUFFd0IsRUFBRXhCLEVBQUVnQixFQUFFLEdBQW1MLE9BQWhMaEIsRUFBRWdCLEdBQUcsRUFBRTRGLEVBQUU1RyxHQUFpQ0EsRUFBRSxJQUFoQ1MsR0FBR2lELEdBQUcsRUFBRWpELEdBQUcsRUFBRU8sR0FBRyxHQUFHTyxHQUFHLE1BQU0sSUFBVSxJQUFJLEVBQUVtQyxFQUFFakQsSUFBSSxHQUFHLElBQUlBLEdBQUcsUUFBUTRKLEdBQUVwSyxFQUFFNkMsRUFBRSxLQUFLWSxFQUFFakQsRUFBRXlRLElBQUlDLEVBQUFBLEVBQVNuUixFQUFFLEdBQUcwRCxFQUFFMUQsRUFBRWlCLEtBQUs2UCxJQUFJLEdBQUcsS0FBS3JRLEVBQUVULEVBQUVpQixLQUFLNlAsSUFBSSxFQUFFcE4sRUFBRSxNQUFNakQsRUFBRVEsS0FBSzZQLElBQUksRUFBRSxPQUFZLEVBQ2hTLFNBQVNNLEdBQUdwUixFQUFFQyxFQUFFNkMsR0FBRyxHQUFHLElBQUk5QyxFQUFFd0IsRUFBRSxPQUFNLEVBQUcsSUFBSSxJQUFJa0MsRUFBRTFELEVBQUVnQixFQUFFUCxFQUFFLElBQUlPLEVBQUUsRUFBRU8sRUFBRXZCLEVBQUUsRUFBRSxFQUFFdUIsR0FBRyxLQUFLZCxFQUFFYyxJQUFpQlAsSUFBTSxLQUFuQlAsRUFBRWlELEVBQUVsQyxFQUFFa0MsRUFBRTFDLFFBQWlCLEVBQUVPLEVBQXNELEdBQXBELEtBQUtkLElBQWlCTyxJQUFNLEtBQW5CUCxFQUFFaUQsRUFBRWxDLEVBQUVrQyxFQUFFMUMsUUFBaUIsR0FBR2hCLElBQU0sSUFBRlMsSUFBUSxHQUFNLEtBQUtBLEVBQUUsSUFBSWMsRUFBRSxFQUFFLEVBQUVBLEdBQUcsS0FBS2QsRUFBRWMsSUFBaUJ2QixJQUFNLEtBQW5CUyxFQUFFaUQsRUFBRWxDLEVBQUVrQyxFQUFFMUMsUUFBaUIsRUFBRU8sRUFBRSxFQUF1SixPQUFsSixJQUFJZCxHQUFHaUQsRUFBRTFDLElBQUksR0FBYWhCLEVBQUksWUFBZlMsRUFBRVQsSUFBSSxNQUErQlMsR0FBR0EsSUFBSSxFQUFFLElBQXBCaUQsRUFBSyxHQUFGQSxJQUFNLEtBQWtCakQsRUFBRUEsRUFBRSxJQUFJLElBQUdpRCxFQUFFLFdBQVdqRCxHQUFHaUQsSUFBSSxHQUFHMUQsRUFBRUEsR0FBRzBELEVBQUVBLElBQU9BLEVBQUV0QixHQUFFLEVBQUdnSixJQUFLcEwsT0FBRSxHQUFPcUssR0FBRXBLLEVBQUU2QyxFQUFFOUMsSUFBUyxFQUFHLFNBQVNxUixHQUFHclIsRUFBRUMsRUFBRTZDLEdBQUcsT0FBRyxJQUFJOUMsRUFBRXdCLElBQVc2SSxHQUFFcEssRUFBRTZDLEVBQUU4QyxFQUFFNUYsRUFBRWdCLEtBQVUsR0FDaGMsU0FBU3NRLEdBQUd0UixFQUFFQyxFQUFFNkMsR0FBRyxHQUFHLElBQUk5QyxFQUFFd0IsRUFBRSxPQUFNLEVBQUcsSUFBbURSLEVBQS9DMEMsRUFBRWtDLEVBQUU1RixFQUFFZ0IsR0FBYVAsR0FBVlQsRUFBRUEsRUFBRWdCLEdBQVVBLEVBQTBCLEdBQXhCaEIsRUFBRWdCLEdBQUcwQyxFQUFFa0QsRUFBRTVHLEdBQUdBLEVBQUVBLEVBQUV3QixFQUFXa0ssR0FBSTFLLEVBQUV3SyxLQUFNeEssRUFBRXdLLEVBQUcsSUFBSUcsWUFBWSxRQUFRLENBQUM0RixPQUFNLEtBQU12USxFQUFFQSxFQUFFd1EsT0FBT3hSLEVBQUVrTSxTQUFTekwsRUFBRUEsRUFBRWlELFFBQVEsQ0FBQ0EsRUFBRWpELEVBQUVpRCxFQUFFLElBQUksSUFBZ0JsQyxFQUFFcUIsRUFBRTlDLEVBQWhCd0IsRUFBRSxHQUFHdUMsRUFBRSxLQUFXckQsRUFBRWlELEdBQVksS0FBVGxDLEVBQUV4QixFQUFFUyxNQUFXYyxFQUFFcUMsS0FBS3BDLEdBQUcsSUFBSUEsRUFBRWYsR0FBR2lELEVBQUVuQyxFQUFFcUMsS0FBSyxRQUFRZixFQUFFN0MsRUFBRVMsS0FBSyxJQUFJZSxHQUFHLE1BQVMsSUFBRnFCLElBQVFwQyxJQUFJYyxFQUFFcUMsS0FBSyxRQUFRckMsRUFBRXFDLE1BQVEsR0FBRnBDLElBQU8sRUFBSSxHQUFGcUIsSUFBTyxJQUFJckIsRUFBRWYsR0FBR2lELEVBQUUsRUFBRW5DLEVBQUVxQyxLQUFLLE9BQWlCLE1BQVMsS0FBbEJmLEVBQUU3QyxFQUFFUyxRQUFvQixNQUFNZSxHQUFHLElBQUlxQixHQUFHLE1BQU1yQixHQUFHLEtBQUtxQixHQUFHLE1BQWtCLEtBQVY3QixFQUFFaEIsRUFBRVMsUUFBWUEsSUFBSWMsRUFBRXFDLEtBQUssUUFBUXJDLEVBQUVxQyxNQUFRLEdBQUZwQyxJQUFPLElBQU0sR0FBRnFCLElBQU8sRUFDbGYsR0FBRjdCLEdBQU8sS0FBS1EsRUFBRWYsR0FBR2lELEVBQUUsRUFBRW5DLEVBQUVxQyxLQUFLLE9BQWlCLE1BQVMsS0FBbEJmLEVBQUU3QyxFQUFFUyxRQUFvQixHQUFhb0MsRUFBRSxLQUFWckIsR0FBRyxLQUFhLElBQUksTUFBa0IsS0FBVlIsRUFBRWhCLEVBQUVTLFFBQVksTUFBa0IsS0FBVlYsRUFBRUMsRUFBRVMsUUFBWUEsSUFBSWMsRUFBRXFDLEtBQUssU0FBU3BDLEdBQUssRUFBRkEsSUFBTSxJQUFNLEdBQUZxQixJQUFPLElBQU0sR0FBRjdCLElBQU8sRUFBSSxHQUFGakIsRUFBS3lCLEdBQUcsTUFBTUQsRUFBRXFDLEtBQWtCLE9BQVpwQyxHQUFHLEdBQUcsTUFBcUIsT0FBTixLQUFGQSxLQUFpQkQsRUFBRXFDLEtBQUssT0FBTyxNQUFNckMsRUFBRXJCLFNBQVM0RCxFQUFFdUgsRUFBR3ZILEVBQUV2QyxHQUFHQSxFQUFFckIsT0FBTyxHQUFHYyxFQUFFcUssRUFBR3ZILEVBQUV2QyxHQUFZLE9BQVQ4SSxHQUFFcEssRUFBRTZDLEVBQUU5QixJQUFTLEVBQ2xVLFNBQVN5USxHQUFHelIsRUFBRUMsRUFBRTZDLEVBQUVZLEVBQUVqRCxHQUFHLEdBQUcsSUFBSVQsRUFBRXdCLEVBQUUsT0FBTSxFQUFHLElBQUlSLEVBQUUsSUFBSTBDLEVBQUVuQyxFQUFFdkIsRUFBRWdCLEVBQUVrQixFQUFFNEIsRUFBRThCLEVBQUU1RixFQUFFZ0IsR0FBR1EsRUFBRXhCLEVBQUVnQixFQUFFQSxFQUFFOEMsRUFBMkIsR0FBekI5RCxFQUFFZ0IsRUFBRWtCLEVBQUVWLEVBQUVmLEVBQUVPLEVBQUVoQixHQUFnQixJQUFiUyxFQUFFZSxFQUFFeEIsRUFBRWdCLEVBQUVBLEdBQVcsTUFBTUUsTUFBTSx3REFBeUQ0QyxFQUFFLHlCQUF5QkEsRUFBRXJELEdBQUcsd0ZBQTRILE9BQW5DVCxFQUFFZ0IsRUFBRUEsRUFBRVEsRUFBRXhCLEVBQUVnQixFQUFFa0IsRUFBRVgsRUFBRTBPLEdBQUdoUSxFQUFFNkMsRUFBRTlCLEVBQUUwQyxPQUFFLElBQWMsRUFBSSxTQUFTZ08sR0FBRzFSLEdBQUc2RyxHQUFFN0UsS0FBS1osS0FBS3BCLEdBQWtCLFNBQVMyUixHQUFHM1IsRUFBRUMsR0FBRyxJQUFJNkMsRUFBRXNILEdBQUVwSyxFQUFFLEdBQUcsR0FBRyxNQUFNOEMsR0FBRyxNQUFNQSxFQUFFLENBQUNnRSxHQUFFN0csRUFBRWUsRUFBRSxHQUFHLElBQUkwQyxFQUFFekQsRUFBRWUsRUFBRSxHQUFHLEdBQUc4QixFQUFFZ0UsR0FBRXBELEVBQUVaLE9BQU8sQ0FBQyxJQUFJLElBQUlyQyxFQUFFLEVBQUUsRUFBRUEsRUFBRUEsSUFBSXdGLEVBQUV2QyxFQUFJLElBQUZaLEVBQU0sS0FBS0EsSUFBSSxFQUFFbUQsRUFBRXZDLEVBQUUsSUFBSWlOLEdBQUUxUSxFQUFFRCxFQUFFLEdBQVksT0FBVDBELEVBQUUwRyxHQUFFcEssRUFBRSxLQUFZeU8sR0FBR3hPLEVBQUUsRUFBRTZMLEVBQUdwSSxJQUFhLE9BQVRBLEVBQUUwRyxHQUFFcEssRUFBRSxLQUFZeU8sR0FBR3hPLEVBQUUsRUFBRTZMLEVBQUdwSSxJQUFJNE0sR0FBR3RRLEVBQUVDLEdBQUcsU0FBUzJSLEdBQUc1UixFQUFFQyxHQUFHLE9BQU91USxHQUFHeFEsRUFBRUMsRUFBRTBQLEtBQUtBLEdBQUcsQ0FBQyxFQUFFMEIsR0FBRyxFQUFFSixHQUFFLEVBQUVLLEdBQUcsRUFBRUEsTUFBTyxTQUFTTyxHQUFHN1IsR0FBRzZHLEdBQUU3RSxLQUFLWixLQUFLcEIsR0FBRyxFQUFFOFIsSUFBK0YsU0FBU0MsR0FBRy9SLEVBQUVDLEdBQUcsT0FBT3VRLEdBQUd4USxFQUFFQyxFQUFFMlAsS0FBS0EsR0FBRyxDQUFDLEVBQUUsQ0FBQzZCLEdBQUdDLEdBQUdFLE9BVDdmL0ssR0FBRWxHLFVBQVVxTSxPQUFPLFdBQXlCLE9BQU91QyxHQUFmWSxHQUFFL08sTUFBa0JnTyxLQUN6UXZJLEdBQUVsRyxVQUFVNkMsU0FBUyxXQUFXLE9BQU8yTSxHQUFFL08sTUFBTW9DLFlBUTRNcUIsRUFBRTZNLEdBQUc3SyxJQUF5VWhDLEVBQUVnTixHQUFHaEwsSUFBR2dMLEdBQUdsUixVQUFVcVIsa0JBQWtCLFNBQVNoUyxFQUFFQyxHQUFxQixPQUFsQmdRLEdBQUc3TyxLQUFLLEVBQUVwQixFQUFFMFIsR0FBR3pSLEdBQVVtQixNQUE4RCxJQUE2QzZRLEdBQXlMQyxHQUFsT0osR0FBRyxDQUFDLEdBQUcsU0FBU0ssR0FBR25TLEdBQUc2RyxHQUFFN0UsS0FBS1osS0FBS3BCLEdBQWtCLFNBQVNvUyxHQUFHcFMsRUFBRUMsR0FBRzBRLEdBQUUxUSxFQUFFRCxFQUFFLEdBQUcyUSxHQUFFMVEsRUFBRUQsRUFBRSxHQUFHMlEsR0FBRTFRLEVBQUVELEVBQUUsR0FBRzJRLEdBQUUxUSxFQUFFRCxFQUFFLEdBQUcyUSxHQUFFMVEsRUFBRUQsRUFBRSxHQUFHc1EsR0FBR3RRLEVBQUVDLEdBQUcsU0FBU29TLEdBQUdyUyxFQUFFQyxHQUFHLE9BQU91USxHQUFHeFEsRUFBRUMsRUFBRWdTLEtBQUtBLEdBQUcsQ0FBQyxFQUFFaEIsR0FBRSxFQUFFQSxHQUFFLEVBQUVBLEdBQUUsRUFBRUEsR0FBRSxFQUFFQSxNQUFNLFNBQVNxQixHQUFHdFMsR0FBRzZHLEdBQUU3RSxLQUFLWixLQUFLcEIsR0FBRyxFQUFFdVMsSUFBbUIsU0FBU0MsR0FBR3hTLEVBQUVDLEdBQUcsT0FBT3VRLEdBQUd4USxFQUFFQyxFQUFFaVMsS0FBS0EsR0FBRyxDQUFDLEVBQUUsQ0FBQ1QsR0FBR1UsR0FBR0UsT0FBbFB4TixFQUFFc04sR0FBR3RMLElBQW9MaEMsRUFBRXlOLEdBQUd6TCxJQUEyRCxJQUE2QzRMLEdBQXpDRixHQUFHLENBQUMsR0FBRyxTQUFTRyxHQUFHMVMsR0FBRzZHLEdBQUU3RSxLQUFLWixLQUFLcEIsR0FBa0IsU0FBUzJTLEdBQUczUyxFQUFFQyxHQUFHMFEsR0FBRTFRLEVBQUVELEVBQUUsR0FBRzJRLEdBQUUxUSxFQUFFRCxFQUFFLEdBQUcyUSxHQUFFMVEsRUFBRUQsRUFBRSxHQUFHMlEsR0FBRTFRLEVBQUVELEVBQUUsR0FBRzJRLEdBQUUxUSxFQUFFRCxFQUFFLEdBQUcsSUFBSThDLEVBQUVzSCxHQUFFcEssRUFBRSxHQUFHLEdBQUcsTUFBTThDLEdBQUcsTUFBTUEsRUFBRSxDQUFDZ0UsR0FBRTdHLEVBQUVlLEVBQUUsSUFBSSxJQUFJMEMsRUFBRXpELEVBQUVlLEVBQUVQLEVBQUVxQyxFQUFFQSxFQUFFLEVBQUVyQyxFQUFnQixJQUFJTyxHQUFsQlAsRUFBRVEsS0FBSzJSLElBQUluUyxNQUFhLEVBQTJILElBQXpIQSxFQUFFUSxLQUFLcUwsT0FBTzdMLEVBQUVPLEdBQUcsWUFBWVAsS0FBSyxFQUFFcUMsSUFBSXJDLEdBQUdBLElBQUksRUFBZSxZQUFiTyxFQUFXLElBQVBBLElBQUksTUFBb0JBLEVBQUUsRUFBTSxhQUFKUCxJQUFtQkEsRUFBRSxLQUFhcUMsRUFBUndDLEVBQUV0RSxFQUFjQSxFQUFWUCxFQUFjLEVBQUVPLEdBQUcsSUFBSThCLEdBQUdtRCxFQUFFdkMsRUFBSSxJQUFGWixFQUFNLEtBQUtBLEdBQUdBLElBQUksRUFBRTlCLEdBQUcsTUFBTSxFQUFFQSxLQUFLLEVBQUVpRixFQUFFdkMsRUFBRVosR0FBR3dOLEdBQUd0USxFQUFFQyxHQUFHLFNBQVM0UyxHQUFHN1MsRUFBRUMsR0FBRyxPQUFPdVEsR0FBR3hRLEVBQUVDLEVBQUV3UyxLQUFLQSxHQUFHLENBQUMsRUFBRXhCLEdBQUUsRUFBRUEsR0FBRSxFQUFFQSxHQUFFLEVBQUVBLEdBQUUsRUFBRUEsR0FBRSxFQUFFRyxNQUFPLFNBQVMwQixHQUFHOVMsRUFBRUMsRUFBRTZDLEdBQW9HLEdBQWpHQSxFQUFFOUMsRUFBRStTLGFBQWEsSUFBSWpRLEVBQUU5QyxFQUFFZ1QsY0FBY2hULEVBQUVpVCxpQkFBaUJqVCxFQUFFa1QsYUFBYXBRLEVBQUU3QyxHQUFHRCxFQUFFbVQsY0FBY3JRLElBQU85QyxFQUFFb1QsbUJBQW1CdFEsRUFBRTlDLEVBQUVxVCxnQkFBZ0IsTUFBTW5TLE1BQU0sc0NBQXNDbEIsRUFBRXNULGlCQUFpQnhRLElBQUksT0FBT0EsRUFBRyxTQUFTeVEsR0FBR3ZULEdBQUcsT0FBT2dRLEdBQUdoUSxFQUFFMFIsR0FBRyxHQUFHOEIsS0FBSSxTQUFTdlQsR0FBRyxNQUFNLENBQUMrSCxNQUFNb0ksR0FBR25RLEVBQUUsR0FBR2tRLEVBQUVKLEdBQUU5UCxFQUFFLEdBQUd3VCxNQUFNLE1BQU1ySixHQUFFbkssRUFBRSxHQUFHb1EsR0FBR3BRLEVBQUUsUUFBRyxFQUFPeVQsWUFBWSxNQUFNdEosR0FBRW5LLEVBQUUsR0FBR29RLEdBQUdwUSxFQUFFLFFBQUcsTUFBVyxTQUFTMFQsR0FBRzNULEdBQUcsTUFBTSxDQUFDK0IsRUFBRWdPLEdBQUUvUCxFQUFFLEdBQUdpQyxFQUFFOE4sR0FBRS9QLEVBQUUsR0FBR3NDLEVBQUV5TixHQUFFL1AsRUFBRSxHQUFHOEgsV0FBVyxNQUFNc0MsR0FBRXBLLEVBQUUsR0FBRytQLEdBQUUvUCxFQUFFLFFBQUcsR0FBUSxTQUFTNFQsR0FBRzVULEdBQUcsT0FBT2dRLEdBQUdVLEdBQUcxUSxFQUFFc1MsR0FBR0UsSUFBSUwsR0FBRyxHQUFHcUIsSUFBSUcsSUFBSyxTQUFTRSxHQUFHN1QsRUFBRUMsR0FBR21CLEtBQUtJLEVBQUV4QixFQUFFb0IsS0FBS0osRUFBRWYsRUFBRW1CLEtBQUt5QixFQUFFLEVBQ3pxRSxTQUFTaVIsR0FBRzlULEVBQUVDLEVBQUU2QyxHQUFXLE9BQzNCLFNBQVk5QyxFQUFFQyxHQUFHLElBQUk2QyxFQUFFOUMsRUFBRWdCLEVBQUUsUUFBRyxJQUFTaEIsRUFBRXFDLEVBQUUsQ0FBQyxJQUFJcUIsRUFBRW9QLEdBQUdoUSxFQUFFLG9LQUFvSyxHQUFHckMsRUFBRXFTLEdBQUdoUSxFQUFFLHdKQUF3SixHQUFHOUIsRUFBRThCLEVBQUVpUixnQkFBeUUsR0FBekRqUixFQUFFa1IsYUFBYWhULEVBQUUwQyxHQUFHWixFQUFFa1IsYUFBYWhULEVBQUVQLEdBQUdxQyxFQUFFbVIsWUFBWWpULElBQU84QixFQUFFb1Isb0JBQW9CbFQsRUFBRThCLEVBQUVxUixhQUFhLE1BQU1qVCxNQUFNLHVDQUNwZ0I0QixFQUFFc1Isa0JBQWtCcFQsSUFBSTBDLEVBQUUxRCxFQUFFcUMsRUFBRXJCLEVBQUU4QixFQUFFdVIsV0FBVzNRLEdBQUdqRCxFQUFFcUMsRUFBRXdSLG1CQUFtQjVRLEVBQUUsWUFBWTFELEVBQUVvQyxFQUFFLENBQUNhLEVBQUVILEVBQUV5UixrQkFBa0I3USxFQUFFLFdBQVdYLEVBQUVELEVBQUV5UixrQkFBa0I3USxFQUFFLFFBQVEyRixHQUFHNUksR0FBR1QsRUFBRTBFLEVBQUU1QixFQUFFMFIsZUFBZTFSLEVBQUUyUixXQUFXM1IsRUFBRTRSLGFBQWExVSxFQUFFMEUsR0FBRzVCLEVBQUU2Uix3QkFBd0IzVSxFQUFFb0MsRUFBRWEsR0FBR0gsRUFBRThSLG9CQUFvQjVVLEVBQUVvQyxFQUFFYSxFQUFFLEVBQUVILEVBQUUrUixPQUFNLEVBQUcsRUFBRSxHQUFHL1IsRUFBRWdTLFdBQVdoUyxFQUFFNFIsYUFBYSxJQUFJSyxhQUFhLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUFJalMsRUFBRWtTLGFBQWFsUyxFQUFFMlIsV0FBVzNSLEVBQUU0UixhQUFhLE1BQU0xVSxFQUFFbUMsRUFBRVcsRUFBRTBSLGVBQWUxUixFQUFFMlIsV0FBVzNSLEVBQUU0UixhQUFhMVUsRUFBRW1DLEdBQUdXLEVBQUU2Uix3QkFBd0IzVSxFQUFFb0MsRUFBRVcsR0FBR0QsRUFBRThSLG9CQUFvQjVVLEVBQUVvQyxFQUFFVyxFQUM5Z0IsRUFBRUQsRUFBRStSLE9BQU0sRUFBRyxFQUFFLEdBQUcvUixFQUFFZ1MsV0FBV2hTLEVBQUU0UixhQUFhLElBQUlLLGFBQWEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUlqUyxFQUFFa1MsYUFBYWxTLEVBQUUyUixXQUFXM1IsRUFBRTRSLGFBQWEsTUFBTTVSLEVBQUVtUyxVQUFVeFUsRUFBRSxHQUFHaUQsRUFBRTFELEVBQUVvQyxFQUFFVSxFQUFFdVIsV0FBV3JVLEVBQUVxQyxHQUFHUyxFQUFFK0UsT0FBT3JDLE1BQU12RixFQUFFdUYsTUFBTTFDLEVBQUUrRSxPQUFPcEMsT0FBT3hGLEVBQUV3RixPQUFPM0MsRUFBRW9TLFNBQVMsRUFBRSxFQUFFalYsRUFBRXVGLE1BQU12RixFQUFFd0YsUUFBUTNDLEVBQUVxUyxjQUFjclMsRUFBRXNTLFVBQVVwVixFQUFFd0IsRUFBRTZULGNBQWNwVixFQUFFcVYsUUFBUXhTLEVBQUU2Uix3QkFBd0JqUixFQUFFVCxHQUFHSCxFQUFFMlIsV0FBVzNSLEVBQUU0UixhQUFhMVUsRUFBRTBFLEdBQUc1QixFQUFFOFIsb0JBQW9CbFIsRUFBRVQsRUFBRSxFQUFFSCxFQUFFK1IsT0FBTSxFQUFHLEVBQUUsR0FBRy9SLEVBQUU2Uix3QkFBd0JqUixFQUFFWCxHQUFHRCxFQUFFMlIsV0FBVzNSLEVBQUU0UixhQUFhMVUsRUFBRW1DLEdBQUdXLEVBQUU4UixvQkFBb0JsUixFQUFFWCxFQUN6ZixFQUFFRCxFQUFFK1IsT0FBTSxFQUFHLEVBQUUsR0FBRy9SLEVBQUV5UyxnQkFBZ0J6UyxFQUFFMFMsaUJBQWlCMVMsRUFBRTBTLGlCQUFpQjFTLEVBQUUyUyxZQUFZLE1BQU0zUyxFQUFFNFMsV0FBVyxFQUFFLEVBQUUsRUFBRSxHQUFHNVMsRUFBRTZTLE1BQU03UyxFQUFFOFMsa0JBQWtCOVMsRUFBRStTLFdBQVUsR0FBRyxHQUFHLEdBQUcsR0FBSS9TLEVBQUVnVCxXQUFXaFQsRUFBRWlULGFBQWEsRUFBRSxHQUFHalQsRUFBRWtULHlCQUF5QnRTLEVBQUVULEdBQUdILEVBQUVrVCx5QkFBeUJ0UyxFQUFFWCxHQUFHRCxFQUFFMlIsV0FBVzNSLEVBQUU0UixhQUFhLE1BQU0xVSxFQUFFd0IsRUFBRTZULGNBQWMsR0FKM1NZLENBQUdqVyxFQUFFQyxHQUFNLG1CQUFvQkQsRUFBRWdCLEVBQUU2RyxPQUFPcU8sc0JBQTZCN1MsUUFBUUMsUUFBUXRELEVBQUVnQixFQUFFNkcsT0FBT3FPLHlCQUE0QnBULEVBQVNPLFFBQVFDLFFBQVF0RCxFQUFFZ0IsRUFBRTZHLFFBQVcsbUJBQW9Cc08sa0JBQXlCQSxrQkFBa0JuVyxFQUFFZ0IsRUFBRTZHLGNBQVEsSUFBUzdILEVBQUVrQyxJQUFJbEMsRUFBRWtDLEVBQUVtQyxTQUFTK1IsY0FBYyxXQUFrQixJQUFJL1MsU0FBUSxTQUFTSyxHQUFHMUQsRUFBRWtDLEVBQUV1RCxPQUFPekYsRUFBRWdCLEVBQUU2RyxPQUFPcEMsT0FBT3pGLEVBQUVrQyxFQUFFc0QsTUFBTXhGLEVBQUVnQixFQUFFNkcsT0FBT3JDLE1BQU14RixFQUFFa0MsRUFBRW1VLFdBQVcsS0FBSyxJQUFJQyxVQUFVdFcsRUFBRWdCLEVBQUU2RyxPQUFPLEVBQUUsRUFBRTdILEVBQUVnQixFQUFFNkcsT0FBT3JDLE1BQU14RixFQUFFZ0IsRUFBRTZHLE9BQU9wQyxRQUFRL0IsRUFBRTFELEVBQUVrQyxPQUl4SyxTQUFTcVUsR0FBR3ZXLEdBQUdvQixLQUFLSixFQUFFaEIsRUFMZzJCNkUsRUFBRTZOLEdBQUc3TCxJQUtsMkIsSUFBSTJQLEdBQUcsSUFBSXhLLFdBQVcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksR0FBRyxHQUFHLEtBQUssU0FBU3lLLEdBQUd6VyxFQUFFQyxHQUFHLE9BQU9BLEVBQUVELEVBQUUsU0FBUzBXLEdBQUcxVyxFQUFFQyxHQUFHYSxPQUFPZCxHQUFHQyxFQUVqZixTQUFTMFcsR0FBRzNXLEdBQStLLEdBQTVLb0IsS0FBS0osRUFBRWhCLEVBQUVvQixLQUFLd1YsVUFBVSxHQUFHeFYsS0FBS2dCLEVBQUUsR0FBR2hCLEtBQUtxQixFQUFFLEdBQUdyQixLQUFLaUIsRUFBRSxHQUFHakIsS0FBS3NELEVBQUUsR0FBR3RELEtBQUtzQixFQUFFdEIsS0FBS2UsRUFBRWYsS0FBSzBGLEdBQUUsRUFBRzFGLEtBQUsrQixFQUFFRSxRQUFRQyxVQUFVbEMsS0FBS3dFLEVBQUUsR0FBR3hFLEtBQUt1QixFQUFFLEdBQUd2QixLQUFLeVYsV0FBVzdXLEdBQUdBLEVBQUU2VyxZQUFZSixHQUFNLGlCQUFrQjNWLE9BQU8sSUFBSWIsRUFBRWEsT0FBT2dXLFNBQVNDLFNBQVN2VCxXQUFXd1QsVUFBVSxFQUFFbFcsT0FBT2dXLFNBQVNDLFNBQVN2VCxXQUFXeVQsWUFBWSxNQUFNLFFBQVMsSUFBRyxvQkFBcUJILFNBQTRHLE1BQU01VixNQUFNLGlFQUEvR2pCLEVBQUU2VyxTQUFTQyxTQUFTdlQsV0FBV3dULFVBQVUsRUFBRUYsU0FBU0MsU0FBU3ZULFdBQVd5VCxZQUFZLE1BQU0sSUFDOWIsR0FBVDdWLEtBQUsyRixFQUFFOUcsRUFBS0QsRUFBRWtYLFFBQXFDLElBQUksSUFBSXBVLEdBQXBDN0MsRUFBRWtELEVBQUU3QyxPQUFPNlcsS0FBS25YLEVBQUVrWCxXQUFzQnRWLFFBQVFrQixFQUFFM0MsS0FBSzJDLEVBQUU3QyxFQUFFMkIsT0FBTyxDQUFDa0IsRUFBRUEsRUFBRTFDLE1BQU0sSUFBSXNELEVBQUUxRCxFQUFFa1gsUUFBUXBVLEdBQUdzVSxhQUFRLElBQVMxVCxJQUFJdEMsS0FBS2dCLEVBQUVVLEdBQUcsbUJBQW9CWSxFQUFFQSxJQUFJQSxJQVV6RCxTQUFTMlQsR0FBR3JYLEVBQUVDLEdBQUcsSUFBSTZDLEVBQUVZLEVBQUUsT0FBT1gsR0FBRSxTQUFTdEMsR0FBRyxPQUFHUixLQUFLRCxFQUFFeUMsRUFBU2hDLEVBQUV1QyxPQUFPaEQsRUFBRXlDLEVBQUV4QyxLQUFJNkMsRUFBRTlDLEVBQUU2VyxXQUFXNVcsRUFBRSxJQUFJeUQsRUFBRTRULE1BQU14VSxHQUFHUyxNQUFLLFNBQVN2QyxHQUFHLE9BQU9BLEVBQUV1VyxpQkFBZ0J2WCxFQUFFeUMsRUFBRXhDLEdBQUd5RCxFQUFTakQsRUFBRXVDLE9BQU9VLE9BUzVTLFNBQVM4VCxHQUFHeFgsRUFBRUMsR0FBRyxJQUFJLElBQUk2QyxFQUFFN0MsRUFBRXdYLE1BQU0sSUFBSS9ULEVBQUUsR0FBR2tKLE9BQU90RCxFQUFHckosRUFBRXlYLFFBQVFqWCxFQUFFLElBQUlULEVBQUV3QixFQUFFbVcsV0FBVzNXLEVBQUVtQyxFQUFFbEQsRUFBRXlYLE9BQU9uVyxFQUFFUCxFQUFFWSxRQUFRTCxFQUFFcEIsS0FBS29CLEVBQUVQLEVBQUVZLE9BQU9uQixFQUFFbVgsVUFBVXJXLEVBQUVuQixPQUFPWSxFQUFFaEIsRUFBRXdCLEVBQUVxVyxlQUFlQyxVQUFVLENBQUNDLFVBQVUsU0FBU2pVLEdBQUcsSUFBSSxJQUFJdEMsRUFBRSxHQUFHcUIsRUFBRSxFQUFFQSxFQUFFNUMsRUFBRXlYLE1BQU14WCxTQUFTMkMsRUFBRXJCLEVBQUVrQyxFQUFFYixJQUFJaUIsRUFBRWtVLElBQUluVixHQUFHLElBQUk5QyxFQUFFQyxFQUFFNFcsVUFBVTlULEdBQUcvQyxJQUFJQyxFQUFFbUQsRUFIN1IsU0FBWW5ELEVBQUVDLEVBQUU2QyxHQUFHLElBQUlZLEVBQUVqRCxFQUFFTyxFQUFFTyxFQUFFdUMsRUFBRXRDLEVBQUVxQixFQUFFOUMsRUFBRTZFLEVBQUVELEVBQUV0QyxFQUFFaEMsRUFBRWMsRUFBRVEsRUFBRSxPQUFPb0IsR0FBRSxTQUFTMUIsR0FBRyxPQUFPQSxFQUFFTCxHQUFHLEtBQUssRUFBRSxJQUFJOEIsRUFBRSxPQUFPekIsRUFBRTJCLE9BQU8vQyxHQUFnQyxJQUE3QnlELEVBQUUsR0FBR2pELEVBQUUsRUFBRU8sRUFBRW1DLEVBQUU3QyxPQUFPNlcsS0FBS3JVLElBQVF2QixFQUFFUCxFQUFFWSxRQUFRTCxFQUFFcEIsS0FBS29CLEVBQUVQLEVBQUVZLE9BQU9rQyxFQUFFdkMsRUFBRW5CLE1BQWEsaUJBQVBvQixFQUFFc0IsRUFBRWdCLEtBQXdCLFlBQVl0QyxFQUFFeVcsV0FBTSxJQUFTaFksRUFBRXVCLEVBQUUwVyxXQUFXelgsRUFBRSxFQUFFQSxJQUFJVCxFQUFFMEMsR0FBRSxHQUFJRyxFQUFFTSxFQUFFN0MsT0FBTzZXLEtBQUtyVSxJQUFJdkIsRUFBRXNCLEVBQUVqQixPQUFPLEtBQUssRUFBRSxHQUFHTCxFQUFFcEIsS0FBSyxDQUFDa0IsRUFBRUwsRUFBRSxFQUFFLE1BQXVCLEdBQWpCakIsRUFBRXdCLEVBQUVuQixNQUFnQixpQkFBVndFLEVBQUU5QixFQUFFL0MsSUFBMEIsT0FBT29CLEVBQUV1QyxFQUFFL0IsRUFBRTVCLEVBQUUwQyxFQUFFcEIsRUFFM0osU0FBWXJCLEVBQUVDLEVBQUU2QyxHQUFHLElBQUlZLEVBQUUsT0FBT1gsR0FBRSxTQUFTdEMsR0FBRyxNQUFNLGlCQUFrQnFDLEdBQUdBLGFBQWFrSixZQUFZbEosYUFBYTlDLEVBQUV3QixFQUFFMlcsY0FBYzFYLEVBQUV1QyxPQUFPRixHQUFHQSxhQUFhOUMsRUFBRXdCLEVBQUU0VyxtQkFBa0IxVSxFQUFFMUQsRUFBRTBFLEVBQUV6RSxNQUFPeUQsRUFBRSxJQUFJbVEsR0FBRzdULEVBQUV3QixFQUFFeEIsRUFBRTRDLEdBQUc1QyxFQUFFMEUsRUFBRXpFLEdBQUd5RCxHQUFHakQsRUFBRXVDLE9BQU84USxHQUFHcFEsRUFBRVosRUFBRTlDLEVBQUUwQyxLQUFLakMsRUFBRXVDLFlBQU8sTUFGNUZxVixDQUFHclksRUFBRUQsRUFBRUUsRUFBRTJFLElBQUksSUFBa0IsR0FBZEQsRUFBRTFFLEVBQUUyRSxFQUFFc1QsUUFBVyxtQkFBbUJ0VCxFQUFFcVQsS0FBSyxDQUFDLEdBQUd0VCxFQUFFLENBQXVCLElBQXRCLElBQUluQyxFQUFFbUMsRUFBRTJULGNBQXNCclYsRUFBRTBCLEVBQUU0VCxtQkFDbGYzVixFQUFFK0IsRUFBRTZULHlCQUF5QjVYLEVBQUUsR0FBRzBCLEVBQUUsRUFBRUEsRUFBRUUsRUFBRWlXLFNBQVNuVyxFQUFFLENBQUMsSUFBSXlFLEVBQUUySixHQUFHbE8sRUFBRXdWLElBQUkxVixHQUFHb1EsR0FBR0csSUFBSTlMLEVBQUUsQ0FBQ0YsRUFBRSxDQUFDOEosRUFBRVosR0FBRWhKLEVBQUUsR0FBR2tLLEVBQUVsQixHQUFFaEosRUFBRSxHQUFHdEIsT0FBT3NLLEdBQUVoSixFQUFFLEdBQUd2QixNQUFNdUssR0FBRWhKLEVBQUUsR0FBR2lDLFNBQVMrRyxHQUFFaEosRUFBRSxFQUFFLEdBQUdnSixFQUFFSyxHQUFHckosRUFBRSxJQUFJSCxFQUFFZ04sR0FBRzNRLEVBQUUrVSxJQUFJMVYsSUFBSWdELEVBQUVpTyxHQUFHN0MsR0FBRzlOLEVBQUVvVixJQUFJMVYsR0FBR3VQLEdBQUdFLE1BQU1uUixFQUFFZ0QsS0FBS21ELEdBQUd2RSxFQUFFNUIsT0FBTzRCLEVBQUUsR0FBR2tCLEVBQUUzRCxHQUFHeUMsRUFBRW5CLEVBQUVMLEVBQUUsRUFBRSxNQUFNLEdBQUcsZUFBZTRELEVBQUVxVCxLQUFLLENBQUMsR0FBR3RULEVBQUUsQ0FBbUIsSUFBbEJuQyxFQUFFOUIsTUFBTWlFLEVBQUU4VCxRQUFZeFYsRUFBRSxFQUFFQSxFQUFFMEIsRUFBRThULE9BQU94VixJQUFJVCxFQUFFUyxHQUFHMEIsRUFBRXFULElBQUkvVSxHQUFHMEIsRUFBRStULGNBQWNsVyxFQUFFLEdBQUdrQixFQUFFM0QsR0FBR3lDLEVBQUVuQixFQUFFTCxFQUFFLEVBQUUsTUFBTSxRQUFHLElBQVMyRCxFQUFFLENBQUN0RCxFQUFFTCxFQUFFLEVBQUUsTUFBTSxHQUFHLGVBQWU0RCxFQUFFcVQsS0FBSyxDQUFDdlUsRUFBRTNELEdBQUc0RSxFQUFFdEQsRUFBRUwsRUFBRSxFQUFFLE1BQU0sR0FBRyxVQUFVNEQsRUFBRXFULEtBQUssQ0FBQ3ZVLEVBQUUzRCxHQUFHNEUsRUFBRXRELEVBQUVMLEVBQUUsRUFBRSxNQUFNLEdBQUcsWUFBWTRELEVBQUVxVCxLQUFLLE1BQU0vVyxNQUFNLGdDQUNwZ0IwRCxFQUFFcVQsS0FBSyxLQUE4QyxPQUF6QzVWLEVBQUVyQyxFQUFFMEUsRUFBRTNFLE1BQU9zQyxFQUFFLElBQUl3UixHQUFHN1QsRUFBRXdCLEVBQUV4QixFQUFFNEMsR0FBRzVDLEVBQUUwRSxFQUFFM0UsR0FBR3NDLEdBQVVJLEVBQUVwQixFQUFFeVMsR0FBR3pSLEVBQUVzQyxFQUFFM0UsRUFBRTBDLEdBQUcsSUFBSSxLQUFLLEdBQUdyQyxFQUFFZ0IsRUFBRUcsRUFBRWtDLEVBQUUzRCxHQUFHTSxFQUFFLEtBQUssRUFBRXVFLEVBQUUrVCxXQUFXalYsRUFBRTNELEtBQUsyRCxFQUFFM0QsR0FBRzZFLEVBQUUrVCxVQUFValYsRUFBRTNELEtBQUtzQixFQUFFTCxFQUFFLEVBQUUsTUFBTSxLQUFLLEdBQUdHLEVBQUVRLEdBQUdOLEVBQUVHLEVBQUUsS0FBSyxFQUFFRCxFQUFFc0IsRUFBRWpCLE9BQU9QLEVBQUVMLEVBQUUsRUFBRSxNQUFNLEtBQUssRUFBRSxPQUFPSyxFQUFFMkIsT0FBT1UsT0FDcURrVixDQUFHNVksRUFBRXdCLEVBQUV2QixFQUFFNFksTUFBTXRWLE1BQUssU0FBU3FCLEdBQUdBLEVBQUU3RSxFQUFFNkUsR0FBRyxJQUFJLElBQUlELEVBQUUsRUFBRUEsRUFBRTFFLEVBQUV5WCxNQUFNeFgsU0FBU3lFLEVBQUUsQ0FBQyxJQUFJdEMsRUFBRWIsRUFBRWtDLEVBQUVpQixJQUFJLGlCQUFrQnRDLEdBQUdBLEVBQUUrQyxnQkFBZ0IvQyxFQUFFK0MsZUFBZSxXQUFXL0MsRUFBRXFXLFNBQVM5VCxJQUFJNUUsRUFBRW1ELEVBQUV5QixVQUFTNUUsRUFBRWtDLEVBQUU0VyxvQkFBb0JyWSxFQUFFTyxHQUFHUCxFQUFFaVksU0FDMVcsU0FBU0ssR0FBRy9ZLEdBQXFCLFlBQWxCLElBQVNBLElBQUlBLEVBQUUsR0FBVUEsR0FBRyxLQUFLLEVBQUUsTUFBTSw0QkFBNEIsS0FBSyxFQUFFLE1BQU0sNkJBQTZCLFFBQVEsTUFBTSw2QkFDdFIsU0FBU2daLEdBQUdoWixHQUFHLElBQUlDLEVBQUVtQixLQUFLcEIsRUFBRUEsR0FBRyxHQUFHb0IsS0FBS0osRUFBRSxJQUFJMlYsR0FBRyxDQUFDRSxXQUFXN1csRUFBRTZXLFdBQVdvQyxNQUFNLFNBQVNuVyxHQUFHLE1BQU0sQ0FBQyxDQUFDb1csSUFBSSx5Q0FBeUMsQ0FBQ0MsTUFBSyxFQUFHRCxJQUFJLDZCQUE2QixDQUFDQyxNQUFLLEVBQUdELElBQUksa0NBQWtDLENBQUNFLE1BQUssRUFBR0YsSUFBSUgsR0FBR2pXLEVBQUV1VyxvQkFBb0JDLE1BQU0sQ0FBQ0osSUFBSSxxQkFBcUJ0QyxVQUFVLENBQUMsQ0FBQ2MsTUFBTSxDQUFDLGlCQUFpQixrQkFBa0Isb0JBQW9CLHFCQUFxQm1CLEtBQUssQ0FBQ1UsTUFBTSxDQUFDdEIsS0FBSyxVQUFVQyxPQUFPLHFCQUFxQnNCLGNBQWMsQ0FBQ3ZCLEtBQUssUUFBUUMsT0FBTyxpQkFDemVTLFVBQVUvRSxJQUFJNkYsbUJBQW1CLENBQUN4QixLQUFLLFFBQVFDLE9BQU8sa0JBQWtCUyxVQUFVL0UsSUFBSThGLGlCQUFpQixDQUFDekIsS0FBSyxVQUFVQyxPQUFPLHdCQUF3QnlCLE9BQU8sQ0FBQ0osTUFBTSxDQUFDdEIsS0FBSyxRQUFRQyxPQUFPLHFCQUFxQmhCLFFBQVEsQ0FBQzBDLGdCQUFnQixDQUFDM0IsS0FBSyxFQUFFNEIsZ0JBQWdCLENBQUNDLGVBQWUsc0JBQXNCQyxVQUFVLHFCQUFxQjNDLFFBQVEsa0VBQWtFOVYsTUFBTSxLQUFLMFksU0FBUzNULFVBQVU0VCxXQUFXNVQsVUFBVTZULFVBQVVGLFNBQVMsUUFBUSxlQUFlM1YsVUFDM2U4VixXQUFXLENBQUNsQyxLQUFLLEVBQUU0QixnQkFBZ0IsQ0FBQ0MsZUFBZSxxQkFBcUJNLGdCQUFnQixFQUFFTCxVQUFVLG9CQUFvQlYsZ0JBQWdCLENBQUNwQixLQUFLLEVBQUU0QixnQkFBZ0IsQ0FBQ0MsZUFBZSwrQkFBK0JPLGVBQWUsOENBQThDTixVQUFVLGFBQWFPLFNBQVMsU0FBU3hYLEdBQUcsSUFBSVksRUFBRWpELEVBQUVPLEVBQUUsT0FBTytCLEdBQUUsU0FBU3hCLEdBQUcsT0FBRyxHQUFHQSxFQUFFUCxHQUFTMEMsRUFBRXFWLEdBQUdqVyxHQUFHckMsRUFBRSwrQ0FBK0NpRCxFQUFFakIsRUFBRWxCLEVBQUU4VixHQUFHcFgsRUFBRWUsRUFBRTBDLEdBQUcsS0FBRzFDLEVBQUVPLEVBQUVDLEVBQUV2QixFQUFFZSxFQUFFdVosYUFBYTlaLEVBQUVPLEdBQVVPLEVBQUV5QixRQUFPLFNBQVF3WCxnQkFBZ0IsQ0FBQ3ZDLEtBQUssRUFDOWY0QixnQkFBZ0IsQ0FBQ0MsZUFBZSwrQkFBK0JPLGVBQWUsOENBQThDTixVQUFVLGVBQWVVLG1CQUFtQixDQUFDeEMsS0FBSyxFQUFFNEIsZ0JBQWdCLENBQUNDLGVBQWUsK0JBQStCTyxlQUFlLGlEQUFpRE4sVUFBVSxlQUFlVyxtQkFBbUIsQ0FBQ3pDLEtBQUssRUFBRTRCLGdCQUFnQixDQUFDQyxlQUFlLCtCQUErQk8sZUFBZSxpREFBaUROLFVBQVUsZUFDNWVZLHVCQUF1QixDQUFDMUMsS0FBSyxFQUFFNEIsZ0JBQWdCLENBQUNDLGVBQWUsZ0NBQWdDTyxlQUFlLG1FQUFtRU4sVUFBVSxxQkFBcUJhLHNCQUFzQixDQUFDM0MsS0FBSyxFQUFFNEIsZ0JBQWdCLENBQUNDLGVBQWUseUJBQXlCTyxlQUFlLHVHQUF1R04sVUFBVSxrQkF6QmxQaFksRUFBRTRVLEdBQUdoVyxXQUFZa2EsTUFBTSxXQUFtQyxPQUF4QnpaLEtBQUtjLEdBQUdkLEtBQUtjLEVBQUV3VyxTQUFnQnJWLFFBQVFDLFdBTTlQdkIsRUFBRTRMLE1BQU0sV0FBVyxJQUFJM04sRUFBRW9CLEtBQUssT0FBTzJCLEdBQUUsU0FBUzlDLEdBQUdELEVBQUVrQyxJQUFJbEMsRUFBRWtDLEVBQUV5TCxRQUFRM04sRUFBRXFDLEVBQUUsR0FBR3JDLEVBQUUwRSxFQUFFLElBQUl6RSxFQUFFZSxFQUFFLE1BQ3hGZSxFQUFFK1ksV0FBVyxTQUFTOWEsRUFBRUMsR0FBRyxJQUFJNkMsRUFBRTFCLEtBQUssR0FBR25CLEVBQUVBLEdBQUdtQixLQUFLSixFQUFFa1csUUFBUSxDQUFDLElBQUksSUFBSXhULEVBQUUsR0FBR2pELEVBQUUsR0FBR08sRUFBRSxHQUFHTyxFQUFFNEIsRUFBRTdDLE9BQU82VyxLQUFLblgsSUFBSThELEVBQUV2QyxFQUFFSyxRQUFRa0MsRUFBRTNELEtBQUthLEVBQUUsQ0FBQ2lFLEVBQUVqRSxFQUFFaUUsRUFBRUksRUFBRXJFLEVBQUVxRSxHQUFHdkIsRUFBRXZDLEVBQUVLLE9BQU8sQ0FBQyxJQUFJSixFQUFFc0MsRUFBRTFELE1BQU1vQixLQUFLSixLQUFLZ0IsR0FBR2hCLEtBQUtnQixFQUFFWixLQUFLeEIsRUFBRXdCLEtBQUtKLEtBQUtnQixFQUFFWixHQUFHeEIsRUFBRXdCLFFBQVUsS0FBUHNDLEVBQUU3RCxFQUFFdUIsTUFBZ0JzQyxFQUFFd1csV0FBV3RaLEVBQUVpRSxFQUFFbkIsRUFBRXdXLFNBQVN0WixFQUFFcUUsRUFBRXJGLEVBQUV3QixHQUFHa0MsRUFBRUUsS0FBSyxTQUFTZixHQUFHLE9BQU8sV0FBaUIsT0FBT0UsR0FBRSxTQUFTNkIsR0FBRyxHQUFHLEdBQUdBLEVBQUU1RCxFQUFFLE9BQU95QixFQUFFbUMsRUFBRS9CLEVBQUVvQyxFQUFFcEMsRUFBRXdDLEdBQUcsSUFBUyxJQUFKVCxFQUFFcEQsSUFBV3NCLEVBQUVYLEdBQUUsR0FBSXlDLEVBQUU1RCxFQUFFLE1BQXJILENBQTJIQSxLQUFLOEMsRUFBRStWLGtCQUFrQnJZLEVBQUUsQ0FBQ3VaLFlBQVksSUFBSWpYLEVBQUVtVSxLQUFLalksRUFBRXdCLEdBQUcsRUFBRXdaLGFBQWEsSUFBSWxYLEVBQUVtVSxNQUFLalksRUFBRXdCLEdBQU15WixZQUFZLElBQ3RmblgsRUFBRW1VLEtBQUtqWSxFQUFFd0IsR0FBRyxJQUFJc0MsRUFBRXhELE9BQU80RSxPQUFPNUUsT0FBTzRFLE9BQU81RSxPQUFPNEUsT0FBTyxHQUFHLENBQUNtVixlQUFlLEdBQUdELGdCQUFnQixJQUFJdFcsRUFBRStWLGlCQUFpQnJZLEdBQUdmLEVBQUVtRCxLQUFLRSxNQUFTLElBQUlKLEVBQUV4RCxRQUFRLElBQUlPLEVBQUVQLFNBQU9rQixLQUFLZSxHQUFFLEVBQUdmLEtBQUtvQixRQUFHLElBQVNwQixLQUFLb0IsRUFBRSxHQUFHcEIsS0FBS29CLEdBQUdvSyxPQUFPbk0sR0FBR1csS0FBS0MsUUFBRyxJQUFTRCxLQUFLQyxFQUFFLEdBQUdELEtBQUtDLEdBQUd1TCxPQUFPbEosTUFFeFEzQixFQUFFbVosV0FBVyxXQUFXLElBQUlsYixFQUFFb0IsS0FBSyxPQUFPMkIsR0FBRSxTQUFTOUMsR0FBRyxPQUFPLEdBQUdBLEVBQUVlLEVBQUV5QixFQUFFeEMsRUFUeEUsU0FBWUQsR0FBRyxJQUFJQyxFQUFFNkMsRUFBRVksRUFBRWpELEVBQUVPLEVBQUVPLEVBQUV1QyxFQUFFdEMsRUFBRXFCLEVBQUU5QyxFQUFFNkUsRUFBRSxPQUFPN0IsR0FBRSxTQUFTNEIsR0FBRyxPQUFPQSxFQUFFM0QsR0FBRyxLQUFLLEVBQUUsT0FBSWhCLEVBQUU4RyxHQUFvQjdHLE9BQUUsSUFBU0QsRUFBRWdCLEVBQUVpWSxNQUFNLEdBQUcsbUJBQW9CalosRUFBRWdCLEVBQUVpWSxNQUFNalosRUFBRWdCLEVBQUVpWSxNQUFNalosRUFBRW9DLEdBQUdwQyxFQUFFZ0IsRUFBRWlZLE1BQWF4VyxFQUFFa0MsRUFIOUs1QixHQUFFLFNBQVMvQyxHQUFHLE9BQU9BLEVBQUVnQixHQUFHLEtBQUssRUFBRSxPQUFPaEIsRUFBRXFDLEVBQUUsRUFBRUksRUFBRXpDLEVBQUVtYixZQUFZQyxZQUFZNUUsSUFBSSxHQUFHLEtBQUssRUFBRXhXLEVBQUVnQixFQUFFLEVBQUVoQixFQUFFcUMsRUFBRSxFQUFFLE1BQU0sS0FBSyxFQUFFLE9BQU9yQyxFQUFFcUMsRUFBRSxFQUFFckMsRUFBRW9DLEVBQUUsS0FBS3BDLEVBQUVnRCxRQUFPLEdBQUksS0FBSyxFQUFFLE9BQU9oRCxFQUFFZ0QsUUFBTyxPQUdVLElBQTFHMkIsRUFBRTNCLFNBQTJHLEtBQUssRUFBUSxHQUFORixFQUFFNkIsRUFBRW5ELEVBQUssaUJBQWtCVixPQUFPLE9BQU80VixHQUFHLCtCQUErQixDQUFDRyxXQUFXN1csRUFBRTZXLGFBQWFILEdBQUcsdUNBQXVDLENBQUNHLFdBQVc3VyxFQUFFNlcsYUFBYXRWLEVBQUV0QixFQUFFb2IsUUFBTyxTQUFTaFosR0FBRyxZQUFPLElBQVNBLEVBQUUrVyxRQUFPdFYsRUFBRTdELEVBQUVvYixRQUFPLFNBQVNoWixHQUFHLFlBQU8sSUFBU0EsRUFBRStXLFFBQU81WCxFQUFFNkIsUUFBUTJCLElBQUl6RCxFQUFFaVMsS0FBSSxTQUFTblIsR0FBRyxJQUFJaEMsRUFDbmdCZ1gsR0FBR3JYLEVBQUVxQyxFQUFFNlcsS0FBSyxRQUFHLElBQVM3VyxFQUFFaVosS0FBSyxDQUFDLElBQUluYSxFQUFFa0IsRUFBRWlaLEtBQUtqYixFQUFFQSxFQUFFa0QsTUFBSyxTQUFTNUIsR0FBdUIsT0FBcEIzQixFQUFFdWEsYUFBYXBaLEVBQUVRLEdBQVUwQixRQUFRQyxRQUFRM0IsTUFBSyxPQUFPdEIsTUFBS3dDLEVBQUVRLFFBQVEyQixJQUFJbEIsRUFBRTBQLEtBQUksU0FBU25SLEdBQUcsWUFBTyxJQUFTQSxFQUFFOFcsTUFBTTlXLEVBQUU4VyxNQUFNclcsSUFBSVQsRUFBRThXLE9BQU9yVyxFQUx3UyxTQUFZOUMsR0FBRyxJQUFJQyxFQUFFb0UsU0FBUytSLGNBQWMsVUFBNEUsT0FBbEVuVyxFQUFFc2IsYUFBYSxNQUFNdmIsR0FBR0MsRUFBRXNiLGFBQWEsY0FBYyxhQUFvQixJQUFJbFksU0FBUSxTQUFTUCxHQUFHN0MsRUFBRXViLGlCQUFpQixRQUFPLFdBQVcxWSxPQUFLLEdBQUk3QyxFQUFFdWIsaUJBQWlCLFNBQVEsV0FBVzFZLE9BQUssR0FBSXVCLFNBQVNvWCxLQUFLQyxZQUFZemIsTUFLcGpCMGIsQ0FBRzNiLEVBQUU2VyxXQUFXeFUsRUFBRTZXLElBQUlsWixFQUFFK0csSUFBSTFELFFBQVFDLGNBQWFDLE1BQUssV0FBVyxJQUFJbEIsRUFBRWhDLEVBQUVjLEVBQUUsT0FBTzRCLEdBQUUsU0FBU3BCLEdBQUcsR0FBRyxHQUFHQSxFQUFFWCxFQUFFLE9BQU9xQixFQUFFdkIsT0FBTzhhLDZCQUE2QnZiLEVBQUVTLE9BQU8rYSxxQ0FBcUMxYSxFQUFFbkIsRUFBRXlDLEVBQUVkLEVBQUVVLEVBQUVoQyxHQUFHLEdBQUdjLEVBQUVLLEVBQUVHLEVBQUVILEVBQUVHLEVBQUVYLEVBQUUsUUFBTWpCLEVBQW9CZ0QsR0FBRSxTQUFTVixHQUMzYSxPQUQ4YXJDLEVBQUVnQixFQUFFc1ksT0FBT3RaLEVBQUVnQixFQUFFc1ksTUFBTUosSUFBSTdXLEVBQUVJLEVBQUVKLEVBQ25mZ1YsR0FBR3JYLEVBQUVBLEVBQUVnQixFQUFFc1ksTUFBTUosS0FBSyxJQUFJN1csRUFBRXJCLEVBQUUsRUFBRXFCLE9BQUUsR0FBZUEsS0FBT0ksRUFBRWtDLEVBQUV0QixRQUFRMkIsSUFBSSxDQUFDbkMsRUFBRXJCLEVBQUV6QixJQUFJLEdBQUcsR0FBRyxtQkFBb0IrYixjQUFjLE1BQU01YSxNQUFNLGlFQUE4TixPQUE3SndDLEVBQUV6RCxFQUFFb2IsUUFBTyxTQUFTaFosR0FBRyxZQUFPLElBQVNBLEVBQUU4VyxNQUFNOVcsRUFBRThXLE1BQU1yVyxJQUFJVCxFQUFFOFcsT0FBT3JXLEtBQUkwUSxLQUFJLFNBQVNuUixHQUFHLE9BQU9yQyxFQUFFNlcsV0FBV3hVLEVBQUU2VyxJQUFJbFosRUFBRStHLE1BQUsrVSxjQUFjdlEsTUFBTSxLQUFLakMsRUFBRzVGLElBQUlqRCxFQUFFVCxFQUFTeUMsRUFBRWtDLEVBQUVpWCw2QkFBNkJHLFFBQVEsR0FBRyxLQUFLLEVBQUV0YixFQUFFZSxFQUFFbUQsRUFBRW5ELEVBQUV4QixFQUFFNkMsRUFBRSxJQUFJbVosZ0JBQWdCLEVBQUUsR0FBR2hjLEVBQUV3QixFQUFFcUcsT0FBTzdILEVBQUU2QyxFQUFFN0IsRUFBRWhCLEVBQUV3QixFQUFFeWEsR0FBR0MsY0FBY2xjLEVBQUU2QyxFQUFFLENBQUNzWixXQUFVLEVBQ3JmQyxPQUFNLEVBQUdqVCxHQUFHLG9CQUFxQmtULHVCQUF1QixFQUFFLElBQUlyYyxFQUFFd0IsRUFBRXlhLEdBQUdLLG1CQUFtQnRiLEdBQUcyRCxFQUFFM0QsRUFBRSxFQUFFLE1BQU0sS0FBSyxFQUFxRSxHQUFuRWhCLEVBQUU2QyxFQUFFd0IsU0FBUytSLGNBQWMsWUFBVXhSLEVBQUU1RSxFQUFFNkMsRUFBRXdULFdBQVcsU0FBUyxRQUFZelIsRUFBRTVFLEVBQUU2QyxFQUFFd1QsV0FBVyxRQUFRLEtBQVEsT0FBTzdQLE1BQU0sbUVBQW1FN0IsRUFBRTNCLFNBQVNoRCxFQUFFNEMsRUFBRWdDLEVBQUU1RSxFQUFFd0IsRUFBRXFHLE9BQU83SCxFQUFFNkMsRUFBRTdDLEVBQUV3QixFQUFFMGEsY0FBY2xjLEVBQUU2QyxHQUFFLEdBQUcsRUFBRyxJQUFJLEtBQUssRUFBRTdDLEVBQUVrQyxFQUFFLElBQUlsQyxFQUFFd0IsRUFBRSthLGFBQWF2YyxFQUFFOEcsR0FBRSxFQUFHbkMsRUFBRTNELEVBQUUsTUFNM1V3YixDQUFHeGMsR0FBRyxHQUFHLEdBQUdDLEVBQUVlLEVBQUV5QixFQUFFeEMsRUFMNUYsU0FBWUQsR0FBRyxJQUFJQyxFQUFFNkMsRUFBRVksRUFBRWpELEVBQUVPLEVBQUVPLEVBQUV1QyxFQUFFdEMsRUFBRSxPQUFPdUIsR0FBRSxTQUFTRixHQUFHLEdBQUcsR0FBR0EsRUFBRTdCLEVBQUcsT0FBR2hCLEVBQUVnQixFQUFFc1ksT0FBT3RaLEVBQUVnQixFQUFFc1ksTUFBTUosS0FBS2xaLEVBQUU0RixJQUFJNUYsRUFBRWdCLEVBQUVzWSxNQUFNSixJQUFXclcsRUFBRUcsVUFBU2hELEVBQUVtQyxHQUFFLEVBQU9uQyxFQUFFZ0IsRUFBRXNZLE9BQVF0WixFQUFFZ0IsRUFBRXNZLE1BQU1KLEtBQWtCbFosRUFBRTRGLEVBQUU1RixFQUFFZ0IsRUFBRXNZLE1BQU1KLElBQVd6VyxFQUFFSSxFQUFFd1UsR0FBR3JYLEVBQUVBLEVBQUVnQixFQUFFc1ksTUFBTUosS0FBSyxTQUE5RHJXLEVBQUU3QixFQUFFLElBQW9ILElBQXZELEdBQUc2QixFQUFFN0IsSUFBSWYsRUFBRTRDLEVBQUVyQixFQUFFeEIsRUFBRWtDLEVBQUV1YSxVQUFVeGMsSUFBSTZDLEVBQUVLLEVBQUU3QyxPQUFPNlcsS0FBS25YLEVBQUUyQyxJQUFRZSxFQUFFWixFQUFFbEIsUUFBUThCLEVBQUV2RCxLQUFLdUQsRUFBRVosRUFBRWxCLE9BQU9uQixFQUFFaUQsRUFBRXRELE1BQU1KLEVBQUVrQyxFQUFFcVksYUFBYTlaLEVBQUVULEVBQUUyQyxFQUFFbEMsSUFBVyxHQUFQVCxFQUFFMkMsRUFBRSxHQUFNM0MsRUFBRWdCLEVBQUU0VixVQUFVLElBQUk1VixFQUFFbUMsRUFBRW5ELEVBQUVnQixFQUFFNFYsV0FBV3JWLEVBQUVQLEVBQUVZLFFBQVFMLEVBQUVwQixLQUFLb0IsRUFBRVAsRUFBRVksT0FBT2tDLEVBQUV2QyxFQUFFbkIsTUFBTW9YLEdBQUd4WCxFQUFFOEQsR0FBR3RDLEVBQUV4QixFQUFFb0MsRUFBRXBDLEVBQUVvQyxFQUFFLEdBQUdwQyxFQUFFOGEsV0FBV3RaLEdBQUdxQixFQUFFN0IsRUFBRSxLQUs3WTBiLENBQUcxYyxHQUFHLEdBQUd5QyxFQUFFeEMsRUFEekcsU0FBWUQsR0FBRyxJQUFJQyxFQUFFNkMsRUFBSXJDLEVBQUVPLEVBQUVPLEVBQUV1QyxFQUFFLE9BQU9mLEdBQUUsU0FBU3ZCLEdBQUcsT0FBT0EsRUFBRVIsR0FBRyxLQUFLLEVBQUUsSUFBSWhCLEVBQUVtQyxFQUFFLE9BQU9YLEVBQUV3QixTQUFTLElBQUloRCxFQUFFcUIsRUFBRSxDQUFDRyxFQUFFUixFQUFFLEVBQUUsTUFBTWYsRUFBRWtELEVBQUVuRCxFQUFFcUIsR0FBR3lCLEVBQUU3QyxFQUFFMkIsT0FBTyxLQUFLLEVBQUUsR0FBR2tCLEVBQUUzQyxLQUFLLENBQUNxQixFQUFFUixFQUFFLEVBQUUsTUFBZ0IsT0FBT3lCLEVBQUVqQixHQUFuQmtDLEVBQUVaLEVBQUUxQyxTQUFxQixHQUFHLEtBQUssRUFBRTBDLEVBQUU3QyxFQUFFMkIsT0FBT0osRUFBRVIsRUFBRSxFQUFFLE1BQU0sS0FBSyxFQUFFaEIsRUFBRXFCLE9BQUUsRUFBTyxLQUFLLEVBQUUsR0FBR3JCLEVBQUV3QyxFQUFFLENBQWlELElBQWhEL0IsRUFBRSxJQUFJVCxFQUFFd0IsRUFBRW1iLDZCQUE2QjNiLEVBQUVtQyxFQUFFbkQsRUFBRXdDLEdBQU9qQixFQUFFUCxFQUFFWSxRQUFRTCxFQUFFcEIsS0FBS29CLEVBQUVQLEVBQUVZLE9BQU9rQyxFQUFFdkMsRUFBRW5CLE1BQU1LLEVBQUVtWCxVQUFVOVQsR0FBRzlELEVBQUVrQyxFQUFFMGEsY0FBY25jLEdBQUdBLEVBQUVpWSxTQUFTMVksRUFBRXdDLE9BQUUsRUFBT3hDLEVBQUVtQyxHQUFFLEVBQUdYLEVBQUVSLEVBQUUsTUFDM1Q2YixDQUFHN2MsR0FBRyxPQUFnTStCLEVBQUV3WSxhQUFhLFNBQVN2YSxFQUFFQyxHQUFHbUIsS0FBS2MsRUFBRWQsS0FBS2MsRUFBRXFZLGFBQWF2YSxFQUFFQyxHQUFHbUIsS0FBS3VCLEVBQUUzQyxHQUFHQyxHQUFHOEIsRUFBRSthLHFCQUFxQixXQUFXMWIsS0FBS3VCLEVBQUUsR0FBR3ZCLEtBQUtjLEdBQUdkLEtBQUtjLEVBQUU0YSx3QkFDdGIvYSxFQUFFZ2IsS0FBSyxTQUFTL2MsRUFBRUMsR0FBRyxJQUFXeUQsRUFBRWpELEVBQUVPLEVBQUVPLEVBQUV1QyxFQUFFdEMsRUFBRXFCLEVBQUU5QyxFQUFFNkUsRUFBdkI5QixFQUFFMUIsS0FBdUIsT0FBTzJCLEdBQUUsU0FBUzRCLEdBQUcsT0FBT0EsRUFBRTNELEdBQUcsS0FBSyxFQUFFLE9BQUk4QixFQUFFOUIsRUFBRTJZLFFBQXlCalcsRUFBRSxLQUFLLE1BQVN6RCxFQUFZK2MsWUFBWUMsTUFBTWhkLEdBQVV3QyxFQUFFa0MsRUFBRTdCLEVBQUVLLEVBQUUsSUFBM0V3QixFQUFFM0IsU0FBNEUsS0FBSyxFQUFFLE9BQU9QLEVBQUVrQyxFQUFFN0IsRUFBRW9ZLGFBQWEsR0FBRyxLQUFLLEVBQStDLElBQTdDemEsRUFBRSxJQUFJcUMsRUFBRXRCLEVBQUUwYixlQUFlbGMsRUFBRW1DLEVBQUU3QyxPQUFPNlcsS0FBS25YLElBQVF1QixFQUFFUCxFQUFFWSxRQUFRTCxFQUFFcEIsS0FBS29CLEVBQUVQLEVBQUVZLE9BQU8sR0FBR2tDLEVBQUV2QyxFQUFFbkIsTUFBTW9CLEVBQUVzQixFQUFFOUIsRUFBRTJZLE9BQU83VixHQUFHLENBQUM5RCxFQUFFLENBQUMsSUFBSXFDLEVBQUVyQyxFQUFFOEQsR0FBRyxPQUFPdEMsRUFBRXlXLE1BQU0sSUFBSyxRQUFRLElBQUk1WCxFQUFFeUMsRUFBRVQsRUFBRWIsRUFBRTBXLFFBQWtGLEdBQTFFN1gsSUFBSUEsRUFBRSxJQUFJd1QsR0FBRy9RLEVBQUV0QixFQUFFc0IsRUFBRUYsR0FBR0UsRUFBRVQsRUFBRWIsRUFBRTBXLFFBQVE3WCxHQUFHLElBQUlBLEVBQUV3QyxJQUFJeEMsRUFBRXdDLEVBQUV4QyxFQUFFbUIsRUFBRTJiLGlCQUFvQixvQkFBcUJDLGtCQUN0Zi9hLGFBQWErYSxpQkFBa0IsSUFBSWpjLEVBQUVrQixFQUFFZ2IsV0FBZTFiLEVBQUVVLEVBQUVpYixnQkFBZ0Isb0JBQXFCQyxrQkFBa0JsYixhQUFha2Isa0JBQWtCcGMsRUFBRWtCLEVBQUVtYixhQUFhN2IsRUFBRVUsRUFBRW9iLGdCQUFnQnRjLEVBQUVrQixFQUFFbUQsTUFBTTdELEVBQUVVLEVBQUVvRCxRQUFROUQsRUFBRSxDQUFDMlQsT0FBT2pWLEVBQUV3QyxFQUFFMkMsTUFBTXJFLEVBQUVzRSxPQUFPOUQsSUFBR1IsRUFBRWQsRUFBRVcsR0FBSTZHLE9BQU9yQyxNQUFNN0QsRUFBRTZELE1BQU1yRSxFQUFFMEcsT0FBT3BDLE9BQU85RCxFQUFFOEQsT0FBT3RFLEVBQUVnVSxjQUFjaFUsRUFBRWlVLFVBQVUvVSxFQUFFbUIsRUFBRTZULGNBQWNoVixFQUFFd0MsR0FBRzFCLEVBQUV1YyxXQUFXdmMsRUFBRXdjLFdBQVcsRUFBRXhjLEVBQUV5YyxLQUFLemMsRUFBRXljLEtBQUt6YyxFQUFFMGMsY0FBY3hiLEdBQUdoQyxFQUFFbUIsRUFBRTZULGNBQWMsR0FBR2hWLEVBQUVzQixFQUFFLE1BQU0zQixFQUFFLElBQUssYUFDclgsS0FEa1lLLEVBQUV5QyxFQUFFVCxFQUFFYixFQUFFMFcsV0FBWTdYLEVBQUUsSUFBSWtXLEdBQUd6VCxFQUFFdEIsR0FBR3NCLEVBQUVULEVBQUViLEVBQUUwVyxRQUFRN1gsR0FDcGZBLEVBQUUrWSxPQUFPL1ksRUFBRStZLEtBQUssSUFBSS9ZLEVBQUVXLEVBQUU4YyxtQkFBbUJ6ZCxFQUFFK1ksS0FBS3pMLE1BQU10TCxFQUFFbkMsUUFBWXlCLEVBQUUsRUFBRUEsRUFBRVUsRUFBRW5DLFNBQVN5QixFQUFFLENBQUNSLEVBQUVrQixFQUFFVixHQUFHLElBQUlOLEVBQUVoQixFQUFFK1ksS0FBSzVXLEVBQUVuQixFQUFFMGMsZUFBZTlhLEVBQUV0QixFQUFNaUIsRUFBRXpCLEVBQUUwRixFQUFNakcsRUFBRSxJQUFJOFIsR0FBOEcsR0FBM0dySSxHQUFFekosRUFBRSxFQUFFZ0MsRUFBRStOLEdBQUd0RyxHQUFFekosRUFBRSxFQUFFZ0MsRUFBRXFPLEdBQUc1RyxHQUFFekosRUFBRSxFQUFFZ0MsRUFBRTZDLFFBQVE0RSxHQUFFekosRUFBRSxFQUFFZ0MsRUFBRTRDLE9BQU82RSxHQUFFekosRUFBRSxFQUFFZ0MsRUFBRW9HLFVBQVVxQixHQUFFekosRUFBRSxFQUFFZ0MsRUFBRW1OLEdBQUduTixFQUFFNk4sR0FBRzdQLEVBQUUrUixJQUFJblEsRUFBRVIsS0FBS1gsRUFBRTRCLEVBQUVMLEdBQU16QixFQUFFeUYsRUFBRSxJQUFJdkYsRUFBRSxFQUFFQSxFQUFFRixFQUFFeUYsRUFBRTFHLFNBQVNtQixFQUFFLENBQVUsSUFBSWlCLEtBQWIxQixFQUFFTyxFQUFFeUYsRUFBRXZGLElBQVd5RyxXQUEwQjdFLEdBQVRULEVBQUVuQyxFQUFFK1ksTUFBUzRFLHNCQUFzQnBiLEVBQUVqQixFQUFFZixFQUFFTixPQUFPNEUsT0FBTzVFLE9BQU80RSxPQUFPLEdBQUd0RSxHQUFHLENBQUNrSCxXQUFXeEYsRUFBRTFCLEVBQUVrSCxXQUFXLElBQWF1QyxHQUFUL0gsRUFBRSxJQUFJNlAsR0FBTyxFQUFFdlIsRUFBRW1CLEdBQUdzSSxHQUFFL0gsRUFBRSxFQUFFMUIsRUFBRXFCLEdBQUdvSSxHQUFFL0gsRUFBRSxFQUFFMUIsRUFBRTBCLEdBQUcxQixFQUFFa0gsWUFBWXVDLEdBQUUvSCxFQUFFLEVBQUUxQixFQUFFa0gsWUFDcGZsSCxFQUFFNlAsR0FBR25PLEVBQUU4UCxJQUFJblAsRUFBRWpCLEtBQUtRLEVBQUVJLEVBQUVoQyxHQUFHLEdBQUdPLEVBQUVtRSxFQUFFLElBQUlqRSxFQUFFLEVBQUVBLEVBQUVGLEVBQUVtRSxFQUFFcEYsU0FBU21CLEVBQVc0QixHQUFUVCxFQUFFbkMsRUFBRStZLE1BQVNwSCxrQkFBa0JwUCxFQUFFakIsRUFBRWYsRUFBRU8sRUFBRW1FLEVBQUVqRSxHQUFZZ0osR0FBVC9ILEVBQUUsSUFBSW9QLEdBQU8sRUFBRTlRLEVBQUV1UCxHQUFHdlAsRUFBRW9ILE9BQU9xQyxHQUFFL0gsRUFBRSxFQUFFMUIsRUFBRW9ILE9BQU9wSCxFQUFFNlMsT0FBT3BKLEdBQUUvSCxFQUFFLEVBQUUxQixFQUFFNlMsT0FBTzdTLEVBQUU4UyxhQUFhckosR0FBRS9ILEVBQUUsRUFBRTFCLEVBQUU4UyxhQUFhOVMsRUFBRTZQLEdBQUduTyxFQUFFcVAsSUFBSTFPLEVBQUVqQixLQUFLUSxFQUFFSSxFQUFFaEMsR0FBR1AsRUFBRUEsRUFBRStZLEtBQUssTUFBTXBaLEVBQUUsUUFBUUssRUFBRSxJQUFtQixPQUFmd0MsRUFBRXhDLEVBQUVOLEVBQUV5QixFQUFFMFcsT0FBYzFXLEVBQUV5VyxNQUFNLElBQUssUUFBUXhYLEVBQUV3ZCxjQUFjM2QsT0FBTzRFLE9BQU81RSxPQUFPNEUsT0FBTyxHQUFHckMsR0FBRyxDQUFDcVYsT0FBT25ZLEVBQUVtZSxVQUFVeGEsS0FBSyxNQUFNLElBQUssY0FBYWtCLEVBQUUvQixHQUFJcVYsT0FBT25ZLEVBQUU2RSxFQUFFc1osVUFBVXhhLEVBQUVqRCxFQUFFMGQsa0JBQWtCdlosR0FBRyxNQUFNLFFBQVEsTUFBTTFELE1BQU0sK0JBQ2plTSxFQUFFeVcsS0FBSyxNQUFtQixPQUFablYsRUFBRVosRUFBRTZhLEtBQUt0YyxHQUFVZ0MsRUFBRWtDLEVBQUU3QixFQUFFSyxFQUFFLEdBQUcsS0FBSyxFQUFFMUMsRUFBRWlZLFNBQVMvVCxFQUFFM0QsRUFBRSxPQUtsRWUsRUFBRWdXLFVBQVUsU0FBUy9YLEVBQUVDLEdBQUdtQixLQUFLd1YsVUFBVTNXLEdBQUcsS0FBS0QsR0FBR29ELEVBQUUsV0FBV3VULElBQUl2VCxFQUFFLGFBQWEsQ0FBQ2diLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBS3lUdmMsRUFBRWlYLEdBQUdyWSxXQUFZZ04sTUFBTSxXQUFXdk0sS0FBS0osRUFBRTJNLFNBQ2plNUwsRUFBRThZLE1BQU0sV0FBMEIsT0FBZnpaLEtBQUtKLEVBQUU2WixRQUFleFgsUUFBUUMsV0FBV3ZCLEVBQUVnVyxVQUFVLFNBQVMvWCxHQUFHb0IsS0FBS0osRUFBRStXLFVBQVUvWCxJQUFJK0IsRUFBRW1aLFdBQVcsV0FBVyxJQUFJbGIsRUFBRW9CLEtBQUssT0FBTzJCLEdBQUUsU0FBUzlDLEdBQUcsT0FBT3dDLEVBQUV4QyxFQUFFRCxFQUFFZ0IsRUFBRWthLGFBQWEsT0FBTW5aLEVBQUVnYixLQUFLLFNBQVMvYyxFQUFFQyxHQUFHLElBQUk2QyxFQUFFMUIsS0FBSyxPQUFPMkIsR0FBRSxTQUFTVyxHQUFHLE9BQU9qQixFQUFFaUIsRUFBRVosRUFBRTlCLEVBQUUrYixLQUFLL2MsRUFBRUMsR0FBRyxPQUFNOEIsRUFBRStZLFdBQVcsU0FBUzlhLEdBQUdvQixLQUFLSixFQUFFOFosV0FBVzlhLElBQUlvRCxFQUFFLE9BQU80VixJQUMvVTVWLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLE1BQ3pSQSxFQUFFLGlCQUFpQixDQUFDbWIsS0FBSyxFQUFFQyxlQUFlLEVBQUVDLFNBQVMsRUFBRUMsZUFBZSxFQUFFQyxnQkFBZ0IsRUFBRUMsVUFBVSxFQUFFQyxnQkFBZ0IsRUFBRUMsU0FBUyxFQUFFQyxVQUFVLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxHQUFHQyxjQUFjLEdBQUdDLGVBQWUsR0FBR0MsV0FBVyxHQUFHQyxZQUFZLEdBQUdDLFdBQVcsR0FBR0MsWUFBWSxHQUFHQyxXQUFXLEdBQUdDLFlBQVksR0FBR0MsV0FBVyxHQUFHQyxZQUFZLEdBQUdDLFdBQVcsR0FBR0MsWUFBWSxHQUFHQyxTQUFTLEdBQUdDLFVBQVUsR0FBR0MsVUFBVSxHQUFHQyxXQUFXLEdBQUdDLFdBQVcsR0FBR0MsWUFBWSxHQUFHQyxVQUFVLEdBQUdDLFdBQVcsR0FBR0MsZ0JBQWdCLEdBQUdDLGlCQUFpQixLQUM5ZW5kLEVBQUUsc0JBQXNCLENBQUNvYixlQUFlLEVBQUVDLFNBQVMsRUFBRUMsZUFBZSxFQUFFSSxTQUFTLEVBQUVFLFdBQVcsRUFBRUUsY0FBYyxHQUFHRSxXQUFXLEdBQUdFLFdBQVcsR0FBR0UsV0FBVyxHQUFHRSxXQUFXLEdBQUdFLFdBQVcsR0FBR0UsU0FBUyxHQUFHRSxVQUFVLEdBQUdFLFdBQVcsR0FBR0UsVUFBVSxHQUFHRSxnQkFBZ0IsS0FDelBsZCxFQUFFLHVCQUF1QixDQUFDdWIsZ0JBQWdCLEVBQUVDLFVBQVUsRUFBRUMsZ0JBQWdCLEVBQUVFLFVBQVUsRUFBRUUsV0FBVyxHQUFHRSxlQUFlLEdBQUdFLFlBQVksR0FBR0UsWUFBWSxHQUFHRSxZQUFZLEdBQUdFLFlBQVksR0FBR0UsWUFBWSxHQUFHRSxVQUFVLEdBQUdFLFdBQVcsR0FBR0UsWUFBWSxHQUFHRSxXQUFXLEdBQUdFLGlCQUFpQixLQUFLbmQsRUFBRSx5QkFBeUIsQ0FBQ21iLEtBQUssSUFBSW5iLEVBQUUsVUFBVSxvQkFBcUJwQixLQUFLWixRQ25GdFZvZixFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhRSxRQUdyQixJQUFJQyxFQUFTTixFQUF5QkUsR0FBWSxDQUdqREcsUUFBUyxJQU9WLE9BSEFFLEVBQW9CTCxHQUFVMWUsS0FBSzhlLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNKLEdBR3BFSyxFQUFPRCxRQ3JCZkosRUFBb0J6ZixFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmSCxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU9PLE1BQVEsSUFBSXNHLFNBQVMsY0FBYixHQUNkLE1BQU9qSCxHQUNSLEdBQXNCLGlCQUFYSyxPQUFxQixPQUFPQSxRQUxqQixtQ0NLeEIsTUFzQk1rZ0IsRUFBYyxJQW1DZEMsRUFBd0IsSUFDeEJDLEVBQXdCLElBR3hCQyxFQUEwQixJQUMxQkMsRUFBaUIsSUFDakJDLEVBQXNCLEtBQ3RCQyxFQUF5QixLQUN6QkMsRUFBZ0IsS0FLaEJDLEVBQWUsS0FHZkMsRUFBMkIsS0FFM0JDLEVBQW1CLEtBR25CQyxFQUFvQixLQUVwQkMsRUFBa0IsS0FDbEJDLEVBQVksS0FDWkMsRUFBZ0IsS0FHaEJDLEVBQXFCLEtBR3JCQyxFQUFhLEtBR2JDLEVBQWMsS0FDZEMsRUFBcUIsS0FPckJDLEVBQXVCLE1BQ3ZCQyxFQUF3QixNQUN4QkMsRUFBd0IsTUFDeEJDLEVBQXdCLE1BMEJ4QkMsRUFBc0IsS0FDdEJDLEVBQW9CLEtBQ3BCQyxFQUFvQixLQUNwQkMsRUFBc0IsS0FDdEJDLEVBQWtCLEtBQ2xCQyxFQUFtQixLQU1uQkMsRUFBaUIsSUFDakJDLEVBQWUsS0FRZkMsRUFBaUIsT0FDakJDLEVBQXVCLGNBR3ZCQyxFQUFnQixLQWlCaEJDLEVBQWtCLE1BQ2xCQyxFQUFtQixNQVVuQkMsRUFBUSxTQUVSQyxFQUFlLEtBTXJCLE1BQU1DLEVBRUw5SCxpQkFBa0J2RCxFQUFNc0wsUUFFRTNDLElBQXBCeGYsS0FBS29pQixhQUEyQnBpQixLQUFLb2lCLFdBQWEsSUFFdkQsTUFBTTVNLEVBQVl4VixLQUFLb2lCLGdCQUVJNUMsSUFBdEJoSyxFQUFXcUIsS0FFZnJCLEVBQVdxQixHQUFTLEtBSTRCLElBQTVDckIsRUFBV3FCLEdBQU9sTixRQUFTd1ksSUFFL0IzTSxFQUFXcUIsR0FBT3JVLEtBQU0yZixHQU0xQkUsaUJBQWtCeEwsRUFBTXNMLEdBRXZCLFFBQXlCM0MsSUFBcEJ4ZixLQUFLb2lCLFdBQTJCLE9BQU8sRUFFNUMsTUFBTTVNLEVBQVl4VixLQUFLb2lCLFdBRXZCLFlBQTZCNUMsSUFBdEJoSyxFQUFXcUIsS0FBb0UsSUFBNUNyQixFQUFXcUIsR0FBT2xOLFFBQVN3WSxHQUl0RUcsb0JBQXFCekwsRUFBTXNMLEdBRTFCLFFBQXlCM0MsSUFBcEJ4ZixLQUFLb2lCLFdBQTJCLE9BRXJDLE1BQ01HLEVBRFl2aUIsS0FBS29pQixXQUNVdkwsR0FFakMsUUFBdUIySSxJQUFsQitDLEVBQThCLENBRWxDLE1BQU0zYixFQUFRMmIsRUFBYzVZLFFBQVN3WSxJQUVwQixJQUFadmIsR0FFSjJiLEVBQWN6VCxPQUFRbEksRUFBTyxJQVFoQzdELGNBQWV5ZixHQUVkLFFBQXlCaEQsSUFBcEJ4ZixLQUFLb2lCLFdBQTJCLE9BRXJDLE1BQ01HLEVBRFl2aUIsS0FBS29pQixXQUNVSSxFQUFNM0wsTUFFdkMsUUFBdUIySSxJQUFsQitDLEVBQThCLENBRWxDQyxFQUFNQyxPQUFTemlCLEtBR2YsTUFBTTBpQixFQUFRSCxFQUFjelcsTUFBTyxHQUVuQyxJQUFNLElBQUloTCxFQUFJLEVBQUdXLEVBQUlpaEIsRUFBTTVqQixPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFekM0aEIsRUFBTzVoQixHQUFJRixLQUFNWixLQUFNd2lCLEdBSXhCQSxFQUFNQyxPQUFTLE9BUWxCLE1BQU1FLEVBQU8sR0FFYixJQUFNLElBQUk3aEIsRUFBSSxFQUFHQSxFQUFJLElBQUtBLElBRXpCNmhCLEVBQU03aEIsSUFBUUEsRUFBSSxHQUFLLElBQU0sSUFBTyxFQUFNc0IsU0FBVSxJQU9yRCxNQUFNd2dCLEVBQVUvaUIsS0FBS29ILEdBQUssSUFDcEI0YixFQUFVLElBQU1oakIsS0FBS29ILEdBRzNCLFNBQVM2YixJQUVSLE1BQU1DLEVBQXFCLFdBQWhCbGpCLEtBQUt3QyxTQUF3QixFQUNsQzJnQixFQUFxQixXQUFoQm5qQixLQUFLd0MsU0FBd0IsRUFDbEM0Z0IsRUFBcUIsV0FBaEJwakIsS0FBS3dDLFNBQXdCLEVBQ2xDNmdCLEVBQXFCLFdBQWhCcmpCLEtBQUt3QyxTQUF3QixFQU94QyxPQU5hc2dCLEVBQVcsSUFBTEksR0FBY0osRUFBTUksR0FBTSxFQUFJLEtBQVNKLEVBQU1JLEdBQU0sR0FBSyxLQUFTSixFQUFNSSxHQUFNLEdBQUssS0FBUyxJQUM1R0osRUFBVyxJQUFMSyxHQUFjTCxFQUFNSyxHQUFNLEVBQUksS0FBUyxJQUFNTCxFQUFNSyxHQUFNLEdBQUssR0FBTyxJQUFTTCxFQUFNSyxHQUFNLEdBQUssS0FBUyxJQUM5R0wsRUFBVyxHQUFMTSxFQUFZLEtBQVNOLEVBQU1NLEdBQU0sRUFBSSxLQUFTLElBQU1OLEVBQU1NLEdBQU0sR0FBSyxLQUFTTixFQUFNTSxHQUFNLEdBQUssS0FDckdOLEVBQVcsSUFBTE8sR0FBY1AsRUFBTU8sR0FBTSxFQUFJLEtBQVNQLEVBQU1PLEdBQU0sR0FBSyxLQUFTUCxFQUFNTyxHQUFNLEdBQUssTUFHOUVDLGNBSWIsU0FBU0MsRUFBT3BrQixFQUFPdUgsRUFBS1IsR0FFM0IsT0FBT2xHLEtBQUtrRyxJQUFLUSxFQUFLMUcsS0FBSzBHLElBQUtSLEVBQUsvRyxJQW1DdEMsU0FBU3FrQixFQUFNMWlCLEVBQUdFLEVBQUdkLEdBRXBCLE9BQVMsRUFBSUEsR0FBTVksRUFBSVosRUFBSWMsRUEyRjVCLFNBQVN5aUIsRUFBY3RrQixHQUV0QixPQUFxQyxJQUE1QkEsRUFBVUEsRUFBUSxJQUF5QixJQUFWQSxFQVUzQyxTQUFTdWtCLEVBQWlCdmtCLEdBRXpCLE9BQU9hLEtBQUs2UCxJQUFLLEVBQUc3UCxLQUFLcUwsTUFBT3JMLEtBQUs4UCxJQUFLM1EsR0FBVWEsS0FBSytQLE1Bd0oxRCxNQUFNNFQsRUFFTDdhLFlBQWFoSSxFQUFJLEVBQUdFLEVBQUksR0FFdkJiLEtBQUtXLEVBQUlBLEVBQ1RYLEtBQUthLEVBQUlBLEVBSU51RCxZQUVILE9BQU9wRSxLQUFLVyxFQUlUeUQsVUFBT3BGLEdBRVZnQixLQUFLVyxFQUFJM0IsRUFJTnFGLGFBRUgsT0FBT3JFLEtBQUthLEVBSVR3RCxXQUFRckYsR0FFWGdCLEtBQUthLEVBQUk3QixFQUlWMk4sSUFBS2hNLEVBQUdFLEdBS1AsT0FIQWIsS0FBS1csRUFBSUEsRUFDVFgsS0FBS2EsRUFBSUEsRUFFRmIsS0FJUnlqQixVQUFXQyxHQUtWLE9BSEExakIsS0FBS1csRUFBSStpQixFQUNUMWpCLEtBQUthLEVBQUk2aUIsRUFFRjFqQixLQUlSMmpCLEtBQU1oakIsR0FJTCxPQUZBWCxLQUFLVyxFQUFJQSxFQUVGWCxLQUlSNGpCLEtBQU0vaUIsR0FJTCxPQUZBYixLQUFLYSxFQUFJQSxFQUVGYixLQUlSNmpCLGFBQWNqZCxFQUFPNUgsR0FFcEIsT0FBUzRILEdBRVIsS0FBSyxFQUFHNUcsS0FBS1csRUFBSTNCLEVBQU8sTUFDeEIsS0FBSyxFQUFHZ0IsS0FBS2EsRUFBSTdCLEVBQU8sTUFDeEIsUUFBUyxNQUFNLElBQUljLE1BQU8sMEJBQTRCOEcsR0FJdkQsT0FBTzVHLEtBSVI4akIsYUFBY2xkLEdBRWIsT0FBU0EsR0FFUixLQUFLLEVBQUcsT0FBTzVHLEtBQUtXLEVBQ3BCLEtBQUssRUFBRyxPQUFPWCxLQUFLYSxFQUNwQixRQUFTLE1BQU0sSUFBSWYsTUFBTywwQkFBNEI4RyxJQU14RG1kLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxZQUFhM0ksS0FBS1csRUFBR1gsS0FBS2EsR0FJM0NtakIsS0FBTS9qQixHQUtMLE9BSEFELEtBQUtXLEVBQUlWLEVBQUVVLEVBQ1hYLEtBQUthLEVBQUlaLEVBQUVZLEVBRUpiLEtBSVJpa0IsSUFBS2hrQixFQUFHTSxHQUVQLFlBQVdpZixJQUFOamYsR0FFSm9DLFFBQVF1aEIsS0FBTSx5RkFDUGxrQixLQUFLbWtCLFdBQVlsa0IsRUFBR00sS0FJNUJQLEtBQUtXLEdBQUtWLEVBQUVVLEVBQ1pYLEtBQUthLEdBQUtaLEVBQUVZLEVBRUxiLE1BSVJva0IsVUFBVzlnQixHQUtWLE9BSEF0RCxLQUFLVyxHQUFLMkMsRUFDVnRELEtBQUthLEdBQUt5QyxFQUVIdEQsS0FJUm1rQixXQUFZdmxCLEVBQUdDLEdBS2QsT0FIQW1CLEtBQUtXLEVBQUkvQixFQUFFK0IsRUFBSTlCLEVBQUU4QixFQUNqQlgsS0FBS2EsRUFBSWpDLEVBQUVpQyxFQUFJaEMsRUFBRWdDLEVBRVZiLEtBSVJxa0IsZ0JBQWlCcGtCLEVBQUdxRCxHQUtuQixPQUhBdEQsS0FBS1csR0FBS1YsRUFBRVUsRUFBSTJDLEVBQ2hCdEQsS0FBS2EsR0FBS1osRUFBRVksRUFBSXlDLEVBRVR0RCxLQUlSc2tCLElBQUtya0IsRUFBR00sR0FFUCxZQUFXaWYsSUFBTmpmLEdBRUpvQyxRQUFRdWhCLEtBQU0seUZBQ1Bsa0IsS0FBS3VrQixXQUFZdGtCLEVBQUdNLEtBSTVCUCxLQUFLVyxHQUFLVixFQUFFVSxFQUNaWCxLQUFLYSxHQUFLWixFQUFFWSxFQUVMYixNQUlSd2tCLFVBQVdsaEIsR0FLVixPQUhBdEQsS0FBS1csR0FBSzJDLEVBQ1Z0RCxLQUFLYSxHQUFLeUMsRUFFSHRELEtBSVJ1a0IsV0FBWTNsQixFQUFHQyxHQUtkLE9BSEFtQixLQUFLVyxFQUFJL0IsRUFBRStCLEVBQUk5QixFQUFFOEIsRUFDakJYLEtBQUthLEVBQUlqQyxFQUFFaUMsRUFBSWhDLEVBQUVnQyxFQUVWYixLQUlSeWtCLFNBQVV4a0IsR0FLVCxPQUhBRCxLQUFLVyxHQUFLVixFQUFFVSxFQUNaWCxLQUFLYSxHQUFLWixFQUFFWSxFQUVMYixLQUlSMGtCLGVBQWdCaEIsR0FLZixPQUhBMWpCLEtBQUtXLEdBQUsraUIsRUFDVjFqQixLQUFLYSxHQUFLNmlCLEVBRUgxakIsS0FJUjJrQixPQUFRMWtCLEdBS1AsT0FIQUQsS0FBS1csR0FBS1YsRUFBRVUsRUFDWlgsS0FBS2EsR0FBS1osRUFBRVksRUFFTGIsS0FJUjRrQixhQUFjbEIsR0FFYixPQUFPMWpCLEtBQUswa0IsZUFBZ0IsRUFBSWhCLEdBSWpDbUIsYUFBYzVqQixHQUViLE1BQU1OLEVBQUlYLEtBQUtXLEVBQUdFLEVBQUliLEtBQUthLEVBQ3JCeEIsRUFBSTRCLEVBQUU2akIsU0FLWixPQUhBOWtCLEtBQUtXLEVBQUl0QixFQUFHLEdBQU1zQixFQUFJdEIsRUFBRyxHQUFNd0IsRUFBSXhCLEVBQUcsR0FDdENXLEtBQUthLEVBQUl4QixFQUFHLEdBQU1zQixFQUFJdEIsRUFBRyxHQUFNd0IsRUFBSXhCLEVBQUcsR0FFL0JXLEtBSVJ1RyxJQUFLdEcsR0FLSixPQUhBRCxLQUFLVyxFQUFJZCxLQUFLMEcsSUFBS3ZHLEtBQUtXLEVBQUdWLEVBQUVVLEdBQzdCWCxLQUFLYSxFQUFJaEIsS0FBSzBHLElBQUt2RyxLQUFLYSxFQUFHWixFQUFFWSxHQUV0QmIsS0FJUitGLElBQUs5RixHQUtKLE9BSEFELEtBQUtXLEVBQUlkLEtBQUtrRyxJQUFLL0YsS0FBS1csRUFBR1YsRUFBRVUsR0FDN0JYLEtBQUthLEVBQUloQixLQUFLa0csSUFBSy9GLEtBQUthLEVBQUdaLEVBQUVZLEdBRXRCYixLQUlSb2pCLE1BQU83YyxFQUFLUixHQU9YLE9BSEEvRixLQUFLVyxFQUFJZCxLQUFLa0csSUFBS1EsRUFBSTVGLEVBQUdkLEtBQUswRyxJQUFLUixFQUFJcEYsRUFBR1gsS0FBS1csSUFDaERYLEtBQUthLEVBQUloQixLQUFLa0csSUFBS1EsRUFBSTFGLEVBQUdoQixLQUFLMEcsSUFBS1IsRUFBSWxGLEVBQUdiLEtBQUthLElBRXpDYixLQUlSK2tCLFlBQWFDLEVBQVFDLEdBS3BCLE9BSEFqbEIsS0FBS1csRUFBSWQsS0FBS2tHLElBQUtpZixFQUFRbmxCLEtBQUswRyxJQUFLMGUsRUFBUWpsQixLQUFLVyxJQUNsRFgsS0FBS2EsRUFBSWhCLEtBQUtrRyxJQUFLaWYsRUFBUW5sQixLQUFLMEcsSUFBSzBlLEVBQVFqbEIsS0FBS2EsSUFFM0NiLEtBSVJrbEIsWUFBYTNlLEVBQUtSLEdBRWpCLE1BQU1qSCxFQUFTa0IsS0FBS2xCLFNBRXBCLE9BQU9rQixLQUFLNGtCLGFBQWM5bEIsR0FBVSxHQUFJNGxCLGVBQWdCN2tCLEtBQUtrRyxJQUFLUSxFQUFLMUcsS0FBSzBHLElBQUtSLEVBQUtqSCxLQUl2Rm9NLFFBS0MsT0FIQWxMLEtBQUtXLEVBQUlkLEtBQUtxTCxNQUFPbEwsS0FBS1csR0FDMUJYLEtBQUthLEVBQUloQixLQUFLcUwsTUFBT2xMLEtBQUthLEdBRW5CYixLQUlSME0sT0FLQyxPQUhBMU0sS0FBS1csRUFBSWQsS0FBSzZNLEtBQU0xTSxLQUFLVyxHQUN6QlgsS0FBS2EsRUFBSWhCLEtBQUs2TSxLQUFNMU0sS0FBS2EsR0FFbEJiLEtBSVJ5UCxRQUtDLE9BSEF6UCxLQUFLVyxFQUFJZCxLQUFLNFAsTUFBT3pQLEtBQUtXLEdBQzFCWCxLQUFLYSxFQUFJaEIsS0FBSzRQLE1BQU96UCxLQUFLYSxHQUVuQmIsS0FJUm1sQixjQUtDLE9BSEFubEIsS0FBS1csRUFBTVgsS0FBS1csRUFBSSxFQUFNZCxLQUFLNk0sS0FBTTFNLEtBQUtXLEdBQU1kLEtBQUtxTCxNQUFPbEwsS0FBS1csR0FDakVYLEtBQUthLEVBQU1iLEtBQUthLEVBQUksRUFBTWhCLEtBQUs2TSxLQUFNMU0sS0FBS2EsR0FBTWhCLEtBQUtxTCxNQUFPbEwsS0FBS2EsR0FFMURiLEtBSVJvbEIsU0FLQyxPQUhBcGxCLEtBQUtXLEdBQU1YLEtBQUtXLEVBQ2hCWCxLQUFLYSxHQUFNYixLQUFLYSxFQUVUYixLQUlScWxCLElBQUtwbEIsR0FFSixPQUFPRCxLQUFLVyxFQUFJVixFQUFFVSxFQUFJWCxLQUFLYSxFQUFJWixFQUFFWSxFQUlsQ3lrQixNQUFPcmxCLEdBRU4sT0FBT0QsS0FBS1csRUFBSVYsRUFBRVksRUFBSWIsS0FBS2EsRUFBSVosRUFBRVUsRUFJbEM0a0IsV0FFQyxPQUFPdmxCLEtBQUtXLEVBQUlYLEtBQUtXLEVBQUlYLEtBQUthLEVBQUliLEtBQUthLEVBSXhDL0IsU0FFQyxPQUFPZSxLQUFLMmxCLEtBQU14bEIsS0FBS1csRUFBSVgsS0FBS1csRUFBSVgsS0FBS2EsRUFBSWIsS0FBS2EsR0FJbkQ0a0Isa0JBRUMsT0FBTzVsQixLQUFLMlIsSUFBS3hSLEtBQUtXLEdBQU1kLEtBQUsyUixJQUFLeFIsS0FBS2EsR0FJNUM2a0IsWUFFQyxPQUFPMWxCLEtBQUs0a0IsYUFBYzVrQixLQUFLbEIsVUFBWSxHQUk1QzZtQixRQU1DLE9BRmM5bEIsS0FBSytsQixPQUFTNWxCLEtBQUthLEdBQUtiLEtBQUtXLEdBQU1kLEtBQUtvSCxHQU12RDRlLFdBQVk1bEIsR0FFWCxPQUFPSixLQUFLMmxCLEtBQU14bEIsS0FBSzhsQixrQkFBbUI3bEIsSUFJM0M2bEIsa0JBQW1CN2xCLEdBRWxCLE1BQU04bEIsRUFBSy9sQixLQUFLVyxFQUFJVixFQUFFVSxFQUFHcWxCLEVBQUtobUIsS0FBS2EsRUFBSVosRUFBRVksRUFDekMsT0FBT2tsQixFQUFLQSxFQUFLQyxFQUFLQSxFQUl2QkMsb0JBQXFCaG1CLEdBRXBCLE9BQU9KLEtBQUsyUixJQUFLeFIsS0FBS1csRUFBSVYsRUFBRVUsR0FBTWQsS0FBSzJSLElBQUt4UixLQUFLYSxFQUFJWixFQUFFWSxHQUl4RHFsQixVQUFXcG5CLEdBRVYsT0FBT2tCLEtBQUswbEIsWUFBWWhCLGVBQWdCNWxCLEdBSXpDdWtCLEtBQU1wakIsRUFBRythLEdBS1IsT0FIQWhiLEtBQUtXLElBQU9WLEVBQUVVLEVBQUlYLEtBQUtXLEdBQU1xYSxFQUM3QmhiLEtBQUthLElBQU9aLEVBQUVZLEVBQUliLEtBQUthLEdBQU1tYSxFQUV0QmhiLEtBSVJtbUIsWUFBYUMsRUFBSUMsRUFBSXJMLEdBS3BCLE9BSEFoYixLQUFLVyxFQUFJeWxCLEVBQUd6bEIsR0FBTTBsQixFQUFHMWxCLEVBQUl5bEIsRUFBR3psQixHQUFNcWEsRUFDbENoYixLQUFLYSxFQUFJdWxCLEVBQUd2bEIsR0FBTXdsQixFQUFHeGxCLEVBQUl1bEIsRUFBR3ZsQixHQUFNbWEsRUFFM0JoYixLQUlSc21CLE9BQVFybUIsR0FFUCxPQUFXQSxFQUFFVSxJQUFNWCxLQUFLVyxHQUFTVixFQUFFWSxJQUFNYixLQUFLYSxFQUkvQzBsQixVQUFXN0QsRUFBTzhELEVBQVMsR0FLMUIsT0FIQXhtQixLQUFLVyxFQUFJK2hCLEVBQU84RCxHQUNoQnhtQixLQUFLYSxFQUFJNmhCLEVBQU84RCxFQUFTLEdBRWxCeG1CLEtBSVJ5bUIsUUFBUy9ELEVBQVEsR0FBSThELEVBQVMsR0FLN0IsT0FIQTlELEVBQU84RCxHQUFXeG1CLEtBQUtXLEVBQ3ZCK2hCLEVBQU84RCxFQUFTLEdBQU14bUIsS0FBS2EsRUFFcEI2aEIsRUFJUmdFLG9CQUFxQkMsRUFBVy9mLEVBQU80ZixHQVd0QyxZQVRnQmhILElBQVhnSCxHQUVKN2pCLFFBQVF1aEIsS0FBTSx1RUFJZmxrQixLQUFLVyxFQUFJZ21CLEVBQVVDLEtBQU1oZ0IsR0FDekI1RyxLQUFLYSxFQUFJOGxCLEVBQVVFLEtBQU1qZ0IsR0FFbEI1RyxLQUlSOG1CLGFBQWNDLEVBQVFwQixHQUVyQixNQUFNamtCLEVBQUk3QixLQUFLbW5CLElBQUtyQixHQUFTcmlCLEVBQUl6RCxLQUFLb25CLElBQUt0QixHQUVyQ2hsQixFQUFJWCxLQUFLVyxFQUFJb21CLEVBQU9wbUIsRUFDcEJFLEVBQUliLEtBQUthLEVBQUlrbUIsRUFBT2xtQixFQUsxQixPQUhBYixLQUFLVyxFQUFJQSxFQUFJZSxFQUFJYixFQUFJeUMsRUFBSXlqQixFQUFPcG1CLEVBQ2hDWCxLQUFLYSxFQUFJRixFQUFJMkMsRUFBSXpDLEVBQUlhLEVBQUlxbEIsRUFBT2xtQixFQUV6QmIsS0FJUnFDLFNBS0MsT0FIQXJDLEtBQUtXLEVBQUlkLEtBQUt3QyxTQUNkckMsS0FBS2EsRUFBSWhCLEtBQUt3QyxTQUVQckMsS0FJUixFQUFHUyxPQUFPQyxrQkFFSFYsS0FBS1csUUFDTFgsS0FBS2EsR0FNYjJpQixFQUFRamtCLFVBQVUybkIsV0FBWSxFQUU5QixNQUFNQyxFQUVMeGUsY0FFQzNJLEtBQUs4a0IsU0FBVyxDQUVmLEVBQUcsRUFBRyxFQUNOLEVBQUcsRUFBRyxFQUNOLEVBQUcsRUFBRyxHQUlGL2dCLFVBQVVqRixPQUFTLEdBRXZCNkQsUUFBUUMsTUFBTyxpRkFNakIrSixJQUFLeWEsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsR0FFNUMsTUFBTUMsRUFBSzduQixLQUFLOGtCLFNBTWhCLE9BSkErQyxFQUFJLEdBQU1ULEVBQUtTLEVBQUksR0FBTU4sRUFBS00sRUFBSSxHQUFNSCxFQUN4Q0csRUFBSSxHQUFNUixFQUFLUSxFQUFJLEdBQU1MLEVBQUtLLEVBQUksR0FBTUYsRUFDeENFLEVBQUksR0FBTVAsRUFBS08sRUFBSSxHQUFNSixFQUFLSSxFQUFJLEdBQU1ELEVBRWpDNW5CLEtBSVI4bkIsV0FVQyxPQVJBOW5CLEtBQUsyTSxJQUVKLEVBQUcsRUFBRyxFQUNOLEVBQUcsRUFBRyxFQUNOLEVBQUcsRUFBRyxHQUlBM00sS0FJUmdrQixLQUFNL2lCLEdBRUwsTUFBTTRtQixFQUFLN25CLEtBQUs4a0IsU0FDVmlELEVBQUs5bUIsRUFBRTZqQixTQU1iLE9BSkErQyxFQUFJLEdBQU1FLEVBQUksR0FBS0YsRUFBSSxHQUFNRSxFQUFJLEdBQUtGLEVBQUksR0FBTUUsRUFBSSxHQUNwREYsRUFBSSxHQUFNRSxFQUFJLEdBQUtGLEVBQUksR0FBTUUsRUFBSSxHQUFLRixFQUFJLEdBQU1FLEVBQUksR0FDcERGLEVBQUksR0FBTUUsRUFBSSxHQUFLRixFQUFJLEdBQU1FLEVBQUksR0FBS0YsRUFBSSxHQUFNRSxFQUFJLEdBRTdDL25CLEtBSVJnb0IsYUFBY0MsRUFBT0MsRUFBT0MsR0FNM0IsT0FKQUYsRUFBTUcscUJBQXNCcG9CLEtBQU0sR0FDbENrb0IsRUFBTUUscUJBQXNCcG9CLEtBQU0sR0FDbENtb0IsRUFBTUMscUJBQXNCcG9CLEtBQU0sR0FFM0JBLEtBSVJxb0IsZUFBZ0JwbkIsR0FFZixNQUFNOG1CLEVBQUs5bUIsRUFBRTZqQixTQVViLE9BUkE5a0IsS0FBSzJNLElBRUpvYixFQUFJLEdBQUtBLEVBQUksR0FBS0EsRUFBSSxHQUN0QkEsRUFBSSxHQUFLQSxFQUFJLEdBQUtBLEVBQUksR0FDdEJBLEVBQUksR0FBS0EsRUFBSSxHQUFLQSxFQUFJLEtBSWhCL25CLEtBSVJ5a0IsU0FBVXhqQixHQUVULE9BQU9qQixLQUFLc29CLGlCQUFrQnRvQixLQUFNaUIsR0FJckNzbkIsWUFBYXRuQixHQUVaLE9BQU9qQixLQUFLc29CLGlCQUFrQnJuQixFQUFHakIsTUFJbENzb0IsaUJBQWtCMXBCLEVBQUdDLEdBRXBCLE1BQU0ycEIsRUFBSzVwQixFQUFFa21CLFNBQ1AyRCxFQUFLNXBCLEVBQUVpbUIsU0FDUCtDLEVBQUs3bkIsS0FBSzhrQixTQUVWNEQsRUFBTUYsRUFBSSxHQUFLRyxFQUFNSCxFQUFJLEdBQUtJLEVBQU1KLEVBQUksR0FDeENLLEVBQU1MLEVBQUksR0FBS00sRUFBTU4sRUFBSSxHQUFLTyxFQUFNUCxFQUFJLEdBQ3hDUSxFQUFNUixFQUFJLEdBQUtTLEVBQU1ULEVBQUksR0FBS1UsRUFBTVYsRUFBSSxHQUV4Q1csRUFBTVYsRUFBSSxHQUFLVyxFQUFNWCxFQUFJLEdBQUtZLEVBQU1aLEVBQUksR0FDeENhLEVBQU1iLEVBQUksR0FBS2MsRUFBTWQsRUFBSSxHQUFLZSxFQUFNZixFQUFJLEdBQ3hDZ0IsRUFBTWhCLEVBQUksR0FBS2lCLEVBQU1qQixFQUFJLEdBQUtrQixFQUFNbEIsRUFBSSxHQWM5QyxPQVpBWixFQUFJLEdBQU1hLEVBQU1TLEVBQU1SLEVBQU1XLEVBQU1WLEVBQU1hLEVBQ3hDNUIsRUFBSSxHQUFNYSxFQUFNVSxFQUFNVCxFQUFNWSxFQUFNWCxFQUFNYyxFQUN4QzdCLEVBQUksR0FBTWEsRUFBTVcsRUFBTVYsRUFBTWEsRUFBTVosRUFBTWUsRUFFeEM5QixFQUFJLEdBQU1nQixFQUFNTSxFQUFNTCxFQUFNUSxFQUFNUCxFQUFNVSxFQUN4QzVCLEVBQUksR0FBTWdCLEVBQU1PLEVBQU1OLEVBQU1TLEVBQU1SLEVBQU1XLEVBQ3hDN0IsRUFBSSxHQUFNZ0IsRUFBTVEsRUFBTVAsRUFBTVUsRUFBTVQsRUFBTVksRUFFeEM5QixFQUFJLEdBQU1tQixFQUFNRyxFQUFNRixFQUFNSyxFQUFNSixFQUFNTyxFQUN4QzVCLEVBQUksR0FBTW1CLEVBQU1JLEVBQU1ILEVBQU1NLEVBQU1MLEVBQU1RLEVBQ3hDN0IsRUFBSSxHQUFNbUIsRUFBTUssRUFBTUosRUFBTU8sRUFBTU4sRUFBTVMsRUFFakMzcEIsS0FJUjBrQixlQUFnQnBoQixHQUVmLE1BQU11a0IsRUFBSzduQixLQUFLOGtCLFNBTWhCLE9BSkErQyxFQUFJLElBQU92a0IsRUFBR3VrQixFQUFJLElBQU92a0IsRUFBR3VrQixFQUFJLElBQU92a0IsRUFDdkN1a0IsRUFBSSxJQUFPdmtCLEVBQUd1a0IsRUFBSSxJQUFPdmtCLEVBQUd1a0IsRUFBSSxJQUFPdmtCLEVBQ3ZDdWtCLEVBQUksSUFBT3ZrQixFQUFHdWtCLEVBQUksSUFBT3ZrQixFQUFHdWtCLEVBQUksSUFBT3ZrQixFQUVoQ3RELEtBSVI0cEIsY0FFQyxNQUFNL0IsRUFBSzduQixLQUFLOGtCLFNBRVZsbUIsRUFBSWlwQixFQUFJLEdBQUtocEIsRUFBSWdwQixFQUFJLEdBQUtubUIsRUFBSW1tQixFQUFJLEdBQ3ZDdmxCLEVBQUl1bEIsRUFBSSxHQUFLeG9CLEVBQUl3b0IsRUFBSSxHQUFLMW5CLEVBQUkwbkIsRUFBSSxHQUNsQ2pvQixFQUFJaW9CLEVBQUksR0FBS3puQixFQUFJeW5CLEVBQUksR0FBSy9tQixFQUFJK21CLEVBQUksR0FFbkMsT0FBT2pwQixFQUFJUyxFQUFJeUIsRUFBSWxDLEVBQUl1QixFQUFJQyxFQUFJdkIsRUFBSXlELEVBQUl4QixFQUFJakMsRUFBSXNCLEVBQUlQLEVBQUk4QixFQUFJWSxFQUFJbEMsRUFBSXNCLEVBQUlyQyxFQUFJTyxFQUk1RWlxQixTQUVDLE1BQU1oQyxFQUFLN25CLEtBQUs4a0IsU0FFZnNDLEVBQU1TLEVBQUksR0FBS04sRUFBTU0sRUFBSSxHQUFLSCxFQUFNRyxFQUFJLEdBQ3hDUixFQUFNUSxFQUFJLEdBQUtMLEVBQU1LLEVBQUksR0FBS0YsRUFBTUUsRUFBSSxHQUN4Q1AsRUFBTU8sRUFBSSxHQUFLSixFQUFNSSxFQUFJLEdBQUtELEVBQU1DLEVBQUksR0FFeENpQyxFQUFNbEMsRUFBTUosRUFBTUcsRUFBTUYsRUFDeEJzQyxFQUFNcEMsRUFBTUwsRUFBTU0sRUFBTVAsRUFDeEIyQyxFQUFNdkMsRUFBTUosRUFBTUcsRUFBTUYsRUFFeEIyQyxFQUFNN0MsRUFBTTBDLEVBQU12QyxFQUFNd0MsRUFBTXJDLEVBQU1zQyxFQUVyQyxHQUFhLElBQVJDLEVBQVksT0FBT2pxQixLQUFLMk0sSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFMUQsTUFBTXVkLEVBQVMsRUFBSUQsRUFjbkIsT0FaQXBDLEVBQUksR0FBTWlDLEVBQU1JLEVBQ2hCckMsRUFBSSxJQUFRSCxFQUFNRCxFQUFNRyxFQUFNTCxHQUFRMkMsRUFDdENyQyxFQUFJLElBQVFGLEVBQU1KLEVBQU1HLEVBQU1GLEdBQVEwQyxFQUV0Q3JDLEVBQUksR0FBTWtDLEVBQU1HLEVBQ2hCckMsRUFBSSxJQUFRRCxFQUFNUixFQUFNTSxFQUFNSixHQUFRNEMsRUFDdENyQyxFQUFJLElBQVFILEVBQU1MLEVBQU1NLEVBQU1QLEdBQVE4QyxFQUV0Q3JDLEVBQUksR0FBTW1DLEVBQU1FLEVBQ2hCckMsRUFBSSxJQUFRTixFQUFNRCxFQUFNRyxFQUFNTCxHQUFROEMsRUFDdENyQyxFQUFJLElBQVFMLEVBQU1KLEVBQU1HLEVBQU1GLEdBQVE2QyxFQUUvQmxxQixLQUlSbXFCLFlBRUMsSUFBSUMsRUFDSixNQUFNbnBCLEVBQUlqQixLQUFLOGtCLFNBTWYsT0FKQXNGLEVBQU1ucEIsRUFBRyxHQUFLQSxFQUFHLEdBQU1BLEVBQUcsR0FBS0EsRUFBRyxHQUFNbXBCLEVBQ3hDQSxFQUFNbnBCLEVBQUcsR0FBS0EsRUFBRyxHQUFNQSxFQUFHLEdBQUtBLEVBQUcsR0FBTW1wQixFQUN4Q0EsRUFBTW5wQixFQUFHLEdBQUtBLEVBQUcsR0FBTUEsRUFBRyxHQUFLQSxFQUFHLEdBQU1tcEIsRUFFakNwcUIsS0FJUnFxQixnQkFBaUJDLEdBRWhCLE9BQU90cUIsS0FBS3FvQixlQUFnQmlDLEdBQVVULFNBQVNNLFlBSWhESSxtQkFBb0IvbUIsR0FFbkIsTUFBTXZDLEVBQUlqQixLQUFLOGtCLFNBWWYsT0FWQXRoQixFQUFHLEdBQU12QyxFQUFHLEdBQ1p1QyxFQUFHLEdBQU12QyxFQUFHLEdBQ1p1QyxFQUFHLEdBQU12QyxFQUFHLEdBQ1p1QyxFQUFHLEdBQU12QyxFQUFHLEdBQ1p1QyxFQUFHLEdBQU12QyxFQUFHLEdBQ1p1QyxFQUFHLEdBQU12QyxFQUFHLEdBQ1p1QyxFQUFHLEdBQU12QyxFQUFHLEdBQ1p1QyxFQUFHLEdBQU12QyxFQUFHLEdBQ1p1QyxFQUFHLEdBQU12QyxFQUFHLEdBRUxqQixLQUlSd3FCLGVBQWdCQyxFQUFJQyxFQUFJQyxFQUFJQyxFQUFJaGpCLEVBQVVpakIsRUFBSUMsR0FFN0MsTUFBTXBwQixFQUFJN0IsS0FBS21uQixJQUFLcGYsR0FDZHRFLEVBQUl6RCxLQUFLb25CLElBQUtyZixHQVFwQixPQU5BNUgsS0FBSzJNLElBQ0pnZSxFQUFLanBCLEVBQUdpcEIsRUFBS3JuQixHQUFLcW5CLEdBQU9qcEIsRUFBSW1wQixFQUFLdm5CLEVBQUl3bkIsR0FBT0QsRUFBS0osR0FDaERHLEVBQUt0bkIsRUFBR3NuQixFQUFLbHBCLEdBQUtrcEIsSUFBU3RuQixFQUFJdW5CLEVBQUtucEIsRUFBSW9wQixHQUFPQSxFQUFLSixFQUN0RCxFQUFHLEVBQUcsR0FHQTFxQixLQUlSK3FCLE1BQU9KLEVBQUlDLEdBRVYsTUFBTS9DLEVBQUs3bkIsS0FBSzhrQixTQUtoQixPQUhBK0MsRUFBSSxJQUFPOEMsRUFBSTlDLEVBQUksSUFBTzhDLEVBQUk5QyxFQUFJLElBQU84QyxFQUN6QzlDLEVBQUksSUFBTytDLEVBQUkvQyxFQUFJLElBQU8rQyxFQUFJL0MsRUFBSSxJQUFPK0MsRUFFbEM1cUIsS0FJUjJILE9BQVFxakIsR0FFUCxNQUFNdHBCLEVBQUk3QixLQUFLbW5CLElBQUtnRSxHQUNkMW5CLEVBQUl6RCxLQUFLb25CLElBQUsrRCxHQUVkbkQsRUFBSzduQixLQUFLOGtCLFNBRVY0RCxFQUFNYixFQUFJLEdBQUtjLEVBQU1kLEVBQUksR0FBS2UsRUFBTWYsRUFBSSxHQUN4Q2dCLEVBQU1oQixFQUFJLEdBQUtpQixFQUFNakIsRUFBSSxHQUFLa0IsRUFBTWxCLEVBQUksR0FVOUMsT0FSQUEsRUFBSSxHQUFNbm1CLEVBQUlnbkIsRUFBTXBsQixFQUFJdWxCLEVBQ3hCaEIsRUFBSSxHQUFNbm1CLEVBQUlpbkIsRUFBTXJsQixFQUFJd2xCLEVBQ3hCakIsRUFBSSxHQUFNbm1CLEVBQUlrbkIsRUFBTXRsQixFQUFJeWxCLEVBRXhCbEIsRUFBSSxJQUFRdmtCLEVBQUlvbEIsRUFBTWhuQixFQUFJbW5CLEVBQzFCaEIsRUFBSSxJQUFRdmtCLEVBQUlxbEIsRUFBTWpuQixFQUFJb25CLEVBQzFCakIsRUFBSSxJQUFRdmtCLEVBQUlzbEIsRUFBTWxuQixFQUFJcW5CLEVBRW5CL29CLEtBSVJ3SCxVQUFXaWpCLEVBQUlDLEdBRWQsTUFBTTdDLEVBQUs3bkIsS0FBSzhrQixTQUtoQixPQUhBK0MsRUFBSSxJQUFPNEMsRUFBSzVDLEVBQUksR0FBS0EsRUFBSSxJQUFPNEMsRUFBSzVDLEVBQUksR0FBS0EsRUFBSSxJQUFPNEMsRUFBSzVDLEVBQUksR0FDdEVBLEVBQUksSUFBTzZDLEVBQUs3QyxFQUFJLEdBQUtBLEVBQUksSUFBTzZDLEVBQUs3QyxFQUFJLEdBQUtBLEVBQUksSUFBTzZDLEVBQUs3QyxFQUFJLEdBRS9EN25CLEtBSVJzbUIsT0FBUTJFLEdBRVAsTUFBTXBELEVBQUs3bkIsS0FBSzhrQixTQUNWaUQsRUFBS2tELEVBQU9uRyxTQUVsQixJQUFNLElBQUloa0IsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCLEdBQUsrbUIsRUFBSS9tQixLQUFRaW5CLEVBQUlqbkIsR0FBTSxPQUFPLEVBSW5DLE9BQU8sRUFJUnlsQixVQUFXN0QsRUFBTzhELEVBQVMsR0FFMUIsSUFBTSxJQUFJMWxCLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2QmQsS0FBSzhrQixTQUFVaGtCLEdBQU00aEIsRUFBTzVoQixFQUFJMGxCLEdBSWpDLE9BQU94bUIsS0FJUnltQixRQUFTL0QsRUFBUSxHQUFJOEQsRUFBUyxHQUU3QixNQUFNcUIsRUFBSzduQixLQUFLOGtCLFNBY2hCLE9BWkFwQyxFQUFPOEQsR0FBV3FCLEVBQUksR0FDdEJuRixFQUFPOEQsRUFBUyxHQUFNcUIsRUFBSSxHQUMxQm5GLEVBQU84RCxFQUFTLEdBQU1xQixFQUFJLEdBRTFCbkYsRUFBTzhELEVBQVMsR0FBTXFCLEVBQUksR0FDMUJuRixFQUFPOEQsRUFBUyxHQUFNcUIsRUFBSSxHQUMxQm5GLEVBQU84RCxFQUFTLEdBQU1xQixFQUFJLEdBRTFCbkYsRUFBTzhELEVBQVMsR0FBTXFCLEVBQUksR0FDMUJuRixFQUFPOEQsRUFBUyxHQUFNcUIsRUFBSSxHQUMxQm5GLEVBQU84RCxFQUFTLEdBQU1xQixFQUFJLEdBRW5CbkYsRUFJUnFCLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjNGQsVUFBV3ZtQixLQUFLOGtCLFdBUWhELFNBQVNvRyxFQUFrQnhJLEdBSTFCLElBQU0sSUFBSTVoQixFQUFJNGhCLEVBQU01akIsT0FBUyxFQUFHZ0MsR0FBSyxJQUFNQSxFQUUxQyxHQUFLNGhCLEVBQU81aEIsR0FBTSxNQUFRLE9BQU8sRUFJbEMsT0FBTyxFQXNCUixTQUFTcXFCLEVBQWlCOVUsR0FFekIsT0FBT3BULFNBQVNrb0IsZ0JBQWlCLCtCQUFnQzlVLEdBSWxFLFNBQVMrVSxFQUFjMXBCLEdBRXRCLE9BQVNBLEVBQUksT0FBZ0IsWUFBSkEsRUFBbUI3QixLQUFLNlAsSUFBUyxZQUFKaE8sRUFBbUIsWUFBYyxLQUl4RixTQUFTMnBCLEdBQWMzcEIsR0FFdEIsT0FBU0EsRUFBSSxTQUFrQixNQUFKQSxFQUFZLE1BQVU3QixLQUFLNlAsSUFBS2hPLEVBQUcsUUFBYyxLQWhEN0V5bEIsRUFBUTVuQixVQUFVK3JCLFdBQVksRUFpQmxCQyxVQUNDM2dCLFdBQ080Z0Isa0JBQ1BDLFdBQ0NDLFlBQ0RDLFdBQ0NDLFlBQ0NqWSxhQUNBa1ksYUE2QmYsTUFBTUMsR0FBSyxDQUNWLENBQUVuSyxHQUFrQixDQUFFLENBQUVDLEdBQXdCd0osR0FDaEQsQ0FBRXhKLEdBQXdCLENBQUUsQ0FBRUQsR0FBa0IwSixLQUczQ1UsR0FBa0IsQ0FFdkJDLFlBQVksRUFFUkMsd0JBRUgsT0FBT3JLLEdBSUpxSyxzQkFBbUJDLEdBRXRCdnBCLFFBQVF1aEIsS0FBTSwyREFJZmlJLFFBQVMsU0FBV2xtQixFQUFPbW1CLEVBQWtCQyxHQUU1QyxHQUFLcnNCLEtBQUtnc0IsWUFBY0ksSUFBcUJDLElBQXNCRCxJQUFzQkMsRUFFeEYsT0FBT3BtQixFQUlSLEdBQUs2bEIsR0FBSU0sU0FBcUU1TSxJQUEvQ3NNLEdBQUlNLEdBQW9CQyxHQUFtQyxDQUV6RixNQUFNQyxFQUFLUixHQUFJTSxHQUFvQkMsR0FNbkMsT0FKQXBtQixFQUFNekMsRUFBSThvQixFQUFJcm1CLEVBQU16QyxHQUNwQnlDLEVBQU1yRyxFQUFJMHNCLEVBQUlybUIsRUFBTXJHLEdBQ3BCcUcsRUFBTXBILEVBQUl5dEIsRUFBSXJtQixFQUFNcEgsR0FFYm9ILEVBSVIsTUFBTSxJQUFJbkcsTUFBTyx3Q0FJbEJ5c0Isc0JBQXVCLFNBQVd0bUIsRUFBT29tQixHQUV4QyxPQUFPcnNCLEtBQUttc0IsUUFBU2xtQixFQUFPakcsS0FBS2lzQixrQkFBbUJJLElBSXJERyxvQkFBcUIsU0FBV3ZtQixFQUFPbW1CLEdBRXRDLE9BQU9wc0IsS0FBS21zQixRQUFTbG1CLEVBQU9tbUIsRUFBa0Jwc0IsS0FBS2lzQixxQkFNL0NRLEdBQWlCLENBQUUsVUFBYSxTQUFVLGFBQWdCLFNBQVUsS0FBUSxNQUFVLFdBQWMsUUFBVSxNQUFTLFNBQzVILE1BQVMsU0FBVSxPQUFVLFNBQVUsTUFBUyxFQUFVLGVBQWtCLFNBQVUsS0FBUSxJQUFVLFdBQWMsUUFDdEgsTUFBUyxTQUFVLFVBQWEsU0FBVSxVQUFhLFFBQVUsV0FBYyxRQUFVLFVBQWEsU0FBVSxNQUFTLFNBQ3pILGVBQWtCLFFBQVUsU0FBWSxTQUFVLFFBQVcsU0FBVSxLQUFRLE1BQVUsU0FBWSxJQUFVLFNBQVksTUFDM0gsY0FBaUIsU0FBVSxTQUFZLFNBQVUsVUFBYSxNQUFVLFNBQVksU0FBVSxVQUFhLFNBQVUsWUFBZSxRQUNwSSxlQUFrQixRQUFVLFdBQWMsU0FBVSxXQUFjLFNBQVUsUUFBVyxRQUFVLFdBQWMsU0FBVSxhQUFnQixRQUN6SSxjQUFpQixRQUFVLGNBQWlCLFFBQVUsY0FBaUIsUUFBVSxjQUFpQixNQUFVLFdBQWMsUUFDMUgsU0FBWSxTQUFVLFlBQWUsTUFBVSxRQUFXLFFBQVUsUUFBVyxRQUFVLFdBQWMsUUFBVSxVQUFhLFNBQzlILFlBQWUsU0FBVSxZQUFlLFFBQVUsUUFBVyxTQUFVLFVBQWEsU0FBVSxXQUFjLFNBQVUsS0FBUSxTQUM5SCxVQUFhLFNBQVUsS0FBUSxRQUFVLE1BQVMsTUFBVSxZQUFlLFNBQVUsS0FBUSxRQUFVLFNBQVksU0FBVSxRQUFXLFNBQ3hJLFVBQWEsU0FBVSxPQUFVLFFBQVUsTUFBUyxTQUFVLE1BQVMsU0FBVSxTQUFZLFNBQVUsY0FBaUIsU0FBVSxVQUFhLFFBQy9JLGFBQWdCLFNBQVUsVUFBYSxTQUFVLFdBQWMsU0FBVSxVQUFhLFNBQVUscUJBQXdCLFNBQVUsVUFBYSxTQUMvSSxXQUFjLFFBQVUsVUFBYSxTQUFVLFVBQWEsU0FBVSxZQUFlLFNBQVUsY0FBaUIsUUFBVSxhQUFnQixRQUMxSSxlQUFrQixRQUFVLGVBQWtCLFFBQVUsZUFBa0IsU0FBVSxZQUFlLFNBQVUsS0FBUSxNQUFVLFVBQWEsUUFDNUksTUFBUyxTQUFVLFFBQVcsU0FBVSxPQUFVLFFBQVUsaUJBQW9CLFFBQVUsV0FBYyxJQUFVLGFBQWdCLFNBQ2xJLGFBQWdCLFFBQVUsZUFBa0IsUUFBVSxnQkFBbUIsUUFBVSxrQkFBcUIsTUFBVSxnQkFBbUIsUUFDckksZ0JBQW1CLFNBQVUsYUFBZ0IsUUFBVSxVQUFhLFNBQVUsVUFBYSxTQUFVLFNBQVksU0FBVSxZQUFlLFNBQzFJLEtBQVEsSUFBVSxRQUFXLFNBQVUsTUFBUyxRQUFVLFVBQWEsUUFBVSxPQUFVLFNBQVUsVUFBYSxTQUFVLE9BQVUsU0FDdEksY0FBaUIsU0FBVSxVQUFhLFNBQVUsY0FBaUIsU0FBVSxjQUFpQixTQUFVLFdBQWMsU0FBVSxVQUFhLFNBQzdJLEtBQVEsU0FBVSxLQUFRLFNBQVUsS0FBUSxTQUFVLFdBQWMsU0FBVSxPQUFVLFFBQVUsY0FBaUIsUUFBVSxJQUFPLFNBQVUsVUFBYSxTQUMzSixVQUFhLFFBQVUsWUFBZSxRQUFVLE9BQVUsU0FBVSxXQUFjLFNBQVUsU0FBWSxRQUFVLFNBQVksU0FDOUgsT0FBVSxTQUFVLE9BQVUsU0FBVSxRQUFXLFFBQVUsVUFBYSxRQUFVLFVBQWEsUUFBVSxVQUFhLFFBQVUsS0FBUSxTQUMxSSxZQUFlLE1BQVUsVUFBYSxRQUFVLElBQU8sU0FBVSxLQUFRLE1BQVUsUUFBVyxTQUFVLE9BQVUsU0FBVSxVQUFhLFFBQ3pJLE9BQVUsU0FBVSxNQUFTLFNBQVUsTUFBUyxTQUFVLFdBQWMsU0FBVSxPQUFVLFNBQVUsWUFBZSxVQUVoSEMsR0FBTyxDQUFFbHBCLEVBQUcsRUFBRzVELEVBQUcsRUFBR2YsRUFBRyxHQUN4Qjh0QixHQUFRLENBQUV2c0IsRUFBRyxFQUFHa0QsRUFBRyxFQUFHN0IsRUFBRyxHQUN6Qm1yQixHQUFRLENBQUV4c0IsRUFBRyxFQUFHa0QsRUFBRyxFQUFHN0IsRUFBRyxHQUUvQixTQUFTb3JCLEdBQVN0cEIsRUFBR3RFLEVBQUdjLEdBSXZCLE9BRktBLEVBQUksSUFBSUEsR0FBSyxHQUNiQSxFQUFJLElBQUlBLEdBQUssR0FDYkEsRUFBSSxFQUFJLEVBQVd3RCxFQUFnQixHQUFWdEUsRUFBSXNFLEdBQVV4RCxFQUN2Q0EsRUFBSSxHQUFlZCxFQUNuQmMsRUFBSSxFQUFJLEVBQVd3RCxFQUFnQixHQUFWdEUsRUFBSXNFLElBQVksRUFBSSxFQUFJeEQsR0FDL0N3RCxFQUlSLFNBQVN1cEIsR0FBY0MsRUFBUXRLLEdBTTlCLE9BSkFBLEVBQU9qZixFQUFJdXBCLEVBQU92cEIsRUFDbEJpZixFQUFPN2lCLEVBQUltdEIsRUFBT250QixFQUNsQjZpQixFQUFPNWpCLEVBQUlrdUIsRUFBT2x1QixFQUVYNGpCLEVBSVIsTUFBTXVLLEdBRUxya0IsWUFBYW5GLEVBQUc1RCxFQUFHZixHQUVsQixZQUFXMmdCLElBQU41ZixRQUF5QjRmLElBQU4zZ0IsRUFHaEJtQixLQUFLMk0sSUFBS25KLEdBSVh4RCxLQUFLaXRCLE9BQVF6cEIsRUFBRzVELEVBQUdmLEdBSTNCOE4sSUFBSzNOLEdBZ0JKLE9BZEtBLEdBQVNBLEVBQU1rdUIsUUFFbkJsdEIsS0FBS2drQixLQUFNaGxCLEdBRWlCLGlCQUFWQSxFQUVsQmdCLEtBQUttdEIsT0FBUW51QixHQUVlLGlCQUFWQSxHQUVsQmdCLEtBQUtvdEIsU0FBVXB1QixHQUlUZ0IsS0FJUnlqQixVQUFXQyxHQU1WLE9BSkExakIsS0FBS3dELEVBQUlrZ0IsRUFDVDFqQixLQUFLSixFQUFJOGpCLEVBQ1QxakIsS0FBS25CLEVBQUk2a0IsRUFFRjFqQixLQUlSbXRCLE9BQVFFLEVBQUtuQixFQUFhdkssUUFVekIsT0FSQTBMLEVBQU14dEIsS0FBS3FMLE1BQU9taUIsR0FFbEJydEIsS0FBS3dELEdBQU02cEIsR0FBTyxHQUFLLEtBQVEsSUFDL0JydEIsS0FBS0osR0FBTXl0QixHQUFPLEVBQUksS0FBUSxJQUM5QnJ0QixLQUFLbkIsR0FBWSxJQUFOd3VCLEdBQWMsSUFFekJ0QixHQUFnQlMsb0JBQXFCeHNCLEtBQU1rc0IsR0FFcENsc0IsS0FJUml0QixPQUFRenBCLEVBQUc1RCxFQUFHZixFQUFHcXRCLEVBQWF0SyxlQVE3QixPQU5BNWhCLEtBQUt3RCxFQUFJQSxFQUNUeEQsS0FBS0osRUFBSUEsRUFDVEksS0FBS25CLEVBQUlBLEVBRVRrdEIsR0FBZ0JTLG9CQUFxQnhzQixLQUFNa3NCLEdBRXBDbHNCLEtBSVJzdEIsT0FBUWx0QixFQUFHa0QsRUFBRzdCLEVBQUd5cUIsRUFBYXRLLGVBTzdCLEdBSkF4aEIsR0FBcUJBLEdBaDBDTWEsRUFnMENILEdBOXpDSkEsR0FBTUEsRUErekMxQnFDLEVBQUk4ZixFQUFPOWYsRUFBRyxFQUFHLEdBQ2pCN0IsRUFBSTJoQixFQUFPM2hCLEVBQUcsRUFBRyxHQUVOLElBQU42QixFQUVKdEQsS0FBS3dELEVBQUl4RCxLQUFLSixFQUFJSSxLQUFLbkIsRUFBSTRDLE1BRXJCLENBRU4sTUFBTThCLEVBQUk5QixHQUFLLEdBQU1BLEdBQU0sRUFBSTZCLEdBQU03QixFQUFJNkIsRUFBTTdCLEVBQUk2QixFQUM3Q3JFLEVBQU0sRUFBSXdDLEVBQU04QixFQUV0QnZELEtBQUt3RCxFQUFJcXBCLEdBQVM1dEIsRUFBR3NFLEVBQUduRCxFQUFJLEVBQUksR0FDaENKLEtBQUtKLEVBQUlpdEIsR0FBUzV0QixFQUFHc0UsRUFBR25ELEdBQ3hCSixLQUFLbkIsRUFBSWd1QixHQUFTNXRCLEVBQUdzRSxFQUFHbkQsRUFBSSxFQUFJLEdBLzBDbkMsSUFBNkJhLEVBcTFDM0IsT0FGQThxQixHQUFnQlMsb0JBQXFCeHNCLEtBQU1rc0IsR0FFcENsc0IsS0FJUm90QixTQUFVRyxFQUFPckIsRUFBYXZLLFFBRTdCLFNBQVM2TCxFQUFhQyxRQUVMak8sSUFBWGlPLEdBRUFDLFdBQVlELEdBQVcsR0FFM0I5cUIsUUFBUXVoQixLQUFNLG1DQUFxQ3FKLEVBQVEscUJBTzdELElBQUl0c0IsRUFFSixHQUFLQSxFQUFJLCtCQUErQjBzQixLQUFNSixHQUFVLENBSXZELElBQUl0bkIsRUFDSixNQUFNb1EsRUFBT3BWLEVBQUcsR0FDVjJzQixFQUFhM3NCLEVBQUcsR0FFdEIsT0FBU29WLEdBRVIsSUFBSyxNQUNMLElBQUssT0FFSixHQUFLcFEsRUFBUSwrREFBK0QwbkIsS0FBTUMsR0FXakYsT0FSQTV0QixLQUFLd0QsRUFBSTNELEtBQUswRyxJQUFLLElBQUtzbkIsU0FBVTVuQixFQUFPLEdBQUssS0FBUyxJQUN2RGpHLEtBQUtKLEVBQUlDLEtBQUswRyxJQUFLLElBQUtzbkIsU0FBVTVuQixFQUFPLEdBQUssS0FBUyxJQUN2RGpHLEtBQUtuQixFQUFJZ0IsS0FBSzBHLElBQUssSUFBS3NuQixTQUFVNW5CLEVBQU8sR0FBSyxLQUFTLElBRXZEOGxCLEdBQWdCUyxvQkFBcUJ4c0IsS0FBTWtzQixHQUUzQ3NCLEVBQWF2bkIsRUFBTyxJQUViakcsS0FJUixHQUFLaUcsRUFBUSxxRUFBcUUwbkIsS0FBTUMsR0FXdkYsT0FSQTV0QixLQUFLd0QsRUFBSTNELEtBQUswRyxJQUFLLElBQUtzbkIsU0FBVTVuQixFQUFPLEdBQUssS0FBUyxJQUN2RGpHLEtBQUtKLEVBQUlDLEtBQUswRyxJQUFLLElBQUtzbkIsU0FBVTVuQixFQUFPLEdBQUssS0FBUyxJQUN2RGpHLEtBQUtuQixFQUFJZ0IsS0FBSzBHLElBQUssSUFBS3NuQixTQUFVNW5CLEVBQU8sR0FBSyxLQUFTLElBRXZEOGxCLEdBQWdCUyxvQkFBcUJ4c0IsS0FBTWtzQixHQUUzQ3NCLEVBQWF2bkIsRUFBTyxJQUViakcsS0FJUixNQUVELElBQUssTUFDTCxJQUFLLE9BRUosR0FBS2lHLEVBQVEseUVBQXlFMG5CLEtBQU1DLEdBQWUsQ0FHMUcsTUFBTXh0QixFQUFJc3RCLFdBQVl6bkIsRUFBTyxJQUFRLElBQy9CM0MsRUFBSXVxQixTQUFVNW5CLEVBQU8sR0FBSyxJQUFPLElBQ2pDeEUsRUFBSW9zQixTQUFVNW5CLEVBQU8sR0FBSyxJQUFPLElBSXZDLE9BRkF1bkIsRUFBYXZuQixFQUFPLElBRWJqRyxLQUFLc3RCLE9BQVFsdEIsRUFBR2tELEVBQUc3QixFQUFHeXFCLFVBUTFCLEdBQUtqckIsRUFBSSxvQkFBb0Iwc0IsS0FBTUosR0FBVSxDQUluRCxNQUFNRixFQUFNcHNCLEVBQUcsR0FDVG9XLEVBQU9nVyxFQUFJdnVCLE9BRWpCLEdBQWMsSUFBVHVZLEVBU0osT0FOQXJYLEtBQUt3RCxFQUFJcXFCLFNBQVVSLEVBQUloaUIsT0FBUSxHQUFNZ2lCLEVBQUloaUIsT0FBUSxHQUFLLElBQU8sSUFDN0RyTCxLQUFLSixFQUFJaXVCLFNBQVVSLEVBQUloaUIsT0FBUSxHQUFNZ2lCLEVBQUloaUIsT0FBUSxHQUFLLElBQU8sSUFDN0RyTCxLQUFLbkIsRUFBSWd2QixTQUFVUixFQUFJaGlCLE9BQVEsR0FBTWdpQixFQUFJaGlCLE9BQVEsR0FBSyxJQUFPLElBRTdEMGdCLEdBQWdCUyxvQkFBcUJ4c0IsS0FBTWtzQixHQUVwQ2xzQixLQUVELEdBQWMsSUFBVHFYLEVBU1gsT0FOQXJYLEtBQUt3RCxFQUFJcXFCLFNBQVVSLEVBQUloaUIsT0FBUSxHQUFNZ2lCLEVBQUloaUIsT0FBUSxHQUFLLElBQU8sSUFDN0RyTCxLQUFLSixFQUFJaXVCLFNBQVVSLEVBQUloaUIsT0FBUSxHQUFNZ2lCLEVBQUloaUIsT0FBUSxHQUFLLElBQU8sSUFDN0RyTCxLQUFLbkIsRUFBSWd2QixTQUFVUixFQUFJaGlCLE9BQVEsR0FBTWdpQixFQUFJaGlCLE9BQVEsR0FBSyxJQUFPLElBRTdEMGdCLEdBQWdCUyxvQkFBcUJ4c0IsS0FBTWtzQixHQUVwQ2xzQixLQU1ULE9BQUt1dEIsR0FBU0EsRUFBTXp1QixPQUFTLEVBRXJCa0IsS0FBSzh0QixhQUFjUCxFQUFPckIsR0FJM0Jsc0IsS0FJUjh0QixhQUFjUCxFQUFPckIsRUFBYXZLLFFBR2pDLE1BQU0wTCxFQUFNWixHQUFnQmMsRUFBTXBLLGVBY2xDLFlBWmEzRCxJQUFSNk4sRUFHSnJ0QixLQUFLbXRCLE9BQVFFLEVBQUtuQixHQUtsQnZwQixRQUFRdWhCLEtBQU0sOEJBQWdDcUosR0FJeEN2dEIsS0FJUitqQixRQUVDLE9BQU8sSUFBSS9qQixLQUFLMkksWUFBYTNJLEtBQUt3RCxFQUFHeEQsS0FBS0osRUFBR0ksS0FBS25CLEdBSW5EbWxCLEtBQU0vZCxHQU1MLE9BSkFqRyxLQUFLd0QsRUFBSXlDLEVBQU16QyxFQUNmeEQsS0FBS0osRUFBSXFHLEVBQU1yRyxFQUNmSSxLQUFLbkIsRUFBSW9ILEVBQU1wSCxFQUVSbUIsS0FJUit0QixpQkFBa0I5bkIsR0FNakIsT0FKQWpHLEtBQUt3RCxFQUFJNG5CLEVBQWNubEIsRUFBTXpDLEdBQzdCeEQsS0FBS0osRUFBSXdyQixFQUFjbmxCLEVBQU1yRyxHQUM3QkksS0FBS25CLEVBQUl1c0IsRUFBY25sQixFQUFNcEgsR0FFdEJtQixLQUlSZ3VCLGlCQUFrQi9uQixHQU1qQixPQUpBakcsS0FBS3dELEVBQUk2bkIsR0FBY3BsQixFQUFNekMsR0FDN0J4RCxLQUFLSixFQUFJeXJCLEdBQWNwbEIsRUFBTXJHLEdBQzdCSSxLQUFLbkIsRUFBSXdzQixHQUFjcGxCLEVBQU1wSCxHQUV0Qm1CLEtBSVJpdUIsc0JBSUMsT0FGQWp1QixLQUFLK3RCLGlCQUFrQi90QixNQUVoQkEsS0FJUmt1QixzQkFJQyxPQUZBbHVCLEtBQUtndUIsaUJBQWtCaHVCLE1BRWhCQSxLQUlSbXVCLE9BQVFqQyxFQUFhdkssUUFJcEIsT0FGQW9LLEdBQWdCUSxzQkFBdUJPLEdBQWM5c0IsS0FBTTBzQixJQUFRUixHQUU1RDlJLEVBQWdCLElBQVRzSixHQUFLbHBCLEVBQVMsRUFBRyxNQUFTLEdBQUs0ZixFQUFnQixJQUFUc0osR0FBSzlzQixFQUFTLEVBQUcsTUFBUyxFQUFJd2pCLEVBQWdCLElBQVRzSixHQUFLN3RCLEVBQVMsRUFBRyxNQUFTLEVBSXBIdXZCLGFBQWNsQyxFQUFhdkssUUFFMUIsT0FBUyxTQUFXM2hCLEtBQUttdUIsT0FBUWpDLEdBQWE5cEIsU0FBVSxLQUFPMEosT0FBUyxHQUl6RXVpQixPQUFRNUwsRUFBUXlKLEVBQWF0SyxlQUk1Qm1LLEdBQWdCUSxzQkFBdUJPLEdBQWM5c0IsS0FBTTBzQixJQUFRUixHQUVuRSxNQUFNMW9CLEVBQUlrcEIsR0FBS2xwQixFQUFHNUQsRUFBSThzQixHQUFLOXNCLEVBQUdmLEVBQUk2dEIsR0FBSzd0QixFQUVqQ2tILEVBQU1sRyxLQUFLa0csSUFBS3ZDLEVBQUc1RCxFQUFHZixHQUN0QjBILEVBQU0xRyxLQUFLMEcsSUFBSy9DLEVBQUc1RCxFQUFHZixHQUU1QixJQUFJeXZCLEVBQUtDLEVBQ1QsTUFBTUMsR0FBY2pvQixFQUFNUixHQUFRLEVBRWxDLEdBQUtRLElBQVFSLEVBRVp1b0IsRUFBTSxFQUNOQyxFQUFhLE1BRVAsQ0FFTixNQUFNRSxFQUFRMW9CLEVBQU1RLEVBSXBCLE9BRkFnb0IsRUFBYUMsR0FBYSxHQUFNQyxHQUFVMW9CLEVBQU1RLEdBQVFrb0IsR0FBVSxFQUFJMW9CLEVBQU1RLEdBRW5FUixHQUVSLEtBQUt2QyxFQUFHOHFCLEdBQVExdUIsRUFBSWYsR0FBTTR2QixHQUFVN3VCLEVBQUlmLEVBQUksRUFBSSxHQUFLLE1BQ3JELEtBQUtlLEVBQUcwdUIsR0FBUXp2QixFQUFJMkUsR0FBTWlyQixFQUFRLEVBQUcsTUFDckMsS0FBSzV2QixFQUFHeXZCLEdBQVE5cUIsRUFBSTVELEdBQU02dUIsRUFBUSxFQUluQ0gsR0FBTyxFQVFSLE9BSkE3TCxFQUFPcmlCLEVBQUlrdUIsRUFDWDdMLEVBQU9uZixFQUFJaXJCLEVBQ1g5TCxFQUFPaGhCLEVBQUkrc0IsRUFFSi9MLEVBSVJpTSxPQUFRak0sRUFBUXlKLEVBQWF0SyxlQVE1QixPQU5BbUssR0FBZ0JRLHNCQUF1Qk8sR0FBYzlzQixLQUFNMHNCLElBQVFSLEdBRW5FekosRUFBT2pmLEVBQUlrcEIsR0FBS2xwQixFQUNoQmlmLEVBQU83aUIsRUFBSThzQixHQUFLOXNCLEVBQ2hCNmlCLEVBQU81akIsRUFBSTZ0QixHQUFLN3RCLEVBRVQ0akIsRUFJUmtNLFNBQVV6QyxFQUFhdkssUUFJdEIsT0FGQW9LLEdBQWdCUSxzQkFBdUJPLEdBQWM5c0IsS0FBTTBzQixJQUFRUixHQUU5REEsSUFBZXZLLEVBR1osU0FBVXVLLEtBQWdCUSxHQUFLbHBCLEtBQU9rcEIsR0FBSzlzQixLQUFPOHNCLEdBQUs3dEIsS0FJeEQsT0FBa0IsSUFBVDZ0QixHQUFLbHBCLEVBQVksS0FBZ0IsSUFBVGtwQixHQUFLOXNCLEVBQVksS0FBZ0IsSUFBVDhzQixHQUFLN3RCLEVBQVksS0FJbEYrdkIsVUFBV3h1QixFQUFHa0QsRUFBRzdCLEdBUWhCLE9BTkF6QixLQUFLcXVCLE9BQVExQixJQUViQSxHQUFNdnNCLEdBQUtBLEVBQUd1c0IsR0FBTXJwQixHQUFLQSxFQUFHcXBCLEdBQU1sckIsR0FBS0EsRUFFdkN6QixLQUFLc3RCLE9BQVFYLEdBQU12c0IsRUFBR3VzQixHQUFNcnBCLEVBQUdxcEIsR0FBTWxyQixHQUU5QnpCLEtBSVJpa0IsSUFBS2hlLEdBTUosT0FKQWpHLEtBQUt3RCxHQUFLeUMsRUFBTXpDLEVBQ2hCeEQsS0FBS0osR0FBS3FHLEVBQU1yRyxFQUNoQkksS0FBS25CLEdBQUtvSCxFQUFNcEgsRUFFVG1CLEtBSVI2dUIsVUFBV0MsRUFBUUMsR0FNbEIsT0FKQS91QixLQUFLd0QsRUFBSXNyQixFQUFPdHJCLEVBQUl1ckIsRUFBT3ZyQixFQUMzQnhELEtBQUtKLEVBQUlrdkIsRUFBT2x2QixFQUFJbXZCLEVBQU9udkIsRUFDM0JJLEtBQUtuQixFQUFJaXdCLEVBQU9qd0IsRUFBSWt3QixFQUFPbHdCLEVBRXBCbUIsS0FJUm9rQixVQUFXOWdCLEdBTVYsT0FKQXRELEtBQUt3RCxHQUFLRixFQUNWdEQsS0FBS0osR0FBSzBELEVBQ1Z0RCxLQUFLbkIsR0FBS3lFLEVBRUh0RCxLQUlSc2tCLElBQUtyZSxHQU1KLE9BSkFqRyxLQUFLd0QsRUFBSTNELEtBQUtrRyxJQUFLLEVBQUcvRixLQUFLd0QsRUFBSXlDLEVBQU16QyxHQUNyQ3hELEtBQUtKLEVBQUlDLEtBQUtrRyxJQUFLLEVBQUcvRixLQUFLSixFQUFJcUcsRUFBTXJHLEdBQ3JDSSxLQUFLbkIsRUFBSWdCLEtBQUtrRyxJQUFLLEVBQUcvRixLQUFLbkIsRUFBSW9ILEVBQU1wSCxHQUU5Qm1CLEtBSVJ5a0IsU0FBVXhlLEdBTVQsT0FKQWpHLEtBQUt3RCxHQUFLeUMsRUFBTXpDLEVBQ2hCeEQsS0FBS0osR0FBS3FHLEVBQU1yRyxFQUNoQkksS0FBS25CLEdBQUtvSCxFQUFNcEgsRUFFVG1CLEtBSVIwa0IsZUFBZ0JwaEIsR0FNZixPQUpBdEQsS0FBS3dELEdBQUtGLEVBQ1Z0RCxLQUFLSixHQUFLMEQsRUFDVnRELEtBQUtuQixHQUFLeUUsRUFFSHRELEtBSVJxakIsS0FBTXBkLEVBQU8rVSxHQU1aLE9BSkFoYixLQUFLd0QsSUFBT3lDLEVBQU16QyxFQUFJeEQsS0FBS3dELEdBQU13WCxFQUNqQ2hiLEtBQUtKLElBQU9xRyxFQUFNckcsRUFBSUksS0FBS0osR0FBTW9iLEVBQ2pDaGIsS0FBS25CLElBQU9vSCxFQUFNcEgsRUFBSW1CLEtBQUtuQixHQUFNbWMsRUFFMUJoYixLQUlSZ3ZCLFdBQVlGLEVBQVFDLEVBQVEvVCxHQU0zQixPQUpBaGIsS0FBS3dELEVBQUlzckIsRUFBT3RyQixHQUFNdXJCLEVBQU92ckIsRUFBSXNyQixFQUFPdHJCLEdBQU13WCxFQUM5Q2hiLEtBQUtKLEVBQUlrdkIsRUFBT2x2QixHQUFNbXZCLEVBQU9udkIsRUFBSWt2QixFQUFPbHZCLEdBQU1vYixFQUM5Q2hiLEtBQUtuQixFQUFJaXdCLEVBQU9qd0IsR0FBTWt3QixFQUFPbHdCLEVBQUlpd0IsRUFBT2p3QixHQUFNbWMsRUFFdkNoYixLQUlSaXZCLFFBQVNocEIsRUFBTytVLEdBRWZoYixLQUFLcXVCLE9BQVExQixJQUNiMW1CLEVBQU1vb0IsT0FBUXpCLElBRWQsTUFBTXhzQixFQUFJaWpCLEVBQU1zSixHQUFNdnNCLEVBQUd3c0IsR0FBTXhzQixFQUFHNGEsR0FDNUIxWCxFQUFJK2YsRUFBTXNKLEdBQU1ycEIsRUFBR3NwQixHQUFNdHBCLEVBQUcwWCxHQUM1QnZaLEVBQUk0aEIsRUFBTXNKLEdBQU1sckIsRUFBR21yQixHQUFNbnJCLEVBQUd1WixHQUlsQyxPQUZBaGIsS0FBS3N0QixPQUFRbHRCLEVBQUdrRCxFQUFHN0IsR0FFWnpCLEtBSVJzbUIsT0FBUTVrQixHQUVQLE9BQVNBLEVBQUU4QixJQUFNeEQsS0FBS3dELEdBQVM5QixFQUFFOUIsSUFBTUksS0FBS0osR0FBUzhCLEVBQUU3QyxJQUFNbUIsS0FBS25CLEVBSW5FMG5CLFVBQVc3RCxFQUFPOEQsRUFBUyxHQU0xQixPQUpBeG1CLEtBQUt3RCxFQUFJa2YsRUFBTzhELEdBQ2hCeG1CLEtBQUtKLEVBQUk4aUIsRUFBTzhELEVBQVMsR0FDekJ4bUIsS0FBS25CLEVBQUk2akIsRUFBTzhELEVBQVMsR0FFbEJ4bUIsS0FJUnltQixRQUFTL0QsRUFBUSxHQUFJOEQsRUFBUyxHQU03QixPQUpBOUQsRUFBTzhELEdBQVd4bUIsS0FBS3dELEVBQ3ZCa2YsRUFBTzhELEVBQVMsR0FBTXhtQixLQUFLSixFQUMzQjhpQixFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUtuQixFQUVwQjZqQixFQUlSZ0Usb0JBQXFCQyxFQUFXL2YsR0FnQi9CLE9BZEE1RyxLQUFLd0QsRUFBSW1qQixFQUFVQyxLQUFNaGdCLEdBQ3pCNUcsS0FBS0osRUFBSSttQixFQUFVRSxLQUFNamdCLEdBQ3pCNUcsS0FBS25CLEVBQUk4bkIsRUFBVXVJLEtBQU10b0IsSUFFSyxJQUF6QitmLEVBQVV3SSxhQUlkbnZCLEtBQUt3RCxHQUFLLElBQ1Z4RCxLQUFLSixHQUFLLElBQ1ZJLEtBQUtuQixHQUFLLEtBSUptQixLQUlSNEwsU0FFQyxPQUFPNUwsS0FBS211QixVQWFkLElBQUlpQixHQVBKcEMsR0FBTXFDLE1BQVE1QyxHQUVkTyxHQUFNenRCLFVBQVUydEIsU0FBVSxFQUMxQkYsR0FBTXp0QixVQUFVaUUsRUFBSSxFQUNwQndwQixHQUFNenRCLFVBQVVLLEVBQUksRUFDcEJvdEIsR0FBTXp0QixVQUFVVixFQUFJLEVBSXBCLE1BQU15d0IsR0FFTEMsa0JBQW1CcFgsR0FFbEIsR0FBSyxVQUFVN00sS0FBTTZNLEVBQU1xWCxLQUUxQixPQUFPclgsRUFBTXFYLElBSWQsR0FBaUMsb0JBQXJCQyxrQkFFWCxPQUFPdFgsRUFBTXFYLElBSWQsSUFBSS9vQixFQUVKLEdBQUswUixhQUFpQnNYLGtCQUVyQmhwQixFQUFTMFIsTUFFSCxNQUVXcUgsSUFBWjRQLEtBQXdCQSxHQUFVakUsRUFBaUIsV0FFeERpRSxHQUFRaHJCLE1BQVErVCxFQUFNL1QsTUFDdEJnckIsR0FBUS9xQixPQUFTOFQsRUFBTTlULE9BRXZCLE1BQU1xckIsRUFBVU4sR0FBUW5hLFdBQVksTUFFL0JrRCxhQUFpQndYLFVBRXJCRCxFQUFRRSxhQUFjelgsRUFBTyxFQUFHLEdBSWhDdVgsRUFBUXhhLFVBQVdpRCxFQUFPLEVBQUcsRUFBR0EsRUFBTS9ULE1BQU8rVCxFQUFNOVQsUUFJcERvQyxFQUFTMm9CLEdBSVYsT0FBSzNvQixFQUFPckMsTUFBUSxNQUFRcUMsRUFBT3BDLE9BQVMsTUFFM0MxQixRQUFRdWhCLEtBQU0sOEVBQStFL0wsR0FFdEYxUixFQUFPb3BCLFVBQVcsYUFBYyxLQUloQ3BwQixFQUFPb3BCLFVBQVcsYUFNM0JOLG9CQUFxQnBYLEdBRXBCLEdBQW1DLG9CQUFyQmdFLGtCQUFvQ2hFLGFBQWlCZ0Usa0JBQ25DLG9CQUF0QnNULG1CQUFxQ3RYLGFBQWlCc1gsbUJBQ3RDLG9CQUFoQkssYUFBK0IzWCxhQUFpQjJYLFlBQWdCLENBRXpFLE1BQU1ycEIsRUFBUzBrQixFQUFpQixVQUVoQzFrQixFQUFPckMsTUFBUStULEVBQU0vVCxNQUNyQnFDLEVBQU9wQyxPQUFTOFQsRUFBTTlULE9BRXRCLE1BQU1xckIsRUFBVWpwQixFQUFPd08sV0FBWSxNQUNuQ3lhLEVBQVF4YSxVQUFXaUQsRUFBTyxFQUFHLEVBQUdBLEVBQU0vVCxNQUFPK1QsRUFBTTlULFFBRW5ELE1BQU0wckIsRUFBWUwsRUFBUU0sYUFBYyxFQUFHLEVBQUc3WCxFQUFNL1QsTUFBTytULEVBQU05VCxRQUMzRDJULEVBQU8rWCxFQUFVL1gsS0FFdkIsSUFBTSxJQUFJbFgsRUFBSSxFQUFHQSxFQUFJa1gsRUFBS2xaLE9BQVFnQyxJQUVqQ2tYLEVBQU1sWCxHQUF3QyxJQUFsQ3NxQixFQUFjcFQsRUFBTWxYLEdBQU0sS0FNdkMsT0FGQTR1QixFQUFRRSxhQUFjRyxFQUFXLEVBQUcsR0FFN0J0cEIsRUFFRCxHQUFLMFIsRUFBTUgsS0FBTyxDQUV4QixNQUFNQSxFQUFPRyxFQUFNSCxLQUFLbE0sTUFBTyxHQUUvQixJQUFNLElBQUloTCxFQUFJLEVBQUdBLEVBQUlrWCxFQUFLbFosT0FBUWdDLElBRTVCa1gsYUFBZ0JwTixZQUFjb04sYUFBZ0J3VCxrQkFFbER4VCxFQUFNbFgsR0FBTWpCLEtBQUtxTCxNQUF5QyxJQUFsQ2tnQixFQUFjcFQsRUFBTWxYLEdBQU0sTUFNbERrWCxFQUFNbFgsR0FBTXNxQixFQUFjcFQsRUFBTWxYLElBTWxDLE1BQU8sQ0FDTmtYLEtBQU1BLEVBQ041VCxNQUFPK1QsRUFBTS9ULE1BQ2JDLE9BQVE4VCxFQUFNOVQsUUFNZixPQURBMUIsUUFBUXVoQixLQUFNLCtGQUNQL0wsR0FRVixNQUFNOFgsR0FFTHRuQixZQUFhcVAsRUFBTyxNQUVuQmhZLEtBQUtrd0IsS0FBT3BOLElBRVo5aUIsS0FBS2dZLEtBQU9BLEVBRVpoWSxLQUFLbXdCLFFBQVUsRUFJWkMsZ0JBQWFweEIsSUFFRCxJQUFWQSxHQUFpQmdCLEtBQUttd0IsVUFJNUJ2a0IsT0FBUXlrQixHQUVQLE1BQU1DLE9BQTBCOVEsSUFBVDZRLEdBQXNDLGlCQUFUQSxFQUVwRCxJQUFPQyxRQUE2QzlRLElBQTdCNlEsRUFBS0UsT0FBUXZ3QixLQUFLa3dCLE1BRXhDLE9BQU9HLEVBQUtFLE9BQVF2d0IsS0FBS2t3QixNQUkxQixNQUFNTSxFQUFTLENBQ2ROLEtBQU1sd0IsS0FBS2t3QixLQUNYcFksSUFBSyxJQUdBRSxFQUFPaFksS0FBS2dZLEtBRWxCLEdBQWMsT0FBVEEsRUFBZ0IsQ0FFcEIsSUFBSUYsRUFFSixHQUFLeFksTUFBTXVPLFFBQVNtSyxHQUFTLENBSTVCRixFQUFNLEdBRU4sSUFBTSxJQUFJaFgsRUFBSSxFQUFHVyxFQUFJdVcsRUFBS2xaLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUVuQ2tYLEVBQU1sWCxHQUFJMnZCLGNBRWQzWSxFQUFJdFYsS0FBTWt1QixHQUFnQjFZLEVBQU1sWCxHQUFJcVgsUUFJcENMLEVBQUl0VixLQUFNa3VCLEdBQWdCMVksRUFBTWxYLFVBVWxDZ1gsRUFBTTRZLEdBQWdCMVksR0FJdkJ3WSxFQUFPMVksSUFBTUEsRUFVZCxPQU5Pd1ksSUFFTkQsRUFBS0UsT0FBUXZ3QixLQUFLa3dCLE1BQVNNLEdBSXJCQSxHQU1ULFNBQVNFLEdBQWdCdlksR0FFeEIsTUFBbUMsb0JBQXJCZ0Usa0JBQW9DaEUsYUFBaUJnRSxrQkFDbkMsb0JBQXRCc1QsbUJBQXFDdFgsYUFBaUJzWCxtQkFDdEMsb0JBQWhCSyxhQUErQjNYLGFBQWlCMlgsWUFJbERSLEdBQVdxQixXQUFZeFksR0FJekJBLEVBQU1ILEtBSUgsQ0FDTkEsS0FBTTFZLE1BQU1DLFVBQVV1TSxNQUFNbEwsS0FBTXVYLEVBQU1ILE1BQ3hDNVQsTUFBTytULEVBQU0vVCxNQUNiQyxPQUFROFQsRUFBTTlULE9BQ2R3UyxLQUFNc0IsRUFBTUgsS0FBS3JQLFlBQVkwTixPQUs5QjFULFFBQVF1aEIsS0FBTSwrQ0FDUCxJQVFWK0wsR0FBTzF3QixVQUFVcXhCLFVBQVcsRUFFNUIsSUFBSUMsR0FBWSxFQUVoQixNQUFNQyxXQUFnQjVPLEVBRXJCdlosWUFBYXdQLEVBQVEyWSxHQUFRQyxjQUFlQyxFQUFVRixHQUFRRyxnQkFBaUJDLEVBQVFqUixLQUFxQmtSLEVBQVFsUixLQUFxQm1SLEVBQVloUixLQUFjaVIsRUFBWWhSLEtBQTBCaVIsRUFBUzFRLEtBQVkvSixFQUFPeUosS0FBa0JpUixFQUFhLEVBQUdDLEVBQVcvUCxLQUVqUmdRLFFBRUF2eUIsT0FBT0UsZUFBZ0JZLEtBQU0sS0FBTSxDQUFFaEIsTUFBTzZ4QixPQUU1Qzd3QixLQUFLa3dCLEtBQU9wTixJQUVaOWlCLEtBQUtxVyxLQUFPLEdBRVpyVyxLQUFLK3NCLE9BQVMsSUFBSWtELEdBQVE5WCxHQUMxQm5ZLEtBQUsweEIsUUFBVSxHQUVmMXhCLEtBQUtneEIsUUFBVUEsRUFFZmh4QixLQUFLa3hCLE1BQVFBLEVBQ2JseEIsS0FBS214QixNQUFRQSxFQUVibnhCLEtBQUtveEIsVUFBWUEsRUFDakJweEIsS0FBS3F4QixVQUFZQSxFQUVqQnJ4QixLQUFLdXhCLFdBQWFBLEVBRWxCdnhCLEtBQUtzeEIsT0FBU0EsRUFDZHR4QixLQUFLMnhCLGVBQWlCLEtBQ3RCM3hCLEtBQUs2VyxLQUFPQSxFQUVaN1csS0FBS3dtQixPQUFTLElBQUloRCxFQUFTLEVBQUcsR0FDOUJ4akIsS0FBSzR4QixPQUFTLElBQUlwTyxFQUFTLEVBQUcsR0FDOUJ4akIsS0FBSyttQixPQUFTLElBQUl2RCxFQUFTLEVBQUcsR0FDOUJ4akIsS0FBSzRILFNBQVcsRUFFaEI1SCxLQUFLNnhCLGtCQUFtQixFQUN4Qjd4QixLQUFLaXJCLE9BQVMsSUFBSTlELEVBRWxCbm5CLEtBQUs4eEIsaUJBQWtCLEVBQ3ZCOXhCLEtBQUsreEIsa0JBQW1CLEVBQ3hCL3hCLEtBQUtneUIsT0FBUSxFQUNiaHlCLEtBQUtpeUIsZ0JBQWtCLEVBTXZCanlCLEtBQUt3eEIsU0FBV0EsRUFFaEJ4eEIsS0FBS2t5QixTQUFXLEdBRWhCbHlCLEtBQUttd0IsUUFBVSxFQUNmbndCLEtBQUtteUIsU0FBVyxLQUVoQm55QixLQUFLb3lCLHVCQUF3QixFQUM3QnB5QixLQUFLcXlCLGtCQUFtQixFQUlyQmxhLFlBRUgsT0FBT25ZLEtBQUsrc0IsT0FBTy9VLEtBSWhCRyxVQUFPblosR0FFVmdCLEtBQUsrc0IsT0FBTy9VLEtBQU9oWixFQUlwQnN6QixlQUVDdHlCLEtBQUtpckIsT0FBT1QsZUFBZ0J4cUIsS0FBS3dtQixPQUFPN2xCLEVBQUdYLEtBQUt3bUIsT0FBTzNsQixFQUFHYixLQUFLNHhCLE9BQU9qeEIsRUFBR1gsS0FBSzR4QixPQUFPL3dCLEVBQUdiLEtBQUs0SCxTQUFVNUgsS0FBSyttQixPQUFPcG1CLEVBQUdYLEtBQUsrbUIsT0FBT2xtQixHQUluSWtqQixRQUVDLE9BQU8sSUFBSS9qQixLQUFLMkksYUFBY3FiLEtBQU1oa0IsTUFJckNna0IsS0FBTStJLEdBdUNMLE9BckNBL3NCLEtBQUtxVyxLQUFPMFcsRUFBTzFXLEtBRW5CclcsS0FBSytzQixPQUFTQSxFQUFPQSxPQUNyQi9zQixLQUFLMHhCLFFBQVUzRSxFQUFPMkUsUUFBUTVsQixNQUFPLEdBRXJDOUwsS0FBS2d4QixRQUFVakUsRUFBT2lFLFFBRXRCaHhCLEtBQUtreEIsTUFBUW5FLEVBQU9tRSxNQUNwQmx4QixLQUFLbXhCLE1BQVFwRSxFQUFPb0UsTUFFcEJueEIsS0FBS294QixVQUFZckUsRUFBT3FFLFVBQ3hCcHhCLEtBQUtxeEIsVUFBWXRFLEVBQU9zRSxVQUV4QnJ4QixLQUFLdXhCLFdBQWF4RSxFQUFPd0UsV0FFekJ2eEIsS0FBS3N4QixPQUFTdkUsRUFBT3VFLE9BQ3JCdHhCLEtBQUsyeEIsZUFBaUI1RSxFQUFPNEUsZUFDN0IzeEIsS0FBSzZXLEtBQU9rVyxFQUFPbFcsS0FFbkI3VyxLQUFLd21CLE9BQU94QyxLQUFNK0ksRUFBT3ZHLFFBQ3pCeG1CLEtBQUs0eEIsT0FBTzVOLEtBQU0rSSxFQUFPNkUsUUFDekI1eEIsS0FBSyttQixPQUFPL0MsS0FBTStJLEVBQU9oRyxRQUN6Qi9tQixLQUFLNEgsU0FBV21sQixFQUFPbmxCLFNBRXZCNUgsS0FBSzZ4QixpQkFBbUI5RSxFQUFPOEUsaUJBQy9CN3hCLEtBQUtpckIsT0FBT2pILEtBQU0rSSxFQUFPOUIsUUFFekJqckIsS0FBSzh4QixnQkFBa0IvRSxFQUFPK0UsZ0JBQzlCOXhCLEtBQUsreEIsaUJBQW1CaEYsRUFBT2dGLGlCQUMvQi94QixLQUFLZ3lCLE1BQVFqRixFQUFPaUYsTUFDcEJoeUIsS0FBS2l5QixnQkFBa0JsRixFQUFPa0YsZ0JBQzlCanlCLEtBQUt3eEIsU0FBV3pFLEVBQU95RSxTQUV2Qnh4QixLQUFLa3lCLFNBQVdLLEtBQUtDLE1BQU9ELEtBQUtFLFVBQVcxRixFQUFPbUYsV0FFbkRseUIsS0FBS293QixhQUFjLEVBRVpwd0IsS0FJUjRMLE9BQVF5a0IsR0FFUCxNQUFNQyxPQUEwQjlRLElBQVQ2USxHQUFzQyxpQkFBVEEsRUFFcEQsSUFBT0MsUUFBK0M5USxJQUEvQjZRLEVBQUtxQyxTQUFVMXlCLEtBQUtrd0IsTUFFMUMsT0FBT0csRUFBS3FDLFNBQVUxeUIsS0FBS2t3QixNQUk1QixNQUFNTSxFQUFTLENBRWRtQyxTQUFVLENBQ1R4QyxRQUFTLElBQ1R0WixLQUFNLFVBQ04rYixVQUFXLGtCQUdaMUMsS0FBTWx3QixLQUFLa3dCLEtBQ1g3WixLQUFNclcsS0FBS3FXLEtBRVg4QixNQUFPblksS0FBSytzQixPQUFPbmhCLE9BQVF5a0IsR0FBT0gsS0FFbENjLFFBQVNoeEIsS0FBS2d4QixRQUVkWSxPQUFRLENBQUU1eEIsS0FBSzR4QixPQUFPanhCLEVBQUdYLEtBQUs0eEIsT0FBTy93QixHQUNyQzJsQixPQUFRLENBQUV4bUIsS0FBS3dtQixPQUFPN2xCLEVBQUdYLEtBQUt3bUIsT0FBTzNsQixHQUNyQ2ttQixPQUFRLENBQUUvbUIsS0FBSyttQixPQUFPcG1CLEVBQUdYLEtBQUsrbUIsT0FBT2xtQixHQUNyQytHLFNBQVU1SCxLQUFLNEgsU0FFZmlyQixLQUFNLENBQUU3eUIsS0FBS2t4QixNQUFPbHhCLEtBQUtteEIsT0FFekJHLE9BQVF0eEIsS0FBS3N4QixPQUNiemEsS0FBTTdXLEtBQUs2VyxLQUNYMmEsU0FBVXh4QixLQUFLd3hCLFNBRWZILFVBQVdyeEIsS0FBS3F4QixVQUNoQkQsVUFBV3B4QixLQUFLb3hCLFVBQ2hCRyxXQUFZdnhCLEtBQUt1eEIsV0FFakJTLE1BQU9oeUIsS0FBS2d5QixNQUVaRCxpQkFBa0IveEIsS0FBSyt4QixpQkFDdkJFLGdCQUFpQmp5QixLQUFLaXlCLGlCQVl2QixNQVJ5QyxPQUFwQ00sS0FBS0UsVUFBV3p5QixLQUFLa3lCLFlBQXNCMUIsRUFBTzBCLFNBQVdseUIsS0FBS2t5QixVQUVoRTVCLElBRU5ELEVBQUtxQyxTQUFVMXlCLEtBQUtrd0IsTUFBU00sR0FJdkJBLEVBSVJzQyxVQUVDOXlCLEtBQUsrQyxjQUFlLENBQUU4VCxLQUFNLFlBSTdCa2MsWUFBYUMsR0FFWixHQS84RWdCLE1BKzhFWGh6QixLQUFLZ3hCLFFBQXdCLE9BQU9nQyxFQUl6QyxHQUZBQSxFQUFHbk8sYUFBYzdrQixLQUFLaXJCLFFBRWpCK0gsRUFBR3J5QixFQUFJLEdBQUtxeUIsRUFBR3J5QixFQUFJLEVBRXZCLE9BQVNYLEtBQUtreEIsT0FFYixLQUFLbFIsRUFFSmdULEVBQUdyeUIsRUFBSXF5QixFQUFHcnlCLEVBQUlkLEtBQUtxTCxNQUFPOG5CLEVBQUdyeUIsR0FDN0IsTUFFRCxLQUFLc2YsRUFFSitTLEVBQUdyeUIsRUFBSXF5QixFQUFHcnlCLEVBQUksRUFBSSxFQUFJLEVBQ3RCLE1BRUQsS0FBS3VmLEVBRXdDLElBQXZDcmdCLEtBQUsyUixJQUFLM1IsS0FBS3FMLE1BQU84bkIsRUFBR3J5QixHQUFNLEdBRW5DcXlCLEVBQUdyeUIsRUFBSWQsS0FBSzZNLEtBQU1zbUIsRUFBR3J5QixHQUFNcXlCLEVBQUdyeUIsRUFJOUJxeUIsRUFBR3J5QixFQUFJcXlCLEVBQUdyeUIsRUFBSWQsS0FBS3FMLE1BQU84bkIsRUFBR3J5QixHQVVqQyxHQUFLcXlCLEVBQUdueUIsRUFBSSxHQUFLbXlCLEVBQUdueUIsRUFBSSxFQUV2QixPQUFTYixLQUFLbXhCLE9BRWIsS0FBS25SLEVBRUpnVCxFQUFHbnlCLEVBQUlteUIsRUFBR255QixFQUFJaEIsS0FBS3FMLE1BQU84bkIsRUFBR255QixHQUM3QixNQUVELEtBQUtvZixFQUVKK1MsRUFBR255QixFQUFJbXlCLEVBQUdueUIsRUFBSSxFQUFJLEVBQUksRUFDdEIsTUFFRCxLQUFLcWYsRUFFd0MsSUFBdkNyZ0IsS0FBSzJSLElBQUszUixLQUFLcUwsTUFBTzhuQixFQUFHbnlCLEdBQU0sR0FFbkNteUIsRUFBR255QixFQUFJaEIsS0FBSzZNLEtBQU1zbUIsRUFBR255QixHQUFNbXlCLEVBQUdueUIsRUFJOUJteUIsRUFBR255QixFQUFJbXlCLEVBQUdueUIsRUFBSWhCLEtBQUtxTCxNQUFPOG5CLEVBQUdueUIsR0FnQmpDLE9BTktiLEtBQUtneUIsUUFFVGdCLEVBQUdueUIsRUFBSSxFQUFJbXlCLEVBQUdueUIsR0FJUm15QixFQUlKNUMsZ0JBQWFweEIsSUFFRCxJQUFWQSxJQUVKZ0IsS0FBS213QixVQUNMbndCLEtBQUsrc0IsT0FBT3FELGFBQWMsSUFRN0JVLEdBQVFDLGNBQWdCLEtBQ3hCRCxHQUFRRyxnQkEzaUZVLElBNmlGbEJILEdBQVF2eEIsVUFBVTB6QixXQUFZLEVBRTlCLE1BQU1DLEdBRUx2cUIsWUFBYWhJLEVBQUksRUFBR0UsRUFBSSxFQUFHSyxFQUFJLEVBQUdYLEVBQUksR0FFckNQLEtBQUtXLEVBQUlBLEVBQ1RYLEtBQUthLEVBQUlBLEVBQ1RiLEtBQUtrQixFQUFJQSxFQUNUbEIsS0FBS08sRUFBSUEsRUFJTjZELFlBRUgsT0FBT3BFLEtBQUtrQixFQUlUa0QsVUFBT3BGLEdBRVZnQixLQUFLa0IsRUFBSWxDLEVBSU5xRixhQUVILE9BQU9yRSxLQUFLTyxFQUlUOEQsV0FBUXJGLEdBRVhnQixLQUFLTyxFQUFJdkIsRUFJVjJOLElBQUtoTSxFQUFHRSxFQUFHSyxFQUFHWCxHQU9iLE9BTEFQLEtBQUtXLEVBQUlBLEVBQ1RYLEtBQUthLEVBQUlBLEVBQ1RiLEtBQUtrQixFQUFJQSxFQUNUbEIsS0FBS08sRUFBSUEsRUFFRlAsS0FJUnlqQixVQUFXQyxHQU9WLE9BTEExakIsS0FBS1csRUFBSStpQixFQUNUMWpCLEtBQUthLEVBQUk2aUIsRUFDVDFqQixLQUFLa0IsRUFBSXdpQixFQUNUMWpCLEtBQUtPLEVBQUltakIsRUFFRjFqQixLQUlSMmpCLEtBQU1oakIsR0FJTCxPQUZBWCxLQUFLVyxFQUFJQSxFQUVGWCxLQUlSNGpCLEtBQU0vaUIsR0FJTCxPQUZBYixLQUFLYSxFQUFJQSxFQUVGYixLQUlSbXpCLEtBQU1qeUIsR0FJTCxPQUZBbEIsS0FBS2tCLEVBQUlBLEVBRUZsQixLQUlSb3pCLEtBQU03eUIsR0FJTCxPQUZBUCxLQUFLTyxFQUFJQSxFQUVGUCxLQUlSNmpCLGFBQWNqZCxFQUFPNUgsR0FFcEIsT0FBUzRILEdBRVIsS0FBSyxFQUFHNUcsS0FBS1csRUFBSTNCLEVBQU8sTUFDeEIsS0FBSyxFQUFHZ0IsS0FBS2EsRUFBSTdCLEVBQU8sTUFDeEIsS0FBSyxFQUFHZ0IsS0FBS2tCLEVBQUlsQyxFQUFPLE1BQ3hCLEtBQUssRUFBR2dCLEtBQUtPLEVBQUl2QixFQUFPLE1BQ3hCLFFBQVMsTUFBTSxJQUFJYyxNQUFPLDBCQUE0QjhHLEdBSXZELE9BQU81RyxLQUlSOGpCLGFBQWNsZCxHQUViLE9BQVNBLEdBRVIsS0FBSyxFQUFHLE9BQU81RyxLQUFLVyxFQUNwQixLQUFLLEVBQUcsT0FBT1gsS0FBS2EsRUFDcEIsS0FBSyxFQUFHLE9BQU9iLEtBQUtrQixFQUNwQixLQUFLLEVBQUcsT0FBT2xCLEtBQUtPLEVBQ3BCLFFBQVMsTUFBTSxJQUFJVCxNQUFPLDBCQUE0QjhHLElBTXhEbWQsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLFlBQWEzSSxLQUFLVyxFQUFHWCxLQUFLYSxFQUFHYixLQUFLa0IsRUFBR2xCLEtBQUtPLEdBSTNEeWpCLEtBQU0vakIsR0FPTCxPQUxBRCxLQUFLVyxFQUFJVixFQUFFVSxFQUNYWCxLQUFLYSxFQUFJWixFQUFFWSxFQUNYYixLQUFLa0IsRUFBSWpCLEVBQUVpQixFQUNYbEIsS0FBS08sT0FBY2lmLElBQVJ2ZixFQUFFTSxFQUFvQk4sRUFBRU0sRUFBSSxFQUVoQ1AsS0FJUmlrQixJQUFLaGtCLEVBQUdNLEdBRVAsWUFBV2lmLElBQU5qZixHQUVKb0MsUUFBUXVoQixLQUFNLHlGQUNQbGtCLEtBQUtta0IsV0FBWWxrQixFQUFHTSxLQUk1QlAsS0FBS1csR0FBS1YsRUFBRVUsRUFDWlgsS0FBS2EsR0FBS1osRUFBRVksRUFDWmIsS0FBS2tCLEdBQUtqQixFQUFFaUIsRUFDWmxCLEtBQUtPLEdBQUtOLEVBQUVNLEVBRUxQLE1BSVJva0IsVUFBVzlnQixHQU9WLE9BTEF0RCxLQUFLVyxHQUFLMkMsRUFDVnRELEtBQUthLEdBQUt5QyxFQUNWdEQsS0FBS2tCLEdBQUtvQyxFQUNWdEQsS0FBS08sR0FBSytDLEVBRUh0RCxLQUlSbWtCLFdBQVl2bEIsRUFBR0MsR0FPZCxPQUxBbUIsS0FBS1csRUFBSS9CLEVBQUUrQixFQUFJOUIsRUFBRThCLEVBQ2pCWCxLQUFLYSxFQUFJakMsRUFBRWlDLEVBQUloQyxFQUFFZ0MsRUFDakJiLEtBQUtrQixFQUFJdEMsRUFBRXNDLEVBQUlyQyxFQUFFcUMsRUFDakJsQixLQUFLTyxFQUFJM0IsRUFBRTJCLEVBQUkxQixFQUFFMEIsRUFFVlAsS0FJUnFrQixnQkFBaUJwa0IsRUFBR3FELEdBT25CLE9BTEF0RCxLQUFLVyxHQUFLVixFQUFFVSxFQUFJMkMsRUFDaEJ0RCxLQUFLYSxHQUFLWixFQUFFWSxFQUFJeUMsRUFDaEJ0RCxLQUFLa0IsR0FBS2pCLEVBQUVpQixFQUFJb0MsRUFDaEJ0RCxLQUFLTyxHQUFLTixFQUFFTSxFQUFJK0MsRUFFVHRELEtBSVJza0IsSUFBS3JrQixFQUFHTSxHQUVQLFlBQVdpZixJQUFOamYsR0FFSm9DLFFBQVF1aEIsS0FBTSx5RkFDUGxrQixLQUFLdWtCLFdBQVl0a0IsRUFBR00sS0FJNUJQLEtBQUtXLEdBQUtWLEVBQUVVLEVBQ1pYLEtBQUthLEdBQUtaLEVBQUVZLEVBQ1piLEtBQUtrQixHQUFLakIsRUFBRWlCLEVBQ1psQixLQUFLTyxHQUFLTixFQUFFTSxFQUVMUCxNQUlSd2tCLFVBQVdsaEIsR0FPVixPQUxBdEQsS0FBS1csR0FBSzJDLEVBQ1Z0RCxLQUFLYSxHQUFLeUMsRUFDVnRELEtBQUtrQixHQUFLb0MsRUFDVnRELEtBQUtPLEdBQUsrQyxFQUVIdEQsS0FJUnVrQixXQUFZM2xCLEVBQUdDLEdBT2QsT0FMQW1CLEtBQUtXLEVBQUkvQixFQUFFK0IsRUFBSTlCLEVBQUU4QixFQUNqQlgsS0FBS2EsRUFBSWpDLEVBQUVpQyxFQUFJaEMsRUFBRWdDLEVBQ2pCYixLQUFLa0IsRUFBSXRDLEVBQUVzQyxFQUFJckMsRUFBRXFDLEVBQ2pCbEIsS0FBS08sRUFBSTNCLEVBQUUyQixFQUFJMUIsRUFBRTBCLEVBRVZQLEtBSVJ5a0IsU0FBVXhrQixHQU9ULE9BTEFELEtBQUtXLEdBQUtWLEVBQUVVLEVBQ1pYLEtBQUthLEdBQUtaLEVBQUVZLEVBQ1piLEtBQUtrQixHQUFLakIsRUFBRWlCLEVBQ1psQixLQUFLTyxHQUFLTixFQUFFTSxFQUVMUCxLQUlSMGtCLGVBQWdCaEIsR0FPZixPQUxBMWpCLEtBQUtXLEdBQUsraUIsRUFDVjFqQixLQUFLYSxHQUFLNmlCLEVBQ1YxakIsS0FBS2tCLEdBQUt3aUIsRUFDVjFqQixLQUFLTyxHQUFLbWpCLEVBRUgxakIsS0FJUnF6QixhQUFjcHlCLEdBRWIsTUFBTU4sRUFBSVgsS0FBS1csRUFBR0UsRUFBSWIsS0FBS2EsRUFBR0ssRUFBSWxCLEtBQUtrQixFQUFHWCxFQUFJUCxLQUFLTyxFQUM3Q2xCLEVBQUk0QixFQUFFNmpCLFNBT1osT0FMQTlrQixLQUFLVyxFQUFJdEIsRUFBRyxHQUFNc0IsRUFBSXRCLEVBQUcsR0FBTXdCLEVBQUl4QixFQUFHLEdBQU02QixFQUFJN0IsRUFBRyxJQUFPa0IsRUFDMURQLEtBQUthLEVBQUl4QixFQUFHLEdBQU1zQixFQUFJdEIsRUFBRyxHQUFNd0IsRUFBSXhCLEVBQUcsR0FBTTZCLEVBQUk3QixFQUFHLElBQU9rQixFQUMxRFAsS0FBS2tCLEVBQUk3QixFQUFHLEdBQU1zQixFQUFJdEIsRUFBRyxHQUFNd0IsRUFBSXhCLEVBQUcsSUFBTzZCLEVBQUk3QixFQUFHLElBQU9rQixFQUMzRFAsS0FBS08sRUFBSWxCLEVBQUcsR0FBTXNCLEVBQUl0QixFQUFHLEdBQU13QixFQUFJeEIsRUFBRyxJQUFPNkIsRUFBSTdCLEVBQUcsSUFBT2tCLEVBRXBEUCxLQUlSNGtCLGFBQWNsQixHQUViLE9BQU8xakIsS0FBSzBrQixlQUFnQixFQUFJaEIsR0FJakM0UCwyQkFBNEJyMEIsR0FNM0JlLEtBQUtPLEVBQUksRUFBSVYsS0FBSzB6QixLQUFNdDBCLEVBQUVzQixHQUUxQixNQUFNK0MsRUFBSXpELEtBQUsybEIsS0FBTSxFQUFJdm1CLEVBQUVzQixFQUFJdEIsRUFBRXNCLEdBZ0JqQyxPQWRLK0MsRUFBSSxNQUVSdEQsS0FBS1csRUFBSSxFQUNUWCxLQUFLYSxFQUFJLEVBQ1RiLEtBQUtrQixFQUFJLElBSVRsQixLQUFLVyxFQUFJMUIsRUFBRTBCLEVBQUkyQyxFQUNmdEQsS0FBS2EsRUFBSTVCLEVBQUU0QixFQUFJeUMsRUFDZnRELEtBQUtrQixFQUFJakMsRUFBRWlDLEVBQUlvQyxHQUlUdEQsS0FJUnd6QiwrQkFBZ0N2eUIsR0FNL0IsSUFBSTBrQixFQUFPaGxCLEVBQUdFLEVBQUdLLEVBQ2pCLE1BQU11eUIsRUFBVSxJQUNmQyxFQUFXLEdBRVg3TCxFQUFLNW1CLEVBQUU2akIsU0FFUDZPLEVBQU05TCxFQUFJLEdBQUsrTCxFQUFNL0wsRUFBSSxHQUFLZ00sRUFBTWhNLEVBQUksR0FDeENpTSxFQUFNak0sRUFBSSxHQUFLa00sRUFBTWxNLEVBQUksR0FBS21NLEVBQU1uTSxFQUFJLEdBQ3hDb00sRUFBTXBNLEVBQUksR0FBS3FNLEVBQU1yTSxFQUFJLEdBQUtzTSxFQUFNdE0sRUFBSSxJQUV6QyxHQUFPaG9CLEtBQUsyUixJQUFLb2lCLEVBQU1FLEdBQVFMLEdBQ3hCNXpCLEtBQUsyUixJQUFLcWlCLEVBQU1JLEdBQVFSLEdBQ3hCNXpCLEtBQUsyUixJQUFLd2lCLEVBQU1FLEdBQVFULEVBQVksQ0FNMUMsR0FBTzV6QixLQUFLMlIsSUFBS29pQixFQUFNRSxHQUFRSixHQUN4Qjd6QixLQUFLMlIsSUFBS3FpQixFQUFNSSxHQUFRUCxHQUN4Qjd6QixLQUFLMlIsSUFBS3dpQixFQUFNRSxHQUFRUixHQUN4Qjd6QixLQUFLMlIsSUFBS21pQixFQUFNSSxFQUFNSSxFQUFNLEdBQU1ULEVBTXhDLE9BRkExekIsS0FBSzJNLElBQUssRUFBRyxFQUFHLEVBQUcsR0FFWjNNLEtBTVIybEIsRUFBUTlsQixLQUFLb0gsR0FFYixNQUFNbXRCLEdBQU9ULEVBQU0sR0FBTSxFQUNuQlUsR0FBT04sRUFBTSxHQUFNLEVBQ25CTyxHQUFPSCxFQUFNLEdBQU0sRUFDbkJJLEdBQU9YLEVBQU1FLEdBQVEsRUFDckJVLEdBQU9YLEVBQU1JLEdBQVEsRUFDckJRLEdBQU9ULEVBQU1FLEdBQVEsRUE0RDNCLE9BMURPRSxFQUFLQyxHQUFVRCxFQUFLRSxFQUlyQkYsRUFBS1gsR0FFVDl5QixFQUFJLEVBQ0pFLEVBQUksV0FDSkssRUFBSSxhQUlKUCxFQUFJZCxLQUFLMmxCLEtBQU00TyxHQUNmdnpCLEVBQUkwekIsRUFBSzV6QixFQUNUTyxFQUFJc3pCLEVBQUs3ekIsR0FJQzB6QixFQUFLQyxFQUlYRCxFQUFLWixHQUVUOXlCLEVBQUksV0FDSkUsRUFBSSxFQUNKSyxFQUFJLGFBSUpMLEVBQUloQixLQUFLMmxCLEtBQU02TyxHQUNmMXpCLEVBQUk0ekIsRUFBSzF6QixFQUNUSyxFQUFJdXpCLEVBQUs1ekIsR0FRTHl6QixFQUFLYixHQUVUOXlCLEVBQUksV0FDSkUsRUFBSSxXQUNKSyxFQUFJLElBSUpBLEVBQUlyQixLQUFLMmxCLEtBQU04TyxHQUNmM3pCLEVBQUk2ekIsRUFBS3R6QixFQUNUTCxFQUFJNHpCLEVBQUt2ekIsR0FNWGxCLEtBQUsyTSxJQUFLaE0sRUFBR0UsRUFBR0ssRUFBR3lrQixHQUVaM2xCLEtBTVIsSUFBSXNELEVBQUl6RCxLQUFLMmxCLE1BQVEwTyxFQUFNRixJQUFVRSxFQUFNRixJQUN4Q0gsRUFBTUksSUFBVUosRUFBTUksSUFDdEJILEVBQU1GLElBQVVFLEVBQU1GLElBWXpCLE9BVksvekIsS0FBSzJSLElBQUtsTyxHQUFNLE9BQVFBLEVBQUksR0FLakN0RCxLQUFLVyxHQUFNdXpCLEVBQU1GLEdBQVExd0IsRUFDekJ0RCxLQUFLYSxHQUFNZ3pCLEVBQU1JLEdBQVEzd0IsRUFDekJ0RCxLQUFLa0IsR0FBTTR5QixFQUFNRixHQUFRdHdCLEVBQ3pCdEQsS0FBS08sRUFBSVYsS0FBSzB6QixNQUFRSSxFQUFNSSxFQUFNSSxFQUFNLEdBQU0sR0FFdkNuMEIsS0FJUnVHLElBQUt0RyxHQU9KLE9BTEFELEtBQUtXLEVBQUlkLEtBQUswRyxJQUFLdkcsS0FBS1csRUFBR1YsRUFBRVUsR0FDN0JYLEtBQUthLEVBQUloQixLQUFLMEcsSUFBS3ZHLEtBQUthLEVBQUdaLEVBQUVZLEdBQzdCYixLQUFLa0IsRUFBSXJCLEtBQUswRyxJQUFLdkcsS0FBS2tCLEVBQUdqQixFQUFFaUIsR0FDN0JsQixLQUFLTyxFQUFJVixLQUFLMEcsSUFBS3ZHLEtBQUtPLEVBQUdOLEVBQUVNLEdBRXRCUCxLQUlSK0YsSUFBSzlGLEdBT0osT0FMQUQsS0FBS1csRUFBSWQsS0FBS2tHLElBQUsvRixLQUFLVyxFQUFHVixFQUFFVSxHQUM3QlgsS0FBS2EsRUFBSWhCLEtBQUtrRyxJQUFLL0YsS0FBS2EsRUFBR1osRUFBRVksR0FDN0JiLEtBQUtrQixFQUFJckIsS0FBS2tHLElBQUsvRixLQUFLa0IsRUFBR2pCLEVBQUVpQixHQUM3QmxCLEtBQUtPLEVBQUlWLEtBQUtrRyxJQUFLL0YsS0FBS08sRUFBR04sRUFBRU0sR0FFdEJQLEtBSVJvakIsTUFBTzdjLEVBQUtSLEdBU1gsT0FMQS9GLEtBQUtXLEVBQUlkLEtBQUtrRyxJQUFLUSxFQUFJNUYsRUFBR2QsS0FBSzBHLElBQUtSLEVBQUlwRixFQUFHWCxLQUFLVyxJQUNoRFgsS0FBS2EsRUFBSWhCLEtBQUtrRyxJQUFLUSxFQUFJMUYsRUFBR2hCLEtBQUswRyxJQUFLUixFQUFJbEYsRUFBR2IsS0FBS2EsSUFDaERiLEtBQUtrQixFQUFJckIsS0FBS2tHLElBQUtRLEVBQUlyRixFQUFHckIsS0FBSzBHLElBQUtSLEVBQUk3RSxFQUFHbEIsS0FBS2tCLElBQ2hEbEIsS0FBS08sRUFBSVYsS0FBS2tHLElBQUtRLEVBQUloRyxFQUFHVixLQUFLMEcsSUFBS1IsRUFBSXhGLEVBQUdQLEtBQUtPLElBRXpDUCxLQUlSK2tCLFlBQWFDLEVBQVFDLEdBT3BCLE9BTEFqbEIsS0FBS1csRUFBSWQsS0FBS2tHLElBQUtpZixFQUFRbmxCLEtBQUswRyxJQUFLMGUsRUFBUWpsQixLQUFLVyxJQUNsRFgsS0FBS2EsRUFBSWhCLEtBQUtrRyxJQUFLaWYsRUFBUW5sQixLQUFLMEcsSUFBSzBlLEVBQVFqbEIsS0FBS2EsSUFDbERiLEtBQUtrQixFQUFJckIsS0FBS2tHLElBQUtpZixFQUFRbmxCLEtBQUswRyxJQUFLMGUsRUFBUWpsQixLQUFLa0IsSUFDbERsQixLQUFLTyxFQUFJVixLQUFLa0csSUFBS2lmLEVBQVFubEIsS0FBSzBHLElBQUswZSxFQUFRamxCLEtBQUtPLElBRTNDUCxLQUlSa2xCLFlBQWEzZSxFQUFLUixHQUVqQixNQUFNakgsRUFBU2tCLEtBQUtsQixTQUVwQixPQUFPa0IsS0FBSzRrQixhQUFjOWxCLEdBQVUsR0FBSTRsQixlQUFnQjdrQixLQUFLa0csSUFBS1EsRUFBSzFHLEtBQUswRyxJQUFLUixFQUFLakgsS0FJdkZvTSxRQU9DLE9BTEFsTCxLQUFLVyxFQUFJZCxLQUFLcUwsTUFBT2xMLEtBQUtXLEdBQzFCWCxLQUFLYSxFQUFJaEIsS0FBS3FMLE1BQU9sTCxLQUFLYSxHQUMxQmIsS0FBS2tCLEVBQUlyQixLQUFLcUwsTUFBT2xMLEtBQUtrQixHQUMxQmxCLEtBQUtPLEVBQUlWLEtBQUtxTCxNQUFPbEwsS0FBS08sR0FFbkJQLEtBSVIwTSxPQU9DLE9BTEExTSxLQUFLVyxFQUFJZCxLQUFLNk0sS0FBTTFNLEtBQUtXLEdBQ3pCWCxLQUFLYSxFQUFJaEIsS0FBSzZNLEtBQU0xTSxLQUFLYSxHQUN6QmIsS0FBS2tCLEVBQUlyQixLQUFLNk0sS0FBTTFNLEtBQUtrQixHQUN6QmxCLEtBQUtPLEVBQUlWLEtBQUs2TSxLQUFNMU0sS0FBS08sR0FFbEJQLEtBSVJ5UCxRQU9DLE9BTEF6UCxLQUFLVyxFQUFJZCxLQUFLNFAsTUFBT3pQLEtBQUtXLEdBQzFCWCxLQUFLYSxFQUFJaEIsS0FBSzRQLE1BQU96UCxLQUFLYSxHQUMxQmIsS0FBS2tCLEVBQUlyQixLQUFLNFAsTUFBT3pQLEtBQUtrQixHQUMxQmxCLEtBQUtPLEVBQUlWLEtBQUs0UCxNQUFPelAsS0FBS08sR0FFbkJQLEtBSVJtbEIsY0FPQyxPQUxBbmxCLEtBQUtXLEVBQU1YLEtBQUtXLEVBQUksRUFBTWQsS0FBSzZNLEtBQU0xTSxLQUFLVyxHQUFNZCxLQUFLcUwsTUFBT2xMLEtBQUtXLEdBQ2pFWCxLQUFLYSxFQUFNYixLQUFLYSxFQUFJLEVBQU1oQixLQUFLNk0sS0FBTTFNLEtBQUthLEdBQU1oQixLQUFLcUwsTUFBT2xMLEtBQUthLEdBQ2pFYixLQUFLa0IsRUFBTWxCLEtBQUtrQixFQUFJLEVBQU1yQixLQUFLNk0sS0FBTTFNLEtBQUtrQixHQUFNckIsS0FBS3FMLE1BQU9sTCxLQUFLa0IsR0FDakVsQixLQUFLTyxFQUFNUCxLQUFLTyxFQUFJLEVBQU1WLEtBQUs2TSxLQUFNMU0sS0FBS08sR0FBTVYsS0FBS3FMLE1BQU9sTCxLQUFLTyxHQUUxRFAsS0FJUm9sQixTQU9DLE9BTEFwbEIsS0FBS1csR0FBTVgsS0FBS1csRUFDaEJYLEtBQUthLEdBQU1iLEtBQUthLEVBQ2hCYixLQUFLa0IsR0FBTWxCLEtBQUtrQixFQUNoQmxCLEtBQUtPLEdBQU1QLEtBQUtPLEVBRVRQLEtBSVJxbEIsSUFBS3BsQixHQUVKLE9BQU9ELEtBQUtXLEVBQUlWLEVBQUVVLEVBQUlYLEtBQUthLEVBQUlaLEVBQUVZLEVBQUliLEtBQUtrQixFQUFJakIsRUFBRWlCLEVBQUlsQixLQUFLTyxFQUFJTixFQUFFTSxFQUloRWdsQixXQUVDLE9BQU92bEIsS0FBS1csRUFBSVgsS0FBS1csRUFBSVgsS0FBS2EsRUFBSWIsS0FBS2EsRUFBSWIsS0FBS2tCLEVBQUlsQixLQUFLa0IsRUFBSWxCLEtBQUtPLEVBQUlQLEtBQUtPLEVBSTVFekIsU0FFQyxPQUFPZSxLQUFLMmxCLEtBQU14bEIsS0FBS1csRUFBSVgsS0FBS1csRUFBSVgsS0FBS2EsRUFBSWIsS0FBS2EsRUFBSWIsS0FBS2tCLEVBQUlsQixLQUFLa0IsRUFBSWxCLEtBQUtPLEVBQUlQLEtBQUtPLEdBSXZGa2xCLGtCQUVDLE9BQU81bEIsS0FBSzJSLElBQUt4UixLQUFLVyxHQUFNZCxLQUFLMlIsSUFBS3hSLEtBQUthLEdBQU1oQixLQUFLMlIsSUFBS3hSLEtBQUtrQixHQUFNckIsS0FBSzJSLElBQUt4UixLQUFLTyxHQUl0Rm1sQixZQUVDLE9BQU8xbEIsS0FBSzRrQixhQUFjNWtCLEtBQUtsQixVQUFZLEdBSTVDb25CLFVBQVdwbkIsR0FFVixPQUFPa0IsS0FBSzBsQixZQUFZaEIsZUFBZ0I1bEIsR0FJekN1a0IsS0FBTXBqQixFQUFHK2EsR0FPUixPQUxBaGIsS0FBS1csSUFBT1YsRUFBRVUsRUFBSVgsS0FBS1csR0FBTXFhLEVBQzdCaGIsS0FBS2EsSUFBT1osRUFBRVksRUFBSWIsS0FBS2EsR0FBTW1hLEVBQzdCaGIsS0FBS2tCLElBQU9qQixFQUFFaUIsRUFBSWxCLEtBQUtrQixHQUFNOFosRUFDN0JoYixLQUFLTyxJQUFPTixFQUFFTSxFQUFJUCxLQUFLTyxHQUFNeWEsRUFFdEJoYixLQUlSbW1CLFlBQWFDLEVBQUlDLEVBQUlyTCxHQU9wQixPQUxBaGIsS0FBS1csRUFBSXlsQixFQUFHemxCLEdBQU0wbEIsRUFBRzFsQixFQUFJeWxCLEVBQUd6bEIsR0FBTXFhLEVBQ2xDaGIsS0FBS2EsRUFBSXVsQixFQUFHdmxCLEdBQU13bEIsRUFBR3hsQixFQUFJdWxCLEVBQUd2bEIsR0FBTW1hLEVBQ2xDaGIsS0FBS2tCLEVBQUlrbEIsRUFBR2xsQixHQUFNbWxCLEVBQUdubEIsRUFBSWtsQixFQUFHbGxCLEdBQU04WixFQUNsQ2hiLEtBQUtPLEVBQUk2bEIsRUFBRzdsQixHQUFNOGxCLEVBQUc5bEIsRUFBSTZsQixFQUFHN2xCLEdBQU15YSxFQUUzQmhiLEtBSVJzbUIsT0FBUXJtQixHQUVQLE9BQVdBLEVBQUVVLElBQU1YLEtBQUtXLEdBQVNWLEVBQUVZLElBQU1iLEtBQUthLEdBQVNaLEVBQUVpQixJQUFNbEIsS0FBS2tCLEdBQVNqQixFQUFFTSxJQUFNUCxLQUFLTyxFQUkzRmdtQixVQUFXN0QsRUFBTzhELEVBQVMsR0FPMUIsT0FMQXhtQixLQUFLVyxFQUFJK2hCLEVBQU84RCxHQUNoQnhtQixLQUFLYSxFQUFJNmhCLEVBQU84RCxFQUFTLEdBQ3pCeG1CLEtBQUtrQixFQUFJd2hCLEVBQU84RCxFQUFTLEdBQ3pCeG1CLEtBQUtPLEVBQUltaUIsRUFBTzhELEVBQVMsR0FFbEJ4bUIsS0FJUnltQixRQUFTL0QsRUFBUSxHQUFJOEQsRUFBUyxHQU83QixPQUxBOUQsRUFBTzhELEdBQVd4bUIsS0FBS1csRUFDdkIraEIsRUFBTzhELEVBQVMsR0FBTXhtQixLQUFLYSxFQUMzQjZoQixFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUtrQixFQUMzQndoQixFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUtPLEVBRXBCbWlCLEVBSVJnRSxvQkFBcUJDLEVBQVcvZixFQUFPNGYsR0FhdEMsWUFYZ0JoSCxJQUFYZ0gsR0FFSjdqQixRQUFRdWhCLEtBQU0sdUVBSWZsa0IsS0FBS1csRUFBSWdtQixFQUFVQyxLQUFNaGdCLEdBQ3pCNUcsS0FBS2EsRUFBSThsQixFQUFVRSxLQUFNamdCLEdBQ3pCNUcsS0FBS2tCLEVBQUl5bEIsRUFBVXVJLEtBQU10b0IsR0FDekI1RyxLQUFLTyxFQUFJb21CLEVBQVUrTixLQUFNOXRCLEdBRWxCNUcsS0FJUnFDLFNBT0MsT0FMQXJDLEtBQUtXLEVBQUlkLEtBQUt3QyxTQUNkckMsS0FBS2EsRUFBSWhCLEtBQUt3QyxTQUNkckMsS0FBS2tCLEVBQUlyQixLQUFLd0MsU0FDZHJDLEtBQUtPLEVBQUlWLEtBQUt3QyxTQUVQckMsS0FJUixFQUFHUyxPQUFPQyxrQkFFSFYsS0FBS1csUUFDTFgsS0FBS2EsUUFDTGIsS0FBS2tCLFFBQ0xsQixLQUFLTyxHQU1iMnlCLEdBQVEzekIsVUFBVW8xQixXQUFZLEVBTzlCLE1BQU1DLFdBQTBCMVMsRUFFL0J2WixZQUFhdkUsRUFBT0MsRUFBUXlSLEVBQVUsSUFFckMyYixRQUVBenhCLEtBQUtvRSxNQUFRQSxFQUNicEUsS0FBS3FFLE9BQVNBLEVBQ2RyRSxLQUFLNjBCLE1BQVEsRUFFYjcwQixLQUFLODBCLFFBQVUsSUFBSTVCLEdBQVMsRUFBRyxFQUFHOXVCLEVBQU9DLEdBQ3pDckUsS0FBSyswQixhQUFjLEVBRW5CLzBCLEtBQUs4VCxTQUFXLElBQUlvZixHQUFTLEVBQUcsRUFBRzl1QixFQUFPQyxHQUUxQyxNQUFNOFQsRUFBUSxDQUFFL1QsTUFBT0EsRUFBT0MsT0FBUUEsRUFBUXd3QixNQUFPLEdBRXJENzBCLEtBQUtnMUIsUUFBVSxJQUFJbEUsR0FBUzNZLEVBQU9yQyxFQUFRa2IsUUFBU2xiLEVBQVFvYixNQUFPcGIsRUFBUXFiLE1BQU9yYixFQUFRc2IsVUFBV3RiLEVBQVF1YixVQUFXdmIsRUFBUXdiLE9BQVF4YixFQUFRZSxLQUFNZixFQUFReWIsV0FBWXpiLEVBQVEwYixVQUNsTHh4QixLQUFLZzFCLFFBQVE1Qyx1QkFBd0IsRUFFckNweUIsS0FBS2cxQixRQUFRaEQsT0FBUSxFQUNyQmh5QixLQUFLZzFCLFFBQVFsRCxxQkFBOEN0UyxJQUE1QjFKLEVBQVFnYyxpQkFBZ0NoYyxFQUFRZ2MsZ0JBQy9FOXhCLEtBQUtnMUIsUUFBUXJELG9CQUE0Q25TLElBQTNCMUosRUFBUTZiLGVBQStCN2IsRUFBUTZiLGVBQWlCLEtBQzlGM3hCLEtBQUtnMUIsUUFBUTNELGVBQWtDN1IsSUFBdEIxSixFQUFRdWIsVUFBMEJ2YixFQUFRdWIsVUFBWWpSLEVBRS9FcGdCLEtBQUtpMUIsaUJBQXNDelYsSUFBeEIxSixFQUFRbWYsYUFBNEJuZixFQUFRbWYsWUFDL0RqMUIsS0FBS2sxQixtQkFBMEMxVixJQUExQjFKLEVBQVFvZixlQUE4QnBmLEVBQVFvZixjQUVuRWwxQixLQUFLbTFCLGtCQUF3QzNWLElBQXpCMUosRUFBUXFmLGFBQTZCcmYsRUFBUXFmLGFBQWUsS0FFaEZuMUIsS0FBS28xQixhQUE4QjVWLElBQXBCMUosRUFBUXNmLFFBQXdCdGYsRUFBUXNmLFFBQVUsRUFJbEVDLFFBQVNqeEIsRUFBT0MsRUFBUXd3QixFQUFRLEdBRTFCNzBCLEtBQUtvRSxRQUFVQSxHQUFTcEUsS0FBS3FFLFNBQVdBLEdBQVVyRSxLQUFLNjBCLFFBQVVBLElBRXJFNzBCLEtBQUtvRSxNQUFRQSxFQUNicEUsS0FBS3FFLE9BQVNBLEVBQ2RyRSxLQUFLNjBCLE1BQVFBLEVBRWI3MEIsS0FBS2cxQixRQUFRN2MsTUFBTS9ULE1BQVFBLEVBQzNCcEUsS0FBS2cxQixRQUFRN2MsTUFBTTlULE9BQVNBLEVBQzVCckUsS0FBS2cxQixRQUFRN2MsTUFBTTBjLE1BQVFBLEVBRTNCNzBCLEtBQUs4eUIsV0FJTjl5QixLQUFLOFQsU0FBU25ILElBQUssRUFBRyxFQUFHdkksRUFBT0MsR0FDaENyRSxLQUFLODBCLFFBQVFub0IsSUFBSyxFQUFHLEVBQUd2SSxFQUFPQyxHQUloQzBmLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjcWIsS0FBTWhrQixNQUlyQ2drQixLQUFNK0ksR0FzQkwsT0FwQkEvc0IsS0FBS29FLE1BQVEyb0IsRUFBTzNvQixNQUNwQnBFLEtBQUtxRSxPQUFTMG9CLEVBQU8xb0IsT0FDckJyRSxLQUFLNjBCLE1BQVE5SCxFQUFPOEgsTUFFcEI3MEIsS0FBSzhULFNBQVNrUSxLQUFNK0ksRUFBT2paLFVBRTNCOVQsS0FBS2cxQixRQUFVakksRUFBT2lJLFFBQVFqUixRQUM5Qi9qQixLQUFLZzFCLFFBQVE1Qyx1QkFBd0IsRUFJckNweUIsS0FBS2cxQixRQUFRN2MsTUFBUWpaLE9BQU80RSxPQUFRLEdBQUlpcEIsRUFBT2lJLFFBQVE3YyxPQUV2RG5ZLEtBQUtpMUIsWUFBY2xJLEVBQU9rSSxZQUMxQmoxQixLQUFLazFCLGNBQWdCbkksRUFBT21JLGNBRUMsT0FBeEJuSSxFQUFPb0ksZUFBd0JuMUIsS0FBS20xQixhQUFlcEksRUFBT29JLGFBQWFwUixTQUU1RS9qQixLQUFLbzFCLFFBQVVySSxFQUFPcUksUUFFZnAxQixLQUlSOHlCLFVBRUM5eUIsS0FBSytDLGNBQWUsQ0FBRThULEtBQU0sYUFNOUIrZCxHQUFrQnIxQixVQUFVKzFCLHFCQUFzQixFQUVsRCxNQUFNQyxXQUF5QnpFLEdBRTlCbm9CLFlBQWFxUCxFQUFPLEtBQU01VCxFQUFRLEVBQUdDLEVBQVMsRUFBR3d3QixFQUFRLEdBRXhEcEQsTUFBTyxNQUVQenhCLEtBQUttWSxNQUFRLENBQUVILEtBQUFBLEVBQU01VCxNQUFBQSxFQUFPQyxPQUFBQSxFQUFRd3dCLE1BQUFBLEdBRXBDNzBCLEtBQUtveEIsVUFBWWpSLEVBQ2pCbmdCLEtBQUtxeEIsVUFBWWxSLEVBRWpCbmdCLEtBQUt3MUIsTUFBUXZWLEVBRWJqZ0IsS0FBSzh4QixpQkFBa0IsRUFDdkI5eEIsS0FBS2d5QixPQUFRLEVBQ2JoeUIsS0FBS2l5QixnQkFBa0IsR0FNekJzRCxHQUFpQmgyQixVQUFVazJCLG9CQUFxQixFQUVoRCxjQUFxQ2IsR0FFcENqc0IsWUFBYXZFLEVBQU9DLEVBQVF3d0IsR0FFM0JwRCxNQUFPcnRCLEVBQU9DLEdBRWRyRSxLQUFLNjBCLE1BQVFBLEVBRWI3MEIsS0FBS2cxQixRQUFVLElBQUlPLEdBQWtCLEtBQU1ueEIsRUFBT0MsRUFBUXd3QixHQUUxRDcwQixLQUFLZzFCLFFBQVE1Qyx1QkFBd0IsSUFNaEI3eUIsVUFBVW0yQiwwQkFBMkIsRUFFNUQsTUFBTUMsV0FBc0I3RSxHQUUzQm5vQixZQUFhcVAsRUFBTyxLQUFNNVQsRUFBUSxFQUFHQyxFQUFTLEVBQUd3d0IsRUFBUSxHQVV4RHBELE1BQU8sTUFFUHp4QixLQUFLbVksTUFBUSxDQUFFSCxLQUFBQSxFQUFNNVQsTUFBQUEsRUFBT0MsT0FBQUEsRUFBUXd3QixNQUFBQSxHQUVwQzcwQixLQUFLb3hCLFVBQVlqUixFQUNqQm5nQixLQUFLcXhCLFVBQVlsUixFQUVqQm5nQixLQUFLdzFCLE1BQVF2VixFQUViamdCLEtBQUs4eEIsaUJBQWtCLEVBQ3ZCOXhCLEtBQUtneUIsT0FBUSxFQUNiaHlCLEtBQUtpeUIsZ0JBQWtCLEdBTXpCMEQsR0FBY3AyQixVQUFVcTJCLGlCQUFrQixFQUUxQyxjQUFrQ2hCLEdBRWpDanNCLFlBQWF2RSxFQUFPQyxFQUFRd3dCLEdBRTNCcEQsTUFBT3J0QixFQUFPQyxHQUVkckUsS0FBSzYwQixNQUFRQSxFQUViNzBCLEtBQUtnMUIsUUFBVSxJQUFJVyxHQUFlLEtBQU12eEIsRUFBT0MsRUFBUXd3QixHQUV2RDcwQixLQUFLZzFCLFFBQVE1Qyx1QkFBd0IsSUFNbkI3eUIsVUFBVXMyQix1QkFBd0IsRUFFdEQsY0FBeUNqQixHQUV4Q2pzQixZQUFhdkUsRUFBT0MsRUFBUXl4QixFQUFPaGdCLEVBQVUsSUFFNUMyYixNQUFPcnRCLEVBQU9DLEVBQVF5UixHQUV0QixNQUFNa2YsRUFBVWgxQixLQUFLZzFCLFFBRXJCaDFCLEtBQUtnMUIsUUFBVSxHQUVmLElBQU0sSUFBSWwwQixFQUFJLEVBQUdBLEVBQUlnMUIsRUFBT2gxQixJQUUzQmQsS0FBS2cxQixRQUFTbDBCLEdBQU1rMEIsRUFBUWpSLFFBQzVCL2pCLEtBQUtnMUIsUUFBU2wwQixHQUFJc3hCLHVCQUF3QixFQU01Q2lELFFBQVNqeEIsRUFBT0MsRUFBUXd3QixFQUFRLEdBRS9CLEdBQUs3MEIsS0FBS29FLFFBQVVBLEdBQVNwRSxLQUFLcUUsU0FBV0EsR0FBVXJFLEtBQUs2MEIsUUFBVUEsRUFBUSxDQUU3RTcwQixLQUFLb0UsTUFBUUEsRUFDYnBFLEtBQUtxRSxPQUFTQSxFQUNkckUsS0FBSzYwQixNQUFRQSxFQUViLElBQU0sSUFBSS96QixFQUFJLEVBQUdpMUIsRUFBSy8xQixLQUFLZzFCLFFBQVFsMkIsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUVsRGQsS0FBS2cxQixRQUFTbDBCLEdBQUlxWCxNQUFNL1QsTUFBUUEsRUFDaENwRSxLQUFLZzFCLFFBQVNsMEIsR0FBSXFYLE1BQU05VCxPQUFTQSxFQUNqQ3JFLEtBQUtnMUIsUUFBU2wwQixHQUFJcVgsTUFBTTBjLE1BQVFBLEVBSWpDNzBCLEtBQUs4eUIsVUFPTixPQUhBOXlCLEtBQUs4VCxTQUFTbkgsSUFBSyxFQUFHLEVBQUd2SSxFQUFPQyxHQUNoQ3JFLEtBQUs4MEIsUUFBUW5vQixJQUFLLEVBQUcsRUFBR3ZJLEVBQU9DLEdBRXhCckUsS0FJUmdrQixLQUFNK0ksR0FFTC9zQixLQUFLOHlCLFVBRUw5eUIsS0FBS29FLE1BQVEyb0IsRUFBTzNvQixNQUNwQnBFLEtBQUtxRSxPQUFTMG9CLEVBQU8xb0IsT0FDckJyRSxLQUFLNjBCLE1BQVE5SCxFQUFPOEgsTUFFcEI3MEIsS0FBSzhULFNBQVNuSCxJQUFLLEVBQUcsRUFBRzNNLEtBQUtvRSxNQUFPcEUsS0FBS3FFLFFBQzFDckUsS0FBSzgwQixRQUFRbm9CLElBQUssRUFBRyxFQUFHM00sS0FBS29FLE1BQU9wRSxLQUFLcUUsUUFFekNyRSxLQUFLaTFCLFlBQWNsSSxFQUFPa0ksWUFDMUJqMUIsS0FBS2sxQixjQUFnQm5JLEVBQU9tSSxjQUM1QmwxQixLQUFLbTFCLGFBQWVwSSxFQUFPb0ksYUFFM0JuMUIsS0FBS2cxQixRQUFRbDJCLE9BQVMsRUFFdEIsSUFBTSxJQUFJZ0MsRUFBSSxFQUFHaTFCLEVBQUtoSixFQUFPaUksUUFBUWwyQixPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBRXBEZCxLQUFLZzFCLFFBQVNsMEIsR0FBTWlzQixFQUFPaUksUUFBU2wwQixHQUFJaWpCLFFBSXpDLE9BQU8vakIsT0FNa0JULFVBQVV5MkIsOEJBQStCLEVBRXBFLE1BQU1DLEdBRUx0dEIsWUFBYWhJLEVBQUksRUFBR0UsRUFBSSxFQUFHSyxFQUFJLEVBQUdYLEVBQUksR0FFckNQLEtBQUtrMkIsR0FBS3YxQixFQUNWWCxLQUFLbTJCLEdBQUt0MUIsRUFDVmIsS0FBS28yQixHQUFLbDFCLEVBQ1ZsQixLQUFLcTJCLEdBQUs5MUIsRUFJWGd2QixhQUFjbG1CLEVBQUl3RixFQUFJeW5CLEVBQUl2MkIsR0FHekIsT0FEQTRDLFFBQVF1aEIsS0FBTSx3R0FDUG9TLEVBQUdDLGlCQUFrQmx0QixFQUFJd0YsRUFBSTlPLEdBSXJDd3ZCLGlCQUFrQmlILEVBQUtDLEVBQVdDLEVBQU1DLEVBQVlDLEVBQU1DLEVBQVk5MkIsR0FJckUsSUFBSSsyQixFQUFLSixFQUFNQyxFQUFhLEdBQzNCSSxFQUFLTCxFQUFNQyxFQUFhLEdBQ3hCSyxFQUFLTixFQUFNQyxFQUFhLEdBQ3hCTSxFQUFLUCxFQUFNQyxFQUFhLEdBRXpCLE1BQU1PLEVBQUtOLEVBQU1DLEVBQWEsR0FDN0JNLEVBQUtQLEVBQU1DLEVBQWEsR0FDeEJPLEVBQUtSLEVBQU1DLEVBQWEsR0FDeEJRLEVBQUtULEVBQU1DLEVBQWEsR0FFekIsR0FBVyxJQUFOOTJCLEVBTUosT0FKQXkyQixFQUFLQyxFQUFZLEdBQU1LLEVBQ3ZCTixFQUFLQyxFQUFZLEdBQU1NLEVBQ3ZCUCxFQUFLQyxFQUFZLEdBQU1PLE9BQ3ZCUixFQUFLQyxFQUFZLEdBQU1RLEdBS3hCLEdBQVcsSUFBTmwzQixFQU1KLE9BSkF5MkIsRUFBS0MsRUFBWSxHQUFNUyxFQUN2QlYsRUFBS0MsRUFBWSxHQUFNVSxFQUN2QlgsRUFBS0MsRUFBWSxHQUFNVyxPQUN2QlosRUFBS0MsRUFBWSxHQUFNWSxHQUt4QixHQUFLSixJQUFPSSxHQUFNUCxJQUFPSSxHQUFNSCxJQUFPSSxHQUFNSCxJQUFPSSxFQUFLLENBRXZELElBQUk5ekIsRUFBSSxFQUFJdkQsRUFDWixNQUFNaW5CLEVBQU04UCxFQUFLSSxFQUFLSCxFQUFLSSxFQUFLSCxFQUFLSSxFQUFLSCxFQUFLSSxFQUM5Q0MsRUFBUXRRLEdBQU8sRUFBSSxHQUFNLEVBQ3pCdVEsRUFBUyxFQUFJdlEsRUFBTUEsRUFHcEIsR0FBS3VRLEVBQVN2eEIsT0FBT3d4QixRQUFVLENBRTlCLE1BQU12USxFQUFNcG5CLEtBQUsybEIsS0FBTStSLEdBQ3RCRSxFQUFNNTNCLEtBQUsrbEIsTUFBT3FCLEVBQUtELEVBQU1zUSxHQUU5QmgwQixFQUFJekQsS0FBS29uQixJQUFLM2pCLEVBQUltMEIsR0FBUXhRLEVBQzFCbG5CLEVBQUlGLEtBQUtvbkIsSUFBS2xuQixFQUFJMDNCLEdBQVF4USxFQUkzQixNQUFNeVEsRUFBTzMzQixFQUFJdTNCLEVBUWpCLEdBTkFSLEVBQUtBLEVBQUt4ekIsRUFBSTR6QixFQUFLUSxFQUNuQlgsRUFBS0EsRUFBS3p6QixFQUFJNnpCLEVBQUtPLEVBQ25CVixFQUFLQSxFQUFLMXpCLEVBQUk4ekIsRUFBS00sRUFDbkJULEVBQUtBLEVBQUszekIsRUFBSSt6QixFQUFLSyxFQUdkcDBCLElBQU0sRUFBSXZELEVBQUksQ0FFbEIsTUFBTUksRUFBSSxFQUFJTixLQUFLMmxCLEtBQU1zUixFQUFLQSxFQUFLQyxFQUFLQSxFQUFLQyxFQUFLQSxFQUFLQyxFQUFLQSxHQUU1REgsR0FBTTMyQixFQUNONDJCLEdBQU01MkIsRUFDTjYyQixHQUFNNzJCLEVBQ044MkIsR0FBTTkyQixHQU1ScTJCLEVBQUtDLEdBQWNLLEVBQ25CTixFQUFLQyxFQUFZLEdBQU1NLEVBQ3ZCUCxFQUFLQyxFQUFZLEdBQU1PLEVBQ3ZCUixFQUFLQyxFQUFZLEdBQU1RLEVBSXhCMUgsK0JBQWdDaUgsRUFBS0MsRUFBV0MsRUFBTUMsRUFBWUMsRUFBTUMsR0FFdkUsTUFBTUMsRUFBS0osRUFBTUMsR0FDWEksRUFBS0wsRUFBTUMsRUFBYSxHQUN4QkssRUFBS04sRUFBTUMsRUFBYSxHQUN4Qk0sRUFBS1AsRUFBTUMsRUFBYSxHQUV4Qk8sRUFBS04sRUFBTUMsR0FDWE0sRUFBS1AsRUFBTUMsRUFBYSxHQUN4Qk8sRUFBS1IsRUFBTUMsRUFBYSxHQUN4QlEsRUFBS1QsRUFBTUMsRUFBYSxHQU85QixPQUxBTCxFQUFLQyxHQUFjSyxFQUFLTyxFQUFLSixFQUFLQyxFQUFLSCxFQUFLSyxFQUFLSixFQUFLRyxFQUN0RFgsRUFBS0MsRUFBWSxHQUFNTSxFQUFLTSxFQUFLSixFQUFLRSxFQUFLSCxFQUFLRSxFQUFLSixFQUFLTSxFQUMxRFosRUFBS0MsRUFBWSxHQUFNTyxFQUFLSyxFQUFLSixFQUFLRyxFQUFLTixFQUFLSyxFQUFLSixFQUFLRyxFQUMxRFYsRUFBS0MsRUFBWSxHQUFNUSxFQUFLSSxFQUFLUCxFQUFLSSxFQUFLSCxFQUFLSSxFQUFLSCxFQUFLSSxFQUVuRFosRUFJSjcxQixRQUVILE9BQU9YLEtBQUtrMkIsR0FJVHYxQixNQUFHM0IsR0FFTmdCLEtBQUtrMkIsR0FBS2wzQixFQUNWZ0IsS0FBSzIzQixvQkFJRjkyQixRQUVILE9BQU9iLEtBQUttMkIsR0FJVHQxQixNQUFHN0IsR0FFTmdCLEtBQUttMkIsR0FBS24zQixFQUNWZ0IsS0FBSzIzQixvQkFJRnoyQixRQUVILE9BQU9sQixLQUFLbzJCLEdBSVRsMUIsTUFBR2xDLEdBRU5nQixLQUFLbzJCLEdBQUtwM0IsRUFDVmdCLEtBQUsyM0Isb0JBSUZwM0IsUUFFSCxPQUFPUCxLQUFLcTJCLEdBSVQ5MUIsTUFBR3ZCLEdBRU5nQixLQUFLcTJCLEdBQUtyM0IsRUFDVmdCLEtBQUsyM0Isb0JBSU5ockIsSUFBS2hNLEVBQUdFLEVBQUdLLEVBQUdYLEdBU2IsT0FQQVAsS0FBS2syQixHQUFLdjFCLEVBQ1ZYLEtBQUttMkIsR0FBS3QxQixFQUNWYixLQUFLbzJCLEdBQUtsMUIsRUFDVmxCLEtBQUtxMkIsR0FBSzkxQixFQUVWUCxLQUFLMjNCLG9CQUVFMzNCLEtBSVIrakIsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLFlBQWEzSSxLQUFLazJCLEdBQUlsMkIsS0FBS20yQixHQUFJbjJCLEtBQUtvMkIsR0FBSXAyQixLQUFLcTJCLElBSTlEclMsS0FBTTRULEdBU0wsT0FQQTUzQixLQUFLazJCLEdBQUswQixFQUFXajNCLEVBQ3JCWCxLQUFLbTJCLEdBQUt5QixFQUFXLzJCLEVBQ3JCYixLQUFLbzJCLEdBQUt3QixFQUFXMTJCLEVBQ3JCbEIsS0FBS3EyQixHQUFLdUIsRUFBV3IzQixFQUVyQlAsS0FBSzIzQixvQkFFRTMzQixLQUlSNjNCLGFBQWNDLEVBQU9DLEdBRXBCLElBQVNELElBQVNBLEVBQU1FLFFBRXZCLE1BQU0sSUFBSWw0QixNQUFPLG9HQUlsQixNQUFNYSxFQUFJbTNCLEVBQU01QixHQUFJcjFCLEVBQUlpM0IsRUFBTTNCLEdBQUlqMUIsRUFBSTQyQixFQUFNMUIsR0FBSTZCLEVBQVFILEVBQU1JLE9BTXhEbFIsRUFBTW5uQixLQUFLbW5CLElBQ1hDLEVBQU1wbkIsS0FBS29uQixJQUVYa1IsRUFBS25SLEVBQUtybUIsRUFBSSxHQUNkeTNCLEVBQUtwUixFQUFLbm1CLEVBQUksR0FDZHczQixFQUFLclIsRUFBSzlsQixFQUFJLEdBRWRvM0IsRUFBS3JSLEVBQUt0bUIsRUFBSSxHQUNkNDNCLEVBQUt0UixFQUFLcG1CLEVBQUksR0FDZDIzQixFQUFLdlIsRUFBSy9sQixFQUFJLEdBRXBCLE9BQVMrMkIsR0FFUixJQUFLLE1BQ0pqNEIsS0FBS2syQixHQUFLb0MsRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFBS0MsRUFDbkN4NEIsS0FBS20yQixHQUFLZ0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFDbkN4NEIsS0FBS28yQixHQUFLK0IsRUFBS0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFDbkNyNEIsS0FBS3EyQixHQUFLOEIsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFDbkMsTUFFRCxJQUFLLE1BQ0p4NEIsS0FBS2syQixHQUFLb0MsRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFBS0MsRUFDbkN4NEIsS0FBS20yQixHQUFLZ0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFDbkN4NEIsS0FBS28yQixHQUFLK0IsRUFBS0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFDbkNyNEIsS0FBS3EyQixHQUFLOEIsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFDbkMsTUFFRCxJQUFLLE1BQ0p4NEIsS0FBS2syQixHQUFLb0MsRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFBS0MsRUFDbkN4NEIsS0FBS20yQixHQUFLZ0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFDbkN4NEIsS0FBS28yQixHQUFLK0IsRUFBS0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFDbkNyNEIsS0FBS3EyQixHQUFLOEIsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFDbkMsTUFFRCxJQUFLLE1BQ0p4NEIsS0FBS2syQixHQUFLb0MsRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFBS0MsRUFDbkN4NEIsS0FBS20yQixHQUFLZ0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFDbkN4NEIsS0FBS28yQixHQUFLK0IsRUFBS0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFDbkNyNEIsS0FBS3EyQixHQUFLOEIsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFDbkMsTUFFRCxJQUFLLE1BQ0p4NEIsS0FBS2syQixHQUFLb0MsRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFBS0MsRUFDbkN4NEIsS0FBS20yQixHQUFLZ0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFDbkN4NEIsS0FBS28yQixHQUFLK0IsRUFBS0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFDbkNyNEIsS0FBS3EyQixHQUFLOEIsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFDbkMsTUFFRCxJQUFLLE1BQ0p4NEIsS0FBS2syQixHQUFLb0MsRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFBS0MsRUFDbkN4NEIsS0FBS20yQixHQUFLZ0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFBS0ksRUFDbkN4NEIsS0FBS28yQixHQUFLK0IsRUFBS0MsRUFBS0ksRUFBS0YsRUFBS0MsRUFBS0YsRUFDbkNyNEIsS0FBS3EyQixHQUFLOEIsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFDbkMsTUFFRCxRQUNDNzFCLFFBQVF1aEIsS0FBTSxtRUFBcUUrVCxHQU1yRixPQUZnQixJQUFYRixHQUFtQi8zQixLQUFLMjNCLG9CQUV0QjMzQixLQUlSeTRCLGlCQUFrQkMsRUFBTS9TLEdBTXZCLE1BQU1nVCxFQUFZaFQsRUFBUSxFQUFHcmlCLEVBQUl6RCxLQUFLb25CLElBQUswUixHQVMzQyxPQVBBMzRCLEtBQUtrMkIsR0FBS3dDLEVBQUsvM0IsRUFBSTJDLEVBQ25CdEQsS0FBS20yQixHQUFLdUMsRUFBSzczQixFQUFJeUMsRUFDbkJ0RCxLQUFLbzJCLEdBQUtzQyxFQUFLeDNCLEVBQUlvQyxFQUNuQnRELEtBQUtxMkIsR0FBS3gyQixLQUFLbW5CLElBQUsyUixHQUVwQjM0QixLQUFLMjNCLG9CQUVFMzNCLEtBSVI0NEIsc0JBQXVCMzNCLEdBTXRCLE1BQU00bUIsRUFBSzVtQixFQUFFNmpCLFNBRVo2TyxFQUFNOUwsRUFBSSxHQUFLK0wsRUFBTS9MLEVBQUksR0FBS2dNLEVBQU1oTSxFQUFJLEdBQ3hDaU0sRUFBTWpNLEVBQUksR0FBS2tNLEVBQU1sTSxFQUFJLEdBQUttTSxFQUFNbk0sRUFBSSxHQUN4Q29NLEVBQU1wTSxFQUFJLEdBQUtxTSxFQUFNck0sRUFBSSxHQUFLc00sRUFBTXRNLEVBQUksSUFFeENnUixFQUFRbEYsRUFBTUksRUFBTUksRUFFckIsR0FBSzBFLEVBQVEsRUFBSSxDQUVoQixNQUFNdjFCLEVBQUksR0FBTXpELEtBQUsybEIsS0FBTXFULEVBQVEsR0FFbkM3NEIsS0FBS3EyQixHQUFLLElBQU8veUIsRUFDakJ0RCxLQUFLazJCLElBQU9oQyxFQUFNRixHQUFRMXdCLEVBQzFCdEQsS0FBS20yQixJQUFPdEMsRUFBTUksR0FBUTN3QixFQUMxQnRELEtBQUtvMkIsSUFBT3RDLEVBQU1GLEdBQVF0d0IsT0FFcEIsR0FBS3F3QixFQUFNSSxHQUFPSixFQUFNUSxFQUFNLENBRXBDLE1BQU03d0IsRUFBSSxFQUFNekQsS0FBSzJsQixLQUFNLEVBQU1tTyxFQUFNSSxFQUFNSSxHQUU3Q24wQixLQUFLcTJCLElBQU9uQyxFQUFNRixHQUFRMXdCLEVBQzFCdEQsS0FBS2syQixHQUFLLElBQU81eUIsRUFDakJ0RCxLQUFLbTJCLElBQU92QyxFQUFNRSxHQUFReHdCLEVBQzFCdEQsS0FBS28yQixJQUFPdkMsRUFBTUksR0FBUTN3QixPQUVwQixHQUFLeXdCLEVBQU1JLEVBQU0sQ0FFdkIsTUFBTTd3QixFQUFJLEVBQU16RCxLQUFLMmxCLEtBQU0sRUFBTXVPLEVBQU1KLEVBQU1RLEdBRTdDbjBCLEtBQUtxMkIsSUFBT3hDLEVBQU1JLEdBQVEzd0IsRUFDMUJ0RCxLQUFLazJCLElBQU90QyxFQUFNRSxHQUFReHdCLEVBQzFCdEQsS0FBS20yQixHQUFLLElBQU83eUIsRUFDakJ0RCxLQUFLbzJCLElBQU9wQyxFQUFNRSxHQUFRNXdCLE1BRXBCLENBRU4sTUFBTUEsRUFBSSxFQUFNekQsS0FBSzJsQixLQUFNLEVBQU0yTyxFQUFNUixFQUFNSSxHQUU3Qy96QixLQUFLcTJCLElBQU92QyxFQUFNRixHQUFRdHdCLEVBQzFCdEQsS0FBS2syQixJQUFPckMsRUFBTUksR0FBUTN3QixFQUMxQnRELEtBQUttMkIsSUFBT25DLEVBQU1FLEdBQVE1d0IsRUFDMUJ0RCxLQUFLbzJCLEdBQUssSUFBTzl5QixFQU1sQixPQUZBdEQsS0FBSzIzQixvQkFFRTMzQixLQUlSODRCLG1CQUFvQkMsRUFBT0MsR0FJMUIsSUFBSXgxQixFQUFJdTFCLEVBQU0xVCxJQUFLMlQsR0FBUSxFQW1DM0IsT0FqQ0t4MUIsRUFBSXdDLE9BQU93eEIsU0FJZmgwQixFQUFJLEVBRUMzRCxLQUFLMlIsSUFBS3VuQixFQUFNcDRCLEdBQU1kLEtBQUsyUixJQUFLdW5CLEVBQU03M0IsSUFFMUNsQixLQUFLazJCLElBQU82QyxFQUFNbDRCLEVBQ2xCYixLQUFLbTJCLEdBQUs0QyxFQUFNcDRCLEVBQ2hCWCxLQUFLbzJCLEdBQUssRUFDVnAyQixLQUFLcTJCLEdBQUs3eUIsSUFJVnhELEtBQUtrMkIsR0FBSyxFQUNWbDJCLEtBQUttMkIsSUFBTzRDLEVBQU03M0IsRUFDbEJsQixLQUFLbzJCLEdBQUsyQyxFQUFNbDRCLEVBQ2hCYixLQUFLcTJCLEdBQUs3eUIsS0FRWHhELEtBQUtrMkIsR0FBSzZDLEVBQU1sNEIsRUFBSW00QixFQUFJOTNCLEVBQUk2M0IsRUFBTTczQixFQUFJODNCLEVBQUluNEIsRUFDMUNiLEtBQUttMkIsR0FBSzRDLEVBQU03M0IsRUFBSTgzQixFQUFJcjRCLEVBQUlvNEIsRUFBTXA0QixFQUFJcTRCLEVBQUk5M0IsRUFDMUNsQixLQUFLbzJCLEdBQUsyQyxFQUFNcDRCLEVBQUlxNEIsRUFBSW40QixFQUFJazRCLEVBQU1sNEIsRUFBSW00QixFQUFJcjRCLEVBQzFDWCxLQUFLcTJCLEdBQUs3eUIsR0FJSnhELEtBQUswbEIsWUFJYnVULFFBQVNoNkIsR0FFUixPQUFPLEVBQUlZLEtBQUswekIsS0FBTTF6QixLQUFLMlIsSUFBSzRSLEVBQU9wakIsS0FBS3FsQixJQUFLcG1CLElBQU8sRUFBRyxLQUk1RGk2QixjQUFlajZCLEVBQUdrNkIsR0FFakIsTUFBTXhULEVBQVEzbEIsS0FBS2k1QixRQUFTaDZCLEdBRTVCLEdBQWUsSUFBVjBtQixFQUFjLE9BQU8zbEIsS0FFMUIsTUFBTUQsRUFBSUYsS0FBSzBHLElBQUssRUFBRzR5QixFQUFPeFQsR0FJOUIsT0FGQTNsQixLQUFLbzVCLE1BQU9uNkIsRUFBR2MsR0FFUkMsS0FJUjhuQixXQUVDLE9BQU85bkIsS0FBSzJNLElBQUssRUFBRyxFQUFHLEVBQUcsR0FJM0JrZCxTQUlDLE9BQU83cEIsS0FBS3E1QixZQUliQSxZQVFDLE9BTkFyNUIsS0FBS2syQixLQUFRLEVBQ2JsMkIsS0FBS20yQixLQUFRLEVBQ2JuMkIsS0FBS28yQixLQUFRLEVBRWJwMkIsS0FBSzIzQixvQkFFRTMzQixLQUlScWxCLElBQUtwbEIsR0FFSixPQUFPRCxLQUFLazJCLEdBQUtqMkIsRUFBRWkyQixHQUFLbDJCLEtBQUttMkIsR0FBS2wyQixFQUFFazJCLEdBQUtuMkIsS0FBS28yQixHQUFLbjJCLEVBQUVtMkIsR0FBS3AyQixLQUFLcTJCLEdBQUtwMkIsRUFBRW8yQixHQUl2RTlRLFdBRUMsT0FBT3ZsQixLQUFLazJCLEdBQUtsMkIsS0FBS2syQixHQUFLbDJCLEtBQUttMkIsR0FBS24yQixLQUFLbTJCLEdBQUtuMkIsS0FBS28yQixHQUFLcDJCLEtBQUtvMkIsR0FBS3AyQixLQUFLcTJCLEdBQUtyMkIsS0FBS3EyQixHQUluRnYzQixTQUVDLE9BQU9lLEtBQUsybEIsS0FBTXhsQixLQUFLazJCLEdBQUtsMkIsS0FBS2syQixHQUFLbDJCLEtBQUttMkIsR0FBS24yQixLQUFLbTJCLEdBQUtuMkIsS0FBS28yQixHQUFLcDJCLEtBQUtvMkIsR0FBS3AyQixLQUFLcTJCLEdBQUtyMkIsS0FBS3EyQixJQUk5RjNRLFlBRUMsSUFBSWprQixFQUFJekIsS0FBS2xCLFNBc0JiLE9BcEJXLElBQU4yQyxHQUVKekIsS0FBS2syQixHQUFLLEVBQ1ZsMkIsS0FBS20yQixHQUFLLEVBQ1ZuMkIsS0FBS28yQixHQUFLLEVBQ1ZwMkIsS0FBS3EyQixHQUFLLElBSVY1MEIsRUFBSSxFQUFJQSxFQUVSekIsS0FBS2syQixHQUFLbDJCLEtBQUtrMkIsR0FBS3owQixFQUNwQnpCLEtBQUttMkIsR0FBS24yQixLQUFLbTJCLEdBQUsxMEIsRUFDcEJ6QixLQUFLbzJCLEdBQUtwMkIsS0FBS28yQixHQUFLMzBCLEVBQ3BCekIsS0FBS3EyQixHQUFLcjJCLEtBQUtxMkIsR0FBSzUwQixHQUlyQnpCLEtBQUsyM0Isb0JBRUUzM0IsS0FJUnlrQixTQUFVeGxCLEVBQUdzRSxHQUVaLFlBQVdpYyxJQUFOamMsR0FFSlosUUFBUXVoQixLQUFNLDBHQUNQbGtCLEtBQUtzNUIsb0JBQXFCcjZCLEVBQUdzRSxJQUk5QnZELEtBQUtzNUIsb0JBQXFCdDVCLEtBQU1mLEdBSXhDc3BCLFlBQWF0cEIsR0FFWixPQUFPZSxLQUFLczVCLG9CQUFxQnI2QixFQUFHZSxNQUlyQ3M1QixvQkFBcUIxNkIsRUFBR0MsR0FJdkIsTUFBTTA2QixFQUFNMzZCLEVBQUVzM0IsR0FBSXNELEVBQU01NkIsRUFBRXUzQixHQUFJc0QsRUFBTTc2QixFQUFFdzNCLEdBQUlzRCxFQUFNOTZCLEVBQUV5M0IsR0FDNUNzRCxFQUFNOTZCLEVBQUVxM0IsR0FBSTBELEVBQU0vNkIsRUFBRXMzQixHQUFJMEQsRUFBTWg3QixFQUFFdTNCLEdBQUkwRCxFQUFNajdCLEVBQUV3M0IsR0FTbEQsT0FQQXIyQixLQUFLazJCLEdBQUtxRCxFQUFNTyxFQUFNSixFQUFNQyxFQUFNSCxFQUFNSyxFQUFNSixFQUFNRyxFQUNwRDU1QixLQUFLbTJCLEdBQUtxRCxFQUFNTSxFQUFNSixFQUFNRSxFQUFNSCxFQUFNRSxFQUFNSixFQUFNTSxFQUNwRDc1QixLQUFLbzJCLEdBQUtxRCxFQUFNSyxFQUFNSixFQUFNRyxFQUFNTixFQUFNSyxFQUFNSixFQUFNRyxFQUNwRDM1QixLQUFLcTJCLEdBQUtxRCxFQUFNSSxFQUFNUCxFQUFNSSxFQUFNSCxFQUFNSSxFQUFNSCxFQUFNSSxFQUVwRDc1QixLQUFLMjNCLG9CQUVFMzNCLEtBSVJvNUIsTUFBT3ZxQixFQUFJOU8sR0FFVixHQUFXLElBQU5BLEVBQVUsT0FBT0MsS0FDdEIsR0FBVyxJQUFORCxFQUFVLE9BQU9DLEtBQUtna0IsS0FBTW5WLEdBRWpDLE1BQU1sTyxFQUFJWCxLQUFLazJCLEdBQUlyMUIsRUFBSWIsS0FBS20yQixHQUFJajFCLEVBQUlsQixLQUFLbzJCLEdBQUk3MUIsRUFBSVAsS0FBS3EyQixHQUl0RCxJQUFJMEQsRUFBZXg1QixFQUFJc08sRUFBR3duQixHQUFLMTFCLEVBQUlrTyxFQUFHcW5CLEdBQUtyMUIsRUFBSWdPLEVBQUdzbkIsR0FBS2oxQixFQUFJMk4sRUFBR3VuQixHQWlCOUQsR0FmSzJELEVBQWUsR0FFbkIvNUIsS0FBS3EyQixJQUFPeG5CLEVBQUd3bkIsR0FDZnIyQixLQUFLazJCLElBQU9ybkIsRUFBR3FuQixHQUNmbDJCLEtBQUttMkIsSUFBT3RuQixFQUFHc25CLEdBQ2ZuMkIsS0FBS28yQixJQUFPdm5CLEVBQUd1bkIsR0FFZjJELEdBQWlCQSxHQUlqQi81QixLQUFLZ2tCLEtBQU1uVixHQUlQa3JCLEdBQWdCLEVBT3BCLE9BTEEvNUIsS0FBS3EyQixHQUFLOTFCLEVBQ1ZQLEtBQUtrMkIsR0FBS3YxQixFQUNWWCxLQUFLbTJCLEdBQUt0MUIsRUFDVmIsS0FBS28yQixHQUFLbDFCLEVBRUhsQixLQUlSLE1BQU1nNkIsRUFBa0IsRUFBTUQsRUFBZUEsRUFFN0MsR0FBS0MsR0FBbUJoMEIsT0FBT3d4QixRQUFVLENBRXhDLE1BQU1sMEIsRUFBSSxFQUFJdkQsRUFTZCxPQVJBQyxLQUFLcTJCLEdBQUsveUIsRUFBSS9DLEVBQUlSLEVBQUlDLEtBQUtxMkIsR0FDM0JyMkIsS0FBS2syQixHQUFLNXlCLEVBQUkzQyxFQUFJWixFQUFJQyxLQUFLazJCLEdBQzNCbDJCLEtBQUttMkIsR0FBSzd5QixFQUFJekMsRUFBSWQsRUFBSUMsS0FBS20yQixHQUMzQm4yQixLQUFLbzJCLEdBQUs5eUIsRUFBSXBDLEVBQUluQixFQUFJQyxLQUFLbzJCLEdBRTNCcDJCLEtBQUswbEIsWUFDTDFsQixLQUFLMjNCLG9CQUVFMzNCLEtBSVIsTUFBTWk2QixFQUFlcDZCLEtBQUsybEIsS0FBTXdVLEdBQzFCRSxFQUFZcjZCLEtBQUsrbEIsTUFBT3FVLEVBQWNGLEdBQ3RDSSxFQUFTdDZCLEtBQUtvbkIsS0FBTyxFQUFJbG5CLEdBQU1tNkIsR0FBY0QsRUFDbERHLEVBQVN2NkIsS0FBS29uQixJQUFLbG5CLEVBQUltNkIsR0FBY0QsRUFTdEMsT0FQQWo2QixLQUFLcTJCLEdBQU85MUIsRUFBSTQ1QixFQUFTbjZCLEtBQUtxMkIsR0FBSytELEVBQ25DcDZCLEtBQUtrMkIsR0FBT3YxQixFQUFJdzVCLEVBQVNuNkIsS0FBS2syQixHQUFLa0UsRUFDbkNwNkIsS0FBS20yQixHQUFPdDFCLEVBQUlzNUIsRUFBU242QixLQUFLbTJCLEdBQUtpRSxFQUNuQ3A2QixLQUFLbzJCLEdBQU9sMUIsRUFBSWk1QixFQUFTbjZCLEtBQUtvMkIsR0FBS2dFLEVBRW5DcDZCLEtBQUsyM0Isb0JBRUUzM0IsS0FJUnUyQixpQkFBa0JsdEIsRUFBSXdGLEVBQUk5TyxHQUV6QixPQUFPQyxLQUFLZ2tCLEtBQU0zYSxHQUFLK3ZCLE1BQU92cUIsRUFBSTlPLEdBSW5Dc0MsU0FNQyxNQUFNZzRCLEVBQUt4NkIsS0FBS3dDLFNBQ1ZpNEIsRUFBVXo2QixLQUFLMmxCLEtBQU0sRUFBSTZVLEdBQ3pCRSxFQUFTMTZCLEtBQUsybEIsS0FBTTZVLEdBRXBCRyxFQUFLLEVBQUkzNkIsS0FBS29ILEdBQUtwSCxLQUFLd0MsU0FFeEJvNEIsRUFBSyxFQUFJNTZCLEtBQUtvSCxHQUFLcEgsS0FBS3dDLFNBRTlCLE9BQU9yQyxLQUFLMk0sSUFDWDJ0QixFQUFVejZCLEtBQUttbkIsSUFBS3dULEdBQ3BCRCxFQUFTMTZCLEtBQUtvbkIsSUFBS3dULEdBQ25CRixFQUFTMTZCLEtBQUttbkIsSUFBS3lULEdBQ25CSCxFQUFVejZCLEtBQUtvbkIsSUFBS3VULElBS3RCbFUsT0FBUXNSLEdBRVAsT0FBU0EsRUFBVzFCLEtBQU9sMkIsS0FBS2syQixJQUFVMEIsRUFBV3pCLEtBQU9uMkIsS0FBS20yQixJQUFVeUIsRUFBV3hCLEtBQU9wMkIsS0FBS28yQixJQUFVd0IsRUFBV3ZCLEtBQU9yMkIsS0FBS3EyQixHQUlwSTlQLFVBQVc3RCxFQUFPOEQsRUFBUyxHQVMxQixPQVBBeG1CLEtBQUtrMkIsR0FBS3hULEVBQU84RCxHQUNqQnhtQixLQUFLbTJCLEdBQUt6VCxFQUFPOEQsRUFBUyxHQUMxQnhtQixLQUFLbzJCLEdBQUsxVCxFQUFPOEQsRUFBUyxHQUMxQnhtQixLQUFLcTJCLEdBQUszVCxFQUFPOEQsRUFBUyxHQUUxQnhtQixLQUFLMjNCLG9CQUVFMzNCLEtBSVJ5bUIsUUFBUy9ELEVBQVEsR0FBSThELEVBQVMsR0FPN0IsT0FMQTlELEVBQU84RCxHQUFXeG1CLEtBQUtrMkIsR0FDdkJ4VCxFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUttMkIsR0FDM0J6VCxFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUtvMkIsR0FDM0IxVCxFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUtxMkIsR0FFcEIzVCxFQUlSZ0Usb0JBQXFCQyxFQUFXL2YsR0FPL0IsT0FMQTVHLEtBQUtrMkIsR0FBS3ZQLEVBQVVDLEtBQU1oZ0IsR0FDMUI1RyxLQUFLbTJCLEdBQUt4UCxFQUFVRSxLQUFNamdCLEdBQzFCNUcsS0FBS28yQixHQUFLelAsRUFBVXVJLEtBQU10b0IsR0FDMUI1RyxLQUFLcTJCLEdBQUsxUCxFQUFVK04sS0FBTTl0QixHQUVuQjVHLEtBSVIwNkIsVUFBV0MsR0FJVixPQUZBMzZCLEtBQUsyM0Isa0JBQW9CZ0QsRUFFbEIzNkIsS0FJUjIzQixzQkFJRDFCLEdBQVcxMkIsVUFBVXE3QixjQUFlLEVBRXBDLE1BQU1DLEdBRUxseUIsWUFBYWhJLEVBQUksRUFBR0UsRUFBSSxFQUFHSyxFQUFJLEdBRTlCbEIsS0FBS1csRUFBSUEsRUFDVFgsS0FBS2EsRUFBSUEsRUFDVGIsS0FBS2tCLEVBQUlBLEVBSVZ5TCxJQUFLaE0sRUFBR0UsRUFBR0ssR0FRVixZQU5Xc2UsSUFBTnRlLElBQWtCQSxFQUFJbEIsS0FBS2tCLEdBRWhDbEIsS0FBS1csRUFBSUEsRUFDVFgsS0FBS2EsRUFBSUEsRUFDVGIsS0FBS2tCLEVBQUlBLEVBRUZsQixLQUlSeWpCLFVBQVdDLEdBTVYsT0FKQTFqQixLQUFLVyxFQUFJK2lCLEVBQ1QxakIsS0FBS2EsRUFBSTZpQixFQUNUMWpCLEtBQUtrQixFQUFJd2lCLEVBRUYxakIsS0FJUjJqQixLQUFNaGpCLEdBSUwsT0FGQVgsS0FBS1csRUFBSUEsRUFFRlgsS0FJUjRqQixLQUFNL2lCLEdBSUwsT0FGQWIsS0FBS2EsRUFBSUEsRUFFRmIsS0FJUm16QixLQUFNanlCLEdBSUwsT0FGQWxCLEtBQUtrQixFQUFJQSxFQUVGbEIsS0FJUjZqQixhQUFjamQsRUFBTzVILEdBRXBCLE9BQVM0SCxHQUVSLEtBQUssRUFBRzVHLEtBQUtXLEVBQUkzQixFQUFPLE1BQ3hCLEtBQUssRUFBR2dCLEtBQUthLEVBQUk3QixFQUFPLE1BQ3hCLEtBQUssRUFBR2dCLEtBQUtrQixFQUFJbEMsRUFBTyxNQUN4QixRQUFTLE1BQU0sSUFBSWMsTUFBTywwQkFBNEI4RyxHQUl2RCxPQUFPNUcsS0FJUjhqQixhQUFjbGQsR0FFYixPQUFTQSxHQUVSLEtBQUssRUFBRyxPQUFPNUcsS0FBS1csRUFDcEIsS0FBSyxFQUFHLE9BQU9YLEtBQUthLEVBQ3BCLEtBQUssRUFBRyxPQUFPYixLQUFLa0IsRUFDcEIsUUFBUyxNQUFNLElBQUlwQixNQUFPLDBCQUE0QjhHLElBTXhEbWQsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLFlBQWEzSSxLQUFLVyxFQUFHWCxLQUFLYSxFQUFHYixLQUFLa0IsR0FJbkQ4aUIsS0FBTS9qQixHQU1MLE9BSkFELEtBQUtXLEVBQUlWLEVBQUVVLEVBQ1hYLEtBQUthLEVBQUlaLEVBQUVZLEVBQ1hiLEtBQUtrQixFQUFJakIsRUFBRWlCLEVBRUpsQixLQUlSaWtCLElBQUtoa0IsRUFBR00sR0FFUCxZQUFXaWYsSUFBTmpmLEdBRUpvQyxRQUFRdWhCLEtBQU0seUZBQ1Bsa0IsS0FBS21rQixXQUFZbGtCLEVBQUdNLEtBSTVCUCxLQUFLVyxHQUFLVixFQUFFVSxFQUNaWCxLQUFLYSxHQUFLWixFQUFFWSxFQUNaYixLQUFLa0IsR0FBS2pCLEVBQUVpQixFQUVMbEIsTUFJUm9rQixVQUFXOWdCLEdBTVYsT0FKQXRELEtBQUtXLEdBQUsyQyxFQUNWdEQsS0FBS2EsR0FBS3lDLEVBQ1Z0RCxLQUFLa0IsR0FBS29DLEVBRUh0RCxLQUlSbWtCLFdBQVl2bEIsRUFBR0MsR0FNZCxPQUpBbUIsS0FBS1csRUFBSS9CLEVBQUUrQixFQUFJOUIsRUFBRThCLEVBQ2pCWCxLQUFLYSxFQUFJakMsRUFBRWlDLEVBQUloQyxFQUFFZ0MsRUFDakJiLEtBQUtrQixFQUFJdEMsRUFBRXNDLEVBQUlyQyxFQUFFcUMsRUFFVmxCLEtBSVJxa0IsZ0JBQWlCcGtCLEVBQUdxRCxHQU1uQixPQUpBdEQsS0FBS1csR0FBS1YsRUFBRVUsRUFBSTJDLEVBQ2hCdEQsS0FBS2EsR0FBS1osRUFBRVksRUFBSXlDLEVBQ2hCdEQsS0FBS2tCLEdBQUtqQixFQUFFaUIsRUFBSW9DLEVBRVR0RCxLQUlSc2tCLElBQUtya0IsRUFBR00sR0FFUCxZQUFXaWYsSUFBTmpmLEdBRUpvQyxRQUFRdWhCLEtBQU0seUZBQ1Bsa0IsS0FBS3VrQixXQUFZdGtCLEVBQUdNLEtBSTVCUCxLQUFLVyxHQUFLVixFQUFFVSxFQUNaWCxLQUFLYSxHQUFLWixFQUFFWSxFQUNaYixLQUFLa0IsR0FBS2pCLEVBQUVpQixFQUVMbEIsTUFJUndrQixVQUFXbGhCLEdBTVYsT0FKQXRELEtBQUtXLEdBQUsyQyxFQUNWdEQsS0FBS2EsR0FBS3lDLEVBQ1Z0RCxLQUFLa0IsR0FBS29DLEVBRUh0RCxLQUlSdWtCLFdBQVkzbEIsRUFBR0MsR0FNZCxPQUpBbUIsS0FBS1csRUFBSS9CLEVBQUUrQixFQUFJOUIsRUFBRThCLEVBQ2pCWCxLQUFLYSxFQUFJakMsRUFBRWlDLEVBQUloQyxFQUFFZ0MsRUFDakJiLEtBQUtrQixFQUFJdEMsRUFBRXNDLEVBQUlyQyxFQUFFcUMsRUFFVmxCLEtBSVJ5a0IsU0FBVXhrQixFQUFHTSxHQUVaLFlBQVdpZixJQUFOamYsR0FFSm9DLFFBQVF1aEIsS0FBTSxtR0FDUGxrQixLQUFLODZCLGdCQUFpQjc2QixFQUFHTSxLQUlqQ1AsS0FBS1csR0FBS1YsRUFBRVUsRUFDWlgsS0FBS2EsR0FBS1osRUFBRVksRUFDWmIsS0FBS2tCLEdBQUtqQixFQUFFaUIsRUFFTGxCLE1BSVIwa0IsZUFBZ0JoQixHQU1mLE9BSkExakIsS0FBS1csR0FBSytpQixFQUNWMWpCLEtBQUthLEdBQUs2aUIsRUFDVjFqQixLQUFLa0IsR0FBS3dpQixFQUVIMWpCLEtBSVI4NkIsZ0JBQWlCbDhCLEVBQUdDLEdBTW5CLE9BSkFtQixLQUFLVyxFQUFJL0IsRUFBRStCLEVBQUk5QixFQUFFOEIsRUFDakJYLEtBQUthLEVBQUlqQyxFQUFFaUMsRUFBSWhDLEVBQUVnQyxFQUNqQmIsS0FBS2tCLEVBQUl0QyxFQUFFc0MsRUFBSXJDLEVBQUVxQyxFQUVWbEIsS0FJUis2QixXQUFZakQsR0FRWCxPQU5TQSxHQUFTQSxFQUFNRSxTQUV2QnIxQixRQUFRQyxNQUFPLCtGQUlUNUMsS0FBS2c3QixnQkFBaUJDLEdBQWNwRCxhQUFjQyxJQUkxRG9ELGVBQWdCeEMsRUFBTS9TLEdBRXJCLE9BQU8zbEIsS0FBS2c3QixnQkFBaUJDLEdBQWN4QyxpQkFBa0JDLEVBQU0vUyxJQUlwRWQsYUFBYzVqQixHQUViLE1BQU1OLEVBQUlYLEtBQUtXLEVBQUdFLEVBQUliLEtBQUthLEVBQUdLLEVBQUlsQixLQUFLa0IsRUFDakM3QixFQUFJNEIsRUFBRTZqQixTQU1aLE9BSkE5a0IsS0FBS1csRUFBSXRCLEVBQUcsR0FBTXNCLEVBQUl0QixFQUFHLEdBQU13QixFQUFJeEIsRUFBRyxHQUFNNkIsRUFDNUNsQixLQUFLYSxFQUFJeEIsRUFBRyxHQUFNc0IsRUFBSXRCLEVBQUcsR0FBTXdCLEVBQUl4QixFQUFHLEdBQU02QixFQUM1Q2xCLEtBQUtrQixFQUFJN0IsRUFBRyxHQUFNc0IsRUFBSXRCLEVBQUcsR0FBTXdCLEVBQUl4QixFQUFHLEdBQU02QixFQUVyQ2xCLEtBSVJtN0Isa0JBQW1CbDZCLEdBRWxCLE9BQU9qQixLQUFLNmtCLGFBQWM1akIsR0FBSXlrQixZQUkvQjJOLGFBQWNweUIsR0FFYixNQUFNTixFQUFJWCxLQUFLVyxFQUFHRSxFQUFJYixLQUFLYSxFQUFHSyxFQUFJbEIsS0FBS2tCLEVBQ2pDN0IsRUFBSTRCLEVBQUU2akIsU0FFTnZrQixFQUFJLEdBQU1sQixFQUFHLEdBQU1zQixFQUFJdEIsRUFBRyxHQUFNd0IsRUFBSXhCLEVBQUcsSUFBTzZCLEVBQUk3QixFQUFHLEtBTTNELE9BSkFXLEtBQUtXLEdBQU10QixFQUFHLEdBQU1zQixFQUFJdEIsRUFBRyxHQUFNd0IsRUFBSXhCLEVBQUcsR0FBTTZCLEVBQUk3QixFQUFHLEtBQVNrQixFQUM5RFAsS0FBS2EsR0FBTXhCLEVBQUcsR0FBTXNCLEVBQUl0QixFQUFHLEdBQU13QixFQUFJeEIsRUFBRyxHQUFNNkIsRUFBSTdCLEVBQUcsS0FBU2tCLEVBQzlEUCxLQUFLa0IsR0FBTTdCLEVBQUcsR0FBTXNCLEVBQUl0QixFQUFHLEdBQU13QixFQUFJeEIsRUFBRyxJQUFPNkIsRUFBSTdCLEVBQUcsS0FBU2tCLEVBRXhEUCxLQUlSZzdCLGdCQUFpQi83QixHQUVoQixNQUFNMEIsRUFBSVgsS0FBS1csRUFBR0UsRUFBSWIsS0FBS2EsRUFBR0ssRUFBSWxCLEtBQUtrQixFQUNqQ2s2QixFQUFLbjhCLEVBQUUwQixFQUFHMDZCLEVBQUtwOEIsRUFBRTRCLEVBQUd5NkIsRUFBS3I4QixFQUFFaUMsRUFBR3E2QixFQUFLdDhCLEVBQUVzQixFQUlyQ2k3QixFQUFLRCxFQUFLNTZCLEVBQUkwNkIsRUFBS242QixFQUFJbzZCLEVBQUt6NkIsRUFDNUI0NkIsRUFBS0YsRUFBSzE2QixFQUFJeTZCLEVBQUszNkIsRUFBSXk2QixFQUFLbDZCLEVBQzVCdzZCLEVBQUtILEVBQUtyNkIsRUFBSWs2QixFQUFLdjZCLEVBQUl3NkIsRUFBSzE2QixFQUM1Qmc3QixHQUFPUCxFQUFLejZCLEVBQUkwNkIsRUFBS3g2QixFQUFJeTZCLEVBQUtwNkIsRUFRcEMsT0FKQWxCLEtBQUtXLEVBQUk2NkIsRUFBS0QsRUFBS0ksR0FBT1AsRUFBS0ssR0FBT0gsRUFBS0ksR0FBT0wsRUFDbERyN0IsS0FBS2EsRUFBSTQ2QixFQUFLRixFQUFLSSxHQUFPTixFQUFLSyxHQUFPTixFQUFLSSxHQUFPRixFQUNsRHQ3QixLQUFLa0IsRUFBSXc2QixFQUFLSCxFQUFLSSxHQUFPTCxFQUFLRSxHQUFPSCxFQUFLSSxHQUFPTCxFQUUzQ3A3QixLQUlSNDdCLFFBQVNDLEdBRVIsT0FBTzc3QixLQUFLcXpCLGFBQWN3SSxFQUFPQyxvQkFBcUJ6SSxhQUFjd0ksRUFBT0Usa0JBSTVFQyxVQUFXSCxHQUVWLE9BQU83N0IsS0FBS3F6QixhQUFjd0ksRUFBT0kseUJBQTBCNUksYUFBY3dJLEVBQU9LLGFBSWpGQyxtQkFBb0JsN0IsR0FLbkIsTUFBTU4sRUFBSVgsS0FBS1csRUFBR0UsRUFBSWIsS0FBS2EsRUFBR0ssRUFBSWxCLEtBQUtrQixFQUNqQzdCLEVBQUk0QixFQUFFNmpCLFNBTVosT0FKQTlrQixLQUFLVyxFQUFJdEIsRUFBRyxHQUFNc0IsRUFBSXRCLEVBQUcsR0FBTXdCLEVBQUl4QixFQUFHLEdBQU02QixFQUM1Q2xCLEtBQUthLEVBQUl4QixFQUFHLEdBQU1zQixFQUFJdEIsRUFBRyxHQUFNd0IsRUFBSXhCLEVBQUcsR0FBTTZCLEVBQzVDbEIsS0FBS2tCLEVBQUk3QixFQUFHLEdBQU1zQixFQUFJdEIsRUFBRyxHQUFNd0IsRUFBSXhCLEVBQUcsSUFBTzZCLEVBRXRDbEIsS0FBSzBsQixZQUliZixPQUFRMWtCLEdBTVAsT0FKQUQsS0FBS1csR0FBS1YsRUFBRVUsRUFDWlgsS0FBS2EsR0FBS1osRUFBRVksRUFDWmIsS0FBS2tCLEdBQUtqQixFQUFFaUIsRUFFTGxCLEtBSVI0a0IsYUFBY2xCLEdBRWIsT0FBTzFqQixLQUFLMGtCLGVBQWdCLEVBQUloQixHQUlqQ25kLElBQUt0RyxHQU1KLE9BSkFELEtBQUtXLEVBQUlkLEtBQUswRyxJQUFLdkcsS0FBS1csRUFBR1YsRUFBRVUsR0FDN0JYLEtBQUthLEVBQUloQixLQUFLMEcsSUFBS3ZHLEtBQUthLEVBQUdaLEVBQUVZLEdBQzdCYixLQUFLa0IsRUFBSXJCLEtBQUswRyxJQUFLdkcsS0FBS2tCLEVBQUdqQixFQUFFaUIsR0FFdEJsQixLQUlSK0YsSUFBSzlGLEdBTUosT0FKQUQsS0FBS1csRUFBSWQsS0FBS2tHLElBQUsvRixLQUFLVyxFQUFHVixFQUFFVSxHQUM3QlgsS0FBS2EsRUFBSWhCLEtBQUtrRyxJQUFLL0YsS0FBS2EsRUFBR1osRUFBRVksR0FDN0JiLEtBQUtrQixFQUFJckIsS0FBS2tHLElBQUsvRixLQUFLa0IsRUFBR2pCLEVBQUVpQixHQUV0QmxCLEtBSVJvakIsTUFBTzdjLEVBQUtSLEdBUVgsT0FKQS9GLEtBQUtXLEVBQUlkLEtBQUtrRyxJQUFLUSxFQUFJNUYsRUFBR2QsS0FBSzBHLElBQUtSLEVBQUlwRixFQUFHWCxLQUFLVyxJQUNoRFgsS0FBS2EsRUFBSWhCLEtBQUtrRyxJQUFLUSxFQUFJMUYsRUFBR2hCLEtBQUswRyxJQUFLUixFQUFJbEYsRUFBR2IsS0FBS2EsSUFDaERiLEtBQUtrQixFQUFJckIsS0FBS2tHLElBQUtRLEVBQUlyRixFQUFHckIsS0FBSzBHLElBQUtSLEVBQUk3RSxFQUFHbEIsS0FBS2tCLElBRXpDbEIsS0FJUitrQixZQUFhQyxFQUFRQyxHQU1wQixPQUpBamxCLEtBQUtXLEVBQUlkLEtBQUtrRyxJQUFLaWYsRUFBUW5sQixLQUFLMEcsSUFBSzBlLEVBQVFqbEIsS0FBS1csSUFDbERYLEtBQUthLEVBQUloQixLQUFLa0csSUFBS2lmLEVBQVFubEIsS0FBSzBHLElBQUswZSxFQUFRamxCLEtBQUthLElBQ2xEYixLQUFLa0IsRUFBSXJCLEtBQUtrRyxJQUFLaWYsRUFBUW5sQixLQUFLMEcsSUFBSzBlLEVBQVFqbEIsS0FBS2tCLElBRTNDbEIsS0FJUmtsQixZQUFhM2UsRUFBS1IsR0FFakIsTUFBTWpILEVBQVNrQixLQUFLbEIsU0FFcEIsT0FBT2tCLEtBQUs0a0IsYUFBYzlsQixHQUFVLEdBQUk0bEIsZUFBZ0I3a0IsS0FBS2tHLElBQUtRLEVBQUsxRyxLQUFLMEcsSUFBS1IsRUFBS2pILEtBSXZGb00sUUFNQyxPQUpBbEwsS0FBS1csRUFBSWQsS0FBS3FMLE1BQU9sTCxLQUFLVyxHQUMxQlgsS0FBS2EsRUFBSWhCLEtBQUtxTCxNQUFPbEwsS0FBS2EsR0FDMUJiLEtBQUtrQixFQUFJckIsS0FBS3FMLE1BQU9sTCxLQUFLa0IsR0FFbkJsQixLQUlSME0sT0FNQyxPQUpBMU0sS0FBS1csRUFBSWQsS0FBSzZNLEtBQU0xTSxLQUFLVyxHQUN6QlgsS0FBS2EsRUFBSWhCLEtBQUs2TSxLQUFNMU0sS0FBS2EsR0FDekJiLEtBQUtrQixFQUFJckIsS0FBSzZNLEtBQU0xTSxLQUFLa0IsR0FFbEJsQixLQUlSeVAsUUFNQyxPQUpBelAsS0FBS1csRUFBSWQsS0FBSzRQLE1BQU96UCxLQUFLVyxHQUMxQlgsS0FBS2EsRUFBSWhCLEtBQUs0UCxNQUFPelAsS0FBS2EsR0FDMUJiLEtBQUtrQixFQUFJckIsS0FBSzRQLE1BQU96UCxLQUFLa0IsR0FFbkJsQixLQUlSbWxCLGNBTUMsT0FKQW5sQixLQUFLVyxFQUFNWCxLQUFLVyxFQUFJLEVBQU1kLEtBQUs2TSxLQUFNMU0sS0FBS1csR0FBTWQsS0FBS3FMLE1BQU9sTCxLQUFLVyxHQUNqRVgsS0FBS2EsRUFBTWIsS0FBS2EsRUFBSSxFQUFNaEIsS0FBSzZNLEtBQU0xTSxLQUFLYSxHQUFNaEIsS0FBS3FMLE1BQU9sTCxLQUFLYSxHQUNqRWIsS0FBS2tCLEVBQU1sQixLQUFLa0IsRUFBSSxFQUFNckIsS0FBSzZNLEtBQU0xTSxLQUFLa0IsR0FBTXJCLEtBQUtxTCxNQUFPbEwsS0FBS2tCLEdBRTFEbEIsS0FJUm9sQixTQU1DLE9BSkFwbEIsS0FBS1csR0FBTVgsS0FBS1csRUFDaEJYLEtBQUthLEdBQU1iLEtBQUthLEVBQ2hCYixLQUFLa0IsR0FBTWxCLEtBQUtrQixFQUVUbEIsS0FJUnFsQixJQUFLcGxCLEdBRUosT0FBT0QsS0FBS1csRUFBSVYsRUFBRVUsRUFBSVgsS0FBS2EsRUFBSVosRUFBRVksRUFBSWIsS0FBS2tCLEVBQUlqQixFQUFFaUIsRUFNakRxa0IsV0FFQyxPQUFPdmxCLEtBQUtXLEVBQUlYLEtBQUtXLEVBQUlYLEtBQUthLEVBQUliLEtBQUthLEVBQUliLEtBQUtrQixFQUFJbEIsS0FBS2tCLEVBSTFEcEMsU0FFQyxPQUFPZSxLQUFLMmxCLEtBQU14bEIsS0FBS1csRUFBSVgsS0FBS1csRUFBSVgsS0FBS2EsRUFBSWIsS0FBS2EsRUFBSWIsS0FBS2tCLEVBQUlsQixLQUFLa0IsR0FJckV1a0Isa0JBRUMsT0FBTzVsQixLQUFLMlIsSUFBS3hSLEtBQUtXLEdBQU1kLEtBQUsyUixJQUFLeFIsS0FBS2EsR0FBTWhCLEtBQUsyUixJQUFLeFIsS0FBS2tCLEdBSWpFd2tCLFlBRUMsT0FBTzFsQixLQUFLNGtCLGFBQWM1a0IsS0FBS2xCLFVBQVksR0FJNUNvbkIsVUFBV3BuQixHQUVWLE9BQU9rQixLQUFLMGxCLFlBQVloQixlQUFnQjVsQixHQUl6Q3VrQixLQUFNcGpCLEVBQUcrYSxHQU1SLE9BSkFoYixLQUFLVyxJQUFPVixFQUFFVSxFQUFJWCxLQUFLVyxHQUFNcWEsRUFDN0JoYixLQUFLYSxJQUFPWixFQUFFWSxFQUFJYixLQUFLYSxHQUFNbWEsRUFDN0JoYixLQUFLa0IsSUFBT2pCLEVBQUVpQixFQUFJbEIsS0FBS2tCLEdBQU04WixFQUV0QmhiLEtBSVJtbUIsWUFBYUMsRUFBSUMsRUFBSXJMLEdBTXBCLE9BSkFoYixLQUFLVyxFQUFJeWxCLEVBQUd6bEIsR0FBTTBsQixFQUFHMWxCLEVBQUl5bEIsRUFBR3psQixHQUFNcWEsRUFDbENoYixLQUFLYSxFQUFJdWxCLEVBQUd2bEIsR0FBTXdsQixFQUFHeGxCLEVBQUl1bEIsRUFBR3ZsQixHQUFNbWEsRUFDbENoYixLQUFLa0IsRUFBSWtsQixFQUFHbGxCLEdBQU1tbEIsRUFBR25sQixFQUFJa2xCLEVBQUdsbEIsR0FBTThaLEVBRTNCaGIsS0FJUnNsQixNQUFPcmxCLEVBQUdNLEdBRVQsWUFBV2lmLElBQU5qZixHQUVKb0MsUUFBUXVoQixLQUFNLDZGQUNQbGtCLEtBQUtvOEIsYUFBY244QixFQUFHTSxJQUl2QlAsS0FBS284QixhQUFjcDhCLEtBQU1DLEdBSWpDbThCLGFBQWN4OUIsRUFBR0MsR0FFaEIsTUFBTXc5QixFQUFLejlCLEVBQUUrQixFQUFHMjdCLEVBQUsxOUIsRUFBRWlDLEVBQUcwN0IsRUFBSzM5QixFQUFFc0MsRUFDM0JzN0IsRUFBSzM5QixFQUFFOEIsRUFBRzg3QixFQUFLNTlCLEVBQUVnQyxFQUFHNjdCLEVBQUs3OUIsRUFBRXFDLEVBTWpDLE9BSkFsQixLQUFLVyxFQUFJMjdCLEVBQUtJLEVBQUtILEVBQUtFLEVBQ3hCejhCLEtBQUthLEVBQUkwN0IsRUFBS0MsRUFBS0gsRUFBS0ssRUFDeEIxOEIsS0FBS2tCLEVBQUltN0IsRUFBS0ksRUFBS0gsRUFBS0UsRUFFakJ4OEIsS0FJUjI4QixnQkFBaUIxOEIsR0FFaEIsTUFBTTI4QixFQUFjMzhCLEVBQUVzbEIsV0FFdEIsR0FBcUIsSUFBaEJxWCxFQUFvQixPQUFPNThCLEtBQUsyTSxJQUFLLEVBQUcsRUFBRyxHQUVoRCxNQUFNK1csRUFBU3pqQixFQUFFb2xCLElBQUtybEIsTUFBUzQ4QixFQUUvQixPQUFPNThCLEtBQUtna0IsS0FBTS9qQixHQUFJeWtCLGVBQWdCaEIsR0FJdkNtWixlQUFnQkMsR0FJZixPQUZBQyxHQUFVL1ksS0FBTWhrQixNQUFPMjhCLGdCQUFpQkcsR0FFakM5OEIsS0FBS3NrQixJQUFLeVksSUFJbEJDLFFBQVNDLEdBS1IsT0FBT2o5QixLQUFLc2tCLElBQUt5WSxHQUFVL1ksS0FBTWlaLEdBQVN2WSxlQUFnQixFQUFJMWtCLEtBQUtxbEIsSUFBSzRYLEtBSXpFaEUsUUFBU2g1QixHQUVSLE1BQU0yOEIsRUFBYy84QixLQUFLMmxCLEtBQU14bEIsS0FBS3VsQixXQUFhdGxCLEVBQUVzbEIsWUFFbkQsR0FBcUIsSUFBaEJxWCxFQUFvQixPQUFPLzhCLEtBQUtvSCxHQUFLLEVBRTFDLE1BQU0rakIsRUFBUWhyQixLQUFLcWxCLElBQUtwbEIsR0FBTTI4QixFQUk5QixPQUFPLzhCLEtBQUswekIsS0FBTW5RLEVBQU80SCxHQUFTLEVBQUcsSUFJdENuRixXQUFZNWxCLEdBRVgsT0FBT0osS0FBSzJsQixLQUFNeGxCLEtBQUs4bEIsa0JBQW1CN2xCLElBSTNDNmxCLGtCQUFtQjdsQixHQUVsQixNQUFNOGxCLEVBQUsvbEIsS0FBS1csRUFBSVYsRUFBRVUsRUFBR3FsQixFQUFLaG1CLEtBQUthLEVBQUlaLEVBQUVZLEVBQUdxOEIsRUFBS2w5QixLQUFLa0IsRUFBSWpCLEVBQUVpQixFQUU1RCxPQUFPNmtCLEVBQUtBLEVBQUtDLEVBQUtBLEVBQUtrWCxFQUFLQSxFQUlqQ2pYLG9CQUFxQmhtQixHQUVwQixPQUFPSixLQUFLMlIsSUFBS3hSLEtBQUtXLEVBQUlWLEVBQUVVLEdBQU1kLEtBQUsyUixJQUFLeFIsS0FBS2EsRUFBSVosRUFBRVksR0FBTWhCLEtBQUsyUixJQUFLeFIsS0FBS2tCLEVBQUlqQixFQUFFaUIsR0FJbkZpOEIsaUJBQWtCNzVCLEdBRWpCLE9BQU90RCxLQUFLbzlCLHVCQUF3Qjk1QixFQUFFNkMsT0FBUTdDLEVBQUUrNUIsSUFBSy81QixFQUFFMG5CLE9BSXhEb1MsdUJBQXdCajNCLEVBQVFrM0IsRUFBS3JTLEdBRXBDLE1BQU1zUyxFQUFlejlCLEtBQUtvbkIsSUFBS29XLEdBQVFsM0IsRUFNdkMsT0FKQW5HLEtBQUtXLEVBQUkyOEIsRUFBZXo5QixLQUFLb25CLElBQUsrRCxHQUNsQ2hyQixLQUFLYSxFQUFJaEIsS0FBS21uQixJQUFLcVcsR0FBUWwzQixFQUMzQm5HLEtBQUtrQixFQUFJbzhCLEVBQWV6OUIsS0FBS21uQixJQUFLZ0UsR0FFM0JockIsS0FJUnU5QixtQkFBb0I3N0IsR0FFbkIsT0FBTzFCLEtBQUt3OUIseUJBQTBCOTdCLEVBQUV5RSxPQUFRekUsRUFBRXNwQixNQUFPdHBCLEVBQUViLEdBSTVEMjhCLHlCQUEwQnIzQixFQUFRNmtCLEVBQU9ucUIsR0FNeEMsT0FKQWIsS0FBS1csRUFBSXdGLEVBQVN0RyxLQUFLb25CLElBQUsrRCxHQUM1QmhyQixLQUFLYSxFQUFJQSxFQUNUYixLQUFLa0IsRUFBSWlGLEVBQVN0RyxLQUFLbW5CLElBQUtnRSxHQUVyQmhyQixLQUlSeTlCLHNCQUF1Qng4QixHQUV0QixNQUFNNUIsRUFBSTRCLEVBQUU2akIsU0FNWixPQUpBOWtCLEtBQUtXLEVBQUl0QixFQUFHLElBQ1pXLEtBQUthLEVBQUl4QixFQUFHLElBQ1pXLEtBQUtrQixFQUFJN0IsRUFBRyxJQUVMVyxLQUlSMDlCLG1CQUFvQno4QixHQUVuQixNQUFNMHBCLEVBQUszcUIsS0FBSzI5QixvQkFBcUIxOEIsRUFBRyxHQUFJbkMsU0FDdEM4ckIsRUFBSzVxQixLQUFLMjlCLG9CQUFxQjE4QixFQUFHLEdBQUluQyxTQUN0QzgrQixFQUFLNTlCLEtBQUsyOUIsb0JBQXFCMThCLEVBQUcsR0FBSW5DLFNBTTVDLE9BSkFrQixLQUFLVyxFQUFJZ3FCLEVBQ1QzcUIsS0FBS2EsRUFBSStwQixFQUNUNXFCLEtBQUtrQixFQUFJMDhCLEVBRUY1OUIsS0FJUjI5QixvQkFBcUIxOEIsRUFBRzJGLEdBRXZCLE9BQU81RyxLQUFLdW1CLFVBQVd0bEIsRUFBRTZqQixTQUFrQixFQUFSbGUsR0FJcEN3aEIscUJBQXNCbm5CLEVBQUcyRixHQUV4QixPQUFPNUcsS0FBS3VtQixVQUFXdGxCLEVBQUU2akIsU0FBa0IsRUFBUmxlLEdBSXBDaXhCLGFBQWN4NEIsR0FNYixPQUpBVyxLQUFLVyxFQUFJdEIsRUFBRTYyQixHQUNYbDJCLEtBQUthLEVBQUl4QixFQUFFODJCLEdBQ1huMkIsS0FBS2tCLEVBQUk3QixFQUFFKzJCLEdBRUpwMkIsS0FJUnNtQixPQUFRcm1CLEdBRVAsT0FBV0EsRUFBRVUsSUFBTVgsS0FBS1csR0FBU1YsRUFBRVksSUFBTWIsS0FBS2EsR0FBU1osRUFBRWlCLElBQU1sQixLQUFLa0IsRUFJckVxbEIsVUFBVzdELEVBQU84RCxFQUFTLEdBTTFCLE9BSkF4bUIsS0FBS1csRUFBSStoQixFQUFPOEQsR0FDaEJ4bUIsS0FBS2EsRUFBSTZoQixFQUFPOEQsRUFBUyxHQUN6QnhtQixLQUFLa0IsRUFBSXdoQixFQUFPOEQsRUFBUyxHQUVsQnhtQixLQUlSeW1CLFFBQVMvRCxFQUFRLEdBQUk4RCxFQUFTLEdBTTdCLE9BSkE5RCxFQUFPOEQsR0FBV3htQixLQUFLVyxFQUN2QitoQixFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUthLEVBQzNCNmhCLEVBQU84RCxFQUFTLEdBQU14bUIsS0FBS2tCLEVBRXBCd2hCLEVBSVJnRSxvQkFBcUJDLEVBQVcvZixFQUFPNGYsR0FZdEMsWUFWZ0JoSCxJQUFYZ0gsR0FFSjdqQixRQUFRdWhCLEtBQU0sdUVBSWZsa0IsS0FBS1csRUFBSWdtQixFQUFVQyxLQUFNaGdCLEdBQ3pCNUcsS0FBS2EsRUFBSThsQixFQUFVRSxLQUFNamdCLEdBQ3pCNUcsS0FBS2tCLEVBQUl5bEIsRUFBVXVJLEtBQU10b0IsR0FFbEI1RyxLQUlScUMsU0FNQyxPQUpBckMsS0FBS1csRUFBSWQsS0FBS3dDLFNBQ2RyQyxLQUFLYSxFQUFJaEIsS0FBS3dDLFNBQ2RyQyxLQUFLa0IsRUFBSXJCLEtBQUt3QyxTQUVQckMsS0FJUjY5QixrQkFJQyxNQUFNcitCLEVBQThCLEdBQXhCSyxLQUFLd0MsU0FBVyxJQUN0QnRDLEVBQUlGLEtBQUt3QyxTQUFXeEMsS0FBS29ILEdBQUssRUFDOUI5RyxFQUFJTixLQUFLMmxCLEtBQU0sRUFBSWhtQixHQUFLLEdBTTlCLE9BSkFRLEtBQUtXLEVBQUlSLEVBQUlOLEtBQUttbkIsSUFBS2puQixHQUN2QkMsS0FBS2EsRUFBSVYsRUFBSU4sS0FBS29uQixJQUFLbG5CLEdBQ3ZCQyxLQUFLa0IsRUFBSTFCLEVBRUZRLEtBSVIsRUFBR1MsT0FBT0Msa0JBRUhWLEtBQUtXLFFBQ0xYLEtBQUthLFFBQ0xiLEtBQUtrQixHQU1iMjVCLEdBQVF0N0IsVUFBVXUrQixXQUFZLEVBRTlCLE1BQU1mLEdBQTBCLElBQUlsQyxHQUM5QkksR0FBOEIsSUFBSWhGLEdBRXhDLE1BQU04SCxHQUVMcDFCLFlBQWFwQyxFQUFNLElBQUlzMEIsR0FBUyxJQUFZLElBQVksS0FBYzkwQixFQUFNLElBQUk4MEIsSUFBUyxLQUFZLEtBQVksTUFFaEg3NkIsS0FBS3VHLElBQU1BLEVBQ1h2RyxLQUFLK0YsSUFBTUEsRUFJWjRHLElBQUtwRyxFQUFLUixHQUtULE9BSEEvRixLQUFLdUcsSUFBSXlkLEtBQU16ZCxHQUNmdkcsS0FBSytGLElBQUlpZSxLQUFNamUsR0FFUi9GLEtBSVJnK0IsYUFBY3RiLEdBRWIsSUFBSXViLEVBQU8sSUFDUEMsRUFBTyxJQUNQQyxFQUFPLElBRVBDLEdBQU8sSUFDUEMsR0FBTyxJQUNQQyxHQUFPLElBRVgsSUFBTSxJQUFJeDlCLEVBQUksRUFBR1csRUFBSWloQixFQUFNNWpCLE9BQVFnQyxFQUFJVyxFQUFHWCxHQUFLLEVBQUksQ0FFbEQsTUFBTUgsRUFBSStoQixFQUFPNWhCLEdBQ1hELEVBQUk2aEIsRUFBTzVoQixFQUFJLEdBQ2ZJLEVBQUl3aEIsRUFBTzVoQixFQUFJLEdBRWhCSCxFQUFJczlCLElBQU9BLEVBQU90OUIsR0FDbEJFLEVBQUlxOUIsSUFBT0EsRUFBT3I5QixHQUNsQkssRUFBSWk5QixJQUFPQSxFQUFPajlCLEdBRWxCUCxFQUFJeTlCLElBQU9BLEVBQU96OUIsR0FDbEJFLEVBQUl3OUIsSUFBT0EsRUFBT3g5QixHQUNsQkssRUFBSW85QixJQUFPQSxFQUFPcDlCLEdBT3hCLE9BSEFsQixLQUFLdUcsSUFBSW9HLElBQUtzeEIsRUFBTUMsRUFBTUMsR0FDMUJuK0IsS0FBSytGLElBQUk0RyxJQUFLeXhCLEVBQU1DLEVBQU1DLEdBRW5CdCtCLEtBSVJ1K0IsdUJBQXdCNVgsR0FFdkIsSUFBSXNYLEVBQU8sSUFDUEMsRUFBTyxJQUNQQyxFQUFPLElBRVBDLEdBQU8sSUFDUEMsR0FBTyxJQUNQQyxHQUFPLElBRVgsSUFBTSxJQUFJeDlCLEVBQUksRUFBR1csRUFBSWtsQixFQUFVbVAsTUFBT2gxQixFQUFJVyxFQUFHWCxJQUFPLENBRW5ELE1BQU1ILEVBQUlnbUIsRUFBVUMsS0FBTTlsQixHQUNwQkQsRUFBSThsQixFQUFVRSxLQUFNL2xCLEdBQ3BCSSxFQUFJeWxCLEVBQVV1SSxLQUFNcHVCLEdBRXJCSCxFQUFJczlCLElBQU9BLEVBQU90OUIsR0FDbEJFLEVBQUlxOUIsSUFBT0EsRUFBT3I5QixHQUNsQkssRUFBSWk5QixJQUFPQSxFQUFPajlCLEdBRWxCUCxFQUFJeTlCLElBQU9BLEVBQU96OUIsR0FDbEJFLEVBQUl3OUIsSUFBT0EsRUFBT3g5QixHQUNsQkssRUFBSW85QixJQUFPQSxFQUFPcDlCLEdBT3hCLE9BSEFsQixLQUFLdUcsSUFBSW9HLElBQUtzeEIsRUFBTUMsRUFBTUMsR0FDMUJuK0IsS0FBSytGLElBQUk0RyxJQUFLeXhCLEVBQU1DLEVBQU1DLEdBRW5CdCtCLEtBSVJ3K0IsY0FBZUMsR0FFZHorQixLQUFLMCtCLFlBRUwsSUFBTSxJQUFJNTlCLEVBQUksRUFBR2kxQixFQUFLMEksRUFBTzMvQixPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBRTVDZCxLQUFLMitCLGNBQWVGLEVBQVEzOUIsSUFJN0IsT0FBT2QsS0FJUjQrQixxQkFBc0I3WCxFQUFRMVAsR0FFN0IsTUFBTXduQixFQUFXQyxHQUFVOWEsS0FBTTNNLEdBQU9xTixlQUFnQixJQUt4RCxPQUhBMWtCLEtBQUt1RyxJQUFJeWQsS0FBTStDLEdBQVN6QyxJQUFLdWEsR0FDN0I3K0IsS0FBSytGLElBQUlpZSxLQUFNK0MsR0FBUzlDLElBQUs0YSxHQUV0QjcrQixLQUlSKytCLGNBQWVDLEVBQVFDLEdBQVUsR0FJaEMsT0FGQWovQixLQUFLMCtCLFlBRUUxK0IsS0FBS2svQixlQUFnQkYsRUFBUUMsR0FJckNsYixRQUVDLE9BQU8sSUFBSS9qQixLQUFLMkksYUFBY3FiLEtBQU1oa0IsTUFJckNna0IsS0FBTW1iLEdBS0wsT0FIQW4vQixLQUFLdUcsSUFBSXlkLEtBQU1tYixFQUFJNTRCLEtBQ25CdkcsS0FBSytGLElBQUlpZSxLQUFNbWIsRUFBSXA1QixLQUVaL0YsS0FJUjArQixZQUtDLE9BSEExK0IsS0FBS3VHLElBQUk1RixFQUFJWCxLQUFLdUcsSUFBSTFGLEVBQUliLEtBQUt1RyxJQUFJckYsRUFBSSxJQUN2Q2xCLEtBQUsrRixJQUFJcEYsRUFBSVgsS0FBSytGLElBQUlsRixFQUFJYixLQUFLK0YsSUFBSTdFLEdBQUksSUFFaENsQixLQUlSby9CLFVBSUMsT0FBU3AvQixLQUFLK0YsSUFBSXBGLEVBQUlYLEtBQUt1RyxJQUFJNUYsR0FBU1gsS0FBSytGLElBQUlsRixFQUFJYixLQUFLdUcsSUFBSTFGLEdBQVNiLEtBQUsrRixJQUFJN0UsRUFBSWxCLEtBQUt1RyxJQUFJckYsRUFJOUZtK0IsVUFBVzVjLEdBRVYsT0FBT3ppQixLQUFLby9CLFVBQVkzYyxFQUFPOVYsSUFBSyxFQUFHLEVBQUcsR0FBTThWLEVBQU8wQixXQUFZbmtCLEtBQUt1RyxJQUFLdkcsS0FBSytGLEtBQU0yZSxlQUFnQixJQUl6RzRhLFFBQVM3YyxHQUVSLE9BQU96aUIsS0FBS28vQixVQUFZM2MsRUFBTzlWLElBQUssRUFBRyxFQUFHLEdBQU04VixFQUFPOEIsV0FBWXZrQixLQUFLK0YsSUFBSy9GLEtBQUt1RyxLQUluRm80QixjQUFlWSxHQUtkLE9BSEF2L0IsS0FBS3VHLElBQUlBLElBQUtnNUIsR0FDZHYvQixLQUFLK0YsSUFBSUEsSUFBS3c1QixHQUVQdi9CLEtBSVJ3L0IsZUFBZ0JDLEdBS2YsT0FIQXovQixLQUFLdUcsSUFBSStkLElBQUttYixHQUNkei9CLEtBQUsrRixJQUFJa2UsSUFBS3diLEdBRVB6L0IsS0FJUjAvQixlQUFnQmhjLEdBS2YsT0FIQTFqQixLQUFLdUcsSUFBSTZkLFdBQWFWLEdBQ3RCMWpCLEtBQUsrRixJQUFJcWUsVUFBV1YsR0FFYjFqQixLQUlSay9CLGVBQWdCRixFQUFRQyxHQUFVLEdBS2pDRCxFQUFPVyxtQkFBbUIsR0FBTyxHQUVqQyxNQUFNQyxFQUFXWixFQUFPWSxTQUV4QixRQUFrQnBnQixJQUFib2dCLEVBRUosR0FBS1gsR0FBa0N6ZixNQUF2Qm9nQixFQUFTQyxpQkFBNERyZ0IsSUFBakNvZ0IsRUFBU0MsV0FBV0MsU0FBeUIsQ0FFaEcsTUFBTUEsRUFBV0YsRUFBU0MsV0FBV0MsU0FDckMsSUFBTSxJQUFJaC9CLEVBQUksRUFBR1csRUFBSXErQixFQUFTaEssTUFBT2gxQixFQUFJVyxFQUFHWCxJQUUzQ2crQixHQUFVcFksb0JBQXFCb1osRUFBVWgvQixHQUFJdXlCLGFBQWMyTCxFQUFPOUMsYUFDbEVsOEIsS0FBSzIrQixjQUFlRyxTQU1TLE9BQXpCYyxFQUFTRyxhQUViSCxFQUFTSSxxQkFJVkMsR0FBT2pjLEtBQU00YixFQUFTRyxhQUN0QkUsR0FBTzVNLGFBQWMyTCxFQUFPOUMsYUFFNUJsOEIsS0FBS2tnQyxNQUFPRCxJQU1kLE1BQU1FLEVBQVduQixFQUFPbUIsU0FFeEIsSUFBTSxJQUFJci9CLEVBQUksRUFBR1csRUFBSTArQixFQUFTcmhDLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUU1Q2QsS0FBS2svQixlQUFnQmlCLEVBQVVyL0IsR0FBS20rQixHQUlyQyxPQUFPai9CLEtBSVJvZ0MsY0FBZWIsR0FFZCxRQUFPQSxFQUFNNStCLEVBQUlYLEtBQUt1RyxJQUFJNUYsR0FBSzQrQixFQUFNNStCLEVBQUlYLEtBQUsrRixJQUFJcEYsR0FDakQ0K0IsRUFBTTErQixFQUFJYixLQUFLdUcsSUFBSTFGLEdBQUswK0IsRUFBTTErQixFQUFJYixLQUFLK0YsSUFBSWxGLEdBQzNDMCtCLEVBQU1yK0IsRUFBSWxCLEtBQUt1RyxJQUFJckYsR0FBS3ErQixFQUFNcitCLEVBQUlsQixLQUFLK0YsSUFBSTdFLEdBSTdDbS9CLFlBQWFsQixHQUVaLE9BQU9uL0IsS0FBS3VHLElBQUk1RixHQUFLdytCLEVBQUk1NEIsSUFBSTVGLEdBQUt3K0IsRUFBSXA1QixJQUFJcEYsR0FBS1gsS0FBSytGLElBQUlwRixHQUN2RFgsS0FBS3VHLElBQUkxRixHQUFLcytCLEVBQUk1NEIsSUFBSTFGLEdBQUtzK0IsRUFBSXA1QixJQUFJbEYsR0FBS2IsS0FBSytGLElBQUlsRixHQUNqRGIsS0FBS3VHLElBQUlyRixHQUFLaStCLEVBQUk1NEIsSUFBSXJGLEdBQUtpK0IsRUFBSXA1QixJQUFJN0UsR0FBS2xCLEtBQUsrRixJQUFJN0UsRUFJbkRvL0IsYUFBY2YsRUFBTzljLEdBS3BCLE9BQU9BLEVBQU85VixLQUNYNHlCLEVBQU01K0IsRUFBSVgsS0FBS3VHLElBQUk1RixJQUFRWCxLQUFLK0YsSUFBSXBGLEVBQUlYLEtBQUt1RyxJQUFJNUYsSUFDakQ0K0IsRUFBTTErQixFQUFJYixLQUFLdUcsSUFBSTFGLElBQVFiLEtBQUsrRixJQUFJbEYsRUFBSWIsS0FBS3VHLElBQUkxRixJQUNqRDArQixFQUFNcitCLEVBQUlsQixLQUFLdUcsSUFBSXJGLElBQVFsQixLQUFLK0YsSUFBSTdFLEVBQUlsQixLQUFLdUcsSUFBSXJGLElBS3JEcS9CLGNBQWVwQixHQUdkLFFBQU9BLEVBQUlwNUIsSUFBSXBGLEVBQUlYLEtBQUt1RyxJQUFJNUYsR0FBS3crQixFQUFJNTRCLElBQUk1RixFQUFJWCxLQUFLK0YsSUFBSXBGLEdBQ3JEdytCLEVBQUlwNUIsSUFBSWxGLEVBQUliLEtBQUt1RyxJQUFJMUYsR0FBS3MrQixFQUFJNTRCLElBQUkxRixFQUFJYixLQUFLK0YsSUFBSWxGLEdBQy9DcytCLEVBQUlwNUIsSUFBSTdFLEVBQUlsQixLQUFLdUcsSUFBSXJGLEdBQUtpK0IsRUFBSTU0QixJQUFJckYsRUFBSWxCLEtBQUsrRixJQUFJN0UsR0FJakRzL0IsaUJBQWtCQyxHQU1qQixPQUhBemdDLEtBQUswZ0MsV0FBWUQsRUFBTzFaLE9BQVErWCxJQUd6QkEsR0FBVWhaLGtCQUFtQjJhLEVBQU8xWixTQUFjMFosRUFBT3Q2QixPQUFTczZCLEVBQU90NkIsT0FJakZ3NkIsZ0JBQWlCQyxHQUtoQixJQUFJcjZCLEVBQUtSLEVBc0NULE9BcENLNjZCLEVBQU0zRCxPQUFPdDhCLEVBQUksR0FFckI0RixFQUFNcTZCLEVBQU0zRCxPQUFPdDhCLEVBQUlYLEtBQUt1RyxJQUFJNUYsRUFDaENvRixFQUFNNjZCLEVBQU0zRCxPQUFPdDhCLEVBQUlYLEtBQUsrRixJQUFJcEYsSUFJaEM0RixFQUFNcTZCLEVBQU0zRCxPQUFPdDhCLEVBQUlYLEtBQUsrRixJQUFJcEYsRUFDaENvRixFQUFNNjZCLEVBQU0zRCxPQUFPdDhCLEVBQUlYLEtBQUt1RyxJQUFJNUYsR0FJNUJpZ0MsRUFBTTNELE9BQU9wOEIsRUFBSSxHQUVyQjBGLEdBQU9xNkIsRUFBTTNELE9BQU9wOEIsRUFBSWIsS0FBS3VHLElBQUkxRixFQUNqQ2tGLEdBQU82NkIsRUFBTTNELE9BQU9wOEIsRUFBSWIsS0FBSytGLElBQUlsRixJQUlqQzBGLEdBQU9xNkIsRUFBTTNELE9BQU9wOEIsRUFBSWIsS0FBSytGLElBQUlsRixFQUNqQ2tGLEdBQU82NkIsRUFBTTNELE9BQU9wOEIsRUFBSWIsS0FBS3VHLElBQUkxRixHQUk3QisvQixFQUFNM0QsT0FBTy83QixFQUFJLEdBRXJCcUYsR0FBT3E2QixFQUFNM0QsT0FBTy83QixFQUFJbEIsS0FBS3VHLElBQUlyRixFQUNqQzZFLEdBQU82NkIsRUFBTTNELE9BQU8vN0IsRUFBSWxCLEtBQUsrRixJQUFJN0UsSUFJakNxRixHQUFPcTZCLEVBQU0zRCxPQUFPLzdCLEVBQUlsQixLQUFLK0YsSUFBSTdFLEVBQ2pDNkUsR0FBTzY2QixFQUFNM0QsT0FBTy83QixFQUFJbEIsS0FBS3VHLElBQUlyRixHQUl6QnFGLElBQVNxNkIsRUFBTUMsVUFBWTk2QixJQUFTNjZCLEVBQU1DLFNBSXBEQyxtQkFBb0JDLEdBRW5CLEdBQUsvZ0MsS0FBS28vQixVQUVULE9BQU8sRUFLUnAvQixLQUFLcS9CLFVBQVcyQixJQUNoQkMsR0FBUzFjLFdBQVl2a0IsS0FBSytGLElBQUtpN0IsSUFHL0JFLEdBQU0zYyxXQUFZd2MsRUFBU25pQyxFQUFHb2lDLElBQzlCRyxHQUFNNWMsV0FBWXdjLEVBQVNsaUMsRUFBR21pQyxJQUM5QkksR0FBTTdjLFdBQVl3YyxFQUFTci9CLEVBQUdzL0IsSUFHOUJLLEdBQUk5YyxXQUFZNGMsR0FBT0QsSUFDdkJJLEdBQUkvYyxXQUFZNmMsR0FBT0QsSUFDdkJJLEdBQUloZCxXQUFZMmMsR0FBT0UsSUFLdkIsSUFBSUksRUFBTyxDQUNWLEdBQUtILEdBQUluZ0MsRUFBR21nQyxHQUFJeGdDLEVBQUcsR0FBS3lnQyxHQUFJcGdDLEVBQUdvZ0MsR0FBSXpnQyxFQUFHLEdBQUswZ0MsR0FBSXJnQyxFQUFHcWdDLEdBQUkxZ0MsRUFDdER3Z0MsR0FBSW5nQyxFQUFHLEdBQUttZ0MsR0FBSTFnQyxFQUFHMmdDLEdBQUlwZ0MsRUFBRyxHQUFLb2dDLEdBQUkzZ0MsRUFBRzRnQyxHQUFJcmdDLEVBQUcsR0FBS3FnQyxHQUFJNWdDLEdBQ3BEMGdDLEdBQUl4Z0MsRUFBR3dnQyxHQUFJMWdDLEVBQUcsR0FBSzJnQyxHQUFJemdDLEVBQUd5Z0MsR0FBSTNnQyxFQUFHLEdBQUs0Z0MsR0FBSTFnQyxFQUFHMGdDLEdBQUk1Z0MsRUFBRyxHQUV2RCxRQUFPOGdDLEdBQVlELEVBQU1OLEdBQU9DLEdBQU9DLEdBQU9ILE1BTzlDTyxFQUFPLENBQUUsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQzFCQyxHQUFZRCxFQUFNTixHQUFPQyxHQUFPQyxHQUFPSCxNQVE5Q1MsR0FBZ0J0RixhQUFjaUYsR0FBS0MsSUFDbkNFLEVBQU8sQ0FBRUUsR0FBZ0IvZ0MsRUFBRytnQyxHQUFnQjdnQyxFQUFHNmdDLEdBQWdCeGdDLEdBRXhEdWdDLEdBQVlELEVBQU1OLEdBQU9DLEdBQU9DLEdBQU9ILE1BSS9DUCxXQUFZbkIsRUFBTzljLEdBRWxCLE9BQU9BLEVBQU91QixLQUFNdWIsR0FBUW5jLE1BQU9wakIsS0FBS3VHLElBQUt2RyxLQUFLK0YsS0FJbkQ0N0IsZ0JBQWlCcEMsR0FJaEIsT0FGcUJULEdBQVU5YSxLQUFNdWIsR0FBUW5jLE1BQU9wakIsS0FBS3VHLElBQUt2RyxLQUFLK0YsS0FFL0N1ZSxJQUFLaWIsR0FBUXpnQyxTQUlsQzhpQyxrQkFBbUJuZixHQU1sQixPQUpBemlCLEtBQUtxL0IsVUFBVzVjLEVBQU9zRSxRQUV2QnRFLEVBQU90YyxPQUE4QyxHQUFyQ25HLEtBQUtzL0IsUUFBU1IsSUFBWWhnQyxTQUVuQzJqQixFQUlSb2YsVUFBVzFDLEdBUVYsT0FOQW4vQixLQUFLdUcsSUFBSVIsSUFBS281QixFQUFJNTRCLEtBQ2xCdkcsS0FBSytGLElBQUlRLElBQUs0NEIsRUFBSXA1QixLQUdiL0YsS0FBS28vQixXQUFZcC9CLEtBQUswK0IsWUFFcEIxK0IsS0FJUmtnQyxNQUFPZixHQUtOLE9BSEFuL0IsS0FBS3VHLElBQUlBLElBQUs0NEIsRUFBSTU0QixLQUNsQnZHLEtBQUsrRixJQUFJQSxJQUFLbzVCLEVBQUlwNUIsS0FFWC9GLEtBSVJxekIsYUFBY3BJLEdBR2IsT0FBS2pyQixLQUFLby9CLFlBR1YwQyxHQUFTLEdBQUluMUIsSUFBSzNNLEtBQUt1RyxJQUFJNUYsRUFBR1gsS0FBS3VHLElBQUkxRixFQUFHYixLQUFLdUcsSUFBSXJGLEdBQUlteUIsYUFBY3BJLEdBQ3JFNlcsR0FBUyxHQUFJbjFCLElBQUszTSxLQUFLdUcsSUFBSTVGLEVBQUdYLEtBQUt1RyxJQUFJMUYsRUFBR2IsS0FBSytGLElBQUk3RSxHQUFJbXlCLGFBQWNwSSxHQUNyRTZXLEdBQVMsR0FBSW4xQixJQUFLM00sS0FBS3VHLElBQUk1RixFQUFHWCxLQUFLK0YsSUFBSWxGLEVBQUdiLEtBQUt1RyxJQUFJckYsR0FBSW15QixhQUFjcEksR0FDckU2VyxHQUFTLEdBQUluMUIsSUFBSzNNLEtBQUt1RyxJQUFJNUYsRUFBR1gsS0FBSytGLElBQUlsRixFQUFHYixLQUFLK0YsSUFBSTdFLEdBQUlteUIsYUFBY3BJLEdBQ3JFNlcsR0FBUyxHQUFJbjFCLElBQUszTSxLQUFLK0YsSUFBSXBGLEVBQUdYLEtBQUt1RyxJQUFJMUYsRUFBR2IsS0FBS3VHLElBQUlyRixHQUFJbXlCLGFBQWNwSSxHQUNyRTZXLEdBQVMsR0FBSW4xQixJQUFLM00sS0FBSytGLElBQUlwRixFQUFHWCxLQUFLdUcsSUFBSTFGLEVBQUdiLEtBQUsrRixJQUFJN0UsR0FBSW15QixhQUFjcEksR0FDckU2VyxHQUFTLEdBQUluMUIsSUFBSzNNLEtBQUsrRixJQUFJcEYsRUFBR1gsS0FBSytGLElBQUlsRixFQUFHYixLQUFLdUcsSUFBSXJGLEdBQUlteUIsYUFBY3BJLEdBQ3JFNlcsR0FBUyxHQUFJbjFCLElBQUszTSxLQUFLK0YsSUFBSXBGLEVBQUdYLEtBQUsrRixJQUFJbEYsRUFBR2IsS0FBSytGLElBQUk3RSxHQUFJbXlCLGFBQWNwSSxHQUVyRWpyQixLQUFLdytCLGNBQWVzRCxLQVpTOWhDLEtBa0I5QndILFVBQVdnZixHQUtWLE9BSEF4bUIsS0FBS3VHLElBQUkwZCxJQUFLdUMsR0FDZHhtQixLQUFLK0YsSUFBSWtlLElBQUt1QyxHQUVQeG1CLEtBSVJzbUIsT0FBUTZZLEdBRVAsT0FBT0EsRUFBSTU0QixJQUFJK2YsT0FBUXRtQixLQUFLdUcsTUFBUzQ0QixFQUFJcDVCLElBQUl1Z0IsT0FBUXRtQixLQUFLK0YsTUFNNURnNEIsR0FBS3grQixVQUFVd2lDLFFBQVMsRUFFeEIsTUFBTUQsR0FBVSxDQUNELElBQUlqSCxHQUNKLElBQUlBLEdBQ0osSUFBSUEsR0FDSixJQUFJQSxHQUNKLElBQUlBLEdBQ0osSUFBSUEsR0FDSixJQUFJQSxHQUNKLElBQUlBLElBR2JpRSxHQUEwQixJQUFJakUsR0FFOUJvRixHQUF1QixJQUFJbEMsR0FJM0JtRCxHQUFzQixJQUFJckcsR0FDMUJzRyxHQUFzQixJQUFJdEcsR0FDMUJ1RyxHQUFzQixJQUFJdkcsR0FJMUJ3RyxHQUFvQixJQUFJeEcsR0FDeEJ5RyxHQUFvQixJQUFJekcsR0FDeEIwRyxHQUFvQixJQUFJMUcsR0FFeEJtRyxHQUF3QixJQUFJbkcsR0FDNUJvRyxHQUF5QixJQUFJcEcsR0FDN0I2RyxHQUFnQyxJQUFJN0csR0FDcENtSCxHQUEwQixJQUFJbkgsR0FFcEMsU0FBUzRHLEdBQVlELEVBQU1TLEVBQUk3YixFQUFJQyxFQUFJNmIsR0FFdEMsSUFBTSxJQUFJcGhDLEVBQUksRUFBR0UsRUFBSXdnQyxFQUFLMWlDLE9BQVMsRUFBR2dDLEdBQUtFLEVBQUdGLEdBQUssRUFBSSxDQUV0RGtoQyxHQUFVemIsVUFBV2liLEVBQU0xZ0MsR0FFM0IsTUFBTTBDLEVBQUkwK0IsRUFBUXZoQyxFQUFJZCxLQUFLMlIsSUFBS3d3QixHQUFVcmhDLEdBQU11aEMsRUFBUXJoQyxFQUFJaEIsS0FBSzJSLElBQUt3d0IsR0FBVW5oQyxHQUFNcWhDLEVBQVFoaEMsRUFBSXJCLEtBQUsyUixJQUFLd3dCLEdBQVU5Z0MsR0FFaEhpaEMsRUFBS0YsRUFBRzVjLElBQUsyYyxJQUNiSSxFQUFLaGMsRUFBR2YsSUFBSzJjLElBQ2JLLEVBQUtoYyxFQUFHaEIsSUFBSzJjLElBRW5CLEdBQUtuaUMsS0FBS2tHLEtBQU9sRyxLQUFLa0csSUFBS284QixFQUFJQyxFQUFJQyxHQUFNeGlDLEtBQUswRyxJQUFLNDdCLEVBQUlDLEVBQUlDLElBQVM3K0IsRUFJbkUsT0FBTyxFQU1ULE9BQU8sRUFJUixNQUFNOCtCLEdBQXVCLElBQUl2RSxHQUMzQndFLEdBQXNCLElBQUkxSCxHQUMxQjJILEdBQWlDLElBQUkzSCxHQUNyQzRILEdBQXlCLElBQUk1SCxHQUVuQyxNQUFNNkgsR0FFTC81QixZQUFhb2UsRUFBUyxJQUFJOFQsR0FBVzEwQixHQUFTLEdBRTdDbkcsS0FBSyttQixPQUFTQSxFQUNkL21CLEtBQUttRyxPQUFTQSxFQUlmd0csSUFBS29hLEVBQVE1Z0IsR0FLWixPQUhBbkcsS0FBSyttQixPQUFPL0MsS0FBTStDLEdBQ2xCL21CLEtBQUttRyxPQUFTQSxFQUVQbkcsS0FJUncrQixjQUFlQyxFQUFRa0UsR0FFdEIsTUFBTTViLEVBQVMvbUIsS0FBSyttQixZQUVJdkgsSUFBbkJtakIsRUFFSjViLEVBQU8vQyxLQUFNMmUsR0FJYkwsR0FBTzlELGNBQWVDLEdBQVNZLFVBQVd0WSxHQUkzQyxJQUFJNmIsRUFBYyxFQUVsQixJQUFNLElBQUk5aEMsRUFBSSxFQUFHaTFCLEVBQUswSSxFQUFPMy9CLE9BQVFnQyxFQUFJaTFCLEVBQUlqMUIsSUFFNUM4aEMsRUFBYy9pQyxLQUFLa0csSUFBSzY4QixFQUFhN2IsRUFBT2pCLGtCQUFtQjJZLEVBQVEzOUIsS0FNeEUsT0FGQWQsS0FBS21HLE9BQVN0RyxLQUFLMmxCLEtBQU1vZCxHQUVsQjVpQyxLQUlSZ2tCLEtBQU15YyxHQUtMLE9BSEF6Z0MsS0FBSyttQixPQUFPL0MsS0FBTXljLEVBQU8xWixRQUN6Qi9tQixLQUFLbUcsT0FBU3M2QixFQUFPdDZCLE9BRWRuRyxLQUlSby9CLFVBRUMsT0FBU3AvQixLQUFLbUcsT0FBUyxFQUl4QnU0QixZQUtDLE9BSEExK0IsS0FBSyttQixPQUFPcGEsSUFBSyxFQUFHLEVBQUcsR0FDdkIzTSxLQUFLbUcsUUFBVyxFQUVUbkcsS0FJUm9nQyxjQUFlYixHQUVkLE9BQVNBLEVBQU16WixrQkFBbUI5bEIsS0FBSyttQixTQUFjL21CLEtBQUttRyxPQUFTbkcsS0FBS21HLE9BSXpFdzdCLGdCQUFpQnBDLEdBRWhCLE9BQVNBLEVBQU0xWixXQUFZN2xCLEtBQUsrbUIsUUFBVy9tQixLQUFLbUcsT0FJakRxNkIsaUJBQWtCQyxHQUVqQixNQUFNb0MsRUFBWTdpQyxLQUFLbUcsT0FBU3M2QixFQUFPdDZCLE9BRXZDLE9BQU9zNkIsRUFBTzFaLE9BQU9qQixrQkFBbUI5bEIsS0FBSyttQixTQUFjOGIsRUFBWUEsRUFJeEV0QyxjQUFlcEIsR0FFZCxPQUFPQSxFQUFJcUIsaUJBQWtCeGdDLE1BSTlCMmdDLGdCQUFpQkMsR0FFaEIsT0FBTy9nQyxLQUFLMlIsSUFBS292QixFQUFNZSxnQkFBaUIzaEMsS0FBSyttQixVQUFjL21CLEtBQUttRyxPQUlqRXU2QixXQUFZbkIsRUFBTzljLEdBRWxCLE1BQU1xZ0IsRUFBZ0I5aUMsS0FBSyttQixPQUFPakIsa0JBQW1CeVosR0FXckQsT0FUQTljLEVBQU91QixLQUFNdWIsR0FFUnVELEVBQWtCOWlDLEtBQUttRyxPQUFTbkcsS0FBS21HLFNBRXpDc2MsRUFBTzZCLElBQUt0a0IsS0FBSyttQixRQUFTckIsWUFDMUJqRCxFQUFPaUMsZUFBZ0Ixa0IsS0FBS21HLFFBQVM4ZCxJQUFLamtCLEtBQUsrbUIsU0FJekN0RSxFQUlSc2dCLGVBQWdCdGdCLEdBRWYsT0FBS3ppQixLQUFLby9CLFdBR1QzYyxFQUFPaWMsWUFDQWpjLElBSVJBLEVBQU85VixJQUFLM00sS0FBSyttQixPQUFRL21CLEtBQUsrbUIsUUFDOUJ0RSxFQUFPaWQsZUFBZ0IxL0IsS0FBS21HLFFBRXJCc2MsR0FJUjRRLGFBQWNwSSxHQUtiLE9BSEFqckIsS0FBSyttQixPQUFPc00sYUFBY3BJLEdBQzFCanJCLEtBQUttRyxPQUFTbkcsS0FBS21HLE9BQVM4a0IsRUFBTytYLG9CQUU1QmhqQyxLQUlSd0gsVUFBV2dmLEdBSVYsT0FGQXhtQixLQUFLK21CLE9BQU85QyxJQUFLdUMsR0FFVnhtQixLQUlSMitCLGNBQWVZLEdBSWRrRCxHQUFTbGUsV0FBWWdiLEVBQU92L0IsS0FBSyttQixRQUVqQyxNQUFNeEIsRUFBV2tkLEdBQVNsZCxXQUUxQixHQUFLQSxFQUFhdmxCLEtBQUttRyxPQUFTbkcsS0FBS21HLE9BQVcsQ0FFL0MsTUFBTXJILEVBQVNlLEtBQUsybEIsS0FBTUQsR0FDcEIwZCxFQUErQyxJQUF6Qm5rQyxFQUFTa0IsS0FBS21HLFFBTTFDbkcsS0FBSyttQixPQUFPOUMsSUFBS3dlLEdBQVMvZCxlQUFnQnVlLEVBQW9CbmtDLElBQzlEa0IsS0FBS21HLFFBQVU4OEIsRUFJaEIsT0FBT2pqQyxLQUlSa2dDLE1BQU9PLEdBc0JOLE9BZDhDLElBQXhDemdDLEtBQUsrbUIsT0FBT1QsT0FBUW1hLEVBQU8xWixRQUUvQnliLEdBQWlCNzFCLElBQUssRUFBRyxFQUFHLEdBQUkrWCxlQUFnQitiLEVBQU90NkIsUUFLeERxOEIsR0FBaUJqZSxXQUFZa2MsRUFBTzFaLE9BQVEvbUIsS0FBSyttQixRQUFTckIsWUFBWWhCLGVBQWdCK2IsRUFBT3Q2QixRQUk5Rm5HLEtBQUsyK0IsY0FBZTRELEdBQU12ZSxLQUFNeWMsRUFBTzFaLFFBQVM5QyxJQUFLdWUsS0FDckR4aUMsS0FBSzIrQixjQUFlNEQsR0FBTXZlLEtBQU15YyxFQUFPMVosUUFBU3pDLElBQUtrZSxLQUU5Q3hpQyxLQUlSc21CLE9BQVFtYSxHQUVQLE9BQU9BLEVBQU8xWixPQUFPVCxPQUFRdG1CLEtBQUsrbUIsU0FBYzBaLEVBQU90NkIsU0FBV25HLEtBQUttRyxPQUl4RTRkLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjcWIsS0FBTWhrQixPQU10QyxNQUFNa2pDLEdBQTBCLElBQUlySSxHQUM5QnNJLEdBQTJCLElBQUl0SSxHQUMvQnVJLEdBQXdCLElBQUl2SSxHQUM1QndJLEdBQXNCLElBQUl4SSxHQUUxQnlJLEdBQXVCLElBQUl6SSxHQUMzQjBJLEdBQXVCLElBQUkxSSxHQUMzQjJJLEdBQTBCLElBQUkzSSxHQUVwQyxNQUFNNEksR0FFTDk2QixZQUFhKzZCLEVBQVMsSUFBSTdJLEdBQVc4SSxFQUFZLElBQUk5SSxHQUFTLEVBQUcsR0FBSyxJQUVyRTc2QixLQUFLMGpDLE9BQVNBLEVBQ2QxakMsS0FBSzJqQyxVQUFZQSxFQUlsQmgzQixJQUFLKzJCLEVBQVFDLEdBS1osT0FIQTNqQyxLQUFLMGpDLE9BQU8xZixLQUFNMGYsR0FDbEIxakMsS0FBSzJqQyxVQUFVM2YsS0FBTTJmLEdBRWQzakMsS0FJUmdrQixLQUFNNGYsR0FLTCxPQUhBNWpDLEtBQUswakMsT0FBTzFmLEtBQU00ZixFQUFJRixRQUN0QjFqQyxLQUFLMmpDLFVBQVUzZixLQUFNNGYsRUFBSUQsV0FFbEIzakMsS0FJUjZqQyxHQUFJOWpDLEVBQUcwaUIsR0FFTixPQUFPQSxFQUFPdUIsS0FBTWhrQixLQUFLMmpDLFdBQVlqZixlQUFnQjNrQixHQUFJa2tCLElBQUtqa0IsS0FBSzBqQyxRQUlwRUksT0FBUTdqQyxHQUlQLE9BRkFELEtBQUsyakMsVUFBVTNmLEtBQU0vakIsR0FBSXFrQixJQUFLdGtCLEtBQUswakMsUUFBU2hlLFlBRXJDMWxCLEtBSVIrakMsT0FBUWhrQyxHQUlQLE9BRkFDLEtBQUswakMsT0FBTzFmLEtBQU1oa0IsS0FBSzZqQyxHQUFJOWpDLEVBQUdtakMsS0FFdkJsakMsS0FJUmdrQyxvQkFBcUJ6RSxFQUFPOWMsR0FFM0JBLEVBQU84QixXQUFZZ2IsRUFBT3YvQixLQUFLMGpDLFFBRS9CLE1BQU1PLEVBQW9CeGhCLEVBQU80QyxJQUFLcmxCLEtBQUsyakMsV0FFM0MsT0FBS00sRUFBb0IsRUFFakJ4aEIsRUFBT3VCLEtBQU1oa0IsS0FBSzBqQyxRQUluQmpoQixFQUFPdUIsS0FBTWhrQixLQUFLMmpDLFdBQVlqZixlQUFnQnVmLEdBQW9CaGdCLElBQUtqa0IsS0FBSzBqQyxRQUlwRi9CLGdCQUFpQnBDLEdBRWhCLE9BQU8xL0IsS0FBSzJsQixLQUFNeGxCLEtBQUtra0Msa0JBQW1CM0UsSUFJM0MyRSxrQkFBbUIzRSxHQUVsQixNQUFNMEUsRUFBb0JmLEdBQVUzZSxXQUFZZ2IsRUFBT3YvQixLQUFLMGpDLFFBQVNyZSxJQUFLcmxCLEtBQUsyakMsV0FJL0UsT0FBS00sRUFBb0IsRUFFakJqa0MsS0FBSzBqQyxPQUFPNWQsa0JBQW1CeVosSUFJdkMyRCxHQUFVbGYsS0FBTWhrQixLQUFLMmpDLFdBQVlqZixlQUFnQnVmLEdBQW9CaGdCLElBQUtqa0IsS0FBSzBqQyxRQUV4RVIsR0FBVXBkLGtCQUFtQnlaLElBSXJDNEUsb0JBQXFCbEMsRUFBSTdiLEVBQUlnZSxFQUFvQkMsR0FTaERsQixHQUFXbmYsS0FBTWllLEdBQUtoZSxJQUFLbUMsR0FBSzFCLGVBQWdCLElBQ2hEMGUsR0FBUXBmLEtBQU1vQyxHQUFLOUIsSUFBSzJkLEdBQUt2YyxZQUM3QjJkLEdBQU1yZixLQUFNaGtCLEtBQUswakMsUUFBU3BmLElBQUs2ZSxJQUUvQixNQUFNbUIsRUFBa0MsR0FBdEJyQyxFQUFHcGMsV0FBWU8sR0FDM0JtZSxHQUFRdmtDLEtBQUsyakMsVUFBVXRlLElBQUsrZCxJQUM1Qm9CLEVBQUtuQixHQUFNaGUsSUFBS3JsQixLQUFLMmpDLFdBQ3JCYyxHQUFPcEIsR0FBTWhlLElBQUsrZCxJQUNsQjFoQyxFQUFJMmhDLEdBQU05ZCxXQUNWMEUsRUFBTXBxQixLQUFLMlIsSUFBSyxFQUFJK3lCLEVBQU1BLEdBQ2hDLElBQUlHLEVBQUlwTSxFQUFJcU0sRUFBU0MsRUFFckIsR0FBSzNhLEVBQU0sRUFRVixHQUpBeWEsRUFBS0gsRUFBTUUsRUFBS0QsRUFDaEJsTSxFQUFLaU0sRUFBTUMsRUFBS0MsRUFDaEJHLEVBQVNOLEVBQVlyYSxFQUVoQnlhLEdBQU0sRUFFVixHQUFLcE0sSUFBUXNNLEVBRVosR0FBS3RNLEdBQU1zTSxFQUFTLENBS25CLE1BQU1DLEVBQVMsRUFBSTVhLEVBQ25CeWEsR0FBTUcsRUFDTnZNLEdBQU11TSxFQUNORixFQUFVRCxHQUFPQSxFQUFLSCxFQUFNak0sRUFBSyxFQUFJa00sR0FBT2xNLEdBQU9pTSxFQUFNRyxFQUFLcE0sRUFBSyxFQUFJbU0sR0FBTy9pQyxPQU05RTQyQixFQUFLZ00sRUFDTEksRUFBSzdrQyxLQUFLa0csSUFBSyxJQUFPdytCLEVBQU1qTSxFQUFLa00sSUFDakNHLEdBQVlELEVBQUtBLEVBQUtwTSxHQUFPQSxFQUFLLEVBQUltTSxHQUFPL2lDLE9BUTlDNDJCLEdBQU9nTSxFQUNQSSxFQUFLN2tDLEtBQUtrRyxJQUFLLElBQU93K0IsRUFBTWpNLEVBQUtrTSxJQUNqQ0csR0FBWUQsRUFBS0EsRUFBS3BNLEdBQU9BLEVBQUssRUFBSW1NLEdBQU8vaUMsT0FNekM0MkIsSUFBUXNNLEdBSVpGLEVBQUs3a0MsS0FBS2tHLElBQUssS0FBU3crQixFQUFNRCxFQUFZRSxJQUMxQ2xNLEVBQU9vTSxFQUFLLEdBQVFKLEVBQVl6a0MsS0FBSzBHLElBQUsxRyxLQUFLa0csS0FBT3UrQixHQUFhRyxHQUFNSCxHQUN6RUssR0FBWUQsRUFBS0EsRUFBS3BNLEdBQU9BLEVBQUssRUFBSW1NLEdBQU8vaUMsR0FFbEM0MkIsR0FBTXNNLEdBSWpCRixFQUFLLEVBQ0xwTSxFQUFLejRCLEtBQUswRyxJQUFLMUcsS0FBS2tHLEtBQU91K0IsR0FBYUcsR0FBTUgsR0FDOUNLLEVBQVVyTSxHQUFPQSxFQUFLLEVBQUltTSxHQUFPL2lDLElBTWpDZ2pDLEVBQUs3a0MsS0FBS2tHLElBQUssSUFBT3crQixFQUFNRCxFQUFZRSxJQUN4Q2xNLEVBQU9vTSxFQUFLLEVBQU1KLEVBQVl6a0MsS0FBSzBHLElBQUsxRyxLQUFLa0csS0FBT3UrQixHQUFhRyxHQUFNSCxHQUN2RUssR0FBWUQsRUFBS0EsRUFBS3BNLEdBQU9BLEVBQUssRUFBSW1NLEdBQU8vaUMsUUFVL0M0MkIsRUFBT2lNLEVBQU0sR0FBUUQsRUFBWUEsRUFDakNJLEVBQUs3a0MsS0FBS2tHLElBQUssSUFBT3crQixFQUFNak0sRUFBS2tNLElBQ2pDRyxHQUFZRCxFQUFLQSxFQUFLcE0sR0FBT0EsRUFBSyxFQUFJbU0sR0FBTy9pQyxFQWdCOUMsT0FaSzBpQyxHQUVKQSxFQUFtQnBnQixLQUFNaGtCLEtBQUsyakMsV0FBWWpmLGVBQWdCZ2dCLEdBQUt6Z0IsSUFBS2prQixLQUFLMGpDLFFBSXJFVyxHQUVKQSxFQUF1QnJnQixLQUFNb2YsSUFBVTFlLGVBQWdCNFQsR0FBS3JVLElBQUtrZixJQUkzRHdCLEVBSVJHLGdCQUFpQnJFLEVBQVFoZSxHQUV4QnlnQixHQUFVM2UsV0FBWWtjLEVBQU8xWixPQUFRL21CLEtBQUswakMsUUFDMUMsTUFBTXFCLEVBQU03QixHQUFVN2QsSUFBS3JsQixLQUFLMmpDLFdBQzFCMWdCLEVBQUtpZ0IsR0FBVTdkLElBQUs2ZCxJQUFjNkIsRUFBTUEsRUFDeENDLEVBQVV2RSxFQUFPdDZCLE9BQVNzNkIsRUFBT3Q2QixPQUV2QyxHQUFLOGMsRUFBSytoQixFQUFVLE9BQU8sS0FFM0IsTUFBTUMsRUFBTXBsQyxLQUFLMmxCLEtBQU13ZixFQUFVL2hCLEdBRzNCaWlCLEVBQUtILEVBQU1FLEVBR1hFLEVBQUtKLEVBQU1FLEVBR2pCLE9BQUtDLEVBQUssR0FBS0MsRUFBSyxFQUFXLEtBSzFCRCxFQUFLLEVBQVdsbEMsS0FBSzZqQyxHQUFJc0IsRUFBSTFpQixHQUczQnppQixLQUFLNmpDLEdBQUlxQixFQUFJemlCLEdBSXJCK2QsaUJBQWtCQyxHQUVqQixPQUFPemdDLEtBQUtra0Msa0JBQW1CekQsRUFBTzFaLFNBQWMwWixFQUFPdDZCLE9BQVNzNkIsRUFBT3Q2QixPQUk1RWkvQixnQkFBaUJ4RSxHQUVoQixNQUFNaEUsRUFBY2dFLEVBQU0zRCxPQUFPNVgsSUFBS3JsQixLQUFLMmpDLFdBRTNDLEdBQXFCLElBQWhCL0csRUFHSixPQUE4QyxJQUF6Q2dFLEVBQU1lLGdCQUFpQjNoQyxLQUFLMGpDLFFBRXpCLEVBTUQsS0FJUixNQUFNM2pDLElBQVFDLEtBQUswakMsT0FBT3JlLElBQUt1YixFQUFNM0QsUUFBVzJELEVBQU1DLFVBQWFqRSxFQUluRSxPQUFPNzhCLEdBQUssRUFBSUEsRUFBSSxLQUlyQnNsQyxlQUFnQnpFLEVBQU9uZSxHQUV0QixNQUFNMWlCLEVBQUlDLEtBQUtvbEMsZ0JBQWlCeEUsR0FFaEMsT0FBVyxPQUFON2dDLEVBRUcsS0FJREMsS0FBSzZqQyxHQUFJOWpDLEVBQUcwaUIsR0FJcEJrZSxnQkFBaUJDLEdBSWhCLE1BQU0wRSxFQUFjMUUsRUFBTWUsZ0JBQWlCM2hDLEtBQUswakMsUUFFaEQsT0FBcUIsSUFBaEI0QixHQU1lMUUsRUFBTTNELE9BQU81WCxJQUFLcmxCLEtBQUsyakMsV0FFeEIyQixFQUFjLEVBWWxDQyxhQUFjcEcsRUFBSzFjLEdBRWxCLElBQUkraUIsRUFBTUMsRUFBTUMsRUFBT0MsRUFBT0MsRUFBT0MsRUFFckMsTUFBTUMsRUFBVSxFQUFJOWxDLEtBQUsyakMsVUFBVWhqQyxFQUNsQ29sQyxFQUFVLEVBQUkvbEMsS0FBSzJqQyxVQUFVOWlDLEVBQzdCbWxDLEVBQVUsRUFBSWhtQyxLQUFLMmpDLFVBQVV6aUMsRUFFeEJ3aUMsRUFBUzFqQyxLQUFLMGpDLE9BMEJwQixPQXhCS29DLEdBQVcsR0FFZk4sR0FBU3JHLEVBQUk1NEIsSUFBSTVGLEVBQUkraUMsRUFBTy9pQyxHQUFNbWxDLEVBQ2xDTCxHQUFTdEcsRUFBSXA1QixJQUFJcEYsRUFBSStpQyxFQUFPL2lDLEdBQU1tbEMsSUFJbENOLEdBQVNyRyxFQUFJcDVCLElBQUlwRixFQUFJK2lDLEVBQU8vaUMsR0FBTW1sQyxFQUNsQ0wsR0FBU3RHLEVBQUk1NEIsSUFBSTVGLEVBQUkraUMsRUFBTy9pQyxHQUFNbWxDLEdBSTlCQyxHQUFXLEdBRWZMLEdBQVV2RyxFQUFJNTRCLElBQUkxRixFQUFJNmlDLEVBQU83aUMsR0FBTWtsQyxFQUNuQ0osR0FBVXhHLEVBQUlwNUIsSUFBSWxGLEVBQUk2aUMsRUFBTzdpQyxHQUFNa2xDLElBSW5DTCxHQUFVdkcsRUFBSXA1QixJQUFJbEYsRUFBSTZpQyxFQUFPN2lDLEdBQU1rbEMsRUFDbkNKLEdBQVV4RyxFQUFJNTRCLElBQUkxRixFQUFJNmlDLEVBQU83aUMsR0FBTWtsQyxHQUk3QlAsRUFBT0csR0FBYUQsRUFBUUQsRUFBZ0IsT0FLOUNDLEVBQVFGLEdBQVFBLEdBQVNBLEtBQU9BLEVBQU9FLElBRXZDQyxFQUFRRixHQUFRQSxHQUFTQSxLQUFPQSxFQUFPRSxHQUV2Q0ssR0FBVyxHQUVmSixHQUFVekcsRUFBSTU0QixJQUFJckYsRUFBSXdpQyxFQUFPeGlDLEdBQU04a0MsRUFDbkNILEdBQVUxRyxFQUFJcDVCLElBQUk3RSxFQUFJd2lDLEVBQU94aUMsR0FBTThrQyxJQUluQ0osR0FBVXpHLEVBQUlwNUIsSUFBSTdFLEVBQUl3aUMsRUFBT3hpQyxHQUFNOGtDLEVBQ25DSCxHQUFVMUcsRUFBSTU0QixJQUFJckYsRUFBSXdpQyxFQUFPeGlDLEdBQU04a0MsR0FJN0JSLEVBQU9LLEdBQWFELEVBQVFILEVBQWdCLE9BRTlDRyxFQUFRSixHQUFRQSxHQUFTQSxLQUFPQSxFQUFPSSxJQUV2Q0MsRUFBUUosR0FBUUEsR0FBU0EsS0FBT0EsRUFBT0ksR0FJdkNKLEVBQU8sRUFBVyxLQUVoQnpsQyxLQUFLNmpDLEdBQUkyQixHQUFRLEVBQUlBLEVBQU9DLEVBQU1oakIsS0FJMUM4ZCxjQUFlcEIsR0FFZCxPQUErQyxPQUF4Q24vQixLQUFLdWxDLGFBQWNwRyxFQUFLK0QsSUFJaEMrQyxrQkFBbUJybkMsRUFBR0MsRUFBRzZDLEVBQUd3a0MsRUFBaUJ6akIsR0FNNUM2Z0IsR0FBTy9lLFdBQVkxbEIsRUFBR0QsR0FDdEIya0MsR0FBT2hmLFdBQVk3aUIsRUFBRzlDLEdBQ3RCNGtDLEdBQVVwSCxhQUFja0gsR0FBUUMsSUFPaEMsSUFDSTRDLEVBREFDLEVBQU1wbUMsS0FBSzJqQyxVQUFVdGUsSUFBS21lLElBRzlCLEdBQUs0QyxFQUFNLEVBQUksQ0FFZCxHQUFLRixFQUFrQixPQUFPLEtBQzlCQyxFQUFPLE1BRUQsTUFBS0MsRUFBTSxHQU9qQixPQUFPLEtBTFBELEdBQVMsRUFDVEMsR0FBUUEsRUFRVC9DLEdBQU05ZSxXQUFZdmtCLEtBQUswakMsT0FBUTlrQyxHQUMvQixNQUFNeW5DLEVBQVNGLEVBQU9ubUMsS0FBSzJqQyxVQUFVdGUsSUFBS2tlLEdBQU9uSCxhQUFjaUgsR0FBT0UsS0FHdEUsR0FBSzhDLEVBQVMsRUFFYixPQUFPLEtBSVIsTUFBTUMsRUFBU0gsRUFBT25tQyxLQUFLMmpDLFVBQVV0ZSxJQUFLaWUsR0FBT2hlLE1BQU8rZCxLQUd4RCxHQUFLaUQsRUFBUyxFQUViLE9BQU8sS0FLUixHQUFLRCxFQUFTQyxFQUFTRixFQUV0QixPQUFPLEtBS1IsTUFBTUcsR0FBUUosRUFBTzlDLEdBQU1oZSxJQUFLbWUsSUFHaEMsT0FBSytDLEVBQU0sRUFFSCxLQUtEdm1DLEtBQUs2akMsR0FBSTBDLEVBQU1ILEVBQUszakIsR0FJNUI0USxhQUFjL0ksR0FLYixPQUhBdHFCLEtBQUswakMsT0FBT3JRLGFBQWMvSSxHQUMxQnRxQixLQUFLMmpDLFVBQVV4SCxtQkFBb0I3UixHQUU1QnRxQixLQUlSc21CLE9BQVFzZCxHQUVQLE9BQU9BLEVBQUlGLE9BQU9wZCxPQUFRdG1CLEtBQUswakMsU0FBWUUsRUFBSUQsVUFBVXJkLE9BQVF0bUIsS0FBSzJqQyxXQUl2RTVmLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjcWIsS0FBTWhrQixPQU10QyxNQUFNd21DLEdBRUw3OUIsY0FFQzNJLEtBQUs4a0IsU0FBVyxDQUVmLEVBQUcsRUFBRyxFQUFHLEVBQ1QsRUFBRyxFQUFHLEVBQUcsRUFDVCxFQUFHLEVBQUcsRUFBRyxFQUNULEVBQUcsRUFBRyxFQUFHLEdBSUwvZ0IsVUFBVWpGLE9BQVMsR0FFdkI2RCxRQUFRQyxNQUFPLGlGQU1qQitKLElBQUt5YSxFQUFLQyxFQUFLQyxFQUFLbWYsRUFBS2xmLEVBQUtDLEVBQUtDLEVBQUtpZixFQUFLaGYsRUFBS0MsRUFBS0MsRUFBSytlLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEdBRS9FLE1BQU1sZixFQUFLN25CLEtBQUs4a0IsU0FPaEIsT0FMQStDLEVBQUksR0FBTVQsRUFBS1MsRUFBSSxHQUFNUixFQUFLUSxFQUFJLEdBQU1QLEVBQUtPLEVBQUksSUFBTzRlLEVBQ3hENWUsRUFBSSxHQUFNTixFQUFLTSxFQUFJLEdBQU1MLEVBQUtLLEVBQUksR0FBTUosRUFBS0ksRUFBSSxJQUFPNmUsRUFDeEQ3ZSxFQUFJLEdBQU1ILEVBQUtHLEVBQUksR0FBTUYsRUFBS0UsRUFBSSxJQUFPRCxFQUFLQyxFQUFJLElBQU84ZSxFQUN6RDllLEVBQUksR0FBTStlLEVBQUsvZSxFQUFJLEdBQU1nZixFQUFLaGYsRUFBSSxJQUFPaWYsRUFBS2pmLEVBQUksSUFBT2tmLEVBRWxEL21DLEtBSVI4bkIsV0FXQyxPQVRBOW5CLEtBQUsyTSxJQUVKLEVBQUcsRUFBRyxFQUFHLEVBQ1QsRUFBRyxFQUFHLEVBQUcsRUFDVCxFQUFHLEVBQUcsRUFBRyxFQUNULEVBQUcsRUFBRyxFQUFHLEdBSUgzTSxLQUlSK2pCLFFBRUMsT0FBTyxJQUFJeWlCLElBQVVqZ0IsVUFBV3ZtQixLQUFLOGtCLFVBSXRDZCxLQUFNL2lCLEdBRUwsTUFBTTRtQixFQUFLN25CLEtBQUs4a0IsU0FDVmlELEVBQUs5bUIsRUFBRTZqQixTQU9iLE9BTEErQyxFQUFJLEdBQU1FLEVBQUksR0FBS0YsRUFBSSxHQUFNRSxFQUFJLEdBQUtGLEVBQUksR0FBTUUsRUFBSSxHQUFLRixFQUFJLEdBQU1FLEVBQUksR0FDdkVGLEVBQUksR0FBTUUsRUFBSSxHQUFLRixFQUFJLEdBQU1FLEVBQUksR0FBS0YsRUFBSSxHQUFNRSxFQUFJLEdBQUtGLEVBQUksR0FBTUUsRUFBSSxHQUN2RUYsRUFBSSxHQUFNRSxFQUFJLEdBQUtGLEVBQUksR0FBTUUsRUFBSSxHQUFLRixFQUFJLElBQU9FLEVBQUksSUFBTUYsRUFBSSxJQUFPRSxFQUFJLElBQzFFRixFQUFJLElBQU9FLEVBQUksSUFBTUYsRUFBSSxJQUFPRSxFQUFJLElBQU1GLEVBQUksSUFBT0UsRUFBSSxJQUFNRixFQUFJLElBQU9FLEVBQUksSUFFdkUvbkIsS0FJUmduQyxhQUFjL2xDLEdBRWIsTUFBTTRtQixFQUFLN25CLEtBQUs4a0IsU0FBVWlELEVBQUs5bUIsRUFBRTZqQixTQU1qQyxPQUpBK0MsRUFBSSxJQUFPRSxFQUFJLElBQ2ZGLEVBQUksSUFBT0UsRUFBSSxJQUNmRixFQUFJLElBQU9FLEVBQUksSUFFUi9uQixLQUlSaW5DLGVBQWdCaG1DLEdBRWYsTUFBTThtQixFQUFLOW1CLEVBQUU2akIsU0FXYixPQVRBOWtCLEtBQUsyTSxJQUVKb2IsRUFBSSxHQUFLQSxFQUFJLEdBQUtBLEVBQUksR0FBSyxFQUMzQkEsRUFBSSxHQUFLQSxFQUFJLEdBQUtBLEVBQUksR0FBSyxFQUMzQkEsRUFBSSxHQUFLQSxFQUFJLEdBQUtBLEVBQUksR0FBSyxFQUMzQixFQUFHLEVBQUcsRUFBRyxHQUlIL25CLEtBSVJnb0IsYUFBY0MsRUFBT0MsRUFBT0MsR0FNM0IsT0FKQUYsRUFBTTBWLG9CQUFxQjM5QixLQUFNLEdBQ2pDa29CLEVBQU15VixvQkFBcUIzOUIsS0FBTSxHQUNqQ21vQixFQUFNd1Ysb0JBQXFCMzlCLEtBQU0sR0FFMUJBLEtBSVJrbkMsVUFBV2pmLEVBQU9DLEVBQU9DLEdBU3hCLE9BUEFub0IsS0FBSzJNLElBQ0pzYixFQUFNdG5CLEVBQUd1bkIsRUFBTXZuQixFQUFHd25CLEVBQU14bkIsRUFBRyxFQUMzQnNuQixFQUFNcG5CLEVBQUdxbkIsRUFBTXJuQixFQUFHc25CLEVBQU10bkIsRUFBRyxFQUMzQm9uQixFQUFNL21CLEVBQUdnbkIsRUFBTWhuQixFQUFHaW5CLEVBQU1qbkIsRUFBRyxFQUMzQixFQUFHLEVBQUcsRUFBRyxHQUdIbEIsS0FJUm1uQyxnQkFBaUJsbUMsR0FJaEIsTUFBTTRtQixFQUFLN25CLEtBQUs4a0IsU0FDVmlELEVBQUs5bUIsRUFBRTZqQixTQUVQc2lCLEVBQVMsRUFBSUMsR0FBTTFKLG9CQUFxQjE4QixFQUFHLEdBQUluQyxTQUMvQ3dvQyxFQUFTLEVBQUlELEdBQU0xSixvQkFBcUIxOEIsRUFBRyxHQUFJbkMsU0FDL0N5b0MsRUFBUyxFQUFJRixHQUFNMUosb0JBQXFCMThCLEVBQUcsR0FBSW5DLFNBc0JyRCxPQXBCQStvQixFQUFJLEdBQU1FLEVBQUksR0FBTXFmLEVBQ3BCdmYsRUFBSSxHQUFNRSxFQUFJLEdBQU1xZixFQUNwQnZmLEVBQUksR0FBTUUsRUFBSSxHQUFNcWYsRUFDcEJ2ZixFQUFJLEdBQU0sRUFFVkEsRUFBSSxHQUFNRSxFQUFJLEdBQU11ZixFQUNwQnpmLEVBQUksR0FBTUUsRUFBSSxHQUFNdWYsRUFDcEJ6ZixFQUFJLEdBQU1FLEVBQUksR0FBTXVmLEVBQ3BCemYsRUFBSSxHQUFNLEVBRVZBLEVBQUksR0FBTUUsRUFBSSxHQUFNd2YsRUFDcEIxZixFQUFJLEdBQU1FLEVBQUksR0FBTXdmLEVBQ3BCMWYsRUFBSSxJQUFPRSxFQUFJLElBQU93ZixFQUN0QjFmLEVBQUksSUFBTyxFQUVYQSxFQUFJLElBQU8sRUFDWEEsRUFBSSxJQUFPLEVBQ1hBLEVBQUksSUFBTyxFQUNYQSxFQUFJLElBQU8sRUFFSjduQixLQUlSd25DLHNCQUF1QjFQLEdBRWJBLEdBQVNBLEVBQU1FLFNBRXZCcjFCLFFBQVFDLE1BQU8seUdBSWhCLE1BQU1pbEIsRUFBSzduQixLQUFLOGtCLFNBRVZua0IsRUFBSW0zQixFQUFNbjNCLEVBQUdFLEVBQUlpM0IsRUFBTWozQixFQUFHSyxFQUFJNDJCLEVBQU01MkIsRUFDcEN0QyxFQUFJaUIsS0FBS21uQixJQUFLcm1CLEdBQUs5QixFQUFJZ0IsS0FBS29uQixJQUFLdG1CLEdBQ2pDZSxFQUFJN0IsS0FBS21uQixJQUFLbm1CLEdBQUt5QixFQUFJekMsS0FBS29uQixJQUFLcG1CLEdBQ2pDeEIsRUFBSVEsS0FBS21uQixJQUFLOWxCLEdBQUtmLEVBQUlOLEtBQUtvbkIsSUFBSy9sQixHQUV2QyxHQUFxQixRQUFoQjQyQixFQUFNRyxNQUFrQixDQUU1QixNQUFNelAsRUFBSzVwQixFQUFJUyxFQUFHb29DLEVBQUs3b0MsRUFBSXVCLEVBQUdzb0IsRUFBSzVwQixFQUFJUSxFQUFHcW9DLEVBQUs3b0MsRUFBSXNCLEVBRW5EMG5CLEVBQUksR0FBTW5tQixFQUFJckMsRUFDZHdvQixFQUFJLElBQVFubUIsRUFBSXZCLEVBQ2hCMG5CLEVBQUksR0FBTXZsQixFQUVWdWxCLEVBQUksR0FBTTRmLEVBQUtoZixFQUFLbm1CLEVBQ3BCdWxCLEVBQUksR0FBTVcsRUFBS2tmLEVBQUtwbEMsRUFDcEJ1bEIsRUFBSSxJQUFRaHBCLEVBQUk2QyxFQUVoQm1tQixFQUFJLEdBQU02ZixFQUFLbGYsRUFBS2xtQixFQUNwQnVsQixFQUFJLEdBQU1ZLEVBQUtnZixFQUFLbmxDLEVBQ3BCdWxCLEVBQUksSUFBT2pwQixFQUFJOEMsT0FFVCxHQUFxQixRQUFoQm8yQixFQUFNRyxNQUFrQixDQUVuQyxNQUFNMFAsRUFBS2ptQyxFQUFJckMsRUFBR3VvQyxFQUFLbG1DLEVBQUl2QixFQUFHMG5DLEVBQUt2bEMsRUFBSWpELEVBQUd5b0MsRUFBS3hsQyxFQUFJbkMsRUFFbkQwbkIsRUFBSSxHQUFNOGYsRUFBS0csRUFBS2pwQyxFQUNwQmdwQixFQUFJLEdBQU1nZ0IsRUFBS2hwQyxFQUFJK29DLEVBQ25CL2YsRUFBSSxHQUFNanBCLEVBQUkwRCxFQUVkdWxCLEVBQUksR0FBTWpwQixFQUFJdUIsRUFDZDBuQixFQUFJLEdBQU1qcEIsRUFBSVMsRUFDZHdvQixFQUFJLElBQVFocEIsRUFFWmdwQixFQUFJLEdBQU0rZixFQUFLL29DLEVBQUlncEMsRUFDbkJoZ0IsRUFBSSxHQUFNaWdCLEVBQUtILEVBQUs5b0MsRUFDcEJncEIsRUFBSSxJQUFPanBCLEVBQUk4QyxPQUVULEdBQXFCLFFBQWhCbzJCLEVBQU1HLE1BQWtCLENBRW5DLE1BQU0wUCxFQUFLam1DLEVBQUlyQyxFQUFHdW9DLEVBQUtsbUMsRUFBSXZCLEVBQUcwbkMsRUFBS3ZsQyxFQUFJakQsRUFBR3lvQyxFQUFLeGxDLEVBQUluQyxFQUVuRDBuQixFQUFJLEdBQU04ZixFQUFLRyxFQUFLanBDLEVBQ3BCZ3BCLEVBQUksSUFBUWpwQixFQUFJdUIsRUFDaEIwbkIsRUFBSSxHQUFNZ2dCLEVBQUtELEVBQUsvb0MsRUFFcEJncEIsRUFBSSxHQUFNK2YsRUFBS0MsRUFBS2hwQyxFQUNwQmdwQixFQUFJLEdBQU1qcEIsRUFBSVMsRUFDZHdvQixFQUFJLEdBQU1pZ0IsRUFBS0gsRUFBSzlvQyxFQUVwQmdwQixFQUFJLElBQVFqcEIsRUFBSTBELEVBQ2hCdWxCLEVBQUksR0FBTWhwQixFQUNWZ3BCLEVBQUksSUFBT2pwQixFQUFJOEMsT0FFVCxHQUFxQixRQUFoQm8yQixFQUFNRyxNQUFrQixDQUVuQyxNQUFNelAsRUFBSzVwQixFQUFJUyxFQUFHb29DLEVBQUs3b0MsRUFBSXVCLEVBQUdzb0IsRUFBSzVwQixFQUFJUSxFQUFHcW9DLEVBQUs3b0MsRUFBSXNCLEVBRW5EMG5CLEVBQUksR0FBTW5tQixFQUFJckMsRUFDZHdvQixFQUFJLEdBQU1ZLEVBQUtubUIsRUFBSW1sQyxFQUNuQjVmLEVBQUksR0FBTVcsRUFBS2xtQixFQUFJb2xDLEVBRW5CN2YsRUFBSSxHQUFNbm1CLEVBQUl2QixFQUNkMG5CLEVBQUksR0FBTTZmLEVBQUtwbEMsRUFBSWttQixFQUNuQlgsRUFBSSxHQUFNNGYsRUFBS25sQyxFQUFJbW1CLEVBRW5CWixFQUFJLElBQVF2bEIsRUFDWnVsQixFQUFJLEdBQU1ocEIsRUFBSTZDLEVBQ2RtbUIsRUFBSSxJQUFPanBCLEVBQUk4QyxPQUVULEdBQXFCLFFBQWhCbzJCLEVBQU1HLE1BQWtCLENBRW5DLE1BQU12bEIsRUFBSzlULEVBQUk4QyxFQUFHcW1DLEVBQUtucEMsRUFBSTBELEVBQUd1UyxFQUFLaFcsRUFBSTZDLEVBQUdzbUMsRUFBS25wQyxFQUFJeUQsRUFFbkR1bEIsRUFBSSxHQUFNbm1CLEVBQUlyQyxFQUNkd29CLEVBQUksR0FBTW1nQixFQUFLdDFCLEVBQUt2UyxFQUNwQjBuQixFQUFJLEdBQU1oVCxFQUFLMVUsRUFBSTRuQyxFQUVuQmxnQixFQUFJLEdBQU0xbkIsRUFDVjBuQixFQUFJLEdBQU1qcEIsRUFBSVMsRUFDZHdvQixFQUFJLElBQVFocEIsRUFBSVEsRUFFaEJ3b0IsRUFBSSxJQUFRdmxCLEVBQUlqRCxFQUNoQndvQixFQUFJLEdBQU1rZ0IsRUFBSzVuQyxFQUFJMFUsRUFDbkJnVCxFQUFJLElBQU9uVixFQUFLczFCLEVBQUs3bkMsT0FFZixHQUFxQixRQUFoQjIzQixFQUFNRyxNQUFrQixDQUVuQyxNQUFNdmxCLEVBQUs5VCxFQUFJOEMsRUFBR3FtQyxFQUFLbnBDLEVBQUkwRCxFQUFHdVMsRUFBS2hXLEVBQUk2QyxFQUFHc21DLEVBQUtucEMsRUFBSXlELEVBRW5EdWxCLEVBQUksR0FBTW5tQixFQUFJckMsRUFDZHdvQixFQUFJLElBQVExbkIsRUFDWjBuQixFQUFJLEdBQU12bEIsRUFBSWpELEVBRWR3b0IsRUFBSSxHQUFNblYsRUFBS3ZTLEVBQUk2bkMsRUFDbkJuZ0IsRUFBSSxHQUFNanBCLEVBQUlTLEVBQ2R3b0IsRUFBSSxHQUFNa2dCLEVBQUs1bkMsRUFBSTBVLEVBRW5CZ1QsRUFBSSxHQUFNaFQsRUFBSzFVLEVBQUk0bkMsRUFDbkJsZ0IsRUFBSSxHQUFNaHBCLEVBQUlRLEVBQ2R3b0IsRUFBSSxJQUFPbWdCLEVBQUs3bkMsRUFBSXVTLEVBZXJCLE9BVkFtVixFQUFJLEdBQU0sRUFDVkEsRUFBSSxHQUFNLEVBQ1ZBLEVBQUksSUFBTyxFQUdYQSxFQUFJLElBQU8sRUFDWEEsRUFBSSxJQUFPLEVBQ1hBLEVBQUksSUFBTyxFQUNYQSxFQUFJLElBQU8sRUFFSjduQixLQUlSaW9DLDJCQUE0QmhwQyxHQUUzQixPQUFPZSxLQUFLa29DLFFBQVNDLEdBQU9scEMsRUFBR21wQyxJQUloQ3RFLE9BQVF1RSxFQUFLNWxCLEVBQVE2bEIsR0FFcEIsTUFBTXpnQixFQUFLN25CLEtBQUs4a0IsU0F5Q2hCLE9BdkNBc1IsR0FBRzdSLFdBQVk4akIsRUFBSzVsQixHQUVHLElBQWxCMlQsR0FBRzdRLGFBSVA2USxHQUFHbDFCLEVBQUksR0FJUmsxQixHQUFHMVEsWUFDSHdRLEdBQUdrRyxhQUFja00sRUFBSWxTLElBRUUsSUFBbEJGLEdBQUczUSxhQUltQixJQUFyQjFsQixLQUFLMlIsSUFBSzgyQixFQUFHcG5DLEdBRWpCazFCLEdBQUd6MUIsR0FBSyxLQUlSeTFCLEdBQUdsMUIsR0FBSyxLQUlUazFCLEdBQUcxUSxZQUNId1EsR0FBR2tHLGFBQWNrTSxFQUFJbFMsS0FJdEJGLEdBQUd4USxZQUNIeVEsR0FBR2lHLGFBQWNoRyxHQUFJRixJQUVyQnJPLEVBQUksR0FBTXFPLEdBQUd2MUIsRUFBR2tuQixFQUFJLEdBQU1zTyxHQUFHeDFCLEVBQUdrbkIsRUFBSSxHQUFNdU8sR0FBR3oxQixFQUM3Q2tuQixFQUFJLEdBQU1xTyxHQUFHcjFCLEVBQUdnbkIsRUFBSSxHQUFNc08sR0FBR3QxQixFQUFHZ25CLEVBQUksR0FBTXVPLEdBQUd2MUIsRUFDN0NnbkIsRUFBSSxHQUFNcU8sR0FBR2gxQixFQUFHMm1CLEVBQUksR0FBTXNPLEdBQUdqMUIsRUFBRzJtQixFQUFJLElBQU91TyxHQUFHbDFCLEVBRXZDbEIsS0FJUnlrQixTQUFVeGpCLEVBQUd0QyxHQUVaLFlBQVc2Z0IsSUFBTjdnQixHQUVKZ0UsUUFBUXVoQixLQUFNLG9HQUNQbGtCLEtBQUtzb0IsaUJBQWtCcm5CLEVBQUd0QyxJQUkzQnFCLEtBQUtzb0IsaUJBQWtCdG9CLEtBQU1pQixHQUlyQ3NuQixZQUFhdG5CLEdBRVosT0FBT2pCLEtBQUtzb0IsaUJBQWtCcm5CLEVBQUdqQixNQUlsQ3NvQixpQkFBa0IxcEIsRUFBR0MsR0FFcEIsTUFBTTJwQixFQUFLNXBCLEVBQUVrbUIsU0FDUDJELEVBQUs1cEIsRUFBRWltQixTQUNQK0MsRUFBSzduQixLQUFLOGtCLFNBRVY0RCxFQUFNRixFQUFJLEdBQUtHLEVBQU1ILEVBQUksR0FBS0ksRUFBTUosRUFBSSxHQUFLK2YsRUFBTS9mLEVBQUksSUFDdkRLLEVBQU1MLEVBQUksR0FBS00sRUFBTU4sRUFBSSxHQUFLTyxFQUFNUCxFQUFJLEdBQUtnZ0IsRUFBTWhnQixFQUFJLElBQ3ZEUSxFQUFNUixFQUFJLEdBQUtTLEVBQU1ULEVBQUksR0FBS1UsRUFBTVYsRUFBSSxJQUFNaWdCLEVBQU1qZ0IsRUFBSSxJQUN4RGtnQixFQUFNbGdCLEVBQUksR0FBS21nQixFQUFNbmdCLEVBQUksR0FBS29nQixFQUFNcGdCLEVBQUksSUFBTXFnQixFQUFNcmdCLEVBQUksSUFFeERXLEVBQU1WLEVBQUksR0FBS1csRUFBTVgsRUFBSSxHQUFLWSxFQUFNWixFQUFJLEdBQUtxZ0IsRUFBTXJnQixFQUFJLElBQ3ZEYSxFQUFNYixFQUFJLEdBQUtjLEVBQU1kLEVBQUksR0FBS2UsRUFBTWYsRUFBSSxHQUFLc2dCLEVBQU10Z0IsRUFBSSxJQUN2RGdCLEVBQU1oQixFQUFJLEdBQUtpQixFQUFNakIsRUFBSSxHQUFLa0IsRUFBTWxCLEVBQUksSUFBTXVnQixFQUFNdmdCLEVBQUksSUFDeER3Z0IsRUFBTXhnQixFQUFJLEdBQUt5Z0IsRUFBTXpnQixFQUFJLEdBQUswZ0IsRUFBTTFnQixFQUFJLElBQU0yZ0IsRUFBTTNnQixFQUFJLElBc0I5RCxPQXBCQVosRUFBSSxHQUFNYSxFQUFNUyxFQUFNUixFQUFNVyxFQUFNVixFQUFNYSxFQUFNOGUsRUFBTVUsRUFDcERwaEIsRUFBSSxHQUFNYSxFQUFNVSxFQUFNVCxFQUFNWSxFQUFNWCxFQUFNYyxFQUFNNmUsRUFBTVcsRUFDcERyaEIsRUFBSSxHQUFNYSxFQUFNVyxFQUFNVixFQUFNYSxFQUFNWixFQUFNZSxFQUFNNGUsRUFBTVksRUFDcER0aEIsRUFBSSxJQUFPYSxFQUFNb2dCLEVBQU1uZ0IsRUFBTW9nQixFQUFNbmdCLEVBQU1vZ0IsRUFBTVQsRUFBTWEsRUFFckR2aEIsRUFBSSxHQUFNZ0IsRUFBTU0sRUFBTUwsRUFBTVEsRUFBTVAsRUFBTVUsRUFBTStlLEVBQU1TLEVBQ3BEcGhCLEVBQUksR0FBTWdCLEVBQU1PLEVBQU1OLEVBQU1TLEVBQU1SLEVBQU1XLEVBQU04ZSxFQUFNVSxFQUNwRHJoQixFQUFJLEdBQU1nQixFQUFNUSxFQUFNUCxFQUFNVSxFQUFNVCxFQUFNWSxFQUFNNmUsRUFBTVcsRUFDcER0aEIsRUFBSSxJQUFPZ0IsRUFBTWlnQixFQUFNaGdCLEVBQU1pZ0IsRUFBTWhnQixFQUFNaWdCLEVBQU1SLEVBQU1ZLEVBRXJEdmhCLEVBQUksR0FBTW1CLEVBQU1HLEVBQU1GLEVBQU1LLEVBQU1KLEVBQU1PLEVBQU1nZixFQUFNUSxFQUNwRHBoQixFQUFJLEdBQU1tQixFQUFNSSxFQUFNSCxFQUFNTSxFQUFNTCxFQUFNUSxFQUFNK2UsRUFBTVMsRUFDcERyaEIsRUFBSSxJQUFPbUIsRUFBTUssRUFBTUosRUFBTU8sRUFBTU4sRUFBTVMsRUFBTThlLEVBQU1VLEVBQ3JEdGhCLEVBQUksSUFBT21CLEVBQU04ZixFQUFNN2YsRUFBTThmLEVBQU03ZixFQUFNOGYsRUFBTVAsRUFBTVcsRUFFckR2aEIsRUFBSSxHQUFNNmdCLEVBQU12ZixFQUFNd2YsRUFBTXJmLEVBQU1zZixFQUFNbmYsRUFBTW9mLEVBQU1JLEVBQ3BEcGhCLEVBQUksR0FBTTZnQixFQUFNdGYsRUFBTXVmLEVBQU1wZixFQUFNcWYsRUFBTWxmLEVBQU1tZixFQUFNSyxFQUNwRHJoQixFQUFJLElBQU82Z0IsRUFBTXJmLEVBQU1zZixFQUFNbmYsRUFBTW9mLEVBQU1qZixFQUFNa2YsRUFBTU0sRUFDckR0aEIsRUFBSSxJQUFPNmdCLEVBQU1JLEVBQU1ILEVBQU1JLEVBQU1ILEVBQU1JLEVBQU1ILEVBQU1PLEVBRTlDcHBDLEtBSVIwa0IsZUFBZ0JwaEIsR0FFZixNQUFNdWtCLEVBQUs3bkIsS0FBSzhrQixTQU9oQixPQUxBK0MsRUFBSSxJQUFPdmtCLEVBQUd1a0IsRUFBSSxJQUFPdmtCLEVBQUd1a0IsRUFBSSxJQUFPdmtCLEVBQUd1a0IsRUFBSSxLQUFRdmtCLEVBQ3REdWtCLEVBQUksSUFBT3ZrQixFQUFHdWtCLEVBQUksSUFBT3ZrQixFQUFHdWtCLEVBQUksSUFBT3ZrQixFQUFHdWtCLEVBQUksS0FBUXZrQixFQUN0RHVrQixFQUFJLElBQU92a0IsRUFBR3VrQixFQUFJLElBQU92a0IsRUFBR3VrQixFQUFJLEtBQVF2a0IsRUFBR3VrQixFQUFJLEtBQVF2a0IsRUFDdkR1a0IsRUFBSSxJQUFPdmtCLEVBQUd1a0IsRUFBSSxJQUFPdmtCLEVBQUd1a0IsRUFBSSxLQUFRdmtCLEVBQUd1a0IsRUFBSSxLQUFRdmtCLEVBRWhEdEQsS0FJUjRwQixjQUVDLE1BQU0vQixFQUFLN25CLEtBQUs4a0IsU0FFVnNDLEVBQU1TLEVBQUksR0FBS1IsRUFBTVEsRUFBSSxHQUFLUCxFQUFNTyxFQUFJLEdBQUs0ZSxFQUFNNWUsRUFBSSxJQUN2RE4sRUFBTU0sRUFBSSxHQUFLTCxFQUFNSyxFQUFJLEdBQUtKLEVBQU1JLEVBQUksR0FBSzZlLEVBQU03ZSxFQUFJLElBQ3ZESCxFQUFNRyxFQUFJLEdBQUtGLEVBQU1FLEVBQUksR0FBS0QsRUFBTUMsRUFBSSxJQUFNOGUsRUFBTTllLEVBQUksSUFNOUQsT0FMWUEsRUFBSSxLQU9aNGUsRUFBTWhmLEVBQU1FLEVBQ1hMLEVBQU1vZixFQUFNL2UsRUFDWjhlLEVBQU1qZixFQUFNSSxFQUNaUCxFQUFNcWYsRUFBTTllLEVBQ1pOLEVBQU1FLEVBQU1tZixFQUNadGYsRUFBTUksRUFBTWtmLEdBWlU5ZSxFQUFJLEtBZTNCVCxFQUFNSyxFQUFNa2YsRUFDWHZmLEVBQU1zZixFQUFNOWUsRUFDWjZlLEVBQU1sZixFQUFNSyxFQUNaTixFQUFNQyxFQUFNb2YsRUFDWnJmLEVBQU1vZixFQUFNaGYsRUFDWitlLEVBQU1oZixFQUFNQyxHQXBCeUJHLEVBQUksTUF1QjFDVCxFQUFNc2YsRUFBTS9lLEVBQ1hQLEVBQU1JLEVBQU1tZixFQUNaRixFQUFNbGYsRUFBTUksRUFDWk4sRUFBTUUsRUFBTW9mLEVBQ1pGLEVBQU1qZixFQUFNRSxFQUNaTCxFQUFNcWYsRUFBTWhmLEdBNUJ5Q0csRUFBSSxNQStCMURQLEVBQU1FLEVBQU1FLEVBQ1hOLEVBQU1LLEVBQU1FLEVBQ1pQLEVBQU1JLEVBQU1JLEVBQ1pOLEVBQU1DLEVBQU1JLEVBQ1pOLEVBQU1FLEVBQU1LLEVBQ1pQLEVBQU1JLEVBQU1DLEdBT2xCeUMsWUFFQyxNQUFNdEMsRUFBSzduQixLQUFLOGtCLFNBQ2hCLElBQUlzRixFQVVKLE9BUkFBLEVBQU12QyxFQUFJLEdBQUtBLEVBQUksR0FBTUEsRUFBSSxHQUFLQSxFQUFJLEdBQU11QyxFQUM1Q0EsRUFBTXZDLEVBQUksR0FBS0EsRUFBSSxHQUFNQSxFQUFJLEdBQUtBLEVBQUksR0FBTXVDLEVBQzVDQSxFQUFNdkMsRUFBSSxHQUFLQSxFQUFJLEdBQU1BLEVBQUksR0FBS0EsRUFBSSxHQUFNdUMsRUFFNUNBLEVBQU12QyxFQUFJLEdBQUtBLEVBQUksR0FBTUEsRUFBSSxJQUFNQSxFQUFJLElBQU91QyxFQUM5Q0EsRUFBTXZDLEVBQUksR0FBS0EsRUFBSSxHQUFNQSxFQUFJLElBQU1BLEVBQUksSUFBT3VDLEVBQzlDQSxFQUFNdkMsRUFBSSxJQUFNQSxFQUFJLElBQU9BLEVBQUksSUFBTUEsRUFBSSxJQUFPdUMsRUFFekNwcUIsS0FJUnFwQyxZQUFhMW9DLEVBQUdFLEVBQUdLLEdBRWxCLE1BQU0ybUIsRUFBSzduQixLQUFLOGtCLFNBZ0JoQixPQWRLbmtCLEVBQUVtOUIsV0FFTmpXLEVBQUksSUFBT2xuQixFQUFFQSxFQUNia25CLEVBQUksSUFBT2xuQixFQUFFRSxFQUNiZ25CLEVBQUksSUFBT2xuQixFQUFFTyxJQUliMm1CLEVBQUksSUFBT2xuQixFQUNYa25CLEVBQUksSUFBT2huQixFQUNYZ25CLEVBQUksSUFBTzNtQixHQUlMbEIsS0FJUjZwQixTQUdDLE1BQU1oQyxFQUFLN25CLEtBQUs4a0IsU0FFZnNDLEVBQU1TLEVBQUksR0FBS04sRUFBTU0sRUFBSSxHQUFLSCxFQUFNRyxFQUFJLEdBQUsrZSxFQUFNL2UsRUFBSSxHQUN2RFIsRUFBTVEsRUFBSSxHQUFLTCxFQUFNSyxFQUFJLEdBQUtGLEVBQU1FLEVBQUksR0FBS2dmLEVBQU1oZixFQUFJLEdBQ3ZEUCxFQUFNTyxFQUFJLEdBQUtKLEVBQU1JLEVBQUksR0FBS0QsRUFBTUMsRUFBSSxJQUFNaWYsRUFBTWpmLEVBQUksSUFDeEQ0ZSxFQUFNNWUsRUFBSSxJQUFNNmUsRUFBTTdlLEVBQUksSUFBTThlLEVBQU05ZSxFQUFJLElBQU1rZixFQUFNbGYsRUFBSSxJQUUxRGlDLEVBQU1yQyxFQUFNa2YsRUFBTUUsRUFBTUgsRUFBTTllLEVBQU1pZixFQUFNSCxFQUFNL2UsRUFBTW1mLEVBQU10ZixFQUFNbWYsRUFBTUcsRUFBTXJmLEVBQU1FLEVBQU1vZixFQUFNdmYsRUFBTUksRUFBTW1mLEVBQzVHaGQsRUFBTTBjLEVBQU03ZSxFQUFNaWYsRUFBTXZmLEVBQU1xZixFQUFNRSxFQUFNSixFQUFNOWUsRUFBTW1mLEVBQU16ZixFQUFNc2YsRUFBTUcsRUFBTXhmLEVBQU1LLEVBQU1vZixFQUFNMWYsRUFBTU8sRUFBTW1mLEVBQzVHL2MsRUFBTTFDLEVBQU1vZixFQUFNRyxFQUFNSixFQUFNaGYsRUFBTW9mLEVBQU1KLEVBQU1qZixFQUFNc2YsRUFBTXpmLEVBQU1xZixFQUFNSSxFQUFNeGYsRUFBTUUsRUFBTXVmLEVBQU0xZixFQUFNSSxFQUFNc2YsRUFDNUd1QyxFQUFNN0MsRUFBTWhmLEVBQU1FLEVBQU1MLEVBQU1vZixFQUFNL2UsRUFBTThlLEVBQU1qZixFQUFNSSxFQUFNUCxFQUFNcWYsRUFBTTllLEVBQU1OLEVBQU1FLEVBQU1tZixFQUFNdGYsRUFBTUksRUFBTWtmLEVBRXZHMWMsRUFBTTdDLEVBQU0wQyxFQUFNdkMsRUFBTXdDLEVBQU1yQyxFQUFNc0MsRUFBTTRjLEVBQU0wQyxFQUV0RCxHQUFhLElBQVJyZixFQUFZLE9BQU9qcUIsS0FBSzJNLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFL0UsTUFBTXVkLEVBQVMsRUFBSUQsRUFzQm5CLE9BcEJBcEMsRUFBSSxHQUFNaUMsRUFBTUksRUFDaEJyQyxFQUFJLElBQVE2ZSxFQUFNOWUsRUFBTWdmLEVBQU1uZixFQUFNa2YsRUFBTUMsRUFBTUYsRUFBTWhmLEVBQU1vZixFQUFNdmYsRUFBTW9mLEVBQU1HLEVBQU1yZixFQUFNQyxFQUFNcWYsRUFBTXhmLEVBQU1LLEVBQU1tZixHQUFRN2MsRUFDMUhyQyxFQUFJLElBQVFMLEVBQU1tZixFQUFNQyxFQUFNRixFQUFNL2UsRUFBTWlmLEVBQU1GLEVBQU1oZixFQUFNbWYsRUFBTXRmLEVBQU1vZixFQUFNRSxFQUFNcmYsRUFBTUUsRUFBTXFmLEVBQU14ZixFQUFNSSxFQUFNb2YsR0FBUTdjLEVBQzFIckMsRUFBSSxJQUFRSixFQUFNRSxFQUFNaWYsRUFBTXBmLEVBQU1JLEVBQU1nZixFQUFNbmYsRUFBTUMsRUFBTW1mLEVBQU10ZixFQUFNSyxFQUFNaWYsRUFBTXJmLEVBQU1FLEVBQU1vZixFQUFNdmYsRUFBTUksRUFBTW1mLEdBQVE1YyxFQUUxSHJDLEVBQUksR0FBTWtDLEVBQU1HLEVBQ2hCckMsRUFBSSxJQUFRUCxFQUFNcWYsRUFBTUMsRUFBTUgsRUFBTTdlLEVBQU1nZixFQUFNSCxFQUFNL2UsRUFBTW9mLEVBQU0xZixFQUFNdWYsRUFBTUcsRUFBTXhmLEVBQU1JLEVBQU1xZixFQUFNM2YsRUFBTVEsRUFBTW1mLEdBQVE3YyxFQUMxSHJDLEVBQUksSUFBUTRlLEVBQU05ZSxFQUFNaWYsRUFBTXZmLEVBQU1zZixFQUFNQyxFQUFNSCxFQUFNL2UsRUFBTW1mLEVBQU16ZixFQUFNdWYsRUFBTUUsRUFBTXhmLEVBQU1LLEVBQU1xZixFQUFNM2YsRUFBTU8sRUFBTW9mLEdBQVE3YyxFQUMxSHJDLEVBQUksSUFBUVIsRUFBTU8sRUFBTWdmLEVBQU10ZixFQUFNSyxFQUFNaWYsRUFBTXRmLEVBQU1JLEVBQU1tZixFQUFNemYsRUFBTVEsRUFBTWlmLEVBQU14ZixFQUFNSyxFQUFNb2YsRUFBTTFmLEVBQU1PLEVBQU1tZixHQUFRNWMsRUFFMUhyQyxFQUFJLEdBQU1tQyxFQUFNRSxFQUNoQnJDLEVBQUksSUFBUTRlLEVBQU1oZixFQUFNbWYsRUFBTXRmLEVBQU1vZixFQUFNRSxFQUFNSCxFQUFNbGYsRUFBTXVmLEVBQU0xZixFQUFNc2YsRUFBTUksRUFBTXhmLEVBQU1DLEVBQU13ZixFQUFNM2YsRUFBTUssRUFBTXNmLEdBQVE3YyxFQUMxSHJDLEVBQUksS0FBU1IsRUFBTXFmLEVBQU1FLEVBQU1ILEVBQU1qZixFQUFNb2YsRUFBTUgsRUFBTWxmLEVBQU1zZixFQUFNemYsRUFBTXNmLEVBQU1HLEVBQU14ZixFQUFNRSxFQUFNd2YsRUFBTTNmLEVBQU1JLEVBQU11ZixHQUFRN2MsRUFDM0hyQyxFQUFJLEtBQVNQLEVBQU1FLEVBQU1vZixFQUFNdmYsRUFBTUksRUFBTW1mLEVBQU10ZixFQUFNQyxFQUFNc2YsRUFBTXpmLEVBQU1LLEVBQU1vZixFQUFNeGYsRUFBTUUsRUFBTXVmLEVBQU0xZixFQUFNSSxFQUFNc2YsR0FBUTVjLEVBRTNIckMsRUFBSSxJQUFPeWhCLEVBQU1wZixFQUNqQnJDLEVBQUksS0FBU1AsRUFBTW9mLEVBQU1oZixFQUFNK2UsRUFBTWhmLEVBQU1DLEVBQU0rZSxFQUFNbGYsRUFBTUssRUFBTVIsRUFBTXNmLEVBQU05ZSxFQUFNTixFQUFNQyxFQUFNb2YsRUFBTXZmLEVBQU1LLEVBQU1rZixHQUFRemMsRUFDM0hyQyxFQUFJLEtBQVM0ZSxFQUFNamYsRUFBTUUsRUFBTUwsRUFBTXFmLEVBQU1oZixFQUFNK2UsRUFBTWxmLEVBQU1JLEVBQU1QLEVBQU1zZixFQUFNL2UsRUFBTU4sRUFBTUUsRUFBTW9mLEVBQU12ZixFQUFNSSxFQUFNbWYsR0FBUXpjLEVBQzNIckMsRUFBSSxLQUFTUixFQUFNSSxFQUFNQyxFQUFNSixFQUFNRSxFQUFNRSxFQUFNSixFQUFNQyxFQUFNSSxFQUFNUCxFQUFNSyxFQUFNRSxFQUFNTixFQUFNRSxFQUFNSyxFQUFNUixFQUFNSSxFQUFNSSxHQUFRc0MsRUFFcEhscUIsS0FJUitxQixNQUFPOXFCLEdBRU4sTUFBTTRuQixFQUFLN25CLEtBQUs4a0IsU0FDVm5rQixFQUFJVixFQUFFVSxFQUFHRSxFQUFJWixFQUFFWSxFQUFHSyxFQUFJakIsRUFBRWlCLEVBTzlCLE9BTEEybUIsRUFBSSxJQUFPbG5CLEVBQUdrbkIsRUFBSSxJQUFPaG5CLEVBQUdnbkIsRUFBSSxJQUFPM21CLEVBQ3ZDMm1CLEVBQUksSUFBT2xuQixFQUFHa25CLEVBQUksSUFBT2huQixFQUFHZ25CLEVBQUksSUFBTzNtQixFQUN2QzJtQixFQUFJLElBQU9sbkIsRUFBR2tuQixFQUFJLElBQU9obkIsRUFBR2duQixFQUFJLEtBQVEzbUIsRUFDeEMybUIsRUFBSSxJQUFPbG5CLEVBQUdrbkIsRUFBSSxJQUFPaG5CLEVBQUdnbkIsRUFBSSxLQUFRM21CLEVBRWpDbEIsS0FJUmdqQyxvQkFFQyxNQUFNbmIsRUFBSzduQixLQUFLOGtCLFNBRVZ5a0IsRUFBVzFoQixFQUFJLEdBQU1BLEVBQUksR0FBTUEsRUFBSSxHQUFNQSxFQUFJLEdBQU1BLEVBQUksR0FBTUEsRUFBSSxHQUNqRTJoQixFQUFXM2hCLEVBQUksR0FBTUEsRUFBSSxHQUFNQSxFQUFJLEdBQU1BLEVBQUksR0FBTUEsRUFBSSxHQUFNQSxFQUFJLEdBQ2pFNGhCLEVBQVc1aEIsRUFBSSxHQUFNQSxFQUFJLEdBQU1BLEVBQUksR0FBTUEsRUFBSSxHQUFNQSxFQUFJLElBQU9BLEVBQUksSUFFeEUsT0FBT2hvQixLQUFLMmxCLEtBQU0zbEIsS0FBS2tHLElBQUt3akMsRUFBVUMsRUFBVUMsSUFJakRDLGdCQUFpQi9vQyxFQUFHRSxFQUFHSyxHQVd0QixPQVRBbEIsS0FBSzJNLElBRUosRUFBRyxFQUFHLEVBQUdoTSxFQUNULEVBQUcsRUFBRyxFQUFHRSxFQUNULEVBQUcsRUFBRyxFQUFHSyxFQUNULEVBQUcsRUFBRyxFQUFHLEdBSUhsQixLQUlSMnBDLGNBQWUzZSxHQUVkLE1BQU10cEIsRUFBSTdCLEtBQUttbkIsSUFBS2dFLEdBQVMxbkIsRUFBSXpELEtBQUtvbkIsSUFBSytELEdBVzNDLE9BVEFockIsS0FBSzJNLElBRUosRUFBRyxFQUFHLEVBQUcsRUFDVCxFQUFHakwsR0FBSzRCLEVBQUcsRUFDWCxFQUFHQSxFQUFHNUIsRUFBRyxFQUNULEVBQUcsRUFBRyxFQUFHLEdBSUgxQixLQUlSNHBDLGNBQWU1ZSxHQUVkLE1BQU10cEIsRUFBSTdCLEtBQUttbkIsSUFBS2dFLEdBQVMxbkIsRUFBSXpELEtBQUtvbkIsSUFBSytELEdBVzNDLE9BVEFockIsS0FBSzJNLElBRUhqTCxFQUFHLEVBQUc0QixFQUFHLEVBQ1QsRUFBRyxFQUFHLEVBQUcsR0FDUkEsRUFBRyxFQUFHNUIsRUFBRyxFQUNWLEVBQUcsRUFBRyxFQUFHLEdBSUoxQixLQUlSNnBDLGNBQWU3ZSxHQUVkLE1BQU10cEIsRUFBSTdCLEtBQUttbkIsSUFBS2dFLEdBQVMxbkIsRUFBSXpELEtBQUtvbkIsSUFBSytELEdBVzNDLE9BVEFockIsS0FBSzJNLElBRUpqTCxHQUFLNEIsRUFBRyxFQUFHLEVBQ1hBLEVBQUc1QixFQUFHLEVBQUcsRUFDVCxFQUFHLEVBQUcsRUFBRyxFQUNULEVBQUcsRUFBRyxFQUFHLEdBSUgxQixLQUlSOHBDLGlCQUFrQnBSLEVBQU0vUyxHQUl2QixNQUFNamtCLEVBQUk3QixLQUFLbW5CLElBQUtyQixHQUNkcmlCLEVBQUl6RCxLQUFLb25CLElBQUt0QixHQUNkNWxCLEVBQUksRUFBSTJCLEVBQ1JmLEVBQUkrM0IsRUFBSy8zQixFQUFHRSxFQUFJNjNCLEVBQUs3M0IsRUFBR0ssRUFBSXczQixFQUFLeDNCLEVBQ2pDdXBCLEVBQUsxcUIsRUFBSVksRUFBRytwQixFQUFLM3FCLEVBQUljLEVBVzNCLE9BVEFiLEtBQUsyTSxJQUVKOGQsRUFBSzlwQixFQUFJZSxFQUFHK29CLEVBQUs1cEIsRUFBSXlDLEVBQUlwQyxFQUFHdXBCLEVBQUt2cEIsRUFBSW9DLEVBQUl6QyxFQUFHLEVBQzVDNHBCLEVBQUs1cEIsRUFBSXlDLEVBQUlwQyxFQUFHd3BCLEVBQUs3cEIsRUFBSWEsRUFBR2dwQixFQUFLeHBCLEVBQUlvQyxFQUFJM0MsRUFBRyxFQUM1QzhwQixFQUFLdnBCLEVBQUlvQyxFQUFJekMsRUFBRzZwQixFQUFLeHBCLEVBQUlvQyxFQUFJM0MsRUFBR1osRUFBSW1CLEVBQUlBLEVBQUlRLEVBQUcsRUFDL0MsRUFBRyxFQUFHLEVBQUcsR0FJSDFCLEtBSVIrcEMsVUFBV3BwQyxFQUFHRSxFQUFHSyxHQVdoQixPQVRBbEIsS0FBSzJNLElBRUpoTSxFQUFHLEVBQUcsRUFBRyxFQUNULEVBQUdFLEVBQUcsRUFBRyxFQUNULEVBQUcsRUFBR0ssRUFBRyxFQUNULEVBQUcsRUFBRyxFQUFHLEdBSUhsQixLQUlSZ3FDLFVBQVd6VixFQUFJQyxFQUFJeVYsRUFBSXhWLEVBQUl5VixFQUFJQyxHQVc5QixPQVRBbnFDLEtBQUsyTSxJQUVKLEVBQUdzOUIsRUFBSUMsRUFBSSxFQUNYM1YsRUFBSSxFQUFHNFYsRUFBSSxFQUNYM1YsRUFBSUMsRUFBSSxFQUFHLEVBQ1gsRUFBRyxFQUFHLEVBQUcsR0FJSHowQixLQUlSa29DLFFBQVNwSSxFQUFVbEksRUFBWTdNLEdBRTlCLE1BQU1sRCxFQUFLN25CLEtBQUs4a0IsU0FFVm5rQixFQUFJaTNCLEVBQVcxQixHQUFJcjFCLEVBQUkrMkIsRUFBV3pCLEdBQUlqMUIsRUFBSTAyQixFQUFXeEIsR0FBSTcxQixFQUFJcTNCLEVBQVd2QixHQUN4RStULEVBQUt6cEMsRUFBSUEsRUFBRzBwQyxFQUFLeHBDLEVBQUlBLEVBQUd5cEMsRUFBS3BwQyxFQUFJQSxFQUNqQ2t6QixFQUFLenpCLEVBQUl5cEMsRUFBSTdWLEVBQUs1ekIsRUFBSTBwQyxFQUFJN1YsRUFBSzd6QixFQUFJMnBDLEVBQ25DalcsRUFBS3h6QixFQUFJd3BDLEVBQUk1VixFQUFLNXpCLEVBQUl5cEMsRUFBSWhXLEVBQUtwekIsRUFBSW9wQyxFQUNuQ0MsRUFBS2hxQyxFQUFJNnBDLEVBQUlJLEVBQUtqcUMsRUFBSThwQyxFQUFJSSxFQUFLbHFDLEVBQUkrcEMsRUFFbkMzZixFQUFLSSxFQUFNcHFCLEVBQUdpcUIsRUFBS0csRUFBTWxxQixFQUFHKzhCLEVBQUs3UyxFQUFNN3BCLEVBc0I3QyxPQXBCQTJtQixFQUFJLElBQVEsR0FBTXdNLEVBQUtDLElBQVMzSixFQUNoQzlDLEVBQUksSUFBUTBNLEVBQUtrVyxHQUFPOWYsRUFDeEI5QyxFQUFJLElBQVEyTSxFQUFLZ1csR0FBTzdmLEVBQ3hCOUMsRUFBSSxHQUFNLEVBRVZBLEVBQUksSUFBUTBNLEVBQUtrVyxHQUFPN2YsRUFDeEIvQyxFQUFJLElBQVEsR0FBTXVNLEVBQUtFLElBQVMxSixFQUNoQy9DLEVBQUksSUFBUTRNLEVBQUs4VixHQUFPM2YsRUFDeEIvQyxFQUFJLEdBQU0sRUFFVkEsRUFBSSxJQUFRMk0sRUFBS2dXLEdBQU81TSxFQUN4Qi9WLEVBQUksSUFBUTRNLEVBQUs4VixHQUFPM00sRUFDeEIvVixFQUFJLEtBQVMsR0FBTXVNLEVBQUtDLElBQVN1SixFQUNqQy9WLEVBQUksSUFBTyxFQUVYQSxFQUFJLElBQU9pWSxFQUFTbi9CLEVBQ3BCa25CLEVBQUksSUFBT2lZLEVBQVNqL0IsRUFDcEJnbkIsRUFBSSxJQUFPaVksRUFBUzUrQixFQUNwQjJtQixFQUFJLElBQU8sRUFFSjduQixLQUlSMHFDLFVBQVc1SyxFQUFVbEksRUFBWTdNLEdBRWhDLE1BQU1sRCxFQUFLN25CLEtBQUs4a0IsU0FFaEIsSUFBSTZGLEVBQUswYyxHQUFNMTZCLElBQUtrYixFQUFJLEdBQUtBLEVBQUksR0FBS0EsRUFBSSxJQUFNL29CLFNBQ2hELE1BQU04ckIsRUFBS3ljLEdBQU0xNkIsSUFBS2tiLEVBQUksR0FBS0EsRUFBSSxHQUFLQSxFQUFJLElBQU0vb0IsU0FDNUM4K0IsRUFBS3lKLEdBQU0xNkIsSUFBS2tiLEVBQUksR0FBS0EsRUFBSSxHQUFLQSxFQUFJLEtBQU8vb0IsU0FHdkNrQixLQUFLNHBCLGNBQ04sSUFBSWUsR0FBT0EsR0FFdEJtVixFQUFTbi9CLEVBQUlrbkIsRUFBSSxJQUNqQmlZLEVBQVNqL0IsRUFBSWduQixFQUFJLElBQ2pCaVksRUFBUzUrQixFQUFJMm1CLEVBQUksSUFHakI4aUIsR0FBTTNtQixLQUFNaGtCLE1BRVosTUFBTTRxQyxFQUFRLEVBQUlqZ0IsRUFDWmtnQixFQUFRLEVBQUlqZ0IsRUFDWmtnQixFQUFRLEVBQUlsTixFQW9CbEIsT0FsQkErTSxHQUFNN2xCLFNBQVUsSUFBTzhsQixFQUN2QkQsR0FBTTdsQixTQUFVLElBQU84bEIsRUFDdkJELEdBQU03bEIsU0FBVSxJQUFPOGxCLEVBRXZCRCxHQUFNN2xCLFNBQVUsSUFBTytsQixFQUN2QkYsR0FBTTdsQixTQUFVLElBQU8rbEIsRUFDdkJGLEdBQU03bEIsU0FBVSxJQUFPK2xCLEVBRXZCRixHQUFNN2xCLFNBQVUsSUFBT2dtQixFQUN2QkgsR0FBTTdsQixTQUFVLElBQU9nbUIsRUFDdkJILEdBQU03bEIsU0FBVSxLQUFRZ21CLEVBRXhCbFQsRUFBV2dCLHNCQUF1QitSLElBRWxDNWYsRUFBTXBxQixFQUFJZ3FCLEVBQ1ZJLEVBQU1scUIsRUFBSStwQixFQUNWRyxFQUFNN3BCLEVBQUkwOEIsRUFFSDU5QixLQUlSK3FDLGdCQUFpQkMsRUFBTUMsRUFBT0MsRUFBS0MsRUFBUUMsRUFBTUMsUUFFbkM3ckIsSUFBUjZyQixHQUVKMW9DLFFBQVF1aEIsS0FBTSx3R0FJZixNQUFNMkQsRUFBSzduQixLQUFLOGtCLFNBQ1Zua0IsRUFBSSxFQUFJeXFDLEdBQVNILEVBQVFELEdBQ3pCbnFDLEVBQUksRUFBSXVxQyxHQUFTRixFQUFNQyxHQUV2QnZzQyxHQUFNcXNDLEVBQVFELElBQVdDLEVBQVFELEdBQ2pDbnNDLEdBQU1xc0MsRUFBTUMsSUFBYUQsRUFBTUMsR0FDL0J6cEMsSUFBUTJwQyxFQUFNRCxJQUFXQyxFQUFNRCxHQUMvQjlvQyxHQUFNLEVBQUkrb0MsRUFBTUQsR0FBU0MsRUFBTUQsR0FPckMsT0FMQXZqQixFQUFJLEdBQU1sbkIsRUFBR2tuQixFQUFJLEdBQU0sRUFBR0EsRUFBSSxHQUFNanBCLEVBQUdpcEIsRUFBSSxJQUFPLEVBQ2xEQSxFQUFJLEdBQU0sRUFBR0EsRUFBSSxHQUFNaG5CLEVBQUdnbkIsRUFBSSxHQUFNaHBCLEVBQUdncEIsRUFBSSxJQUFPLEVBQ2xEQSxFQUFJLEdBQU0sRUFBR0EsRUFBSSxHQUFNLEVBQUdBLEVBQUksSUFBT25tQixFQUFHbW1CLEVBQUksSUFBT3ZsQixFQUNuRHVsQixFQUFJLEdBQU0sRUFBR0EsRUFBSSxHQUFNLEVBQUdBLEVBQUksS0FBUyxFQUFHQSxFQUFJLElBQU8sRUFFOUM3bkIsS0FJUnNyQyxpQkFBa0JOLEVBQU1DLEVBQU9DLEVBQUtDLEVBQVFDLEVBQU1DLEdBRWpELE1BQU14akIsRUFBSzduQixLQUFLOGtCLFNBQ1Z2a0IsRUFBSSxHQUFRMHFDLEVBQVFELEdBQ3BCNXFDLEVBQUksR0FBUThxQyxFQUFNQyxHQUNsQjVuQyxFQUFJLEdBQVE4bkMsRUFBTUQsR0FFbEJ6cUMsR0FBTXNxQyxFQUFRRCxHQUFTenFDLEVBQ3ZCTSxHQUFNcXFDLEVBQU1DLEdBQVcvcUMsRUFDdkJjLEdBQU1tcUMsRUFBTUQsR0FBUzduQyxFQU8zQixPQUxBc2tCLEVBQUksR0FBTSxFQUFJdG5CLEVBQUdzbkIsRUFBSSxHQUFNLEVBQUdBLEVBQUksR0FBTSxFQUFHQSxFQUFJLEtBQVNsbkIsRUFDeERrbkIsRUFBSSxHQUFNLEVBQUdBLEVBQUksR0FBTSxFQUFJem5CLEVBQUd5bkIsRUFBSSxHQUFNLEVBQUdBLEVBQUksS0FBU2huQixFQUN4RGduQixFQUFJLEdBQU0sRUFBR0EsRUFBSSxHQUFNLEVBQUdBLEVBQUksS0FBUyxFQUFJdGtCLEVBQUdza0IsRUFBSSxLQUFTM21CLEVBQzNEMm1CLEVBQUksR0FBTSxFQUFHQSxFQUFJLEdBQU0sRUFBR0EsRUFBSSxJQUFPLEVBQUdBLEVBQUksSUFBTyxFQUU1QzduQixLQUlSc21CLE9BQVEyRSxHQUVQLE1BQU1wRCxFQUFLN25CLEtBQUs4a0IsU0FDVmlELEVBQUtrRCxFQUFPbkcsU0FFbEIsSUFBTSxJQUFJaGtCLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUV4QixHQUFLK21CLEVBQUkvbUIsS0FBUWluQixFQUFJam5CLEdBQU0sT0FBTyxFQUluQyxPQUFPLEVBSVJ5bEIsVUFBVzdELEVBQU84RCxFQUFTLEdBRTFCLElBQU0sSUFBSTFsQixFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFFeEJkLEtBQUs4a0IsU0FBVWhrQixHQUFNNGhCLEVBQU81aEIsRUFBSTBsQixHQUlqQyxPQUFPeG1CLEtBSVJ5bUIsUUFBUy9ELEVBQVEsR0FBSThELEVBQVMsR0FFN0IsTUFBTXFCLEVBQUs3bkIsS0FBSzhrQixTQXNCaEIsT0FwQkFwQyxFQUFPOEQsR0FBV3FCLEVBQUksR0FDdEJuRixFQUFPOEQsRUFBUyxHQUFNcUIsRUFBSSxHQUMxQm5GLEVBQU84RCxFQUFTLEdBQU1xQixFQUFJLEdBQzFCbkYsRUFBTzhELEVBQVMsR0FBTXFCLEVBQUksR0FFMUJuRixFQUFPOEQsRUFBUyxHQUFNcUIsRUFBSSxHQUMxQm5GLEVBQU84RCxFQUFTLEdBQU1xQixFQUFJLEdBQzFCbkYsRUFBTzhELEVBQVMsR0FBTXFCLEVBQUksR0FDMUJuRixFQUFPOEQsRUFBUyxHQUFNcUIsRUFBSSxHQUUxQm5GLEVBQU84RCxFQUFTLEdBQU1xQixFQUFJLEdBQzFCbkYsRUFBTzhELEVBQVMsR0FBTXFCLEVBQUksR0FDMUJuRixFQUFPOEQsRUFBUyxJQUFPcUIsRUFBSSxJQUMzQm5GLEVBQU84RCxFQUFTLElBQU9xQixFQUFJLElBRTNCbkYsRUFBTzhELEVBQVMsSUFBT3FCLEVBQUksSUFDM0JuRixFQUFPOEQsRUFBUyxJQUFPcUIsRUFBSSxJQUMzQm5GLEVBQU84RCxFQUFTLElBQU9xQixFQUFJLElBQzNCbkYsRUFBTzhELEVBQVMsSUFBT3FCLEVBQUksSUFFcEJuRixHQU1UOGpCLEdBQVFqbkMsVUFBVWdzQyxXQUFZLEVBRTlCLE1BQU1sRSxHQUFzQixJQUFJeE0sR0FDMUI4UCxHQUFzQixJQUFJbkUsR0FDMUIyQixHQUFzQixJQUFJdE4sR0FBUyxFQUFHLEVBQUcsR0FDekN1TixHQUFxQixJQUFJdk4sR0FBUyxFQUFHLEVBQUcsR0FDeEMzRSxHQUFtQixJQUFJMkUsR0FDdkIxRSxHQUFtQixJQUFJMEUsR0FDdkJ6RSxHQUFtQixJQUFJeUUsR0FFdkIyUSxHQUEwQixJQUFJaEYsR0FDOUJpRixHQUE4QixJQUFJeFYsR0FFeEMsTUFBTXlWLEdBRUwvaUMsWUFBYWhJLEVBQUksRUFBR0UsRUFBSSxFQUFHSyxFQUFJLEVBQUcrMkIsRUFBUXlULEdBQU1DLGNBRS9DM3JDLEtBQUtrMkIsR0FBS3YxQixFQUNWWCxLQUFLbTJCLEdBQUt0MUIsRUFDVmIsS0FBS28yQixHQUFLbDFCLEVBQ1ZsQixLQUFLazRCLE9BQVNELEVBSVh0M0IsUUFFSCxPQUFPWCxLQUFLazJCLEdBSVR2MUIsTUFBRzNCLEdBRU5nQixLQUFLazJCLEdBQUtsM0IsRUFDVmdCLEtBQUsyM0Isb0JBSUY5MkIsUUFFSCxPQUFPYixLQUFLbTJCLEdBSVR0MUIsTUFBRzdCLEdBRU5nQixLQUFLbTJCLEdBQUtuM0IsRUFDVmdCLEtBQUsyM0Isb0JBSUZ6MkIsUUFFSCxPQUFPbEIsS0FBS28yQixHQUlUbDFCLE1BQUdsQyxHQUVOZ0IsS0FBS28yQixHQUFLcDNCLEVBQ1ZnQixLQUFLMjNCLG9CQUlGTSxZQUVILE9BQU9qNEIsS0FBS2s0QixPQUlURCxVQUFPajVCLEdBRVZnQixLQUFLazRCLE9BQVNsNUIsRUFDZGdCLEtBQUsyM0Isb0JBSU5ockIsSUFBS2hNLEVBQUdFLEVBQUdLLEVBQUcrMkIsRUFBUWo0QixLQUFLazRCLFFBUzFCLE9BUEFsNEIsS0FBS2syQixHQUFLdjFCLEVBQ1ZYLEtBQUttMkIsR0FBS3QxQixFQUNWYixLQUFLbzJCLEdBQUtsMUIsRUFDVmxCLEtBQUtrNEIsT0FBU0QsRUFFZGo0QixLQUFLMjNCLG9CQUVFMzNCLEtBSVIrakIsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLFlBQWEzSSxLQUFLazJCLEdBQUlsMkIsS0FBS20yQixHQUFJbjJCLEtBQUtvMkIsR0FBSXAyQixLQUFLazRCLFFBSTlEbFUsS0FBTThULEdBU0wsT0FQQTkzQixLQUFLazJCLEdBQUs0QixFQUFNNUIsR0FDaEJsMkIsS0FBS20yQixHQUFLMkIsRUFBTTNCLEdBQ2hCbjJCLEtBQUtvMkIsR0FBSzBCLEVBQU0xQixHQUNoQnAyQixLQUFLazRCLE9BQVNKLEVBQU1JLE9BRXBCbDRCLEtBQUsyM0Isb0JBRUUzM0IsS0FJUjQ0QixzQkFBdUIzM0IsRUFBR2czQixFQUFRajRCLEtBQUtrNEIsT0FBUUgsR0FBUyxHQUl2RCxNQUFNbFEsRUFBSzVtQixFQUFFNmpCLFNBQ1A2TyxFQUFNOUwsRUFBSSxHQUFLK0wsRUFBTS9MLEVBQUksR0FBS2dNLEVBQU1oTSxFQUFJLEdBQ3hDaU0sRUFBTWpNLEVBQUksR0FBS2tNLEVBQU1sTSxFQUFJLEdBQUttTSxFQUFNbk0sRUFBSSxHQUN4Q29NLEVBQU1wTSxFQUFJLEdBQUtxTSxFQUFNck0sRUFBSSxHQUFLc00sRUFBTXRNLEVBQUksSUFFOUMsT0FBU29RLEdBRVIsSUFBSyxNQUVKajRCLEtBQUttMkIsR0FBS3QyQixLQUFLK3JDLEtBQU14b0IsRUFBT3lRLEdBQU8sRUFBRyxJQUVqQ2gwQixLQUFLMlIsSUFBS3FpQixHQUFRLFVBRXRCN3pCLEtBQUtrMkIsR0FBS3IyQixLQUFLK2xCLE9BQVNvTyxFQUFLRyxHQUM3Qm4wQixLQUFLbzJCLEdBQUt2MkIsS0FBSytsQixPQUFTZ08sRUFBS0QsS0FJN0IzekIsS0FBS2syQixHQUFLcjJCLEtBQUsrbEIsTUFBT3NPLEVBQUtILEdBQzNCL3pCLEtBQUtvMkIsR0FBSyxHQUlYLE1BRUQsSUFBSyxNQUVKcDJCLEtBQUtrMkIsR0FBS3IyQixLQUFLK3JDLE1BQVF4b0IsRUFBTzRRLEdBQU8sRUFBRyxJQUVuQ24wQixLQUFLMlIsSUFBS3dpQixHQUFRLFVBRXRCaDBCLEtBQUttMkIsR0FBS3QyQixLQUFLK2xCLE1BQU9pTyxFQUFLTSxHQUMzQm4wQixLQUFLbzJCLEdBQUt2MkIsS0FBSytsQixNQUFPa08sRUFBS0MsS0FJM0IvekIsS0FBS20yQixHQUFLdDJCLEtBQUsrbEIsT0FBU3FPLEVBQUtOLEdBQzdCM3pCLEtBQUtvMkIsR0FBSyxHQUlYLE1BRUQsSUFBSyxNQUVKcDJCLEtBQUtrMkIsR0FBS3IyQixLQUFLK3JDLEtBQU14b0IsRUFBTzhRLEdBQU8sRUFBRyxJQUVqQ3IwQixLQUFLMlIsSUFBSzBpQixHQUFRLFVBRXRCbDBCLEtBQUttMkIsR0FBS3QyQixLQUFLK2xCLE9BQVNxTyxFQUFLRSxHQUM3Qm4wQixLQUFLbzJCLEdBQUt2MkIsS0FBSytsQixPQUFTZ08sRUFBS0csS0FJN0IvekIsS0FBS20yQixHQUFLLEVBQ1ZuMkIsS0FBS28yQixHQUFLdjJCLEtBQUsrbEIsTUFBT2tPLEVBQUtILElBSTVCLE1BRUQsSUFBSyxNQUVKM3pCLEtBQUttMkIsR0FBS3QyQixLQUFLK3JDLE1BQVF4b0IsRUFBTzZRLEdBQU8sRUFBRyxJQUVuQ3AwQixLQUFLMlIsSUFBS3lpQixHQUFRLFVBRXRCajBCLEtBQUtrMkIsR0FBS3IyQixLQUFLK2xCLE1BQU9zTyxFQUFLQyxHQUMzQm4wQixLQUFLbzJCLEdBQUt2MkIsS0FBSytsQixNQUFPa08sRUFBS0gsS0FJM0IzekIsS0FBS2syQixHQUFLLEVBQ1ZsMkIsS0FBS28yQixHQUFLdjJCLEtBQUsrbEIsT0FBU2dPLEVBQUtHLElBSTlCLE1BRUQsSUFBSyxNQUVKL3pCLEtBQUtvMkIsR0FBS3YyQixLQUFLK3JDLEtBQU14b0IsRUFBTzBRLEdBQU8sRUFBRyxJQUVqQ2owQixLQUFLMlIsSUFBS3NpQixHQUFRLFVBRXRCOXpCLEtBQUtrMkIsR0FBS3IyQixLQUFLK2xCLE9BQVNvTyxFQUFLRCxHQUM3Qi96QixLQUFLbTJCLEdBQUt0MkIsS0FBSytsQixPQUFTcU8sRUFBS04sS0FJN0IzekIsS0FBS2syQixHQUFLLEVBQ1ZsMkIsS0FBS20yQixHQUFLdDJCLEtBQUsrbEIsTUFBT2lPLEVBQUtNLElBSTVCLE1BRUQsSUFBSyxNQUVKbjBCLEtBQUtvMkIsR0FBS3YyQixLQUFLK3JDLE1BQVF4b0IsRUFBT3dRLEdBQU8sRUFBRyxJQUVuQy96QixLQUFLMlIsSUFBS29pQixHQUFRLFVBRXRCNXpCLEtBQUtrMkIsR0FBS3IyQixLQUFLK2xCLE1BQU9zTyxFQUFLSCxHQUMzQi96QixLQUFLbTJCLEdBQUt0MkIsS0FBSytsQixNQUFPaU8sRUFBS0YsS0FJM0IzekIsS0FBS2syQixHQUFLcjJCLEtBQUsrbEIsT0FBU29PLEVBQUtHLEdBQzdCbjBCLEtBQUttMkIsR0FBSyxHQUlYLE1BRUQsUUFFQ3h6QixRQUFRdWhCLEtBQU0sdUVBQXlFK1QsR0FRekYsT0FKQWo0QixLQUFLazRCLE9BQVNELEdBRUUsSUFBWEYsR0FBa0IvM0IsS0FBSzIzQixvQkFFckIzM0IsS0FJUjZyQyxrQkFBbUI1c0MsRUFBR2c1QixFQUFPRixHQUk1QixPQUZBeVQsR0FBVXZELDJCQUE0QmhwQyxHQUUvQmUsS0FBSzQ0QixzQkFBdUI0UyxHQUFXdlQsRUFBT0YsR0FJdEQrVCxlQUFnQjdyQyxFQUFHZzRCLEVBQVFqNEIsS0FBS2s0QixRQUUvQixPQUFPbDRCLEtBQUsyTSxJQUFLMU0sRUFBRVUsRUFBR1YsRUFBRVksRUFBR1osRUFBRWlCLEVBQUcrMkIsR0FJakM4VCxRQUFTQyxHQU1SLE9BRkFQLEdBQWM1VCxhQUFjNzNCLE1BRXJCQSxLQUFLNnJDLGtCQUFtQkosR0FBZU8sR0FJL0MxbEIsT0FBUXdSLEdBRVAsT0FBU0EsRUFBTTVCLEtBQU9sMkIsS0FBS2syQixJQUFVNEIsRUFBTTNCLEtBQU9uMkIsS0FBS20yQixJQUFVMkIsRUFBTTFCLEtBQU9wMkIsS0FBS28yQixJQUFVMEIsRUFBTUksU0FBV2w0QixLQUFLazRCLE9BSXBIM1IsVUFBVzdELEdBU1YsT0FQQTFpQixLQUFLazJCLEdBQUt4VCxFQUFPLEdBQ2pCMWlCLEtBQUttMkIsR0FBS3pULEVBQU8sR0FDakIxaUIsS0FBS28yQixHQUFLMVQsRUFBTyxRQUNHbEQsSUFBZmtELEVBQU8sS0FBb0IxaUIsS0FBS2s0QixPQUFTeFYsRUFBTyxJQUVyRDFpQixLQUFLMjNCLG9CQUVFMzNCLEtBSVJ5bUIsUUFBUy9ELEVBQVEsR0FBSThELEVBQVMsR0FPN0IsT0FMQTlELEVBQU84RCxHQUFXeG1CLEtBQUtrMkIsR0FDdkJ4VCxFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUttMkIsR0FDM0J6VCxFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUtvMkIsR0FDM0IxVCxFQUFPOEQsRUFBUyxHQUFNeG1CLEtBQUtrNEIsT0FFcEJ4VixFQUlSZ1ksVUFBV0MsR0FJVixPQUZBMzZCLEtBQUsyM0Isa0JBQW9CZ0QsRUFFbEIzNkIsS0FJUjIzQixzQkFJRCtULEdBQU1uc0MsVUFBVXk0QixTQUFVLEVBRTFCMFQsR0FBTUMsYUFBZSxNQUNyQkQsR0FBTU8sZUFBaUIsQ0FBRSxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FFNUQsTUFBTUMsR0FFTHZqQyxjQUVDM0ksS0FBS21zQyxLQUFPLEVBSWJ4L0IsSUFBS3kvQixHQUVKcHNDLEtBQUttc0MsTUFBUyxHQUFLQyxFQUFVLEtBQVEsRUFJdENDLE9BQVFELEdBRVBwc0MsS0FBS21zQyxNQUFRLEdBQUtDLEVBQVUsRUFJN0JFLFlBRUN0c0MsS0FBS21zQyxNQUFPLEVBSWJJLE9BQVFILEdBRVBwc0MsS0FBS21zQyxNQUFRLEdBQUtDLEVBQVUsRUFJN0JJLFFBQVNKLEdBRVJwc0MsS0FBS21zQyxRQUFZLEdBQUtDLEVBQVUsR0FJakNLLGFBRUN6c0MsS0FBS21zQyxLQUFPLEVBSWI3Z0MsS0FBTW9oQyxHQUVMLE9BQXVDLElBQTlCMXNDLEtBQUttc0MsS0FBT08sRUFBT1AsTUFJN0JRLFVBQVdQLEdBRVYsT0FBZ0QsSUFBdkNwc0MsS0FBS21zQyxNQUFTLEdBQUtDLEVBQVUsS0FNeEMsSUFBSVEsR0FBYyxFQUVsQixNQUFNQyxHQUFzQixJQUFJaFMsR0FDMUJpUyxHQUFvQixJQUFJN1csR0FDeEI4VyxHQUFzQixJQUFJdkcsR0FDMUJ3RyxHQUF3QixJQUFJblMsR0FFNUJvUyxHQUE0QixJQUFJcFMsR0FDaENxUyxHQUF5QixJQUFJclMsR0FDN0JzUyxHQUE4QixJQUFJbFgsR0FFbENtWCxHQUF1QixJQUFJdlMsR0FBUyxFQUFHLEVBQUcsR0FDMUN3UyxHQUF1QixJQUFJeFMsR0FBUyxFQUFHLEVBQUcsR0FDMUN5UyxHQUF1QixJQUFJelMsR0FBUyxFQUFHLEVBQUcsR0FFMUMwUyxHQUFjLENBQUUxMkIsS0FBTSxTQUN0QjIyQixHQUFnQixDQUFFMzJCLEtBQU0sV0FFOUIsTUFBTTQyQixXQUFpQnZyQixFQUV0QnZaLGNBRUM4b0IsUUFFQXZ5QixPQUFPRSxlQUFnQlksS0FBTSxLQUFNLENBQUVoQixNQUFPNHRDLE9BRTVDNXNDLEtBQUtrd0IsS0FBT3BOLElBRVo5aUIsS0FBS3FXLEtBQU8sR0FDWnJXLEtBQUs2VyxLQUFPLFdBRVo3VyxLQUFLMHRDLE9BQVMsS0FDZDF0QyxLQUFLbWdDLFNBQVcsR0FFaEJuZ0MsS0FBS3NvQyxHQUFLbUYsR0FBU0UsVUFBVTVwQixRQUU3QixNQUFNK2IsRUFBVyxJQUFJakYsR0FDZmp6QixFQUFXLElBQUk4akMsR0FDZjlULEVBQWEsSUFBSTNCLEdBQ2pCbEwsRUFBUSxJQUFJOFAsR0FBUyxFQUFHLEVBQUcsR0FjakNqekIsRUFBUzh5QixXQVpULFdBRUM5QyxFQUFXQyxhQUFjandCLEdBQVUsTUFXcENnd0IsRUFBVzhDLFdBUFgsV0FFQzl5QixFQUFTaWtDLGtCQUFtQmpVLE9BQVlwWSxHQUFXLE1BT3BEdGdCLE9BQU9DLGlCQUFrQmEsS0FBTSxDQUM5QjgvQixTQUFVLENBQ1R6L0IsY0FBYyxFQUNkcU4sWUFBWSxFQUNaMU8sTUFBTzhnQyxHQUVSbDRCLFNBQVUsQ0FDVHZILGNBQWMsRUFDZHFOLFlBQVksRUFDWjFPLE1BQU80SSxHQUVSZ3dCLFdBQVksQ0FDWHYzQixjQUFjLEVBQ2RxTixZQUFZLEVBQ1oxTyxNQUFPNDRCLEdBRVI3TSxNQUFPLENBQ04xcUIsY0FBYyxFQUNkcU4sWUFBWSxFQUNaMU8sTUFBTytyQixHQUVSNmlCLGdCQUFpQixDQUNoQjV1QyxNQUFPLElBQUl3bkMsSUFFWnFILGFBQWMsQ0FDYjd1QyxNQUFPLElBQUltb0IsS0FJYm5uQixLQUFLaXJCLE9BQVMsSUFBSXViLEdBQ2xCeG1DLEtBQUtrOEIsWUFBYyxJQUFJc0ssR0FFdkJ4bUMsS0FBSzZ4QixpQkFBbUI0YixHQUFTSyx3QkFDakM5dEMsS0FBSyt0Qyx3QkFBeUIsRUFFOUIvdEMsS0FBSzBzQyxPQUFTLElBQUlSLEdBQ2xCbHNDLEtBQUtndUMsU0FBVSxFQUVmaHVDLEtBQUtpdUMsWUFBYSxFQUNsQmp1QyxLQUFLa3VDLGVBQWdCLEVBRXJCbHVDLEtBQUttdUMsZUFBZ0IsRUFDckJudUMsS0FBS291QyxZQUFjLEVBRW5CcHVDLEtBQUtxdUMsV0FBYSxHQUVsQnJ1QyxLQUFLa3lCLFNBQVcsR0FJakJvYyxrQkFFQUMsaUJBRUFsYixhQUFjcEksR0FFUmpyQixLQUFLNnhCLGtCQUFtQjd4QixLQUFLc3lCLGVBRWxDdHlCLEtBQUtpckIsT0FBTzFDLFlBQWEwQyxHQUV6QmpyQixLQUFLaXJCLE9BQU95ZixVQUFXMXFDLEtBQUs4L0IsU0FBVTkvQixLQUFLNDNCLFdBQVk1M0IsS0FBSytxQixPQUk3RGlRLGdCQUFpQi83QixHQUloQixPQUZBZSxLQUFLNDNCLFdBQVdyUCxZQUFhdHBCLEdBRXRCZSxLQUlSd3VDLHlCQUEwQjlWLEVBQU0vUyxHQUkvQjNsQixLQUFLNDNCLFdBQVdhLGlCQUFrQkMsRUFBTS9TLEdBSXpDOG9CLHFCQUFzQjNXLEdBRXJCOTNCLEtBQUs0M0IsV0FBV0MsYUFBY0MsR0FBTyxHQUl0QzRXLHNCQUF1Qnp0QyxHQUl0QmpCLEtBQUs0M0IsV0FBV2dCLHNCQUF1QjMzQixHQUl4QzB0QywwQkFBMkIxdkMsR0FJMUJlLEtBQUs0M0IsV0FBVzVULEtBQU0va0IsR0FJdkIydkMsYUFBY2xXLEVBQU0vUyxHQVNuQixPQUpBbW5CLEdBQUlyVSxpQkFBa0JDLEVBQU0vUyxHQUU1QjNsQixLQUFLNDNCLFdBQVduVCxTQUFVcW9CLElBRW5COXNDLEtBSVI2dUMsa0JBQW1CblcsRUFBTS9TLEdBVXhCLE9BSkFtbkIsR0FBSXJVLGlCQUFrQkMsRUFBTS9TLEdBRTVCM2xCLEtBQUs0M0IsV0FBV3JQLFlBQWF1a0IsSUFFdEI5c0MsS0FJUjh1QyxRQUFTbnBCLEdBRVIsT0FBTzNsQixLQUFLNHVDLGFBQWN4QixHQUFRem5CLEdBSW5Db3BCLFFBQVNwcEIsR0FFUixPQUFPM2xCLEtBQUs0dUMsYUFBY3ZCLEdBQVExbkIsR0FJbkNxcEIsUUFBU3JwQixHQUVSLE9BQU8zbEIsS0FBSzR1QyxhQUFjdEIsR0FBUTNuQixHQUluQ3NwQixnQkFBaUJ2VyxFQUFNd1csR0FTdEIsT0FKQXJDLEdBQU03b0IsS0FBTTBVLEdBQU9zQyxnQkFBaUJoN0IsS0FBSzQzQixZQUV6QzUzQixLQUFLOC9CLFNBQVM3YixJQUFLNG9CLEdBQU1ub0IsZUFBZ0J3cUIsSUFFbENsdkMsS0FJUm12QyxXQUFZRCxHQUVYLE9BQU9sdkMsS0FBS2l2QyxnQkFBaUI3QixHQUFROEIsR0FJdENFLFdBQVlGLEdBRVgsT0FBT2x2QyxLQUFLaXZDLGdCQUFpQjVCLEdBQVE2QixHQUl0Q0csV0FBWUgsR0FFWCxPQUFPbHZDLEtBQUtpdkMsZ0JBQWlCM0IsR0FBUTRCLEdBSXRDSSxhQUFjN1AsR0FFYixPQUFPQSxFQUFPcE0sYUFBY3J6QixLQUFLazhCLGFBSWxDcVQsYUFBYzlQLEdBRWIsT0FBT0EsRUFBT3BNLGFBQWMwWixHQUFNL29CLEtBQU1oa0IsS0FBS2s4QixhQUFjclMsVUFJNURpYSxPQUFRbmpDLEVBQUdFLEVBQUdLLEdBSVJQLEVBQUVtOUIsVUFFTmtQLEdBQVFocEIsS0FBTXJqQixHQUlkcXNDLEdBQVFyZ0MsSUFBS2hNLEVBQUdFLEVBQUdLLEdBSXBCLE1BQU13c0MsRUFBUzF0QyxLQUFLMHRDLE9BRXBCMXRDLEtBQUsyL0IsbUJBQW1CLEdBQU0sR0FFOUJzTixHQUFZeFAsc0JBQXVCejlCLEtBQUtrOEIsYUFFbkNsOEIsS0FBS3d2QyxVQUFZeHZDLEtBQUt5dkMsUUFFMUIxQyxHQUFNakosT0FBUW1KLEdBQWFELEdBQVNodEMsS0FBS3NvQyxJQUl6Q3lFLEdBQU1qSixPQUFRa0osR0FBU0MsR0FBYWp0QyxLQUFLc29DLElBSTFDdG9DLEtBQUs0M0IsV0FBV2dCLHNCQUF1Qm1VLElBRWxDVyxJQUVKWCxHQUFNNUYsZ0JBQWlCdUcsRUFBT3hSLGFBQzlCNFEsR0FBSWxVLHNCQUF1Qm1VLElBQzNCL3NDLEtBQUs0M0IsV0FBV3JQLFlBQWF1a0IsR0FBSWpqQixXQU1uQzVGLElBQUsrYSxHQUVKLEdBQUtqN0IsVUFBVWpGLE9BQVMsRUFBSSxDQUUzQixJQUFNLElBQUlnQyxFQUFJLEVBQUdBLEVBQUlpRCxVQUFVakYsT0FBUWdDLElBRXRDZCxLQUFLaWtCLElBQUtsZ0IsVUFBV2pELElBSXRCLE9BQU9kLEtBSVIsT0FBS2cvQixJQUFXaC9CLE1BRWYyQyxRQUFRQyxNQUFPLGtFQUFvRW84QixHQUM1RWgvQixPQUlIZy9CLEdBQVVBLEVBQU8wUSxZQUVFLE9BQWxCMVEsRUFBTzBPLFFBRVgxTyxFQUFPME8sT0FBT2lDLE9BQVEzUSxHQUl2QkEsRUFBTzBPLE9BQVMxdEMsS0FDaEJBLEtBQUttZ0MsU0FBUzM5QixLQUFNdzhCLEdBRXBCQSxFQUFPajhCLGNBQWV3cUMsS0FJdEI1cUMsUUFBUUMsTUFBTyxnRUFBaUVvOEIsR0FJMUVoL0IsTUFJUjJ2QyxPQUFRM1EsR0FFUCxHQUFLajdCLFVBQVVqRixPQUFTLEVBQUksQ0FFM0IsSUFBTSxJQUFJZ0MsRUFBSSxFQUFHQSxFQUFJaUQsVUFBVWpGLE9BQVFnQyxJQUV0Q2QsS0FBSzJ2QyxPQUFRNXJDLFVBQVdqRCxJQUl6QixPQUFPZCxLQUlSLE1BQU00RyxFQUFRNUcsS0FBS21nQyxTQUFTeDJCLFFBQVNxMUIsR0FXckMsT0FUaUIsSUFBWnA0QixJQUVKbzRCLEVBQU8wTyxPQUFTLEtBQ2hCMXRDLEtBQUttZ0MsU0FBU3J4QixPQUFRbEksRUFBTyxHQUU3Qm80QixFQUFPajhCLGNBQWV5cUMsS0FJaEJ4dEMsS0FJUjR2QyxtQkFFQyxNQUFNbEMsRUFBUzF0QyxLQUFLMHRDLE9BUXBCLE9BTmdCLE9BQVhBLEdBRUpBLEVBQU9pQyxPQUFRM3ZDLE1BSVRBLEtBSVJ1VSxRQUVDLElBQU0sSUFBSXpULEVBQUksRUFBR0EsRUFBSWQsS0FBS21nQyxTQUFTcmhDLE9BQVFnQyxJQUFPLENBRWpELE1BQU1rK0IsRUFBU2gvQixLQUFLbWdDLFNBQVVyL0IsR0FFOUJrK0IsRUFBTzBPLE9BQVMsS0FFaEIxTyxFQUFPajhCLGNBQWV5cUMsSUFNdkIsT0FGQXh0QyxLQUFLbWdDLFNBQVNyaEMsT0FBUyxFQUVoQmtCLEtBS1I2dkMsT0FBUTdRLEdBd0JQLE9BbEJBaC9CLEtBQUsyL0IsbUJBQW1CLEdBQU0sR0FFOUJvTixHQUFNL29CLEtBQU1oa0IsS0FBS2s4QixhQUFjclMsU0FFUixPQUFsQm1WLEVBQU8wTyxTQUVYMU8sRUFBTzBPLE9BQU8vTixtQkFBbUIsR0FBTSxHQUV2Q29OLEdBQU10b0IsU0FBVXVhLEVBQU8wTyxPQUFPeFIsY0FJL0I4QyxFQUFPM0wsYUFBYzBaLElBRXJCL3NDLEtBQUtpa0IsSUFBSythLEdBRVZBLEVBQU9XLG1CQUFtQixHQUFPLEdBRTFCMy9CLEtBSVI4dkMsY0FBZUMsR0FFZCxPQUFPL3ZDLEtBQUtnd0Msb0JBQXFCLEtBQU1ELEdBSXhDRSxnQkFBaUI1NUIsR0FFaEIsT0FBT3JXLEtBQUtnd0Msb0JBQXFCLE9BQVEzNUIsR0FJMUMyNUIsb0JBQXFCMzVCLEVBQU1yWCxHQUUxQixHQUFLZ0IsS0FBTXFXLEtBQVdyWCxFQUFRLE9BQU9nQixLQUVyQyxJQUFNLElBQUljLEVBQUksRUFBR1csRUFBSXpCLEtBQUttZ0MsU0FBU3JoQyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUV4RCxNQUNNaytCLEVBRFFoL0IsS0FBS21nQyxTQUFVci9CLEdBQ1JrdkMsb0JBQXFCMzVCLEVBQU1yWCxHQUVoRCxRQUFnQndnQixJQUFYd2YsRUFFSixPQUFPQSxHQVVWa1IsaUJBQWtCenRCLEdBSWpCLE9BRkF6aUIsS0FBSzIvQixtQkFBbUIsR0FBTSxHQUV2QmxkLEVBQU9nYixzQkFBdUJ6OUIsS0FBS2s4QixhQUkzQ2lVLG1CQUFvQjF0QixHQU1uQixPQUpBemlCLEtBQUsyL0IsbUJBQW1CLEdBQU0sR0FFOUIzL0IsS0FBS2s4QixZQUFZd08sVUFBV3VDLEdBQWF4cUIsRUFBUXlxQixJQUUxQ3pxQixFQUlSMnRCLGNBQWUzdEIsR0FNZCxPQUpBemlCLEtBQUsyL0IsbUJBQW1CLEdBQU0sR0FFOUIzL0IsS0FBS2s4QixZQUFZd08sVUFBV3VDLEdBQWFFLEdBQWUxcUIsR0FFakRBLEVBSVI0dEIsa0JBQW1CNXRCLEdBRWxCemlCLEtBQUsyL0IsbUJBQW1CLEdBQU0sR0FFOUIsTUFBTXRnQyxFQUFJVyxLQUFLazhCLFlBQVlwWCxTQUUzQixPQUFPckMsRUFBTzlWLElBQUt0TixFQUFHLEdBQUtBLEVBQUcsR0FBS0EsRUFBRyxLQUFPcW1CLFlBSTlDNHFCLFdBRUFDLFNBQVU1VixHQUVUQSxFQUFVMzZCLE1BRVYsTUFBTW1nQyxFQUFXbmdDLEtBQUttZ0MsU0FFdEIsSUFBTSxJQUFJci9CLEVBQUksRUFBR1csRUFBSTArQixFQUFTcmhDLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUU1Q3EvQixFQUFVci9CLEdBQUl5dkMsU0FBVTVWLEdBTTFCNlYsZ0JBQWlCN1YsR0FFaEIsSUFBc0IsSUFBakIzNkIsS0FBS2d1QyxRQUFvQixPQUU5QnJULEVBQVUzNkIsTUFFVixNQUFNbWdDLEVBQVduZ0MsS0FBS21nQyxTQUV0QixJQUFNLElBQUlyL0IsRUFBSSxFQUFHVyxFQUFJMCtCLEVBQVNyaEMsT0FBUWdDLEVBQUlXLEVBQUdYLElBRTVDcS9CLEVBQVVyL0IsR0FBSTB2QyxnQkFBaUI3VixHQU1qQzhWLGtCQUFtQjlWLEdBRWxCLE1BQU0rUyxFQUFTMXRDLEtBQUswdEMsT0FFSixPQUFYQSxJQUVKL1MsRUFBVStTLEdBRVZBLEVBQU8rQyxrQkFBbUI5VixJQU01QnJJLGVBRUN0eUIsS0FBS2lyQixPQUFPaWQsUUFBU2xvQyxLQUFLOC9CLFNBQVU5L0IsS0FBSzQzQixXQUFZNTNCLEtBQUsrcUIsT0FFMUQvcUIsS0FBSyt0Qyx3QkFBeUIsRUFJL0IyQyxrQkFBbUJDLEdBRWIzd0MsS0FBSzZ4QixrQkFBbUI3eEIsS0FBS3N5QixnQkFFN0J0eUIsS0FBSyt0Qyx3QkFBMEI0QyxLQUVkLE9BQWhCM3dDLEtBQUswdEMsT0FFVDF0QyxLQUFLazhCLFlBQVlsWSxLQUFNaGtCLEtBQUtpckIsUUFJNUJqckIsS0FBS2s4QixZQUFZNVQsaUJBQWtCdG9CLEtBQUswdEMsT0FBT3hSLFlBQWFsOEIsS0FBS2lyQixRQUlsRWpyQixLQUFLK3RDLHdCQUF5QixFQUU5QjRDLEdBQVEsR0FNVCxNQUFNeFEsRUFBV25nQyxLQUFLbWdDLFNBRXRCLElBQU0sSUFBSXIvQixFQUFJLEVBQUdXLEVBQUkwK0IsRUFBU3JoQyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFNUNxL0IsRUFBVXIvQixHQUFJNHZDLGtCQUFtQkMsR0FNbkNoUixrQkFBbUJpUixFQUFlQyxHQUVqQyxNQUFNbkQsRUFBUzF0QyxLQUFLMHRDLE9Bc0JwQixJQXBCdUIsSUFBbEJrRCxHQUFxQyxPQUFYbEQsR0FFOUJBLEVBQU8vTixtQkFBbUIsR0FBTSxHQUk1QjMvQixLQUFLNnhCLGtCQUFtQjd4QixLQUFLc3lCLGVBRWIsT0FBaEJ0eUIsS0FBSzB0QyxPQUVUMXRDLEtBQUtrOEIsWUFBWWxZLEtBQU1oa0IsS0FBS2lyQixRQUk1QmpyQixLQUFLazhCLFlBQVk1VCxpQkFBa0J0b0IsS0FBSzB0QyxPQUFPeFIsWUFBYWw4QixLQUFLaXJCLFNBTTFDLElBQW5CNGxCLEVBQTBCLENBRTlCLE1BQU0xUSxFQUFXbmdDLEtBQUttZ0MsU0FFdEIsSUFBTSxJQUFJci9CLEVBQUksRUFBR1csRUFBSTArQixFQUFTcmhDLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUU1Q3EvQixFQUFVci9CLEdBQUk2K0IsbUJBQW1CLEdBQU8sSUFRM0MvekIsT0FBUXlrQixHQUdQLE1BQU1DLE9BQTBCOVEsSUFBVDZRLEdBQXNDLGlCQUFUQSxFQUU5Q0csRUFBUyxHQUtWRixJQUdKRCxFQUFPLENBQ055Z0IsV0FBWSxHQUNaQyxVQUFXLEdBQ1hyZSxTQUFVLEdBQ1ZuQyxPQUFRLEdBQ1J5Z0IsT0FBUSxHQUNSQyxVQUFXLEdBQ1g1QyxXQUFZLEdBQ1o2QyxNQUFPLElBR1IxZ0IsRUFBT21DLFNBQVcsQ0FDakJ4QyxRQUFTLElBQ1R0WixLQUFNLFNBQ04rYixVQUFXLG9CQU9iLE1BQU1vTSxFQUFTLEdBK0JmLFNBQVNtUyxFQUFXQyxFQUFTQyxHQVE1QixZQU5pQzd4QixJQUE1QjR4QixFQUFTQyxFQUFRbmhCLFFBRXJCa2hCLEVBQVNDLEVBQVFuaEIsTUFBU21oQixFQUFRemxDLE9BQVF5a0IsSUFJcENnaEIsRUFBUW5oQixLQUloQixHQXpDQThPLEVBQU85TyxLQUFPbHdCLEtBQUtrd0IsS0FDbkI4TyxFQUFPbm9CLEtBQU83VyxLQUFLNlcsS0FFQSxLQUFkN1csS0FBS3FXLE9BQWMyb0IsRUFBTzNvQixLQUFPclcsS0FBS3FXLE9BQ2xCLElBQXBCclcsS0FBS2l1QyxhQUFzQmpQLEVBQU9pUCxZQUFhLElBQ3hCLElBQXZCanVDLEtBQUtrdUMsZ0JBQXlCbFAsRUFBT2tQLGVBQWdCLElBQ3BDLElBQWpCbHVDLEtBQUtndUMsVUFBb0JoUCxFQUFPZ1AsU0FBVSxJQUNuQixJQUF2Qmh1QyxLQUFLbXVDLGdCQUEwQm5QLEVBQU9tUCxlQUFnQixHQUNqQyxJQUFyQm51QyxLQUFLb3VDLGNBQW9CcFAsRUFBT29QLFlBQWNwdUMsS0FBS291QyxhQUNmLE9BQXBDN2IsS0FBS0UsVUFBV3p5QixLQUFLa3lCLFlBQXNCOE0sRUFBTzlNLFNBQVdseUIsS0FBS2t5QixVQUV2RThNLEVBQU8wTixPQUFTMXNDLEtBQUswc0MsT0FBT1AsS0FDNUJuTixFQUFPL1QsT0FBU2pyQixLQUFLaXJCLE9BQU94RSxXQUVHLElBQTFCem1CLEtBQUs2eEIsbUJBQTZCbU4sRUFBT25OLGtCQUFtQixHQUk1RDd4QixLQUFLc3hDLGtCQUVUdFMsRUFBT25vQixLQUFPLGdCQUNkbW9CLEVBQU9sSixNQUFROTFCLEtBQUs4MUIsTUFDcEJrSixFQUFPdVMsZUFBaUJ2eEMsS0FBS3V4QyxlQUFlM2xDLFNBQ2hCLE9BQXZCNUwsS0FBS3d4QyxnQkFBeUJ4UyxFQUFPd1MsY0FBZ0J4eEMsS0FBS3d4QyxjQUFjNWxDLFdBa0J6RTVMLEtBQUt5eEMsUUFFSnp4QyxLQUFLMHhDLGFBRUoxeEMsS0FBSzB4QyxXQUFXeGtCLFFBRXBCOFIsRUFBTzBTLFdBQWExeEMsS0FBSzB4QyxXQUFXOWxDLFNBRXpCNUwsS0FBSzB4QyxXQUFXemUsWUFFM0IrTCxFQUFPMFMsV0FBYTF4QyxLQUFLMHhDLFdBQVc5bEMsT0FBUXlrQixHQUFPSCxPQU1oRGx3QixLQUFLMnhDLGFBQWUzeEMsS0FBSzJ4QyxZQUFZMWUsWUFFekMrTCxFQUFPMlMsWUFBYzN4QyxLQUFLMnhDLFlBQVkvbEMsT0FBUXlrQixHQUFPSCxXQUloRCxHQUFLbHdCLEtBQUs0eEMsUUFBVTV4QyxLQUFLNnhDLFFBQVU3eEMsS0FBSzh4QyxTQUFXLENBRXpEOVMsRUFBT1ksU0FBV3VSLEVBQVc5Z0IsRUFBS3lnQixXQUFZOXdDLEtBQUs0L0IsVUFFbkQsTUFBTW1TLEVBQWEveEMsS0FBSzQvQixTQUFTbVMsV0FFakMsUUFBb0J2eUIsSUFBZnV5QixRQUFrRHZ5QixJQUF0QnV5QixFQUFXZixPQUF1QixDQUVsRSxNQUFNQSxFQUFTZSxFQUFXZixPQUUxQixHQUFLMXhDLE1BQU11TyxRQUFTbWpDLEdBRW5CLElBQU0sSUFBSWx3QyxFQUFJLEVBQUdXLEVBQUl1dkMsRUFBT2x5QyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUVqRCxNQUFNa3hDLEVBQVFoQixFQUFRbHdDLEdBRXRCcXdDLEVBQVc5Z0IsRUFBSzJnQixPQUFRZ0IsUUFNekJiLEVBQVc5Z0IsRUFBSzJnQixPQUFRQSxJQXVCM0IsR0FmS2h4QyxLQUFLaXlDLGdCQUVUalQsRUFBT2tULFNBQVdseUMsS0FBS2t5QyxTQUN2QmxULEVBQU9tVCxXQUFhbnlDLEtBQUtteUMsV0FBVzFyQixlQUViakgsSUFBbEJ4ZixLQUFLb3lDLFdBRVRqQixFQUFXOWdCLEVBQUs0Z0IsVUFBV2p4QyxLQUFLb3lDLFVBRWhDcFQsRUFBT29ULFNBQVdweUMsS0FBS295QyxTQUFTbGlCLFlBTVgxUSxJQUFsQnhmLEtBQUtxeUMsU0FFVCxHQUFLL3lDLE1BQU11TyxRQUFTN04sS0FBS3F5QyxVQUFhLENBRXJDLE1BQU1DLEVBQVEsR0FFZCxJQUFNLElBQUl4eEMsRUFBSSxFQUFHVyxFQUFJekIsS0FBS3F5QyxTQUFTdnpDLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUVqRHd4QyxFQUFNOXZDLEtBQU0ydUMsRUFBVzlnQixFQUFLMGdCLFVBQVcvd0MsS0FBS3F5QyxTQUFVdnhDLEtBSXZEaytCLEVBQU9xVCxTQUFXQyxPQUlsQnRULEVBQU9xVCxTQUFXbEIsRUFBVzlnQixFQUFLMGdCLFVBQVcvd0MsS0FBS3F5QyxVQVFwRCxHQUFLcnlDLEtBQUttZ0MsU0FBU3JoQyxPQUFTLEVBQUksQ0FFL0JrZ0MsRUFBT21CLFNBQVcsR0FFbEIsSUFBTSxJQUFJci9CLEVBQUksRUFBR0EsRUFBSWQsS0FBS21nQyxTQUFTcmhDLE9BQVFnQyxJQUUxQ2srQixFQUFPbUIsU0FBUzM5QixLQUFNeEMsS0FBS21nQyxTQUFVci9CLEdBQUk4SyxPQUFReWtCLEdBQU8yTyxRQVExRCxHQUFLaC9CLEtBQUtxdUMsV0FBV3Z2QyxPQUFTLEVBQUksQ0FFakNrZ0MsRUFBT3FQLFdBQWEsR0FFcEIsSUFBTSxJQUFJdnRDLEVBQUksRUFBR0EsRUFBSWQsS0FBS3F1QyxXQUFXdnZDLE9BQVFnQyxJQUFPLENBRW5ELE1BQU15eEMsRUFBWXZ5QyxLQUFLcXVDLFdBQVl2dEMsR0FFbkNrK0IsRUFBT3FQLFdBQVc3ckMsS0FBTTJ1QyxFQUFXOWdCLEVBQUtnZSxXQUFZa0UsS0FNdEQsR0FBS2ppQixFQUFlLENBRW5CLE1BQU13Z0IsRUFBYTBCLEVBQWtCbmlCLEVBQUt5Z0IsWUFDcENDLEVBQVl5QixFQUFrQm5pQixFQUFLMGdCLFdBQ25DcmUsRUFBVzhmLEVBQWtCbmlCLEVBQUtxQyxVQUNsQ25DLEVBQVNpaUIsRUFBa0JuaUIsRUFBS0UsUUFDaEN5Z0IsRUFBU3dCLEVBQWtCbmlCLEVBQUsyZ0IsUUFDaENDLEVBQVl1QixFQUFrQm5pQixFQUFLNGdCLFdBQ25DNUMsRUFBYW1FLEVBQWtCbmlCLEVBQUtnZSxZQUNwQzZDLEVBQVFzQixFQUFrQm5pQixFQUFLNmdCLE9BRWhDSixFQUFXaHlDLE9BQVMsSUFBSTB4QixFQUFPc2dCLFdBQWFBLEdBQzVDQyxFQUFVanlDLE9BQVMsSUFBSTB4QixFQUFPdWdCLFVBQVlBLEdBQzFDcmUsRUFBUzV6QixPQUFTLElBQUkweEIsRUFBT2tDLFNBQVdBLEdBQ3hDbkMsRUFBT3p4QixPQUFTLElBQUkweEIsRUFBT0QsT0FBU0EsR0FDcEN5Z0IsRUFBT2x5QyxPQUFTLElBQUkweEIsRUFBT3dnQixPQUFTQSxHQUNwQ0MsRUFBVW55QyxPQUFTLElBQUkweEIsRUFBT3lnQixVQUFZQSxHQUMxQzVDLEVBQVd2dkMsT0FBUyxJQUFJMHhCLEVBQU82ZCxXQUFhQSxHQUM1QzZDLEVBQU1weUMsT0FBUyxJQUFJMHhCLEVBQU8wZ0IsTUFBUUEsR0FNeEMsT0FGQTFnQixFQUFPd08sT0FBU0EsRUFFVHhPLEVBS1AsU0FBU2dpQixFQUFrQkMsR0FFMUIsTUFBTUMsRUFBUyxHQUNmLElBQU0sTUFBTUMsS0FBT0YsRUFBUSxDQUUxQixNQUFNejZCLEVBQU95NkIsRUFBT0UsVUFDYjM2QixFQUFLMmEsU0FDWitmLEVBQU9sd0MsS0FBTXdWLEdBSWQsT0FBTzA2QixHQU1UM3VCLE1BQU82dUIsR0FFTixPQUFPLElBQUk1eUMsS0FBSzJJLGFBQWNxYixLQUFNaGtCLEtBQU00eUMsR0FJM0M1dUIsS0FBTStJLEVBQVE2bEIsR0FBWSxHQTRCekIsR0ExQkE1eUMsS0FBS3FXLEtBQU8wVyxFQUFPMVcsS0FFbkJyVyxLQUFLc29DLEdBQUd0a0IsS0FBTStJLEVBQU91YixJQUVyQnRvQyxLQUFLOC9CLFNBQVM5YixLQUFNK0ksRUFBTytTLFVBQzNCOS9CLEtBQUs0SCxTQUFTcXdCLE1BQVFsTCxFQUFPbmxCLFNBQVNxd0IsTUFDdENqNEIsS0FBSzQzQixXQUFXNVQsS0FBTStJLEVBQU82SyxZQUM3QjUzQixLQUFLK3FCLE1BQU0vRyxLQUFNK0ksRUFBT2hDLE9BRXhCL3FCLEtBQUtpckIsT0FBT2pILEtBQU0rSSxFQUFPOUIsUUFDekJqckIsS0FBS2s4QixZQUFZbFksS0FBTStJLEVBQU9tUCxhQUU5Qmw4QixLQUFLNnhCLGlCQUFtQjlFLEVBQU84RSxpQkFDL0I3eEIsS0FBSyt0Qyx1QkFBeUJoaEIsRUFBT2doQix1QkFFckMvdEMsS0FBSzBzQyxPQUFPUCxLQUFPcGYsRUFBTzJmLE9BQU9QLEtBQ2pDbnNDLEtBQUtndUMsUUFBVWpoQixFQUFPaWhCLFFBRXRCaHVDLEtBQUtpdUMsV0FBYWxoQixFQUFPa2hCLFdBQ3pCanVDLEtBQUtrdUMsY0FBZ0JuaEIsRUFBT21oQixjQUU1Qmx1QyxLQUFLbXVDLGNBQWdCcGhCLEVBQU9vaEIsY0FDNUJudUMsS0FBS291QyxZQUFjcmhCLEVBQU9xaEIsWUFFMUJwdUMsS0FBS2t5QixTQUFXSyxLQUFLQyxNQUFPRCxLQUFLRSxVQUFXMUYsRUFBT21GLFlBRWhDLElBQWQwZ0IsRUFFSixJQUFNLElBQUk5eEMsRUFBSSxFQUFHQSxFQUFJaXNCLEVBQU9vVCxTQUFTcmhDLE9BQVFnQyxJQUFPLENBRW5ELE1BQU0reEMsRUFBUTlsQixFQUFPb1QsU0FBVXIvQixHQUMvQmQsS0FBS2lrQixJQUFLNHVCLEVBQU05dUIsU0FNbEIsT0FBTy9qQixNQU1UeXRDLEdBQVNFLFVBQVksSUFBSTlTLEdBQVMsRUFBRyxFQUFHLEdBQ3hDNFMsR0FBU0sseUJBQTBCLEVBRW5DTCxHQUFTbHVDLFVBQVVtd0MsWUFBYSxFQUVoQyxNQUFNb0QsR0FBc0IsSUFBSWpZLEdBQzFCa1ksR0FBc0IsSUFBSWxZLEdBQzFCbVksR0FBc0IsSUFBSW5ZLEdBQzFCb1ksR0FBc0IsSUFBSXBZLEdBRTFCcVksR0FBcUIsSUFBSXJZLEdBQ3pCc1ksR0FBcUIsSUFBSXRZLEdBQ3pCdVksR0FBcUIsSUFBSXZZLEdBQ3pCd1ksR0FBcUIsSUFBSXhZLEdBQ3pCeVksR0FBcUIsSUFBSXpZLEdBQ3pCMFksR0FBcUIsSUFBSTFZLEdBRS9CLE1BQU0yWSxHQUVMN3FDLFlBQWEvSixFQUFJLElBQUlpOEIsR0FBV2g4QixFQUFJLElBQUlnOEIsR0FBV241QixFQUFJLElBQUltNUIsSUFFMUQ3NkIsS0FBS3BCLEVBQUlBLEVBQ1RvQixLQUFLbkIsRUFBSUEsRUFDVG1CLEtBQUswQixFQUFJQSxFQUlWNnRCLGlCQUFrQjN3QixFQUFHQyxFQUFHNkMsRUFBRytnQixHQUUxQkEsRUFBTzhCLFdBQVk3aUIsRUFBRzdDLEdBQ3RCaTBDLEdBQU12dUIsV0FBWTNsQixFQUFHQyxHQUNyQjRqQixFQUFPNkMsTUFBT3d0QixJQUVkLE1BQU1XLEVBQWlCaHhCLEVBQU84QyxXQUM5QixPQUFLa3VCLEVBQWlCLEVBRWRoeEIsRUFBT2lDLGVBQWdCLEVBQUk3a0IsS0FBSzJsQixLQUFNaXVCLElBSXZDaHhCLEVBQU85VixJQUFLLEVBQUcsRUFBRyxHQU0xQjRpQixvQkFBcUJnUSxFQUFPM2dDLEVBQUdDLEVBQUc2QyxFQUFHK2dCLEdBRXBDcXdCLEdBQU12dUIsV0FBWTdpQixFQUFHOUMsR0FDckJtMEMsR0FBTXh1QixXQUFZMWxCLEVBQUdELEdBQ3JCbzBDLEdBQU16dUIsV0FBWWdiLEVBQU8zZ0MsR0FFekIsTUFBTTgwQyxFQUFRWixHQUFNenRCLElBQUt5dEIsSUFDbkJhLEVBQVFiLEdBQU16dEIsSUFBSzB0QixJQUNuQmEsRUFBUWQsR0FBTXp0QixJQUFLMnRCLElBQ25CYSxFQUFRZCxHQUFNMXRCLElBQUswdEIsSUFDbkJlLEVBQVFmLEdBQU0xdEIsSUFBSzJ0QixJQUVuQmUsRUFBVUwsRUFBUUcsRUFBUUYsRUFBUUEsRUFHeEMsR0FBZSxJQUFWSSxFQUlKLE9BQU90eEIsRUFBTzlWLEtBQU8sR0FBSyxHQUFLLEdBSWhDLE1BQU1xbkMsRUFBVyxFQUFJRCxFQUNmdjBDLEdBQU1xMEMsRUFBUUQsRUFBUUQsRUFBUUcsR0FBVUUsRUFDeEMvekMsR0FBTXl6QyxFQUFRSSxFQUFRSCxFQUFRQyxHQUFVSSxFQUc5QyxPQUFPdnhCLEVBQU85VixJQUFLLEVBQUluTixFQUFJUyxFQUFHQSxFQUFHVCxHQUlsQyt2QixxQkFBc0JnUSxFQUFPM2dDLEVBQUdDLEVBQUc2QyxHQUlsQyxPQUZBMUIsS0FBS2kwQyxhQUFjMVUsRUFBTzNnQyxFQUFHQyxFQUFHNkMsRUFBR3V4QyxJQUUxQkEsR0FBTXR5QyxHQUFLLEdBQVNzeUMsR0FBTXB5QyxHQUFLLEdBQVdveUMsR0FBTXR5QyxFQUFJc3lDLEdBQU1weUMsR0FBTyxFQUkzRTB1QixhQUFjZ1EsRUFBTzZDLEVBQUlDLEVBQUk2UixFQUFJQyxFQUFLQyxFQUFLQyxFQUFLNXhCLEdBUy9DLE9BUEF6aUIsS0FBS2kwQyxhQUFjMVUsRUFBTzZDLEVBQUlDLEVBQUk2UixFQUFJakIsSUFFdEN4d0IsRUFBTzlWLElBQUssRUFBRyxHQUNmOFYsRUFBTzRCLGdCQUFpQjh2QixFQUFLbEIsR0FBTXR5QyxHQUNuQzhoQixFQUFPNEIsZ0JBQWlCK3ZCLEVBQUtuQixHQUFNcHlDLEdBQ25DNGhCLEVBQU80QixnQkFBaUJnd0IsRUFBS3BCLEdBQU0veEMsR0FFNUJ1aEIsRUFJUjhNLHFCQUFzQjN3QixFQUFHQyxFQUFHNkMsRUFBR2lpQyxHQU05QixPQUpBbVAsR0FBTXZ1QixXQUFZN2lCLEVBQUc3QyxHQUNyQmswQyxHQUFNeHVCLFdBQVkzbEIsRUFBR0MsR0FHWmkwQyxHQUFNeHRCLE1BQU95dEIsSUFBUTF0QixJQUFLc2UsR0FBYyxFQUlsRGgzQixJQUFLL04sRUFBR0MsRUFBRzZDLEdBTVYsT0FKQTFCLEtBQUtwQixFQUFFb2xCLEtBQU1wbEIsR0FDYm9CLEtBQUtuQixFQUFFbWxCLEtBQU1ubEIsR0FDYm1CLEtBQUswQixFQUFFc2lCLEtBQU10aUIsR0FFTjFCLEtBSVJzMEMsd0JBQXlCN1YsRUFBUThWLEVBQUlDLEVBQUlDLEdBTXhDLE9BSkF6MEMsS0FBS3BCLEVBQUVvbEIsS0FBTXlhLEVBQVE4VixJQUNyQnYwQyxLQUFLbkIsRUFBRW1sQixLQUFNeWEsRUFBUStWLElBQ3JCeDBDLEtBQUswQixFQUFFc2lCLEtBQU15YSxFQUFRZ1csSUFFZHowQyxLQUlSMDBDLDJCQUE0Qi90QixFQUFXNHRCLEVBQUlDLEVBQUlDLEdBTTlDLE9BSkF6MEMsS0FBS3BCLEVBQUU4bkIsb0JBQXFCQyxFQUFXNHRCLEdBQ3ZDdjBDLEtBQUtuQixFQUFFNm5CLG9CQUFxQkMsRUFBVzZ0QixHQUN2Q3gwQyxLQUFLMEIsRUFBRWdsQixvQkFBcUJDLEVBQVc4dEIsR0FFaEN6MEMsS0FJUitqQixRQUVDLE9BQU8sSUFBSS9qQixLQUFLMkksYUFBY3FiLEtBQU1oa0IsTUFJckNna0IsS0FBTStjLEdBTUwsT0FKQS9nQyxLQUFLcEIsRUFBRW9sQixLQUFNK2MsRUFBU25pQyxHQUN0Qm9CLEtBQUtuQixFQUFFbWxCLEtBQU0rYyxFQUFTbGlDLEdBQ3RCbUIsS0FBSzBCLEVBQUVzaUIsS0FBTStjLEVBQVNyL0IsR0FFZjFCLEtBSVIyMEMsVUFLQyxPQUhBN0IsR0FBTXZ1QixXQUFZdmtCLEtBQUswQixFQUFHMUIsS0FBS25CLEdBQy9CazBDLEdBQU14dUIsV0FBWXZrQixLQUFLcEIsRUFBR29CLEtBQUtuQixHQUVRLEdBQWhDaTBDLEdBQU14dEIsTUFBT3l0QixJQUFRajBDLFNBSTdCODFDLFlBQWFueUIsR0FFWixPQUFPQSxFQUFPMEIsV0FBWW5rQixLQUFLcEIsRUFBR29CLEtBQUtuQixHQUFJb2xCLElBQUtqa0IsS0FBSzBCLEdBQUlnakIsZUFBZ0IsRUFBSSxHQUk5RW13QixVQUFXcHlCLEdBRVYsT0FBTyt3QixHQUFTcUIsVUFBVzcwQyxLQUFLcEIsRUFBR29CLEtBQUtuQixFQUFHbUIsS0FBSzBCLEVBQUcrZ0IsR0FJcERxeUIsU0FBVXJ5QixHQUVULE9BQU9BLEVBQU9zeUIsc0JBQXVCLzBDLEtBQUtwQixFQUFHb0IsS0FBS25CLEVBQUdtQixLQUFLMEIsR0FJM0R1eUMsYUFBYzFVLEVBQU85YyxHQUVwQixPQUFPK3dCLEdBQVNTLGFBQWMxVSxFQUFPdi9CLEtBQUtwQixFQUFHb0IsS0FBS25CLEVBQUdtQixLQUFLMEIsRUFBRytnQixHQUk5RHV5QixNQUFPelYsRUFBTzRVLEVBQUtDLEVBQUtDLEVBQUs1eEIsR0FFNUIsT0FBTyt3QixHQUFTd0IsTUFBT3pWLEVBQU92L0IsS0FBS3BCLEVBQUdvQixLQUFLbkIsRUFBR21CLEtBQUswQixFQUFHeXlDLEVBQUtDLEVBQUtDLEVBQUs1eEIsR0FJdEUyZCxjQUFlYixHQUVkLE9BQU9pVSxHQUFTcFQsY0FBZWIsRUFBT3YvQixLQUFLcEIsRUFBR29CLEtBQUtuQixFQUFHbUIsS0FBSzBCLEdBSTVEdXpDLGNBQWV0UixHQUVkLE9BQU82UCxHQUFTeUIsY0FBZWoxQyxLQUFLcEIsRUFBR29CLEtBQUtuQixFQUFHbUIsS0FBSzBCLEVBQUdpaUMsR0FJeERwRCxjQUFlcEIsR0FFZCxPQUFPQSxFQUFJMkIsbUJBQW9COWdDLE1BSWhDZ2tDLG9CQUFxQnpnQyxFQUFHa2YsR0FFdkIsTUFBTTdqQixFQUFJb0IsS0FBS3BCLEVBQUdDLEVBQUltQixLQUFLbkIsRUFBRzZDLEVBQUkxQixLQUFLMEIsRUFDdkMsSUFBSXpCLEVBQUdNLEVBUVAyeUMsR0FBSzN1QixXQUFZMWxCLEVBQUdELEdBQ3BCdTBDLEdBQUs1dUIsV0FBWTdpQixFQUFHOUMsR0FDcEJ5MEMsR0FBSzl1QixXQUFZaGhCLEVBQUczRSxHQUNwQixNQUFNb2tCLEVBQUtrd0IsR0FBSzd0QixJQUFLZ3VCLElBQ2Zwd0IsRUFBS2t3QixHQUFLOXRCLElBQUtndUIsSUFDckIsR0FBS3J3QixHQUFNLEdBQUtDLEdBQU0sRUFHckIsT0FBT1IsRUFBT3VCLEtBQU1wbEIsR0FJckIwMEMsR0FBSy91QixXQUFZaGhCLEVBQUcxRSxHQUNwQixNQUFNcWtCLEVBQUtnd0IsR0FBSzd0QixJQUFLaXVCLElBQ2Y0QixFQUFLL0IsR0FBSzl0QixJQUFLaXVCLElBQ3JCLEdBQUtwd0IsR0FBTSxHQUFLZ3lCLEdBQU1oeUIsRUFHckIsT0FBT1QsRUFBT3VCLEtBQU1ubEIsR0FJckIsTUFBTXMyQyxFQUFLbnlCLEVBQUtreUIsRUFBS2h5QixFQUFLRCxFQUMxQixHQUFLa3lCLEdBQU0sR0FBS255QixHQUFNLEdBQUtFLEdBQU0sRUFJaEMsT0FGQWpqQixFQUFJK2lCLEdBQU9BLEVBQUtFLEdBRVRULEVBQU91QixLQUFNcGxCLEdBQUl5bEIsZ0JBQWlCNnVCLEdBQU1qekMsR0FJaERzekMsR0FBS2h2QixXQUFZaGhCLEVBQUc3QixHQUNwQixNQUFNMHpDLEVBQUtsQyxHQUFLN3RCLElBQUtrdUIsSUFDZjhCLEVBQUtsQyxHQUFLOXRCLElBQUtrdUIsSUFDckIsR0FBSzhCLEdBQU0sR0FBS0QsR0FBTUMsRUFHckIsT0FBTzV5QixFQUFPdUIsS0FBTXRpQixHQUlyQixNQUFNME4sRUFBS2dtQyxFQUFLbnlCLEVBQUtELEVBQUtxeUIsRUFDMUIsR0FBS2ptQyxHQUFNLEdBQUs2VCxHQUFNLEdBQUtveUIsR0FBTSxFQUloQyxPQUZBOTBDLEVBQUkwaUIsR0FBT0EsRUFBS295QixHQUVUNXlCLEVBQU91QixLQUFNcGxCLEdBQUl5bEIsZ0JBQWlCOHVCLEdBQU01eUMsR0FJaEQsTUFBTWdKLEVBQUsyWixFQUFLbXlCLEVBQUtELEVBQUtGLEVBQzFCLEdBQUszckMsR0FBTSxHQUFPMnJDLEVBQUtoeUIsR0FBUSxHQUFPa3lCLEVBQUtDLEdBQVEsRUFLbEQsT0FIQWpDLEdBQUs3dUIsV0FBWTdpQixFQUFHN0MsR0FDcEIwQixHQUFNMjBDLEVBQUtoeUIsSUFBV2d5QixFQUFLaHlCLEdBQVNreUIsRUFBS0MsSUFFbEM1eUIsRUFBT3VCLEtBQU1ubEIsR0FBSXdsQixnQkFBaUIrdUIsR0FBTTd5QyxHQUtoRCxNQUFNd3pDLEVBQVEsR0FBTXhxQyxFQUFLNkYsRUFBSytsQyxHQUs5QixPQUhBbDFDLEVBQUltUCxFQUFLMmtDLEVBQ1R4ekMsRUFBSTQwQyxFQUFLcEIsRUFFRnR4QixFQUFPdUIsS0FBTXBsQixHQUFJeWxCLGdCQUFpQjZ1QixHQUFNanpDLEdBQUlva0IsZ0JBQWlCOHVCLEdBQU01eUMsR0FJM0UrbEIsT0FBUXlhLEdBRVAsT0FBT0EsRUFBU25pQyxFQUFFMG5CLE9BQVF0bUIsS0FBS3BCLElBQU9taUMsRUFBU2xpQyxFQUFFeW5CLE9BQVF0bUIsS0FBS25CLElBQU9raUMsRUFBU3IvQixFQUFFNGtCLE9BQVF0bUIsS0FBSzBCLElBTS9GLElBQUk0ekMsR0FBYSxFQUVqQixNQUFNQyxXQUFpQnJ6QixFQUV0QnZaLGNBRUM4b0IsUUFFQXZ5QixPQUFPRSxlQUFnQlksS0FBTSxLQUFNLENBQUVoQixNQUFPczJDLE9BRTVDdDFDLEtBQUtrd0IsS0FBT3BOLElBRVo5aUIsS0FBS3FXLEtBQU8sR0FDWnJXLEtBQUs2VyxLQUFPLFdBRVo3VyxLQUFLdzFDLEtBQU0sRUFFWHgxQyxLQUFLeTFDLFNBN2hSZ0IsRUE4aFJyQnoxQyxLQUFLMDFDLEtBcGlSVyxFQXFpUmhCMTFDLEtBQUsyMUMsY0FBZSxFQUVwQjMxQyxLQUFLNDFDLFFBQVUsRUFDZjUxQyxLQUFLNjFDLGFBQWMsRUFFbkI3MUMsS0FBSzgxQyxTQXRoUmdCLElBdWhSckI5MUMsS0FBSysxQyxTQXRoUndCLElBdWhSN0IvMUMsS0FBS2cyQyxjQUFnQnAyQixFQUNyQjVmLEtBQUtpMkMsY0FBZ0IsS0FDckJqMkMsS0FBS2syQyxjQUFnQixLQUNyQmwyQyxLQUFLbTJDLG1CQUFxQixLQUUxQm4yQyxLQUFLbzJDLFVBbmhSZ0IsRUFvaFJyQnAyQyxLQUFLcTJDLFdBQVksRUFDakJyMkMsS0FBS3MyQyxZQUFhLEVBRWxCdDJDLEtBQUt1MkMsaUJBQW1CLElBQ3hCdjJDLEtBQUt3MkMsWUExNVFtQixJQTI1UXhCeDJDLEtBQUt5MkMsV0FBYSxFQUNsQnoyQyxLQUFLMDJDLGdCQUFrQixJQUN2QjEyQyxLQUFLMjJDLFlBQWM5MEIsRUFDbkI3aEIsS0FBSzQyQyxhQUFlLzBCLEVBQ3BCN2hCLEtBQUs2MkMsYUFBZWgxQixFQUNwQjdoQixLQUFLODJDLGNBQWUsRUFFcEI5MkMsS0FBSysyQyxlQUFpQixLQUN0Qi8yQyxLQUFLZzNDLGtCQUFtQixFQUN4QmgzQyxLQUFLaTNDLGFBQWMsRUFFbkJqM0MsS0FBS2szQyxXQUFhLEtBRWxCbDNDLEtBQUttM0MsWUFBYSxFQUVsQm4zQyxLQUFLbzNDLFVBQVksS0FFakJwM0MsS0FBS3EzQyxlQUFnQixFQUNyQnIzQyxLQUFLczNDLG9CQUFzQixFQUMzQnQzQyxLQUFLdTNDLG1CQUFxQixFQUUxQnYzQyxLQUFLdzNDLFdBQVksRUFFakJ4M0MsS0FBS3kzQyxpQkFBa0IsRUFDdkJ6M0MsS0FBSzAzQyxvQkFBcUIsRUFFMUIxM0MsS0FBS2d1QyxTQUFVLEVBRWZodUMsS0FBSzIzQyxZQUFhLEVBRWxCMzNDLEtBQUtreUIsU0FBVyxHQUVoQmx5QixLQUFLbXdCLFFBQVUsRUFFZm53QixLQUFLNDNDLFdBQWEsRUFJZkMsZ0JBRUgsT0FBTzczQyxLQUFLNDNDLFdBSVRDLGNBQVc3NEMsR0FFVGdCLEtBQUs0M0MsV0FBYSxHQUFNNTRDLEVBQVEsR0FFcENnQixLQUFLbXdCLFVBSU5ud0IsS0FBSzQzQyxXQUFhNTRDLEVBSW5CODRDLFdBRUF4SixrQkFFQXlKLG1CQUVBQyx3QkFFQyxPQUFPaDRDLEtBQUsrM0MsZ0JBQWdCMzFDLFdBSTdCNjFDLFVBQVd2RixHQUVWLFFBQWdCbHpCLElBQVhrekIsRUFFTCxJQUFNLE1BQU1DLEtBQU9ELEVBQVMsQ0FFM0IsTUFBTXdGLEVBQVd4RixFQUFRQyxHQUV6QixRQUFrQm56QixJQUFiMDRCLEVBQXlCLENBRTdCdjFDLFFBQVF1aEIsS0FBTSxvQkFBdUJ5dUIsRUFBTSw2QkFDM0MsU0FLRCxHQUFhLFlBQVJBLEVBQW9CLENBRXhCaHdDLFFBQVF1aEIsS0FBTSxTQUFXbGtCLEtBQUs2VyxLQUFPLHNFQUNyQzdXLEtBQUttNEMsWUEzb1JXLElBMm9SS0QsRUFDckIsU0FJRCxNQUFNRSxFQUFlcDRDLEtBQU0yeUMsUUFFTG56QixJQUFqQjQ0QixFQU9BQSxHQUFnQkEsRUFBYWxyQixRQUVqQ2tyQixFQUFhenJDLElBQUt1ckMsR0FFTEUsR0FBZ0JBLEVBQWF0YSxXQUFpQm9hLEdBQVlBLEVBQVNwYSxVQUVoRnNhLEVBQWFwMEIsS0FBTWswQixHQUluQmw0QyxLQUFNMnlDLEdBQVF1RixFQWZkdjFDLFFBQVF1aEIsS0FBTSxTQUFXbGtCLEtBQUs2VyxLQUFPLE1BQVM4N0IsRUFBTSwwQ0F1QnZEL21DLE9BQVF5a0IsR0FFUCxNQUFNQyxPQUEwQjlRLElBQVQ2USxHQUFzQyxpQkFBVEEsRUFFL0NDLElBRUpELEVBQU8sQ0FDTnFDLFNBQVUsR0FDVm5DLE9BQVEsS0FLVixNQUFNdlksRUFBTyxDQUNaMmEsU0FBVSxDQUNUeEMsUUFBUyxJQUNUdFosS0FBTSxXQUNOK2IsVUFBVyxvQkFtTGIsU0FBUzRmLEVBQWtCQyxHQUUxQixNQUFNQyxFQUFTLEdBRWYsSUFBTSxNQUFNQyxLQUFPRixFQUFRLENBRTFCLE1BQU16NkIsRUFBT3k2QixFQUFPRSxVQUNiMzZCLEVBQUsyYSxTQUNaK2YsRUFBT2x3QyxLQUFNd1YsR0FJZCxPQUFPMDZCLEVBSVIsR0E5TEExNkIsRUFBS2tZLEtBQU9sd0IsS0FBS2t3QixLQUNqQmxZLEVBQUtuQixLQUFPN1csS0FBSzZXLEtBRUUsS0FBZDdXLEtBQUtxVyxPQUFjMkIsRUFBSzNCLEtBQU9yVyxLQUFLcVcsTUFFcENyVyxLQUFLaUcsT0FBU2pHLEtBQUtpRyxNQUFNaW5CLFVBQVVsVixFQUFLL1IsTUFBUWpHLEtBQUtpRyxNQUFNa29CLGVBRXhDM08sSUFBbkJ4ZixLQUFLcTRDLFlBQTBCcmdDLEVBQUtxZ0MsVUFBWXI0QyxLQUFLcTRDLGdCQUNsQzc0QixJQUFuQnhmLEtBQUtzNEMsWUFBMEJ0Z0MsRUFBS3NnQyxVQUFZdDRDLEtBQUtzNEMsZ0JBRXRDOTRCLElBQWZ4ZixLQUFLdTRDLFFBQXNCdmdDLEVBQUt1Z0MsTUFBUXY0QyxLQUFLdTRDLE9BQzdDdjRDLEtBQUt3NEMsWUFBY3g0QyxLQUFLdzRDLFdBQVd0ckIsVUFBVWxWLEVBQUt3Z0MsV0FBYXg0QyxLQUFLdzRDLFdBQVdycUIsZUFDdkQzTyxJQUF4QnhmLEtBQUt5NEMsaUJBQStCemdDLEVBQUt5Z0MsZUFBaUJ6NEMsS0FBS3k0QyxnQkFDL0R6NEMsS0FBSzA0QyxVQUFZMTRDLEtBQUswNEMsU0FBU3hyQixVQUFVbFYsRUFBSzBnQyxTQUFXMTRDLEtBQUswNEMsU0FBU3ZxQixVQUN2RW51QixLQUFLMjRDLG1CQUFnRCxJQUEzQjM0QyxLQUFLMjRDLG9CQUEwQjNnQyxFQUFLMmdDLGtCQUFvQjM0QyxLQUFLMjRDLG1CQUV2RjM0QyxLQUFLNDRDLFVBQVk1NEMsS0FBSzQ0QyxTQUFTMXJCLFVBQVVsVixFQUFLNGdDLFNBQVc1NEMsS0FBSzQ0QyxTQUFTenFCLGVBQzVDM08sSUFBM0J4ZixLQUFLNjRDLG9CQUFrQzdnQyxFQUFLNmdDLGtCQUFvQjc0QyxLQUFLNjRDLG1CQUNyRTc0QyxLQUFLODRDLGVBQWlCOTRDLEtBQUs4NEMsY0FBYzVyQixVQUFVbFYsRUFBSzhnQyxjQUFnQjk0QyxLQUFLODRDLGNBQWMzcUIsZUFDeEUzTyxJQUFuQnhmLEtBQUsrNEMsWUFBMEIvZ0MsRUFBSytnQyxVQUFZLzRDLEtBQUsrNEMsZ0JBQ2xDdjVCLElBQW5CeGYsS0FBS2c1QyxZQUEwQmhoQyxFQUFLZ2hDLFVBQVloNUMsS0FBS2c1QyxnQkFDekJ4NUIsSUFBNUJ4ZixLQUFLaTVDLHFCQUFtQ2poQyxFQUFLaWhDLG1CQUFxQmo1QyxLQUFLaTVDLG9CQUV2RWo1QyxLQUFLazVDLGNBQWdCbDVDLEtBQUtrNUMsYUFBYWptQixZQUUzQ2piLEVBQUtraEMsYUFBZWw1QyxLQUFLazVDLGFBQWF0dEMsT0FBUXlrQixHQUFPSCxNQUlqRGx3QixLQUFLbTVDLHVCQUF5Qm41QyxLQUFLbTVDLHNCQUFzQmxtQixZQUU3RGpiLEVBQUttaEMsc0JBQXdCbjVDLEtBQUttNUMsc0JBQXNCdnRDLE9BQVF5a0IsR0FBT0gsTUFJbkVsd0IsS0FBS281QyxvQkFBc0JwNUMsS0FBS281QyxtQkFBbUJubUIsWUFFdkRqYixFQUFLb2hDLG1CQUFxQnA1QyxLQUFLbzVDLG1CQUFtQnh0QyxPQUFReWtCLEdBQU9ILEtBQ2pFbFksRUFBS3FoQyxxQkFBdUJyNUMsS0FBS3E1QyxxQkFBcUI1eUIsV0FJbER6bUIsS0FBS29TLEtBQU9wUyxLQUFLb1MsSUFBSTZnQixZQUFZamIsRUFBSzVGLElBQU1wUyxLQUFLb1MsSUFBSXhHLE9BQVF5a0IsR0FBT0gsTUFDcEVsd0IsS0FBS3M1QyxRQUFVdDVDLEtBQUtzNUMsT0FBT3JtQixZQUFZamIsRUFBS3NoQyxPQUFTdDVDLEtBQUtzNUMsT0FBTzF0QyxPQUFReWtCLEdBQU9ILE1BQ2hGbHdCLEtBQUt1NUMsVUFBWXY1QyxLQUFLdTVDLFNBQVN0bUIsWUFBWWpiLEVBQUt1aEMsU0FBV3Y1QyxLQUFLdTVDLFNBQVMzdEMsT0FBUXlrQixHQUFPSCxNQUV4Rmx3QixLQUFLdzVDLFVBQVl4NUMsS0FBS3c1QyxTQUFTdm1CLFlBRW5DamIsRUFBS3doQyxTQUFXeDVDLEtBQUt3NUMsU0FBUzV0QyxPQUFReWtCLEdBQU9ILEtBQzdDbFksRUFBS3loQyxrQkFBb0J6NUMsS0FBS3k1QyxtQkFJMUJ6NUMsS0FBSzA1QyxPQUFTMTVDLEtBQUswNUMsTUFBTXptQixZQUU3QmpiLEVBQUswaEMsTUFBUTE1QyxLQUFLMDVDLE1BQU05dEMsT0FBUXlrQixHQUFPSCxLQUN2Q2xZLEVBQUsyaEMsZUFBaUIzNUMsS0FBSzI1QyxnQkFJdkIzNUMsS0FBSzQ1QyxTQUFXNTVDLEtBQUs0NUMsUUFBUTNtQixZQUVqQ2piLEVBQUs0aEMsUUFBVTU1QyxLQUFLNDVDLFFBQVFodUMsT0FBUXlrQixHQUFPSCxLQUMzQ2xZLEVBQUs2aEMsVUFBWTc1QyxLQUFLNjVDLFdBSWxCNzVDLEtBQUs4NUMsV0FBYTk1QyxLQUFLODVDLFVBQVU3bUIsWUFFckNqYixFQUFLOGhDLFVBQVk5NUMsS0FBSzg1QyxVQUFVbHVDLE9BQVF5a0IsR0FBT0gsS0FDL0NsWSxFQUFLK2hDLGNBQWdCLzVDLEtBQUsrNUMsY0FDMUIvaEMsRUFBS2dpQyxZQUFjaDZDLEtBQUtnNkMsWUFBWXZ6QixXQUloQ3ptQixLQUFLaTZDLGlCQUFtQmo2QyxLQUFLaTZDLGdCQUFnQmhuQixZQUVqRGpiLEVBQUtpaUMsZ0JBQWtCajZDLEtBQUtpNkMsZ0JBQWdCcnVDLE9BQVF5a0IsR0FBT0gsS0FDM0RsWSxFQUFLa2lDLGtCQUFvQmw2QyxLQUFLazZDLGtCQUM5QmxpQyxFQUFLbWlDLGlCQUFtQm42QyxLQUFLbTZDLGtCQUl6Qm42QyxLQUFLbzZDLGNBQWdCcDZDLEtBQUtvNkMsYUFBYW5uQixZQUFZamIsRUFBS29pQyxhQUFlcDZDLEtBQUtvNkMsYUFBYXh1QyxPQUFReWtCLEdBQU9ILE1BQ3hHbHdCLEtBQUtxNkMsY0FBZ0JyNkMsS0FBS3E2QyxhQUFhcG5CLFlBQVlqYixFQUFLcWlDLGFBQWVyNkMsS0FBS3E2QyxhQUFhenVDLE9BQVF5a0IsR0FBT0gsTUFFeEdsd0IsS0FBS3M2QyxhQUFldDZDLEtBQUtzNkMsWUFBWXJuQixZQUFZamIsRUFBS3NpQyxZQUFjdDZDLEtBQUtzNkMsWUFBWTF1QyxPQUFReWtCLEdBQU9ILE1BQ3BHbHdCLEtBQUt1NkMsYUFBZXY2QyxLQUFLdTZDLFlBQVl0bkIsWUFBWWpiLEVBQUt1aUMsWUFBY3Y2QyxLQUFLdTZDLFlBQVkzdUMsT0FBUXlrQixHQUFPSCxNQUNwR2x3QixLQUFLdzZDLHNCQUF3Qng2QyxLQUFLdzZDLHFCQUFxQnZuQixZQUFZamIsRUFBS3dpQyxxQkFBdUJ4NkMsS0FBS3c2QyxxQkFBcUI1dUMsT0FBUXlrQixHQUFPSCxNQUN4SWx3QixLQUFLeTZDLGtCQUFvQno2QyxLQUFLeTZDLGlCQUFpQnhuQixZQUFZamIsRUFBS3lpQyxpQkFBbUJ6NkMsS0FBS3k2QyxpQkFBaUI3dUMsT0FBUXlrQixHQUFPSCxNQUV4SGx3QixLQUFLMDZDLFFBQVUxNkMsS0FBSzA2QyxPQUFPem5CLFlBRS9CamIsRUFBSzBpQyxPQUFTMTZDLEtBQUswNkMsT0FBTzl1QyxPQUFReWtCLEdBQU9ILFVBRW5CMVEsSUFBakJ4ZixLQUFLMjZDLFVBQXdCM2lDLEVBQUsyaUMsUUFBVTM2QyxLQUFLMjZDLGVBSXpCbjdCLElBQXpCeGYsS0FBSzQ2QyxrQkFBZ0M1aUMsRUFBSzRpQyxnQkFBa0I1NkMsS0FBSzQ2QyxzQkFDM0NwN0IsSUFBdEJ4ZixLQUFLNjZDLGVBQTZCN2lDLEVBQUs2aUMsYUFBZTc2QyxLQUFLNjZDLG1CQUNsQ3I3QixJQUF6QnhmLEtBQUs4NkMsa0JBQWdDOWlDLEVBQUs4aUMsZ0JBQWtCOTZDLEtBQUs4NkMsaUJBRWpFOTZDLEtBQUsrNkMsYUFBZS82QyxLQUFLKzZDLFlBQVk5bkIsWUFFekNqYixFQUFLK2lDLFlBQWMvNkMsS0FBSys2QyxZQUFZbnZDLE9BQVF5a0IsR0FBT0gsV0FJekIxUSxJQUF0QnhmLEtBQUtnN0MsZUFBNkJoakMsRUFBS2dqQyxhQUFlaDdDLEtBQUtnN0MsY0FDM0RoN0MsS0FBS2k3QyxpQkFBbUJqN0MsS0FBS2k3QyxnQkFBZ0Job0IsWUFBWWpiLEVBQUtpakMsZ0JBQWtCajdDLEtBQUtpN0MsZ0JBQWdCcnZDLE9BQVF5a0IsR0FBT0gsV0FDakcxUSxJQUFuQnhmLEtBQUtrN0MsWUFBMEJsakMsRUFBS2tqQyxVQUFZbDdDLEtBQUtrN0MsV0FDckRsN0MsS0FBS203QyxjQUFnQm43QyxLQUFLbTdDLGFBQWFsb0IsWUFBWWpiLEVBQUttakMsYUFBZW43QyxLQUFLbTdDLGFBQWF2dkMsT0FBUXlrQixHQUFPSCxXQUMzRTFRLElBQTdCeGYsS0FBS283QyxzQkFBb0NwakMsRUFBS29qQyxvQkFBc0JwN0MsS0FBS283QywwQkFDL0M1N0IsSUFBMUJ4ZixLQUFLcTdDLG1CQUFpQ3JqQyxFQUFLcWpDLGlCQUFtQnI3QyxLQUFLcTdDLGlCQUFpQmx0QixlQUV0RTNPLElBQWR4ZixLQUFLcVgsT0FBcUJXLEVBQUtYLEtBQU9yWCxLQUFLcVgsTUFDdkIsT0FBcEJyWCxLQUFLazNDLGFBQXNCbC9CLEVBQUtrL0IsV0FBYWwzQyxLQUFLazNDLGlCQUN6QjEzQixJQUF6QnhmLEtBQUtzN0Msa0JBQWdDdGpDLEVBQUtzakMsZ0JBQWtCdDdDLEtBQUtzN0MsaUJBcHpSakQsSUFzelJoQnQ3QyxLQUFLeTFDLFdBQThCejlCLEVBQUt5OUIsU0FBV3oxQyxLQUFLeTFDLFVBNXpSN0MsSUE2elJYejFDLEtBQUswMUMsT0FBcUIxOUIsRUFBSzA5QixLQUFPMTFDLEtBQUswMUMsTUFDM0MxMUMsS0FBSzIxQyxlQUFlMzlCLEVBQUsyOUIsY0FBZSxHQUV4QzMxQyxLQUFLNDFDLFFBQVUsSUFBSTU5QixFQUFLNDlCLFFBQVU1MUMsS0FBSzQxQyxVQUNsQixJQUFyQjUxQyxLQUFLNjFDLGNBQXVCNzlCLEVBQUs2OUIsWUFBYzcxQyxLQUFLNjFDLGFBRXpENzlCLEVBQUtvK0IsVUFBWXAyQyxLQUFLbzJDLFVBQ3RCcCtCLEVBQUtxK0IsVUFBWXIyQyxLQUFLcTJDLFVBQ3RCcitCLEVBQUtzK0IsV0FBYXQyQyxLQUFLczJDLFdBQ3ZCdCtCLEVBQUttL0IsV0FBYW4zQyxLQUFLbTNDLFdBRXZCbi9CLEVBQUs4K0IsYUFBZTkyQyxLQUFLODJDLGFBQ3pCOStCLEVBQUt1K0IsaUJBQW1CdjJDLEtBQUt1MkMsaUJBQzdCditCLEVBQUt3K0IsWUFBY3gyQyxLQUFLdzJDLFlBQ3hCeCtCLEVBQUt5K0IsV0FBYXoyQyxLQUFLeTJDLFdBQ3ZCeitCLEVBQUswK0IsZ0JBQWtCMTJDLEtBQUswMkMsZ0JBQzVCMStCLEVBQUsyK0IsWUFBYzMyQyxLQUFLMjJDLFlBQ3hCMytCLEVBQUs0K0IsYUFBZTUyQyxLQUFLNDJDLGFBQ3pCNStCLEVBQUs2K0IsYUFBZTcyQyxLQUFLNjJDLGtCQUdGcjNCLElBQWxCeGYsS0FBSzRILFVBQTRDLElBQWxCNUgsS0FBSzRILFdBQWlCb1EsRUFBS3BRLFNBQVc1SCxLQUFLNEgsV0FFbkQsSUFBdkI1SCxLQUFLcTNDLGdCQUF5QnIvQixFQUFLcS9CLGVBQWdCLEdBQ3RCLElBQTdCcjNDLEtBQUtzM0Msc0JBQTRCdC9CLEVBQUtzL0Isb0JBQXNCdDNDLEtBQUtzM0MscUJBQ3JDLElBQTVCdDNDLEtBQUt1M0MscUJBQTJCdi9CLEVBQUt1L0IsbUJBQXFCdjNDLEtBQUt1M0MseUJBRTVDLzNCLElBQW5CeGYsS0FBS3U3QyxXQUE4QyxJQUFuQnY3QyxLQUFLdTdDLFlBQWtCdmpDLEVBQUt1akMsVUFBWXY3QyxLQUFLdTdDLGdCQUMzRC83QixJQUFsQnhmLEtBQUt3N0MsV0FBeUJ4akMsRUFBS3dqQyxTQUFXeDdDLEtBQUt3N0MsZUFDbENoOEIsSUFBakJ4ZixLQUFLeTdDLFVBQXdCempDLEVBQUt5akMsUUFBVXo3QyxLQUFLeTdDLGNBQ2xDajhCLElBQWZ4ZixLQUFLK3FCLFFBQXNCL1MsRUFBSytTLE1BQVEvcUIsS0FBSytxQixRQUUxQixJQUFuQi9xQixLQUFLdzNDLFlBQXFCeC9CLEVBQUt3L0IsV0FBWSxHQUUzQ3gzQyxLQUFLNjNDLFVBQVksSUFBSTcvQixFQUFLNi9CLFVBQVk3M0MsS0FBSzYzQyxZQUNsQixJQUF6QjczQyxLQUFLeTNDLGtCQUEyQnovQixFQUFLeS9CLGdCQUFrQnozQyxLQUFLeTNDLGtCQUNoQyxJQUE1QnozQyxLQUFLMDNDLHFCQUE4QjEvQixFQUFLMC9CLG1CQUFxQjEzQyxLQUFLMDNDLHFCQUUvQyxJQUFuQjEzQyxLQUFLMDdDLFlBQXFCMWpDLEVBQUswakMsVUFBWTE3QyxLQUFLMDdDLFdBQ2hEMTdDLEtBQUsyN0MsbUJBQXFCLElBQUkzakMsRUFBSzJqQyxtQkFBcUIzN0MsS0FBSzI3QyxvQkFDbkMsVUFBMUIzN0MsS0FBSzQ3QyxtQkFBK0I1akMsRUFBSzRqQyxpQkFBbUI1N0MsS0FBSzQ3QyxrQkFDdEMsVUFBM0I1N0MsS0FBSzY3QyxvQkFBZ0M3akMsRUFBSzZqQyxrQkFBb0I3N0MsS0FBSzY3QyxvQkFFOUMsSUFBckI3N0MsS0FBS200QyxjQUF1Qm5nQyxFQUFLbWdDLFlBQWNuNEMsS0FBS200QyxjQUVuQyxJQUFqQm40QyxLQUFLZ3VDLFVBQW9CaDJCLEVBQUtnMkIsU0FBVSxJQUVwQixJQUFwQmh1QyxLQUFLMjNDLGFBQXVCMy9CLEVBQUsyL0IsWUFBYSxHQUVWLE9BQXBDcGxCLEtBQUtFLFVBQVd6eUIsS0FBS2t5QixZQUFzQmxhLEVBQUtrYSxTQUFXbHlCLEtBQUtreUIsVUFvQmhFNUIsRUFBZSxDQUVuQixNQUFNb0MsRUFBVzhmLEVBQWtCbmlCLEVBQUtxQyxVQUNsQ25DLEVBQVNpaUIsRUFBa0JuaUIsRUFBS0UsUUFFakNtQyxFQUFTNXpCLE9BQVMsSUFBSWtaLEVBQUswYSxTQUFXQSxHQUN0Q25DLEVBQU96eEIsT0FBUyxJQUFJa1osRUFBS3VZLE9BQVNBLEdBSXhDLE9BQU92WSxFQUlSK0wsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLGFBQWNxYixLQUFNaGtCLE1BSXJDZ2tCLEtBQU0rSSxHQUVML3NCLEtBQUtxVyxLQUFPMFcsRUFBTzFXLEtBRW5CclcsS0FBS3cxQyxJQUFNem9CLEVBQU95b0IsSUFFbEJ4MUMsS0FBS3kxQyxTQUFXMW9CLEVBQU8wb0IsU0FDdkJ6MUMsS0FBSzAxQyxLQUFPM29CLEVBQU8yb0IsS0FDbkIxMUMsS0FBSzIxQyxhQUFlNW9CLEVBQU80b0IsYUFFM0IzMUMsS0FBSzQxQyxRQUFVN29CLEVBQU82b0IsUUFDdEI1MUMsS0FBSzYxQyxZQUFjOW9CLEVBQU84b0IsWUFFMUI3MUMsS0FBSzgxQyxTQUFXL29CLEVBQU8rb0IsU0FDdkI5MUMsS0FBSysxQyxTQUFXaHBCLEVBQU9ncEIsU0FDdkIvMUMsS0FBS2cyQyxjQUFnQmpwQixFQUFPaXBCLGNBQzVCaDJDLEtBQUtpMkMsY0FBZ0JscEIsRUFBT2twQixjQUM1QmoyQyxLQUFLazJDLGNBQWdCbnBCLEVBQU9tcEIsY0FDNUJsMkMsS0FBS20yQyxtQkFBcUJwcEIsRUFBT29wQixtQkFFakNuMkMsS0FBS28yQyxVQUFZcnBCLEVBQU9xcEIsVUFDeEJwMkMsS0FBS3EyQyxVQUFZdHBCLEVBQU9zcEIsVUFDeEJyMkMsS0FBS3MyQyxXQUFhdnBCLEVBQU91cEIsV0FFekJ0MkMsS0FBS3UyQyxpQkFBbUJ4cEIsRUFBT3dwQixpQkFDL0J2MkMsS0FBS3cyQyxZQUFjenBCLEVBQU95cEIsWUFDMUJ4MkMsS0FBS3kyQyxXQUFhMXBCLEVBQU8wcEIsV0FDekJ6MkMsS0FBSzAyQyxnQkFBa0IzcEIsRUFBTzJwQixnQkFDOUIxMkMsS0FBSzIyQyxZQUFjNXBCLEVBQU80cEIsWUFDMUIzMkMsS0FBSzQyQyxhQUFlN3BCLEVBQU82cEIsYUFDM0I1MkMsS0FBSzYyQyxhQUFlOXBCLEVBQU84cEIsYUFDM0I3MkMsS0FBSzgyQyxhQUFlL3BCLEVBQU8rcEIsYUFFM0IsTUFBTWdGLEVBQVkvdUIsRUFBT2dxQixlQUN6QixJQUFJZ0YsRUFBWSxLQUVoQixHQUFtQixPQUFkRCxFQUFxQixDQUV6QixNQUFNbjlDLEVBQUltOUMsRUFBVWg5QyxPQUNwQmk5QyxFQUFZLElBQUl6OEMsTUFBT1gsR0FFdkIsSUFBTSxJQUFJbUMsRUFBSSxFQUFHQSxJQUFNbkMsSUFBTW1DLEVBRTVCaTdDLEVBQVdqN0MsR0FBTWc3QyxFQUFXaDdDLEdBQUlpakIsUUFnQ2xDLE9BMUJBL2pCLEtBQUsrMkMsZUFBaUJnRixFQUN0Qi83QyxLQUFLZzNDLGlCQUFtQmpxQixFQUFPaXFCLGlCQUMvQmgzQyxLQUFLaTNDLFlBQWNscUIsRUFBT2txQixZQUUxQmozQyxLQUFLazNDLFdBQWFucUIsRUFBT21xQixXQUV6QmwzQyxLQUFLbTNDLFdBQWFwcUIsRUFBT29xQixXQUV6Qm4zQyxLQUFLbzNDLFVBQVlycUIsRUFBT3FxQixVQUV4QnAzQyxLQUFLcTNDLGNBQWdCdHFCLEVBQU9zcUIsY0FDNUJyM0MsS0FBS3MzQyxvQkFBc0J2cUIsRUFBT3VxQixvQkFDbEN0M0MsS0FBS3UzQyxtQkFBcUJ4cUIsRUFBT3dxQixtQkFFakN2M0MsS0FBS3czQyxVQUFZenFCLEVBQU95cUIsVUFFeEJ4M0MsS0FBSzYzQyxVQUFZOXFCLEVBQU84cUIsVUFDeEI3M0MsS0FBS3kzQyxnQkFBa0IxcUIsRUFBTzBxQixnQkFDOUJ6M0MsS0FBSzAzQyxtQkFBcUIzcUIsRUFBTzJxQixtQkFFakMxM0MsS0FBS2d1QyxRQUFVamhCLEVBQU9paEIsUUFFdEJodUMsS0FBSzIzQyxXQUFhNXFCLEVBQU80cUIsV0FFekIzM0MsS0FBS2t5QixTQUFXSyxLQUFLQyxNQUFPRCxLQUFLRSxVQUFXMUYsRUFBT21GLFdBRTVDbHlCLEtBSVI4eUIsVUFFQzl5QixLQUFLK0MsY0FBZSxDQUFFOFQsS0FBTSxZQUl6QnVaLGdCQUFhcHhCLElBRUQsSUFBVkEsR0FBaUJnQixLQUFLbXdCLFdBTTdCb2xCLEdBQVNoMkMsVUFBVXk4QyxZQUFhLEVBRWhDekcsR0FBUzBHLFNBQVcsV0FJbkIsT0FBTyxNQUlSLE1BQU1DLFdBQTBCM0csR0FFL0I1c0MsWUFBYW9wQyxHQUVadGdCLFFBRUF6eEIsS0FBSzZXLEtBQU8sb0JBRVo3VyxLQUFLaUcsTUFBUSxJQUFJK21CLEdBQU8sVUFFeEJodEIsS0FBS29TLElBQU0sS0FFWHBTLEtBQUt3NUMsU0FBVyxLQUNoQng1QyxLQUFLeTVDLGtCQUFvQixFQUV6Qno1QyxLQUFLMDVDLE1BQVEsS0FDYjE1QyxLQUFLMjVDLGVBQWlCLEVBRXRCMzVDLEtBQUt1NkMsWUFBYyxLQUVuQnY2QyxLQUFLdTVDLFNBQVcsS0FFaEJ2NUMsS0FBSzA2QyxPQUFTLEtBQ2QxNkMsS0FBSzI2QyxRQWovUm1CLEVBay9SeEIzNkMsS0FBSzY2QyxhQUFlLEVBQ3BCNzZDLEtBQUs4NkMsZ0JBQWtCLElBRXZCOTZDLEtBQUswN0MsV0FBWSxFQUNqQjE3QyxLQUFLMjdDLG1CQUFxQixFQUMxQjM3QyxLQUFLNDdDLGlCQUFtQixRQUN4QjU3QyxLQUFLNjdDLGtCQUFvQixRQUV6Qjc3QyxLQUFLaTRDLFVBQVdsRyxHQUlqQi90QixLQUFNK0ksR0E0QkwsT0ExQkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS2lHLE1BQU0rZCxLQUFNK0ksRUFBTzltQixPQUV4QmpHLEtBQUtvUyxJQUFNMmEsRUFBTzNhLElBRWxCcFMsS0FBS3c1QyxTQUFXenNCLEVBQU95c0IsU0FDdkJ4NUMsS0FBS3k1QyxrQkFBb0Ixc0IsRUFBTzBzQixrQkFFaEN6NUMsS0FBSzA1QyxNQUFRM3NCLEVBQU8yc0IsTUFDcEIxNUMsS0FBSzI1QyxlQUFpQjVzQixFQUFPNHNCLGVBRTdCMzVDLEtBQUt1NkMsWUFBY3h0QixFQUFPd3RCLFlBRTFCdjZDLEtBQUt1NUMsU0FBV3hzQixFQUFPd3NCLFNBRXZCdjVDLEtBQUswNkMsT0FBUzN0QixFQUFPMnRCLE9BQ3JCMTZDLEtBQUsyNkMsUUFBVTV0QixFQUFPNHRCLFFBQ3RCMzZDLEtBQUs2NkMsYUFBZTl0QixFQUFPOHRCLGFBQzNCNzZDLEtBQUs4NkMsZ0JBQWtCL3RCLEVBQU8rdEIsZ0JBRTlCOTZDLEtBQUswN0MsVUFBWTN1QixFQUFPMnVCLFVBQ3hCMTdDLEtBQUsyN0MsbUJBQXFCNXVCLEVBQU80dUIsbUJBQ2pDMzdDLEtBQUs0N0MsaUJBQW1CN3VCLEVBQU82dUIsaUJBQy9CNTdDLEtBQUs2N0Msa0JBQW9COXVCLEVBQU84dUIsa0JBRXpCNzdDLE1BTVRrOEMsR0FBa0IzOEMsVUFBVTQ4QyxxQkFBc0IsRUFFbEQsTUFBTUMsR0FBMEIsSUFBSXZoQixHQUM5QndoQixHQUEyQixJQUFJNzRCLEVBRXJDLE1BQU04NEIsR0FFTDN6QyxZQUFhK1osRUFBTzY1QixFQUFVcHRCLEdBRTdCLEdBQUs3dkIsTUFBTXVPLFFBQVM2VSxHQUVuQixNQUFNLElBQUl2aEIsVUFBVyx5REFJdEJuQixLQUFLcVcsS0FBTyxHQUVaclcsS0FBSzBpQixNQUFRQSxFQUNiMWlCLEtBQUt1OEMsU0FBV0EsRUFDaEJ2OEMsS0FBSzgxQixXQUFrQnRXLElBQVZrRCxFQUFzQkEsRUFBTTVqQixPQUFTeTlDLEVBQVcsRUFDN0R2OEMsS0FBS212QixZQUE0QixJQUFmQSxFQUVsQm52QixLQUFLdzhDLE1BQVExNkIsRUFDYjloQixLQUFLeThDLFlBQWMsQ0FBRWoyQixPQUFRLEVBQUdzUCxPQUFTLEdBRXpDOTFCLEtBQUttd0IsUUFBVSxFQUloQnVzQixvQkFFSXRzQixnQkFBYXB4QixJQUVELElBQVZBLEdBQWlCZ0IsS0FBS213QixVQUk1QndzQixTQUFVMzlDLEdBSVQsT0FGQWdCLEtBQUt3OEMsTUFBUXg5QyxFQUVOZ0IsS0FJUmdrQixLQUFNK0ksR0FVTCxPQVJBL3NCLEtBQUtxVyxLQUFPMFcsRUFBTzFXLEtBQ25CclcsS0FBSzBpQixNQUFRLElBQUlxSyxFQUFPckssTUFBTS9aLFlBQWFva0IsRUFBT3JLLE9BQ2xEMWlCLEtBQUt1OEMsU0FBV3h2QixFQUFPd3ZCLFNBQ3ZCdjhDLEtBQUs4MUIsTUFBUS9JLEVBQU8rSSxNQUNwQjkxQixLQUFLbXZCLFdBQWFwQyxFQUFPb0MsV0FFekJudkIsS0FBS3c4QyxNQUFRenZCLEVBQU95dkIsTUFFYng4QyxLQUlSNDhDLE9BQVFDLEVBQVFsMkIsRUFBV20yQixHQUUxQkQsR0FBVTc4QyxLQUFLdThDLFNBQ2ZPLEdBQVVuMkIsRUFBVTQxQixTQUVwQixJQUFNLElBQUl6N0MsRUFBSSxFQUFHVyxFQUFJekIsS0FBS3U4QyxTQUFVejdDLEVBQUlXLEVBQUdYLElBRTFDZCxLQUFLMGlCLE1BQU9tNkIsRUFBUy83QyxHQUFNNmxCLEVBQVVqRSxNQUFPbzZCLEVBQVNoOEMsR0FJdEQsT0FBT2QsS0FJUis4QyxVQUFXcjZCLEdBSVYsT0FGQTFpQixLQUFLMGlCLE1BQU0vVixJQUFLK1YsR0FFVDFpQixLQUlSZzlDLGdCQUFpQkMsR0FFaEIsTUFBTXY2QixFQUFRMWlCLEtBQUswaUIsTUFDbkIsSUFBSThELEVBQVMsRUFFYixJQUFNLElBQUkxbEIsRUFBSSxFQUFHVyxFQUFJdzdDLEVBQU9uK0MsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFakQsSUFBSW1GLEVBQVFnM0MsRUFBUW44QyxRQUVMMGUsSUFBVnZaLElBRUp0RCxRQUFRdWhCLEtBQU0sOERBQStEcGpCLEdBQzdFbUYsRUFBUSxJQUFJK21CLElBSWJ0SyxFQUFPOEQsS0FBY3ZnQixFQUFNekMsRUFDM0JrZixFQUFPOEQsS0FBY3ZnQixFQUFNckcsRUFDM0I4aUIsRUFBTzhELEtBQWN2Z0IsRUFBTXBILEVBSTVCLE9BQU9tQixLQUlSazlDLGtCQUFtQkMsR0FFbEIsTUFBTXo2QixFQUFRMWlCLEtBQUswaUIsTUFDbkIsSUFBSThELEVBQVMsRUFFYixJQUFNLElBQUkxbEIsRUFBSSxFQUFHVyxFQUFJMDdDLEVBQVFyK0MsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFbEQsSUFBSTIrQixFQUFTMGQsRUFBU3I4QyxRQUVOMGUsSUFBWGlnQixJQUVKOThCLFFBQVF1aEIsS0FBTSxpRUFBa0VwakIsR0FDaEYyK0IsRUFBUyxJQUFJamMsR0FJZGQsRUFBTzhELEtBQWNpWixFQUFPOStCLEVBQzVCK2hCLEVBQU84RCxLQUFjaVosRUFBTzUrQixFQUk3QixPQUFPYixLQUlSbzlDLGtCQUFtQkQsR0FFbEIsTUFBTXo2QixFQUFRMWlCLEtBQUswaUIsTUFDbkIsSUFBSThELEVBQVMsRUFFYixJQUFNLElBQUkxbEIsRUFBSSxFQUFHVyxFQUFJMDdDLEVBQVFyK0MsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFbEQsSUFBSTIrQixFQUFTMGQsRUFBU3I4QyxRQUVOMGUsSUFBWGlnQixJQUVKOThCLFFBQVF1aEIsS0FBTSxpRUFBa0VwakIsR0FDaEYyK0IsRUFBUyxJQUFJNUUsSUFJZG5ZLEVBQU84RCxLQUFjaVosRUFBTzkrQixFQUM1QitoQixFQUFPOEQsS0FBY2laLEVBQU81K0IsRUFDNUI2aEIsRUFBTzhELEtBQWNpWixFQUFPditCLEVBSTdCLE9BQU9sQixLQUlScTlDLGtCQUFtQkYsR0FFbEIsTUFBTXo2QixFQUFRMWlCLEtBQUswaUIsTUFDbkIsSUFBSThELEVBQVMsRUFFYixJQUFNLElBQUkxbEIsRUFBSSxFQUFHVyxFQUFJMDdDLEVBQVFyK0MsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFbEQsSUFBSTIrQixFQUFTMGQsRUFBU3I4QyxRQUVOMGUsSUFBWGlnQixJQUVKOThCLFFBQVF1aEIsS0FBTSxpRUFBa0VwakIsR0FDaEYyK0IsRUFBUyxJQUFJdk0sSUFJZHhRLEVBQU84RCxLQUFjaVosRUFBTzkrQixFQUM1QitoQixFQUFPOEQsS0FBY2laLEVBQU81K0IsRUFDNUI2aEIsRUFBTzhELEtBQWNpWixFQUFPditCLEVBQzVCd2hCLEVBQU84RCxLQUFjaVosRUFBT2wvQixFQUk3QixPQUFPUCxLQUlSNmtCLGFBQWM1akIsR0FFYixHQUF1QixJQUFsQmpCLEtBQUt1OEMsU0FFVCxJQUFNLElBQUl6N0MsRUFBSSxFQUFHVyxFQUFJekIsS0FBSzgxQixNQUFPaDFCLEVBQUlXLEVBQUdYLElBRXZDdTdDLEdBQVczMUIsb0JBQXFCMW1CLEtBQU1jLEdBQ3RDdTdDLEdBQVd4M0IsYUFBYzVqQixHQUV6QmpCLEtBQUtzOUMsTUFBT3g4QyxFQUFHdTdDLEdBQVcxN0MsRUFBRzA3QyxHQUFXeDdDLFFBSW5DLEdBQXVCLElBQWxCYixLQUFLdThDLFNBRWhCLElBQU0sSUFBSXo3QyxFQUFJLEVBQUdXLEVBQUl6QixLQUFLODFCLE1BQU9oMUIsRUFBSVcsRUFBR1gsSUFFdkNzN0MsR0FBVTExQixvQkFBcUIxbUIsS0FBTWMsR0FDckNzN0MsR0FBVXYzQixhQUFjNWpCLEdBRXhCakIsS0FBS3U5QyxPQUFRejhDLEVBQUdzN0MsR0FBVXo3QyxFQUFHeTdDLEdBQVV2N0MsRUFBR3U3QyxHQUFVbDdDLEdBTXRELE9BQU9sQixLQUlScXpCLGFBQWNweUIsR0FFYixJQUFNLElBQUlILEVBQUksRUFBR1csRUFBSXpCLEtBQUs4MUIsTUFBT2gxQixFQUFJVyxFQUFHWCxJQUV2Q3M3QyxHQUFVMTFCLG9CQUFxQjFtQixLQUFNYyxHQUVyQ3M3QyxHQUFVL29CLGFBQWNweUIsR0FFeEJqQixLQUFLdTlDLE9BQVF6OEMsRUFBR3M3QyxHQUFVejdDLEVBQUd5N0MsR0FBVXY3QyxFQUFHdTdDLEdBQVVsN0MsR0FJckQsT0FBT2xCLEtBSVJtN0Isa0JBQW1CbDZCLEdBRWxCLElBQU0sSUFBSUgsRUFBSSxFQUFHVyxFQUFJekIsS0FBSzgxQixNQUFPaDFCLEVBQUlXLEVBQUdYLElBRXZDczdDLEdBQVUxMUIsb0JBQXFCMW1CLEtBQU1jLEdBRXJDczdDLEdBQVVqaEIsa0JBQW1CbDZCLEdBRTdCakIsS0FBS3U5QyxPQUFRejhDLEVBQUdzN0MsR0FBVXo3QyxFQUFHeTdDLEdBQVV2N0MsRUFBR3U3QyxHQUFVbDdDLEdBSXJELE9BQU9sQixLQUlSbThCLG1CQUFvQmw3QixHQUVuQixJQUFNLElBQUlILEVBQUksRUFBR1csRUFBSXpCLEtBQUs4MUIsTUFBT2gxQixFQUFJVyxFQUFHWCxJQUV2Q3M3QyxHQUFVMTFCLG9CQUFxQjFtQixLQUFNYyxHQUVyQ3M3QyxHQUFVamdCLG1CQUFvQmw3QixHQUU5QmpCLEtBQUt1OUMsT0FBUXo4QyxFQUFHczdDLEdBQVV6N0MsRUFBR3k3QyxHQUFVdjdDLEVBQUd1N0MsR0FBVWw3QyxHQUlyRCxPQUFPbEIsS0FJUjJNLElBQUszTixFQUFPd25CLEVBQVMsR0FJcEIsT0FGQXhtQixLQUFLMGlCLE1BQU0vVixJQUFLM04sRUFBT3duQixHQUVoQnhtQixLQUlSNG1CLEtBQU1oZ0IsR0FFTCxPQUFPNUcsS0FBSzBpQixNQUFPOWIsRUFBUTVHLEtBQUt1OEMsVUFJakM1NEIsS0FBTS9jLEVBQU9qRyxHQUlaLE9BRkFYLEtBQUswaUIsTUFBTzliLEVBQVE1RyxLQUFLdThDLFVBQWE1N0MsRUFFL0JYLEtBSVI2bUIsS0FBTWpnQixHQUVMLE9BQU81RyxLQUFLMGlCLE1BQU85YixFQUFRNUcsS0FBS3U4QyxTQUFXLEdBSTVDMzRCLEtBQU1oZCxFQUFPL0YsR0FJWixPQUZBYixLQUFLMGlCLE1BQU85YixFQUFRNUcsS0FBS3U4QyxTQUFXLEdBQU0xN0MsRUFFbkNiLEtBSVJrdkIsS0FBTXRvQixHQUVMLE9BQU81RyxLQUFLMGlCLE1BQU85YixFQUFRNUcsS0FBS3U4QyxTQUFXLEdBSTVDcHBCLEtBQU12c0IsRUFBTzFGLEdBSVosT0FGQWxCLEtBQUswaUIsTUFBTzliLEVBQVE1RyxLQUFLdThDLFNBQVcsR0FBTXI3QyxFQUVuQ2xCLEtBSVIwMEIsS0FBTTl0QixHQUVMLE9BQU81RyxLQUFLMGlCLE1BQU85YixFQUFRNUcsS0FBS3U4QyxTQUFXLEdBSTVDbnBCLEtBQU14c0IsRUFBT3JHLEdBSVosT0FGQVAsS0FBSzBpQixNQUFPOWIsRUFBUTVHLEtBQUt1OEMsU0FBVyxHQUFNaDhDLEVBRW5DUCxLQUlSczlDLE1BQU8xMkMsRUFBT2pHLEVBQUdFLEdBT2hCLE9BTEErRixHQUFTNUcsS0FBS3U4QyxTQUVkdjhDLEtBQUswaUIsTUFBTzliLEVBQVEsR0FBTWpHLEVBQzFCWCxLQUFLMGlCLE1BQU85YixFQUFRLEdBQU0vRixFQUVuQmIsS0FJUnU5QyxPQUFRMzJDLEVBQU9qRyxFQUFHRSxFQUFHSyxHQVFwQixPQU5BMEYsR0FBUzVHLEtBQUt1OEMsU0FFZHY4QyxLQUFLMGlCLE1BQU85YixFQUFRLEdBQU1qRyxFQUMxQlgsS0FBSzBpQixNQUFPOWIsRUFBUSxHQUFNL0YsRUFDMUJiLEtBQUswaUIsTUFBTzliLEVBQVEsR0FBTTFGLEVBRW5CbEIsS0FJUnc5QyxRQUFTNTJDLEVBQU9qRyxFQUFHRSxFQUFHSyxFQUFHWCxHQVN4QixPQVBBcUcsR0FBUzVHLEtBQUt1OEMsU0FFZHY4QyxLQUFLMGlCLE1BQU85YixFQUFRLEdBQU1qRyxFQUMxQlgsS0FBSzBpQixNQUFPOWIsRUFBUSxHQUFNL0YsRUFDMUJiLEtBQUswaUIsTUFBTzliLEVBQVEsR0FBTTFGLEVBQzFCbEIsS0FBSzBpQixNQUFPOWIsRUFBUSxHQUFNckcsRUFFbkJQLEtBSVJ5OUMsU0FBVTlpQixHQUlULE9BRkEzNkIsS0FBSzA4QyxpQkFBbUIvaEIsRUFFakIzNkIsS0FJUitqQixRQUVDLE9BQU8sSUFBSS9qQixLQUFLMkksWUFBYTNJLEtBQUswaUIsTUFBTzFpQixLQUFLdThDLFVBQVd2NEIsS0FBTWhrQixNQUloRTRMLFNBRUMsTUFBTW9NLEVBQU8sQ0FDWnVrQyxTQUFVdjhDLEtBQUt1OEMsU0FDZjFsQyxLQUFNN1csS0FBSzBpQixNQUFNL1osWUFBWTBOLEtBQzdCcU0sTUFBT3BqQixNQUFNQyxVQUFVdU0sTUFBTWxMLEtBQU1aLEtBQUswaUIsT0FDeEN5TSxXQUFZbnZCLEtBQUttdkIsWUFPbEIsTUFKbUIsS0FBZG52QixLQUFLcVcsT0FBYzJCLEVBQUszQixLQUFPclcsS0FBS3FXLE1BQ3BDclcsS0FBS3c4QyxRQUFVMTZCLElBQWtCOUosRUFBS3drQyxNQUFReDhDLEtBQUt3OEMsT0FDdkIsSUFBNUJ4OEMsS0FBS3k4QyxZQUFZajJCLFNBQTZDLElBQTdCeG1CLEtBQUt5OEMsWUFBWTNtQixRQUFnQjlkLEVBQUt5a0MsWUFBY3o4QyxLQUFLeThDLGFBRXhGemtDLEdBTVRza0MsR0FBZ0IvOEMsVUFBVW0rQyxtQkFBb0IsRUE0QzlDLE1BQU1DLFdBQThCckIsR0FFbkMzekMsWUFBYStaLEVBQU82NUIsRUFBVXB0QixHQUU3QnNDLE1BQU8sSUFBSS9GLFlBQWFoSixHQUFTNjVCLEVBQVVwdEIsSUFnQjdDLE1BQU15dUIsV0FBOEJ0QixHQUVuQzN6QyxZQUFhK1osRUFBTzY1QixFQUFVcHRCLEdBRTdCc0MsTUFBTyxJQUFJN0YsWUFBYWxKLEdBQVM2NUIsRUFBVXB0QixLQU03QyxjQUFxQ210QixHQUVwQzN6QyxZQUFhK1osRUFBTzY1QixFQUFVcHRCLEdBRTdCc0MsTUFBTyxJQUFJL0YsWUFBYWhKLEdBQVM2NUIsRUFBVXB0QixNQU10QjV2QixVQUFVcytDLDBCQUEyQixFQUU1RCxNQUFNQyxXQUErQnhCLEdBRXBDM3pDLFlBQWErWixFQUFPNjVCLEVBQVVwdEIsR0FFN0JzQyxNQUFPLElBQUk5ZCxhQUFjK08sR0FBUzY1QixFQUFVcHRCLElBZ0I5QyxJQUFJNHVCLEdBQVEsRUFFWixNQUFNQyxHQUFvQixJQUFJeFgsR0FDeEJ5WCxHQUFxQixJQUFJeFEsR0FDekJ5USxHQUF3QixJQUFJcmpCLEdBQzVCc2pCLEdBQXVCLElBQUlwZ0IsR0FDM0JxZ0IsR0FBaUMsSUFBSXJnQixHQUNyQ3NnQixHQUEwQixJQUFJeGpCLEdBRXBDLE1BQU15akIsV0FBdUJwOEIsRUFFNUJ2WixjQUVDOG9CLFFBRUF2eUIsT0FBT0UsZUFBZ0JZLEtBQU0sS0FBTSxDQUFFaEIsTUFBTysrQyxPQUU1Qy85QyxLQUFLa3dCLEtBQU9wTixJQUVaOWlCLEtBQUtxVyxLQUFPLEdBQ1pyVyxLQUFLNlcsS0FBTyxpQkFFWjdXLEtBQUs0RyxNQUFRLEtBQ2I1RyxLQUFLNi9CLFdBQWEsR0FFbEI3L0IsS0FBS3UrQyxnQkFBa0IsR0FDdkJ2K0MsS0FBS3crQyxzQkFBdUIsRUFFNUJ4K0MsS0FBS3krQyxPQUFTLEdBRWR6K0MsS0FBSysvQixZQUFjLEtBQ25CLy9CLEtBQUswK0MsZUFBaUIsS0FFdEIxK0MsS0FBSzIrQyxVQUFZLENBQUUzNUMsTUFBTyxFQUFHOHdCLE1BQU8vbEIsRUFBQUEsR0FFcEMvUCxLQUFLa3lCLFNBQVcsR0FJakIwc0IsV0FFQyxPQUFPNStDLEtBQUs0RyxNQUliaTRDLFNBQVVqNEMsR0FZVCxPQVZLdEgsTUFBTXVPLFFBQVNqSCxHQUVuQjVHLEtBQUs0RyxNQUFRLElBQU1za0IsRUFBa0J0a0IsR0FBVWczQyxHQUF3QkQsSUFBeUIvMkMsRUFBTyxHQUl2RzVHLEtBQUs0RyxNQUFRQSxFQUlQNUcsS0FJUjgrQyxhQUFjem9DLEdBRWIsT0FBT3JXLEtBQUs2L0IsV0FBWXhwQixHQUl6QjhELGFBQWM5RCxFQUFNc1EsR0FJbkIsT0FGQTNtQixLQUFLNi9CLFdBQVl4cEIsR0FBU3NRLEVBRW5CM21CLEtBSVIrK0MsZ0JBQWlCMW9DLEdBSWhCLGNBRk9yVyxLQUFLNi9CLFdBQVl4cEIsR0FFakJyVyxLQUlSZy9DLGFBQWMzb0MsR0FFYixZQUFtQ21KLElBQTVCeGYsS0FBSzYvQixXQUFZeHBCLEdBSXpCNG9DLFNBQVVqNkMsRUFBTzh3QixFQUFPb3BCLEVBQWdCLEdBRXZDbC9DLEtBQUt5K0MsT0FBT2o4QyxLQUFNLENBRWpCd0MsTUFBT0EsRUFDUDh3QixNQUFPQSxFQUNQb3BCLGNBQWVBLElBTWpCQyxjQUVDbi9DLEtBQUt5K0MsT0FBUyxHQUlmVyxhQUFjcDZDLEVBQU84d0IsR0FFcEI5MUIsS0FBSzIrQyxVQUFVMzVDLE1BQVFBLEVBQ3ZCaEYsS0FBSzIrQyxVQUFVN29CLE1BQVFBLEVBSXhCekMsYUFBY3BJLEdBRWIsTUFBTTZVLEVBQVc5L0IsS0FBSzYvQixXQUFXQyxjQUVmdGdCLElBQWJzZ0IsSUFFSkEsRUFBU3pNLGFBQWNwSSxHQUV2QjZVLEVBQVMxUCxhQUFjLEdBSXhCLE1BQU02TSxFQUFTajlCLEtBQUs2L0IsV0FBVzVDLE9BRS9CLFFBQWdCemQsSUFBWHlkLEVBQXVCLENBRTNCLE1BQU00USxHQUFlLElBQUkxbUIsR0FBVWtELGdCQUFpQlksR0FFcERnUyxFQUFPOUIsa0JBQW1CMFMsR0FFMUI1USxFQUFPN00sYUFBYyxFQUl0QixNQUFNaXZCLEVBQVVyL0MsS0FBSzYvQixXQUFXd2YsUUFzQmhDLFlBcEJpQjcvQixJQUFaNi9CLElBRUpBLEVBQVFsakIsbUJBQW9CbFIsR0FFNUJvMEIsRUFBUWp2QixhQUFjLEdBSUcsT0FBckJwd0IsS0FBSysvQixhQUVULy9CLEtBQUtnZ0MscUJBSXVCLE9BQXhCaGdDLEtBQUswK0MsZ0JBRVQxK0MsS0FBS3MvQyx3QkFJQ3QvQyxLQUlSZzdCLGdCQUFpQi83QixHQU1oQixPQUpBKytDLEdBQUkvViwyQkFBNEJocEMsR0FFaENlLEtBQUtxekIsYUFBYzJxQixJQUVaaCtDLEtBSVI4dUMsUUFBU25wQixHQVFSLE9BSkFxNEIsR0FBSXJVLGNBQWVoa0IsR0FFbkIzbEIsS0FBS3F6QixhQUFjMnFCLElBRVpoK0MsS0FJUit1QyxRQUFTcHBCLEdBUVIsT0FKQXE0QixHQUFJcFUsY0FBZWprQixHQUVuQjNsQixLQUFLcXpCLGFBQWMycUIsSUFFWmgrQyxLQUlSZ3ZDLFFBQVNycEIsR0FRUixPQUpBcTRCLEdBQUluVSxjQUFlbGtCLEdBRW5CM2xCLEtBQUtxekIsYUFBYzJxQixJQUVaaCtDLEtBSVJ3SCxVQUFXN0csRUFBR0UsRUFBR0ssR0FRaEIsT0FKQTg4QyxHQUFJdFUsZ0JBQWlCL29DLEVBQUdFLEVBQUdLLEdBRTNCbEIsS0FBS3F6QixhQUFjMnFCLElBRVpoK0MsS0FJUitxQixNQUFPcHFCLEVBQUdFLEVBQUdLLEdBUVosT0FKQTg4QyxHQUFJalUsVUFBV3BwQyxFQUFHRSxFQUFHSyxHQUVyQmxCLEtBQUtxekIsYUFBYzJxQixJQUVaaCtDLEtBSVI4akMsT0FBUXJFLEdBUVAsT0FOQXdlLEdBQUtuYSxPQUFRckUsR0FFYndlLEdBQUszckIsZUFFTHR5QixLQUFLcXpCLGFBQWM0cUIsR0FBS2h6QixRQUVqQmpyQixLQUlSK21CLFNBUUMsT0FOQS9tQixLQUFLZ2dDLHFCQUVMaGdDLEtBQUsrL0IsWUFBWVYsVUFBVzZlLElBQVU5NEIsU0FFdENwbEIsS0FBS3dILFVBQVcwMkMsR0FBUXY5QyxFQUFHdTlDLEdBQVFyOUMsRUFBR3E5QyxHQUFRaDlDLEdBRXZDbEIsS0FJUncrQixjQUFlQyxHQUVkLE1BQU1xQixFQUFXLEdBRWpCLElBQU0sSUFBSWgvQixFQUFJLEVBQUdXLEVBQUlnOUIsRUFBTzMvQixPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUVqRCxNQUFNeStCLEVBQVFkLEVBQVEzOUIsR0FDdEJnL0IsRUFBU3Q5QixLQUFNKzhCLEVBQU01K0IsRUFBRzQrQixFQUFNMStCLEVBQUcwK0IsRUFBTXIrQixHQUFLLEdBTTdDLE9BRkFsQixLQUFLbWEsYUFBYyxXQUFZLElBQUkyakMsR0FBd0JoZSxFQUFVLElBRTlEOS9CLEtBSVJnZ0MscUJBRTJCLE9BQXJCaGdDLEtBQUsrL0IsY0FFVC8vQixLQUFLKy9CLFlBQWMsSUFBSWhDLElBSXhCLE1BQU0rQixFQUFXOS9CLEtBQUs2L0IsV0FBV0MsU0FDM0J5ZixFQUEwQnYvQyxLQUFLdStDLGdCQUFnQnplLFNBRXJELEdBQUtBLEdBQVlBLEVBQVMwZixvQkFTekIsT0FQQTc4QyxRQUFRQyxNQUFPLGtKQUFtSjVDLFdBRWxLQSxLQUFLKy9CLFlBQVlwekIsSUFDaEIsSUFBSWt1QixJQUFTLEtBQVksS0FBWSxLQUNyQyxJQUFJQSxHQUFTLElBQVksSUFBWSxNQU92QyxRQUFrQnJiLElBQWJzZ0IsR0FNSixHQUpBOS9CLEtBQUsrL0IsWUFBWXhCLHVCQUF3QnVCLEdBSXBDeWYsRUFFSixJQUFNLElBQUl6K0MsRUFBSSxFQUFHaTFCLEVBQUt3cEIsRUFBd0J6Z0QsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRXBFLE1BQU0yK0MsRUFBaUJGLEVBQXlCeitDLEdBQ2hEcTlDLEdBQU81Zix1QkFBd0JraEIsR0FFMUJ6L0MsS0FBS3crQyxzQkFFVEgsR0FBVWw2QixXQUFZbmtCLEtBQUsrL0IsWUFBWXg1QixJQUFLNDNDLEdBQU81M0MsS0FDbkR2RyxLQUFLKy9CLFlBQVlwQixjQUFlMGYsSUFFaENBLEdBQVVsNkIsV0FBWW5rQixLQUFLKy9CLFlBQVloNkIsSUFBS280QyxHQUFPcDRDLEtBQ25EL0YsS0FBSysvQixZQUFZcEIsY0FBZTBmLE1BSWhDcitDLEtBQUsrL0IsWUFBWXBCLGNBQWV3ZixHQUFPNTNDLEtBQ3ZDdkcsS0FBSysvQixZQUFZcEIsY0FBZXdmLEdBQU9wNEMsWUFVMUMvRixLQUFLKy9CLFlBQVlyQixhQUlibHZCLE1BQU94UCxLQUFLKy9CLFlBQVl4NUIsSUFBSTVGLElBQU82TyxNQUFPeFAsS0FBSysvQixZQUFZeDVCLElBQUkxRixJQUFPMk8sTUFBT3hQLEtBQUsrL0IsWUFBWXg1QixJQUFJckYsS0FFdEd5QixRQUFRQyxNQUFPLHNJQUF1STVDLE1BTXhKcy9DLHdCQUU4QixPQUF4QnQvQyxLQUFLMCtDLGlCQUVUMStDLEtBQUswK0MsZUFBaUIsSUFBSWhjLElBSTNCLE1BQU01QyxFQUFXOS9CLEtBQUs2L0IsV0FBV0MsU0FDM0J5ZixFQUEwQnYvQyxLQUFLdStDLGdCQUFnQnplLFNBRXJELEdBQUtBLEdBQVlBLEVBQVMwZixvQkFNekIsT0FKQTc4QyxRQUFRQyxNQUFPLHdKQUF5SjVDLFdBRXhLQSxLQUFLMCtDLGVBQWUveEMsSUFBSyxJQUFJa3VCLEdBQVc5cUIsRUFBQUEsR0FNekMsR0FBSyt2QixFQUFXLENBSWYsTUFBTS9ZLEVBQVMvbUIsS0FBSzArQyxlQUFlMzNCLE9BTW5DLEdBSkFvM0IsR0FBTzVmLHVCQUF3QnVCLEdBSTFCeWYsRUFFSixJQUFNLElBQUl6K0MsRUFBSSxFQUFHaTFCLEVBQUt3cEIsRUFBd0J6Z0QsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRXBFLE1BQU0yK0MsRUFBaUJGLEVBQXlCeitDLEdBQ2hEczlDLEdBQWlCN2YsdUJBQXdCa2hCLEdBRXBDei9DLEtBQUt3K0Msc0JBRVRILEdBQVVsNkIsV0FBWWc2QixHQUFPNTNDLElBQUs2M0MsR0FBaUI3M0MsS0FDbkQ0M0MsR0FBT3hmLGNBQWUwZixJQUV0QkEsR0FBVWw2QixXQUFZZzZCLEdBQU9wNEMsSUFBS3E0QyxHQUFpQnI0QyxLQUNuRG80QyxHQUFPeGYsY0FBZTBmLE1BSXRCRixHQUFPeGYsY0FBZXlmLEdBQWlCNzNDLEtBQ3ZDNDNDLEdBQU94ZixjQUFleWYsR0FBaUJyNEMsTUFRMUNvNEMsR0FBTzllLFVBQVd0WSxHQUtsQixJQUFJNmIsRUFBYyxFQUVsQixJQUFNLElBQUk5aEMsRUFBSSxFQUFHaTFCLEVBQUsrSixFQUFTaEssTUFBT2gxQixFQUFJaTFCLEVBQUlqMUIsSUFFN0N1OUMsR0FBVTMzQixvQkFBcUJvWixFQUFVaC9CLEdBRXpDOGhDLEVBQWMvaUMsS0FBS2tHLElBQUs2OEIsRUFBYTdiLEVBQU9qQixrQkFBbUJ1NEIsS0FNaEUsR0FBS2tCLEVBRUosSUFBTSxJQUFJeitDLEVBQUksRUFBR2kxQixFQUFLd3BCLEVBQXdCemdELE9BQVFnQyxFQUFJaTFCLEVBQUlqMUIsSUFBTyxDQUVwRSxNQUFNMitDLEVBQWlCRixFQUF5QnorQyxHQUMxQzA5QyxFQUF1QngrQyxLQUFLdytDLHFCQUVsQyxJQUFNLElBQUl4OUMsRUFBSSxFQUFHMCtDLEVBQUtELEVBQWUzcEIsTUFBTzkwQixFQUFJMCtDLEVBQUkxK0MsSUFFbkRxOUMsR0FBVTMzQixvQkFBcUIrNEIsRUFBZ0J6K0MsR0FFMUN3OUMsSUFFSk4sR0FBUXgzQixvQkFBcUJvWixFQUFVOStCLEdBQ3ZDcTlDLEdBQVVwNkIsSUFBS2k2QixLQUloQnRiLEVBQWMvaUMsS0FBS2tHLElBQUs2OEIsRUFBYTdiLEVBQU9qQixrQkFBbUJ1NEIsS0FRbEVyK0MsS0FBSzArQyxlQUFldjRDLE9BQVN0RyxLQUFLMmxCLEtBQU1vZCxHQUVuQ3B6QixNQUFPeFAsS0FBSzArQyxlQUFldjRDLFNBRS9CeEQsUUFBUUMsTUFBTywrSEFBZ0k1QyxPQVFsSjIvQyxrQkFFQyxNQUFNLzRDLEVBQVE1RyxLQUFLNEcsTUFDYmk1QixFQUFhNy9CLEtBQUs2L0IsV0FLeEIsR0FBZSxPQUFWajVCLFFBQ3FCNFksSUFBeEJxZ0IsRUFBV0MsZUFDV3RnQixJQUF0QnFnQixFQUFXNUMsYUFDT3pkLElBQWxCcWdCLEVBQVc3TSxHQUdaLFlBREFyd0IsUUFBUUMsTUFBTyxnSEFLaEIsTUFBTWc5QyxFQUFVaDVDLEVBQU04YixNQUNoQm05QixFQUFZaGdCLEVBQVdDLFNBQVNwZCxNQUNoQ285QixFQUFVamdCLEVBQVc1QyxPQUFPdmEsTUFDNUJxOUIsRUFBTWxnQixFQUFXN00sR0FBR3RRLE1BRXBCczlCLEVBQVlILEVBQVUvZ0QsT0FBUyxHQUVHLElBQW5Da0IsS0FBS2cvQyxhQUFjLFlBRXZCaC9DLEtBQUttYSxhQUFjLFVBQVcsSUFBSW1pQyxHQUFpQixJQUFJM29DLGFBQWMsRUFBSXFzQyxHQUFhLElBSXZGLE1BQU1DLEVBQVdqZ0QsS0FBSzgrQyxhQUFjLFdBQVlwOEIsTUFFMUN3OUIsRUFBTyxHQUFJQyxFQUFPLEdBRXhCLElBQU0sSUFBSXIvQyxFQUFJLEVBQUdBLEVBQUlrL0MsRUFBV2wvQyxJQUUvQm8vQyxFQUFNcC9DLEdBQU0sSUFBSSs1QixHQUNoQnNsQixFQUFNci9DLEdBQU0sSUFBSSs1QixHQUlqQixNQUFNdWxCLEVBQUssSUFBSXZsQixHQUNkd2xCLEVBQUssSUFBSXhsQixHQUNUeWxCLEVBQUssSUFBSXpsQixHQUVUMGxCLEVBQU0sSUFBSS84QixFQUNWZzlCLEVBQU0sSUFBSWg5QixFQUNWaTlCLEVBQU0sSUFBSWo5QixFQUVWazlCLEVBQU8sSUFBSTdsQixHQUNYOGxCLEVBQU8sSUFBSTlsQixHQUVaLFNBQVMrbEIsRUFBZ0JoaUQsRUFBR0MsRUFBRzZDLEdBRTlCMCtDLEVBQUc3NUIsVUFBV3M1QixFQUFlLEVBQUpqaEQsR0FDekJ5aEQsRUFBRzk1QixVQUFXczVCLEVBQWUsRUFBSmhoRCxHQUN6QnloRCxFQUFHLzVCLFVBQVdzNUIsRUFBZSxFQUFKbitDLEdBRXpCNitDLEVBQUloNkIsVUFBV3c1QixFQUFTLEVBQUpuaEQsR0FDcEI0aEQsRUFBSWo2QixVQUFXdzVCLEVBQVMsRUFBSmxoRCxHQUNwQjRoRCxFQUFJbDZCLFVBQVd3NUIsRUFBUyxFQUFKcitDLEdBRXBCMitDLEVBQUcvN0IsSUFBSzg3QixHQUNSRSxFQUFHaDhCLElBQUs4N0IsR0FFUkksRUFBSWw4QixJQUFLaThCLEdBQ1RFLEVBQUluOEIsSUFBS2k4QixHQUVULE1BQU0vOEMsRUFBSSxHQUFRZzlDLEVBQUk3L0MsRUFBSTgvQyxFQUFJNS9DLEVBQUk0L0MsRUFBSTkvQyxFQUFJNi9DLEVBQUkzL0MsR0FJdkNvTixTQUFVekssS0FFakJrOUMsRUFBSzE4QixLQUFNcThCLEdBQUszN0IsZUFBZ0IrN0IsRUFBSTUvQyxHQUFJd2pCLGdCQUFpQmk4QixHQUFNRSxFQUFJMy9DLEdBQUk2akIsZUFBZ0JsaEIsR0FDdkZtOUMsRUFBSzM4QixLQUFNczhCLEdBQUs1N0IsZUFBZ0I4N0IsRUFBSTcvQyxHQUFJMGpCLGdCQUFpQmc4QixHQUFNSSxFQUFJOS9DLEdBQUkrakIsZUFBZ0JsaEIsR0FFdkYwOEMsRUFBTXRoRCxHQUFJcWxCLElBQUt5OEIsR0FDZlIsRUFBTXJoRCxHQUFJb2xCLElBQUt5OEIsR0FDZlIsRUFBTXgrQyxHQUFJdWlCLElBQUt5OEIsR0FFZlAsRUFBTXZoRCxHQUFJcWxCLElBQUswOEIsR0FDZlIsRUFBTXRoRCxHQUFJb2xCLElBQUswOEIsR0FDZlIsRUFBTXorQyxHQUFJdWlCLElBQUswOEIsSUFJaEIsSUFBSWxDLEVBQVN6K0MsS0FBS3krQyxPQUVLLElBQWxCQSxFQUFPMy9DLFNBRVgyL0MsRUFBUyxDQUFFLENBQ1Z6NUMsTUFBTyxFQUNQOHdCLE1BQU84cEIsRUFBUTlnRCxVQUtqQixJQUFNLElBQUlnQyxFQUFJLEVBQUdpMUIsRUFBSzBvQixFQUFPMy9DLE9BQVFnQyxFQUFJaTFCLElBQU9qMUIsRUFBSSxDQUVuRCxNQUFNKy9DLEVBQVFwQyxFQUFRMzlDLEdBRWhCa0UsRUFBUTY3QyxFQUFNNzdDLE1BR3BCLElBQU0sSUFBSWhFLEVBQUlnRSxFQUFPMDZDLEVBQUsxNkMsRUFGWjY3QyxFQUFNL3FCLE1BRXFCOTBCLEVBQUkwK0MsRUFBSTErQyxHQUFLLEVBRXJENC9DLEVBQ0NoQixFQUFTNStDLEVBQUksR0FDYjQrQyxFQUFTNStDLEVBQUksR0FDYjQrQyxFQUFTNStDLEVBQUksSUFPaEIsTUFBTW9wQixFQUFNLElBQUl5USxHQUFXaW1CLEVBQU8sSUFBSWptQixHQUNoQ2w4QixFQUFJLElBQUlrOEIsR0FBV2ttQixFQUFLLElBQUlsbUIsR0FFbEMsU0FBU21tQixFQUFjL2dELEdBRXRCdEIsRUFBRTRuQixVQUFXdTVCLEVBQWEsRUFBSjcvQyxHQUN0QjhnRCxFQUFHLzhCLEtBQU1ybEIsR0FFVCxNQUFNb0IsRUFBSW1nRCxFQUFNamdELEdBSWhCbXFCLEVBQUlwRyxLQUFNamtCLEdBQ1ZxcUIsRUFBSTlGLElBQUszbEIsRUFBRStsQixlQUFnQi9sQixFQUFFMG1CLElBQUt0bEIsS0FBUTJsQixZQUkxQ283QixFQUFLMWtCLGFBQWMya0IsRUFBSWhoRCxHQUN2QixNQUNNUSxFQURPdWdELEVBQUt6N0IsSUFBSzg2QixFQUFNbGdELElBQ1YsR0FBVSxFQUFNLEVBRW5DZ2dELEVBQWMsRUFBSmhnRCxHQUFVbXFCLEVBQUl6cEIsRUFDeEJzL0MsRUFBYyxFQUFKaGdELEVBQVEsR0FBTW1xQixFQUFJdnBCLEVBQzVCby9DLEVBQWMsRUFBSmhnRCxFQUFRLEdBQU1tcUIsRUFBSWxwQixFQUM1QisrQyxFQUFjLEVBQUpoZ0QsRUFBUSxHQUFNTSxFQUl6QixJQUFNLElBQUlPLEVBQUksRUFBR2kxQixFQUFLMG9CLEVBQU8zL0MsT0FBUWdDLEVBQUlpMUIsSUFBT2oxQixFQUFJLENBRW5ELE1BQU0rL0MsRUFBUXBDLEVBQVEzOUMsR0FFaEJrRSxFQUFRNjdDLEVBQU03N0MsTUFHcEIsSUFBTSxJQUFJaEUsRUFBSWdFLEVBQU8wNkMsRUFBSzE2QyxFQUZaNjdDLEVBQU0vcUIsTUFFcUI5MEIsRUFBSTArQyxFQUFJMStDLEdBQUssRUFFckRnZ0QsRUFBY3BCLEVBQVM1K0MsRUFBSSxJQUMzQmdnRCxFQUFjcEIsRUFBUzUrQyxFQUFJLElBQzNCZ2dELEVBQWNwQixFQUFTNStDLEVBQUksS0FROUJpZ0QsdUJBRUMsTUFBTXI2QyxFQUFRNUcsS0FBSzRHLE1BQ2JzNkMsRUFBb0JsaEQsS0FBSzgrQyxhQUFjLFlBRTdDLFFBQTJCdC9CLElBQXRCMGhDLEVBQWtDLENBRXRDLElBQUlDLEVBQWtCbmhELEtBQUs4K0MsYUFBYyxVQUV6QyxRQUF5QnQvQixJQUFwQjJoQyxFQUVKQSxFQUFrQixJQUFJN0UsR0FBaUIsSUFBSTNvQyxhQUF3QyxFQUExQnV0QyxFQUFrQnByQixPQUFhLEdBQ3hGOTFCLEtBQUttYSxhQUFjLFNBQVVnbkMsUUFNN0IsSUFBTSxJQUFJcmdELEVBQUksRUFBR2kxQixFQUFLb3JCLEVBQWdCcnJCLE1BQU9oMUIsRUFBSWkxQixFQUFJajFCLElBRXBEcWdELEVBQWdCNUQsT0FBUXo4QyxFQUFHLEVBQUcsRUFBRyxHQU1uQyxNQUFNc2dELEVBQUssSUFBSXZtQixHQUFXd21CLEVBQUssSUFBSXhtQixHQUFXeW1CLEVBQUssSUFBSXptQixHQUNqRDBtQixFQUFLLElBQUkxbUIsR0FBVzJtQixFQUFLLElBQUkzbUIsR0FBVzRtQixFQUFLLElBQUk1bUIsR0FDakR0dEIsRUFBSyxJQUFJc3RCLEdBQVd6dEIsRUFBSyxJQUFJeXRCLEdBSW5DLEdBQUtqMEIsRUFFSixJQUFNLElBQUk5RixFQUFJLEVBQUdpMUIsRUFBS252QixFQUFNa3ZCLE1BQU9oMUIsRUFBSWkxQixFQUFJajFCLEdBQUssRUFBSSxDQUVuRCxNQUFNcy9DLEVBQUt4NUMsRUFBTWdnQixLQUFNOWxCLEVBQUksR0FDckJ1L0MsRUFBS3o1QyxFQUFNZ2dCLEtBQU05bEIsRUFBSSxHQUNyQncvQyxFQUFLMTVDLEVBQU1nZ0IsS0FBTTlsQixFQUFJLEdBRTNCc2dELEVBQUcxNkIsb0JBQXFCdzZCLEVBQW1CZCxHQUMzQ2lCLEVBQUczNkIsb0JBQXFCdzZCLEVBQW1CYixHQUMzQ2lCLEVBQUc1NkIsb0JBQXFCdzZCLEVBQW1CWixHQUUzQy95QyxFQUFHZ1gsV0FBWSs4QixFQUFJRCxHQUNuQmowQyxFQUFHbVgsV0FBWTY4QixFQUFJQyxHQUNuQjl6QyxFQUFHK1gsTUFBT2xZLEdBRVZtMEMsRUFBRzc2QixvQkFBcUJ5NkIsRUFBaUJmLEdBQ3pDb0IsRUFBRzk2QixvQkFBcUJ5NkIsRUFBaUJkLEdBQ3pDb0IsRUFBRy82QixvQkFBcUJ5NkIsRUFBaUJiLEdBRXpDaUIsRUFBR3Q5QixJQUFLMVcsR0FDUmkwQyxFQUFHdjlCLElBQUsxVyxHQUNSazBDLEVBQUd4OUIsSUFBSzFXLEdBRVI0ekMsRUFBZ0I1RCxPQUFRNkMsRUFBSW1CLEVBQUc1Z0QsRUFBRzRnRCxFQUFHMWdELEVBQUcwZ0QsRUFBR3JnRCxHQUMzQ2lnRCxFQUFnQjVELE9BQVE4QyxFQUFJbUIsRUFBRzdnRCxFQUFHNmdELEVBQUczZ0QsRUFBRzJnRCxFQUFHdGdELEdBQzNDaWdELEVBQWdCNUQsT0FBUStDLEVBQUltQixFQUFHOWdELEVBQUc4Z0QsRUFBRzVnRCxFQUFHNGdELEVBQUd2Z0QsUUFRNUMsSUFBTSxJQUFJSixFQUFJLEVBQUdpMUIsRUFBS21yQixFQUFrQnByQixNQUFPaDFCLEVBQUlpMUIsRUFBSWoxQixHQUFLLEVBRTNEc2dELEVBQUcxNkIsb0JBQXFCdzZCLEVBQW1CcGdELEVBQUksR0FDL0N1Z0QsRUFBRzM2QixvQkFBcUJ3NkIsRUFBbUJwZ0QsRUFBSSxHQUMvQ3dnRCxFQUFHNTZCLG9CQUFxQnc2QixFQUFtQnBnRCxFQUFJLEdBRS9DeU0sRUFBR2dYLFdBQVkrOEIsRUFBSUQsR0FDbkJqMEMsRUFBR21YLFdBQVk2OEIsRUFBSUMsR0FDbkI5ekMsRUFBRytYLE1BQU9sWSxHQUVWK3pDLEVBQWdCNUQsT0FBUXo4QyxFQUFJLEVBQUd5TSxFQUFHNU0sRUFBRzRNLEVBQUcxTSxFQUFHME0sRUFBR3JNLEdBQzlDaWdELEVBQWdCNUQsT0FBUXo4QyxFQUFJLEVBQUd5TSxFQUFHNU0sRUFBRzRNLEVBQUcxTSxFQUFHME0sRUFBR3JNLEdBQzlDaWdELEVBQWdCNUQsT0FBUXo4QyxFQUFJLEVBQUd5TSxFQUFHNU0sRUFBRzRNLEVBQUcxTSxFQUFHME0sRUFBR3JNLEdBTWhEbEIsS0FBSzBoRCxtQkFFTFAsRUFBZ0Ivd0IsYUFBYyxHQU1oQ3V4QixNQUFPL2hCLEVBQVVwWixHQUVoQixJQUFTb1osSUFBWUEsRUFBU2dpQixpQkFHN0IsWUFEQWovQyxRQUFRQyxNQUFPLGtGQUFtRmc5QixRQUtuRnBnQixJQUFYZ0gsSUFFSkEsRUFBUyxFQUVUN2pCLFFBQVF1aEIsS0FDUCwySkFNRixNQUFNMmIsRUFBYTcvQixLQUFLNi9CLFdBRXhCLElBQU0sTUFBTThTLEtBQU85UyxFQUFhLENBRS9CLFFBQW9DcmdCLElBQS9Cb2dCLEVBQVNDLFdBQVk4UyxHQUFzQixTQUVoRCxNQUNNa1AsRUFEYWhpQixFQUFZOFMsR0FDSWp3QixNQUU3Qm8vQixFQUFhbGlCLEVBQVNDLFdBQVk4UyxHQUNsQ29QLEVBQWtCRCxFQUFXcC9CLE1BRTdCcy9CLEVBQWtCRixFQUFXdkYsU0FBVy8xQixFQUN4QzFuQixFQUFTZSxLQUFLMEcsSUFBS3c3QyxFQUFnQmpqRCxPQUFRK2lELEVBQWdCL2lELE9BQVNrakQsR0FFMUUsSUFBTSxJQUFJbGhELEVBQUksRUFBR0UsRUFBSWdoRCxFQUFpQmxoRCxFQUFJaEMsRUFBUWdDLElBQU1FLElBRXZENmdELEVBQWlCN2dELEdBQU0rZ0QsRUFBaUJqaEQsR0FNMUMsT0FBT2QsS0FJUjBoRCxtQkFFQyxNQUFNNUIsRUFBVTkvQyxLQUFLNi9CLFdBQVc1QyxPQUVoQyxJQUFNLElBQUluOEIsRUFBSSxFQUFHaTFCLEVBQUsrcEIsRUFBUWhxQixNQUFPaDFCLEVBQUlpMUIsRUFBSWoxQixJQUU1Q3U5QyxHQUFVMzNCLG9CQUFxQm81QixFQUFTaC9DLEdBRXhDdTlDLEdBQVUzNEIsWUFFVm82QixFQUFRdkMsT0FBUXo4QyxFQUFHdTlDLEdBQVUxOUMsRUFBRzA5QyxHQUFVeDlDLEVBQUd3OUMsR0FBVW45QyxHQU16RCtnRCxlQUVDLFNBQVNDLEVBQXdCdjdCLEVBQVdpNUIsR0FFM0MsTUFBTWw5QixFQUFRaUUsRUFBVWpFLE1BQ2xCNjVCLEVBQVc1MUIsRUFBVTQxQixTQUNyQnB0QixFQUFheEksRUFBVXdJLFdBRXZCZ3pCLEVBQVMsSUFBSXovQixFQUFNL1osWUFBYWkzQyxFQUFROWdELE9BQVN5OUMsR0FFdkQsSUFBSTMxQyxFQUFRLEVBQUdrMkMsRUFBUyxFQUV4QixJQUFNLElBQUloOEMsRUFBSSxFQUFHVyxFQUFJbStDLEVBQVE5Z0QsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FJakQ4RixFQUZJK2YsRUFBVXk3Qiw2QkFFTnhDLEVBQVM5K0MsR0FBTTZsQixFQUFVM08sS0FBS3FxQyxPQUFTMTdCLEVBQVVILE9BSWpEbzVCLEVBQVM5K0MsR0FBTXk3QyxFQUl4QixJQUFNLElBQUl2N0MsRUFBSSxFQUFHQSxFQUFJdTdDLEVBQVV2N0MsSUFFOUJtaEQsRUFBUXJGLEtBQWNwNkIsRUFBTzliLEtBTS9CLE9BQU8sSUFBSTAxQyxHQUFpQjZGLEVBQVE1RixFQUFVcHRCLEdBTS9DLEdBQW9CLE9BQWZudkIsS0FBSzRHLE1BR1QsT0FEQWpFLFFBQVF1aEIsS0FBTSwrRUFDUGxrQixLQUlSLE1BQU1zaUQsRUFBWSxJQUFJaEUsR0FFaEJzQixFQUFVNS9DLEtBQUs0RyxNQUFNOGIsTUFDckJtZCxFQUFhNy9CLEtBQUs2L0IsV0FJeEIsSUFBTSxNQUFNeHBCLEtBQVF3cEIsRUFBYSxDQUVoQyxNQUVNMGlCLEVBQWVMLEVBRkhyaUIsRUFBWXhwQixHQUUwQnVwQyxHQUV4RDBDLEVBQVVub0MsYUFBYzlELEVBQU1rc0MsR0FNL0IsTUFBTWhFLEVBQWtCditDLEtBQUt1K0MsZ0JBRTdCLElBQU0sTUFBTWxvQyxLQUFRa29DLEVBQWtCLENBRXJDLE1BQU1pRSxFQUFhLEdBQ2IvQyxFQUFpQmxCLEVBQWlCbG9DLEdBRXhDLElBQU0sSUFBSXZWLEVBQUksRUFBR2kxQixFQUFLMHBCLEVBQWUzZ0QsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRTNELE1BRU15aEQsRUFBZUwsRUFGSHpDLEVBQWdCMytDLEdBRXNCOCtDLEdBRXhENEMsRUFBV2hnRCxLQUFNKy9DLEdBSWxCRCxFQUFVL0QsZ0JBQWlCbG9DLEdBQVNtc0MsRUFJckNGLEVBQVU5RCxxQkFBdUJ4K0MsS0FBS3crQyxxQkFJdEMsTUFBTUMsRUFBU3orQyxLQUFLeStDLE9BRXBCLElBQU0sSUFBSTM5QyxFQUFJLEVBQUdXLEVBQUlnOUMsRUFBTzMvQyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUVqRCxNQUFNKy9DLEVBQVFwQyxFQUFRMzlDLEdBQ3RCd2hELEVBQVVyRCxTQUFVNEIsRUFBTTc3QyxNQUFPNjdDLEVBQU0vcUIsTUFBTytxQixFQUFNM0IsZUFJckQsT0FBT29ELEVBSVIxMkMsU0FFQyxNQUFNb00sRUFBTyxDQUNaMmEsU0FBVSxDQUNUeEMsUUFBUyxJQUNUdFosS0FBTSxpQkFDTitiLFVBQVcsMEJBV2IsR0FMQTVhLEVBQUtrWSxLQUFPbHdCLEtBQUtrd0IsS0FDakJsWSxFQUFLbkIsS0FBTzdXLEtBQUs2VyxLQUNFLEtBQWQ3VyxLQUFLcVcsT0FBYzJCLEVBQUszQixLQUFPclcsS0FBS3FXLE1BQ3BDblgsT0FBTzZXLEtBQU0vVixLQUFLa3lCLFVBQVdwekIsT0FBUyxJQUFJa1osRUFBS2thLFNBQVdseUIsS0FBS2t5QixlQUUzQzFTLElBQXBCeGYsS0FBSyt4QyxXQUEyQixDQUVwQyxNQUFNQSxFQUFhL3hDLEtBQUsreEMsV0FFeEIsSUFBTSxNQUFNWSxLQUFPWixPQUVTdnlCLElBQXRCdXlCLEVBQVlZLEtBQXNCMzZCLEVBQU0yNkIsR0FBUVosRUFBWVksSUFJbEUsT0FBTzM2QixFQU1SQSxFQUFLQSxLQUFPLENBQUU2bkIsV0FBWSxJQUUxQixNQUFNajVCLEVBQVE1RyxLQUFLNEcsTUFFSixPQUFWQSxJQUVKb1IsRUFBS0EsS0FBS3BSLE1BQVEsQ0FDakJpUSxLQUFNalEsRUFBTThiLE1BQU0vWixZQUFZME4sS0FDOUJxTSxNQUFPcGpCLE1BQU1DLFVBQVV1TSxNQUFNbEwsS0FBTWdHLEVBQU04YixTQUszQyxNQUFNbWQsRUFBYTcvQixLQUFLNi9CLFdBRXhCLElBQU0sTUFBTThTLEtBQU85UyxFQUFhLENBRS9CLE1BQU1sWixFQUFZa1osRUFBWThTLEdBRTlCMzZCLEVBQUtBLEtBQUs2bkIsV0FBWThTLEdBQVFoc0IsRUFBVS9hLE9BQVFvTSxFQUFLQSxNQUl0RCxNQUFNdW1DLEVBQWtCLEdBQ3hCLElBQUlrRSxHQUFxQixFQUV6QixJQUFNLE1BQU05UCxLQUFPM3lDLEtBQUt1K0MsZ0JBQWtCLENBRXpDLE1BQU1tRSxFQUFpQjFpRCxLQUFLdStDLGdCQUFpQjVMLEdBRXZDandCLEVBQVEsR0FFZCxJQUFNLElBQUk1aEIsRUFBSSxFQUFHaTFCLEVBQUsyc0IsRUFBZTVqRCxPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBQU8sQ0FFM0QsTUFBTTZsQixFQUFZKzdCLEVBQWdCNWhELEdBRWxDNGhCLEVBQU1sZ0IsS0FBTW1rQixFQUFVL2EsT0FBUW9NLEVBQUtBLE9BSS9CMEssRUFBTTVqQixPQUFTLElBRW5CeS9DLEVBQWlCNUwsR0FBUWp3QixFQUV6QisvQixHQUFxQixHQU1sQkEsSUFFSnpxQyxFQUFLQSxLQUFLdW1DLGdCQUFrQkEsRUFDNUJ2bUMsRUFBS0EsS0FBS3dtQyxxQkFBdUJ4K0MsS0FBS3crQyxzQkFJdkMsTUFBTUMsRUFBU3orQyxLQUFLeStDLE9BRWZBLEVBQU8zL0MsT0FBUyxJQUVwQmtaLEVBQUtBLEtBQUt5bUMsT0FBU2xzQixLQUFLQyxNQUFPRCxLQUFLRSxVQUFXZ3NCLEtBSWhELE1BQU1DLEVBQWlCMStDLEtBQUswK0MsZUFXNUIsT0FUd0IsT0FBbkJBLElBRUoxbUMsRUFBS0EsS0FBSzBtQyxlQUFpQixDQUMxQjMzQixPQUFRMjNCLEVBQWUzM0IsT0FBT04sVUFDOUJ0Z0IsT0FBUXU0QyxFQUFldjRDLFNBS2xCNlIsRUFJUitMLFFBRUUsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjcWIsS0FBTWhrQixNQUl0Q2drQixLQUFNK0ksR0FJTC9zQixLQUFLNEcsTUFBUSxLQUNiNUcsS0FBSzYvQixXQUFhLEdBQ2xCNy9CLEtBQUt1K0MsZ0JBQWtCLEdBQ3ZCditDLEtBQUt5K0MsT0FBUyxHQUNkeitDLEtBQUsrL0IsWUFBYyxLQUNuQi8vQixLQUFLMCtDLGVBQWlCLEtBSXRCLE1BQU0xbUMsRUFBTyxHQUliaFksS0FBS3FXLEtBQU8wVyxFQUFPMVcsS0FJbkIsTUFBTXpQLEVBQVFtbUIsRUFBT25tQixNQUVOLE9BQVZBLEdBRUo1RyxLQUFLNitDLFNBQVVqNEMsRUFBTW1kLE1BQU8vTCxJQU03QixNQUFNNm5CLEVBQWE5UyxFQUFPOFMsV0FFMUIsSUFBTSxNQUFNeHBCLEtBQVF3cEIsRUFBYSxDQUVoQyxNQUFNbFosRUFBWWtaLEVBQVl4cEIsR0FDOUJyVyxLQUFLbWEsYUFBYzlELEVBQU1zUSxFQUFVNUMsTUFBTy9MLElBTTNDLE1BQU11bUMsRUFBa0J4eEIsRUFBT3d4QixnQkFFL0IsSUFBTSxNQUFNbG9DLEtBQVFrb0MsRUFBa0IsQ0FFckMsTUFBTTc3QixFQUFRLEdBQ1IrOEIsRUFBaUJsQixFQUFpQmxvQyxHQUV4QyxJQUFNLElBQUl2VixFQUFJLEVBQUdXLEVBQUlnK0MsRUFBZTNnRCxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFbEQ0aEIsRUFBTWxnQixLQUFNaTlDLEVBQWdCMytDLEdBQUlpakIsTUFBTy9MLElBSXhDaFksS0FBS3UrQyxnQkFBaUJsb0MsR0FBU3FNLEVBSWhDMWlCLEtBQUt3K0MscUJBQXVCenhCLEVBQU95eEIscUJBSW5DLE1BQU1DLEVBQVMxeEIsRUFBTzB4QixPQUV0QixJQUFNLElBQUkzOUMsRUFBSSxFQUFHVyxFQUFJZzlDLEVBQU8zL0MsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFakQsTUFBTSsvQyxFQUFRcEMsRUFBUTM5QyxHQUN0QmQsS0FBS2kvQyxTQUFVNEIsRUFBTTc3QyxNQUFPNjdDLEVBQU0vcUIsTUFBTytxQixFQUFNM0IsZUFNaEQsTUFBTW5mLEVBQWNoVCxFQUFPZ1QsWUFFTixPQUFoQkEsSUFFSi8vQixLQUFLKy9CLFlBQWNBLEVBQVloYyxTQU1oQyxNQUFNMjZCLEVBQWlCM3hCLEVBQU8yeEIsZUFxQjlCLE9BbkJ3QixPQUFuQkEsSUFFSjErQyxLQUFLMCtDLGVBQWlCQSxFQUFlMzZCLFNBTXRDL2pCLEtBQUsyK0MsVUFBVTM1QyxNQUFRK25CLEVBQU80eEIsVUFBVTM1QyxNQUN4Q2hGLEtBQUsyK0MsVUFBVTdvQixNQUFRL0ksRUFBTzR4QixVQUFVN29CLE1BSXhDOTFCLEtBQUtreUIsU0FBV25GLEVBQU9tRixjQUlJMVMsSUFBdEJ1TixFQUFPZ2xCLGFBQTJCL3hDLEtBQUsreEMsV0FBYTd5QyxPQUFPNEUsT0FBUSxHQUFJaXBCLEVBQU9nbEIsYUFFNUUveEMsS0FJUjh5QixVQUVDOXlCLEtBQUsrQyxjQUFlLENBQUU4VCxLQUFNLGFBTTlCeW5DLEdBQWUvK0MsVUFBVXFpRCxrQkFBbUIsRUFFNUMsTUFBTWUsR0FBaUMsSUFBSW5jLEdBQ3JDb2MsR0FBdUIsSUFBSW5mLEdBQzNCb2YsR0FBMEIsSUFBSW5nQixHQUU5Qm9nQixHQUFzQixJQUFJam9CLEdBQzFCa29CLEdBQXNCLElBQUlsb0IsR0FDMUJtb0IsR0FBc0IsSUFBSW5vQixHQUUxQm9vQixHQUF1QixJQUFJcG9CLEdBQzNCcW9CLEdBQXVCLElBQUlyb0IsR0FDM0Jzb0IsR0FBdUIsSUFBSXRvQixHQUUzQnVvQixHQUF3QixJQUFJdm9CLEdBQzVCd29CLEdBQXdCLElBQUl4b0IsR0FDNUJ5b0IsR0FBd0IsSUFBSXpvQixHQUU1QjBvQixHQUF1QixJQUFJLy9CLEVBQzNCZ2dDLEdBQXVCLElBQUloZ0MsRUFDM0JpZ0MsR0FBdUIsSUFBSWpnQyxFQUUzQmtnQyxHQUFtQyxJQUFJN29CLEdBQ3ZDOG9CLEdBQXdDLElBQUk5b0IsR0FFbEQsTUFBTStvQixXQUFhblcsR0FFbEI5a0MsWUFBYWkzQixFQUFXLElBQUkwZSxHQUFrQmpNLEVBQVcsSUFBSTZKLElBRTVEenFCLFFBRUF6eEIsS0FBSzZXLEtBQU8sT0FFWjdXLEtBQUs0L0IsU0FBV0EsRUFDaEI1L0IsS0FBS3F5QyxTQUFXQSxFQUVoQnJ5QyxLQUFLNmpELHFCQUlONy9CLEtBQU0rSSxHQW1CTCxPQWpCQTBFLE1BQU16TixLQUFNK0ksUUFFMEJ2TixJQUFqQ3VOLEVBQU8rMkIsd0JBRVg5akQsS0FBSzhqRCxzQkFBd0IvMkIsRUFBTysyQixzQkFBc0JoNEMsY0FJckIwVCxJQUFqQ3VOLEVBQU9nM0Isd0JBRVgvakQsS0FBSytqRCxzQkFBd0I3a0QsT0FBTzRFLE9BQVEsR0FBSWlwQixFQUFPZzNCLHdCQUl4RC9qRCxLQUFLcXlDLFNBQVd0bEIsRUFBT3NsQixTQUN2QnJ5QyxLQUFLNC9CLFNBQVc3UyxFQUFPNlMsU0FFaEI1L0IsS0FJUjZqRCxxQkFFQyxNQUFNamtCLEVBQVc1L0IsS0FBSzQvQixTQUV0QixHQUFLQSxFQUFTZ2lCLGlCQUFtQixDQUVoQyxNQUFNckQsRUFBa0IzZSxFQUFTMmUsZ0JBQzNCeG9DLEVBQU83VyxPQUFPNlcsS0FBTXdvQyxHQUUxQixHQUFLeG9DLEVBQUtqWCxPQUFTLEVBQUksQ0FFdEIsTUFBTTJnRCxFQUFpQmxCLEVBQWlCeG9DLEVBQU0sSUFFOUMsUUFBd0J5SixJQUFuQmlnQyxFQUErQixDQUVuQ3ovQyxLQUFLOGpELHNCQUF3QixHQUM3QjlqRCxLQUFLK2pELHNCQUF3QixHQUU3QixJQUFNLElBQUk5aUQsRUFBSSxFQUFHK2lELEVBQUt2RSxFQUFlM2dELE9BQVFtQyxFQUFJK2lELEVBQUkvaUQsSUFBTyxDQUUzRCxNQUFNb1YsRUFBT29wQyxFQUFnQngrQyxHQUFJb1YsTUFBUTdNLE9BQVF2SSxHQUVqRGpCLEtBQUs4akQsc0JBQXNCdGhELEtBQU0sR0FDakN4QyxLQUFLK2pELHNCQUF1QjF0QyxHQUFTcFYsU0FRbEMsQ0FFTixNQUFNZ2pELEVBQWVya0IsRUFBU3FrQixrQkFFUnprQyxJQUFqQnlrQyxHQUE4QkEsRUFBYW5sRCxPQUFTLEdBRXhENkQsUUFBUUMsTUFBTyx5R0FRbEIwdEMsUUFBUzRULEVBQVdDLEdBRW5CLE1BQU12a0IsRUFBVzUvQixLQUFLNC9CLFNBQ2hCeVMsRUFBV3J5QyxLQUFLcXlDLFNBQ2hCblcsRUFBY2w4QixLQUFLazhCLFlBRXpCLFFBQWtCMWMsSUFBYjZ5QixFQUF5QixPQVM5QixHQUxpQyxPQUE1QnpTLEVBQVM4ZSxnQkFBMEI5ZSxFQUFTMGYsd0JBRWpEdUQsR0FBVTcrQixLQUFNNGIsRUFBUzhlLGdCQUN6Qm1FLEdBQVV4dkIsYUFBYzZJLElBRTZCLElBQWhEZ29CLEVBQVV0Z0IsSUFBSXBELGlCQUFrQnFpQixJQUF3QixPQVM3RCxHQUxBRixHQUFpQjMrQixLQUFNa1ksR0FBY3JTLFNBQ3JDKzRCLEdBQU81K0IsS0FBTWtnQyxFQUFVdGdCLEtBQU12USxhQUFjc3ZCLElBSWIsT0FBekIvaUIsRUFBU0csY0FFeUMsSUFBakQ2aUIsR0FBT3JpQixjQUFlWCxFQUFTRyxhQUEwQixPQUkvRCxJQUFJcWtCLEVBRUosR0FBS3hrQixFQUFTZ2lCLGlCQUFtQixDQUVoQyxNQUFNaDdDLEVBQVFnNUIsRUFBU2g1QixNQUNqQms1QixFQUFXRixFQUFTQyxXQUFXQyxTQUMvQnVrQixFQUFnQnprQixFQUFTMmUsZ0JBQWdCemUsU0FDekMwZSxFQUF1QjVlLEVBQVM0ZSxxQkFDaEN4ckIsRUFBSzRNLEVBQVNDLFdBQVc3TSxHQUN6Qm9oQixFQUFNeFUsRUFBU0MsV0FBV3VVLElBQzFCcUssRUFBUzdlLEVBQVM2ZSxPQUNsQkUsRUFBWS9lLEVBQVMrZSxVQUUzQixHQUFlLE9BQVYvM0MsRUFJSixHQUFLdEgsTUFBTXVPLFFBQVN3a0MsR0FFbkIsSUFBTSxJQUFJdnhDLEVBQUksRUFBR2kxQixFQUFLMG9CLEVBQU8zL0MsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRW5ELE1BQU0rL0MsRUFBUXBDLEVBQVEzOUMsR0FDaEJ3akQsRUFBZ0JqUyxFQUFVd08sRUFBTTNCLGVBS3RDLElBQU0sSUFBSWwrQyxFQUhJbkIsS0FBS2tHLElBQUs4NkMsRUFBTTc3QyxNQUFPMjVDLEVBQVUzNUMsT0FHMUIwNkMsRUFGVDcvQyxLQUFLMEcsSUFBS0ssRUFBTWt2QixNQUFPajJCLEtBQUswRyxJQUFPczZDLEVBQU03N0MsTUFBUTY3QyxFQUFNL3FCLE1BQVc2b0IsRUFBVTM1QyxNQUFRMjVDLEVBQVU3b0IsUUFFM0U5MEIsRUFBSTArQyxFQUFJMStDLEdBQUssRUFBSSxDQUUvQyxNQUFNcEMsRUFBSWdJLEVBQU1nZ0IsS0FBTTVsQixHQUNoQm5DLEVBQUkrSCxFQUFNZ2dCLEtBQU01bEIsRUFBSSxHQUNwQlUsRUFBSWtGLEVBQU1nZ0IsS0FBTTVsQixFQUFJLEdBRTFCb2pELEVBQWVHLEdBQWlDdmtELEtBQU1za0QsRUFBZUosRUFBV3RCLEdBQVE5aUIsRUFBVXVrQixFQUFlN0YsRUFBc0J4ckIsRUFBSW9oQixFQUFLeDFDLEVBQUdDLEVBQUc2QyxHQUVqSjBpRCxJQUVKQSxFQUFhSSxVQUFZM2tELEtBQUtxTCxNQUFPbEssRUFBSSxHQUN6Q29qRCxFQUFhSyxLQUFLdkYsY0FBZ0IyQixFQUFNM0IsY0FDeENpRixFQUFXM2hELEtBQU00aEQsVUFhcEIsSUFBTSxJQUFJdGpELEVBSElqQixLQUFLa0csSUFBSyxFQUFHNDRDLEVBQVUzNUMsT0FHaEIrd0IsRUFGVGwyQixLQUFLMEcsSUFBS0ssRUFBTWt2QixNQUFTNm9CLEVBQVUzNUMsTUFBUTI1QyxFQUFVN29CLE9BRWxDaDFCLEVBQUlpMUIsRUFBSWoxQixHQUFLLEVBQUksQ0FFL0MsTUFBTWxDLEVBQUlnSSxFQUFNZ2dCLEtBQU05bEIsR0FDaEJqQyxFQUFJK0gsRUFBTWdnQixLQUFNOWxCLEVBQUksR0FDcEJZLEVBQUlrRixFQUFNZ2dCLEtBQU05bEIsRUFBSSxHQUUxQnNqRCxFQUFlRyxHQUFpQ3ZrRCxLQUFNcXlDLEVBQVU2UixFQUFXdEIsR0FBUTlpQixFQUFVdWtCLEVBQWU3RixFQUFzQnhyQixFQUFJb2hCLEVBQUt4MUMsRUFBR0MsRUFBRzZDLEdBRTVJMGlELElBRUpBLEVBQWFJLFVBQVkza0QsS0FBS3FMLE1BQU9wSyxFQUFJLEdBQ3pDcWpELEVBQVczaEQsS0FBTTRoRCxTQVFkLFFBQWtCNWtDLElBQWJzZ0IsRUFJWCxHQUFLeGdDLE1BQU11TyxRQUFTd2tDLEdBRW5CLElBQU0sSUFBSXZ4QyxFQUFJLEVBQUdpMUIsRUFBSzBvQixFQUFPMy9DLE9BQVFnQyxFQUFJaTFCLEVBQUlqMUIsSUFBTyxDQUVuRCxNQUFNKy9DLEVBQVFwQyxFQUFRMzlDLEdBQ2hCd2pELEVBQWdCalMsRUFBVXdPLEVBQU0zQixlQUt0QyxJQUFNLElBQUlsK0MsRUFISW5CLEtBQUtrRyxJQUFLODZDLEVBQU03N0MsTUFBTzI1QyxFQUFVMzVDLE9BRzFCMDZDLEVBRlQ3L0MsS0FBSzBHLElBQUt1NUIsRUFBU2hLLE1BQU9qMkIsS0FBSzBHLElBQU9zNkMsRUFBTTc3QyxNQUFRNjdDLEVBQU0vcUIsTUFBVzZvQixFQUFVMzVDLE1BQVEyNUMsRUFBVTdvQixRQUU5RTkwQixFQUFJMCtDLEVBQUkxK0MsR0FBSyxFQU0zQ29qRCxFQUFlRyxHQUFpQ3ZrRCxLQUFNc2tELEVBQWVKLEVBQVd0QixHQUFROWlCLEVBQVV1a0IsRUFBZTdGLEVBQXNCeHJCLEVBQUlvaEIsRUFKaklwekMsRUFDQUEsRUFBSSxFQUNKQSxFQUFJLEdBSVRvakQsSUFFSkEsRUFBYUksVUFBWTNrRCxLQUFLcUwsTUFBT2xLLEVBQUksR0FDekNvakQsRUFBYUssS0FBS3ZGLGNBQWdCMkIsRUFBTTNCLGNBQ3hDaUYsRUFBVzNoRCxLQUFNNGhELFNBYXBCLElBQU0sSUFBSXRqRCxFQUhJakIsS0FBS2tHLElBQUssRUFBRzQ0QyxFQUFVMzVDLE9BR2hCK3dCLEVBRlRsMkIsS0FBSzBHLElBQUt1NUIsRUFBU2hLLE1BQVM2b0IsRUFBVTM1QyxNQUFRMjVDLEVBQVU3b0IsT0FFckNoMUIsRUFBSWkxQixFQUFJajFCLEdBQUssRUFNM0NzakQsRUFBZUcsR0FBaUN2a0QsS0FBTXF5QyxFQUFVNlIsRUFBV3RCLEdBQVE5aUIsRUFBVXVrQixFQUFlN0YsRUFBc0J4ckIsRUFBSW9oQixFQUo1SHR6QyxFQUNBQSxFQUFJLEVBQ0pBLEVBQUksR0FJVHNqRCxJQUVKQSxFQUFhSSxVQUFZM2tELEtBQUtxTCxNQUFPcEssRUFBSSxHQUN6Q3FqRCxFQUFXM2hELEtBQU00aEQsU0FVVnhrQixFQUFTOGtCLFlBRXBCL2hELFFBQVFDLE1BQU8sOEZBeUNsQixTQUFTMmhELEdBQWlDdmxCLEVBQVFxVCxFQUFVNlIsRUFBV3RnQixFQUFLOUQsRUFBVXVrQixFQUFlN0YsRUFBc0J4ckIsRUFBSW9oQixFQUFLeDFDLEVBQUdDLEVBQUc2QyxHQUV6SW9oRCxHQUFNcDhCLG9CQUFxQm9aLEVBQVVsaEMsR0FDckNta0QsR0FBTXI4QixvQkFBcUJvWixFQUFVamhDLEdBQ3JDbWtELEdBQU10OEIsb0JBQXFCb1osRUFBVXArQixHQUVyQyxNQUFNaWpELEVBQWtCM2xCLEVBQU84a0Isc0JBRS9CLEdBQUtPLEdBQWlCTSxFQUFrQixDQUV2Q3ZCLEdBQVF6MkMsSUFBSyxFQUFHLEVBQUcsR0FDbkIwMkMsR0FBUTEyQyxJQUFLLEVBQUcsRUFBRyxHQUNuQjIyQyxHQUFRMzJDLElBQUssRUFBRyxFQUFHLEdBRW5CLElBQU0sSUFBSTdMLEVBQUksRUFBR2kxQixFQUFLc3VCLEVBQWN2bEQsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRTFELE1BQU04akQsRUFBWUQsRUFBaUI3akQsR0FDN0IyK0MsRUFBaUI0RSxFQUFldmpELEdBRW5CLElBQWQ4akQsSUFFTDNCLEdBQU92OEIsb0JBQXFCKzRCLEVBQWdCN2dELEdBQzVDc2tELEdBQU94OEIsb0JBQXFCKzRCLEVBQWdCNWdELEdBQzVDc2tELEdBQU96OEIsb0JBQXFCKzRCLEVBQWdCLzlDLEdBRXZDODhDLEdBRUo0RSxHQUFRLytCLGdCQUFpQjQrQixHQUFRMkIsR0FDakN2QixHQUFRaC9CLGdCQUFpQjYrQixHQUFRMEIsR0FDakN0QixHQUFRai9CLGdCQUFpQjgrQixHQUFReUIsS0FJakN4QixHQUFRLytCLGdCQUFpQjQrQixHQUFPMytCLElBQUt3K0IsSUFBUzhCLEdBQzlDdkIsR0FBUWgvQixnQkFBaUI2K0IsR0FBTzUrQixJQUFLeStCLElBQVM2QixHQUM5Q3RCLEdBQVFqL0IsZ0JBQWlCOCtCLEdBQU83K0IsSUFBSzArQixJQUFTNEIsS0FNaEQ5QixHQUFNNytCLElBQUttL0IsSUFDWEwsR0FBTTkrQixJQUFLby9CLElBQ1hMLEdBQU0vK0IsSUFBS3EvQixJQUlQdGtCLEVBQU9pVCxnQkFFWGpULEVBQU82bEIsY0FBZWptRCxFQUFHa2tELElBQ3pCOWpCLEVBQU82bEIsY0FBZWhtRCxFQUFHa2tELElBQ3pCL2pCLEVBQU82bEIsY0FBZW5qRCxFQUFHc2hELEtBSTFCLE1BQU1vQixFQXRGUCxTQUE0QnBsQixFQUFRcVQsRUFBVTZSLEVBQVd0Z0IsRUFBS3dkLEVBQUlDLEVBQUlDLEVBQUkvaEIsR0FFekUsSUFBSXNDLEVBWUosR0FSQ0EsRUFuN1ZlLElBaTdWWHdRLEVBQVNxRCxLQUVEOVIsRUFBSXFDLGtCQUFtQnFiLEVBQUlELEVBQUlELEdBQUksRUFBTTdoQixHQUl6Q3FFLEVBQUlxQyxrQkFBbUJtYixFQUFJQyxFQUFJQyxFQXQ3VjFCLElBczdWOEJqUCxFQUFTcUQsS0FBcUJuVyxHQUkzRCxPQUFkc0MsRUFBcUIsT0FBTyxLQUVqQzhoQixHQUF3QjMvQixLQUFNdWIsR0FDOUJva0IsR0FBd0J0d0IsYUFBYzJMLEVBQU85QyxhQUU3QyxNQUFNZ1QsRUFBV2dWLEVBQVV0Z0IsSUFBSUYsT0FBTzdkLFdBQVk4OUIsSUFFbEQsT0FBS3pVLEVBQVdnVixFQUFVOVksTUFBUThELEVBQVdnVixFQUFVN1ksSUFBYSxLQUU3RCxDQUNONkQsU0FBVUEsRUFDVjNQLE1BQU9va0IsR0FBd0I1L0IsUUFDL0JpYixPQUFRQSxHQTREWThsQixDQUFtQjlsQixFQUFRcVQsRUFBVTZSLEVBQVd0Z0IsRUFBS2tmLEdBQU9DLEdBQU9DLEdBQU9VLElBRS9GLEdBQUtVLEVBQWUsQ0FFZHB4QixJQUVKdXdCLEdBQU83OEIsb0JBQXFCc00sRUFBSXAwQixHQUNoQzRrRCxHQUFPOThCLG9CQUFxQnNNLEVBQUluMEIsR0FDaEM0a0QsR0FBTy84QixvQkFBcUJzTSxFQUFJdHhCLEdBRWhDMGlELEVBQWFweEIsR0FBS3dnQixHQUFTd0IsTUFBTzBPLEdBQW9CWixHQUFPQyxHQUFPQyxHQUFPTyxHQUFRQyxHQUFRQyxHQUFRLElBQUlqZ0MsSUFJbkc0d0IsSUFFSm1QLEdBQU83OEIsb0JBQXFCMHRCLEVBQUt4MUMsR0FDakM0a0QsR0FBTzk4QixvQkFBcUIwdEIsRUFBS3YxQyxHQUNqQzRrRCxHQUFPLzhCLG9CQUFxQjB0QixFQUFLMXlDLEdBRWpDMGlELEVBQWFoUSxJQUFNWixHQUFTd0IsTUFBTzBPLEdBQW9CWixHQUFPQyxHQUFPQyxHQUFPTyxHQUFRQyxHQUFRQyxHQUFRLElBQUlqZ0MsSUFJekcsTUFBTWloQyxFQUFPLENBQ1o3bEQsRUFBR0EsRUFDSEMsRUFBR0EsRUFDSDZDLEVBQUdBLEVBQ0h1N0IsT0FBUSxJQUFJcEMsR0FDWnFrQixjQUFlLEdBR2hCMUwsR0FBU3FCLFVBQVdpTyxHQUFPQyxHQUFPQyxHQUFPeUIsRUFBS3huQixRQUU5Q21uQixFQUFhSyxLQUFPQSxFQUlyQixPQUFPTCxFQTlIUlIsR0FBS3JrRCxVQUFVcXlDLFFBQVMsRUFrSXhCLE1BQU1tVCxXQUFvQnpHLEdBRXpCMzFDLFlBQWF2RSxFQUFRLEVBQUdDLEVBQVMsRUFBR3d3QixFQUFRLEVBQUdtd0IsRUFBZ0IsRUFBR0MsRUFBaUIsRUFBR0MsRUFBZ0IsR0FFckd6ekIsUUFFQXp4QixLQUFLNlcsS0FBTyxjQUVaN1csS0FBSyt4QyxXQUFhLENBQ2pCM3RDLE1BQU9BLEVBQ1BDLE9BQVFBLEVBQ1J3d0IsTUFBT0EsRUFDUG13QixjQUFlQSxFQUNmQyxlQUFnQkEsRUFDaEJDLGNBQWVBLEdBR2hCLE1BQU1DLEVBQVFubEQsS0FJZGdsRCxFQUFnQm5sRCxLQUFLcUwsTUFBTzg1QyxHQUM1QkMsRUFBaUJwbEQsS0FBS3FMLE1BQU8rNUMsR0FDN0JDLEVBQWdCcmxELEtBQUtxTCxNQUFPZzZDLEdBSTVCLE1BQU10RixFQUFVLEdBQ1Z3RixFQUFXLEdBQ1h0RixFQUFVLEdBQ1ZDLEVBQU0sR0FJWixJQUFJc0YsRUFBbUIsRUFDbkJDLEVBQWEsRUFrQmpCLFNBQVNDLEVBQVkvbEQsRUFBR1MsRUFBR00sRUFBR2lsRCxFQUFNQyxFQUFNcmhELEVBQU9DLEVBQVF3d0IsRUFBTzZ3QixFQUFPQyxFQUFPekcsR0FFN0UsTUFBTTBHLEVBQWV4aEQsRUFBUXNoRCxFQUN2QkcsRUFBZ0J4aEQsRUFBU3NoRCxFQUV6QkcsRUFBWTFoRCxFQUFRLEVBQ3BCMmhELEVBQWExaEQsRUFBUyxFQUN0QjJoRCxFQUFZbnhCLEVBQVEsRUFFcEJveEIsRUFBU1AsRUFBUSxFQUNqQlEsRUFBU1AsRUFBUSxFQUV2QixJQUFJUSxFQUFnQixFQUNoQkMsRUFBYSxFQUVqQixNQUFNM21CLEVBQVMsSUFBSTVFLEdBSW5CLElBQU0sSUFBSVksRUFBSyxFQUFHQSxFQUFLeXFCLEVBQVF6cUIsSUFBUSxDQUV0QyxNQUFNNTZCLEVBQUk0NkIsRUFBS29xQixFQUFnQkUsRUFFL0IsSUFBTSxJQUFJdnFCLEVBQUssRUFBR0EsRUFBS3lxQixFQUFRenFCLElBQVEsQ0FFdEMsTUFBTTc2QixFQUFJNjZCLEVBQUtvcUIsRUFBZUUsRUFJOUJybUIsRUFBUWpnQyxHQUFNbUIsRUFBSTZrRCxFQUNsQi9sQixFQUFReC9CLEdBQU1ZLEVBQUk0a0QsRUFDbEJobUIsRUFBUWwvQixHQUFNeWxELEVBSWRaLEVBQVM1aUQsS0FBTWk5QixFQUFPOStCLEVBQUc4K0IsRUFBTzUrQixFQUFHNCtCLEVBQU92K0IsR0FJMUN1K0IsRUFBUWpnQyxHQUFNLEVBQ2RpZ0MsRUFBUXgvQixHQUFNLEVBQ2R3L0IsRUFBUWwvQixHQUFNczBCLEVBQVEsRUFBSSxHQUFNLEVBSWhDaXJCLEVBQVF0OUMsS0FBTWk5QixFQUFPOStCLEVBQUc4K0IsRUFBTzUrQixFQUFHNCtCLEVBQU92K0IsR0FJekM2K0MsRUFBSXY5QyxLQUFNZzVCLEVBQUtrcUIsR0FDZjNGLEVBQUl2OUMsS0FBTSxFQUFNaTVCLEVBQUtrcUIsR0FJckJRLEdBQWlCLEdBWW5CLElBQU0sSUFBSTFxQixFQUFLLEVBQUdBLEVBQUtrcUIsRUFBT2xxQixJQUU3QixJQUFNLElBQUlELEVBQUssRUFBR0EsRUFBS2txQixFQUFPbHFCLElBQVEsQ0FFckMsTUFBTTU4QixFQUFJeW1ELEVBQW1CN3BCLEVBQUt5cUIsRUFBU3hxQixFQUNyQzU4QixFQUFJd21ELEVBQW1CN3BCLEVBQUt5cUIsR0FBV3hxQixFQUFLLEdBQzVDLzVCLEVBQUkyakQsR0FBcUI3cEIsRUFBSyxHQUFNeXFCLEdBQVd4cUIsRUFBSyxHQUNwRG41QixFQUFJK2lELEdBQXFCN3BCLEVBQUssR0FBTXlxQixFQUFTeHFCLEVBSW5EbWtCLEVBQVFwOUMsS0FBTTVELEVBQUdDLEVBQUd5RCxHQUNwQnM5QyxFQUFRcDlDLEtBQU0zRCxFQUFHNkMsRUFBR1ksR0FJcEI4akQsR0FBYyxFQVFoQmpCLEVBQU1sRyxTQUFVcUcsRUFBWWMsRUFBWWxILEdBSXhDb0csR0FBY2MsRUFJZGYsR0FBb0JjLEVBaEhyQlosRUFBWSxJQUFLLElBQUssS0FBTyxHQUFLLEVBQUcxd0IsRUFBT3h3QixFQUFRRCxFQUFPOGdELEVBQWVELEVBQWdCLEdBQzFGTSxFQUFZLElBQUssSUFBSyxJQUFLLEdBQUssRUFBRzF3QixFQUFPeHdCLEdBQVVELEVBQU84Z0QsRUFBZUQsRUFBZ0IsR0FDMUZNLEVBQVksSUFBSyxJQUFLLElBQUssRUFBRyxFQUFHbmhELEVBQU95d0IsRUFBT3h3QixFQUFRMmdELEVBQWVFLEVBQWUsR0FDckZLLEVBQVksSUFBSyxJQUFLLElBQUssR0FBSyxFQUFHbmhELEVBQU95d0IsR0FBU3h3QixFQUFRMmdELEVBQWVFLEVBQWUsR0FDekZLLEVBQVksSUFBSyxJQUFLLElBQUssR0FBSyxFQUFHbmhELEVBQU9DLEVBQVF3d0IsRUFBT213QixFQUFlQyxFQUFnQixHQUN4Rk0sRUFBWSxJQUFLLElBQUssS0FBTyxHQUFLLEVBQUduaEQsRUFBT0MsR0FBVXd3QixFQUFPbXdCLEVBQWVDLEVBQWdCLEdBSTVGamxELEtBQUs2K0MsU0FBVWUsR0FDZjUvQyxLQUFLbWEsYUFBYyxXQUFZLElBQUkyakMsR0FBd0JzSCxFQUFVLElBQ3JFcGxELEtBQUttYSxhQUFjLFNBQVUsSUFBSTJqQyxHQUF3QmdDLEVBQVMsSUFDbEU5L0MsS0FBS21hLGFBQWMsS0FBTSxJQUFJMmpDLEdBQXdCaUMsRUFBSyxJQTBHM0R4d0IsZ0JBQWlCdlgsR0FFaEIsT0FBTyxJQUFJK3NDLEdBQWEvc0MsRUFBSzVULE1BQU80VCxFQUFLM1QsT0FBUTJULEVBQUs2YyxNQUFPN2MsRUFBS2d0QyxjQUFlaHRDLEVBQUtpdEMsZUFBZ0JqdEMsRUFBS2t0QyxnQkFVN0csU0FBU21CLEdBQWU3MkIsR0FFdkIsTUFBTWdILEVBQU0sR0FFWixJQUFNLE1BQU1oM0IsS0FBS2d3QixFQUFNLENBRXRCZ0gsRUFBS2gzQixHQUFNLEdBRVgsSUFBTSxNQUFNK0QsS0FBS2lzQixFQUFLaHdCLEdBQU0sQ0FFM0IsTUFBTThtRCxFQUFXOTJCLEVBQUtod0IsR0FBSytELEdBRXRCK2lELElBQWNBLEVBQVNwNUIsU0FDM0JvNUIsRUFBU2g3QixXQUFhZzdCLEVBQVMvYSxXQUMvQithLEVBQVNwL0IsV0FBYW8vQixFQUFTeG9CLFdBQWF3b0IsRUFBUzN4QixXQUNyRDJ4QixFQUFTcnpCLFdBQWFxekIsRUFBUzFyQixjQUUvQnBFLEVBQUtoM0IsR0FBSytELEdBQU0raUQsRUFBU3ZpQyxRQUVkemtCLE1BQU11TyxRQUFTeTRDLEdBRTFCOXZCLEVBQUtoM0IsR0FBSytELEdBQU0raUQsRUFBU3g2QyxRQUl6QjBxQixFQUFLaDNCLEdBQUsrRCxHQUFNK2lELEdBUW5CLE9BQU85dkIsRUFJUixTQUFTK3ZCLEdBQWVDLEdBRXZCLE1BQU1DLEVBQVMsR0FFZixJQUFNLElBQUlqbkQsRUFBSSxFQUFHQSxFQUFJZ25ELEVBQVMxbkQsT0FBUVUsSUFBTyxDQUU1QyxNQUFNNHFCLEVBQU1pOEIsR0FBZUcsRUFBVWhuRCxJQUVyQyxJQUFNLE1BQU0rRCxLQUFLNm1CLEVBRWhCcThCLEVBQVFsakQsR0FBTTZtQixFQUFLN21CLEdBTXJCLE9BQU9rakQsRUFNUixNQUFNQyxHQUFnQixDQUFFM2lDLE1BQU9zaUMsR0FBZTFFLE1BQU80RSxJQU1yRCxNQUFNSSxXQUF1QnBSLEdBRTVCNXNDLFlBQWFvcEMsR0FFWnRnQixRQUVBenhCLEtBQUs2VyxLQUFPLGlCQUVaN1csS0FBSzRtRCxRQUFVLEdBQ2Y1bUQsS0FBS3dtRCxTQUFXLEdBRWhCeG1ELEtBQUs2bUQsYUFmYyxnR0FnQm5CN21ELEtBQUs4bUQsZUFkZ0IsaUVBZ0JyQjltRCxLQUFLdTdDLFVBQVksRUFFakJ2N0MsS0FBSzA3QyxXQUFZLEVBQ2pCMTdDLEtBQUsyN0MsbUJBQXFCLEVBRTFCMzdDLEtBQUt3MUMsS0FBTSxFQUNYeDFDLEtBQUsrbUQsUUFBUyxFQUNkL21ELEtBQUtnbkQsVUFBVyxFQUVoQmhuRCxLQUFLaW5ELFdBQWEsQ0FDakJDLGFBQWEsRUFDYkMsV0FBVyxFQUNYQyxhQUFhLEVBQ2JDLGtCQUFrQixHQUtuQnJuRCxLQUFLc25ELHVCQUF5QixDQUM3QixNQUFTLENBQUUsRUFBRyxFQUFHLEdBQ2pCLEdBQU0sQ0FBRSxFQUFHLEdBQ1gsSUFBTyxDQUFFLEVBQUcsSUFHYnRuRCxLQUFLdW5ELHlCQUFzQi9uQyxFQUMzQnhmLEtBQUt3bkQsb0JBQXFCLEVBRTFCeG5ELEtBQUt5bkQsWUFBYyxVQUVDam9DLElBQWZ1eUIsU0FFMkJ2eUIsSUFBMUJ1eUIsRUFBV2xTLFlBRWZsOUIsUUFBUUMsTUFBTywyRkFJaEI1QyxLQUFLaTRDLFVBQVdsRyxJQU1sQi90QixLQUFNK0ksR0FxQkwsT0FuQkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBSzhtRCxlQUFpQi81QixFQUFPKzVCLGVBQzdCOW1ELEtBQUs2bUQsYUFBZTk1QixFQUFPODVCLGFBRTNCN21ELEtBQUt3bUQsU0FBV0gsR0FBZXQ1QixFQUFPeTVCLFVBRXRDeG1ELEtBQUs0bUQsUUFBVTFuRCxPQUFPNEUsT0FBUSxHQUFJaXBCLEVBQU82NUIsU0FFekM1bUQsS0FBSzA3QyxVQUFZM3VCLEVBQU8ydUIsVUFDeEIxN0MsS0FBSzI3QyxtQkFBcUI1dUIsRUFBTzR1QixtQkFFakMzN0MsS0FBSyttRCxPQUFTaDZCLEVBQU9nNkIsT0FDckIvbUQsS0FBS2duRCxTQUFXajZCLEVBQU9pNkIsU0FFdkJobkQsS0FBS2luRCxXQUFhL25ELE9BQU80RSxPQUFRLEdBQUlpcEIsRUFBT2s2QixZQUU1Q2puRCxLQUFLeW5ELFlBQWMxNkIsRUFBTzA2QixZQUVuQnpuRCxLQUlSNEwsT0FBUXlrQixHQUVQLE1BQU1yWSxFQUFPeVosTUFBTTdsQixPQUFReWtCLEdBRTNCclksRUFBS3l2QyxZQUFjem5ELEtBQUt5bkQsWUFDeEJ6dkMsRUFBS3d1QyxTQUFXLEdBRWhCLElBQU0sTUFBTW53QyxLQUFRclcsS0FBS3dtRCxTQUFXLENBRW5DLE1BQ014bkQsRUFEVWdCLEtBQUt3bUQsU0FBVW53QyxHQUNUclgsTUFFakJBLEdBQVNBLEVBQU1pMEIsVUFFbkJqYixFQUFLd3VDLFNBQVVud0MsR0FBUyxDQUN2QlEsS0FBTSxJQUNON1gsTUFBT0EsRUFBTTRNLE9BQVF5a0IsR0FBT0gsTUFHbEJseEIsR0FBU0EsRUFBTWt1QixRQUUxQmxWLEVBQUt3dUMsU0FBVW53QyxHQUFTLENBQ3ZCUSxLQUFNLElBQ043WCxNQUFPQSxFQUFNbXZCLFVBR0hudkIsR0FBU0EsRUFBTWtvQixVQUUxQmxQLEVBQUt3dUMsU0FBVW53QyxHQUFTLENBQ3ZCUSxLQUFNLEtBQ043WCxNQUFPQSxFQUFNeW5CLFdBR0h6bkIsR0FBU0EsRUFBTTgrQixVQUUxQjlsQixFQUFLd3VDLFNBQVVud0MsR0FBUyxDQUN2QlEsS0FBTSxLQUNON1gsTUFBT0EsRUFBTXluQixXQUdIem5CLEdBQVNBLEVBQU0yMUIsVUFFMUIzYyxFQUFLd3VDLFNBQVVud0MsR0FBUyxDQUN2QlEsS0FBTSxLQUNON1gsTUFBT0EsRUFBTXluQixXQUdIem5CLEdBQVNBLEVBQU1zc0IsVUFFMUJ0VCxFQUFLd3VDLFNBQVVud0MsR0FBUyxDQUN2QlEsS0FBTSxLQUNON1gsTUFBT0EsRUFBTXluQixXQUdIem5CLEdBQVNBLEVBQU11c0MsVUFFMUJ2ekIsRUFBS3d1QyxTQUFVbndDLEdBQVMsQ0FDdkJRLEtBQU0sS0FDTjdYLE1BQU9BLEVBQU15bkIsV0FLZHpPLEVBQUt3dUMsU0FBVW53QyxHQUFTLENBQ3ZCclgsTUFBT0EsR0FTTEUsT0FBTzZXLEtBQU0vVixLQUFLNG1ELFNBQVU5bkQsT0FBUyxJQUFJa1osRUFBSzR1QyxRQUFVNW1ELEtBQUs0bUQsU0FFbEU1dUMsRUFBSzZ1QyxhQUFlN21ELEtBQUs2bUQsYUFDekI3dUMsRUFBSzh1QyxlQUFpQjltRCxLQUFLOG1ELGVBRTNCLE1BQU1HLEVBQWEsR0FFbkIsSUFBTSxNQUFNdFUsS0FBTzN5QyxLQUFLaW5ELFlBRVMsSUFBM0JqbkQsS0FBS2luRCxXQUFZdFUsS0FBaUJzVSxFQUFZdFUsSUFBUSxHQU01RCxPQUZLenpDLE9BQU82VyxLQUFNa3hDLEdBQWFub0QsT0FBUyxJQUFJa1osRUFBS2l2QyxXQUFhQSxHQUV2RGp2QyxHQU1UMnVDLEdBQWVwbkQsVUFBVW1vRCxrQkFBbUIsRUFFNUMsTUFBTUMsV0FBZWxhLEdBRXBCOWtDLGNBRUM4b0IsUUFFQXp4QixLQUFLNlcsS0FBTyxTQUVaN1csS0FBSzg3QixtQkFBcUIsSUFBSTBLLEdBRTlCeG1DLEtBQUsrN0IsaUJBQW1CLElBQUl5SyxHQUM1QnhtQyxLQUFLaThCLHdCQUEwQixJQUFJdUssR0FJcEN4aUIsS0FBTStJLEVBQVE2bEIsR0FTYixPQVBBbmhCLE1BQU16TixLQUFNK0ksRUFBUTZsQixHQUVwQjV5QyxLQUFLODdCLG1CQUFtQjlYLEtBQU0rSSxFQUFPK08sb0JBRXJDOTdCLEtBQUsrN0IsaUJBQWlCL1gsS0FBTStJLEVBQU9nUCxrQkFDbkMvN0IsS0FBS2k4Qix3QkFBd0JqWSxLQUFNK0ksRUFBT2tQLHlCQUVuQ2o4QixLQUlScXdDLGtCQUFtQjV0QixHQUVsQnppQixLQUFLMi9CLG1CQUFtQixHQUFNLEdBRTlCLE1BQU10Z0MsRUFBSVcsS0FBS2s4QixZQUFZcFgsU0FFM0IsT0FBT3JDLEVBQU85VixLQUFPdE4sRUFBRyxJQUFPQSxFQUFHLElBQU9BLEVBQUcsS0FBT3FtQixZQUlwRGdyQixrQkFBbUJDLEdBRWxCbGYsTUFBTWlmLGtCQUFtQkMsR0FFekIzd0MsS0FBSzg3QixtQkFBbUI5WCxLQUFNaGtCLEtBQUtrOEIsYUFBY3JTLFNBSWxEOFYsa0JBQW1CaVIsRUFBZUMsR0FFakNwZixNQUFNa08sa0JBQW1CaVIsRUFBZUMsR0FFeEM3d0MsS0FBSzg3QixtQkFBbUI5WCxLQUFNaGtCLEtBQUtrOEIsYUFBY3JTLFNBSWxEOUYsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLGFBQWNxYixLQUFNaGtCLE9BTXRDMm5ELEdBQU9wb0QsVUFBVWl3QyxVQUFXLEVBRTVCLE1BQU1vWSxXQUEwQkQsR0FFL0JoL0MsWUFBYWsvQyxFQUFNLEdBQUlDLEVBQVMsRUFBRzFjLEVBQU8sR0FBS0MsRUFBTSxLQUVwRDVaLFFBRUF6eEIsS0FBSzZXLEtBQU8sb0JBRVo3VyxLQUFLNm5ELElBQU1BLEVBQ1g3bkQsS0FBSytuRCxLQUFPLEVBRVovbkQsS0FBS29yQyxLQUFPQSxFQUNacHJDLEtBQUtxckMsSUFBTUEsRUFDWHJyQyxLQUFLZ29ELE1BQVEsR0FFYmhvRCxLQUFLOG5ELE9BQVNBLEVBQ2Q5bkQsS0FBS2lvRCxLQUFPLEtBRVpqb0QsS0FBS2tvRCxVQUFZLEdBQ2pCbG9ELEtBQUttb0QsV0FBYSxFQUVsQm5vRCxLQUFLb29ELHlCQUlOcGtDLEtBQU0rSSxFQUFRNmxCLEdBaUJiLE9BZkFuaEIsTUFBTXpOLEtBQU0rSSxFQUFRNmxCLEdBRXBCNXlDLEtBQUs2bkQsSUFBTTk2QixFQUFPODZCLElBQ2xCN25ELEtBQUsrbkQsS0FBT2g3QixFQUFPZzdCLEtBRW5CL25ELEtBQUtvckMsS0FBT3JlLEVBQU9xZSxLQUNuQnByQyxLQUFLcXJDLElBQU10ZSxFQUFPc2UsSUFDbEJyckMsS0FBS2dvRCxNQUFRajdCLEVBQU9pN0IsTUFFcEJob0QsS0FBSzhuRCxPQUFTLzZCLEVBQU8rNkIsT0FDckI5bkQsS0FBS2lvRCxLQUF1QixPQUFoQmw3QixFQUFPazdCLEtBQWdCLEtBQU8vb0QsT0FBTzRFLE9BQVEsR0FBSWlwQixFQUFPazdCLE1BRXBFam9ELEtBQUtrb0QsVUFBWW43QixFQUFPbTdCLFVBQ3hCbG9ELEtBQUttb0QsV0FBYXA3QixFQUFPbzdCLFdBRWxCbm9ELEtBWVJxb0QsZUFBZ0JDLEdBR2YsTUFBTUMsRUFBZSxHQUFNdm9ELEtBQUt3b0QsZ0JBQWtCRixFQUVsRHRvRCxLQUFLNm5ELElBQWdCLEVBQVZobEMsRUFBY2hqQixLQUFLNG9ELEtBQU1GLEdBQ3BDdm9ELEtBQUtvb0QseUJBT05NLGlCQUVDLE1BQU1ILEVBQWUxb0QsS0FBSzhvRCxJQUFlLEdBQVYvbEMsRUFBZ0I1aUIsS0FBSzZuRCxLQUVwRCxNQUFPLEdBQU03bkQsS0FBS3dvRCxnQkFBa0JELEVBSXJDSyxrQkFFQyxPQUFpQixFQUFWL2xDLEVBQWNoakIsS0FBSzRvRCxLQUN6QjVvRCxLQUFLOG9ELElBQWUsR0FBVi9sQyxFQUFnQjVpQixLQUFLNm5ELEtBQVE3bkQsS0FBSytuRCxNQUk5Q2MsZUFHQyxPQUFPN29ELEtBQUtrb0QsVUFBWXJvRCxLQUFLMEcsSUFBS3ZHLEtBQUs4bkQsT0FBUSxHQUloRFUsZ0JBR0MsT0FBT3hvRCxLQUFLa29ELFVBQVlyb0QsS0FBS2tHLElBQUsvRixLQUFLOG5ELE9BQVEsR0F1Q2hEZ0IsY0FBZUMsRUFBV0MsRUFBWXJvRCxFQUFHRSxFQUFHdUQsRUFBT0MsR0FFbERyRSxLQUFLOG5ELE9BQVNpQixFQUFZQyxFQUVQLE9BQWRocEQsS0FBS2lvRCxPQUVUam9ELEtBQUtpb0QsS0FBTyxDQUNYZ0IsU0FBUyxFQUNURixVQUFXLEVBQ1hDLFdBQVksRUFDWkUsUUFBUyxFQUNUQyxRQUFTLEVBQ1Qva0QsTUFBTyxFQUNQQyxPQUFRLElBS1ZyRSxLQUFLaW9ELEtBQUtnQixTQUFVLEVBQ3BCanBELEtBQUtpb0QsS0FBS2MsVUFBWUEsRUFDdEIvb0QsS0FBS2lvRCxLQUFLZSxXQUFhQSxFQUN2QmhwRCxLQUFLaW9ELEtBQUtpQixRQUFVdm9ELEVBQ3BCWCxLQUFLaW9ELEtBQUtrQixRQUFVdG9ELEVBQ3BCYixLQUFLaW9ELEtBQUs3akQsTUFBUUEsRUFDbEJwRSxLQUFLaW9ELEtBQUs1akQsT0FBU0EsRUFFbkJyRSxLQUFLb29ELHlCQUlOZ0Isa0JBRW9CLE9BQWRwcEQsS0FBS2lvRCxPQUVUam9ELEtBQUtpb0QsS0FBS2dCLFNBQVUsR0FJckJqcEQsS0FBS29vRCx5QkFJTkEseUJBRUMsTUFBTWhkLEVBQU9wckMsS0FBS29yQyxLQUNsQixJQUFJRixFQUFNRSxFQUFPdnJDLEtBQUs4b0QsSUFBZSxHQUFWL2xDLEVBQWdCNWlCLEtBQUs2bkQsS0FBUTduRCxLQUFLK25ELEtBQ3pEMWpELEVBQVMsRUFBSTZtQyxFQUNiOW1DLEVBQVFwRSxLQUFLOG5ELE9BQVN6akQsRUFDdEIybUMsR0FBUyxHQUFNNW1DLEVBQ25CLE1BQU02akQsRUFBT2pvRCxLQUFLaW9ELEtBRWxCLEdBQW1CLE9BQWRqb0QsS0FBS2lvRCxNQUFpQmpvRCxLQUFLaW9ELEtBQUtnQixRQUFVLENBRTlDLE1BQU1GLEVBQVlkLEVBQUtjLFVBQ3RCQyxFQUFhZixFQUFLZSxXQUVuQmhlLEdBQVFpZCxFQUFLaUIsUUFBVTlrRCxFQUFRMmtELEVBQy9CN2QsR0FBTytjLEVBQUtrQixRQUFVOWtELEVBQVMya0QsRUFDL0I1a0QsR0FBUzZqRCxFQUFLN2pELE1BQVEya0QsRUFDdEIxa0QsR0FBVTRqRCxFQUFLNWpELE9BQVMya0QsRUFJekIsTUFBTUssRUFBT3JwRCxLQUFLbW9ELFdBQ0osSUFBVGtCLElBQWFyZSxHQUFRSSxFQUFPaWUsRUFBT3JwRCxLQUFLNm9ELGdCQUU3QzdvRCxLQUFLKzdCLGlCQUFpQmdQLGdCQUFpQkMsRUFBTUEsRUFBTzVtQyxFQUFPOG1DLEVBQUtBLEVBQU03bUMsRUFBUSttQyxFQUFNcHJDLEtBQUtxckMsS0FFekZyckMsS0FBS2k4Qix3QkFBd0JqWSxLQUFNaGtCLEtBQUsrN0Isa0JBQW1CbFMsU0FJNURqZSxPQUFReWtCLEdBRVAsTUFBTXJZLEVBQU95WixNQUFNN2xCLE9BQVF5a0IsR0FnQjNCLE9BZEFyWSxFQUFLZ25CLE9BQU82b0IsSUFBTTduRCxLQUFLNm5ELElBQ3ZCN3ZDLEVBQUtnbkIsT0FBTytvQixLQUFPL25ELEtBQUsrbkQsS0FFeEIvdkMsRUFBS2duQixPQUFPb00sS0FBT3ByQyxLQUFLb3JDLEtBQ3hCcHpCLEVBQUtnbkIsT0FBT3FNLElBQU1yckMsS0FBS3FyQyxJQUN2QnJ6QixFQUFLZ25CLE9BQU9ncEIsTUFBUWhvRCxLQUFLZ29ELE1BRXpCaHdDLEVBQUtnbkIsT0FBTzhvQixPQUFTOW5ELEtBQUs4bkQsT0FFUCxPQUFkOW5ELEtBQUtpb0QsT0FBZ0Jqd0MsRUFBS2duQixPQUFPaXBCLEtBQU8vb0QsT0FBTzRFLE9BQVEsR0FBSTlELEtBQUtpb0QsT0FFckVqd0MsRUFBS2duQixPQUFPa3BCLFVBQVlsb0QsS0FBS2tvRCxVQUM3Qmx3QyxFQUFLZ25CLE9BQU9tcEIsV0FBYW5vRCxLQUFLbW9ELFdBRXZCbndDLEdBTVQ0dkMsR0FBa0Jyb0QsVUFBVStwRCxxQkFBc0IsRUFFbEQsTUFBTXpCLEdBQU0sR0FFWixNQUFNMEIsV0FBbUI5YixHQUV4QjlrQyxZQUFheWlDLEVBQU1DLEVBQUttZSxHQU12QixHQUpBLzNCLFFBRUF6eEIsS0FBSzZXLEtBQU8sY0FFa0MsSUFBekMyeUMsRUFBYUMsd0JBR2pCLFlBREE5bUQsUUFBUUMsTUFBTywwR0FLaEI1QyxLQUFLd3BELGFBQWVBLEVBRXBCLE1BQU1FLEVBQVcsSUFBSTlCLEdBQW1CQyxHQW5CakIsRUFtQjhCemMsRUFBTUMsR0FDM0RxZSxFQUFTaGQsT0FBUzFzQyxLQUFLMHNDLE9BQ3ZCZ2QsRUFBU3BoQixHQUFHMzdCLElBQUssR0FBSyxFQUFHLEdBQ3pCKzhDLEVBQVM1bEIsT0FBUSxJQUFJakosR0FBUyxFQUFHLEVBQUcsSUFDcEM3NkIsS0FBS2lrQixJQUFLeWxDLEdBRVYsTUFBTUMsRUFBVyxJQUFJL0IsR0FBbUJDLEdBekJqQixFQXlCOEJ6YyxFQUFNQyxHQUMzRHNlLEVBQVNqZCxPQUFTMXNDLEtBQUswc0MsT0FDdkJpZCxFQUFTcmhCLEdBQUczN0IsSUFBSyxHQUFLLEVBQUcsR0FDekJnOUMsRUFBUzdsQixPQUFRLElBQUlqSixJQUFXLEVBQUcsRUFBRyxJQUN0Qzc2QixLQUFLaWtCLElBQUswbEMsR0FFVixNQUFNQyxFQUFXLElBQUloQyxHQUFtQkMsR0EvQmpCLEVBK0I4QnpjLEVBQU1DLEdBQzNEdWUsRUFBU2xkLE9BQVMxc0MsS0FBSzBzQyxPQUN2QmtkLEVBQVN0aEIsR0FBRzM3QixJQUFLLEVBQUcsRUFBRyxHQUN2Qmk5QyxFQUFTOWxCLE9BQVEsSUFBSWpKLEdBQVMsRUFBRyxFQUFHLElBQ3BDNzZCLEtBQUtpa0IsSUFBSzJsQyxHQUVWLE1BQU1DLEVBQVcsSUFBSWpDLEdBQW1CQyxHQXJDakIsRUFxQzhCemMsRUFBTUMsR0FDM0R3ZSxFQUFTbmQsT0FBUzFzQyxLQUFLMHNDLE9BQ3ZCbWQsRUFBU3ZoQixHQUFHMzdCLElBQUssRUFBRyxHQUFLLEdBQ3pCazlDLEVBQVMvbEIsT0FBUSxJQUFJakosR0FBUyxHQUFLLEVBQUcsSUFDdEM3NkIsS0FBS2lrQixJQUFLNGxDLEdBRVYsTUFBTUMsRUFBVyxJQUFJbEMsR0FBbUJDLEdBM0NqQixFQTJDOEJ6YyxFQUFNQyxHQUMzRHllLEVBQVNwZCxPQUFTMXNDLEtBQUswc0MsT0FDdkJvZCxFQUFTeGhCLEdBQUczN0IsSUFBSyxHQUFLLEVBQUcsR0FDekJtOUMsRUFBU2htQixPQUFRLElBQUlqSixHQUFTLEVBQUcsRUFBRyxJQUNwQzc2QixLQUFLaWtCLElBQUs2bEMsR0FFVixNQUFNQyxFQUFXLElBQUluQyxHQUFtQkMsR0FqRGpCLEVBaUQ4QnpjLEVBQU1DLEdBQzNEMGUsRUFBU3JkLE9BQVMxc0MsS0FBSzBzQyxPQUN2QnFkLEVBQVN6aEIsR0FBRzM3QixJQUFLLEdBQUssRUFBRyxHQUN6Qm85QyxFQUFTam1CLE9BQVEsSUFBSWpKLEdBQVMsRUFBRyxHQUFLLElBQ3RDNzZCLEtBQUtpa0IsSUFBSzhsQyxHQUlYaHlCLE9BQVFpeUIsRUFBVUMsR0FFSSxPQUFoQmpxRCxLQUFLMHRDLFFBQWtCMXRDLEtBQUswd0Msb0JBRWpDLE1BQU04WSxFQUFleHBELEtBQUt3cEQsY0FFbEJFLEVBQVVDLEVBQVVDLEVBQVVDLEVBQVVDLEVBQVVDLEdBQWEvcEQsS0FBS21nQyxTQUV0RStwQixFQUFzQkYsRUFBU0csa0JBRS9CQyxFQUF3QkosRUFBU0ssZUFDakNDLEVBQXFCTixFQUFTTyxZQUM5QkMsRUFBbUJSLEVBQVNTLEdBQUd4QixRQUVyQ2UsRUFBU0ssZUFBaUI1b0MsRUFDMUJ1b0MsRUFBU08sWUFqeFhXLEVBa3hYcEJQLEVBQVNTLEdBQUd4QixTQUFVLEVBRXRCLE1BQU1uM0IsRUFBa0IwM0IsRUFBYXgwQixRQUFRbEQsZ0JBRTdDMDNCLEVBQWF4MEIsUUFBUWxELGlCQUFrQixFQUV2Q2s0QixFQUFTVSxnQkFBaUJsQixFQUFjLEdBQ3hDUSxFQUFTVyxPQUFRVixFQUFPUCxHQUV4Qk0sRUFBU1UsZ0JBQWlCbEIsRUFBYyxHQUN4Q1EsRUFBU1csT0FBUVYsRUFBT04sR0FFeEJLLEVBQVNVLGdCQUFpQmxCLEVBQWMsR0FDeENRLEVBQVNXLE9BQVFWLEVBQU9MLEdBRXhCSSxFQUFTVSxnQkFBaUJsQixFQUFjLEdBQ3hDUSxFQUFTVyxPQUFRVixFQUFPSixHQUV4QkcsRUFBU1UsZ0JBQWlCbEIsRUFBYyxHQUN4Q1EsRUFBU1csT0FBUVYsRUFBT0gsR0FFeEJOLEVBQWF4MEIsUUFBUWxELGdCQUFrQkEsRUFFdkNrNEIsRUFBU1UsZ0JBQWlCbEIsRUFBYyxHQUN4Q1EsRUFBU1csT0FBUVYsRUFBT0YsR0FFeEJDLEVBQVNVLGdCQUFpQlIsR0FFMUJGLEVBQVNLLGVBQWlCRCxFQUMxQkosRUFBU08sWUFBY0QsRUFDdkJOLEVBQVNTLEdBQUd4QixRQUFVdUIsRUFFdEJoQixFQUFheDBCLFFBQVEzQyxrQkFBbUIsR0FNMUMsTUFBTXU0QixXQUFvQjk1QixHQUV6Qm5vQixZQUFhNG5CLEVBQVFTLEVBQVNFLEVBQU9DLEVBQU9DLEVBQVdDLEVBQVdDLEVBQVF6YSxFQUFNMGEsRUFBWUMsR0FLM0ZDLE1BSEFsQixPQUFvQi9RLElBQVgrUSxFQUF1QkEsRUFBUyxHQUN6Q1MsT0FBc0J4UixJQUFad1IsRUFBd0JBLEVBQVVuUixFQUVwQnFSLEVBQU9DLEVBQU9DLEVBQVdDLEVBQVdDLEVBQVF6YSxFQUFNMGEsRUFBWUMsR0FFdEZ4eEIsS0FBS2d5QixPQUFRLEVBSVZ6QixhQUVILE9BQU92d0IsS0FBS21ZLE1BSVRvWSxXQUFRdnhCLEdBRVhnQixLQUFLbVksTUFBUW5aLEdBTWY0ckQsR0FBWXJyRCxVQUFVc3JELGVBQWdCLEVBRXRDLE1BQU1DLFdBQThCbDJCLEdBRW5DanNCLFlBQWEwTyxFQUFNdkIsRUFBVSxJQUU1QjJiLE1BQU9wYSxFQUFNQSxFQUFNdkIsR0FFbkIsTUFBTXFDLEVBQVEsQ0FBRS9ULE1BQU9pVCxFQUFNaFQsT0FBUWdULEVBQU13ZCxNQUFPLEdBQzVDdEUsRUFBUyxDQUFFcFksRUFBT0EsRUFBT0EsRUFBT0EsRUFBT0EsRUFBT0EsR0FFcERuWSxLQUFLZzFCLFFBQVUsSUFBSTQxQixHQUFhcjZCLEVBQVF6YSxFQUFRa2IsUUFBU2xiLEVBQVFvYixNQUFPcGIsRUFBUXFiLE1BQU9yYixFQUFRc2IsVUFBV3RiLEVBQVF1YixVQUFXdmIsRUFBUXdiLE9BQVF4YixFQUFRZSxLQUFNZixFQUFReWIsV0FBWXpiLEVBQVEwYixVQVV2THh4QixLQUFLZzFCLFFBQVE1Qyx1QkFBd0IsRUFFckNweUIsS0FBS2cxQixRQUFRbEQscUJBQThDdFMsSUFBNUIxSixFQUFRZ2MsaUJBQWdDaGMsRUFBUWdjLGdCQUMvRTl4QixLQUFLZzFCLFFBQVEzRCxlQUFrQzdSLElBQXRCMUosRUFBUXViLFVBQTBCdmIsRUFBUXViLFVBQVlqUixFQUloRjJxQywyQkFBNEJmLEVBQVVoMUIsR0FFckNoMUIsS0FBS2cxQixRQUFRbmUsS0FBT21lLEVBQVFuZSxLQUM1QjdXLEtBQUtnMUIsUUFBUXhELFNBQVd3RCxFQUFReEQsU0FFaEN4eEIsS0FBS2cxQixRQUFRbEQsZ0JBQWtCa0QsRUFBUWxELGdCQUN2Qzl4QixLQUFLZzFCLFFBQVEzRCxVQUFZMkQsRUFBUTNELFVBQ2pDcnhCLEtBQUtnMUIsUUFBUTVELFVBQVk0RCxFQUFRNUQsVUFFakMsTUFBTTQ1QixFQUVLLENBQ1RDLFVBQVcsQ0FBRWpzRCxNQUFPLE9BSGhCZ3NELEVBTW1CLHFZQU5uQkEsRUEwQnFCLCtVQW9CckJwckIsRUFBVyxJQUFJbWxCLEdBQWEsRUFBRyxFQUFHLEdBRWxDMVMsRUFBVyxJQUFJc1UsR0FBZ0IsQ0FFcEN0d0MsS0FBTSxzQkFFTm13QyxTQUFVSCxHQUFlMkUsR0FDekJuRSxhQUFjbUUsRUFDZGxFLGVBQWdCa0UsRUFDaEJ0VixLQXA5WGMsRUFxOVhkRCxTQWo5WGdCLElBcTlYakJwRCxFQUFTbVUsU0FBU3lFLFVBQVVqc0QsTUFBUWcyQixFQUVwQyxNQUFNazJCLEVBQU8sSUFBSXRILEdBQU1oa0IsRUFBVXlTLEdBRTNCOFksRUFBbUJuMkIsRUFBUTNELFVBYWpDLE9BVksyRCxFQUFRM0QsWUFBY2hSLElBQTJCMlUsRUFBUTNELFVBQVlqUixHQUUzRCxJQUFJbXBDLEdBQVksRUFBRyxHQUFJdnBELE1BQy9CKzNCLE9BQVFpeUIsRUFBVWtCLEdBRXpCbDJCLEVBQVEzRCxVQUFZODVCLEVBRXBCRCxFQUFLdHJCLFNBQVM5TSxVQUNkbzRCLEVBQUs3WSxTQUFTdmYsVUFFUDl5QixLQUlSdVUsTUFBT3kxQyxFQUFVL2pELEVBQU80dUIsRUFBT3UyQixHQUU5QixNQUFNbEIsRUFBc0JGLEVBQVNHLGtCQUVyQyxJQUFNLElBQUlycEQsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCa3BELEVBQVNVLGdCQUFpQjFxRCxLQUFNYyxHQUVoQ2twRCxFQUFTejFDLE1BQU90TyxFQUFPNHVCLEVBQU91MkIsR0FJL0JwQixFQUFTVSxnQkFBaUJSLElBTTVCWSxHQUFzQnZyRCxVQUFVa3FELHlCQUEwQixFQUUxRCxNQUFNNEIsR0FBeUIsSUFBSXh3QixHQUM3Qnl3QixHQUF5QixJQUFJendCLEdBQzdCMHdCLEdBQThCLElBQUlwa0MsRUFFeEMsTUFBTXFrQyxHQUVMN2lELFlBQWFzMEIsRUFBUyxJQUFJcEMsR0FBUyxFQUFHLEVBQUcsR0FBS2dHLEVBQVcsR0FJeEQ3Z0MsS0FBS2k5QixPQUFTQSxFQUNkajlCLEtBQUs2Z0MsU0FBV0EsRUFJakJsMEIsSUFBS3N3QixFQUFRNEQsR0FLWixPQUhBN2dDLEtBQUtpOUIsT0FBT2paLEtBQU1pWixHQUNsQmo5QixLQUFLNmdDLFNBQVdBLEVBRVQ3Z0MsS0FJUnlyRCxjQUFlOXFELEVBQUdFLEVBQUdLLEVBQUdYLEdBS3ZCLE9BSEFQLEtBQUtpOUIsT0FBT3R3QixJQUFLaE0sRUFBR0UsRUFBR0ssR0FDdkJsQixLQUFLNmdDLFNBQVd0Z0MsRUFFVFAsS0FJUjByRCw4QkFBK0J6dUIsRUFBUXNDLEdBS3RDLE9BSEF2L0IsS0FBS2k5QixPQUFPalosS0FBTWlaLEdBQ2xCajlCLEtBQUs2Z0MsVUFBYXRCLEVBQU1sYSxJQUFLcmxCLEtBQUtpOUIsUUFFM0JqOUIsS0FJUiswQyxzQkFBdUJuMkMsRUFBR0MsRUFBRzZDLEdBRTVCLE1BQU11N0IsRUFBU291QixHQUFTOW1DLFdBQVk3aUIsRUFBRzdDLEdBQUl5bUIsTUFBT2dtQyxHQUFTL21DLFdBQVkzbEIsRUFBR0MsSUFBTTZtQixZQU1oRixPQUZBMWxCLEtBQUswckQsOEJBQStCenVCLEVBQVFyK0IsR0FFckNvQixLQUlSZ2tCLEtBQU00YyxHQUtMLE9BSEE1Z0MsS0FBS2k5QixPQUFPalosS0FBTTRjLEVBQU0zRCxRQUN4Qmo5QixLQUFLNmdDLFNBQVdELEVBQU1DLFNBRWY3Z0MsS0FJUjBsQixZQUlDLE1BQU1pbUMsRUFBc0IsRUFBTTNyRCxLQUFLaTlCLE9BQU9uK0IsU0FJOUMsT0FIQWtCLEtBQUtpOUIsT0FBT3ZZLGVBQWdCaW5DLEdBQzVCM3JELEtBQUs2Z0MsVUFBWThxQixFQUVWM3JELEtBSVJvbEIsU0FLQyxPQUhBcGxCLEtBQUs2Z0MsV0FBYyxFQUNuQjdnQyxLQUFLaTlCLE9BQU83WCxTQUVMcGxCLEtBSVIyaEMsZ0JBQWlCcEMsR0FFaEIsT0FBT3YvQixLQUFLaTlCLE9BQU81WCxJQUFLa2EsR0FBVXYvQixLQUFLNmdDLFNBSXhDK3FCLGlCQUFrQm5yQixHQUVqQixPQUFPemdDLEtBQUsyaEMsZ0JBQWlCbEIsRUFBTzFaLFFBQVcwWixFQUFPdDZCLE9BSXZEMGxELGFBQWN0c0IsRUFBTzljLEdBRXBCLE9BQU9BLEVBQU91QixLQUFNaGtCLEtBQUtpOUIsUUFBU3ZZLGdCQUFrQjFrQixLQUFLMmhDLGdCQUFpQnBDLElBQVV0YixJQUFLc2IsR0FJMUZ1c0IsY0FBZUMsRUFBTXRwQyxHQUVwQixNQUFNa2hCLEVBQVlvb0IsRUFBS3Q5QixNQUFPNDhCLElBRXhCenVCLEVBQWM1OEIsS0FBS2k5QixPQUFPNVgsSUFBS3NlLEdBRXJDLEdBQXFCLElBQWhCL0csRUFHSixPQUE0QyxJQUF2QzU4QixLQUFLMmhDLGdCQUFpQm9xQixFQUFLL21ELE9BRXhCeWQsRUFBT3VCLEtBQU0rbkMsRUFBSy9tRCxPQUtuQixLQUlSLE1BQU1qRixJQUFRZ3NELEVBQUsvbUQsTUFBTXFnQixJQUFLcmxCLEtBQUtpOUIsUUFBV2o5QixLQUFLNmdDLFVBQWFqRSxFQUVoRSxPQUFLNzhCLEVBQUksR0FBS0EsRUFBSSxFQUVWLEtBSUQwaUIsRUFBT3VCLEtBQU0yZixHQUFZamYsZUFBZ0Iza0IsR0FBSWtrQixJQUFLOG5DLEVBQUsvbUQsT0FJL0RnbkQsZUFBZ0JELEdBSWYsTUFBTUUsRUFBWWpzRCxLQUFLMmhDLGdCQUFpQm9xQixFQUFLL21ELE9BQ3ZDa25ELEVBQVVsc0QsS0FBSzJoQyxnQkFBaUJvcUIsRUFBSzkrQyxLQUUzQyxPQUFTZy9DLEVBQVksR0FBS0MsRUFBVSxHQUFTQSxFQUFVLEdBQUtELEVBQVksRUFJekUxckIsY0FBZXBCLEdBRWQsT0FBT0EsRUFBSXdCLGdCQUFpQjNnQyxNQUk3QndnQyxpQkFBa0JDLEdBRWpCLE9BQU9BLEVBQU9FLGdCQUFpQjNnQyxNQUloQ21zRCxjQUFlMXBDLEdBRWQsT0FBT0EsRUFBT3VCLEtBQU1oa0IsS0FBS2k5QixRQUFTdlksZ0JBQWtCMWtCLEtBQUs2Z0MsVUFJMUR4TixhQUFjcEksRUFBUW1oQyxHQUVyQixNQUFNdmUsRUFBZXVlLEdBQXdCYixHQUFjbGhDLGdCQUFpQlksR0FFdEVvaEMsRUFBaUJyc0QsS0FBS21zRCxjQUFlZCxJQUFXaDRCLGFBQWNwSSxHQUU5RGdTLEVBQVNqOUIsS0FBS2k5QixPQUFPcFksYUFBY2dwQixHQUFlbm9CLFlBSXhELE9BRkExbEIsS0FBSzZnQyxVQUFhd3JCLEVBQWVobkMsSUFBSzRYLEdBRS9CajlCLEtBSVJ3SCxVQUFXZ2YsR0FJVixPQUZBeG1CLEtBQUs2Z0MsVUFBWXJhLEVBQU9uQixJQUFLcmxCLEtBQUtpOUIsUUFFM0JqOUIsS0FJUnNtQixPQUFRc2EsR0FFUCxPQUFPQSxFQUFNM0QsT0FBTzNXLE9BQVF0bUIsS0FBS2k5QixTQUFjMkQsRUFBTUMsV0FBYTdnQyxLQUFLNmdDLFNBSXhFOWMsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLGFBQWNxYixLQUFNaGtCLE9BTXRDd3JELEdBQU1qc0QsVUFBVStzRCxTQUFVLEVBRTFCLE1BQU1DLEdBQTBCLElBQUk3cEIsR0FDOUI4cEIsR0FBMEIsSUFBSTN4QixHQUVwQyxNQUFNNHhCLEdBRUw5akQsWUFBYXc1QixFQUFLLElBQUlxcEIsR0FBU3BwQixFQUFLLElBQUlvcEIsR0FBU25wQixFQUFLLElBQUltcEIsR0FBU3RYLEVBQUssSUFBSXNYLEdBQVNrQixFQUFLLElBQUlsQixHQUFTbUIsRUFBSyxJQUFJbkIsSUFFL0d4ckQsS0FBSzRzRCxPQUFTLENBQUV6cUIsRUFBSUMsRUFBSUMsRUFBSTZSLEVBQUl3WSxFQUFJQyxHQUlyQ2hnRCxJQUFLdzFCLEVBQUlDLEVBQUlDLEVBQUk2UixFQUFJd1ksRUFBSUMsR0FFeEIsTUFBTUMsRUFBUzVzRCxLQUFLNHNELE9BU3BCLE9BUEFBLEVBQVEsR0FBSTVvQyxLQUFNbWUsR0FDbEJ5cUIsRUFBUSxHQUFJNW9DLEtBQU1vZSxHQUNsQndxQixFQUFRLEdBQUk1b0MsS0FBTXFlLEdBQ2xCdXFCLEVBQVEsR0FBSTVvQyxLQUFNa3dCLEdBQ2xCMFksRUFBUSxHQUFJNW9DLEtBQU0wb0MsR0FDbEJFLEVBQVEsR0FBSTVvQyxLQUFNMm9DLEdBRVgzc0QsS0FJUmdrQixLQUFNNm9DLEdBRUwsTUFBTUQsRUFBUzVzRCxLQUFLNHNELE9BRXBCLElBQU0sSUFBSTlyRCxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFFdkI4ckQsRUFBUTlyRCxHQUFJa2pCLEtBQU02b0MsRUFBUUQsT0FBUTlyRCxJQUluQyxPQUFPZCxLQUlSOHNELHdCQUF5QjdyRCxHQUV4QixNQUFNMnJELEVBQVM1c0QsS0FBSzRzRCxPQUNkN2tDLEVBQUs5bUIsRUFBRTZqQixTQUNQaW9DLEVBQU1obEMsRUFBSSxHQUFLaWxDLEVBQU1qbEMsRUFBSSxHQUFLa2xDLEVBQU1sbEMsRUFBSSxHQUFLbWxDLEVBQU1ubEMsRUFBSSxHQUN2RG9sQyxFQUFNcGxDLEVBQUksR0FBS3FsQyxFQUFNcmxDLEVBQUksR0FBS3NsQyxFQUFNdGxDLEVBQUksR0FBS3VsQyxFQUFNdmxDLEVBQUksR0FDdkR3bEMsRUFBTXhsQyxFQUFJLEdBQUt5bEMsRUFBTXpsQyxFQUFJLEdBQUswbEMsRUFBTzFsQyxFQUFJLElBQU0ybEMsRUFBTzNsQyxFQUFJLElBQzFENGxDLEVBQU81bEMsRUFBSSxJQUFNNmxDLEVBQU83bEMsRUFBSSxJQUFNOGxDLEVBQU85bEMsRUFBSSxJQUFNK2xDLEVBQU8vbEMsRUFBSSxJQVNwRSxPQVBBNmtDLEVBQVEsR0FBSW5CLGNBQWV5QixFQUFNSCxFQUFLTyxFQUFNSCxFQUFLTyxFQUFPSCxFQUFLTyxFQUFPSCxHQUFPam9DLFlBQzNFa25DLEVBQVEsR0FBSW5CLGNBQWV5QixFQUFNSCxFQUFLTyxFQUFNSCxFQUFLTyxFQUFPSCxFQUFLTyxFQUFPSCxHQUFPam9DLFlBQzNFa25DLEVBQVEsR0FBSW5CLGNBQWV5QixFQUFNRixFQUFLTSxFQUFNRixFQUFLTSxFQUFPRixFQUFLTSxFQUFPRixHQUFPbG9DLFlBQzNFa25DLEVBQVEsR0FBSW5CLGNBQWV5QixFQUFNRixFQUFLTSxFQUFNRixFQUFLTSxFQUFPRixFQUFLTSxFQUFPRixHQUFPbG9DLFlBQzNFa25DLEVBQVEsR0FBSW5CLGNBQWV5QixFQUFNRCxFQUFLSyxFQUFNRCxFQUFLSyxFQUFPRCxFQUFNSyxFQUFPRCxHQUFPbm9DLFlBQzVFa25DLEVBQVEsR0FBSW5CLGNBQWV5QixFQUFNRCxFQUFLSyxFQUFNRCxFQUFLSyxFQUFPRCxFQUFNSyxFQUFPRCxHQUFPbm9DLFlBRXJFMWxCLEtBSVIrdEQsaUJBQWtCL3VCLEdBRWpCLE1BQU1ZLEVBQVdaLEVBQU9ZLFNBTXhCLE9BSmlDLE9BQTVCQSxFQUFTOGUsZ0JBQTBCOWUsRUFBUzBmLHdCQUVqRGlOLEdBQVV2b0MsS0FBTTRiLEVBQVM4ZSxnQkFBaUJyckIsYUFBYzJMLEVBQU85QyxhQUV4RGw4QixLQUFLd2dDLGlCQUFrQityQixJQUkvQnlCLGlCQUFrQkMsR0FNakIsT0FKQTFCLEdBQVV4bEMsT0FBT3BhLElBQUssRUFBRyxFQUFHLEdBQzVCNC9DLEdBQVVwbUQsT0FBUyxrQkFDbkJvbUQsR0FBVWw1QixhQUFjNDZCLEVBQU8veEIsYUFFeEJsOEIsS0FBS3dnQyxpQkFBa0IrckIsSUFJL0IvckIsaUJBQWtCQyxHQUVqQixNQUFNbXNCLEVBQVM1c0QsS0FBSzRzRCxPQUNkN2xDLEVBQVMwWixFQUFPMVosT0FDaEJtbkMsR0FBY3p0QixFQUFPdDZCLE9BRTNCLElBQU0sSUFBSXJGLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUl2QixHQUZpQjhyRCxFQUFROXJELEdBQUk2Z0MsZ0JBQWlCNWEsR0FFOUJtbkMsRUFFZixPQUFPLEVBTVQsT0FBTyxFQUlSM3RCLGNBQWVwQixHQUVkLE1BQU15dEIsRUFBUzVzRCxLQUFLNHNELE9BRXBCLElBQU0sSUFBSTlyRCxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFBTyxDQUU5QixNQUFNOC9CLEVBQVFnc0IsRUFBUTlyRCxHQVF0QixHQUpBMHJELEdBQVU3ckQsRUFBSWlnQyxFQUFNM0QsT0FBT3Q4QixFQUFJLEVBQUl3K0IsRUFBSXA1QixJQUFJcEYsRUFBSXcrQixFQUFJNTRCLElBQUk1RixFQUN2RDZyRCxHQUFVM3JELEVBQUkrL0IsRUFBTTNELE9BQU9wOEIsRUFBSSxFQUFJcytCLEVBQUlwNUIsSUFBSWxGLEVBQUlzK0IsRUFBSTU0QixJQUFJMUYsRUFDdkQyckQsR0FBVXRyRCxFQUFJMC9CLEVBQU0zRCxPQUFPLzdCLEVBQUksRUFBSWkrQixFQUFJcDVCLElBQUk3RSxFQUFJaStCLEVBQUk1NEIsSUFBSXJGLEVBRWxEMC9CLEVBQU1lLGdCQUFpQjZxQixJQUFjLEVBRXpDLE9BQU8sRUFNVCxPQUFPLEVBSVJwc0IsY0FBZWIsR0FFZCxNQUFNcXRCLEVBQVM1c0QsS0FBSzRzRCxPQUVwQixJQUFNLElBQUk5ckQsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCLEdBQUs4ckQsRUFBUTlyRCxHQUFJNmdDLGdCQUFpQnBDLEdBQVUsRUFFM0MsT0FBTyxFQU1ULE9BQU8sRUFJUnhiLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjcWIsS0FBTWhrQixPQU10QyxTQUFTbXVELEtBRVIsSUFBSXorQixFQUFVLEtBQ1YwK0IsR0FBYyxFQUNkQyxFQUFnQixLQUNoQkMsRUFBWSxLQUVoQixTQUFTQyxFQUFrQkMsRUFBTUMsR0FFaENKLEVBQWVHLEVBQU1DLEdBRXJCSCxFQUFZNStCLEVBQVFqckIsc0JBQXVCOHBELEdBSTVDLE1BQU8sQ0FFTnZwRCxNQUFPLFlBRWUsSUFBaEJvcEQsR0FDa0IsT0FBbEJDLElBRUxDLEVBQVk1K0IsRUFBUWpyQixzQkFBdUI4cEQsR0FFM0NILEdBQWMsSUFJZnRwRCxLQUFNLFdBRUw0cUIsRUFBUWcvQixxQkFBc0JKLEdBRTlCRixHQUFjLEdBSWZPLGlCQUFrQixTQUFXaDBCLEdBRTVCMHpCLEVBQWdCMXpCLEdBSWpCaTBCLFdBQVksU0FBVzV2RCxHQUV0QjB3QixFQUFVMXdCLElBUWIsU0FBUzZ2RCxHQUFpQkMsRUFBSUMsR0FFN0IsTUFBTUMsRUFBV0QsRUFBYUMsU0FFeEJDLEVBQVUsSUFBSUMsUUFpTHBCLE1BQU8sQ0FFTnQ0QyxJQWpFRCxTQUFjK1AsR0FJYixPQUZLQSxFQUFVeTdCLCtCQUErQno3QixFQUFZQSxFQUFVM08sTUFFN0RpM0MsRUFBUXI0QyxJQUFLK1AsSUE4RHBCZ3BCLE9BMURELFNBQWlCaHBCLEdBRVhBLEVBQVV5N0IsK0JBQStCejdCLEVBQVlBLEVBQVUzTyxNQUVwRSxNQUFNQSxFQUFPaTNDLEVBQVFyNEMsSUFBSytQLEdBRXJCM08sSUFFSjgyQyxFQUFHSyxhQUFjbjNDLEVBQUs3TCxRQUV0QjhpRCxFQUFRMzNDLE9BQVFxUCxLQWlEakJvUixPQTNDRCxTQUFpQnBSLEVBQVd5b0MsR0FFM0IsR0FBS3pvQyxFQUFVNjRCLG9CQUFzQixDQUVwQyxNQUFNNlAsRUFBU0osRUFBUXI0QyxJQUFLK1AsR0FhNUIsY0FYTzBvQyxHQUFVQSxFQUFPbC9CLFFBQVV4SixFQUFVd0osVUFFM0M4K0IsRUFBUXRpRCxJQUFLZ2EsRUFBVyxDQUN2QnhhLE9BQVF3YSxFQUFVeGEsT0FDbEIwSyxLQUFNOFAsRUFBVTlQLEtBQ2hCeTRDLGdCQUFpQjNvQyxFQUFVNG9DLFlBQzNCcC9CLFFBQVN4SixFQUFVd0osV0FTakJ4SixFQUFVeTdCLCtCQUErQno3QixFQUFZQSxFQUFVM08sTUFFcEUsTUFBTUEsRUFBT2kzQyxFQUFRcjRDLElBQUsrUCxRQUVabkgsSUFBVHhILEVBRUppM0MsRUFBUXRpRCxJQUFLZ2EsRUFuS2YsU0FBdUJBLEVBQVd5b0MsR0FFakMsTUFBTTFzQyxFQUFRaUUsRUFBVWpFLE1BQ2xCODVCLEVBQVE3MUIsRUFBVTYxQixNQUVsQnJ3QyxFQUFTMmlELEVBQUcxN0MsZUFPbEIsSUFBSXlELEVBRUosR0FQQWk0QyxFQUFHejdDLFdBQVkrN0MsRUFBWWpqRCxHQUMzQjJpRCxFQUFHcDdDLFdBQVkwN0MsRUFBWTFzQyxFQUFPODVCLEdBRWxDNzFCLEVBQVUrMUIsbUJBSUxoNkIsYUFBaUIvTyxhQUVyQmtELEVBQU8sVUFFRCxHQUFLNkwsYUFBaUJnSixZQUU1QixHQUFLL0UsRUFBVWszQix5QkFBMkIsQ0FFekMsSUFBS21SLEVBTUosTUFBTSxJQUFJbHZELE1BQU8sMkVBSmpCK1csRUFBTyxVQVVSQSxFQUFPLFVBSUYsR0FBSzZMLGFBQWlCK0ksV0FFNUI1VSxFQUFPLFVBRUQsR0FBSzZMLGFBQWlCa0osWUFFNUIvVSxFQUFPLFVBRUQsR0FBSzZMLGFBQWlCaUosV0FFNUI5VSxFQUFPLFVBRUQsR0FBSzZMLGFBQWlCNkksVUFFNUIxVSxFQUFPLFVBRUQsR0FBSzZMLGFBQWlCOVgsV0FFNUJpTSxFQUFPLFNBRUQsTUFBSzZMLGFBQWlCOEksbUJBTTVCLE1BQU0sSUFBSTFyQixNQUFPLDBEQUE0RDRpQixHQUo3RTdMLEVBQU8sS0FRUixNQUFPLENBQ04xSyxPQUFRQSxFQUNSMEssS0FBTUEsRUFDTnk0QyxnQkFBaUI1c0MsRUFBTThzQyxrQkFDdkJyL0IsUUFBU3hKLEVBQVV3SixTQTJGSy9jLENBQWN1VCxFQUFXeW9DLElBRXRDcDNDLEVBQUttWSxRQUFVeEosRUFBVXdKLFVBeEZ0QyxTQUF1QmhrQixFQUFRd2EsRUFBV3lvQyxHQUV6QyxNQUFNMXNDLEVBQVFpRSxFQUFVakUsTUFDbEIrNUIsRUFBYzkxQixFQUFVODFCLFlBRTlCcVMsRUFBR3o3QyxXQUFZKzdDLEVBQVlqakQsSUFFRSxJQUF4QnN3QyxFQUFZM21CLE1BSWhCZzVCLEVBQUdXLGNBQWVMLEVBQVksRUFBRzFzQyxJQUk1QnNzQyxFQUVKRixFQUFHVyxjQUFlTCxFQUFZM1MsRUFBWWoyQixPQUFTOUQsRUFBTThzQyxrQkFDeEQ5c0MsRUFBTys1QixFQUFZajJCLE9BQVFpMkIsRUFBWTNtQixPQUl4Q2c1QixFQUFHVyxjQUFlTCxFQUFZM1MsRUFBWWoyQixPQUFTOUQsRUFBTThzQyxrQkFDeEQ5c0MsRUFBTTVYLFNBQVUyeEMsRUFBWWoyQixPQUFRaTJCLEVBQVlqMkIsT0FBU2kyQixFQUFZM21CLFFBSXZFMm1CLEVBQVkzbUIsT0FBVSxHQStEdEI0NUIsQ0FBYzEzQyxFQUFLN0wsT0FBUXdhLEVBQVd5b0MsR0FFdENwM0MsRUFBS21ZLFFBQVV4SixFQUFVd0osV0FnQjVCLE1BQU13L0IsV0FBc0JyUixHQUUzQjMxQyxZQUFhdkUsRUFBUSxFQUFHQyxFQUFTLEVBQUcyZ0QsRUFBZ0IsRUFBR0MsRUFBaUIsR0FFdkV4ekIsUUFDQXp4QixLQUFLNlcsS0FBTyxnQkFFWjdXLEtBQUsreEMsV0FBYSxDQUNqQjN0QyxNQUFPQSxFQUNQQyxPQUFRQSxFQUNSMmdELGNBQWVBLEVBQ2ZDLGVBQWdCQSxHQUdqQixNQUFNMkssRUFBYXhyRCxFQUFRLEVBQ3JCeXJELEVBQWN4ckQsRUFBUyxFQUV2QnFoRCxFQUFRN2xELEtBQUtxTCxNQUFPODVDLEdBQ3BCVyxFQUFROWxELEtBQUtxTCxNQUFPKzVDLEdBRXBCZ0IsRUFBU1AsRUFBUSxFQUNqQlEsRUFBU1AsRUFBUSxFQUVqQm1LLEVBQWdCMXJELEVBQVFzaEQsRUFDeEJxSyxFQUFpQjFyRCxFQUFTc2hELEVBSTFCL0YsRUFBVSxHQUNWd0YsRUFBVyxHQUNYdEYsRUFBVSxHQUNWQyxFQUFNLEdBRVosSUFBTSxJQUFJdGtCLEVBQUssRUFBR0EsRUFBS3lxQixFQUFRenFCLElBQVEsQ0FFdEMsTUFBTTU2QixFQUFJNDZCLEVBQUtzMEIsRUFBaUJGLEVBRWhDLElBQU0sSUFBSXIwQixFQUFLLEVBQUdBLEVBQUt5cUIsRUFBUXpxQixJQUFRLENBRXRDLE1BQU03NkIsRUFBSTY2QixFQUFLczBCLEVBQWdCRixFQUUvQnhLLEVBQVM1aUQsS0FBTTdCLEdBQUtFLEVBQUcsR0FFdkJpL0MsRUFBUXQ5QyxLQUFNLEVBQUcsRUFBRyxHQUVwQnU5QyxFQUFJdjlDLEtBQU1nNUIsRUFBS2txQixHQUNmM0YsRUFBSXY5QyxLQUFNLEVBQU1pNUIsRUFBS2txQixJQU12QixJQUFNLElBQUlscUIsRUFBSyxFQUFHQSxFQUFLa3FCLEVBQU9scUIsSUFFN0IsSUFBTSxJQUFJRCxFQUFLLEVBQUdBLEVBQUtrcUIsRUFBT2xxQixJQUFRLENBRXJDLE1BQU01OEIsRUFBSTQ4QixFQUFLeXFCLEVBQVN4cUIsRUFDbEI1OEIsRUFBSTI4QixFQUFLeXFCLEdBQVd4cUIsRUFBSyxHQUN6Qi81QixFQUFNODVCLEVBQUssRUFBTXlxQixHQUFXeHFCLEVBQUssR0FDakNuNUIsRUFBTWs1QixFQUFLLEVBQU15cUIsRUFBU3hxQixFQUVoQ21rQixFQUFRcDlDLEtBQU01RCxFQUFHQyxFQUFHeUQsR0FDcEJzOUMsRUFBUXA5QyxLQUFNM0QsRUFBRzZDLEVBQUdZLEdBTXRCdEMsS0FBSzYrQyxTQUFVZSxHQUNmNS9DLEtBQUttYSxhQUFjLFdBQVksSUFBSTJqQyxHQUF3QnNILEVBQVUsSUFDckVwbEQsS0FBS21hLGFBQWMsU0FBVSxJQUFJMmpDLEdBQXdCZ0MsRUFBUyxJQUNsRTkvQyxLQUFLbWEsYUFBYyxLQUFNLElBQUkyakMsR0FBd0JpQyxFQUFLLElBSTNEeHdCLGdCQUFpQnZYLEdBRWhCLE9BQU8sSUFBSTIzQyxHQUFlMzNDLEVBQUs1VCxNQUFPNFQsRUFBSzNULE9BQVEyVCxFQUFLZ3RDLGNBQWVodEMsRUFBS2l0QyxpQkFvTjlFLE1BZ0VNK0ssR0FBYyxDQUNuQkMsa0JBL1F1QixpRkFnUnZCQyx1QkE5UTRCLDZEQStRNUJDLG1CQTdRd0IsNkVBOFF4QkMsd0JBNVE2QiwyREE2UTdCQyxlQTNRb0IsbWFBNFFwQkMsb0JBMVF5Qix3RkEyUXpCQyxhQXpRa0IsdUNBMFFsQkMsbUJBeFF3QiwrR0F5UXhCQyxNQXZRVywwa0tBd1FYQyxzQkF0UTJCLGc4QkF1UTNCQyx5QkFyUThCLDZuQkFzUTlCQyw4QkFwUW1DLDRIQXFRbkNDLDRCQW5RaUMscUVBb1FqQ0MsdUJBbFE0QiwyRUFtUTVCQyxlQWpRb0IsK0hBa1FwQkMsb0JBaFF5QixxSEFpUXpCQyxrQkEvUHVCLHdKQWdRdkJDLGFBOVBrQixpUkErUGxCQyxPQTdQWSxteEVBOFBaQyw0QkE1UGlDLHUyR0E2UGpDQyxxQkEzUDBCLDJqQkE0UDFCQyw0QkExUGlDLGtKQTJQakNDLHVCQXpQNEIsbUtBMFA1QkMscUJBeFAwQix1SUF5UDFCQywwQkF2UCtCLG1FQXdQL0JDLG1CQXRQd0Isc0RBdVB4QkMsd0JBclA2Qiw2UUFzUDdCQyxnQkFwUHFCLHN4Q0FxUHJCQyw0QkFuUGlDLDZNQW9QakNDLHFCQWxQMEIseVRBbVAxQkMsbUJBalB3QiwrUkFrUHhCQyw4QkE1Tm1DLDA0QkE2Tm5DQyxjQWpQbUIsNG9CQWtQbkJDLFdBaFBnQix3REFpUGhCQyxnQkEvT3FCLHFEQWdQckJDLGFBOU9rQiwyUkErT2xCQyxrQkE3T3VCLDJNQThPdkJDLDBCQTVPK0IsdVlBNk8vQkMsa0JBM091QixnTkE0T3ZCQyx1QkExTzRCLGlHQTJPNUJDLHNCQXpPMkIsb3ZGQTBPM0JDLGtCQXhPdUIsaXdKQXlPdkJDLHFCQXJPMEIsb0VBc08xQkMsMEJBcE8rQiwyMEJBcU8vQkMsc0JBbk8yQixzTUFvTzNCQywyQkFsT2dDLG1xQ0FtT2hDQyx5QkFqTzhCLHF3RUFrTzlCQyw4QkFoT21DLGdsTkFpT25DQyxzQkEvTjJCLDIxSEFnTzNCQyxxQkE5TjBCLGdzQkErTjFCQyxvQkE3TnlCLDJRQThOekJDLHFCQTVOMEIsbUxBNk4xQkMsMEJBM04rQix5S0E0Ti9CQyx3QkExTjZCLHNMQTJON0JDLG1CQXpOd0IsK1hBME54QkMsYUF4TmtCLDhaQXlObEJDLGtCQXZOdUIsbURBd052QkMsc0JBdE4yQixpU0F1TjNCQywyQkFyTmdDLHVNQXNOaENDLHNCQXBOMkIsdUtBcU4zQkMsMkJBbk5nQyxxRUFvTmhDQyxrQkFsTnVCLDZlQW1OdkJDLG1CQWpOd0IsK2pCQWtOeEJDLHdCQWhONkIsazFCQWlON0JDLG1CQS9Nd0IsdTJCQWdOeEJDLHNCQTlNMkIsbzJCQStNM0JDLHFCQTdNMEIsbXFCQThNMUJDLHFCQTVNMEIsaUpBNk0xQkMsbUJBM013QixpSkE0TXhCQyxjQTFNbUIsbU9BMk1uQkMsd0JBek02Qiw2K0JBME03QkMsZ0NBeE1xQyx5RUF5TXJDQywrQkF2TW9DLG1YQXdNcENDLHdCQXRNNkIsbVJBdU03QkMsZ0JBck1xQixtTEFzTXJCQyxRQXBNYSw0akRBcU1iQyw2QkFuTWtDLDRFQW9NbENDLGVBbE1vQixvTkFtTXBCQyxtQkFqTXdCLGdGQWtNeEJDLHdCQWhNNkIsMlVBaU03QkMsc0JBL0wyQix1S0FnTTNCQywyQkE5TGdDLHFFQStMaENDLHdCQTdMNkIsMjZSQThMN0JDLHNCQTVMMkIsbXhDQTZMM0JDLGlCQTNMc0Isa3pDQTRMdEJDLHlCQTFMOEIsazVDQTJMOUJDLGdCQXpMcUIsa09BMExyQkMscUJBeEwwQixnaENBeUwxQkMsZ0JBdkxxQiwrWEF3THJCQyxrQkF0THVCLHFkQXVMdkJDLHFCQXJMMEIsMExBc0wxQkMsMEJBcEwrQixtRUFxTC9CQyxxQkFuTDBCLDZGQW9MMUJDLDBCQWxMK0Isb3lDQW1ML0JDLHNCQWpMMkIsazVCQWtMM0JDLDJCQWhMZ0MsdW1HQWlMaENDLGlCQS9Lc0IseUZBZ0x0QkMsZUE5S29CLHdJQStLcEJDLFVBN0tlLHFFQThLZkMsa0JBNUt1QixvRkE2S3ZCQyxnQkEzS3FCLHlJQTRLckJDLFdBMUtnQiw4R0EyS2hCQyxnQkF6S3FCLGtUQTJLckJDLGdCQXpLZ0IsOEpBMEtoQkMsZ0JBeEtrQixnYkF5S2xCQyxVQXZLZ0IsaU9Bd0toQkMsVUF0S2tCLDBWQXVLbEJDLFdBcktnQix3dUJBc0toQkMsV0FwS2tCLDgzQkFxS2xCQyxrQkFuS2dCLGt0QkFvS2hCQyxrQkFsS2tCLGl1QkFtS2xCQyxjQWpLZ0IsK0xBa0toQkMsY0FoS2tCLHlUQWlLbEJDLGdCQS9KZ0IsK2pCQWdLaEJDLGdCQTlKa0Isd3dCQStKbEJDLGVBN0pnQixvN0JBOEpoQkMsZUE1SmtCLDZwREE2SmxCQyxpQkEzSmdCLDZwQ0E0SmhCQyxpQkExSmtCLHMwRUEySmxCQyxnQkF6SmdCLGs3QkEwSmhCQyxnQkF4SmtCLHkrQ0F5SmxCQyxnQkF2SmdCLDQrQkF3SmhCQyxnQkF0SmtCLDBxQkF1SmxCQyxlQXJKZ0IsZ29DQXNKaEJDLGVBcEprQiw0a0VBcUpsQkMsa0JBbkpnQixpdENBb0poQkMsa0JBbEprQiw2bUhBbUpsQkMsY0FqSmdCLG9rQ0FrSmhCQyxjQWhKa0IsbXlEQWlKbEJDLFlBL0lnQixxdEJBZ0poQkMsWUE5SWtCLDZ2QkErSWxCQyxZQTdJZ0IseWhCQThJaEJDLFlBNUlrQixtYUE2SWxCQyxZQTNJZ0Isc25DQTRJaEJDLFlBMUlrQixvdUJBaUpiQyxHQUFjLENBRW5CckgsT0FBUSxDQUVQc0gsUUFBUyxDQUFFejVELE1BQU8sSUFBSWd1QixHQUFPLFdBQzdCNG9CLFFBQVMsQ0FBRTUyQyxNQUFPLEdBRWxCb1QsSUFBSyxDQUFFcFQsTUFBTyxNQUNkMDVELFlBQWEsQ0FBRTE1RCxNQUFPLElBQUltb0IsR0FDMUJ3eEMsYUFBYyxDQUFFMzVELE1BQU8sSUFBSW1vQixHQUUzQm95QixTQUFVLENBQUV2NkMsTUFBTyxNQUNuQjY0QyxVQUFXLENBQUU3NEMsTUFBTyxJQUlyQjQ1RCxZQUFhLENBRVpyZSxZQUFhLENBQUV2N0MsTUFBTyxPQUl2QjY1RCxPQUFRLENBRVBuZSxPQUFRLENBQUUxN0MsTUFBTyxNQUNqQjg1RCxXQUFZLENBQUU5NUQsT0FBUyxHQUN2QjY3QyxhQUFjLENBQUU3N0MsTUFBTyxHQUN2Qis1RCxJQUFLLENBQUUvNUQsTUFBTyxLQUNkODdDLGdCQUFpQixDQUFFOTdDLE1BQU8sTUFJM0JnNkQsTUFBTyxDQUVOdGYsTUFBTyxDQUFFMTZDLE1BQU8sTUFDaEIyNkMsZUFBZ0IsQ0FBRTM2QyxNQUFPLElBSTFCaTZELFNBQVUsQ0FFVHpmLFNBQVUsQ0FBRXg2QyxNQUFPLE1BQ25CeTZDLGtCQUFtQixDQUFFejZDLE1BQU8sSUFJN0JrNkQsWUFBYSxDQUVaNWUsWUFBYSxDQUFFdDdDLE1BQU8sT0FJdkJtNkQsUUFBUyxDQUVSdmYsUUFBUyxDQUFFNTZDLE1BQU8sTUFDbEI2NkMsVUFBVyxDQUFFNzZDLE1BQU8sSUFJckJvNkQsVUFBVyxDQUVWdGYsVUFBVyxDQUFFOTZDLE1BQU8sTUFDcEJnN0MsWUFBYSxDQUFFaDdDLE1BQU8sSUFBSXdrQixFQUFTLEVBQUcsS0FJdkM2MUMsZ0JBQWlCLENBRWhCcGYsZ0JBQWlCLENBQUVqN0MsTUFBTyxNQUMxQms3QyxrQkFBbUIsQ0FBRWw3QyxNQUFPLEdBQzVCbTdDLGlCQUFrQixDQUFFbjdDLE1BQU8sSUFJNUJzNkQsYUFBYyxDQUVibGYsYUFBYyxDQUFFcDdDLE1BQU8sT0FJeEJ1NkQsYUFBYyxDQUVibGYsYUFBYyxDQUFFcjdDLE1BQU8sT0FJeEJ3NkQsWUFBYSxDQUVaemUsWUFBYSxDQUFFLzdDLE1BQU8sT0FJdkJ3MkMsSUFBSyxDQUVKaWtCLFdBQVksQ0FBRXo2RCxNQUFPLE9BQ3JCMDZELFFBQVMsQ0FBRTE2RCxNQUFPLEdBQ2xCMjZELE9BQVEsQ0FBRTM2RCxNQUFPLEtBQ2pCNDZELFNBQVUsQ0FBRTU2RCxNQUFPLElBQUlndUIsR0FBTyxZQUkvQis1QixPQUFRLENBRVA4UyxrQkFBbUIsQ0FBRTc2RCxNQUFPLElBRTVCODZELFdBQVksQ0FBRTk2RCxNQUFPLElBRXJCKzZELGtCQUFtQixDQUFFLzZELE1BQU8sR0FBSWc3RCxXQUFZLENBQzNDcjJCLFVBQVcsR0FDWDE5QixNQUFPLEtBR1JnMEQsd0JBQXlCLENBQUVqN0QsTUFBTyxHQUFJZzdELFdBQVksQ0FDakRFLFdBQVksR0FDWkMsaUJBQWtCLEdBQ2xCQyxhQUFjLEdBQ2RDLGNBQWUsS0FHaEJDLHFCQUFzQixDQUFFdDdELE1BQU8sSUFDL0J1N0Qsd0JBQXlCLENBQUV2N0QsTUFBTyxJQUVsQ3c3RCxXQUFZLENBQUV4N0QsTUFBTyxHQUFJZzdELFdBQVksQ0FDcEMvekQsTUFBTyxHQUNQNjVCLFNBQVUsR0FDVjZELFVBQVcsR0FDWHVMLFNBQVUsR0FDVnVyQixRQUFTLEdBQ1RDLFlBQWEsR0FDYkMsTUFBTyxLQUdSQyxpQkFBa0IsQ0FBRTU3RCxNQUFPLEdBQUlnN0QsV0FBWSxDQUMxQ0UsV0FBWSxHQUNaQyxpQkFBa0IsR0FDbEJDLGFBQWMsR0FDZEMsY0FBZSxLQUdoQlEsY0FBZSxDQUFFNzdELE1BQU8sSUFDeEI4N0QsaUJBQWtCLENBQUU5N0QsTUFBTyxJQUUzQis3RCxZQUFhLENBQUUvN0QsTUFBTyxHQUFJZzdELFdBQVksQ0FDckMvekQsTUFBTyxHQUNQNjVCLFNBQVUsR0FDVjY2QixNQUFPLEdBQ1B6ckIsU0FBVSxLQUdYOHJCLGtCQUFtQixDQUFFaDhELE1BQU8sR0FBSWc3RCxXQUFZLENBQzNDRSxXQUFZLEdBQ1pDLGlCQUFrQixHQUNsQkMsYUFBYyxHQUNkQyxjQUFlLEdBQ2ZZLGlCQUFrQixHQUNsQkMsZ0JBQWlCLEtBR2xCQyxlQUFnQixDQUFFbjhELE1BQU8sSUFDekJvOEQsa0JBQW1CLENBQUVwOEQsTUFBTyxJQUU1QnE4RCxpQkFBa0IsQ0FBRXI4RCxNQUFPLEdBQUlnN0QsV0FBWSxDQUMxQ3IyQixVQUFXLEdBQ1gyM0IsU0FBVSxHQUNWQyxZQUFhLEtBSWRDLGVBQWdCLENBQUV4OEQsTUFBTyxHQUFJZzdELFdBQVksQ0FDeEMvekQsTUFBTyxHQUNQNjVCLFNBQVUsR0FDVjE3QixNQUFPLEdBQ1BDLE9BQVEsS0FHVG8zRCxNQUFPLENBQUV6OEQsTUFBTyxNQUNoQjA4RCxNQUFPLENBQUUxOEQsTUFBTyxPQUlqQnkvQixPQUFRLENBRVBnNkIsUUFBUyxDQUFFejVELE1BQU8sSUFBSWd1QixHQUFPLFdBQzdCNG9CLFFBQVMsQ0FBRTUyQyxNQUFPLEdBQ2xCcVksS0FBTSxDQUFFclksTUFBTyxHQUNmK3JCLE1BQU8sQ0FBRS9yQixNQUFPLEdBQ2hCb1QsSUFBSyxDQUFFcFQsTUFBTyxNQUNkdTZDLFNBQVUsQ0FBRXY2QyxNQUFPLE1BQ25CNjRDLFVBQVcsQ0FBRTc0QyxNQUFPLEdBQ3BCMDVELFlBQWEsQ0FBRTE1RCxNQUFPLElBQUltb0IsSUFJM0I4bUMsT0FBUSxDQUVQd0ssUUFBUyxDQUFFejVELE1BQU8sSUFBSWd1QixHQUFPLFdBQzdCNG9CLFFBQVMsQ0FBRTUyQyxNQUFPLEdBQ2xCK25CLE9BQVEsQ0FBRS9uQixNQUFPLElBQUl3a0IsRUFBUyxHQUFLLEtBQ25DNWIsU0FBVSxDQUFFNUksTUFBTyxHQUNuQm9ULElBQUssQ0FBRXBULE1BQU8sTUFDZHU2QyxTQUFVLENBQUV2NkMsTUFBTyxNQUNuQjY0QyxVQUFXLENBQUU3NEMsTUFBTyxHQUNwQjA1RCxZQUFhLENBQUUxNUQsTUFBTyxJQUFJbW9CLEtBTXRCdzBDLEdBQVksQ0FFakJDLE1BQU8sQ0FFTnBWLFNBQVVELEdBQWUsQ0FDeEJpUyxHQUFZckgsT0FDWnFILEdBQVlJLFlBQ1pKLEdBQVlLLE9BQ1pMLEdBQVlRLE1BQ1pSLEdBQVlTLFNBQ1pULEdBQVloakIsTUFHYnFSLGFBQWNtSixHQUFZb0gsZUFDMUJ0USxlQUFnQmtKLEdBQVlxSCxnQkFJN0J3RSxRQUFTLENBRVJyVixTQUFVRCxHQUFlLENBQ3hCaVMsR0FBWXJILE9BQ1pxSCxHQUFZSSxZQUNaSixHQUFZSyxPQUNaTCxHQUFZUSxNQUNaUixHQUFZUyxTQUNaVCxHQUFZVSxZQUNaVixHQUFZaGpCLElBQ1pnakIsR0FBWXpSLE9BQ1osQ0FDQ3JPLFNBQVUsQ0FBRTE1QyxNQUFPLElBQUlndUIsR0FBTyxPQUloQzY1QixhQUFjbUosR0FBWXNILGlCQUMxQnhRLGVBQWdCa0osR0FBWXVILGtCQUk3QnVFLE1BQU8sQ0FFTnRWLFNBQVVELEdBQWUsQ0FDeEJpUyxHQUFZckgsT0FDWnFILEdBQVlJLFlBQ1pKLEdBQVlLLE9BQ1pMLEdBQVlRLE1BQ1pSLEdBQVlTLFNBQ1pULEdBQVlVLFlBQ1pWLEdBQVlXLFFBQ1pYLEdBQVlZLFVBQ1paLEdBQVlhLGdCQUNaYixHQUFZaGpCLElBQ1pnakIsR0FBWXpSLE9BQ1osQ0FDQ3JPLFNBQVUsQ0FBRTE1QyxNQUFPLElBQUlndUIsR0FBTyxJQUM5QjRyQixTQUFVLENBQUU1NUMsTUFBTyxJQUFJZ3VCLEdBQU8sVUFDOUIrckIsVUFBVyxDQUFFLzVDLE1BQU8sT0FJdEI2bkQsYUFBY21KLEdBQVk0SCxlQUMxQjlRLGVBQWdCa0osR0FBWTZILGdCQUk3QmtFLFNBQVUsQ0FFVHZWLFNBQVVELEdBQWUsQ0FDeEJpUyxHQUFZckgsT0FDWnFILEdBQVlLLE9BQ1pMLEdBQVlRLE1BQ1pSLEdBQVlTLFNBQ1pULEdBQVlVLFlBQ1pWLEdBQVlXLFFBQ1pYLEdBQVlZLFVBQ1paLEdBQVlhLGdCQUNaYixHQUFZYyxhQUNaZCxHQUFZZSxhQUNaZixHQUFZaGpCLElBQ1pnakIsR0FBWXpSLE9BQ1osQ0FDQ3JPLFNBQVUsQ0FBRTE1QyxNQUFPLElBQUlndUIsR0FBTyxJQUM5QnFyQixVQUFXLENBQUVyNUMsTUFBTyxHQUNwQnM1QyxVQUFXLENBQUV0NUMsTUFBTyxHQUNwQjQ3QyxnQkFBaUIsQ0FBRTU3QyxNQUFPLE1BSTVCNm5ELGFBQWNtSixHQUFZOEgsa0JBQzFCaFIsZUFBZ0JrSixHQUFZK0gsbUJBSTdCaUUsS0FBTSxDQUVMeFYsU0FBVUQsR0FBZSxDQUN4QmlTLEdBQVlySCxPQUNacUgsR0FBWVEsTUFDWlIsR0FBWVMsU0FDWlQsR0FBWVUsWUFDWlYsR0FBWVcsUUFDWlgsR0FBWVksVUFDWlosR0FBWWEsZ0JBQ1piLEdBQVlnQixZQUNaaEIsR0FBWWhqQixJQUNaZ2pCLEdBQVl6UixPQUNaLENBQ0NyTyxTQUFVLENBQUUxNUMsTUFBTyxJQUFJZ3VCLEdBQU8sT0FJaEM2NUIsYUFBY21KLEdBQVlnSSxjQUMxQmxSLGVBQWdCa0osR0FBWWlJLGVBSTdCM2UsT0FBUSxDQUVQa04sU0FBVUQsR0FBZSxDQUN4QmlTLEdBQVlySCxPQUNacUgsR0FBWVcsUUFDWlgsR0FBWVksVUFDWlosR0FBWWEsZ0JBQ1piLEdBQVloakIsSUFDWixDQUNDOEQsT0FBUSxDQUFFdDZDLE1BQU8sU0FJbkI2bkQsYUFBY21KLEdBQVl3SCxnQkFDMUIxUSxlQUFnQmtKLEdBQVl5SCxpQkFJN0JoNUIsT0FBUSxDQUVQK25CLFNBQVVELEdBQWUsQ0FDeEJpUyxHQUFZLzVCLE9BQ1orNUIsR0FBWWhqQixNQUdicVIsYUFBY21KLEdBQVlrSSxZQUMxQnBSLGVBQWdCa0osR0FBWW1JLGFBSTdCOEQsT0FBUSxDQUVQelYsU0FBVUQsR0FBZSxDQUN4QmlTLEdBQVlySCxPQUNacUgsR0FBWWhqQixJQUNaLENBQ0N6cUIsTUFBTyxDQUFFL3JCLE1BQU8sR0FDaEJ3OEMsU0FBVSxDQUFFeDhDLE1BQU8sR0FDbkJrOUQsVUFBVyxDQUFFbDlELE1BQU8sTUFJdEI2bkQsYUFBY21KLEdBQVlrSCxnQkFDMUJwUSxlQUFnQmtKLEdBQVltSCxpQkFJN0J0aUMsTUFBTyxDQUVOMnhCLFNBQVVELEdBQWUsQ0FDeEJpUyxHQUFZckgsT0FDWnFILEdBQVlhLGtCQUdieFMsYUFBY21KLEdBQVk0RyxXQUMxQjlQLGVBQWdCa0osR0FBWTZHLFlBSTdCNTVCLE9BQVEsQ0FFUHVwQixTQUFVRCxHQUFlLENBQ3hCaVMsR0FBWXJILE9BQ1pxSCxHQUFZVyxRQUNaWCxHQUFZWSxVQUNaWixHQUFZYSxnQkFDWixDQUNDempCLFFBQVMsQ0FBRTUyQyxNQUFPLE1BSXBCNm5ELGFBQWNtSixHQUFZMEgsZ0JBQzFCNVEsZUFBZ0JrSixHQUFZMkgsaUJBSTdCMUosT0FBUSxDQUVQekgsU0FBVUQsR0FBZSxDQUN4QmlTLEdBQVl2SyxPQUNadUssR0FBWWhqQixNQUdicVIsYUFBY21KLEdBQVlzSSxZQUMxQnhSLGVBQWdCa0osR0FBWXVJLGFBSTdCN21CLFdBQVksQ0FFWDhVLFNBQVUsQ0FDVGtTLFlBQWEsQ0FBRTE1RCxNQUFPLElBQUltb0IsR0FDMUJnMUMsSUFBSyxDQUFFbjlELE1BQU8sT0FHZjZuRCxhQUFjbUosR0FBWXdHLGdCQUMxQjFQLGVBQWdCa0osR0FBWXlHLGlCQU83QjJGLEtBQU0sQ0FFTDVWLFNBQVVELEdBQWUsQ0FDeEJpUyxHQUFZSyxPQUNaLENBQ0NqakIsUUFBUyxDQUFFNTJDLE1BQU8sTUFJcEI2bkQsYUFBY21KLEdBQVkwRyxVQUMxQjVQLGVBQWdCa0osR0FBWTJHLFdBSTdCMEYsU0FBVSxDQUVUN1YsU0FBVSxDQUNUeUUsVUFBVyxDQUFFanNELE1BQU8sT0FHckI2bkQsYUFBY21KLEdBQVlnSCxjQUMxQmxRLGVBQWdCa0osR0FBWWlILGVBSTdCcUYsYUFBYyxDQUViOVYsU0FBVUQsR0FBZSxDQUN4QmlTLEdBQVlySCxPQUNacUgsR0FBWWEsZ0JBQ1osQ0FDQ2tELGtCQUFtQixDQUFFdjlELE1BQU8sSUFBSTY3QixJQUNoQzJoQyxhQUFjLENBQUV4OUQsTUFBTyxHQUN2Qnk5RCxZQUFhLENBQUV6OUQsTUFBTyxRQUl4QjZuRCxhQUFjbUosR0FBWThHLGtCQUMxQmhRLGVBQWdCa0osR0FBWStHLG1CQUk3QjJGLE9BQVEsQ0FFUGxXLFNBQVVELEdBQWUsQ0FDeEJpUyxHQUFZelIsT0FDWnlSLEdBQVloakIsSUFDWixDQUNDdnZDLE1BQU8sQ0FBRWpILE1BQU8sSUFBSWd1QixHQUFPLElBQzNCNG9CLFFBQVMsQ0FBRTUyQyxNQUFPLE1BSXBCNm5ELGFBQWNtSixHQUFZb0ksWUFDMUJ0UixlQUFnQmtKLEdBQVlxSSxjQTBDOUIsU0FBU3NFLEdBQWlCM1MsRUFBVTRTLEVBQVVDLEVBQU9DLEVBQVM5aEQsRUFBTzA4QixHQUVwRSxNQUFNcGpDLEVBQWEsSUFBSTBZLEdBQU8sR0FDOUIsSUFFSSt2QyxFQUNBQyxFQUhBQyxHQUF1QixJQUFWamlELEVBQWlCLEVBQUksRUFLbENraUQsRUFBb0IsS0FDcEJDLEVBQTJCLEVBQzNCQyxFQUFxQixLQXVLekIsU0FBU0MsRUFBVXAzRCxFQUFPK1UsR0FFekI2aEQsRUFBTTVOLFFBQVFocEQsTUFBTW8zRCxTQUFVcDNELEVBQU16QyxFQUFHeUMsRUFBTXJHLEVBQUdxRyxFQUFNcEgsRUFBR21jLEVBQU8wOEIsR0FJakUsTUFBTyxDQUVONGxCLGNBQWUsV0FFZCxPQUFPaHBELEdBR1JpcEQsY0FBZSxTQUFXdDNELEVBQU8rVSxFQUFRLEdBRXhDMUcsRUFBVzNILElBQUsxRyxHQUNoQmczRCxFQUFhamlELEVBQ2JxaUQsRUFBVS9vRCxFQUFZMm9ELElBR3ZCTyxjQUFlLFdBRWQsT0FBT1AsR0FHUlEsY0FBZSxTQUFXemlELEdBRXpCaWlELEVBQWFqaUQsRUFDYnFpRCxFQUFVL29ELEVBQVkyb0QsSUFHdkJ0UyxPQXBNRCxTQUFpQitTLEVBQVl6VCxHQUU1QixJQUFJMFQsR0FBYSxFQUNianNCLEdBQStCLElBQWxCdVksRUFBTXhZLFFBQW1Cd1ksRUFBTXZZLFdBQWEsS0FFeERBLEdBQWNBLEVBQVd6ZSxZQUU3QnllLEVBQWFrckIsRUFBU2htRCxJQUFLODZCLElBTzVCLE1BQU0rWSxFQUFLVCxFQUFTUyxHQUNkbVQsRUFBVW5ULEVBQUdvVCxZQUFjcFQsRUFBR29ULGFBRS9CRCxHQUE0QyxhQUFqQ0EsRUFBUUUsdUJBRXZCcHNCLEVBQWEsTUFJTSxPQUFmQSxFQUVKMnJCLEVBQVUvb0QsRUFBWTJvRCxHQUVYdnJCLEdBQWNBLEVBQVd4a0IsVUFFcENtd0MsRUFBVTNyQixFQUFZLEdBQ3RCaXNCLEdBQWEsSUFJVDNULEVBQVMrVCxXQUFhSixJQUUxQjNULEVBQVN6MUMsTUFBT3kxQyxFQUFTZ1UsZUFBZ0JoVSxFQUFTaVUsZUFBZ0JqVSxFQUFTa1Usa0JBSXZFeHNCLElBQWdCQSxFQUFXbVosZUFBaUJuWixFQUFXMWdCLFVBQVlqUixTQUV0RFAsSUFBWnc5QyxJQUVKQSxFQUFVLElBQUlwWixHQUNiLElBQUltQixHQUFhLEVBQUcsRUFBRyxHQUN2QixJQUFJNEIsR0FBZ0IsQ0FDbkJ0d0MsS0FBTSx5QkFDTm13QyxTQUFVSCxHQUFlc1YsR0FBVVMsS0FBSzVWLFVBQ3hDSyxhQUFjOFUsR0FBVVMsS0FBS3ZWLGFBQzdCQyxlQUFnQjZVLEdBQVVTLEtBQUt0VixlQUMvQnBSLEtBcHBiVyxFQXFwYlhXLFdBQVcsRUFDWEMsWUFBWSxFQUNaZCxLQUFLLEtBSVB3bkIsRUFBUXA5QixTQUFTbWYsZ0JBQWlCLFVBQ2xDaWUsRUFBUXA5QixTQUFTbWYsZ0JBQWlCLE1BRWxDaWUsRUFBUTF1QixlQUFpQixTQUFXMGIsRUFBVUMsRUFBT3B1QixHQUVwRDc3QixLQUFLazhCLFlBQVk4SyxhQUFjbkwsRUFBT0ssY0FLdkNoOUIsT0FBT0UsZUFBZ0I0OUQsRUFBUTNxQixTQUFVLFNBQVUsQ0FFbER6N0IsSUFBSyxXQUVKLE9BQU81VyxLQUFLd21ELFNBQVM5TCxPQUFPMTdDLFNBTTlCODlELEVBQVEva0MsT0FBUWlsQyxJQUlqQkEsRUFBUTNxQixTQUFTbVUsU0FBUzlMLE9BQU8xN0MsTUFBUTB5QyxFQUN6Q3NyQixFQUFRM3FCLFNBQVNtVSxTQUFTc1MsV0FBVzk1RCxNQUFVMHlDLEVBQVdtWixnQkFBc0QsSUFBckNuWixFQUFXdGYsdUJBQXNDLEVBQUksRUFFM0g4cUMsSUFBc0J4ckIsR0FDMUJ5ckIsSUFBNkJ6ckIsRUFBV3ZoQixTQUN4Q2l0QyxJQUF1QnBULEVBQVNPLGNBRWhDeVMsRUFBUTNxQixTQUFTamlCLGFBQWMsRUFFL0I4c0MsRUFBb0J4ckIsRUFDcEJ5ckIsRUFBMkJ6ckIsRUFBV3ZoQixRQUN0Q2l0QyxFQUFxQnBULEVBQVNPLGFBSy9CbVQsRUFBV1MsUUFBU25CLEVBQVNBLEVBQVFwOUIsU0FBVW85QixFQUFRM3FCLFNBQVUsRUFBRyxFQUFHLE9BRTVEWCxHQUFjQSxFQUFXemUsaUJBRWpCelQsSUFBZHU5QyxJQUVKQSxFQUFZLElBQUluWixHQUNmLElBQUkrTCxHQUFlLEVBQUcsR0FDdEIsSUFBSWhKLEdBQWdCLENBQ25CdHdDLEtBQU0scUJBQ05td0MsU0FBVUgsR0FBZXNWLEdBQVVqcUIsV0FBVzhVLFVBQzlDSyxhQUFjOFUsR0FBVWpxQixXQUFXbVYsYUFDbkNDLGVBQWdCNlUsR0FBVWpxQixXQUFXb1YsZUFDckNwUixLQWp0YlksRUFrdGJaVyxXQUFXLEVBQ1hDLFlBQVksRUFDWmQsS0FBSyxLQUlQdW5CLEVBQVVuOUIsU0FBU21mLGdCQUFpQixVQUdwQzcvQyxPQUFPRSxlQUFnQjI5RCxFQUFVMXFCLFNBQVUsTUFBTyxDQUVqRHo3QixJQUFLLFdBRUosT0FBTzVXLEtBQUt3bUQsU0FBUzJWLElBQUluOUQsU0FNM0I4OUQsRUFBUS9rQyxPQUFRZ2xDLElBSWpCQSxFQUFVMXFCLFNBQVNtVSxTQUFTMlYsSUFBSW45RCxNQUFRMHlDLEdBRUgsSUFBaENBLEVBQVc3ZixrQkFFZjZmLEVBQVdwZixlQUlaeXFDLEVBQVUxcUIsU0FBU21VLFNBQVNrUyxZQUFZMTVELE1BQU1nbEIsS0FBTTB0QixFQUFXem1CLFFBRTFEaXlDLElBQXNCeHJCLEdBQzFCeXJCLElBQTZCenJCLEVBQVd2aEIsU0FDeENpdEMsSUFBdUJwVCxFQUFTTyxjQUVoQ3dTLEVBQVUxcUIsU0FBU2ppQixhQUFjLEVBRWpDOHNDLEVBQW9CeHJCLEVBQ3BCeXJCLEVBQTJCenJCLEVBQVd2aEIsUUFDdENpdEMsRUFBcUJwVCxFQUFTTyxhQU0vQm1ULEVBQVdTLFFBQVNwQixFQUFXQSxFQUFVbjlCLFNBQVVtOUIsRUFBVTFxQixTQUFVLEVBQUcsRUFBRyxTQTJDaEYsU0FBUytyQixHQUFvQnRQLEVBQUk3SCxFQUFZcG5CLEVBQVlrdkIsR0FFeEQsTUFBTXNQLEVBQXNCdlAsRUFBR3h1QixhQUFjLE9BRXZDZytCLEVBQVl2UCxFQUFhQyxTQUFXLEtBQU8vSCxFQUFXcndDLElBQUssMkJBQzNEMm5ELEVBQWV4UCxFQUFhQyxVQUEwQixPQUFkc1AsRUFFeENFLEVBQWdCLEdBRWhCQyxFQUFlQyxFQUFvQixNQUN6QyxJQUFJQyxFQUFlRixFQUNmRyxHQUFjLEVBMkVsQixTQUFTQyxFQUF1QkMsR0FFL0IsT0FBSy9QLEVBQWFDLFNBQWtCRixFQUFHaVEsZ0JBQWlCRCxHQUVqRFIsRUFBVVUsbUJBQW9CRixHQUl0QyxTQUFTRyxFQUF5QkgsR0FFakMsT0FBSy9QLEVBQWFDLFNBQWtCRixFQUFHb1Esa0JBQW1CSixHQUVuRFIsRUFBVWEscUJBQXNCTCxHQXVDeEMsU0FBU0osRUFBb0JJLEdBRTVCLE1BQU1NLEVBQWdCLEdBQ2hCQyxFQUFvQixHQUNwQkMsRUFBb0IsR0FFMUIsSUFBTSxJQUFJeCtELEVBQUksRUFBR0EsRUFBSXU5RCxFQUFxQnY5RCxJQUV6Q3MrRCxFQUFldCtELEdBQU0sRUFDckJ1K0QsRUFBbUJ2K0QsR0FBTSxFQUN6QncrRCxFQUFtQngrRCxHQUFNLEVBSTFCLE1BQU8sQ0FHTjgrQixTQUFVLEtBQ1YyL0IsUUFBUyxLQUNUN2pCLFdBQVcsRUFFWDBqQixjQUFlQSxFQUNmQyxrQkFBbUJBLEVBQ25CQyxrQkFBbUJBLEVBQ25CdGdDLE9BQVE4L0IsRUFDUmovQixXQUFZLEdBQ1pqNUIsTUFBTyxNQW9FVCxTQUFTNDRELElBRVIsTUFBTUosRUFBZ0JULEVBQWFTLGNBRW5DLElBQU0sSUFBSXQrRCxFQUFJLEVBQUdpMUIsRUFBS3FwQyxFQUFjdGdFLE9BQVFnQyxFQUFJaTFCLEVBQUlqMUIsSUFFbkRzK0QsRUFBZXQrRCxHQUFNLEVBTXZCLFNBQVMyK0QsRUFBaUI5NEMsR0FFekIrNEMsRUFBMkIvNEMsRUFBVyxHQUl2QyxTQUFTKzRDLEVBQTJCLzRDLEVBQVdnNUMsR0FFOUMsTUFBTVAsRUFBZ0JULEVBQWFTLGNBQzdCQyxFQUFvQlYsRUFBYVUsa0JBQ2pDQyxFQUFvQlgsRUFBYVcsa0JBRXZDRixFQUFlejRDLEdBQWMsRUFFVyxJQUFuQzA0QyxFQUFtQjE0QyxLQUV2Qm1vQyxFQUFHdjdDLHdCQUF5Qm9ULEdBQzVCMDRDLEVBQW1CMTRDLEdBQWMsR0FJN0IyNEMsRUFBbUIzNEMsS0FBZ0JnNUMsS0FFckI1USxFQUFhQyxTQUFXRixFQUFLN0gsRUFBV3J3QyxJQUFLLDJCQUVwRG00QyxFQUFhQyxTQUFXLHNCQUF3Qiw0QkFBOEJyb0MsRUFBV2c1QyxHQUNwR0wsRUFBbUIzNEMsR0FBY2c1QyxHQU1uQyxTQUFTQyxJQUVSLE1BQU1SLEVBQWdCVCxFQUFhUyxjQUM3QkMsRUFBb0JWLEVBQWFVLGtCQUV2QyxJQUFNLElBQUl2K0QsRUFBSSxFQUFHaTFCLEVBQUtzcEMsRUFBa0J2Z0UsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUVsRHUrRCxFQUFtQnYrRCxLQUFRcytELEVBQWV0K0QsS0FFOUNndUQsRUFBR2w2Qyx5QkFBMEI5VCxHQUM3QnUrRCxFQUFtQnYrRCxHQUFNLEdBUTVCLFNBQVMwUyxFQUFxQjVNLEVBQU95USxFQUFNUixFQUFNc1ksRUFBWWt6QixFQUFRNzdCLElBRXJDLElBQTFCdW9DLEVBQWFDLFVBQWdDLE9BQVRuNEMsR0FBMEIsT0FBVEEsRUFNekRpNEMsRUFBR3Q3QyxvQkFBcUI1TSxFQUFPeVEsRUFBTVIsRUFBTXNZLEVBQVlrekIsRUFBUTc3QixHQUovRHNvQyxFQUFHK1EscUJBQXNCajVELEVBQU95USxFQUFNUixFQUFNd3JDLEVBQVE3N0IsR0FxUXRELFNBQVNqYSxJQUVSdXpELElBQ0FsQixHQUFjLEVBRVRELElBQWlCRixJQUV0QkUsRUFBZUYsRUFDZkksRUFBdUJGLEVBQWEzL0IsU0FNckMsU0FBUzhnQyxJQUVSckIsRUFBYTcrQixTQUFXLEtBQ3hCNitCLEVBQWFjLFFBQVUsS0FDdkJkLEVBQWEvaUIsV0FBWSxFQUkxQixNQUFPLENBRU5xa0IsTUF6akJELFNBQWdCL2dDLEVBQVFxVCxFQUFVa3RCLEVBQVMzL0IsRUFBVWg1QixHQUVwRCxJQUFJbzVELEdBQWdCLEVBRXBCLEdBQUt6QixFQUFlLENBRW5CLE1BQU0xQixFQW1GUixTQUEwQmo5QixFQUFVMi9CLEVBQVNsdEIsR0FFNUMsTUFBTXFKLEdBQXFDLElBQXZCckosRUFBU3FKLFVBRTdCLElBQUl1a0IsRUFBYXpCLEVBQWU1K0IsRUFBU21RLFNBRXJCdndCLElBQWZ5Z0QsSUFFSkEsRUFBYSxHQUNiekIsRUFBZTUrQixFQUFTbVEsSUFBT2t3QixHQUloQyxJQUFJQyxFQUFXRCxFQUFZVixFQUFReHZCLFNBRWpCdndCLElBQWIwZ0QsSUFFSkEsRUFBVyxHQUNYRCxFQUFZVixFQUFReHZCLElBQU9td0IsR0FJNUIsSUFBSXJELEVBQVFxRCxFQUFVeGtCLEdBU3RCLFlBUGVsOEIsSUFBVnE5QyxJQUVKQSxFQUFRNkIsRUFoREozUCxFQUFhQyxTQUFrQkYsRUFBR3FSLG9CQUVoQzdCLEVBQVU4Qix3QkErQ2hCRixFQUFVeGtCLEdBQWNtaEIsR0FJbEJBLEVBbEhRd0QsQ0FBaUJ6Z0MsRUFBVTIvQixFQUFTbHRCLEdBRTdDc3NCLElBQWlCOUIsSUFFckI4QixFQUFlOUIsRUFDZmdDLEVBQXVCRixFQUFhMy9CLFNBSXJDZ2hDLEVBNklGLFNBQXNCcGdDLEVBQVVoNUIsR0FFL0IsTUFBTTA1RCxFQUFtQjNCLEVBQWE5K0IsV0FDaEMwZ0MsRUFBcUIzZ0MsRUFBU0MsV0FFcEMsSUFBSTJnQyxFQUFnQixFQUVwQixJQUFNLE1BQU03dEIsS0FBTzR0QixFQUFxQixDQUV2QyxNQUFNRSxFQUFrQkgsRUFBa0IzdEIsR0FDcEMrdEIsRUFBb0JILEVBQW9CNXRCLEdBRTlDLFFBQXlCbnpCLElBQXBCaWhELEVBQWdDLE9BQU8sRUFFNUMsR0FBS0EsRUFBZ0I5NUMsWUFBYys1QyxFQUFvQixPQUFPLEVBRTlELEdBQUtELEVBQWdCem9ELE9BQVMwb0QsRUFBa0Ixb0QsS0FBTyxPQUFPLEVBRTlEd29ELElBSUQsT0FBSzdCLEVBQWE2QixnQkFBa0JBLEdBRS9CN0IsRUFBYS8zRCxRQUFVQSxFQXJLWHdwQixDQUFhd1AsRUFBVWg1QixHQUVsQ281RCxHQXlLUCxTQUFvQnBnQyxFQUFVaDVCLEdBRTdCLE1BQU02ckMsRUFBUSxHQUNSNVMsRUFBYUQsRUFBU0MsV0FDNUIsSUFBSTJnQyxFQUFnQixFQUVwQixJQUFNLE1BQU03dEIsS0FBTzlTLEVBQWEsQ0FFL0IsTUFBTWxaLEVBQVlrWixFQUFZOFMsR0FFeEIzNkIsRUFBTyxHQUNiQSxFQUFLMk8sVUFBWUEsRUFFWkEsRUFBVTNPLE9BRWRBLEVBQUtBLEtBQU8yTyxFQUFVM08sTUFJdkJ5NkIsRUFBT0UsR0FBUTM2QixFQUVmd29ELElBSUQ3QixFQUFhOStCLFdBQWE0UyxFQUMxQmtzQixFQUFhNkIsY0FBZ0JBLEVBRTdCN0IsRUFBYS8zRCxNQUFRQSxFQXJNQys1RCxDQUFXL2dDLEVBQVVoNUIsT0FFcEMsQ0FFTixNQUFNODBDLEdBQXFDLElBQXZCckosRUFBU3FKLFVBRXhCaWpCLEVBQWEvK0IsV0FBYUEsRUFBU21RLElBQ3ZDNHVCLEVBQWFZLFVBQVlBLEVBQVF4dkIsSUFDakM0dUIsRUFBYWpqQixZQUFjQSxJQUUzQmlqQixFQUFhLytCLFNBQVdBLEVBQVNtUSxHQUNqQzR1QixFQUFhWSxRQUFVQSxFQUFReHZCLEdBQy9CNHVCLEVBQWFqakIsVUFBWUEsRUFFekJza0IsR0FBZ0IsSUFNYyxJQUEzQmhoQyxFQUFPc1Msa0JBRVgwdUIsR0FBZ0IsR0FJRixPQUFWcDVELEdBRUppNUIsRUFBVzlILE9BQVFueEIsRUFBTyxRQUl0Qm81RCxHQUFpQnBCLEtBRXJCQSxHQUFjLEVBbVBoQixTQUFnQzUvQixFQUFRcVQsRUFBVWt0QixFQUFTMy9CLEdBRTFELElBQStCLElBQTFCbXZCLEVBQWFDLFdBQXdCaHdCLEVBQU9zUyxpQkFBbUIxUixFQUFTZ2hDLDRCQUV4QixPQUEvQzNaLEVBQVdyd0MsSUFBSywwQkFBc0MsT0FJNUQ0b0QsSUFFQSxNQUFNZSxFQUFxQjNnQyxFQUFTQyxXQUU5QmdoQyxFQUFvQnRCLEVBQVF1QixnQkFFNUJDLEVBQWlDMXVCLEVBQVNpVix1QkFFaEQsSUFBTSxNQUFNanhDLEtBQVF3cUQsRUFBb0IsQ0FFdkMsTUFBTUcsRUFBbUJILEVBQW1CeHFELEdBRTVDLEdBQUsycUQsRUFBaUJ0ckQsVUFBWSxFQUFJLENBRXJDLElBQUlnckQsRUFBb0JILEVBQW9CbHFELEdBUzVDLFFBUDJCbUosSUFBdEJraEQsSUFFVSxtQkFBVHJxRCxHQUE2QjJvQixFQUFPdVMsaUJBQWlCbXZCLEVBQW9CMWhDLEVBQU91UyxnQkFDdkUsa0JBQVRsN0IsR0FBNEIyb0IsRUFBT3dTLGdCQUFnQmt2QixFQUFvQjFoQyxFQUFPd1MscUJBSXpEaHlCLElBQXRCa2hELEVBQWtDLENBRXRDLE1BQU12eEMsRUFBYXV4QyxFQUFrQnZ4QyxXQUMvQjlYLEVBQU9xcEQsRUFBa0Jua0IsU0FFekI1MUIsRUFBWWtaLEVBQVdqcEIsSUFBSzhwRCxHQUlsQyxRQUFtQmxoRCxJQUFkbUgsRUFBMEIsU0FFL0IsTUFBTXhhLEVBQVN3YSxFQUFVeGEsT0FDbkIwSyxFQUFPOFAsRUFBVTlQLEtBQ2pCeTRDLEVBQWtCM29DLEVBQVUyb0MsZ0JBRWxDLEdBQUtvUixFQUFrQnRlLDZCQUErQixDQUVyRCxNQUFNcHFDLEVBQU8wb0QsRUFBa0Ixb0QsS0FDekJxcUMsRUFBU3JxQyxFQUFLcXFDLE9BQ2Q3N0IsRUFBU2s2QyxFQUFrQmw2QyxPQUVqQyxHQUFLeE8sRUFBS2lwRCw2QkFBK0IsQ0FFeEMsSUFBTSxJQUFJbmdFLEVBQUksRUFBR0EsRUFBSWtnRSxFQUFpQkUsYUFBY3BnRSxJQUVuRDQrRCxFQUEyQnNCLEVBQWlCdHJELFNBQVc1VSxFQUFHa1gsRUFBSzJuRCxtQkFJaEMsSUFBM0IzZ0MsRUFBT3NTLHNCQUEyRDl4QixJQUEvQm9nQixFQUFTdWhDLG9CQUVoRHZoQyxFQUFTdWhDLGtCQUFvQm5wRCxFQUFLMm5ELGlCQUFtQjNuRCxFQUFLOGQsWUFNM0QsSUFBTSxJQUFJaDFCLEVBQUksRUFBR0EsRUFBSWtnRSxFQUFpQkUsYUFBY3BnRSxJQUVuRDIrRCxFQUFpQnVCLEVBQWlCdHJELFNBQVc1VSxHQU0vQ2d1RCxFQUFHejdDLFdBQVksTUFBT2xILEdBRXRCLElBQU0sSUFBSXJMLEVBQUksRUFBR0EsRUFBSWtnRSxFQUFpQkUsYUFBY3BnRSxJQUVuRDBTLEVBQ0N3dEQsRUFBaUJ0ckQsU0FBVzVVLEVBQzVCdVcsRUFBTzJwRCxFQUFpQkUsYUFDeEJycUQsRUFDQXNZLEVBQ0FrekIsRUFBU2lOLEdBQ1A5b0MsRUFBV25QLEVBQU8ycEQsRUFBaUJFLGFBQWlCcGdFLEdBQU13dUQsT0FLeEQsQ0FFTixHQUFLb1IsRUFBa0JVLDJCQUE2QixDQUVuRCxJQUFNLElBQUl0Z0UsRUFBSSxFQUFHQSxFQUFJa2dFLEVBQWlCRSxhQUFjcGdFLElBRW5ENCtELEVBQTJCc0IsRUFBaUJ0ckQsU0FBVzVVLEVBQUc0L0QsRUFBa0JmLG1CQUk3QyxJQUEzQjNnQyxFQUFPc1Msc0JBQTJEOXhCLElBQS9Cb2dCLEVBQVN1aEMsb0JBRWhEdmhDLEVBQVN1aEMsa0JBQW9CVCxFQUFrQmYsaUJBQW1CZSxFQUFrQjVxQyxZQU1yRixJQUFNLElBQUloMUIsRUFBSSxFQUFHQSxFQUFJa2dFLEVBQWlCRSxhQUFjcGdFLElBRW5EMitELEVBQWlCdUIsRUFBaUJ0ckQsU0FBVzVVLEdBTS9DZ3VELEVBQUd6N0MsV0FBWSxNQUFPbEgsR0FFdEIsSUFBTSxJQUFJckwsRUFBSSxFQUFHQSxFQUFJa2dFLEVBQWlCRSxhQUFjcGdFLElBRW5EMFMsRUFDQ3d0RCxFQUFpQnRyRCxTQUFXNVUsRUFDNUJ1VyxFQUFPMnBELEVBQWlCRSxhQUN4QnJxRCxFQUNBc1ksRUFDQTlYLEVBQU9pNEMsRUFDTGo0QyxFQUFPMnBELEVBQWlCRSxhQUFpQnBnRSxFQUFJd3VELFNBTzVDLFFBQXdDOXZDLElBQW5DdWhELEVBQStDLENBRTFELE1BQU0vaEUsRUFBUStoRSxFQUFnQzFxRCxHQUU5QyxRQUFlbUosSUFBVnhnQixFQUVKLE9BQVNBLEVBQU1GLFFBRWQsS0FBSyxFQUNKZ3dELEVBQUd1UyxnQkFBaUJMLEVBQWlCdHJELFNBQVUxVyxHQUMvQyxNQUVELEtBQUssRUFDSjh2RCxFQUFHd1MsZ0JBQWlCTixFQUFpQnRyRCxTQUFVMVcsR0FDL0MsTUFFRCxLQUFLLEVBQ0o4dkQsRUFBR3lTLGdCQUFpQlAsRUFBaUJ0ckQsU0FBVTFXLEdBQy9DLE1BRUQsUUFDQzh2RCxFQUFHMFMsZ0JBQWlCUixFQUFpQnRyRCxTQUFVMVcsTUFZckQ0Z0UsSUF4WkM2QixDQUF1QnppQyxFQUFRcVQsRUFBVWt0QixFQUFTMy9CLEdBRW5DLE9BQVZoNUIsR0FFSmtvRCxFQUFHejdDLFdBQVksTUFBT3dzQixFQUFXanBCLElBQUtoUSxHQUFRdUYsVUFpZ0JoREksTUFBT0EsRUFDUHV6RCxrQkFBbUJBLEVBQ25CaHRDLFFBM0dELFdBRUN2bUIsSUFFQSxJQUFNLE1BQU1tMUQsS0FBY2xELEVBQWdCLENBRXpDLE1BQU15QixFQUFhekIsRUFBZWtELEdBRWxDLElBQU0sTUFBTUMsS0FBYTFCLEVBQWEsQ0FFckMsTUFBTUMsRUFBV0QsRUFBWTBCLEdBRTdCLElBQU0sTUFBTWptQixLQUFhd2tCLEVBRXhCakIsRUFBeUJpQixFQUFVeGtCLEdBQVkxYyxlQUV4Q2toQyxFQUFVeGtCLFVBSVh1a0IsRUFBWTBCLFVBSWJuRCxFQUFla0QsS0FvRnZCRSx3QkE5RUQsU0FBa0NoaUMsR0FFakMsUUFBc0NwZ0IsSUFBakNnL0MsRUFBZTUrQixFQUFTbVEsSUFBcUIsT0FFbEQsTUFBTWt3QixFQUFhekIsRUFBZTUrQixFQUFTbVEsSUFFM0MsSUFBTSxNQUFNNHhCLEtBQWExQixFQUFhLENBRXJDLE1BQU1DLEVBQVdELEVBQVkwQixHQUU3QixJQUFNLE1BQU1qbUIsS0FBYXdrQixFQUV4QmpCLEVBQXlCaUIsRUFBVXhrQixHQUFZMWMsZUFFeENraEMsRUFBVXhrQixVQUlYdWtCLEVBQVkwQixVQUlibkQsRUFBZTUrQixFQUFTbVEsS0F5RC9COHhCLHVCQXJERCxTQUFpQ3RDLEdBRWhDLElBQU0sTUFBTW1DLEtBQWNsRCxFQUFnQixDQUV6QyxNQUFNeUIsRUFBYXpCLEVBQWVrRCxHQUVsQyxRQUFrQ2xpRCxJQUE3QnlnRCxFQUFZVixFQUFReHZCLElBQXFCLFNBRTlDLE1BQU1td0IsRUFBV0QsRUFBWVYsRUFBUXh2QixJQUVyQyxJQUFNLE1BQU0yTCxLQUFhd2tCLEVBRXhCakIsRUFBeUJpQixFQUFVeGtCLEdBQVkxYyxlQUV4Q2toQyxFQUFVeGtCLFVBSVh1a0IsRUFBWVYsRUFBUXh2QixNQXFDNUJ5dkIsZUFBZ0JBLEVBQ2hCQyxnQkFBaUJBLEVBQ2pCRyx3QkFBeUJBLEdBTTNCLFNBQVNrQyxHQUFxQmhULEVBQUk3SCxFQUFZOGEsRUFBTWhULEdBRW5ELE1BQU1DLEVBQVdELEVBQWFDLFNBRTlCLElBQUlnVCxFQWlESmhpRSxLQUFLaWlFLFFBL0NMLFNBQWtCampFLEdBRWpCZ2pFLEVBQU9oakUsR0E4Q1JnQixLQUFLMnFELE9BMUNMLFNBQWlCM2xELEVBQU84d0IsR0FFdkJnNUIsRUFBR3A2QyxXQUFZc3RELEVBQU1oOUQsRUFBTzh3QixHQUU1QmlzQyxFQUFLaHFDLE9BQVFqQyxFQUFPa3NDLEVBQU0sSUF1QzNCaGlFLEtBQUtraUUsZ0JBbkNMLFNBQTBCbDlELEVBQU84d0IsRUFBT3FzQyxHQUV2QyxHQUFtQixJQUFkQSxFQUFrQixPQUV2QixJQUFJN0QsRUFBVzhELEVBRWYsR0FBS3BULEVBRUpzUCxFQUFZeFAsRUFDWnNULEVBQWEsMkJBT2IsR0FIQTlELEVBQVlyWCxFQUFXcndDLElBQUssMEJBQzVCd3JELEVBQWEsMkJBRU0sT0FBZDlELEVBR0osWUFEQTM3RCxRQUFRQyxNQUFPLGtJQU9qQjA3RCxFQUFXOEQsR0FBY0osRUFBTWg5RCxFQUFPOHdCLEVBQU9xc0MsR0FFN0NKLEVBQUtocUMsT0FBUWpDLEVBQU9rc0MsRUFBTUcsSUFZNUIsU0FBU0UsR0FBbUJ2VCxFQUFJN0gsRUFBWWxWLEdBRTNDLElBQUl1d0IsRUFzQkosU0FBU0MsRUFBaUJuckIsR0FFekIsR0FBbUIsVUFBZEEsRUFBd0IsQ0FFNUIsR0FBSzBYLEVBQUcwVCx5QkFBMEIsTUFBTyxPQUFRcHJCLFVBQVksR0FDNUQwWCxFQUFHMFQseUJBQTBCLE1BQU8sT0FBUXByQixVQUFZLEVBRXhELE1BQU8sUUFJUkEsRUFBWSxVQUliLE1BQW1CLFlBQWRBLEdBRUMwWCxFQUFHMFQseUJBQTBCLE1BQU8sT0FBUXByQixVQUFZLEdBQzVEMFgsRUFBRzBULHlCQUEwQixNQUFPLE9BQVFwckIsVUFBWSxFQUVqRCxVQU1GLE9BSVIsTUFBTTRYLEVBQStDLG9CQUEzQi96Qyx3QkFBMEM2ekMsYUFBYzd6Qyx3QkFDdEMsb0JBQWxDd25ELCtCQUFpRDNULGFBQWMyVCw4QkFFekUsSUFBSXJyQixPQUFxQzUzQixJQUF6QnV5QixFQUFXcUYsVUFBMEJyRixFQUFXcUYsVUFBWSxRQUM1RSxNQUFNc3JCLEVBQWVILEVBQWlCbnJCLEdBRWpDc3JCLElBQWlCdHJCLElBRXJCejBDLFFBQVF1aEIsS0FBTSx1QkFBd0JrekIsRUFBVyx1QkFBd0JzckIsRUFBYyxZQUN2RnRyQixFQUFZc3JCLEdBSWIsTUFBTXRiLEVBQWM0SCxHQUFZL0gsRUFBVzBiLElBQUssc0JBRTFDQyxHQUErRCxJQUF0Qzd3QixFQUFXNndCLHVCQUVwQ0MsRUFBYy9ULEVBQUd4dUIsYUFBYyxPQUMvQndpQyxFQUFvQmhVLEVBQUd4dUIsYUFBYyxPQUNyQ3lpQyxFQUFpQmpVLEVBQUd4dUIsYUFBYyxNQUNsQzBpQyxFQUFpQmxVLEVBQUd4dUIsYUFBYyxPQUVsQzJpQyxFQUFnQm5VLEVBQUd4dUIsYUFBYyxPQUNqQzRpQyxFQUFvQnBVLEVBQUd4dUIsYUFBYyxPQUNyQzZpQyxFQUFjclUsRUFBR3h1QixhQUFjLE9BQy9COGlDLEVBQXNCdFUsRUFBR3h1QixhQUFjLE9BRXZDK2lDLEVBQWlCUCxFQUFvQixFQUNyQ1EsRUFBd0J0VSxHQUFZL0gsRUFBVzBiLElBQUsscUJBSzFELE1BQU8sQ0FFTjNULFNBQVVBLEVBRVY1SCxZQUFhQSxFQUVibWMsaUJBekZELFdBRUMsUUFBdUIvakQsSUFBbEI4aUQsRUFBOEIsT0FBT0EsRUFFMUMsSUFBNEQsSUFBdkRyYixFQUFXMGIsSUFBSyxrQ0FBOEMsQ0FFbEUsTUFBTXJFLEVBQVlyWCxFQUFXcndDLElBQUssa0NBRWxDMHJELEVBQWdCeFQsRUFBR3h1QixhQUFjZytCLEVBQVVrRixxQ0FJM0NsQixFQUFnQixFQUlqQixPQUFPQSxHQTBFUEMsZ0JBQWlCQSxFQUVqQm5yQixVQUFXQSxFQUNYd3JCLHVCQUF3QkEsRUFFeEJDLFlBQWFBLEVBQ2JDLGtCQUFtQkEsRUFDbkJDLGVBQWdCQSxFQUNoQkMsZUFBZ0JBLEVBRWhCQyxjQUFlQSxFQUNmQyxrQkFBbUJBLEVBQ25CQyxZQUFhQSxFQUNiQyxvQkFBcUJBLEVBRXJCQyxlQUFnQkEsRUFDaEJDLHNCQUF1QkEsRUFDdkJHLG9CQTVCMkJKLEdBQWtCQyxFQThCN0NJLFdBNUJrQjFVLEVBQVdGLEVBQUd4dUIsYUFBYyxPQUFVLEdBa0MxRCxTQUFTcWpDLEdBQWUzSixHQUV2QixNQUFNN1UsRUFBUW5sRCxLQUVkLElBQUk0akUsRUFBYyxLQUNqQkMsRUFBa0IsRUFDbEJDLEdBQXVCLEVBQ3ZCQyxHQUFtQixFQUVwQixNQUFNbmpDLEVBQVEsSUFBSTRxQixHQUNqQndZLEVBQW1CLElBQUk3OEMsRUFFdkI4OEMsRUFBVSxDQUFFamxFLE1BQU8sS0FBTW94QixhQUFhLEdBeUZ2QyxTQUFTOHpDLElBRUhELEVBQVFqbEUsUUFBVTRrRSxJQUV0QkssRUFBUWpsRSxNQUFRNGtFLEVBQ2hCSyxFQUFRN3pDLFlBQWN5ekMsRUFBa0IsR0FJekMxZSxFQUFNZ2YsVUFBWU4sRUFDbEIxZSxFQUFNaWYsZ0JBQWtCLEVBSXpCLFNBQVNDLEVBQWV6WCxFQUFRL3dCLEVBQVFwRixFQUFXNnRDLEdBRWxELE1BQU1DLEVBQXFCLE9BQVgzWCxFQUFrQkEsRUFBTzl0RCxPQUFTLEVBQ2xELElBQUkwbEUsRUFBVyxLQUVmLEdBQWlCLElBQVpELEVBQWdCLENBSXBCLEdBRkFDLEVBQVdQLEVBQVFqbEUsT0FFSSxJQUFsQnNsRSxHQUF1QyxPQUFiRSxFQUFvQixDQUVsRCxNQUFNQyxFQUFXaHVDLEVBQXNCLEVBQVY4dEMsRUFDNUJHLEVBQWE3b0MsRUFBT0MsbUJBRXJCa29DLEVBQWlCMzVDLGdCQUFpQnE2QyxJQUVoQixPQUFiRixHQUFxQkEsRUFBUzFsRSxPQUFTMmxFLEtBRTNDRCxFQUFXLElBQUk3d0QsYUFBYzh3RCxJQUk5QixJQUFNLElBQUkzakUsRUFBSSxFQUFHNmpFLEVBQUtsdUMsRUFBVzMxQixJQUFNeWpFLElBQVl6akUsRUFBRzZqRSxHQUFNLEVBRTNEL2pDLEVBQU01YyxLQUFNNG9DLEVBQVE5ckQsSUFBTXV5QixhQUFjcXhDLEVBQVlWLEdBRXBEcGpDLEVBQU0zRCxPQUFPeFcsUUFBUys5QyxFQUFVRyxHQUNoQ0gsRUFBVUcsRUFBSyxHQUFNL2pDLEVBQU1DLFNBTTdCb2pDLEVBQVFqbEUsTUFBUXdsRSxFQUNoQlAsRUFBUTd6QyxhQUFjLEVBT3ZCLE9BSEErMEIsRUFBTWdmLFVBQVlJLEVBQ2xCcGYsRUFBTWlmLGdCQUFrQixFQUVqQkksRUE5SVJ4a0UsS0FBS2lrRSxRQUFVQSxFQUNmamtFLEtBQUtta0UsVUFBWSxFQUNqQm5rRSxLQUFLb2tFLGdCQUFrQixFQUV2QnBrRSxLQUFLNGtFLEtBQU8sU0FBV2hZLEVBQVFpWSxFQUFxQmhwQyxHQUVuRCxNQUFNb3RCLEVBQ2EsSUFBbEIyRCxFQUFPOXRELFFBQ1ArbEUsR0FHb0IsSUFBcEJoQixHQUNBQyxFQU9ELE9BTEFBLEVBQXVCZSxFQUV2QmpCLEVBQWNTLEVBQWV6WCxFQUFRL3dCLEVBQVEsR0FDN0Nnb0MsRUFBa0JqWCxFQUFPOXRELE9BRWxCbXFELEdBSVJqcEQsS0FBSzhrRSxhQUFlLFdBRW5CZixHQUFtQixFQUNuQk0sRUFBZSxPQUloQnJrRSxLQUFLK2tFLFdBQWEsV0FFakJoQixHQUFtQixFQUNuQkcsS0FJRGxrRSxLQUFLZ2xFLFNBQVcsU0FBVzN5QixFQUFVeFcsRUFBUW9wQyxHQUU1QyxNQUFNclksRUFBU3ZhLEVBQVMwRSxlQUN2QkMsRUFBbUIzRSxFQUFTMkUsaUJBQzVCQyxFQUFjNUUsRUFBUzRFLFlBRWxCaXVCLEVBQXFCbEwsRUFBV3BqRCxJQUFLeTdCLEdBRTNDLElBQU95eEIsR0FBbUMsT0FBWGxYLEdBQXFDLElBQWxCQSxFQUFPOXRELFFBQWdCaWxFLElBQXNCOXNCLEVBSXpGOHNCLEVBSUpNLEVBQWUsTUFJZkgsUUFJSyxDQUVOLE1BQU1pQixFQUFVcEIsRUFBbUIsRUFBSUYsRUFDdEN1QixFQUFvQixFQUFWRCxFQUVYLElBQUlYLEVBQVdVLEVBQW1CRyxlQUFpQixLQUVuRHBCLEVBQVFqbEUsTUFBUXdsRSxFQUVoQkEsRUFBV0gsRUFBZXpYLEVBQVEvd0IsRUFBUXVwQyxFQUFTSCxHQUVuRCxJQUFNLElBQUlua0UsRUFBSSxFQUFHQSxJQUFNc2tFLElBQVl0a0UsRUFFbEMwakUsRUFBVTFqRSxHQUFNOGlFLEVBQWE5aUUsR0FJOUJva0UsRUFBbUJHLGNBQWdCYixFQUNuQ3hrRSxLQUFLb2tFLGdCQUFrQnB0QixFQUFtQmgzQyxLQUFLbWtFLFVBQVksRUFDM0Rua0UsS0FBS21rRSxXQUFhZ0IsSUFvRXJCLFNBQVNHLEdBQWV0YixHQUV2QixJQUFJNFMsRUFBVyxJQUFJMU4sUUFFbkIsU0FBU3FXLEVBQW1CdndDLEVBQVNoRSxHQVlwQyxPQXJyZHVDLE1BMnFkbENBLEVBRUpnRSxFQUFRaEUsUUFBVW5SLEVBNXFkb0IsTUE4cWQzQm1SLElBRVhnRSxFQUFRaEUsUUFBVWxSLEdBSVprVixFQWlEUixTQUFTd3dDLEVBQWtCaGpELEdBRTFCLE1BQU13UyxFQUFVeFMsRUFBTUMsT0FFdEJ1UyxFQUFRMVMsb0JBQXFCLFVBQVdrakQsR0FFeEMsTUFBTUMsRUFBVTdJLEVBQVNobUQsSUFBS29lLFFBRWJ4VixJQUFaaW1ELElBRUo3SSxFQUFTdGxELE9BQVEwZCxHQUNqQnl3QyxFQUFRM3lDLFdBWVYsTUFBTyxDQUNObGMsSUFyRUQsU0FBY29lLEdBRWIsR0FBS0EsR0FBV0EsRUFBUS9CLFlBQStDLElBQWxDK0IsRUFBUTVDLHNCQUFrQyxDQUU5RSxNQUFNcEIsRUFBVWdFLEVBQVFoRSxRQUV4QixHQS9yZHNDLE1BK3JkakNBLEdBOXJkaUMsTUE4cmRlQSxFQUErQyxDQUVuRyxHQUFLNHJDLEVBQVMrRixJQUFLM3RDLEdBR2xCLE9BQU91d0MsRUFEUzNJLEVBQVNobUQsSUFBS29lLEdBQVVBLFFBQ0xBLEVBQVFoRSxTQUVyQyxDQUVOLE1BQU03WSxFQUFRNmMsRUFBUTdjLE1BRXRCLEdBQUtBLEdBQVNBLEVBQU05VCxPQUFTLEVBQUksQ0FFaEMsTUFBTW1sRCxFQUFlLElBQUlzQixHQUF1QjN5QyxFQUFNOVQsT0FBUyxHQU0vRCxPQUxBbWxELEVBQWF1QiwyQkFBNEJmLEVBQVVoMUIsR0FDbkQ0bkMsRUFBU2p3RCxJQUFLcW9CLEVBQVN3MEIsR0FFdkJ4MEIsRUFBUTVhLGlCQUFrQixVQUFXb3JELEdBRTlCRCxFQUFtQi9iLEVBQWF4MEIsUUFBU0EsRUFBUWhFLFNBTXhELE9BQU8sT0FVWCxPQUFPZ0UsR0E2QlBsQyxRQVJELFdBRUM4cEMsRUFBVyxJQUFJMU4sVUF2dkNqQnlNLEdBQVUrSixTQUFXLENBRXBCbGYsU0FBVUQsR0FBZSxDQUN4Qm9WLEdBQVVJLFNBQVN2VixTQUNuQixDQUNDeE4sVUFBVyxDQUFFaDZDLE1BQU8sR0FDcEJrNkMsYUFBYyxDQUFFbDZDLE1BQU8sTUFDdkJpNkMsbUJBQW9CLENBQUVqNkMsTUFBTyxHQUM3Qm02QyxzQkFBdUIsQ0FBRW42QyxNQUFPLE1BQ2hDcTZDLHFCQUFzQixDQUFFcjZDLE1BQU8sSUFBSXdrQixFQUFTLEVBQUcsSUFDL0M0MUIsbUJBQW9CLENBQUVwNkMsTUFBTyxNQUM3QnU1QyxNQUFPLENBQUV2NUMsTUFBTyxHQUNoQnc1QyxXQUFZLENBQUV4NUMsTUFBTyxJQUFJZ3VCLEdBQU8sSUFDaEMyNEMsY0FBZSxDQUFFM21FLE1BQU8sTUFDeEJ5NUMsZUFBZ0IsQ0FBRXo1QyxNQUFPLEdBQ3pCNG1FLGtCQUFtQixDQUFFNW1FLE1BQU8sTUFDNUJnOEMsYUFBYyxDQUFFaDhDLE1BQU8sR0FDdkJpOEMsZ0JBQWlCLENBQUVqOEMsTUFBTyxNQUMxQjZtRSx3QkFBeUIsQ0FBRTdtRSxNQUFPLElBQUl3a0IsR0FDdENzaUQsdUJBQXdCLENBQUU5bUUsTUFBTyxNQUNqQ2s4QyxVQUFXLENBQUVsOEMsTUFBTyxHQUNwQm04QyxhQUFjLENBQUVuOEMsTUFBTyxNQUN2Qm84QyxvQkFBcUIsQ0FBRXA4QyxNQUFPLEdBQzlCcThDLGlCQUFrQixDQUFFcjhDLE1BQU8sSUFBSWd1QixHQUFPLElBQ3RDNnJCLGtCQUFtQixDQUFFNzVDLE1BQU8sR0FDNUJ3N0MscUJBQXNCLENBQUV4N0MsTUFBTyxNQUMvQjg1QyxjQUFlLENBQUU5NUMsTUFBTyxJQUFJZ3VCLEdBQU8sRUFBRyxFQUFHLElBQ3pDeXRCLGlCQUFrQixDQUFFejdDLE1BQU8sU0FJN0I2bkQsYUFBY21KLEdBQVk4SCxrQkFDMUJoUixlQUFnQmtKLEdBQVkrSCxtQkFrdUM3QixNQUFNZ08sV0FBMkJwZSxHQUVoQ2gvQyxZQUFhcWlDLEdBQU8sRUFBS0MsRUFBUSxFQUFHQyxFQUFNLEVBQUdDLEdBQVMsRUFBS0MsRUFBTyxHQUFLQyxFQUFNLEtBRTVFNVosUUFFQXp4QixLQUFLNlcsS0FBTyxxQkFFWjdXLEtBQUsrbkQsS0FBTyxFQUNaL25ELEtBQUtpb0QsS0FBTyxLQUVaam9ELEtBQUtnckMsS0FBT0EsRUFDWmhyQyxLQUFLaXJDLE1BQVFBLEVBQ2JqckMsS0FBS2tyQyxJQUFNQSxFQUNYbHJDLEtBQUttckMsT0FBU0EsRUFFZG5yQyxLQUFLb3JDLEtBQU9BLEVBQ1pwckMsS0FBS3FyQyxJQUFNQSxFQUVYcnJDLEtBQUtvb0QseUJBSU5wa0MsS0FBTStJLEVBQVE2bEIsR0FjYixPQVpBbmhCLE1BQU16TixLQUFNK0ksRUFBUTZsQixHQUVwQjV5QyxLQUFLZ3JDLEtBQU9qZSxFQUFPaWUsS0FDbkJockMsS0FBS2lyQyxNQUFRbGUsRUFBT2tlLE1BQ3BCanJDLEtBQUtrckMsSUFBTW5lLEVBQU9tZSxJQUNsQmxyQyxLQUFLbXJDLE9BQVNwZSxFQUFPb2UsT0FDckJuckMsS0FBS29yQyxLQUFPcmUsRUFBT3FlLEtBQ25CcHJDLEtBQUtxckMsSUFBTXRlLEVBQU9zZSxJQUVsQnJyQyxLQUFLK25ELEtBQU9oN0IsRUFBT2c3QixLQUNuQi9uRCxLQUFLaW9ELEtBQXVCLE9BQWhCbDdCLEVBQU9rN0IsS0FBZ0IsS0FBTy9vRCxPQUFPNEUsT0FBUSxHQUFJaXBCLEVBQU9rN0IsTUFFN0Rqb0QsS0FJUjhvRCxjQUFlQyxFQUFXQyxFQUFZcm9ELEVBQUdFLEVBQUd1RCxFQUFPQyxHQUUvQixPQUFkckUsS0FBS2lvRCxPQUVUam9ELEtBQUtpb0QsS0FBTyxDQUNYZ0IsU0FBUyxFQUNURixVQUFXLEVBQ1hDLFdBQVksRUFDWkUsUUFBUyxFQUNUQyxRQUFTLEVBQ1Qva0QsTUFBTyxFQUNQQyxPQUFRLElBS1ZyRSxLQUFLaW9ELEtBQUtnQixTQUFVLEVBQ3BCanBELEtBQUtpb0QsS0FBS2MsVUFBWUEsRUFDdEIvb0QsS0FBS2lvRCxLQUFLZSxXQUFhQSxFQUN2QmhwRCxLQUFLaW9ELEtBQUtpQixRQUFVdm9ELEVBQ3BCWCxLQUFLaW9ELEtBQUtrQixRQUFVdG9ELEVBQ3BCYixLQUFLaW9ELEtBQUs3akQsTUFBUUEsRUFDbEJwRSxLQUFLaW9ELEtBQUs1akQsT0FBU0EsRUFFbkJyRSxLQUFLb29ELHlCQUlOZ0Isa0JBRW9CLE9BQWRwcEQsS0FBS2lvRCxPQUVUam9ELEtBQUtpb0QsS0FBS2dCLFNBQVUsR0FJckJqcEQsS0FBS29vRCx5QkFJTkEseUJBRUMsTUFBTXJpQyxHQUFPL2xCLEtBQUtpckMsTUFBUWpyQyxLQUFLZ3JDLE9BQVcsRUFBSWhyQyxLQUFLK25ELE1BQzdDL2hDLEdBQU9obUIsS0FBS2tyQyxJQUFNbHJDLEtBQUttckMsU0FBYSxFQUFJbnJDLEtBQUsrbkQsTUFDN0NsOUIsR0FBTzdxQixLQUFLaXJDLE1BQVFqckMsS0FBS2dyQyxNQUFTLEVBQ2xDbGdCLEdBQU85cUIsS0FBS2tyQyxJQUFNbHJDLEtBQUttckMsUUFBVyxFQUV4QyxJQUFJSCxFQUFPbmdCLEVBQUs5RSxFQUNaa2xCLEVBQVFwZ0IsRUFBSzlFLEVBQ2JtbEIsRUFBTXBnQixFQUFLOUUsRUFDWG1sQixFQUFTcmdCLEVBQUs5RSxFQUVsQixHQUFtQixPQUFkaG1CLEtBQUtpb0QsTUFBaUJqb0QsS0FBS2lvRCxLQUFLZ0IsUUFBVSxDQUU5QyxNQUFNK2MsR0FBV2htRSxLQUFLaXJDLE1BQVFqckMsS0FBS2dyQyxNQUFTaHJDLEtBQUtpb0QsS0FBS2MsVUFBWS9vRCxLQUFLK25ELEtBQ2pFa2UsR0FBV2ptRSxLQUFLa3JDLElBQU1sckMsS0FBS21yQyxRQUFXbnJDLEtBQUtpb0QsS0FBS2UsV0FBYWhwRCxLQUFLK25ELEtBRXhFL2MsR0FBUWc3QixFQUFTaG1FLEtBQUtpb0QsS0FBS2lCLFFBQzNCamUsRUFBUUQsRUFBT2c3QixFQUFTaG1FLEtBQUtpb0QsS0FBSzdqRCxNQUNsQzhtQyxHQUFPKzZCLEVBQVNqbUUsS0FBS2lvRCxLQUFLa0IsUUFDMUJoZSxFQUFTRCxFQUFNKzZCLEVBQVNqbUUsS0FBS2lvRCxLQUFLNWpELE9BSW5DckUsS0FBSys3QixpQkFBaUJ1UCxpQkFBa0JOLEVBQU1DLEVBQU9DLEVBQUtDLEVBQVFuckMsS0FBS29yQyxLQUFNcHJDLEtBQUtxckMsS0FFbEZyckMsS0FBS2k4Qix3QkFBd0JqWSxLQUFNaGtCLEtBQUsrN0Isa0JBQW1CbFMsU0FJNURqZSxPQUFReWtCLEdBRVAsTUFBTXJZLEVBQU95WixNQUFNN2xCLE9BQVF5a0IsR0FZM0IsT0FWQXJZLEVBQUtnbkIsT0FBTytvQixLQUFPL25ELEtBQUsrbkQsS0FDeEIvdkMsRUFBS2duQixPQUFPZ00sS0FBT2hyQyxLQUFLZ3JDLEtBQ3hCaHpCLEVBQUtnbkIsT0FBT2lNLE1BQVFqckMsS0FBS2lyQyxNQUN6Qmp6QixFQUFLZ25CLE9BQU9rTSxJQUFNbHJDLEtBQUtrckMsSUFDdkJsekIsRUFBS2duQixPQUFPbU0sT0FBU25yQyxLQUFLbXJDLE9BQzFCbnpCLEVBQUtnbkIsT0FBT29NLEtBQU9wckMsS0FBS29yQyxLQUN4QnB6QixFQUFLZ25CLE9BQU9xTSxJQUFNcnJDLEtBQUtxckMsSUFFSixPQUFkcnJDLEtBQUtpb0QsT0FBZ0Jqd0MsRUFBS2duQixPQUFPaXBCLEtBQU8vb0QsT0FBTzRFLE9BQVEsR0FBSTlELEtBQUtpb0QsT0FFOURqd0MsR0FNVCt0RCxHQUFtQnhtRSxVQUFVMm1FLHNCQUF1QixFQUVwRCxNQU1NQyxHQUFrQixDQUFFLEtBQU8sS0FBTyxJQUFNLEtBQU8sS0FBTyxNQU10REMsR0FBNEIsSUFBSUwsR0FDaENNLEdBQTRCLElBQUlyNUMsR0FDdEMsSUFBSXM1QyxHQUFhLEtBR2pCLE1BQU1DLElBQVEsRUFBSTFtRSxLQUFLMmxCLEtBQU0sSUFBUSxFQUMvQmdoRCxHQUFVLEVBQUlELEdBSWRFLEdBQWtCLENBQ1QsSUFBSTVyQyxHQUFTLEVBQUcsRUFBRyxHQUNuQixJQUFJQSxJQUFXLEVBQUcsRUFBRyxHQUNyQixJQUFJQSxHQUFTLEVBQUcsR0FBSyxHQUNyQixJQUFJQSxJQUFXLEVBQUcsR0FBSyxHQUN2QixJQUFJQSxHQUFTLEVBQUcwckMsR0FBS0MsSUFDckIsSUFBSTNyQyxHQUFTLEVBQUcwckMsSUFBT0MsSUFDdkIsSUFBSTNyQyxHQUFTMnJDLEdBQVMsRUFBR0QsSUFDekIsSUFBSTFyQyxJQUFXMnJDLEdBQVMsRUFBR0QsSUFDM0IsSUFBSTFyQyxHQUFTMHJDLEdBQUtDLEdBQVMsR0FDM0IsSUFBSTNyQyxJQUFXMHJDLEdBQUtDLEdBQVMsSUFpQjVDLE1BQU1FLEdBRUwvOUQsWUFBYXFoRCxHQUVaaHFELEtBQUsybUUsVUFBWTNjLEVBQ2pCaHFELEtBQUs0bUUsc0JBQXdCLEtBRTdCNW1FLEtBQUs2bUUsUUFBVSxFQUNmN21FLEtBQUs4bUUsVUFBWSxFQUNqQjltRSxLQUFLK21FLFdBQWEsR0FDbEIvbUUsS0FBS2duRSxVQUFZLEdBQ2pCaG5FLEtBQUtpbkUsUUFBVSxHQUVmam5FLEtBQUtrbkUsY0FBZ0IsS0FDckJsbkUsS0FBS21uRSxpQkFBbUIsS0FDeEJubkUsS0FBS29uRSxrQkFBb0IsS0FFekJwbkUsS0FBS3FuRSxpQkFBa0JybkUsS0FBS2tuRSxlQVc3QkksVUFBV3JkLEVBQU9zZCxFQUFRLEVBQUduOEIsRUFBTyxHQUFLQyxFQUFNLEtBRTlDaTdCLEdBQWF0bUUsS0FBSzJtRSxVQUFVeGMsa0JBRTVCbnFELEtBQUt3bkUsU0FBVSxLQUVmLE1BQU1DLEVBQXFCem5FLEtBQUswbkUsbUJBY2hDLE9BYkFELEVBQW1CeHlDLGFBQWMsRUFFakNqMUIsS0FBSzJuRSxlQUFnQjFkLEVBQU83ZSxFQUFNQyxFQUFLbzhCLEdBRWxDRixFQUFRLEdBRVp2bkUsS0FBSzRuRSxNQUFPSCxFQUFvQixFQUFHLEVBQUdGLEdBSXZDdm5FLEtBQUs2bkUsWUFBYUosR0FDbEJ6bkUsS0FBSzhuRSxTQUFVTCxHQUVSQSxFQVNSTSxvQkFBcUJDLEVBQWlCeGUsRUFBZSxNQUVwRCxPQUFPeHBELEtBQUtpb0UsYUFBY0QsRUFBaUJ4ZSxHQVM1QzBlLFlBQWF6QyxFQUFTamMsRUFBZSxNQUVwQyxPQUFPeHBELEtBQUtpb0UsYUFBY3hDLEVBQVNqYyxHQVFwQzJlLHVCQUVnQyxPQUExQm5vRSxLQUFLbW5FLG1CQUVUbm5FLEtBQUttbkUsaUJBQW1CaUIsS0FDeEJwb0UsS0FBS3FuRSxpQkFBa0JybkUsS0FBS21uRSxtQkFVOUJrQiwrQkFFaUMsT0FBM0Jyb0UsS0FBS29uRSxvQkFFVHBuRSxLQUFLb25FLGtCQUFvQmtCLEtBQ3pCdG9FLEtBQUtxbkUsaUJBQWtCcm5FLEtBQUtvbkUsb0JBVzlCdDBDLFVBRUM5eUIsS0FBS3VvRSxXQUUwQixPQUExQnZvRSxLQUFLbW5FLGtCQUE0Qm5uRSxLQUFLbW5FLGlCQUFpQnIwQyxVQUM1QixPQUEzQjl5QixLQUFLb25FLG1CQUE2QnBuRSxLQUFLb25FLGtCQUFrQnQwQyxVQU0vRDAwQyxTQUFVZ0IsR0FFVHhvRSxLQUFLNm1FLFFBQVVobkUsS0FBS3FMLE1BQU9yTCxLQUFLNG9FLEtBQU1ELElBQ3RDeG9FLEtBQUs4bUUsVUFBWWpuRSxLQUFLNlAsSUFBSyxFQUFHMVAsS0FBSzZtRSxTQUlwQzBCLFdBRTZCLE9BQXZCdm9FLEtBQUtrbkUsZUFBeUJsbkUsS0FBS2tuRSxjQUFjcDBDLFVBRWxCLE9BQS9COXlCLEtBQUs0bUUsdUJBQWlDNW1FLEtBQUs0bUUsc0JBQXNCOXpDLFVBRXRFLElBQU0sSUFBSWh5QixFQUFJLEVBQUdBLEVBQUlkLEtBQUsrbUUsV0FBV2pvRSxPQUFRZ0MsSUFFNUNkLEtBQUsrbUUsV0FBWWptRSxHQUFJZ3lCLFVBTXZCZzFDLFNBQVVZLEdBRVQxb0UsS0FBSzJtRSxVQUFVamMsZ0JBQWlCNGIsSUFDaENvQyxFQUFhM3pDLGFBQWMsRUFDM0I0ekMsR0FBY0QsRUFBYyxFQUFHLEVBQUdBLEVBQWF0a0UsTUFBT3NrRSxFQUFhcmtFLFFBSXBFNGpFLGFBQWNqekMsRUFBU3cwQixHQUVqQngwQixFQUFRaEUsVUFBWW5SLEdBQXlCbVYsRUFBUWhFLFVBQVlsUixFQUVyRTlmLEtBQUt3bkUsU0FBbUMsSUFBekJ4eUMsRUFBUTdjLE1BQU1yWixPQUFlLEdBQU9rMkIsRUFBUTdjLE1BQU8sR0FBSS9ULE9BQVM0d0IsRUFBUTdjLE1BQU8sR0FBSUEsTUFBTS9ULE9BSXhHcEUsS0FBS3duRSxTQUFVeHlDLEVBQVE3YyxNQUFNL1QsTUFBUSxHQUl0Q2tpRSxHQUFhdG1FLEtBQUsybUUsVUFBVXhjLGtCQUU1QixNQUFNc2QsRUFBcUJqZSxHQUFnQnhwRCxLQUFLMG5FLG1CQUtoRCxPQUpBMW5FLEtBQUs0b0UsaUJBQWtCNXpDLEVBQVN5eUMsR0FDaEN6bkUsS0FBSzZuRSxZQUFhSixHQUNsQnpuRSxLQUFLOG5FLFNBQVVMLEdBRVJBLEVBSVJDLG1CQUVDLE1BQU10akUsRUFBUSxFQUFJdkUsS0FBS2tHLElBQUsvRixLQUFLOG1FLFVBQVcsS0FDdEN6aUUsRUFBUyxFQUFJckUsS0FBSzhtRSxVQUFZLEdBRTlCK0IsRUFBUyxDQUNkejNDLFVBQVdoUixFQUNYaVIsVUFBV2pSLEVBQ1gwUixpQkFBaUIsRUFDakJqYixLQUFNNkosRUFDTjRRLE9BQVExUSxFQUNSNFEsU0FBVS9QLEVBQ1Z3VCxhQUFhLEdBR1J3eUMsRUFBcUJxQixHQUFxQjFrRSxFQUFPQyxFQUFRd2tFLEdBRS9ELEdBQW9DLE9BQS9CN29FLEtBQUs0bUUsdUJBQWtDNW1FLEtBQUs0bUUsc0JBQXNCeGlFLFFBQVVBLEVBQVEsQ0FFcEQsT0FBL0JwRSxLQUFLNG1FLHVCQUVUNW1FLEtBQUt1b0UsV0FJTnZvRSxLQUFLNG1FLHNCQUF3QmtDLEdBQXFCMWtFLEVBQU9DLEVBQVF3a0UsR0FFakUsTUFBTSxRQUFFaEMsR0FBWTdtRSxPQUNoQitvRSxTQUFVL29FLEtBQUtnbkUsVUFBV2dDLFVBQVdocEUsS0FBSyttRSxXQUFZa0MsT0FBUWpwRSxLQUFLaW5FLFNBZ1MxRSxTQUF3QmlDLEdBRXZCLE1BQU1GLEVBQVksR0FDWkQsRUFBVyxHQUNYRSxFQUFTLEdBRWYsSUFBSUUsRUFBTUQsRUFFVixNQUFNRSxFQUFZRixFQWppQkgsRUFpaUJzQixFQUFJL0MsR0FBZ0JybkUsT0FFekQsSUFBTSxJQUFJZ0MsRUFBSSxFQUFHQSxFQUFJc29FLEVBQVd0b0UsSUFBTyxDQUV0QyxNQUFNdW9FLEVBQVV4cEUsS0FBSzZQLElBQUssRUFBR3k1RCxHQUM3QkosRUFBU3ZtRSxLQUFNNm1FLEdBQ2YsSUFBSTlCLEVBQVEsRUFBTThCLEVBRWJ2b0UsRUFBSW9vRSxFQXppQkssRUEyaUJiM0IsRUFBUXBCLEdBQWlCcmxFLEVBQUlvb0UsRUEzaUJoQixFQTJpQm1DLEdBRS9CLElBQU5wb0UsSUFFWHltRSxFQUFRLEdBSVQwQixFQUFPem1FLEtBQU0ra0UsR0FFYixNQUFNK0IsRUFBWSxHQUFRRCxFQUFVLEdBQzlCOWlFLEdBQVEraUUsRUFBWSxFQUNwQnZqRSxFQUFNLEVBQUl1akUsRUFBWSxFQUN0Qm4xQixFQUFNLENBQUU1dEMsRUFBS0EsRUFBS1IsRUFBS1EsRUFBS1IsRUFBS0EsRUFBS1EsRUFBS0EsRUFBS1IsRUFBS0EsRUFBS1EsRUFBS1IsR0FFL0R3akUsRUFBWSxFQUNabmtCLEVBQVcsRUFDWG9rQixFQUFlLEVBQ2ZDLEVBQVMsRUFDVEMsRUFBZ0IsRUFFaEI1cEMsRUFBVyxJQUFJbnNCLGFBQWM2MUQsRUFBZXBrQixFQUFXbWtCLEdBQ3ZEdjJDLEVBQUssSUFBSXJmLGFBQWM4MUQsRUFBU3JrQixFQUFXbWtCLEdBQzNDL2tCLEVBQVksSUFBSTd3QyxhQUFjKzFELEVBQWdCdGtCLEVBQVdta0IsR0FFL0QsSUFBTSxJQUFJOWtCLEVBQU8sRUFBR0EsRUFBTzhrQixFQUFXOWtCLElBQVUsQ0FFL0MsTUFBTTlqRCxFQUFNOGpELEVBQU8sRUFBTSxFQUFJLEVBQUksRUFDM0I1akQsRUFBSTRqRCxFQUFPLEVBQUksR0FBTSxFQUNyQmtsQixFQUFjLENBQ25CaHBFLEVBQUdFLEVBQUcsRUFDTkYsRUFBSSxFQUFJLEVBQUdFLEVBQUcsRUFDZEYsRUFBSSxFQUFJLEVBQUdFLEVBQUksRUFBRyxFQUNsQkYsRUFBR0UsRUFBRyxFQUNORixFQUFJLEVBQUksRUFBR0UsRUFBSSxFQUFHLEVBQ2xCRixFQUFHRSxFQUFJLEVBQUcsR0FFWGkvQixFQUFTbnpCLElBQUtnOUQsRUFBYUgsRUFBZXBrQixFQUFXWCxHQUNyRHp4QixFQUFHcm1CLElBQUt3bkMsRUFBS3MxQixFQUFTcmtCLEVBQVdYLEdBQ2pDLE1BQU0zK0MsRUFBTyxDQUFFMitDLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEVBQU1BLEdBQzdDRCxFQUFVNzNDLElBQUs3RyxFQUFNNGpFLEVBQWdCdGtCLEVBQVdYLEdBSWpELE1BQU1tSSxFQUFTLElBQUl0TyxHQUNuQnNPLEVBQU96eUMsYUFBYyxXQUFZLElBQUltaUMsR0FBaUJ4YyxFQUFVMHBDLElBQ2hFNWMsRUFBT3p5QyxhQUFjLEtBQU0sSUFBSW1pQyxHQUFpQnRwQixFQUFJeTJDLElBQ3BEN2MsRUFBT3p5QyxhQUFjLFlBQWEsSUFBSW1pQyxHQUFpQmtJLEVBQVdrbEIsSUFDbEVWLEVBQVV4bUUsS0FBTW9xRCxHQUVYdWMsRUE3bEJTLEdBK2xCYkEsSUFNRixNQUFPLENBQUVILFVBQUFBLEVBQVdELFNBQUFBLEVBQVVFLE9BQUFBLEdBNVd1RFcsQ0FBZS9DLElBRWxHN21FLEtBQUtrbkUsY0ErWFIsU0FBeUJnQyxFQUFROWtFLEVBQU9DLEdBRXZDLE1BQU13bEUsRUFBVSxJQUFJbDJELGFBbG5CRCxJQW1uQmJtMkQsRUFBVyxJQUFJanZDLEdBQVMsRUFBRyxFQUFHLEdBNEZwQyxPQTNGdUIsSUFBSThyQixHQUFnQixDQUUxQ3R3QyxLQUFNLHdCQUVOdXdDLFFBQVMsQ0FDUixFQXpuQmlCLEdBMG5CakIsbUJBQXNCLEVBQU14aUQsRUFDNUIsb0JBQXVCLEVBQU1DLEVBQzdCLGVBQWtCLEdBQUc2a0UsT0FHdEIxaUIsU0FBVSxDQUNULE9BQVUsQ0FBRXhuRCxNQUFPLE1BQ25CLFFBQVcsQ0FBRUEsTUFBTyxHQUNwQixRQUFXLENBQUVBLE1BQU82cUUsR0FDcEIsWUFBZSxDQUFFN3FFLE9BQU8sR0FDeEIsT0FBVSxDQUFFQSxNQUFPLEdBQ25CLE9BQVUsQ0FBRUEsTUFBTyxHQUNuQixTQUFZLENBQUVBLE1BQU84cUUsSUFHdEJqakIsYUE0SmdCLHlvQ0ExSmhCQyxlQUEwQixtaURBOEQxQnJSLFNBdm9maUIsRUF3b2ZqQlksV0FBVyxFQUNYQyxZQUFZLElBMWRVeXpCLENBQWdCbEQsRUFBU3ppRSxFQUFPQyxHQUl0RCxPQUFPb2pFLEVBSVJKLGlCQUFrQmgxQixHQUVqQixNQUFNMjNCLEVBQVUsSUFBSXBtQixHQUFNNWpELEtBQUsrbUUsV0FBWSxHQUFLMTBCLEdBQ2hEcnlDLEtBQUsybUUsVUFBVXNELFFBQVNELEVBQVM1RCxJQUlsQ3VCLGVBQWdCMWQsRUFBTzdlLEVBQU1DLEVBQUtvOEIsR0FFakMsTUFFTXlDLEVBQWEsSUFBSXRpQixHQUZYLEdBQ0csRUFDd0N4YyxFQUFNQyxHQUN2RDgrQixFQUFTLENBQUUsR0FBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQzVCQyxFQUFjLENBQUUsRUFBRyxFQUFHLEdBQUssR0FBSyxHQUFLLEdBQ3JDcGdCLEVBQVdocUQsS0FBSzJtRSxVQUVoQjBELEVBQW9CcmdCLEVBQVMrVCxVQUM3QnhULEVBQWNQLEVBQVNPLFlBQzdCUCxFQUFTc1QsY0FBZStJLElBRXhCcmMsRUFBU08sWUExcWVXLEVBMnFlcEJQLEVBQVMrVCxXQUFZLEVBRXJCLE1BQU11TSxFQUFxQixJQUFJcHVCLEdBQW1CLENBQ2pEN2xDLEtBQU0sbUJBQ05xL0IsS0FwdGVjLEVBcXRlZFksWUFBWSxFQUNaRCxXQUFXLElBR05rMEIsRUFBZ0IsSUFBSTNtQixHQUFNLElBQUltQixHQUFldWxCLEdBRW5ELElBQUlFLEdBQWdCLEVBQ3BCLE1BQU05NEIsRUFBYXVZLEVBQU12WSxXQUVwQkEsRUFFQ0EsRUFBV3hrQixVQUVmbzlDLEVBQW1CcmtFLE1BQU0rZCxLQUFNMHRCLEdBQy9CdVksRUFBTXZZLFdBQWEsS0FDbkI4NEIsR0FBZ0IsSUFNakJGLEVBQW1CcmtFLE1BQU0rZCxLQUFNcWlELElBQy9CbUUsR0FBZ0IsR0FJakIsSUFBTSxJQUFJMXBFLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUFPLENBRTlCLE1BQU0ycEUsRUFBTTNwRSxFQUFJLEVBRUgsSUFBUjJwRSxHQUVKUCxFQUFXNWhDLEdBQUczN0IsSUFBSyxFQUFHdzlELEVBQVFycEUsR0FBSyxHQUNuQ29wRSxFQUFXcG1DLE9BQVFzbUMsRUFBYXRwRSxHQUFLLEVBQUcsSUFFckIsSUFBUjJwRSxHQUVYUCxFQUFXNWhDLEdBQUczN0IsSUFBSyxFQUFHLEVBQUd3OUQsRUFBUXJwRSxJQUNqQ29wRSxFQUFXcG1DLE9BQVEsRUFBR3NtQyxFQUFhdHBFLEdBQUssS0FJeENvcEUsRUFBVzVoQyxHQUFHMzdCLElBQUssRUFBR3c5RCxFQUFRcnBFLEdBQUssR0FDbkNvcEUsRUFBV3BtQyxPQUFRLEVBQUcsRUFBR3NtQyxFQUFhdHBFLEtBSXZDLE1BQU11VyxFQUFPclgsS0FBSzhtRSxVQUVsQjZCLEdBQWNsQixFQUFvQmdELEVBQU1wekQsRUFBTXZXLEVBQUksRUFBSXVXLEVBQU8sRUFBR0EsRUFBTUEsR0FFdEUyeUMsRUFBU1UsZ0JBQWlCK2MsR0FFckIrQyxHQUVKeGdCLEVBQVNXLE9BQVE0ZixFQUFlTCxHQUlqQ2xnQixFQUFTVyxPQUFRVixFQUFPaWdCLEdBSXpCSyxFQUFjM3FDLFNBQVM5TSxVQUN2QnkzQyxFQUFjbDRCLFNBQVN2ZixVQUV2QmszQixFQUFTTyxZQUFjQSxFQUN2QlAsRUFBUytULFVBQVlzTSxFQUNyQnBnQixFQUFNdlksV0FBYUEsRUFJcEJrM0IsaUJBQWtCNXpDLEVBQVN5eUMsR0FFMUIsTUFBTXpkLEVBQVdocUQsS0FBSzJtRSxVQUVoQjliLEVBQWtCNzFCLEVBQVFoRSxVQUFZblIsR0FBeUJtVixFQUFRaEUsVUFBWWxSLEVBRXBGK3FDLEdBRTJCLE9BQTFCN3FELEtBQUttbkUsbUJBRVRubkUsS0FBS21uRSxpQkFBbUJpQixNQUl6QnBvRSxLQUFLbW5FLGlCQUFpQjNnQixTQUFTc1MsV0FBVzk1RCxPQUE0QyxJQUFsQ2cyQixFQUFRNUMsdUJBQXNDLEVBQUksR0FJdEUsT0FBM0JweUIsS0FBS29uRSxvQkFFVHBuRSxLQUFLb25FLGtCQUFvQmtCLE1BTTNCLE1BQU1qMkIsRUFBV3dZLEVBQWdCN3FELEtBQUttbkUsaUJBQW1Cbm5FLEtBQUtvbkUsa0JBQ3hEbGMsRUFBTyxJQUFJdEgsR0FBTTVqRCxLQUFLK21FLFdBQVksR0FBSzEwQixHQUU1QkEsRUFBU21VLFNBRVAsT0FBRXhuRCxNQUFRZzJCLEVBRTdCLE1BQU0zZCxFQUFPclgsS0FBSzhtRSxVQUVsQjZCLEdBQWNsQixFQUFvQixFQUFHLEVBQUcsRUFBSXB3RCxFQUFNLEVBQUlBLEdBRXREMnlDLEVBQVNVLGdCQUFpQitjLEdBQzFCemQsRUFBU1csT0FBUU8sRUFBTWtiLElBSXhCeUIsWUFBYUosR0FFWixNQUFNemQsRUFBV2hxRCxLQUFLMm1FLFVBQ2hCNUksRUFBWS9ULEVBQVMrVCxVQUMzQi9ULEVBQVMrVCxXQUFZLEVBRXJCLElBQU0sSUFBSWo5RCxFQUFJLEVBQUdBLEVBQUlkLEtBQUsrbUUsV0FBV2pvRSxPQUFRZ0MsSUFBTyxDQUVuRCxNQUFNeW1FLEVBQVExbkUsS0FBSzJsQixLQUFNeGxCLEtBQUtpbkUsUUFBU25tRSxHQUFNZCxLQUFLaW5FLFFBQVNubUUsR0FBTWQsS0FBS2luRSxRQUFTbm1FLEVBQUksR0FBTWQsS0FBS2luRSxRQUFTbm1FLEVBQUksSUFFckdncEUsRUFBV3JELElBQW1CM2xFLEVBQUksR0FBTTJsRSxHQUFnQjNuRSxRQUU5RGtCLEtBQUs0bkUsTUFBT0gsRUFBb0IzbUUsRUFBSSxFQUFHQSxFQUFHeW1FLEVBQU91QyxHQUlsRDlmLEVBQVMrVCxVQUFZQSxFQVd0QjZKLE1BQU9ILEVBQW9CaUQsRUFBT0MsRUFBUXBELEVBQU91QyxHQUVoRCxNQUFNYyxFQUF1QjVxRSxLQUFLNG1FLHNCQUVsQzVtRSxLQUFLNnFFLFVBQ0pwRCxFQUNBbUQsRUFDQUYsRUFDQUMsRUFDQXBELEVBQ0EsY0FDQXVDLEdBRUQ5cEUsS0FBSzZxRSxVQUNKRCxFQUNBbkQsRUFDQWtELEVBQ0FBLEVBQ0FwRCxFQUNBLGVBQ0F1QyxHQUlGZSxVQUFXQyxFQUFVQyxFQUFXTCxFQUFPQyxFQUFRSyxFQUFjcm5DLEVBQVdtbUMsR0FFdkUsTUFBTTlmLEVBQVdocUQsS0FBSzJtRSxVQUNoQnNFLEVBQWVqckUsS0FBS2tuRSxjQUVQLGdCQUFkdmpDLEdBQTZDLGlCQUFkQSxHQUVuQ2hoQyxRQUFRQyxNQUNQLDhEQUtGLE1BRU1zb0UsRUFBVyxJQUFJdG5CLEdBQU01akQsS0FBSyttRSxXQUFZNEQsR0FBVU0sR0FDaERFLEVBQWVGLEVBQWF6a0IsU0FFNUI0a0IsRUFBU3ByRSxLQUFLZ25FLFVBQVcwRCxHQUFVLEVBQ25DVyxFQUFrQnA5RCxTQUFVKzhELEdBQWlCbnJFLEtBQUtvSCxJQUFPLEVBQUlta0UsR0FBVyxFQUFJdnJFLEtBQUtvSCxHQUFLLEdBQ3RGcWtFLEVBQWNOLEVBQWVLLEVBQzdCajJDLEVBQVVubkIsU0FBVSs4RCxHQUFpQixFQUFJbnJFLEtBQUtxTCxNQVJ4QixFQVFxRG9nRSxHQTdjL0QsR0ErY2JsMkMsRUEvY2EsSUFpZGpCenlCLFFBQVF1aEIsS0FBTSxpQkFDYjhtRCxrREFDQTUxQywyQ0FJRixNQUFNeTBDLEVBQVUsR0FDaEIsSUFBSTBCLEVBQU0sRUFFVixJQUFNLElBQUl6cUUsRUFBSSxFQUFHQSxFQTFkQyxLQTBkbUJBLEVBQUksQ0FFeEMsTUFBTUgsRUFBSUcsRUFBSXdxRSxFQUNSRSxFQUFTM3JFLEtBQUs0ckUsS0FBTzlxRSxFQUFJQSxFQUFJLEdBQ25Da3BFLEVBQVFybkUsS0FBTWdwRSxHQUVILElBQU4xcUUsRUFFSnlxRSxHQUFPQyxFQUVJMXFFLEVBQUlzMEIsSUFFZm0yQyxHQUFPLEVBQUlDLEdBTWIsSUFBTSxJQUFJMXFFLEVBQUksRUFBR0EsRUFBSStvRSxFQUFRL3FFLE9BQVFnQyxJQUVwQytvRSxFQUFTL29FLEdBQU0rb0UsRUFBUy9vRSxHQUFNeXFFLEVBSS9CSixFQUF1QixPQUFFbnNFLE1BQVE4ckUsRUFBUzkxQyxRQUMxQ20yQyxFQUF3QixRQUFFbnNFLE1BQVFvMkIsRUFDbEMrMUMsRUFBd0IsUUFBRW5zRSxNQUFRNnFFLEVBQ2xDc0IsRUFBNEIsWUFBRW5zRSxNQUFzQixnQkFBZDJrQyxFQUVqQ21tQyxJQUVKcUIsRUFBeUIsU0FBRW5zRSxNQUFROHFFLEdBSXBDLE1BQU0sUUFBRWpELEdBQVk3bUUsS0FDcEJtckUsRUFBdUIsT0FBRW5zRSxNQUFRcXNFLEVBQ2pDRixFQUF1QixPQUFFbnNFLE1BQVE2bkUsRUFBVTZELEVBRTNDLE1BQU1nQixFQUFhMXJFLEtBQUtnbkUsVUFBVzJELEdBSW5DaEMsR0FBY29DLEVBSEosRUFBSVcsR0FBZWYsRUFBUzlELEVBNWdCeEIsRUE0Z0I0QzhELEVBQVM5RCxFQTVnQnJELEVBNGdCeUUsR0FDN0UsR0FBTTdtRSxLQUFLOG1FLFVBQVk0RSxHQUVGLEVBQUlBLEVBQVksRUFBSUEsR0FDbkQxaEIsRUFBU1UsZ0JBQWlCcWdCLEdBQzFCL2dCLEVBQVNXLE9BQVF1Z0IsRUFBVTlFLEtBd0Y3QixTQUFTMEMsR0FBcUIxa0UsRUFBT0MsRUFBUXdrRSxHQUU1QyxNQUFNcEIsRUFBcUIsSUFBSTd5QyxHQUFtQnh3QixFQUFPQyxFQUFRd2tFLEdBSWpFLE9BSEFwQixFQUFtQnp5QyxRQUFRaEUsUUFBVWpSLEVBQ3JDMG5ELEVBQW1CenlDLFFBQVEzZSxLQUFPLGVBQ2xDb3hELEVBQW1CMXlDLGFBQWMsRUFDMUIweUMsRUFJUixTQUFTa0IsR0FBY2xtRCxFQUFROWhCLEVBQUdFLEVBQUd1RCxFQUFPQyxHQUUzQ29lLEVBQU8zTyxTQUFTbkgsSUFBS2hNLEVBQUdFLEVBQUd1RCxFQUFPQyxHQUNsQ29lLEVBQU9xUyxRQUFRbm9CLElBQUtoTSxFQUFHRSxFQUFHdUQsRUFBT0MsR0F1R2xDLFNBQVNpa0UsS0FFUixPQUFPLElBQUkzaEIsR0FBZ0IsQ0FFMUJ0d0MsS0FBTSwwQkFFTm13QyxTQUFVLENBQ1QsT0FBVSxDQUFFeG5ELE1BQU8sT0FHcEI2bkQsYUF3RWdCLHlvQ0F0RWhCQyxlQUEwQix5WUFxQjFCclIsU0FscmZpQixFQW1yZmpCWSxXQUFXLEVBQ1hDLFlBQVksSUFNZCxTQUFTOHhCLEtBRVIsT0FBTyxJQUFJemhCLEdBQWdCLENBRTFCdHdDLEtBQU0sa0JBRU5td0MsU0FBVSxDQUNULE9BQVUsQ0FBRXhuRCxNQUFPLE1BQ25CLFdBQWMsQ0FBRUEsT0FBUyxJQUcxQjZuRCxhQThCZ0IseW9DQTVCaEJDLGVBQTBCLDBVQWtCMUJyUixTQXp0ZmlCLEVBMHRmakJZLFdBQVcsRUFDWEMsWUFBWSxJQW1FZCxTQUFTcTFCLEdBQWlCM2hCLEdBRXpCLElBQUk0aEIsRUFBYSxJQUFJMWMsUUFFakIyYyxFQUFpQixLQXFGckIsU0FBU3JHLEVBQWtCaGpELEdBRTFCLE1BQU13UyxFQUFVeFMsRUFBTUMsT0FFdEJ1UyxFQUFRMVMsb0JBQXFCLFVBQVdrakQsR0FFeEMsTUFBTXNHLEVBQVlGLEVBQVdoMUQsSUFBS29lLFFBRWZ4VixJQUFkc3NELElBRUpGLEVBQVd0MEQsT0FBUTBkLEdBQ25CODJDLEVBQVVoNUMsV0FtQlosTUFBTyxDQUNObGMsSUFsSEQsU0FBY29lLEdBRWIsR0FBS0EsR0FBV0EsRUFBUS9CLFVBQVksQ0FFbkMsTUFBTWpDLEVBQVVnRSxFQUFRaEUsUUFFbEIrNkMsRUEvdmZnQyxNQSt2ZmQvNkMsR0E5dmZjLE1BOHZma0NBLEVBQ2xFZzdDLEVBQWNoN0MsSUFBWW5SLEdBQXlCbVIsSUFBWWxSLEVBSXJFLEdBQUtpc0QsR0FBaUJDLEVBQVksQ0FFakMsR0FBS2gzQyxFQUFRNUMsd0JBQXNELElBQTdCNEMsRUFBUTNDLGlCQUE0QixDQUV6RTJDLEVBQVEzQyxrQkFBbUIsRUFFM0IsSUFBSW0zQixFQUFlb2lCLEVBQVdoMUQsSUFBS29lLEdBT25DLE9BTHdCLE9BQW5CNjJDLElBQTBCQSxFQUFpQixJQUFJbkYsR0FBZ0IxYyxJQUVwRVIsRUFBZXVpQixFQUFnQkYsRUFBZTlELG9CQUFxQi95QyxFQUFTdzBCLEdBQWlCcWlCLEVBQWUzRCxZQUFhbHpDLEVBQVN3MEIsR0FDbElvaUIsRUFBV2ovRCxJQUFLcW9CLEVBQVN3MEIsR0FFbEJBLEVBQWF4MEIsUUFJcEIsR0FBSzQyQyxFQUFXakosSUFBSzN0QyxHQUVwQixPQUFPNDJDLEVBQVdoMUQsSUFBS29lLEdBQVVBLFFBRTNCLENBRU4sTUFBTTdjLEVBQVE2YyxFQUFRN2MsTUFFdEIsR0FBTzR6RCxHQUFpQjV6RCxHQUFTQSxFQUFNOVQsT0FBUyxHQUFTMm5FLEdBQWE3ekQsR0ErQjNFLFNBQWdDQSxHQUUvQixJQUFJMmQsRUFBUSxFQUdaLElBQU0sSUFBSWgxQixFQUFJLEVBQUdBLEVBRkYsRUFFY0EsU0FFUjBlLElBQWZySCxFQUFPclgsSUFBb0JnMUIsSUFJakMsT0FSZSxJQVFSQSxFQTFDNEVtMkMsQ0FBdUI5ekQsR0FBWSxDQUV6RixPQUFuQjB6RCxJQUEwQkEsRUFBaUIsSUFBSW5GLEdBQWdCMWMsSUFFcEUsTUFBTVIsRUFBZXVpQixFQUFnQkYsRUFBZTlELG9CQUFxQi95QyxHQUFZNjJDLEVBQWUzRCxZQUFhbHpDLEdBS2pILE9BSkE0MkMsRUFBV2ovRCxJQUFLcW9CLEVBQVN3MEIsR0FFekJ4MEIsRUFBUTVhLGlCQUFrQixVQUFXb3JELEdBRTlCaGMsRUFBYXgwQixRQU1wQixPQUFPLE9BWVosT0FBT0EsR0FvRFBsQyxRQWZELFdBRUM4NEMsRUFBYSxJQUFJMWMsUUFFTyxPQUFuQjJjLElBRUpBLEVBQWUvNEMsVUFDZis0QyxFQUFpQixRQWFwQixTQUFTSyxHQUFpQnBkLEdBRXpCLE1BQU03SCxFQUFhLEdBRW5CLFNBQVNrbEIsRUFBYzkxRCxHQUV0QixRQUE0Qm1KLElBQXZCeW5DLEVBQVk1d0MsR0FFaEIsT0FBTzR3QyxFQUFZNXdDLEdBSXBCLElBQUlpb0QsRUFFSixPQUFTam9ELEdBRVIsSUFBSyxzQkFDSmlvRCxFQUFZeFAsRUFBR3FkLGFBQWMsd0JBQTJCcmQsRUFBR3FkLGFBQWMsNEJBQStCcmQsRUFBR3FkLGFBQWMsOEJBQ3pILE1BRUQsSUFBSyxpQ0FDSjdOLEVBQVl4UCxFQUFHcWQsYUFBYyxtQ0FBc0NyZCxFQUFHcWQsYUFBYyx1Q0FBMENyZCxFQUFHcWQsYUFBYyx5Q0FDL0ksTUFFRCxJQUFLLGdDQUNKN04sRUFBWXhQLEVBQUdxZCxhQUFjLGtDQUFxQ3JkLEVBQUdxZCxhQUFjLHNDQUF5Q3JkLEVBQUdxZCxhQUFjLHdDQUM3SSxNQUVELElBQUssaUNBQ0o3TixFQUFZeFAsRUFBR3FkLGFBQWMsbUNBQXNDcmQsRUFBR3FkLGFBQWMseUNBQ3BGLE1BRUQsUUFDQzdOLEVBQVl4UCxFQUFHcWQsYUFBYzkxRCxHQU0vQixPQUZBNHdDLEVBQVk1d0MsR0FBU2lvRCxFQUVkQSxFQUlSLE1BQU8sQ0FFTnFFLElBQUssU0FBV3RzRCxHQUVmLE9BQWdDLE9BQXpCODFELEVBQWM5MUQsSUFJdEJ1dUQsS0FBTSxTQUFXN1YsR0FFWEEsRUFBYUMsU0FFakJtZCxFQUFjLDJCQUlkQSxFQUFjLHVCQUNkQSxFQUFjLHFCQUNkQSxFQUFjLDBCQUNkQSxFQUFjLGlDQUNkQSxFQUFjLDRCQUNkQSxFQUFjLDBCQUNkQSxFQUFjLDJCQUNkQSxFQUFjLDJCQUlmQSxFQUFjLDRCQUNkQSxFQUFjLCtCQUNkQSxFQUFjLHlDQUlmdjFELElBQUssU0FBV1AsR0FFZixNQUFNaW9ELEVBQVk2TixFQUFjOTFELEdBUWhDLE9BTm1CLE9BQWRpb0QsR0FFSjM3RCxRQUFRdWhCLEtBQU0sd0JBQTBCN04sRUFBTyw2QkFJekNpb0QsSUFRVixTQUFTOE4sR0FBaUJ0ZCxFQUFJanZCLEVBQVlraUMsRUFBTXZELEdBRS9DLE1BQU0xdEIsRUFBYSxHQUNidTdCLEVBQXNCLElBQUluZCxRQUVoQyxTQUFTb2QsRUFBbUI5cEQsR0FFM0IsTUFBTW9kLEVBQVdwZCxFQUFNQyxPQUVDLE9BQW5CbWQsRUFBU2g1QixPQUViaTVCLEVBQVc4UCxPQUFRL1AsRUFBU2g1QixPQUk3QixJQUFNLE1BQU15UCxLQUFRdXBCLEVBQVNDLFdBRTVCQSxFQUFXOFAsT0FBUS9QLEVBQVNDLFdBQVl4cEIsSUFJekN1cEIsRUFBU3RkLG9CQUFxQixVQUFXZ3FELFVBRWxDeDdCLEVBQVlsUixFQUFTbVEsSUFFNUIsTUFBTXBwQixFQUFZMGxELEVBQW9CejFELElBQUtncEIsR0FFdENqWixJQUVKa1osRUFBVzhQLE9BQVFocEIsR0FDbkIwbEQsRUFBb0IvMEQsT0FBUXNvQixJQUk3QjQrQixFQUFjb0Qsd0JBQXlCaGlDLElBRUssSUFBdkNBLEVBQVNnaEMsa0NBRU5oaEMsRUFBU3VoQyxrQkFNakJZLEVBQUt3SyxPQUFPejdCLGFBZ0RiLFNBQVMwN0IsRUFBMEI1c0MsR0FFbEMsTUFBTWdnQixFQUFVLEdBRVY2c0IsRUFBZ0I3c0MsRUFBU2g1QixNQUN6QjhsRSxFQUFtQjlzQyxFQUFTQyxXQUFXQyxTQUM3QyxJQUFJM1AsRUFBVSxFQUVkLEdBQXVCLE9BQWxCczhDLEVBQXlCLENBRTdCLE1BQU0vcEQsRUFBUStwRCxFQUFjL3BELE1BQzVCeU4sRUFBVXM4QyxFQUFjdDhDLFFBRXhCLElBQU0sSUFBSXJ2QixFQUFJLEVBQUdXLEVBQUlpaEIsRUFBTTVqQixPQUFRZ0MsRUFBSVcsRUFBR1gsR0FBSyxFQUFJLENBRWxELE1BQU1sQyxFQUFJOGpCLEVBQU81aEIsRUFBSSxHQUNmakMsRUFBSTZqQixFQUFPNWhCLEVBQUksR0FDZlksRUFBSWdoQixFQUFPNWhCLEVBQUksR0FFckI4K0MsRUFBUXA5QyxLQUFNNUQsRUFBR0MsRUFBR0EsRUFBRzZDLEVBQUdBLEVBQUc5QyxRQUl4QixDQUVOLE1BQU04akIsRUFBUWdxRCxFQUFpQmhxRCxNQUMvQnlOLEVBQVV1OEMsRUFBaUJ2OEMsUUFFM0IsSUFBTSxJQUFJcnZCLEVBQUksRUFBR1csRUFBTWloQixFQUFNNWpCLE9BQVMsRUFBTSxFQUFHZ0MsRUFBSVcsRUFBR1gsR0FBSyxFQUFJLENBRTlELE1BQU1sQyxFQUFJa0MsRUFBSSxFQUNSakMsRUFBSWlDLEVBQUksRUFDUlksRUFBSVosRUFBSSxFQUVkOCtDLEVBQVFwOUMsS0FBTTVELEVBQUdDLEVBQUdBLEVBQUc2QyxFQUFHQSxFQUFHOUMsSUFNL0IsTUFBTStuQixFQUFZLElBQU11RSxFQUFrQjAwQixHQUFZaEMsR0FBd0JELElBQXlCaUMsRUFBUyxHQUNoSGo1QixFQUFVd0osUUFBVUEsRUFNcEIsTUFBTXc4QyxFQUFvQk4sRUFBb0J6MUQsSUFBS2dwQixHQUU5QytzQyxHQUFvQjlzQyxFQUFXOFAsT0FBUWc5QixHQUk1Q04sRUFBb0IxL0QsSUFBS2l6QixFQUFValosR0FrQ3BDLE1BQU8sQ0FFTi9QLElBcklELFNBQWNvb0IsRUFBUVksR0FFckIsT0FBbUMsSUFBOUJrUixFQUFZbFIsRUFBU21RLE1BRTFCblEsRUFBU3hsQixpQkFBa0IsVUFBV2t5RCxHQUV0Q3g3QixFQUFZbFIsRUFBU21RLEtBQU8sRUFFNUJneUIsRUFBS3dLLE9BQU96N0IsY0FOcUNsUixHQW9JakQ3SCxPQXhIRCxTQUFpQjZILEdBRWhCLE1BQU0yZ0MsRUFBcUIzZ0MsRUFBU0MsV0FJcEMsSUFBTSxNQUFNeHBCLEtBQVFrcUQsRUFFbkIxZ0MsRUFBVzlILE9BQVF3b0MsRUFBb0JscUQsR0FBUSxPQU1oRCxNQUFNa29DLEVBQWtCM2UsRUFBUzJlLGdCQUVqQyxJQUFNLE1BQU1sb0MsS0FBUWtvQyxFQUFrQixDQUVyQyxNQUFNNzdCLEVBQVE2N0IsRUFBaUJsb0MsR0FFL0IsSUFBTSxJQUFJdlYsRUFBSSxFQUFHVyxFQUFJaWhCLEVBQU01akIsT0FBUWdDLEVBQUlXLEVBQUdYLElBRXpDKytCLEVBQVc5SCxPQUFRclYsRUFBTzVoQixHQUFLLFNBb0dqQzhyRSxzQkFuQ0QsU0FBZ0NodEMsR0FFL0IsTUFBTWl0QyxFQUFtQlIsRUFBb0J6MUQsSUFBS2dwQixHQUVsRCxHQUFLaXRDLEVBQW1CLENBRXZCLE1BQU1KLEVBQWdCN3NDLEVBQVNoNUIsTUFFUixPQUFsQjZsRSxHQUlDSSxFQUFpQjE4QyxRQUFVczhDLEVBQWN0OEMsU0FFN0NxOEMsRUFBMEI1c0MsUUFRNUI0c0MsRUFBMEI1c0MsR0FJM0IsT0FBT3lzQyxFQUFvQnoxRCxJQUFLZ3BCLEtBZWxDLFNBQVNrdEMsR0FBNEJoZSxFQUFJN0gsRUFBWThhLEVBQU1oVCxHQUUxRCxNQUFNQyxFQUFXRCxFQUFhQyxTQUU5QixJQUFJZ1QsRUFRQW5yRCxFQUFNeTRDLEVBa0RWdHZELEtBQUtpaUUsUUF4REwsU0FBa0JqakUsR0FFakJnakUsRUFBT2hqRSxHQXVEUmdCLEtBQUs2K0MsU0FqREwsU0FBbUI3L0MsR0FFbEI2WCxFQUFPN1gsRUFBTTZYLEtBQ2J5NEMsRUFBa0J0d0QsRUFBTXN3RCxpQkErQ3pCdHZELEtBQUsycUQsT0EzQ0wsU0FBaUIzbEQsRUFBTzh3QixHQUV2Qmc1QixFQUFHaWUsYUFBYy9LLEVBQU1sc0MsRUFBT2pmLEVBQU03UixFQUFRc3FELEdBRTVDeVMsRUFBS2hxQyxPQUFRakMsRUFBT2tzQyxFQUFNLElBd0MzQmhpRSxLQUFLa2lFLGdCQXBDTCxTQUEwQmw5RCxFQUFPOHdCLEVBQU9xc0MsR0FFdkMsR0FBbUIsSUFBZEEsRUFBa0IsT0FFdkIsSUFBSTdELEVBQVc4RCxFQUVmLEdBQUtwVCxFQUVKc1AsRUFBWXhQLEVBQ1pzVCxFQUFhLDZCQU9iLEdBSEE5RCxFQUFZclgsRUFBV3J3QyxJQUFLLDBCQUM1QndyRCxFQUFhLDZCQUVNLE9BQWQ5RCxFQUdKLFlBREEzN0QsUUFBUUMsTUFBTyx5SUFPakIwN0QsRUFBVzhELEdBQWNKLEVBQU1sc0MsRUFBT2pmLEVBQU03UixFQUFRc3FELEVBQWlCNlMsR0FFckVKLEVBQUtocUMsT0FBUWpDLEVBQU9rc0MsRUFBTUcsSUFhNUIsU0FBUzZLLEdBQVdsZSxHQUVuQixNQUtNbkUsRUFBUyxDQUNkOEQsTUFBTyxFQUNQd2UsTUFBTyxFQUNQQyxVQUFXLEVBQ1h6dUMsT0FBUSxFQUNSMHVDLE1BQU8sR0ErQ1IsTUFBTyxDQUNOWixPQTFEYyxDQUNkejdCLFdBQVksRUFDWnBlLFNBQVUsR0F5RFZpNEIsT0FBUUEsRUFDUnlpQixTQUFVLEtBQ1ZDLFdBQVcsRUFDWDlnRSxNQWZELFdBRUNvK0MsRUFBTzhELFFBQ1A5RCxFQUFPc2lCLE1BQVEsRUFDZnRpQixFQUFPdWlCLFVBQVksRUFDbkJ2aUIsRUFBT2xzQixPQUFTLEVBQ2hCa3NCLEVBQU93aUIsTUFBUSxHQVVmcDFDLE9BbERELFNBQWlCakMsRUFBT2tzQyxFQUFNc0wsR0FJN0IsT0FGQTNpQixFQUFPc2lCLFFBRUVqTCxHQUVSLEtBQUssRUFDSnJYLEVBQU91aUIsV0FBYUksR0FBa0J4M0MsRUFBUSxHQUM5QyxNQUVELEtBQUssRUFDSjYwQixFQUFPd2lCLE9BQVNHLEdBQWtCeDNDLEVBQVEsR0FDMUMsTUFFRCxLQUFLLEVBQ0o2MEIsRUFBT3dpQixPQUFTRyxHQUFrQngzQyxFQUFRLEdBQzFDLE1BRUQsS0FBSyxFQUNKNjBCLEVBQU93aUIsT0FBU0csRUFBZ0J4M0MsRUFDaEMsTUFFRCxLQUFLLEVBQ0o2MEIsRUFBT2xzQixRQUFVNnVDLEVBQWdCeDNDLEVBQ2pDLE1BRUQsUUFDQ256QixRQUFRQyxNQUFPLHNDQUF1Q28vRCxNQTRCMUQsU0FBU3VMLEdBQWUzdUUsRUFBR0MsR0FFMUIsT0FBT0QsRUFBRyxHQUFNQyxFQUFHLEdBSXBCLFNBQVMydUUsR0FBa0I1dUUsRUFBR0MsR0FFN0IsT0FBT2dCLEtBQUsyUixJQUFLM1MsRUFBRyxJQUFRZ0IsS0FBSzJSLElBQUs1UyxFQUFHLElBSTFDLFNBQVM2dUUsR0FBYUMsRUFBTy9tRCxHQUU1QixJQUFJaVcsRUFBYyxFQUNsQixNQUFNbGEsRUFBUWlFLEVBQVV5N0IsNkJBQStCejdCLEVBQVUzTyxLQUFLMEssTUFBUWlFLEVBQVVqRSxNQUVuRkEsYUFBaUI2SSxVQUFZcVIsRUFBYyxJQUN0Q2xhLGFBQWlCK0ksV0FBYW1SLEVBQWMsTUFDNUNsYSxhQUFpQmlKLFdBQWFpUixFQUFjLFdBQ2pEajZCLFFBQVFDLE1BQU8sbUVBQW9FOGYsR0FFeEZnckQsRUFBTTlvRCxhQUFjZ1ksR0FJckIsU0FBUyt3QyxHQUFtQjdlLEVBQUlDLEVBQWNyOEIsR0FFN0MsTUFBTWs3QyxFQUFpQixHQUNqQmpwQixFQUFrQixJQUFJaHhDLGFBQWMsR0FDcENrNkQsRUFBZ0IsSUFBSTNlLFFBQ3BCd2UsRUFBUSxJQUFJeDZDLEdBRVo0NkMsRUFBaUIsR0FFdkIsSUFBTSxJQUFJaHRFLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2Qmd0RSxFQUFnQmh0RSxHQUFNLENBQUVBLEVBQUcsR0E0UTVCLE1BQU8sQ0FFTmkzQixPQTFRRCxTQUFpQmlILEVBQVFZLEVBQVV5UyxFQUFVa3RCLEdBRTVDLE1BQU13TyxFQUFtQi91QyxFQUFPOGtCLHNCQUVoQyxJQUErQixJQUExQmlMLEVBQWFDLFNBQW9CLENBS3JDLE1BQU12UCxFQUFpQjdmLEVBQVMyZSxnQkFBZ0J6ZSxVQUFZRixFQUFTMmUsZ0JBQWdCdGhCLFFBQVUyQyxFQUFTMmUsZ0JBQWdCdDRDLE1BQ2xIK25FLE9BQXlDeHVELElBQW5CaWdDLEVBQWlDQSxFQUFlM2dELE9BQVMsRUFFckYsSUFBSW12RSxFQUFRSixFQUFjajNELElBQUtncEIsR0FFL0IsUUFBZXBnQixJQUFWeXVELEdBQXVCQSxFQUFNbjRDLFFBQVVrNEMsRUFBb0IsTUFFaER4dUQsSUFBVnl1RCxHQUFzQkEsRUFBTWo1QyxRQUFRbEMsVUFFekMsTUFBTW83QyxPQUF5RDF1RCxJQUF0Q29nQixFQUFTMmUsZ0JBQWdCemUsU0FDNUNxdUMsT0FBc0QzdUQsSUFBcENvZ0IsRUFBUzJlLGdCQUFnQnRoQixPQUMzQ214QyxPQUFvRDV1RCxJQUFuQ29nQixFQUFTMmUsZ0JBQWdCdDRDLE1BRTFDZytDLEVBQWVya0IsRUFBUzJlLGdCQUFnQnplLFVBQVksR0FDcER1dUMsRUFBZXp1QyxFQUFTMmUsZ0JBQWdCdGhCLFFBQVUsR0FDbERxeEMsRUFBYzF1QyxFQUFTMmUsZ0JBQWdCdDRDLE9BQVMsR0FFdEQsSUFBSXNvRSxFQUFrQixHQUVJLElBQXJCTCxJQUE0QkssRUFBa0IsSUFDMUIsSUFBcEJKLElBQTJCSSxFQUFrQixJQUMxQixJQUFuQkgsSUFBMEJHLEVBQWtCLEdBRWpELElBQUlucUUsRUFBUXc3QixFQUFTQyxXQUFXQyxTQUFTaEssTUFBUXk0QyxFQUM3Q2xxRSxFQUFTLEVBRVJELEVBQVEycUQsRUFBYWdVLGlCQUV6QjErRCxFQUFTeEUsS0FBSzZNLEtBQU10SSxFQUFRMnFELEVBQWFnVSxnQkFDekMzK0QsRUFBUTJxRCxFQUFhZ1UsZ0JBSXRCLE1BQU01MkQsRUFBUyxJQUFJd0gsYUFBY3ZQLEVBQVFDLEVBQVMsRUFBSTJwRSxHQUVoRGg1QyxFQUFVLElBQUlPLEdBQWtCcHBCLEVBQVEvSCxFQUFPQyxFQUFRMnBFLEdBQzdEaDVDLEVBQVFuZSxLQUFPNEosRUFDZnVVLEVBQVE1RSxhQUFjLEVBSXRCLE1BQU1vK0MsRUFBcUMsRUFBbEJELEVBRXpCLElBQU0sSUFBSXp0RSxFQUFJLEVBQUdBLEVBQUlrdEUsRUFBbUJsdEUsSUFBTyxDQUU5QyxNQUFNMnRFLEVBQWN4cUIsRUFBY25qRCxHQUM1QjR0RSxFQUFjTCxFQUFjdnRFLEdBQzVCNnRFLEVBQWFMLEVBQWF4dEUsR0FFMUIwbEIsRUFBU3BpQixFQUFRQyxFQUFTLEVBQUl2RCxFQUVwQyxJQUFNLElBQUlFLEVBQUksRUFBR0EsRUFBSXl0RSxFQUFZMzRDLE1BQU85MEIsSUFBTyxDQUU5QyxNQUFNcWhELEVBQVNyaEQsRUFBSXd0RSxHQUVPLElBQXJCTixJQUVKUixFQUFNaG5ELG9CQUFxQituRCxFQUFhenRFLElBRVIsSUFBM0J5dEUsRUFBWXQvQyxZQUFzQnMrQyxHQUFhQyxFQUFPZSxHQUUzRHRpRSxFQUFRcWEsRUFBUzY3QixFQUFTLEdBQU1xckIsRUFBTS9zRSxFQUN0Q3dMLEVBQVFxYSxFQUFTNjdCLEVBQVMsR0FBTXFyQixFQUFNN3NFLEVBQ3RDc0wsRUFBUXFhLEVBQVM2N0IsRUFBUyxHQUFNcXJCLEVBQU14c0UsRUFDdENpTCxFQUFRcWEsRUFBUzY3QixFQUFTLEdBQU0sSUFJUixJQUFwQjhyQixJQUVKVCxFQUFNaG5ELG9CQUFxQmdvRCxFQUFhMXRFLElBRVIsSUFBM0IwdEUsRUFBWXYvQyxZQUFzQnMrQyxHQUFhQyxFQUFPZ0IsR0FFM0R2aUUsRUFBUXFhLEVBQVM2N0IsRUFBUyxHQUFNcXJCLEVBQU0vc0UsRUFDdEN3TCxFQUFRcWEsRUFBUzY3QixFQUFTLEdBQU1xckIsRUFBTTdzRSxFQUN0Q3NMLEVBQVFxYSxFQUFTNjdCLEVBQVMsR0FBTXFyQixFQUFNeHNFLEVBQ3RDaUwsRUFBUXFhLEVBQVM2N0IsRUFBUyxHQUFNLElBSVQsSUFBbkIrckIsSUFFSlYsRUFBTWhuRCxvQkFBcUJpb0QsRUFBWTN0RSxJQUVSLElBQTFCMnRFLEVBQVd4L0MsWUFBc0JzK0MsR0FBYUMsRUFBT2lCLEdBRTFEeGlFLEVBQVFxYSxFQUFTNjdCLEVBQVMsR0FBTXFyQixFQUFNL3NFLEVBQ3RDd0wsRUFBUXFhLEVBQVM2N0IsRUFBUyxHQUFNcXJCLEVBQU03c0UsRUFDdENzTCxFQUFRcWEsRUFBUzY3QixFQUFTLElBQU9xckIsRUFBTXhzRSxFQUN2Q2lMLEVBQVFxYSxFQUFTNjdCLEVBQVMsSUFBaUMsSUFBeEJzc0IsRUFBV3B5QixTQUFtQm14QixFQUFNbnRFLEVBQUksSUFnQjlFLFNBQVNxdUUsSUFFUjU1QyxFQUFRbEMsVUFFUis2QyxFQUFjdjJELE9BQVFzb0IsR0FFdEJBLEVBQVN0ZCxvQkFBcUIsVUFBV3NzRCxHQWQxQ1gsRUFBUSxDQUNQbjRDLE1BQU9rNEMsRUFDUGg1QyxRQUFTQSxFQUNUM2QsS0FBTSxJQUFJbU0sRUFBU3BmLEVBQU9DLElBRzNCd3BFLEVBQWNsaEUsSUFBS2l6QixFQUFVcXVDLEdBWTdCcnVDLEVBQVN4bEIsaUJBQWtCLFVBQVd3MEQsR0FNdkMsSUFBSUMsRUFBcUIsRUFFekIsSUFBTSxJQUFJL3RFLEVBQUksRUFBR0EsRUFBSWl0RSxFQUFpQmp2RSxPQUFRZ0MsSUFFN0MrdEUsR0FBc0JkLEVBQWtCanRFLEdBSXpDLE1BQU1ndUUsRUFBcUJsdkMsRUFBUzRlLHFCQUF1QixFQUFJLEVBQUlxd0IsRUFFbkV0UCxFQUFRd1AsY0FBY0MsU0FBVWxnQixFQUFJLDJCQUE0QmdnQixHQUNoRXZQLEVBQVF3UCxjQUFjQyxTQUFVbGdCLEVBQUksd0JBQXlCaWYsR0FFN0R4TyxFQUFRd1AsY0FBY0MsU0FBVWxnQixFQUFJLHNCQUF1Qm1mLEVBQU1qNUMsUUFBU3RDLEdBQzFFNnNDLEVBQVF3UCxjQUFjQyxTQUFVbGdCLEVBQUksMEJBQTJCbWYsRUFBTTUyRCxVQUcvRCxDQUtOLE1BQU12WSxPQUE4QjBnQixJQUFyQnV1RCxFQUFpQyxFQUFJQSxFQUFpQmp2RSxPQUVyRSxJQUFJbXdFLEVBQWFyQixFQUFnQmh1QyxFQUFTbVEsSUFFMUMsUUFBb0J2d0IsSUFBZnl2RCxHQUE0QkEsRUFBV253RSxTQUFXQSxFQUFTLENBSS9EbXdFLEVBQWEsR0FFYixJQUFNLElBQUludUUsRUFBSSxFQUFHQSxFQUFJaEMsRUFBUWdDLElBRTVCbXVFLEVBQVludUUsR0FBTSxDQUFFQSxFQUFHLEdBSXhCOHNFLEVBQWdCaHVDLEVBQVNtUSxJQUFPay9CLEVBTWpDLElBQU0sSUFBSW51RSxFQUFJLEVBQUdBLEVBQUloQyxFQUFRZ0MsSUFBTyxDQUVuQyxNQUFNOGpELEVBQVlxcUIsRUFBWW51RSxHQUU5QjhqRCxFQUFXLEdBQU05akQsRUFDakI4akQsRUFBVyxHQUFNbXBCLEVBQWtCanRFLEdBSXBDbXVFLEVBQVdDLEtBQU0xQixJQUVqQixJQUFNLElBQUkxc0UsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRWxCQSxFQUFJaEMsR0FBVW13RSxFQUFZbnVFLEdBQUssSUFFbkNndEUsRUFBZ0JodEUsR0FBSyxHQUFNbXVFLEVBQVludUUsR0FBSyxHQUM1Q2d0RSxFQUFnQmh0RSxHQUFLLEdBQU1tdUUsRUFBWW51RSxHQUFLLEtBSTVDZ3RFLEVBQWdCaHRFLEdBQUssR0FBTWtGLE9BQU9tcEUsaUJBQ2xDckIsRUFBZ0JodEUsR0FBSyxHQUFNLEdBTTdCZ3RFLEVBQWVvQixLQUFNM0IsSUFFckIsTUFBTXRwQixFQUFlcmtCLEVBQVMyZSxnQkFBZ0J6ZSxTQUN4Q3V1QyxFQUFlenVDLEVBQVMyZSxnQkFBZ0J0aEIsT0FFOUMsSUFBSTR4QyxFQUFxQixFQUV6QixJQUFNLElBQUkvdEUsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQU8sQ0FFOUIsTUFBTThqRCxFQUFZa3BCLEVBQWdCaHRFLEdBQzVCOEYsRUFBUWcrQyxFQUFXLEdBQ25CNWxELEdBQVE0bEQsRUFBVyxHQUVwQmgrQyxJQUFVWixPQUFPbXBFLGtCQUFvQm53RSxJQUVwQ2lsRCxHQUFnQnJrQixFQUFTa2YsYUFBYyxjQUFnQmgrQyxLQUFRbWpELEVBQWNyOUMsSUFFakZnNUIsRUFBU3psQixhQUFjLGNBQWdCclosRUFBR21qRCxFQUFjcjlDLElBSXBEeW5FLEdBQWdCenVDLEVBQVNrZixhQUFjLGNBQWdCaCtDLEtBQVF1dEUsRUFBY3puRSxJQUVqRmc1QixFQUFTemxCLGFBQWMsY0FBZ0JyWixFQUFHdXRFLEVBQWN6bkUsSUFJekQrOUMsRUFBaUI3akQsR0FBTTlCLEdBQ3ZCNnZFLEdBQXNCN3ZFLEtBSWpCaWxELElBQStELElBQS9DcmtCLEVBQVNvZixhQUFjLGNBQWdCbCtDLElBRTNEOCtCLEVBQVNtZixnQkFBaUIsY0FBZ0JqK0MsR0FJdEN1dEUsSUFBK0QsSUFBL0N6dUMsRUFBU29mLGFBQWMsY0FBZ0JsK0MsSUFFM0Q4K0IsRUFBU21mLGdCQUFpQixjQUFnQmorQyxHQUkzQzZqRCxFQUFpQjdqRCxHQUFNLEdBU3pCLE1BQU1ndUUsRUFBcUJsdkMsRUFBUzRlLHFCQUF1QixFQUFJLEVBQUlxd0IsRUFFbkV0UCxFQUFRd1AsY0FBY0MsU0FBVWxnQixFQUFJLDJCQUE0QmdnQixHQUNoRXZQLEVBQVF3UCxjQUFjQyxTQUFVbGdCLEVBQUksd0JBQXlCbkssTUFjaEUsU0FBU3lxQixHQUFjdGdCLEVBQUloZSxFQUFZalIsRUFBWWtpQyxHQUVsRCxJQUFJc04sRUFBWSxJQUFJbmdCLFFBK0NwQixTQUFTb2dCLEVBQXdCOXNELEdBRWhDLE1BQU0rc0QsRUFBZ0Ivc0QsRUFBTUMsT0FFNUI4c0QsRUFBY2p0RCxvQkFBcUIsVUFBV2d0RCxHQUU5Q3p2QyxFQUFXOFAsT0FBUTQvQixFQUFjaCtCLGdCQUVJLE9BQWhDZytCLEVBQWMvOUIsZUFBeUIzUixFQUFXOFAsT0FBUTQvQixFQUFjLzlCLGVBSTlFLE1BQU8sQ0FFTnpaLE9BM0RELFNBQWlCaUgsR0FFaEIsTUFBTXl2QixFQUFRc1QsRUFBS3BYLE9BQU84RCxNQUVwQjd1QixFQUFXWixFQUFPWSxTQUNsQjR2QyxFQUFpQjErQixFQUFXbDZCLElBQUtvb0IsRUFBUVksR0E4Qi9DLE9BMUJLeXZDLEVBQVV6NEQsSUFBSzQ0RCxLQUFxQi9nQixJQUV4QzNkLEVBQVcvWSxPQUFReTNDLEdBRW5CSCxFQUFVMWlFLElBQUs2aUUsRUFBZ0IvZ0IsSUFJM0J6dkIsRUFBT3NTLG1CQUUyRCxJQUFqRXRTLEVBQU8zYyxpQkFBa0IsVUFBV2l0RCxJQUV4Q3R3QyxFQUFPNWtCLGlCQUFrQixVQUFXazFELEdBSXJDenZDLEVBQVc5SCxPQUFRaUgsRUFBT3VTLGVBQWdCLE9BRVosT0FBekJ2UyxFQUFPd1MsZUFFWDNSLEVBQVc5SCxPQUFRaUgsRUFBT3dTLGNBQWUsUUFNcENnK0IsR0F5QlAxOEMsUUFyQkQsV0FFQ3U4QyxFQUFZLElBQUluZ0IsVUFvRWxCLE1BQU11Z0IsR0FBZSxJQUFJMytDLEdBQ25CNCtDLEdBQW9CLElBQUluNkMsR0FDeEJvNkMsR0FBaUIsSUFBSWg2QyxHQUNyQmk2QyxHQUFtQixJQUFJaGxCLEdBTXZCaWxCLEdBQWdCLEdBQ2hCQyxHQUFnQixHQUloQkMsR0FBWSxJQUFJcDhELGFBQWMsSUFDOUJxOEQsR0FBWSxJQUFJcjhELGFBQWMsR0FDOUJzOEQsR0FBWSxJQUFJdDhELGFBQWMsR0FJcEMsU0FBU3U4RCxHQUFTeHRELEVBQU95dEQsRUFBU0MsR0FFakMsTUFBTUMsRUFBWTN0RCxFQUFPLEdBRXpCLEdBQUsydEQsR0FBYSxHQUFLQSxFQUFZLEVBQUksT0FBTzN0RCxFQUk5QyxNQUFNL2pCLEVBQUl3eEUsRUFBVUMsRUFDcEIsSUFBSTVzRSxFQUFJcXNFLEdBQWVseEUsR0FTdkIsUUFQVzZnQixJQUFOaGMsSUFFSkEsRUFBSSxJQUFJbVEsYUFBY2hWLEdBQ3RCa3hFLEdBQWVseEUsR0FBTTZFLEdBSUwsSUFBWjJzRSxFQUFnQixDQUVwQkUsRUFBVTVwRCxRQUFTampCLEVBQUcsR0FFdEIsSUFBTSxJQUFJMUMsRUFBSSxFQUFHMGxCLEVBQVMsRUFBRzFsQixJQUFNcXZFLElBQVlydkUsRUFFOUMwbEIsR0FBVTRwRCxFQUNWMXRELEVBQU81aEIsR0FBSTJsQixRQUFTampCLEVBQUdnakIsR0FNekIsT0FBT2hqQixFQUlSLFNBQVM4c0UsR0FBYTF4RSxFQUFHQyxHQUV4QixHQUFLRCxFQUFFRSxTQUFXRCxFQUFFQyxPQUFTLE9BQU8sRUFFcEMsSUFBTSxJQUFJZ0MsRUFBSSxFQUFHVyxFQUFJN0MsRUFBRUUsT0FBUWdDLEVBQUlXLEVBQUdYLElBRXJDLEdBQUtsQyxFQUFHa0MsS0FBUWpDLEVBQUdpQyxHQUFNLE9BQU8sRUFJakMsT0FBTyxFQUlSLFNBQVNpOEMsR0FBV24rQyxFQUFHQyxHQUV0QixJQUFNLElBQUlpQyxFQUFJLEVBQUdXLEVBQUk1QyxFQUFFQyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFckNsQyxFQUFHa0MsR0FBTWpDLEVBQUdpQyxHQVFkLFNBQVN5dkUsR0FBZTc5QyxFQUFVL3pCLEdBRWpDLElBQUk2RSxFQUFJc3NFLEdBQWVueEUsUUFFWjZnQixJQUFOaGMsSUFFSkEsRUFBSSxJQUFJbW9CLFdBQVlodEIsR0FDcEJteEUsR0FBZW54RSxHQUFNNkUsR0FJdEIsSUFBTSxJQUFJMUMsRUFBSSxFQUFHQSxJQUFNbkMsSUFBTW1DLEVBRTVCMEMsRUFBRzFDLEdBQU00eEIsRUFBUzg5QyxzQkFJbkIsT0FBT2h0RSxFQVdSLFNBQVNpdEUsR0FBYTNoQixFQUFJN3VELEdBRXpCLE1BQU13eUMsRUFBUXp5QyxLQUFLeXlDLE1BRWRBLEVBQU8sS0FBUXh5QyxJQUVwQjZ1RCxFQUFHNGhCLFVBQVcxd0UsS0FBSzJ3RSxLQUFNMXdFLEdBRXpCd3lDLEVBQU8sR0FBTXh5QyxHQU1kLFNBQVMyd0UsR0FBYTloQixFQUFJN3VELEdBRXpCLE1BQU13eUMsRUFBUXp5QyxLQUFLeXlDLE1BRW5CLFFBQWFqekIsSUFBUnZmLEVBQUVVLEVBRUQ4eEMsRUFBTyxLQUFReHlDLEVBQUVVLEdBQUs4eEMsRUFBTyxLQUFReHlDLEVBQUVZLElBRTNDaXVELEVBQUcraEIsVUFBVzd3RSxLQUFLMndFLEtBQU0xd0UsRUFBRVUsRUFBR1YsRUFBRVksR0FFaEM0eEMsRUFBTyxHQUFNeHlDLEVBQUVVLEVBQ2Y4eEMsRUFBTyxHQUFNeHlDLEVBQUVZLE9BSVYsQ0FFTixHQUFLeXZFLEdBQWE3OUIsRUFBT3h5QyxHQUFNLE9BRS9CNnVELEVBQUdnaUIsV0FBWTl3RSxLQUFLMndFLEtBQU0xd0UsR0FFMUI4OEMsR0FBV3RLLEVBQU94eUMsSUFNcEIsU0FBUzh3RSxHQUFhamlCLEVBQUk3dUQsR0FFekIsTUFBTXd5QyxFQUFRenlDLEtBQUt5eUMsTUFFbkIsUUFBYWp6QixJQUFSdmYsRUFBRVUsRUFFRDh4QyxFQUFPLEtBQVF4eUMsRUFBRVUsR0FBSzh4QyxFQUFPLEtBQVF4eUMsRUFBRVksR0FBSzR4QyxFQUFPLEtBQVF4eUMsRUFBRWlCLElBRWpFNHRELEVBQUdraUIsVUFBV2h4RSxLQUFLMndFLEtBQU0xd0UsRUFBRVUsRUFBR1YsRUFBRVksRUFBR1osRUFBRWlCLEdBRXJDdXhDLEVBQU8sR0FBTXh5QyxFQUFFVSxFQUNmOHhDLEVBQU8sR0FBTXh5QyxFQUFFWSxFQUNmNHhDLEVBQU8sR0FBTXh5QyxFQUFFaUIsUUFJVixRQUFhc2UsSUFBUnZmLEVBQUV1RCxFQUVSaXZDLEVBQU8sS0FBUXh5QyxFQUFFdUQsR0FBS2l2QyxFQUFPLEtBQVF4eUMsRUFBRUwsR0FBSzZ5QyxFQUFPLEtBQVF4eUMsRUFBRXBCLElBRWpFaXdELEVBQUdraUIsVUFBV2h4RSxLQUFLMndFLEtBQU0xd0UsRUFBRXVELEVBQUd2RCxFQUFFTCxFQUFHSyxFQUFFcEIsR0FFckM0ekMsRUFBTyxHQUFNeHlDLEVBQUV1RCxFQUNmaXZDLEVBQU8sR0FBTXh5QyxFQUFFTCxFQUNmNnlDLEVBQU8sR0FBTXh5QyxFQUFFcEIsT0FJVixDQUVOLEdBQUt5eEUsR0FBYTc5QixFQUFPeHlDLEdBQU0sT0FFL0I2dUQsRUFBR21pQixXQUFZanhFLEtBQUsyd0UsS0FBTTF3RSxHQUUxQjg4QyxHQUFXdEssRUFBT3h5QyxJQU1wQixTQUFTaXhFLEdBQWFwaUIsRUFBSTd1RCxHQUV6QixNQUFNd3lDLEVBQVF6eUMsS0FBS3l5QyxNQUVuQixRQUFhanpCLElBQVJ2ZixFQUFFVSxFQUVEOHhDLEVBQU8sS0FBUXh5QyxFQUFFVSxHQUFLOHhDLEVBQU8sS0FBUXh5QyxFQUFFWSxHQUFLNHhDLEVBQU8sS0FBUXh5QyxFQUFFaUIsR0FBS3V4QyxFQUFPLEtBQVF4eUMsRUFBRU0sSUFFdkZ1dUQsRUFBR3FpQixVQUFXbnhFLEtBQUsyd0UsS0FBTTF3RSxFQUFFVSxFQUFHVixFQUFFWSxFQUFHWixFQUFFaUIsRUFBR2pCLEVBQUVNLEdBRTFDa3lDLEVBQU8sR0FBTXh5QyxFQUFFVSxFQUNmOHhDLEVBQU8sR0FBTXh5QyxFQUFFWSxFQUNmNHhDLEVBQU8sR0FBTXh5QyxFQUFFaUIsRUFDZnV4QyxFQUFPLEdBQU14eUMsRUFBRU0sT0FJVixDQUVOLEdBQUsrdkUsR0FBYTc5QixFQUFPeHlDLEdBQU0sT0FFL0I2dUQsRUFBR3NpQixXQUFZcHhFLEtBQUsyd0UsS0FBTTF3RSxHQUUxQjg4QyxHQUFXdEssRUFBT3h5QyxJQVFwQixTQUFTb3hFLEdBQVl2aUIsRUFBSTd1RCxHQUV4QixNQUFNd3lDLEVBQVF6eUMsS0FBS3l5QyxNQUNiM3RCLEVBQVc3a0IsRUFBRTZrQixTQUVuQixRQUFrQnRGLElBQWJzRixFQUF5QixDQUU3QixHQUFLd3JELEdBQWE3OUIsRUFBT3h5QyxHQUFNLE9BRS9CNnVELEVBQUd3aUIsaUJBQWtCdHhFLEtBQUsyd0UsTUFBTSxFQUFPMXdFLEdBRXZDODhDLEdBQVd0SyxFQUFPeHlDLE9BRVosQ0FFTixHQUFLcXdFLEdBQWE3OUIsRUFBTzN0QixHQUFhLE9BRXRDbXJELEdBQVV0akUsSUFBS21ZLEdBRWZncUMsRUFBR3dpQixpQkFBa0J0eEUsS0FBSzJ3RSxNQUFNLEVBQU9WLElBRXZDbHpCLEdBQVd0SyxFQUFPM3RCLElBTXBCLFNBQVN5c0QsR0FBWXppQixFQUFJN3VELEdBRXhCLE1BQU13eUMsRUFBUXp5QyxLQUFLeXlDLE1BQ2IzdEIsRUFBVzdrQixFQUFFNmtCLFNBRW5CLFFBQWtCdEYsSUFBYnNGLEVBQXlCLENBRTdCLEdBQUt3ckQsR0FBYTc5QixFQUFPeHlDLEdBQU0sT0FFL0I2dUQsRUFBRzBpQixpQkFBa0J4eEUsS0FBSzJ3RSxNQUFNLEVBQU8xd0UsR0FFdkM4OEMsR0FBV3RLLEVBQU94eUMsT0FFWixDQUVOLEdBQUtxd0UsR0FBYTc5QixFQUFPM3RCLEdBQWEsT0FFdENrckQsR0FBVXJqRSxJQUFLbVksR0FFZmdxQyxFQUFHMGlCLGlCQUFrQnh4RSxLQUFLMndFLE1BQU0sRUFBT1gsSUFFdkNqekIsR0FBV3RLLEVBQU8zdEIsSUFNcEIsU0FBUzJzRCxHQUFZM2lCLEVBQUk3dUQsR0FFeEIsTUFBTXd5QyxFQUFRenlDLEtBQUt5eUMsTUFDYjN0QixFQUFXN2tCLEVBQUU2a0IsU0FFbkIsUUFBa0J0RixJQUFic0YsRUFBeUIsQ0FFN0IsR0FBS3dyRCxHQUFhNzlCLEVBQU94eUMsR0FBTSxPQUUvQjZ1RCxFQUFHNGlCLGlCQUFrQjF4RSxLQUFLMndFLE1BQU0sRUFBTzF3RSxHQUV2Qzg4QyxHQUFXdEssRUFBT3h5QyxPQUVaLENBRU4sR0FBS3F3RSxHQUFhNzlCLEVBQU8zdEIsR0FBYSxPQUV0Q2lyRCxHQUFVcGpFLElBQUttWSxHQUVmZ3FDLEVBQUc0aUIsaUJBQWtCMXhFLEtBQUsyd0UsTUFBTSxFQUFPWixJQUV2Q2h6QixHQUFXdEssRUFBTzN0QixJQVFwQixTQUFTNnNELEdBQWE3aUIsRUFBSTd1RCxHQUV6QixNQUFNd3lDLEVBQVF6eUMsS0FBS3l5QyxNQUVkQSxFQUFPLEtBQVF4eUMsSUFFcEI2dUQsRUFBR2o3QyxVQUFXN1QsS0FBSzJ3RSxLQUFNMXdFLEdBRXpCd3lDLEVBQU8sR0FBTXh5QyxHQU1kLFNBQVMyeEUsR0FBYTlpQixFQUFJN3VELEdBRXpCLE1BQU13eUMsRUFBUXp5QyxLQUFLeXlDLE1BRWQ2OUIsR0FBYTc5QixFQUFPeHlDLEtBRXpCNnVELEVBQUcraUIsV0FBWTd4RSxLQUFLMndFLEtBQU0xd0UsR0FFMUI4OEMsR0FBV3RLLEVBQU94eUMsSUFJbkIsU0FBUzZ4RSxHQUFhaGpCLEVBQUk3dUQsR0FFekIsTUFBTXd5QyxFQUFRenlDLEtBQUt5eUMsTUFFZDY5QixHQUFhNzlCLEVBQU94eUMsS0FFekI2dUQsRUFBR2lqQixXQUFZL3hFLEtBQUsyd0UsS0FBTTF3RSxHQUUxQjg4QyxHQUFXdEssRUFBT3h5QyxJQUluQixTQUFTK3hFLEdBQWFsakIsRUFBSTd1RCxHQUV6QixNQUFNd3lDLEVBQVF6eUMsS0FBS3l5QyxNQUVkNjlCLEdBQWE3OUIsRUFBT3h5QyxLQUV6QjZ1RCxFQUFHbWpCLFdBQVlqeUUsS0FBSzJ3RSxLQUFNMXdFLEdBRTFCODhDLEdBQVd0SyxFQUFPeHlDLElBTW5CLFNBQVNpeUUsR0FBY3BqQixFQUFJN3VELEdBRTFCLE1BQU13eUMsRUFBUXp5QyxLQUFLeXlDLE1BRWRBLEVBQU8sS0FBUXh5QyxJQUVwQjZ1RCxFQUFHcWpCLFdBQVlueUUsS0FBSzJ3RSxLQUFNMXdFLEdBRTFCd3lDLEVBQU8sR0FBTXh5QyxHQU1kLFNBQVNteUUsR0FBY3RqQixFQUFJN3VELEdBRTFCLE1BQU13eUMsRUFBUXp5QyxLQUFLeXlDLE1BRWQ2OUIsR0FBYTc5QixFQUFPeHlDLEtBRXpCNnVELEVBQUd1akIsWUFBYXJ5RSxLQUFLMndFLEtBQU0xd0UsR0FFM0I4OEMsR0FBV3RLLEVBQU94eUMsSUFJbkIsU0FBU3F5RSxHQUFjeGpCLEVBQUk3dUQsR0FFMUIsTUFBTXd5QyxFQUFRenlDLEtBQUt5eUMsTUFFZDY5QixHQUFhNzlCLEVBQU94eUMsS0FFekI2dUQsRUFBR3lqQixZQUFhdnlFLEtBQUsyd0UsS0FBTTF3RSxHQUUzQjg4QyxHQUFXdEssRUFBT3h5QyxJQUluQixTQUFTdXlFLEdBQWMxakIsRUFBSTd1RCxHQUUxQixNQUFNd3lDLEVBQVF6eUMsS0FBS3l5QyxNQUVkNjlCLEdBQWE3OUIsRUFBT3h5QyxLQUV6QjZ1RCxFQUFHMmpCLFlBQWF6eUUsS0FBSzJ3RSxLQUFNMXdFLEdBRTNCODhDLEdBQVd0SyxFQUFPeHlDLElBT25CLFNBQVN5eUUsR0FBWTVqQixFQUFJN3VELEVBQUd5eUIsR0FFM0IsTUFBTStmLEVBQVF6eUMsS0FBS3l5QyxNQUNia2dDLEVBQU9qZ0QsRUFBUzg5QyxzQkFFakIvOUIsRUFBTyxLQUFRa2dDLElBRW5CN2pCLEVBQUdqN0MsVUFBVzdULEtBQUsyd0UsS0FBTWdDLEdBQ3pCbGdDLEVBQU8sR0FBTWtnQyxHQUlkamdELEVBQVNrZ0QsYUFBYzN5RSxHQUFLd3ZFLEdBQWNrRCxHQUkzQyxTQUFTRSxHQUFjL2pCLEVBQUk3dUQsRUFBR3l5QixHQUU3QixNQUFNK2YsRUFBUXp5QyxLQUFLeXlDLE1BQ2JrZ0MsRUFBT2pnRCxFQUFTODlDLHNCQUVqQi85QixFQUFPLEtBQVFrZ0MsSUFFbkI3akIsRUFBR2o3QyxVQUFXN1QsS0FBSzJ3RSxLQUFNZ0MsR0FDekJsZ0MsRUFBTyxHQUFNa2dDLEdBSWRqZ0QsRUFBU29nRCxhQUFjN3lFLEdBQUswdkUsR0FBZ0JnRCxHQUk3QyxTQUFTSSxHQUFZamtCLEVBQUk3dUQsRUFBR3l5QixHQUUzQixNQUFNK2YsRUFBUXp5QyxLQUFLeXlDLE1BQ2JrZ0MsRUFBT2pnRCxFQUFTODlDLHNCQUVqQi85QixFQUFPLEtBQVFrZ0MsSUFFbkI3akIsRUFBR2o3QyxVQUFXN1QsS0FBSzJ3RSxLQUFNZ0MsR0FDekJsZ0MsRUFBTyxHQUFNa2dDLEdBSWRqZ0QsRUFBU3NnRCxlQUFnQi95RSxHQUFLMnZFLEdBQWtCK0MsR0FJakQsU0FBU00sR0FBbUJua0IsRUFBSTd1RCxFQUFHeXlCLEdBRWxDLE1BQU0rZixFQUFRenlDLEtBQUt5eUMsTUFDYmtnQyxFQUFPamdELEVBQVM4OUMsc0JBRWpCLzlCLEVBQU8sS0FBUWtnQyxJQUVuQjdqQixFQUFHajdDLFVBQVc3VCxLQUFLMndFLEtBQU1nQyxHQUN6QmxnQyxFQUFPLEdBQU1rZ0MsR0FJZGpnRCxFQUFTd2dELGtCQUFtQmp6RSxHQUFLeXZFLEdBQW1CaUQsR0E0RHJELFNBQVNRLEdBQWtCcmtCLEVBQUk3dUQsR0FFOUI2dUQsRUFBR3NrQixXQUFZcHpFLEtBQUsyd0UsS0FBTTF3RSxHQU0zQixTQUFTb3pFLEdBQWtCdmtCLEVBQUk3dUQsR0FFOUIsTUFBTStYLEVBQU9rNEQsR0FBU2p3RSxFQUFHRCxLQUFLcVgsS0FBTSxHQUVwQ3kzQyxFQUFHZ2lCLFdBQVk5d0UsS0FBSzJ3RSxLQUFNMzRELEdBSTNCLFNBQVNzN0QsR0FBa0J4a0IsRUFBSTd1RCxHQUU5QixNQUFNK1gsRUFBT2s0RCxHQUFTandFLEVBQUdELEtBQUtxWCxLQUFNLEdBRXBDeTNDLEVBQUdtaUIsV0FBWWp4RSxLQUFLMndFLEtBQU0zNEQsR0FJM0IsU0FBU3U3RCxHQUFrQnprQixFQUFJN3VELEdBRTlCLE1BQU0rWCxFQUFPazRELEdBQVNqd0UsRUFBR0QsS0FBS3FYLEtBQU0sR0FFcEN5M0MsRUFBR3NpQixXQUFZcHhFLEtBQUsyd0UsS0FBTTM0RCxHQU0zQixTQUFTdzdELEdBQWlCMWtCLEVBQUk3dUQsR0FFN0IsTUFBTStYLEVBQU9rNEQsR0FBU2p3RSxFQUFHRCxLQUFLcVgsS0FBTSxHQUVwQ3kzQyxFQUFHd2lCLGlCQUFrQnR4RSxLQUFLMndFLE1BQU0sRUFBTzM0RCxHQUl4QyxTQUFTeTdELEdBQWlCM2tCLEVBQUk3dUQsR0FFN0IsTUFBTStYLEVBQU9rNEQsR0FBU2p3RSxFQUFHRCxLQUFLcVgsS0FBTSxHQUVwQ3kzQyxFQUFHMGlCLGlCQUFrQnh4RSxLQUFLMndFLE1BQU0sRUFBTzM0RCxHQUl4QyxTQUFTMDdELEdBQWlCNWtCLEVBQUk3dUQsR0FFN0IsTUFBTStYLEVBQU9rNEQsR0FBU2p3RSxFQUFHRCxLQUFLcVgsS0FBTSxJQUVwQ3kzQyxFQUFHNGlCLGlCQUFrQjF4RSxLQUFLMndFLE1BQU0sRUFBTzM0RCxHQU14QyxTQUFTMjdELEdBQWtCN2tCLEVBQUk3dUQsR0FFOUI2dUQsRUFBRzhrQixXQUFZNXpFLEtBQUsyd0UsS0FBTTF3RSxHQU0zQixTQUFTNHpFLEdBQWtCL2tCLEVBQUk3dUQsR0FFOUI2dUQsRUFBRytpQixXQUFZN3hFLEtBQUsyd0UsS0FBTTF3RSxHQUkzQixTQUFTNnpFLEdBQWtCaGxCLEVBQUk3dUQsR0FFOUI2dUQsRUFBR2lqQixXQUFZL3hFLEtBQUsyd0UsS0FBTTF3RSxHQUkzQixTQUFTOHpFLEdBQWtCamxCLEVBQUk3dUQsR0FFOUI2dUQsRUFBR21qQixXQUFZanlFLEtBQUsyd0UsS0FBTTF3RSxHQU0zQixTQUFTK3pFLEdBQW1CbGxCLEVBQUk3dUQsR0FFL0I2dUQsRUFBR21sQixZQUFhajBFLEtBQUsyd0UsS0FBTTF3RSxHQU01QixTQUFTaTBFLEdBQW1CcGxCLEVBQUk3dUQsR0FFL0I2dUQsRUFBR3VqQixZQUFhcnlFLEtBQUsyd0UsS0FBTTF3RSxHQUk1QixTQUFTazBFLEdBQW1CcmxCLEVBQUk3dUQsR0FFL0I2dUQsRUFBR3lqQixZQUFhdnlFLEtBQUsyd0UsS0FBTTF3RSxHQUk1QixTQUFTbTBFLEdBQW1CdGxCLEVBQUk3dUQsR0FFL0I2dUQsRUFBRzJqQixZQUFhenlFLEtBQUsyd0UsS0FBTTF3RSxHQU81QixTQUFTbzBFLEdBQWlCdmxCLEVBQUk3dUQsRUFBR3l5QixHQUVoQyxNQUFNL3pCLEVBQUlzQixFQUFFbkIsT0FFTncxRSxFQUFRL0QsR0FBZTc5QyxFQUFVL3pCLEdBRXZDbXdELEVBQUc4a0IsV0FBWTV6RSxLQUFLMndFLEtBQU0yRCxHQUUxQixJQUFNLElBQUl4ekUsRUFBSSxFQUFHQSxJQUFNbkMsSUFBTW1DLEVBRTVCNHhCLEVBQVNrZ0QsYUFBYzN5RSxFQUFHYSxJQUFPMnVFLEdBQWM2RSxFQUFPeHpFLElBTXhELFNBQVN5ekUsR0FBa0J6bEIsRUFBSTd1RCxFQUFHeXlCLEdBRWpDLE1BQU0vekIsRUFBSXNCLEVBQUVuQixPQUVOdzFFLEVBQVEvRCxHQUFlNzlDLEVBQVUvekIsR0FFdkNtd0QsRUFBRzhrQixXQUFZNXpFLEtBQUsyd0UsS0FBTTJELEdBRTFCLElBQU0sSUFBSXh6RSxFQUFJLEVBQUdBLElBQU1uQyxJQUFNbUMsRUFFNUI0eEIsRUFBU29nRCxhQUFjN3lFLEVBQUdhLElBQU82dUUsR0FBZ0IyRSxFQUFPeHpFLElBTTFELFNBQVMwekUsR0FBaUIxbEIsRUFBSTd1RCxFQUFHeXlCLEdBRWhDLE1BQU0vekIsRUFBSXNCLEVBQUVuQixPQUVOdzFFLEVBQVEvRCxHQUFlNzlDLEVBQVUvekIsR0FFdkNtd0QsRUFBRzhrQixXQUFZNXpFLEtBQUsyd0UsS0FBTTJELEdBRTFCLElBQU0sSUFBSXh6RSxFQUFJLEVBQUdBLElBQU1uQyxJQUFNbUMsRUFFNUI0eEIsRUFBU3NnRCxlQUFnQi95RSxFQUFHYSxJQUFPOHVFLEdBQWtCMEUsRUFBT3h6RSxJQU05RCxTQUFTMnpFLEdBQXVCM2xCLEVBQUk3dUQsRUFBR3l5QixHQUV0QyxNQUFNL3pCLEVBQUlzQixFQUFFbkIsT0FFTncxRSxFQUFRL0QsR0FBZTc5QyxFQUFVL3pCLEdBRXZDbXdELEVBQUc4a0IsV0FBWTV6RSxLQUFLMndFLEtBQU0yRCxHQUUxQixJQUFNLElBQUl4ekUsRUFBSSxFQUFHQSxJQUFNbkMsSUFBTW1DLEVBRTVCNHhCLEVBQVN3Z0Qsa0JBQW1CanpFLEVBQUdhLElBQU80dUUsR0FBbUI0RSxFQUFPeHpFLElBOERsRSxTQUFTNHpFLEdBQWUza0MsRUFBSTRrQyxFQUFZaEUsR0FFdkMzd0UsS0FBSyt2QyxHQUFLQSxFQUNWL3ZDLEtBQUsyd0UsS0FBT0EsRUFDWjN3RSxLQUFLeXlDLE1BQVEsR0FDYnp5QyxLQUFLZ3ZFLFNBeFNOLFNBQTRCbjRELEdBRTNCLE9BQVNBLEdBRVIsS0FBSyxLQUFRLE9BQU80NUQsR0FDcEIsS0FBSyxNQUFRLE9BQU9HLEdBQ3BCLEtBQUssTUFBUSxPQUFPRyxHQUNwQixLQUFLLE1BQVEsT0FBT0csR0FFcEIsS0FBSyxNQUFRLE9BQU9HLEdBQ3BCLEtBQUssTUFBUSxPQUFPRSxHQUNwQixLQUFLLE1BQVEsT0FBT0UsR0FFcEIsS0FBSyxLQUFRLEtBQUssTUFBUSxPQUFPRSxHQUNqQyxLQUFLLE1BQVEsS0FBSyxNQUFRLE9BQU9DLEdBQ2pDLEtBQUssTUFBUSxLQUFLLE1BQVEsT0FBT0UsR0FDakMsS0FBSyxNQUFRLEtBQUssTUFBUSxPQUFPRSxHQUVqQyxLQUFLLEtBQVEsT0FBT0UsR0FDcEIsS0FBSyxNQUFRLE9BQU9FLEdBQ3BCLEtBQUssTUFBUSxPQUFPRSxHQUNwQixLQUFLLE1BQVEsT0FBT0UsR0FFcEIsS0FBSyxNQUNMLEtBQUssTUFDTCxLQUFLLE1BQ0wsS0FBSyxNQUNMLEtBQUssTUFDSixPQUFPRSxHQUVSLEtBQUssTUFDTCxLQUFLLE1BQ0wsS0FBSyxNQUNKLE9BQU9HLEdBRVIsS0FBSyxNQUNMLEtBQUssTUFDTCxLQUFLLE1BQ0wsS0FBSyxNQUNKLE9BQU9FLEdBRVIsS0FBSyxNQUNMLEtBQUssTUFDTCxLQUFLLE1BQ0wsS0FBSyxNQUNKLE9BQU9FLElBMlBPMkIsQ0FBbUJELEVBQVc5OUQsTUFNL0MsU0FBU2crRCxHQUFrQjlrQyxFQUFJNGtDLEVBQVloRSxHQUUxQzN3RSxLQUFLK3ZDLEdBQUtBLEVBQ1YvdkMsS0FBSzJ3RSxLQUFPQSxFQUNaM3dFLEtBQUt5eUMsTUFBUSxHQUNienlDLEtBQUtxWCxLQUFPczlELEVBQVd0OUQsS0FDdkJyWCxLQUFLZ3ZFLFNBdEVOLFNBQTZCbjRELEdBRTVCLE9BQVNBLEdBRVIsS0FBSyxLQUFRLE9BQU9zOEQsR0FDcEIsS0FBSyxNQUFRLE9BQU9FLEdBQ3BCLEtBQUssTUFBUSxPQUFPQyxHQUNwQixLQUFLLE1BQVEsT0FBT0MsR0FFcEIsS0FBSyxNQUFRLE9BQU9DLEdBQ3BCLEtBQUssTUFBUSxPQUFPQyxHQUNwQixLQUFLLE1BQVEsT0FBT0MsR0FFcEIsS0FBSyxLQUFRLEtBQUssTUFBUSxPQUFPQyxHQUNqQyxLQUFLLE1BQVEsS0FBSyxNQUFRLE9BQU9FLEdBQ2pDLEtBQUssTUFBUSxLQUFLLE1BQVEsT0FBT0MsR0FDakMsS0FBSyxNQUFRLEtBQUssTUFBUSxPQUFPQyxHQUVqQyxLQUFLLEtBQVEsT0FBT0MsR0FDcEIsS0FBSyxNQUFRLE9BQU9FLEdBQ3BCLEtBQUssTUFBUSxPQUFPQyxHQUNwQixLQUFLLE1BQVEsT0FBT0MsR0FFcEIsS0FBSyxNQUNMLEtBQUssTUFDTCxLQUFLLE1BQ0wsS0FBSyxNQUNMLEtBQUssTUFDSixPQUFPQyxHQUVSLEtBQUssTUFDTCxLQUFLLE1BQ0wsS0FBSyxNQUNKLE9BQU9FLEdBRVIsS0FBSyxNQUNMLEtBQUssTUFDTCxLQUFLLE1BQ0wsS0FBSyxNQUNKLE9BQU9DLEdBRVIsS0FBSyxNQUNMLEtBQUssTUFDTCxLQUFLLE1BQ0wsS0FBSyxNQUNKLE9BQU9DLElBeUJPSyxDQUFvQkgsRUFBVzk5RCxNQW9CaEQsU0FBU2srRCxHQUFtQmhsQyxHQUUzQi92QyxLQUFLK3ZDLEdBQUtBLEVBRVYvdkMsS0FBS2cxRSxJQUFNLEdBQ1hoMUUsS0FBS29TLElBQU0sR0FuQlp5aUUsR0FBaUJ0MUUsVUFBVTAxRSxZQUFjLFNBQVdqOUQsR0FFbkQsTUFBTXk2QixFQUFRenlDLEtBQUt5eUMsTUFFZHo2QixhQUFnQnJFLGNBQWdCOCtCLEVBQU0zekMsU0FBV2taLEVBQUtsWixTQUUxRGtCLEtBQUt5eUMsTUFBUSxJQUFJOStCLGFBQWNxRSxFQUFLbFosU0FJckNpK0MsR0FBV3RLLEVBQU96NkIsSUFhbkIrOEQsR0FBa0J4MUUsVUFBVXl2RSxTQUFXLFNBQVdsZ0IsRUFBSTl2RCxFQUFPMHpCLEdBRTVELE1BQU1zaUQsRUFBTWgxRSxLQUFLZzFFLElBRWpCLElBQU0sSUFBSWwwRSxFQUFJLEVBQUduQyxFQUFJcTJFLEVBQUlsMkUsT0FBUWdDLElBQU1uQyxJQUFNbUMsRUFBSSxDQUVoRCxNQUFNdEIsRUFBSXcxRSxFQUFLbDBFLEdBQ2Z0QixFQUFFd3ZFLFNBQVVsZ0IsRUFBSTl2RCxFQUFPUSxFQUFFdXdDLElBQU1yZCxLQVVqQyxNQUFNd2lELEdBQWEsc0JBV25CLFNBQVNDLEdBQVlDLEVBQVdDLEdBRS9CRCxFQUFVSixJQUFJeHlFLEtBQU02eUUsR0FDcEJELEVBQVVoakUsSUFBS2lqRSxFQUFjdGxDLElBQU9zbEMsRUFJckMsU0FBU0MsR0FBY1gsRUFBWWhFLEVBQU15RSxHQUV4QyxNQUFNbDdELEVBQU95NkQsRUFBV3QrRCxLQUN2QmsvRCxFQUFhcjdELEVBQUtwYixPQUtuQixJQUZBbzJFLEdBQVdNLFVBQVksSUFFUixDQUVkLE1BQU1DLEVBQVFQLEdBQVd2bkQsS0FBTXpULEdBQzlCdzdELEVBQVdSLEdBQVdNLFVBRXZCLElBQUl6bEMsRUFBSzBsQyxFQUFPLEdBQ2hCLE1BQU1FLEVBQTJCLE1BQWZGLEVBQU8sR0FDeEJHLEVBQVlILEVBQU8sR0FJcEIsR0FGS0UsSUFBWTVsQyxHQUFVLFFBRVJ2d0IsSUFBZG8yRCxHQUF5QyxNQUFkQSxHQUFxQkYsRUFBVyxJQUFNSCxFQUFhLENBSWxGSixHQUFZQyxPQUF5QjUxRCxJQUFkbzJELEVBQ3RCLElBQUlsQixHQUFlM2tDLEVBQUk0a0MsRUFBWWhFLEdBQ25DLElBQUlrRSxHQUFrQjlrQyxFQUFJNGtDLEVBQVloRSxJQUV2QyxNQUVNLENBS04sSUFBSW53RSxFQURRNDBFLEVBQVVoakUsSUFDTjI5QixRQUVGdndCLElBQVRoZixJQUVKQSxFQUFPLElBQUl1MEUsR0FBbUJobEMsR0FDOUJvbEMsR0FBWUMsRUFBVzUwRSxJQUl4QjQwRSxFQUFZNTBFLElBVWYsU0FBU3ExRSxHQUFlL21CLEVBQUl5USxHQUUzQnYvRCxLQUFLZzFFLElBQU0sR0FDWGgxRSxLQUFLb1MsSUFBTSxHQUVYLE1BQU16VCxFQUFJbXdELEVBQUdoOEMsb0JBQXFCeXNELEVBQVMsT0FFM0MsSUFBTSxJQUFJeitELEVBQUksRUFBR0EsRUFBSW5DLElBQU1tQyxFQUFJLENBRTlCLE1BQU1paEUsRUFBT2pULEVBQUdnbkIsaUJBQWtCdlcsRUFBU3orRCxHQUczQ3cwRSxHQUFjdlQsRUFGTmpULEVBQUc1N0MsbUJBQW9CcXNELEVBQVN3QyxFQUFLMXJELE1BRW5CclcsT0EwRDVCLFNBQVMrMUUsR0FBYWpuQixFQUFJajRDLEVBQU00VyxHQUUvQixNQUFNdTlCLEVBQVM4RCxFQUFHbjlDLGFBQWNrRixHQUtoQyxPQUhBaTRDLEVBQUdoOUMsYUFBY2s1QyxFQUFRdjlCLEdBQ3pCcWhDLEVBQUcvOEMsY0FBZWk1QyxHQUVYQSxFQTNEUjZxQixHQUFjdDJFLFVBQVV5dkUsU0FBVyxTQUFXbGdCLEVBQUl6NEMsRUFBTXJYLEVBQU8wekIsR0FFOUQsTUFBTWx6QixFQUFJUSxLQUFLb1MsSUFBS2lFLFFBRVRtSixJQUFOaGdCLEdBQWtCQSxFQUFFd3ZFLFNBQVVsZ0IsRUFBSTl2RCxFQUFPMHpCLElBSS9DbWpELEdBQWN0MkUsVUFBVXkyRSxZQUFjLFNBQVdsbkIsRUFBSTl2QixFQUFRM29CLEdBRTVELE1BQU1wVyxFQUFJKytCLEVBQVEzb0IsUUFFUG1KLElBQU52ZixHQUFrQkQsS0FBS2d2RSxTQUFVbGdCLEVBQUl6NEMsRUFBTXBXLElBT2pENDFFLEdBQWNJLE9BQVMsU0FBV25uQixFQUFJa21CLEVBQUt0aUMsRUFBUWhnQixHQUVsRCxJQUFNLElBQUk1eEIsRUFBSSxFQUFHbkMsRUFBSXEyRSxFQUFJbDJFLE9BQVFnQyxJQUFNbkMsSUFBTW1DLEVBQUksQ0FFaEQsTUFBTXRCLEVBQUl3MUUsRUFBS2wwRSxHQUNkYixFQUFJeXlDLEVBQVFsekMsRUFBRXV3QyxLQUVRLElBQWxCOXZDLEVBQUVtd0IsYUFHTjV3QixFQUFFd3ZFLFNBQVVsZ0IsRUFBSTd1RCxFQUFFakIsTUFBTzB6QixLQVE1Qm1qRCxHQUFjSyxhQUFlLFNBQVdsQixFQUFLdGlDLEdBRTVDLE1BQU1sdkMsRUFBSSxHQUVWLElBQU0sSUFBSTFDLEVBQUksRUFBR25DLEVBQUlxMkUsRUFBSWwyRSxPQUFRZ0MsSUFBTW5DLElBQU1tQyxFQUFJLENBRWhELE1BQU10QixFQUFJdzFFLEVBQUtsMEUsR0FDVnRCLEVBQUV1d0MsTUFBTTJDLEdBQVNsdkMsRUFBRWhCLEtBQU1oRCxHQUkvQixPQUFPZ0UsR0FlUixJQUFJMnlFLEdBQWlCLEVBb0NyQixTQUFTQyxHQUFpQnRuQixFQUFJOUQsRUFBUW4wQyxHQUVyQyxNQUFNdy9ELEVBQVN2bkIsRUFBRzk4QyxtQkFBb0JnNUMsRUFBUSxPQUN4Q3NyQixFQUFTeG5CLEVBQUc1OEMsaUJBQWtCODRDLEdBQVN1ckIsT0FFN0MsR0FBS0YsR0FBcUIsS0FBWEMsRUFBZ0IsTUFBTyxHQUV0QyxNQUFNRSxFQUFZM29ELFNBQVUsaUJBQWlCRixLQUFNMm9ELEdBQVUsSUFLN0QsT0FBT3ovRCxFQUFLNC9ELGNBQWdCLE9BQVNILEVBQVMsT0E5Qy9DLFNBQXVCN29ELEVBQVErb0QsR0FFOUIsTUFBTXJKLEVBQVExL0MsRUFBT3Z0QixNQUFPLE1BQ3RCdzJFLEVBQVMsR0FFVDd2RSxFQUFPaEgsS0FBS2tHLElBQUt5d0UsRUFBWSxFQUFHLEdBQ2hDbnZFLEVBQUt4SCxLQUFLMEcsSUFBS2l3RSxFQUFZLEVBQUdySixFQUFNcnVFLFFBRTFDLElBQU0sSUFBSWdDLEVBQUkrRixFQUFNL0YsRUFBSXVHLEVBQUl2RyxJQUUzQjQxRSxFQUFPbDBFLEtBQVExQixFQUFJLEVBQU0sS0FBT3FzRSxFQUFPcnNFLElBSXhDLE9BQU80MUUsRUFBT3ZyRSxLQUFNLE1BZ0NtQ3dyRSxDQUFjN25CLEVBQUc4bkIsZ0JBQWlCNXJCLEdBQVV3ckIsR0FJcEcsU0FBU0ssR0FBMEJDLEVBQWN0bEQsR0FFaEQsTUFBTTVELEVBbENQLFNBQWdDNEQsR0FFL0IsT0FBU0EsR0FFUixLQUFLL1AsRUFDSixNQUFPLENBQUUsU0FBVSxhQUNwQixLQUFLQyxFQUNKLE1BQU8sQ0FBRSxPQUFRLGFBQ2xCLFFBRUMsT0FEQS9lLFFBQVF1aEIsS0FBTSw0Q0FBNkNzTixHQUNwRCxDQUFFLFNBQVUsY0F3QkZ1bEQsQ0FBdUJ2bEQsR0FDMUMsTUFBTyxRQUFVc2xELEVBQWUsbUNBQXFDbHBELEVBQVksR0FBTUEsRUFBWSxHQUFNLE1BSTFHLFNBQVNvcEQsR0FBd0JGLEVBQWN2c0IsR0FFOUMsSUFBSTBzQixFQUVKLE9BQVMxc0IsR0FFUixLQWp1akJ3QixFQWt1akJ2QjBzQixFQUFrQixTQUNsQixNQUVELEtBcHVqQjBCLEVBcXVqQnpCQSxFQUFrQixXQUNsQixNQUVELEtBdnVqQndCLEVBd3VqQnZCQSxFQUFrQixrQkFDbEIsTUFFRCxLQTF1akI0QixFQTJ1akIzQkEsRUFBa0IsYUFDbEIsTUFFRCxLQTd1akJ3QixFQTh1akJ2QkEsRUFBa0IsU0FDbEIsTUFFRCxRQUNDdDBFLFFBQVF1aEIsS0FBTSwrQ0FBZ0RxbUMsR0FDOUQwc0IsRUFBa0IsU0FJcEIsTUFBTyxRQUFVSCxFQUFlLDJCQUE2QkcsRUFBa0IsMEJBaUVoRixTQUFTQyxHQUFpQnpwRCxHQUV6QixNQUFrQixLQUFYQSxFQUlSLFNBQVMwcEQsR0FBa0IxcEQsRUFBUXNrQixHQUVsQyxPQUFPdGtCLEVBQ0wycEQsUUFBUyxrQkFBbUJybEMsRUFBV3NsQyxjQUN2Q0QsUUFBUyxtQkFBb0JybEMsRUFBV3VsQyxlQUN4Q0YsUUFBUyx3QkFBeUJybEMsRUFBV3dsQyxtQkFDN0NILFFBQVMsb0JBQXFCcmxDLEVBQVd5bEMsZ0JBQ3pDSixRQUFTLG1CQUFvQnJsQyxFQUFXMGxDLGVBQ3hDTCxRQUFTLHlCQUEwQnJsQyxFQUFXMmxDLG9CQUM5Q04sUUFBUywwQkFBMkJybEMsRUFBVzRsQyxxQkFDL0NQLFFBQVMsMkJBQTRCcmxDLEVBQVc2bEMsc0JBSW5ELFNBQVNDLEdBQTBCcHFELEVBQVFza0IsR0FFMUMsT0FBT3RrQixFQUNMMnBELFFBQVMsdUJBQXdCcmxDLEVBQVcrbEMsbUJBQzVDVixRQUFTLHlCQUE0QnJsQyxFQUFXK2xDLGtCQUFvQi9sQyxFQUFXZ21DLHFCQU1sRixNQUFNQyxHQUFpQixtQ0FFdkIsU0FBU0MsR0FBaUJ4cUQsR0FFekIsT0FBT0EsRUFBTzJwRCxRQUFTWSxHQUFnQkUsSUFJeEMsU0FBU0EsR0FBaUJ6QyxFQUFPMEMsR0FFaEMsTUFBTTFxRCxFQUFTdWlDLEdBQWFtb0IsR0FFNUIsUUFBZ0IzNEQsSUFBWGlPLEVBRUosTUFBTSxJQUFJM3RCLE1BQU8sNkJBQStCcTRFLEVBQVUsS0FJM0QsT0FBT0YsR0FBaUJ4cUQsR0FNekIsTUFBTTJxRCxHQUE4QiwrRkFDOUJDLEdBQW9CLCtJQUUxQixTQUFTQyxHQUFhN3FELEdBRXJCLE9BQU9BLEVBQ0wycEQsUUFBU2lCLEdBQW1CRSxJQUM1Qm5CLFFBQVNnQixHQUE2QkksSUFJekMsU0FBU0EsR0FBd0IvQyxFQUFPendFLEVBQU9pSSxFQUFLd3JFLEdBR25ELE9BREE5MUUsUUFBUXVoQixLQUFNLHVIQUNQcTBELEdBQWM5QyxFQUFPendFLEVBQU9pSSxFQUFLd3JFLEdBSXpDLFNBQVNGLEdBQWM5QyxFQUFPendFLEVBQU9pSSxFQUFLd3JFLEdBRXpDLElBQUlockQsRUFBUyxHQUViLElBQU0sSUFBSTNzQixFQUFJK3NCLFNBQVU3b0IsR0FBU2xFLEVBQUkrc0IsU0FBVTVnQixHQUFPbk0sSUFFckQyc0IsR0FBVWdyRCxFQUNSckIsUUFBUyxlQUFnQixLQUFPdDJFLEVBQUksTUFDcENzMkUsUUFBUyx1QkFBd0J0MkUsR0FJcEMsT0FBTzJzQixFQU1SLFNBQVNpckQsR0FBbUIzbUMsR0FFM0IsSUFBSTRtQyxFQUFrQixhQUFlNW1DLEVBQVdxRixVQUFZLHNCQUF3QnJGLEVBQVdxRixVQUFZLFFBZ0IzRyxNQWQ4QixVQUF6QnJGLEVBQVdxRixVQUVmdWhDLEdBQW1CLDJCQUVpQixZQUF6QjVtQyxFQUFXcUYsVUFFdEJ1aEMsR0FBbUIsNkJBRWlCLFNBQXpCNW1DLEVBQVdxRixZQUV0QnVoQyxHQUFtQiwyQkFJYkEsRUFvSFIsU0FBU0MsR0FBYzV1QixFQUFVNnVCLEVBQVU5bUMsRUFBWXlzQixHQUt0RCxNQUFNMVAsRUFBSzlFLEVBQVMvMEMsYUFFZDJ4QyxFQUFVN1UsRUFBVzZVLFFBRTNCLElBQUlDLEVBQWU5VSxFQUFXOFUsYUFDMUJDLEVBQWlCL1UsRUFBVytVLGVBRWhDLE1BQU1neUIsRUE1SFAsU0FBc0MvbUMsR0FFckMsSUFBSSttQyxFQUFzQix1QkFnQjFCLE9BeCtqQm9CLElBMDlqQmYvbUMsRUFBV2duQyxjQUVmRCxFQUFzQixxQkEzOWpCQyxJQTY5akJaL21DLEVBQVdnbkMsY0FFdEJELEVBQXNCLDBCQTk5akJILElBZytqQlIvbUMsRUFBV2duQyxnQkFFdEJELEVBQXNCLHNCQUloQkEsRUEwR3FCRSxDQUE2QmpuQyxHQUNuRGtuQyxFQXZHUCxTQUFtQ2xuQyxHQUVsQyxJQUFJa25DLEVBQW1CLG1CQUV2QixHQUFLbG5DLEVBQVcySSxPQUVmLE9BQVMzSSxFQUFXbW5DLFlBRW5CLEtBQUtyNUQsRUFDTCxLQUFLQyxFQUNKbTVELEVBQW1CLG1CQUNuQixNQUVELEtBQUtsNUQsRUFDSms1RCxFQUFtQixzQkFPdEIsT0FBT0EsRUFrRmtCRSxDQUEwQnBuQyxHQUM3Q3FuQyxFQS9FUCxTQUFtQ3JuQyxHQUVsQyxJQUFJcW5DLEVBQW1CLHlCQWV2QixPQWJLcm5DLEVBQVcySSxRQUVOM0ksRUFBV21uQyxhQUVkcDVELElBRUpzNUQsRUFBbUIsMEJBT2ZBLEVBOERrQkMsQ0FBMEJ0bkMsR0FDN0N1bkMsRUEzRFAsU0FBdUN2bkMsR0FFdEMsSUFBSXVuQyxFQUF1Qix1QkFFM0IsR0FBS3ZuQyxFQUFXMkksT0FFZixPQUFTM0ksRUFBVzRJLFNBRW5CLEtBNS9qQnVCLEVBNi9qQnRCMitCLEVBQXVCLDJCQUN2QixNQUVELEtBLy9qQmtCLEVBZ2drQmpCQSxFQUF1QixzQkFDdkIsTUFFRCxLQWxna0JrQixFQW1na0JqQkEsRUFBdUIsc0JBTzFCLE9BQU9BLEVBbUNzQkMsQ0FBOEJ4bkMsR0FDckR5bkMsRUFoQ1AsU0FBNkJ6bkMsR0FFNUIsTUFBTTBuQyxFQUFjMW5DLEVBQVcybkMsbUJBRS9CLEdBQXFCLE9BQWhCRCxFQUF1QixPQUFPLEtBRW5DLE1BQU1FLEVBQVM5NUUsS0FBSzRvRSxLQUFNZ1IsRUFBYyxHQUFLLEdBQU0sRUFFN0NHLEVBQWMsRUFBTUgsRUFJMUIsTUFBTyxDQUFFSSxXQUZVLEdBQVEsRUFBSWg2RSxLQUFLa0csSUFBS2xHLEtBQUs2UCxJQUFLLEVBQUdpcUUsR0FBVSxNQUUzQ0MsWUFBQUEsRUFBYUQsT0FBQUEsR0FvQlRHLENBQW9CL25DLEdBRXZDZ29DLEVBQW1CaG9DLEVBQVdpZCxTQUFXLEdBL1NoRCxTQUE2QmpkLEdBUzVCLE1BUGUsQ0FDWkEsRUFBV2lvQyxzQkFBMkJqb0MsRUFBVzJuQyxvQkFBc0IzbkMsRUFBVzZILFNBQVc3SCxFQUFXa29DLHVCQUF5QmxvQyxFQUFXcUgsb0JBQXNCckgsRUFBV29HLGFBQXVDLGFBQXhCcEcsRUFBV21vQyxTQUE0QixrREFBb0QsSUFDdlJub0MsRUFBV29vQyxvQkFBc0Jwb0MsRUFBVzZ3Qix5QkFBNEI3d0IsRUFBV3FvQywyQkFBNkIsd0NBQTBDLEdBQzFKcm9DLEVBQVdzb0Msc0JBQXdCdG9DLEVBQVd1b0MsNkJBQWlDLDJDQUE2QyxJQUM1SHZvQyxFQUFXd29DLDJCQUE2QnhvQyxFQUFXMkksUUFBVTNJLEVBQVdpSixlQUFrQmpKLEVBQVd5b0Msa0NBQW9DLGdEQUFrRCxJQUdoTHZnRSxPQUFRaTlELElBQWtCL3JFLEtBQU0sTUFzU01zdkUsQ0FBb0Ixb0MsR0FFbEUyb0MsRUFwU1AsU0FBMEI5ekIsR0FFekIsTUFBTSt6QixFQUFTLEdBRWYsSUFBTSxNQUFNdGtFLEtBQVF1d0MsRUFBVSxDQUU3QixNQUFNNW5ELEVBQVE0bkQsRUFBU3Z3QyxJQUVSLElBQVZyWCxHQUVMMjdFLEVBQU9uNEUsS0FBTSxXQUFhNlQsRUFBTyxJQUFNclgsR0FJeEMsT0FBTzI3RSxFQUFPeHZFLEtBQU0sTUFzUkV5dkUsQ0FBaUJoMEIsR0FFakMyWSxFQUFVelEsRUFBR244QyxnQkFFbkIsSUFBSWtvRSxFQUFjQyxFQUNkQyxFQUFnQmhwQyxFQUFXMFYsWUFBYyxZQUFjMVYsRUFBVzBWLFlBQWMsS0FBTyxHQUV0RjFWLEVBQVdpcEMscUJBRWZILEVBQWUsQ0FFZEgsR0FFQ3pnRSxPQUFRaTlELElBQWtCL3JFLEtBQU0sTUFFN0IwdkUsRUFBYS83RSxPQUFTLElBRTFCKzdFLEdBQWdCLE1BSWpCQyxFQUFpQixDQUVoQmYsRUFDQVcsR0FFQ3pnRSxPQUFRaTlELElBQWtCL3JFLEtBQU0sTUFFN0IydkUsRUFBZWg4RSxPQUFTLElBRTVCZzhFLEdBQWtCLFFBTW5CRCxFQUFlLENBRWRuQyxHQUFtQjNtQyxHQUVuQix1QkFBeUJBLEVBQVdrcEMsV0FFcENQLEVBRUEzb0MsRUFBV21wQyxXQUFhLHlCQUEyQixHQUNuRG5wQyxFQUFXb3BDLGdCQUFrQiwrQkFBaUMsR0FFOURwcEMsRUFBV3FwQyx1QkFBeUIsMEJBQTRCLEdBRWhFLHFCQUF1QnJwQyxFQUFXc3BDLFNBQ2hDdHBDLEVBQVd1cEMsUUFBVXZwQyxFQUFXeUQsSUFBUSxrQkFBb0IsR0FDNUR6RCxFQUFXdXBDLFFBQVV2cEMsRUFBV3dwQyxRQUFZLG1CQUFxQixHQUVuRXhwQyxFQUFXMy9CLElBQU0sa0JBQW9CLEdBQ3JDMi9CLEVBQVcySSxPQUFTLHFCQUF1QixHQUMzQzNJLEVBQVcySSxPQUFTLFdBQWEwK0IsRUFBbUIsR0FDcERybkMsRUFBV3lILFNBQVcsdUJBQXlCLEdBQy9DekgsRUFBVzJILE1BQVEsb0JBQXNCLEdBQ3pDM0gsRUFBV3VJLFlBQWMsMEJBQTRCLEdBQ3JEdkksRUFBVzZILFFBQVUsc0JBQXdCLEdBQzdDN0gsRUFBVytILFVBQVksd0JBQTBCLEdBQy9DL0gsRUFBVytILFdBQWEvSCxFQUFXeXBDLHFCQUF5QixnQ0FBa0MsR0FDOUZ6cEMsRUFBVytILFdBQWEvSCxFQUFXa29DLHNCQUEwQixpQ0FBbUMsR0FFbEdsb0MsRUFBV21ILGFBQWUsMkJBQTZCLEdBQ3ZEbkgsRUFBV29ILHNCQUF3QixxQ0FBdUMsR0FDMUVwSCxFQUFXcUgsbUJBQXFCLGtDQUFvQyxHQUVwRXJILEVBQVdrSSxpQkFBbUJsSSxFQUFXcXBDLHVCQUF5Qiw4QkFBZ0MsR0FFbEdycEMsRUFBV3dJLFlBQWMsMEJBQTRCLEdBQ3JEeEksRUFBV3lJLHFCQUF1QixtQ0FBcUMsR0FDdkV6SSxFQUFXMEksaUJBQW1CLCtCQUFpQyxHQUUvRDFJLEVBQVdxSSxhQUFlLDJCQUE2QixHQUN2RHJJLEVBQVdzSSxhQUFlLDJCQUE2QixHQUN2RHRJLEVBQVd3SCxTQUFXLHVCQUF5QixHQUUvQ3hILEVBQVdpSixhQUFlLDJCQUE2QixHQUN2RGpKLEVBQVdrSixnQkFBa0IsOEJBQWdDLEdBQzdEbEosRUFBV29KLGFBQWUsMkJBQTZCLEdBRXZEcEosRUFBVzR6QixjQUFnQiw0QkFBOEIsR0FDekQ1ekIsRUFBVzZ6QixrQkFBb0IsZ0NBQWtDLEdBRWpFN3pCLEVBQVcwcEMsZUFBaUIsc0JBQXdCLEdBQ3BEMXBDLEVBQVc0RCxhQUFlLG9CQUFzQixHQUNoRDVELEVBQVcycEMsYUFBZSwwQkFBNEIsR0FDdEQzcEMsRUFBVzRwQyxVQUFZLGlCQUFtQixHQUMxQzVwQyxFQUFXNnBDLGNBQWdCLDBCQUE0QixHQUV2RDdwQyxFQUFXb0csWUFBYyxzQkFBd0IsR0FFakRwRyxFQUFXOHBDLFNBQVcsdUJBQXlCLEdBQy9DOXBDLEVBQVcrcEMsaUJBQW1CLHVCQUF5QixHQUV2RC9wQyxFQUFXa1MsYUFBZSwyQkFBNkIsR0FDdkRsUyxFQUFXczhCLGVBQTJDLElBQTNCdDhCLEVBQVdvRyxZQUF3QiwyQkFBNkIsR0FDekZwRyxFQUFXdThCLGFBQWV2OEIsRUFBV2lkLFNBQWEsMEJBQTRCLEdBQzlFamQsRUFBV2k4QixrQkFBb0IsR0FBS2o4QixFQUFXaWQsU0FBYSwrQkFBaUMsR0FDN0ZqZCxFQUFXaThCLGtCQUFvQixHQUFLajhCLEVBQVdpZCxTQUFhLHVDQUF5Q2pkLEVBQVdncUMsbUJBQXFCLEdBQ3JJaHFDLEVBQVdpOEIsa0JBQW9CLEdBQUtqOEIsRUFBV2lkLFNBQWEsOEJBQWdDamQsRUFBV2k4QixrQkFBb0IsR0FDN0hqOEIsRUFBV2lxQyxZQUFjLHVCQUF5QixHQUNsRGpxQyxFQUFXa3FDLFVBQVkscUJBQXVCLEdBRTlDbHFDLEVBQVdtcUMsaUJBQW1CLHdCQUEwQixHQUN4RG5xQyxFQUFXbXFDLGlCQUFtQixXQUFhcEQsRUFBc0IsR0FFakUvbUMsRUFBV3VKLGdCQUFrQiw4QkFBZ0MsR0FFN0R2SixFQUFXNndCLHVCQUF5QiwwQkFBNEIsR0FDOUQ3d0IsRUFBVzZ3Qix3QkFBMEI3d0IsRUFBV3FvQywyQkFBK0IsOEJBQWdDLEdBRWpILDRCQUNBLGdDQUNBLGlDQUNBLDJCQUNBLDZCQUNBLCtCQUNBLCtCQUVBLHdCQUVBLG1DQUVBLFNBRUEsOEJBRUEsa0NBRUEsU0FFQSwyQkFDQSx5QkFDQSxxQkFFQSxxQkFFQSw0QkFFQSxTQUVBLGlDQUVBLDBCQUVBLDZCQUVBLDBCQUVBLFNBRUEsMkVBRUEsaUNBQ0EsaUNBQ0EsaUNBQ0EsaUNBRUEsNEJBRUEsbUNBQ0EsbUNBQ0EsbUNBQ0EsbUNBRUEsVUFFQSxtQ0FDQSxtQ0FDQSxtQ0FDQSxtQ0FFQSxXQUVBLFNBRUEsc0JBRUEsOEJBQ0EsK0JBRUEsU0FFQSxNQUVDbmdFLE9BQVFpOUQsSUFBa0IvckUsS0FBTSxNQUVsQzJ2RSxFQUFpQixDQUVoQmYsRUFFQXJCLEdBQW1CM21DLEdBRW5CLHVCQUF5QkEsRUFBV2twQyxXQUVwQ1AsRUFFRTNvQyxFQUFXdXBDLFFBQVV2cEMsRUFBV3lELElBQVEsa0JBQW9CLEdBQzVEekQsRUFBV3VwQyxRQUFVdnBDLEVBQVd3cEMsUUFBWSxtQkFBcUIsR0FFbkV4cEMsRUFBVzMvQixJQUFNLGtCQUFvQixHQUNyQzIvQixFQUFXdUgsT0FBUyxxQkFBdUIsR0FDM0N2SCxFQUFXMkksT0FBUyxxQkFBdUIsR0FDM0MzSSxFQUFXMkksT0FBUyxXQUFhdStCLEVBQW1CLEdBQ3BEbG5DLEVBQVcySSxPQUFTLFdBQWEwK0IsRUFBbUIsR0FDcERybkMsRUFBVzJJLE9BQVMsV0FBYTQrQixFQUF1QixHQUN4REUsRUFBbUIsOEJBQWdDQSxFQUFpQkssV0FBYSxHQUNqRkwsRUFBbUIsK0JBQWlDQSxFQUFpQkksWUFBYyxHQUNuRkosRUFBbUIsMEJBQTRCQSxFQUFpQkcsT0FBUyxLQUFPLEdBQ2hGNW5DLEVBQVd5SCxTQUFXLHVCQUF5QixHQUMvQ3pILEVBQVcySCxNQUFRLG9CQUFzQixHQUN6QzNILEVBQVd1SSxZQUFjLDBCQUE0QixHQUNyRHZJLEVBQVc2SCxRQUFVLHNCQUF3QixHQUM3QzdILEVBQVcrSCxVQUFZLHdCQUEwQixHQUMvQy9ILEVBQVcrSCxXQUFhL0gsRUFBV3lwQyxxQkFBeUIsZ0NBQWtDLEdBQzlGenBDLEVBQVcrSCxXQUFhL0gsRUFBV2tvQyxzQkFBMEIsaUNBQW1DLEdBRWxHbG9DLEVBQVdpSCxVQUFZLHdCQUEwQixHQUNqRGpILEVBQVdtSCxhQUFlLDJCQUE2QixHQUN2RG5ILEVBQVdvSCxzQkFBd0IscUNBQXVDLEdBQzFFcEgsRUFBV3FILG1CQUFxQixrQ0FBb0MsR0FFcEVySCxFQUFXd0ksWUFBYywwQkFBNEIsR0FDckR4SSxFQUFXeUkscUJBQXVCLG1DQUFxQyxHQUN2RXpJLEVBQVcwSSxpQkFBbUIsK0JBQWlDLEdBQy9EMUksRUFBV3FJLGFBQWUsMkJBQTZCLEdBQ3ZEckksRUFBV3NJLGFBQWUsMkJBQTZCLEdBRXZEdEksRUFBV3dILFNBQVcsdUJBQXlCLEdBQy9DeEgsRUFBVzhGLFVBQVksd0JBQTBCLEdBRWpEOUYsRUFBV3dHLE1BQVEsb0JBQXNCLEdBQ3pDeEcsRUFBVzR6QixjQUFnQiw0QkFBOEIsR0FDekQ1ekIsRUFBVzZ6QixrQkFBb0IsZ0NBQWtDLEdBRWpFN3pCLEVBQVdpSixhQUFlLDJCQUE2QixHQUN2RGpKLEVBQVdrSixnQkFBa0IsOEJBQWdDLEdBQzdEbEosRUFBV29KLGFBQWUsMkJBQTZCLEdBRXZEcEosRUFBV29xQyxtQkFBcUIsK0JBQWlDLEdBRWpFcHFDLEVBQVcwcEMsZUFBaUIsc0JBQXdCLEdBQ3BEMXBDLEVBQVc0RCxjQUFnQjVELEVBQVdvcEMsZ0JBQWtCLG9CQUFzQixHQUM5RXBwQyxFQUFXMnBDLGFBQWUsMEJBQTRCLEdBQ3REM3BDLEVBQVc0cEMsVUFBWSxpQkFBbUIsR0FDMUM1cEMsRUFBVzZwQyxjQUFnQiwwQkFBNEIsR0FFdkQ3cEMsRUFBV2dKLFlBQWMsMEJBQTRCLEdBRXJEaEosRUFBV29HLFlBQWMsc0JBQXdCLEdBRWpEcEcsRUFBV2lxQyxZQUFjLHVCQUF5QixHQUNsRGpxQyxFQUFXa3FDLFVBQVkscUJBQXVCLEdBRTlDbHFDLEVBQVdtcUMsaUJBQW1CLHdCQUEwQixHQUN4RG5xQyxFQUFXbXFDLGlCQUFtQixXQUFhcEQsRUFBc0IsR0FFakUvbUMsRUFBVzJGLG1CQUFxQiw4QkFBZ0MsR0FFaEUzRixFQUFXcXFDLHdCQUEwQixvQ0FBc0MsR0FFM0VycUMsRUFBVzZ3Qix1QkFBeUIsMEJBQTRCLEdBQzlEN3dCLEVBQVc2d0Isd0JBQTBCN3dCLEVBQVdxb0MsMkJBQStCLDhCQUFnQyxHQUVqSCwyQkFDQSwrQkFDQSwrQkE3emtCbUIsSUEremtCakJyb0MsRUFBV3dZLFlBQWtDLHVCQUF5QixHQS96a0JyRCxJQWcwa0JqQnhZLEVBQVd3WSxZQUFrQ3lGLEdBQXlDLDBCQUFJLEdBaDBrQnpFLElBaTBrQmpCamUsRUFBV3dZLFlBQWtDeXNCLEdBQXdCLGNBQWVqbEMsRUFBV3dZLGFBQWdCLEdBRWpIeFksRUFBV3lGLFVBQVksb0JBQXNCLEdBQzdDekYsRUFBV3NxQyxPQUFTLGlCQUFtQixHQUV2Q3JzQixHQUF1Qyx3QkFDdkM2bUIsR0FBMEIsc0JBQXVCOWtDLEVBQVdzWSxnQkFFNUR0WSxFQUFXdXFDLGFBQWUseUJBQTJCdnFDLEVBQVd1cUMsYUFBZSxHQUUvRSxNQUVDcmlFLE9BQVFpOUQsSUFBa0IvckUsS0FBTSxPQUluQzA3QyxFQUFlb3hCLEdBQWlCcHhCLEdBQ2hDQSxFQUFlc3dCLEdBQWtCdHdCLEVBQWM5VSxHQUMvQzhVLEVBQWVneEIsR0FBMEJoeEIsRUFBYzlVLEdBRXZEK1UsRUFBaUJteEIsR0FBaUJueEIsR0FDbENBLEVBQWlCcXdCLEdBQWtCcndCLEVBQWdCL1UsR0FDbkQrVSxFQUFpQit3QixHQUEwQi93QixFQUFnQi9VLEdBRTNEOFUsRUFBZXl4QixHQUFhenhCLEdBQzVCQyxFQUFpQnd4QixHQUFheHhCLEdBRXpCL1UsRUFBV2lkLFdBQStDLElBQW5DamQsRUFBV2lwQyxzQkFJdENELEVBQWdCLG9CQUVoQkYsRUFBZSxDQUNkLG9DQUNBLHVCQUNBLHNCQUNBLDZCQUNDMXZFLEtBQU0sTUFBUyxLQUFPMHZFLEVBRXhCQyxFQUFpQixDQUNoQixxQkFDRS9vQyxFQUFXMFYsY0FBZ0J6bEMsRUFBVSxHQUFLLG9EQUMxQyt2QixFQUFXMFYsY0FBZ0J6bEMsRUFBVSxHQUFLLG9DQUM1Qyx1Q0FDQSw0QkFDQSw4QkFDQSxvQ0FDQSxxQ0FDQSw2Q0FDQSx1Q0FDQSx1Q0FDQSwrQ0FDQSwwQ0FDQzdXLEtBQU0sTUFBUyxLQUFPMnZFLEdBSXpCLE1BQ015QixFQUFleEIsRUFBZ0JELEVBQWlCaDBCLEVBS2hEMDFCLEVBQWlCekcsR0FBYWpuQixFQUFJLE1BTnJCaXNCLEVBQWdCRixFQUFlaDBCLEdBTzVDNDFCLEVBQW1CMUcsR0FBYWpuQixFQUFJLE1BQU95dEIsR0FxQmpELEdBbkJBenRCLEVBQUdsOEMsYUFBYzJzRCxFQUFTaWQsR0FDMUIxdEIsRUFBR2w4QyxhQUFjMnNELEVBQVNrZCxRQUljajlELElBQW5DdXlCLEVBQVd3VixvQkFFZnVILEVBQUc0dEIsbUJBQW9CbmQsRUFBUyxFQUFHeHRCLEVBQVd3VixzQkFFUCxJQUE1QnhWLEVBQVdrUyxjQUd0QjZLLEVBQUc0dEIsbUJBQW9CbmQsRUFBUyxFQUFHLFlBSXBDelEsRUFBR2o4QyxZQUFhMHNELEdBR1h2VixFQUFTMnlCLE1BQU1DLGtCQUFvQixDQUV2QyxNQUFNQyxFQUFhL3RCLEVBQUc5N0Msa0JBQW1CdXNELEdBQVVnWCxPQUM3Q3VHLEVBQVlodUIsRUFBRzU4QyxpQkFBa0JzcUUsR0FBaUJqRyxPQUNsRHdHLEVBQWNqdUIsRUFBRzU4QyxpQkFBa0J1cUUsR0FBbUJsRyxPQUU1RCxJQUFJeUcsR0FBVyxFQUNYQyxHQUFrQixFQUV0QixJQUFrRCxJQUE3Q251QixFQUFHaDhDLG9CQUFxQnlzRCxFQUFTLE9BQW9CLENBRXpEeWQsR0FBVyxFQUVYLE1BQU1FLEVBQWU5RyxHQUFpQnRuQixFQUFJMHRCLEVBQWdCLFVBQ3BEVyxFQUFpQi9HLEdBQWlCdG5CLEVBQUkydEIsRUFBa0IsWUFFOUQ5NUUsUUFBUUMsTUFDUCxvQ0FBc0Nrc0QsRUFBR3N1QixXQUF6QyxzQkFDcUJ0dUIsRUFBR2g4QyxvQkFBcUJ5c0QsRUFBUyxPQUR0RCx5QkFFdUJzZCxFQUFhLEtBQ3BDSyxFQUFlLEtBQ2ZDLE9BR3lCLEtBQWZOLEVBRVhsNkUsUUFBUXVoQixLQUFNLHdDQUF5QzI0RCxHQUU5QixLQUFkQyxHQUFvQyxLQUFoQkMsSUFFL0JFLEdBQWtCLEdBSWRBLElBRUpqOUUsS0FBS3E5RSxZQUFjLENBRWxCTCxTQUFVQSxFQUVWSCxXQUFZQSxFQUVaaDJCLGFBQWMsQ0FFYmwzQyxJQUFLbXRFLEVBQ0xRLE9BQVF6QyxHQUlUL3pCLGVBQWdCLENBRWZuM0MsSUFBS290RSxFQUNMTyxPQUFReEMsS0FxQlosSUFBSXlDLEVBZ0JBamQsRUFtQ0osT0F4REF4UixFQUFHMHVCLGFBQWNoQixHQUNqQjF0QixFQUFHMHVCLGFBQWNmLEdBTWpCejhFLEtBQUsrdUUsWUFBYyxXQVFsQixZQU53QnZ2RCxJQUFuQis5RCxJQUVKQSxFQUFpQixJQUFJMUgsR0FBZS9tQixFQUFJeVEsSUFJbENnZSxHQVFSdjlFLEtBQUs4Z0UsY0FBZ0IsV0FRcEIsWUFOMEJ0aEQsSUFBckI4Z0QsSUFFSkEsRUF2dEJILFNBQWtDeFIsRUFBSXlRLEdBRXJDLE1BQU0xL0IsRUFBYSxHQUVibGhDLEVBQUltd0QsRUFBR2g4QyxvQkFBcUJ5c0QsRUFBUyxPQUUzQyxJQUFNLElBQUl6K0QsRUFBSSxFQUFHQSxFQUFJbkMsRUFBR21DLElBQU8sQ0FFOUIsTUFBTWloRSxFQUFPalQsRUFBRzJ1QixnQkFBaUJsZSxFQUFTeitELEdBQ3BDdVYsRUFBTzByRCxFQUFLMXJELEtBRWxCLElBQUk2cUQsRUFBZSxFQUNBLFFBQWRhLEVBQUtsckQsT0FBaUJxcUQsRUFBZSxHQUN2QixRQUFkYSxFQUFLbHJELE9BQWlCcXFELEVBQWUsR0FDdkIsUUFBZGEsRUFBS2xyRCxPQUFpQnFxRCxFQUFlLEdBSTFDcmhDLEVBQVl4cEIsR0FBUyxDQUNwQlEsS0FBTWtyRCxFQUFLbHJELEtBQ1huQixTQUFVbzVDLEVBQUczN0Msa0JBQW1Cb3NELEVBQVNscEQsR0FDekM2cUQsYUFBY0EsR0FLaEIsT0FBT3JoQyxFQTZyQmM2OUMsQ0FBeUI1dUIsRUFBSXlRLElBSTFDZSxHQU1SdGdFLEtBQUsyOUUsUUFBVSxXQUVkbmYsRUFBY3FELHVCQUF3QjdoRSxNQUV0Qzh1RCxFQUFHOHVCLGNBQWVyZSxHQUNsQnYvRCxLQUFLdS9ELGFBQVUvL0MsR0FNaEJ4ZixLQUFLcVcsS0FBTzA3QixFQUFXa3BDLFdBQ3ZCajdFLEtBQUsrdkMsR0FBS29tQyxLQUNWbjJFLEtBQUs2NEUsU0FBV0EsRUFDaEI3NEUsS0FBSzY5RSxVQUFZLEVBQ2pCNzlFLEtBQUt1L0QsUUFBVUEsRUFDZnYvRCxLQUFLNm1ELGFBQWUyMUIsRUFDcEJ4OEUsS0FBSzhtRCxlQUFpQjIxQixFQUVmejhFLEtBSVIsSUFBSTg5RSxHQUFNLEVBRVYsTUFBTUMsR0FFTHAxRSxjQUVDM0ksS0FBS2crRSxZQUFjLElBQUlDLElBQ3ZCaitFLEtBQUtrK0UsY0FBZ0IsSUFBSUQsSUFJMUJsbUQsT0FBUXNhLEdBRVAsTUFBTXdVLEVBQWV4VSxFQUFTd1UsYUFDeEJDLEVBQWlCelUsRUFBU3lVLGVBRTFCcTNCLEVBQW9CbitFLEtBQUtvK0UsZ0JBQWlCdjNCLEdBQzFDdzNCLEVBQXNCcitFLEtBQUtvK0UsZ0JBQWlCdDNCLEdBRTVDdzNCLEVBQWtCdCtFLEtBQUt1K0UsMkJBQTRCbHNDLEdBZ0J6RCxPQWRrRCxJQUE3Q2lzQyxFQUFnQjNiLElBQUt3YixLQUV6QkcsRUFBZ0JyNkQsSUFBS2s2RCxHQUNyQkEsRUFBa0JOLGNBSWlDLElBQS9DUyxFQUFnQjNiLElBQUswYixLQUV6QkMsRUFBZ0JyNkQsSUFBS282RCxHQUNyQkEsRUFBb0JSLGFBSWQ3OUUsS0FJUjJ2QyxPQUFRMEMsR0FFUCxNQUFNaXNDLEVBQWtCdCtFLEtBQUtrK0UsY0FBY3RuRSxJQUFLeTdCLEdBRWhELElBQU0sTUFBTW1zQyxLQUFlRixFQUUxQkUsRUFBWVgsWUFFbUIsSUFBMUJXLEVBQVlYLFdBQWtCNzlFLEtBQUtnK0UsWUFBWTFtRSxPQUFRa25FLEVBQVlDLE1BTXpFLE9BRkF6K0UsS0FBS2srRSxjQUFjNW1FLE9BQVErNkIsR0FFcEJyeUMsS0FJUjArRSxrQkFBbUJyc0MsR0FFbEIsT0FBT3J5QyxLQUFLbytFLGdCQUFpQi9yQyxFQUFTd1UsY0FBZTlXLEdBSXRENHVDLG9CQUFxQnRzQyxHQUVwQixPQUFPcnlDLEtBQUtvK0UsZ0JBQWlCL3JDLEVBQVN5VSxnQkFBaUIvVyxHQUl4RGpkLFVBRUM5eUIsS0FBS2crRSxZQUFZenBFLFFBQ2pCdlUsS0FBS2srRSxjQUFjM3BFLFFBSXBCZ3FFLDJCQUE0QmxzQyxHQUUzQixNQUFNSSxFQUFRenlDLEtBQUtrK0UsY0FRbkIsT0FOK0IsSUFBMUJ6ckMsRUFBTWt3QixJQUFLdHdCLElBRWZJLEVBQU05bEMsSUFBSzBsQyxFQUFVLElBQUl1c0MsS0FJbkJuc0MsRUFBTTc3QixJQUFLeTdCLEdBSW5CK3JDLGdCQUFpQkssR0FFaEIsTUFBTWhzQyxFQUFRenlDLEtBQUtnK0UsWUFFbkIsSUFBMkIsSUFBdEJ2ckMsRUFBTWt3QixJQUFLOGIsR0FBbUIsQ0FFbEMsTUFBTUksRUFBUSxJQUFJQyxHQUFrQkwsR0FDcENoc0MsRUFBTTlsQyxJQUFLOHhFLEVBQU1JLEdBSWxCLE9BQU9wc0MsRUFBTTc3QixJQUFLNm5FLElBTXBCLE1BQU1LLEdBRUxuMkUsWUFBYTgxRSxHQUVaeitFLEtBQUsrdkMsR0FBSyt0QyxLQUVWOTlFLEtBQUt5K0UsS0FBT0EsRUFDWnorRSxLQUFLNjlFLFVBQVksR0FNbkIsU0FBU2tCLEdBQWUvMEIsRUFBVTRTLEVBQVVvaUIsRUFBWS8zQixFQUFZOEgsRUFBY3lQLEVBQWV4WCxHQUVoRyxNQUFNaTRCLEVBQWlCLElBQUkveUMsR0FDckJnekMsRUFBaUIsSUFBSW5CLEdBQ3JCM1EsRUFBVyxHQUVYcGUsRUFBV0QsRUFBYUMsU0FDeEI0VCxFQUF5QjdULEVBQWE2VCx1QkFDdENhLEVBQXNCMVUsRUFBYTBVLG9CQUNuQ1AsRUFBb0JuVSxFQUFhbVUsa0JBQ2pDRyxFQUFpQnRVLEVBQWFzVSxlQUNwQyxJQUFJanNCLEVBQVkyWCxFQUFhM1gsVUFFN0IsTUFBTStuQyxFQUFZLENBQ2pCQyxrQkFBbUIsUUFDbkJDLHFCQUFzQixlQUN0QkMsbUJBQW9CLFNBQ3BCcGpDLGtCQUFtQixRQUNuQnFqQyxvQkFBcUIsVUFDckJDLGtCQUFtQixRQUNuQkMsaUJBQWtCLE9BQ2xCQyxxQkFBc0IsV0FDdEJDLHFCQUFzQixXQUN0QkMsbUJBQW9CLFNBQ3BCQyxrQkFBbUIsUUFDbkJDLG1CQUFvQixTQUNwQkMsZUFBZ0IsU0FDaEJDLGVBQWdCLFNBQ2hCQyxlQUFnQixVQXVnQmpCLE1BQU8sQ0FDTkMsY0FqZUQsU0FBd0I3dEMsRUFBVTBVLEVBQVFvNUIsRUFBU2wyQixFQUFPanJCLEdBRXpELE1BQU13VyxFQUFNeVUsRUFBTXpVLElBQ1o1VixFQUFXWixFQUFPWSxTQUNsQitSLEVBQWNVLEVBQVMrdEMsdUJBQXlCbjJCLEVBQU10WSxZQUFjLEtBRXBFK0ksR0FBV3JJLEVBQVMrdEMsdUJBQXlCcEIsRUFBYXBpQixHQUFXaG1ELElBQUt5N0IsRUFBU3FJLFFBQVUvSSxHQUM3RituQyxFQUEwQmgvQixHQUFjQSxFQUFPMXBCLFVBQVlqUixFQUE0QjI2QixFQUFPdmlDLE1BQU05VCxPQUFTLEtBRTdHNjFFLEVBQVdpRixFQUFXOXNDLEVBQVN4N0IsTUFLL0J3a0UsRUFBV3I4QyxFQUFPaVQsY0FsRHpCLFNBQXNCalQsR0FFckIsTUFDTXFoRCxFQURXcmhELEVBQU9vVCxTQUNEaXVDLE1BRXZCLEdBQUs1YyxFQUVKLE9BQU8sS0FFRCxDQVNOLE1BQU02YyxFQUFrQnBkLEVBQ2xCcWQsRUFBa0IxZ0YsS0FBS3FMLE9BQVNvMUUsRUFBa0IsSUFBTyxHQUV6RGpGLEVBQVd4N0UsS0FBSzBHLElBQUtnNkUsRUFBaUJGLEVBQU12aEYsUUFFbEQsT0FBS3U4RSxFQUFXZ0YsRUFBTXZoRixRQUVyQjZELFFBQVF1aEIsS0FBTSxxQ0FBdUNtOEQsRUFBTXZoRixPQUFTLDZCQUErQnU4RSxFQUFXLEtBQ3ZHLEdBSURBLEdBb0JnQ21GLENBQWF4aEQsR0FBVyxFQUVwQyxPQUF2QnFULEVBQVMrRSxZQUViQSxFQUFZMlgsRUFBYXdULGdCQUFpQmx3QixFQUFTK0UsV0FFOUNBLElBQWMvRSxFQUFTK0UsV0FFM0J6MEMsUUFBUXVoQixLQUFNLG9DQUFxQ211QixFQUFTK0UsVUFBVyx1QkFBd0JBLEVBQVcsYUFRNUcsTUFBTXFJLEVBQWlCN2YsRUFBUzJlLGdCQUFnQnplLFVBQVlGLEVBQVMyZSxnQkFBZ0J0aEIsUUFBVTJDLEVBQVMyZSxnQkFBZ0J0NEMsTUFDbEgrbkUsT0FBeUN4dUQsSUFBbkJpZ0MsRUFBaUNBLEVBQWUzZ0QsT0FBUyxFQUVyRixJQVFJK25ELEVBQWNDLEVBQ2QyNUIsRUFBc0JDLEVBVHRCM0UsRUFBcUIsRUFXekIsUUFUMkN2OEQsSUFBdENvZ0IsRUFBUzJlLGdCQUFnQnplLFdBQXlCaThDLEVBQXFCLFFBQ25DdjhELElBQXBDb2dCLEVBQVMyZSxnQkFBZ0J0aEIsU0FBdUI4K0MsRUFBcUIsUUFDbEN2OEQsSUFBbkNvZ0IsRUFBUzJlLGdCQUFnQnQ0QyxRQUFzQjgxRSxFQUFxQixHQU9wRTdCLEVBQVcsQ0FFZixNQUFNbHZCLEVBQVMyUSxHQUFXdWUsR0FFMUJyekIsRUFBZW1FLEVBQU9uRSxhQUN0QkMsRUFBaUJrRSxFQUFPbEUsb0JBSXhCRCxFQUFleFUsRUFBU3dVLGFBQ3hCQyxFQUFpQnpVLEVBQVN5VSxlQUUxQm80QixFQUFlbm5ELE9BQVFzYSxHQUV2Qm91QyxFQUF1QnZCLEVBQWVSLGtCQUFtQnJzQyxHQUN6RHF1QyxFQUF5QnhCLEVBQWVQLG9CQUFxQnRzQyxHQUk5RCxNQUFNNlgsRUFBc0JGLEVBQVNHLGtCQUUvQncyQixFQUFldHVDLEVBQVN3RixVQUFZLEVBQ3BDK29DLEVBQWV2dUMsRUFBUzJHLFVBQVksRUEwSTFDLE1BeEltQixDQUVsQmdXLFNBQVVBLEVBRVZrckIsU0FBVUEsRUFDVmUsV0FBWTVvQyxFQUFTeDdCLEtBRXJCZ3dDLGFBQWNBLEVBQ2RDLGVBQWdCQSxFQUNoQkYsUUFBU3ZVLEVBQVN1VSxRQUVsQjY1QixxQkFBc0JBLEVBQ3RCQyx1QkFBd0JBLEVBRXhCMUYscUJBQXNELElBQWpDM29DLEVBQVMyb0Msb0JBQzlCdnpCLFlBQWFwVixFQUFTb1YsWUFFdEJyUSxVQUFXQSxFQUVYOGpDLFlBQXVDLElBQTNCbDhDLEVBQU9zUyxnQkFDbkI2cEMsaUJBQTRDLElBQTNCbjhDLEVBQU9zUyxpQkFBcUQsT0FBekJ0UyxFQUFPd1MsY0FFM0Q0cEMsdUJBQXdCL1gsRUFDeEJoWixlQUEwQyxPQUF4QkgsRUFBaUNGLEVBQVNLLGdCQUE0RCxJQUF6Q0gsRUFBb0IyMkIsaUJBQTRCMzJCLEVBQW9CbDFCLFFBQVF4RCxTQUFXL1AsRUFDdEtyUCxNQUFRaWdDLEVBQVNqZ0MsSUFDakJrbkMsU0FBV2pILEVBQVNpSCxPQUNwQm9CLFNBQVdBLEVBQ1h3K0IsV0FBWXgrQixHQUFVQSxFQUFPMXBCLFFBQzdCMG9ELG1CQUFvQkEsRUFDcEJsZ0MsV0FBYW5ILEVBQVNtSCxTQUN0QkUsUUFBVXJILEVBQVNxSCxNQUNuQlksY0FBZ0JqSSxFQUFTaUksWUFDekJWLFVBQVl2SCxFQUFTdUgsUUFDckJFLFlBQWN6SCxFQUFTeUgsVUFDdkIwaEMscUJBenRsQjBCLElBeXRsQkpucEMsRUFBUzBILGNBQy9Ca2dDLHNCQTN0bEIyQixJQTJ0bEJKNW5DLEVBQVMwSCxjQUVoQ29pQyxxQkFBdUI5cEMsRUFBU2pnQyxNQUF5QyxJQUFoQ2lnQyxFQUFTamdDLElBQUkwdUUsZ0JBQStCenVDLEVBQVNqZ0MsSUFBSW9mLFdBQWE5UCxFQUUvR3MzQixVQUFXNG5DLEVBQ1gxbkMsYUFBYzBuQyxLQUFtQnZ1QyxFQUFTNkcsYUFDMUNDLHNCQUF1QnluQyxLQUFtQnZ1QyxFQUFTOEcsc0JBQ25EQyxtQkFBb0J3bkMsS0FBbUJ2dUMsRUFBUytHLG1CQUVoRGEsa0JBQW9CNUgsRUFBUzRILGdCQUM3QkcsZUFBaUIvSCxFQUFTK0gsYUFDMUJDLGVBQWlCaEksRUFBU2dJLGFBQzFCRSxjQUFnQmxJLEVBQVNrSSxZQUN6QkMsdUJBQXlCbkksRUFBU21JLHFCQUNsQ0MsbUJBQXFCcEksRUFBU29JLGlCQUU5QjRoQyxRQUFpQyxJQUF6QmhxQyxFQUFTd0QsYUF6MmxCRyxJQXkybEJzQnhELEVBQVNvRCxTQUVuRDhELFdBQWFsSCxFQUFTa0gsU0FDdEIxQixVQUFXOG9DLEVBRVg1bEMsY0FBZ0IxSSxFQUFTMEksWUFFekJ4QyxNQUFPbEcsRUFBU2tHLE1BQVEsRUFDeEJvdEIsZ0JBQWtCdHpCLEVBQVNzekIsY0FDM0JDLG9CQUFzQnZ6QixFQUFTdXpCLGtCQUUvQjVxQixhQUFjM0ksRUFBUzJJLGFBQWUsRUFDdENDLGtCQUFvQjVJLEVBQVM0SSxnQkFDN0JFLGVBQWlCOUksRUFBUzhJLGFBRTFCUixRQUFTdEksRUFBU3NJLFFBRWxCOGdDLGlCQUFxQnBwQyxFQUFTeUgsYUFBZ0JsYSxFQUFTQyxXQUFXd2YsUUFDbEUxSixhQUFjdEQsRUFBU3NELGFBQ3ZCK2xDLGNBQXdDLElBQTFCcnBDLEVBQVNzRCxnQkFBNEIvVixFQUFTQyxXQUFXNTVCLE9BQWdELElBQXZDMjVCLEVBQVNDLFdBQVc1NUIsTUFBTXMyQyxTQUMxR28vQixhQUFjdHBDLEVBQVNqZ0MsS0FBVWlnQyxFQUFTdUgsU0FBY3ZILEVBQVN5SCxXQUFnQnpILEVBQVNrSSxhQUFrQmxJLEVBQVNrSCxVQUFlbEgsRUFBU2lJLGFBQWtCakksRUFBUytILGNBQW1CL0gsRUFBU2dJLGNBQW1CaEksRUFBUzZHLGNBQW1CN0csRUFBUzhHLHVCQUE0QjlHLEVBQVMrRyxvQkFBeUIvRyxFQUFTNEgsaUJBQXNCNUgsRUFBUzRJLGlCQUFzQjVJLEVBQVM4SSxjQUFtQjlJLEVBQVNtSSxzQkFBMkJuSSxFQUFTb0ksa0JBQXVCcEksRUFBU3N6QixlQUFvQnR6QixFQUFTdXpCLG1CQUM5ZmdXLGdCQUFzQnZwQyxFQUFTamdDLEtBQVVpZ0MsRUFBU3VILFNBQWN2SCxFQUFTeUgsV0FBZ0J6SCxFQUFTa0ksYUFBa0JsSSxFQUFTa0gsVUFBZWxILEVBQVNpSSxhQUFrQmpJLEVBQVMrSCxjQUFtQi9ILEVBQVNnSSxjQUFtQmhJLEVBQVMrRyxvQkFBc0IvRyxFQUFTMkksYUFBZSxHQUFRM0ksRUFBUzRJLGlCQUFzQjVJLEVBQVM4SSxjQUFtQjlJLEVBQVNtSSxzQkFBMkJuSSxFQUFTb0ksa0JBQW9CcEksRUFBU2tHLE1BQVEsR0FBUWxHLEVBQVNzekIsZUFBb0J0ekIsRUFBU3V6QixvQkFBMEJ2ekIsRUFBUzRILGlCQUU1ZnpFLE1BQVFBLEVBQ1I4bEMsT0FBUWpwQyxFQUFTbUQsSUFDakIrbEMsUUFBVy9sQyxHQUFPQSxFQUFJdXJDLFVBRXRCNW9DLGNBQWdCOUYsRUFBUzhGLFlBRXpCbUQsZ0JBQWlCakosRUFBU2lKLGdCQUMxQnNuQix1QkFBd0JBLEVBRXhCaVosVUFBbUMsSUFBekI3OEMsRUFBT2lULGVBQTBCb3BDLEVBQVcsRUFDdERBLFNBQVVBLEVBQ1ZTLGlCQUFrQnJZLEVBRWxCeGYsa0JBQW9EemtDLElBQXRDb2dCLEVBQVMyZSxnQkFBZ0J6ZSxTQUN2Q3V1QyxrQkFBa0Q3dUQsSUFBcENvZ0IsRUFBUzJlLGdCQUFnQnRoQixPQUN2Q3F4QyxpQkFBZ0Q5dUQsSUFBbkNvZ0IsRUFBUzJlLGdCQUFnQnQ0QyxNQUN0QytuRSxrQkFBbUJBLEVBQ25CK04sbUJBQW9CQSxFQUVwQjFFLGFBQWN0d0IsRUFBT2k2QixZQUFZbGlGLE9BQ2pDMDRFLGVBQWdCendCLEVBQU94bkIsTUFBTXpnQyxPQUM3Qnc0RSxjQUFldndCLEVBQU9rNkIsS0FBS25pRixPQUMzQnk0RSxrQkFBbUJ4d0IsRUFBT202QixTQUFTcGlGLE9BQ25DMjRFLGNBQWUxd0IsRUFBT282QixLQUFLcmlGLE9BRTNCNDRFLG1CQUFvQjN3QixFQUFPdVQscUJBQXFCeDdELE9BQ2hEODRFLHFCQUFzQjd3QixFQUFPb1UsZUFBZXI4RCxPQUM1QzY0RSxvQkFBcUI1d0IsRUFBTzhULGNBQWMvN0QsT0FFMUNnNUUsa0JBQW1COXdCLEVBQVNtZCxVQUM1QjRULG9CQUFxQi93QixFQUFTb2QsZ0JBRTlCNXNCLFVBQVduRixFQUFTbUYsVUFFcEIwa0MsaUJBQWtCbHlCLEVBQVNvM0IsVUFBVW40QixTQUFXazNCLEVBQVFyaEYsT0FBUyxFQUNqRWk2RSxjQUFlL3VCLEVBQVNvM0IsVUFBVXZxRSxLQUVsQzB6QyxZQUFhbFksRUFBU3NGLFdBQWFxUyxFQUFTTyxZQXI0bEJ6QixFQXM0bEJuQjZ4Qix3QkFBeUJweUIsRUFBU295Qix3QkFFbEMxa0MsbUJBQW9CckYsRUFBU3FGLG1CQUU3QnNrQyxZQTk2bEJnQixJQTg2bEJIM3BDLEVBQVNxRCxLQUN0QnVtQyxVQWg3bEJjLElBZzdsQkg1cEMsRUFBU3FELEtBRXBCNG1DLGtCQUEwQzk4RCxJQUExQjZ5QixFQUFTaXFDLGNBQStCanFDLEVBQVNpcUMsYUFFakUvMEIsb0JBQXFCbFYsRUFBU2tWLG9CQUU5Qnl5QixxQkFBc0IzbkMsRUFBUzRVLFlBQWM1VSxFQUFTNFUsV0FBV0MsWUFDakVpekIsbUJBQW9COW5DLEVBQVM0VSxZQUFjNVUsRUFBUzRVLFdBQVdFLFVBQy9Ea3pCLHFCQUFzQmhvQyxFQUFTNFUsWUFBYzVVLEVBQVM0VSxXQUFXRyxZQUNqRW16QiwwQkFBMkJsb0MsRUFBUzRVLFlBQWM1VSxFQUFTNFUsV0FBV0ksaUJBRXRFK3lCLDJCQUE0QnByQixHQUFZL0gsRUFBVzBiLElBQUssa0JBQ3hEMlgsNkJBQThCdHJCLEdBQVkvSCxFQUFXMGIsSUFBSyxzQkFDMUQ2WCxrQ0FBbUN4ckIsR0FBWS9ILEVBQVcwYixJQUFLLDBCQUUvRDNxQixzQkFBdUIzRixFQUFTMkYsMEJBMFJqQ3FwQyxtQkFsUkQsU0FBNkJ0dkMsR0FFNUIsTUFBTXJ2QixFQUFRLEdBYWQsR0FYS3F2QixFQUFXbW9DLFNBRWZ4M0QsRUFBTWxnQixLQUFNdXZDLEVBQVdtb0MsV0FJdkJ4M0QsRUFBTWxnQixLQUFNdXZDLEVBQVcwdUMsc0JBQ3ZCLzlELEVBQU1sZ0IsS0FBTXV2QyxFQUFXMnVDLDhCQUlJbGhFLElBQXZCdXlCLEVBQVc2VSxRQUVmLElBQU0sTUFBTXZ3QyxLQUFRMDdCLEVBQVc2VSxRQUU5QmxrQyxFQUFNbGdCLEtBQU02VCxHQUNacU0sRUFBTWxnQixLQUFNdXZDLEVBQVc2VSxRQUFTdndDLElBZ0JsQyxPQVZ3QyxJQUFuQzA3QixFQUFXaXBDLHNCQWNqQixTQUF1Q3Q0RCxFQUFPcXZCLEdBRTdDcnZCLEVBQU1sZ0IsS0FBTXV2QyxFQUFXcUYsV0FDdkIxMEIsRUFBTWxnQixLQUFNdXZDLEVBQVdzWSxnQkFDdkIzbkMsRUFBTWxnQixLQUFNdXZDLEVBQVdtbkMsWUFDdkJ4MkQsRUFBTWxnQixLQUFNdXZDLEVBQVcybkMsb0JBQ3ZCaDNELEVBQU1sZ0IsS0FBTXV2QyxFQUFXNEksU0FDdkJqNEIsRUFBTWxnQixLQUFNdXZDLEVBQVc0cEMsV0FDdkJqNUQsRUFBTWxnQixLQUFNdXZDLEVBQVd3cEMsU0FDdkI3NEQsRUFBTWxnQixLQUFNdXZDLEVBQVd1SixpQkFDdkI1NEIsRUFBTWxnQixLQUFNdXZDLEVBQVdzcEMsVUFDdkIzNEQsRUFBTWxnQixLQUFNdXZDLEVBQVdpOEIsbUJBQ3ZCdHJELEVBQU1sZ0IsS0FBTXV2QyxFQUFXdXZDLHFCQUN2QjUrRCxFQUFNbGdCLEtBQU11dkMsRUFBV3NsQyxjQUN2QjMwRCxFQUFNbGdCLEtBQU11dkMsRUFBV3lsQyxnQkFDdkI5MEQsRUFBTWxnQixLQUFNdXZDLEVBQVd1bEMsZUFDdkI1MEQsRUFBTWxnQixLQUFNdXZDLEVBQVcwbEMsZUFDdkIvMEQsRUFBTWxnQixLQUFNdXZDLEVBQVd3bEMsbUJBQ3ZCNzBELEVBQU1sZ0IsS0FBTXV2QyxFQUFXMmxDLG9CQUN2QmgxRCxFQUFNbGdCLEtBQU11dkMsRUFBVzZsQyxzQkFDdkJsMUQsRUFBTWxnQixLQUFNdXZDLEVBQVc0bEMscUJBQ3ZCajFELEVBQU1sZ0IsS0FBTXV2QyxFQUFXZ25DLGVBQ3ZCcjJELEVBQU1sZ0IsS0FBTXV2QyxFQUFXd1ksYUFDdkI3bkMsRUFBTWxnQixLQUFNdXZDLEVBQVcrbEMsbUJBQ3ZCcDFELEVBQU1sZ0IsS0FBTXV2QyxFQUFXZ21DLHFCQXBDdEJ3SixDQUE4QjcrRCxFQUFPcXZCLEdBd0N2QyxTQUFxQ3J2QixFQUFPcXZCLEdBRTNDa3RDLEVBQWV4eUMsYUFFVnNGLEVBQVdpZCxVQUNmaXdCLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVdxcEMsd0JBQ2Y2RCxFQUFlNXlDLE9BQVEsR0FDbkIwRixFQUFXbXBDLFlBQ2YrRCxFQUFlNXlDLE9BQVEsR0FDbkIwRixFQUFXb3BDLGlCQUNmOEQsRUFBZTV5QyxPQUFRLEdBQ25CMEYsRUFBVzMvQixLQUNmNnNFLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVd1SCxRQUNmMmxDLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVcySSxRQUNmdWtDLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVd5SCxVQUNmeWxDLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVcySCxPQUNmdWxDLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVd1SSxhQUNmMmtDLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVc2SCxTQUNmcWxDLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVcrSCxXQUNmbWxDLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVd5cEMsc0JBQ2Z5RCxFQUFlNXlDLE9BQVEsSUFDbkIwRixFQUFXa29DLHVCQUNmZ0YsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV2lILFdBQ2ZpbUMsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV21ILGNBQ2YrbEMsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV29ILHVCQUNmOGxDLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVdxSCxvQkFDZjZsQyxFQUFlNXlDLE9BQVEsSUFDbkIwRixFQUFXa0ksaUJBQ2ZnbEMsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV3dJLGFBQ2Ywa0MsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV3FJLGNBQ2Y2a0MsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV3NJLGNBQ2Y0a0MsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV2dKLGFBQ2Zra0MsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV3dILFVBQ2YwbEMsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBVzhGLFdBQ2ZvbkMsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBVzRELGNBQ2ZzcEMsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBVzJwQyxjQUNmdUQsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBVzRwQyxXQUNmc0QsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBVzBwQyxnQkFDZndELEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVc2cEMsZUFDZnFELEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVd5RCxLQUNmeXBDLEVBQWU1eUMsT0FBUSxJQUV4QjNwQixFQUFNbGdCLEtBQU15OEUsRUFBZTl5QyxNQUMzQjh5QyxFQUFleHlDLGFBRVZzRixFQUFXdXBDLFFBQ2YyRCxFQUFlNXlDLE9BQVEsR0FDbkIwRixFQUFXb0csYUFDZjhtQyxFQUFlNXlDLE9BQVEsR0FDbkIwRixFQUFXNndCLHdCQUNmcWMsRUFBZTV5QyxPQUFRLEdBQ25CMEYsRUFBVzhwQyxVQUNmb0QsRUFBZTV5QyxPQUFRLEdBQ25CMEYsRUFBVytwQyxrQkFDZm1ELEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVdrUyxjQUNmZzdCLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVdzOEIsY0FDZjRRLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVd1OEIsYUFDZjJRLEVBQWU1eUMsT0FBUSxHQUNuQjBGLEVBQVcyRixvQkFDZnVuQyxFQUFlNXlDLE9BQVEsR0FDbkIwRixFQUFXbXFDLGtCQUNmK0MsRUFBZTV5QyxPQUFRLEdBQ25CMEYsRUFBV3FxQyx5QkFDZjZDLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVdpcUMsYUFDZmlELEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVdrcUMsV0FDZmdELEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVd1cUMsY0FDZjJDLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVd5RixXQUNmeW5DLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVd5SSxzQkFDZnlrQyxFQUFlNXlDLE9BQVEsSUFDbkIwRixFQUFXMEksa0JBQ2Z3a0MsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV2lKLGNBQ2Zpa0MsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV2tKLGlCQUNmZ2tDLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVdvSixjQUNmOGpDLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVd3RyxPQUNmMG1DLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVc0ekIsZUFDZnNaLEVBQWU1eUMsT0FBUSxJQUNuQjBGLEVBQVc2ekIsbUJBQ2ZxWixFQUFlNXlDLE9BQVEsSUFDbkIwRixFQUFXb3FDLG9CQUNmOEMsRUFBZTV5QyxPQUFRLElBQ25CMEYsRUFBV3NxQyxRQUNmNEMsRUFBZTV5QyxPQUFRLElBRXhCM3BCLEVBQU1sZ0IsS0FBTXk4RSxFQUFlOXlDLE1BaEsxQnExQyxDQUE0QjkrRCxFQUFPcXZCLEdBQ25DcnZCLEVBQU1sZ0IsS0FBTXduRCxFQUFTSyxpQkFJdEIzbkMsRUFBTWxnQixLQUFNdXZDLEVBQVdpRyx1QkFFaEJ0MUIsRUFBTXZYLFFBK09iNGpFLFlBbEZELFNBQXNCMThCLEdBRXJCLE1BQU02bkMsRUFBV2lGLEVBQVc5c0MsRUFBU3g3QixNQUNyQyxJQUFJMnZDLEVBRUosR0FBSzB6QixFQUFXLENBRWYsTUFBTWx2QixFQUFTMlEsR0FBV3VlLEdBQzFCMXpCLEVBQVdFLEdBQWMzaUMsTUFBT2luQyxFQUFPeEUsZUFJdkNBLEVBQVduVSxFQUFTbVUsU0FJckIsT0FBT0EsR0FtRVBpN0IsZUEvREQsU0FBeUIxdkMsRUFBWThtQyxHQUVwQyxJQUFJdFosRUFHSixJQUFNLElBQUloOEQsRUFBSSxFQUFHbStFLEVBQUt0VSxFQUFTdHVFLE9BQVF5RSxFQUFJbStFLEVBQUluK0UsSUFBTyxDQUVyRCxNQUFNbytFLEVBQXFCdlUsRUFBVTdwRSxHQUVyQyxHQUFLbytFLEVBQW1COUksV0FBYUEsRUFBVyxDQUUvQ3RaLEVBQVVvaUIsSUFDUHBpQixFQUFRc2UsVUFFWCxPQWFGLFlBUGlCcitELElBQVorL0MsSUFFSkEsRUFBVSxJQUFJcVosR0FBYzV1QixFQUFVNnVCLEVBQVU5bUMsRUFBWXlzQixHQUM1RDRPLEVBQVM1cUUsS0FBTSs4RCxJQUlUQSxHQXFDUHFpQixlQWpDRCxTQUF5QnJpQixHQUV4QixHQUE4QixLQUF0QkEsRUFBUXNlLFVBQWtCLENBR2pDLE1BQU0vOEUsRUFBSXNzRSxFQUFTempFLFFBQVM0MUQsR0FDNUI2TixFQUFVdHNFLEdBQU1zc0UsRUFBVUEsRUFBU3R1RSxPQUFTLEdBQzVDc3VFLEVBQVN2Z0UsTUFHVDB5RCxFQUFRb2UsWUF3QlRrRSxtQkFsQkQsU0FBNkJ4dkMsR0FFNUI2c0MsRUFBZXZ2QyxPQUFRMEMsSUFrQnZCKzZCLFNBQVVBLEVBQ1Z0NkMsUUFmRCxXQUVDb3NELEVBQWVwc0QsWUFrQmpCLFNBQVNndkQsS0FFUixJQUFJOW5CLEVBQWEsSUFBSTlLLFFBbUNyQixNQUFPLENBQ050NEMsSUFsQ0QsU0FBY29vQixHQUViLElBQUk1c0IsRUFBTTRuRCxFQUFXcGpELElBQUtvb0IsR0FTMUIsWUFQYXhmLElBQVJwTixJQUVKQSxFQUFNLEdBQ040bkQsRUFBV3J0RCxJQUFLcXlCLEVBQVE1c0IsSUFJbEJBLEdBd0JQdTlCLE9BcEJELFNBQWlCM1EsR0FFaEJnN0IsRUFBVzFpRCxPQUFRMG5CLElBbUJuQmpILE9BZkQsU0FBaUJpSCxFQUFRMlQsRUFBSzN6QyxHQUU3Qmc3RCxFQUFXcGpELElBQUtvb0IsR0FBVTJULEdBQVEzekMsR0FjbEM4ekIsUUFWRCxXQUVDa25DLEVBQWEsSUFBSTlLLFVBYW5CLFNBQVM2eUIsR0FBbUJuakYsRUFBR0MsR0FFOUIsT0FBS0QsRUFBRW9qRixhQUFlbmpGLEVBQUVtakYsV0FFaEJwakYsRUFBRW9qRixXQUFhbmpGLEVBQUVtakYsV0FFYnBqRixFQUFFd3ZDLGNBQWdCdnZDLEVBQUV1dkMsWUFFeEJ4dkMsRUFBRXd2QyxZQUFjdnZDLEVBQUV1dkMsWUFFZHh2QyxFQUFFeXpDLFNBQVN0QyxLQUFPbHhDLEVBQUV3ekMsU0FBU3RDLEdBRWpDbnhDLEVBQUV5ekMsU0FBU3RDLEdBQUtseEMsRUFBRXd6QyxTQUFTdEMsR0FFdkJueEMsRUFBRXNDLElBQU1yQyxFQUFFcUMsRUFFZHRDLEVBQUVzQyxFQUFJckMsRUFBRXFDLEVBSVJ0QyxFQUFFbXhDLEdBQUtseEMsRUFBRWt4QyxHQU1sQixTQUFTa3lDLEdBQTBCcmpGLEVBQUdDLEdBRXJDLE9BQUtELEVBQUVvakYsYUFBZW5qRixFQUFFbWpGLFdBRWhCcGpGLEVBQUVvakYsV0FBYW5qRixFQUFFbWpGLFdBRWJwakYsRUFBRXd2QyxjQUFnQnZ2QyxFQUFFdXZDLFlBRXhCeHZDLEVBQUV3dkMsWUFBY3Z2QyxFQUFFdXZDLFlBRWR4dkMsRUFBRXNDLElBQU1yQyxFQUFFcUMsRUFFZHJDLEVBQUVxQyxFQUFJdEMsRUFBRXNDLEVBSVJ0QyxFQUFFbXhDLEdBQUtseEMsRUFBRWt4QyxHQU9sQixTQUFTbXlDLEtBRVIsTUFBTUMsRUFBYyxHQUNwQixJQUFJQyxFQUFtQixFQUV2QixNQUFNL0YsRUFBUyxHQUNUZ0csRUFBZSxHQUNmeHNDLEVBQWMsR0FZcEIsU0FBU3lzQyxFQUFtQnRqRCxFQUFRWSxFQUFVeVMsRUFBVTJ2QyxFQUFZOWdGLEVBQUcyL0MsR0FFdEUsSUFBSTBoQyxFQUFhSixFQUFhQyxHQWdDOUIsWUE5Qm9CNWlFLElBQWYraUUsR0FFSkEsRUFBYSxDQUNaeHlDLEdBQUkvUSxFQUFPK1EsR0FDWC9RLE9BQVFBLEVBQ1JZLFNBQVVBLEVBQ1Z5UyxTQUFVQSxFQUNWMnZDLFdBQVlBLEVBQ1o1ekMsWUFBYXBQLEVBQU9vUCxZQUNwQmx0QyxFQUFHQSxFQUNIMi9DLE1BQU9BLEdBR1JzaEMsRUFBYUMsR0FBcUJHLElBSWxDQSxFQUFXeHlDLEdBQUsvUSxFQUFPK1EsR0FDdkJ3eUMsRUFBV3ZqRCxPQUFTQSxFQUNwQnVqRCxFQUFXM2lELFNBQVdBLEVBQ3RCMmlELEVBQVdsd0MsU0FBV0EsRUFDdEJrd0MsRUFBV1AsV0FBYUEsRUFDeEJPLEVBQVduMEMsWUFBY3BQLEVBQU9vUCxZQUNoQ20wQyxFQUFXcmhGLEVBQUlBLEVBQ2ZxaEYsRUFBVzFoQyxNQUFRQSxHQUlwQnVoQyxJQUVPRyxFQXdFUixNQUFPLENBRU5sRyxPQUFRQSxFQUNSZ0csYUFBY0EsRUFDZHhzQyxZQUFhQSxFQUViK3VCLEtBMUhELFdBRUN3ZCxFQUFtQixFQUVuQi9GLEVBQU92OUUsT0FBUyxFQUNoQnVqRixFQUFhdmpGLE9BQVMsRUFDdEIrMkMsRUFBWS8yQyxPQUFTLEdBcUhyQjBELEtBM0VELFNBQWV3OEIsRUFBUVksRUFBVXlTLEVBQVUydkMsRUFBWTlnRixFQUFHMi9DLEdBRXpELE1BQU0waEMsRUFBYUQsRUFBbUJ0akQsRUFBUVksRUFBVXlTLEVBQVUydkMsRUFBWTlnRixFQUFHMi9DLEdBRTVFeE8sRUFBUzJJLGFBQWUsRUFFNUJxbkMsRUFBYTcvRSxLQUFNKy9FLElBRWlCLElBQXpCbHdDLEVBQVN3RCxZQUVwQkEsRUFBWXJ6QyxLQUFNKy9FLEdBSWxCbEcsRUFBTzc1RSxLQUFNKy9FLElBOERkcGtCLFFBeERELFNBQWtCbi9CLEVBQVFZLEVBQVV5UyxFQUFVMnZDLEVBQVk5Z0YsRUFBRzIvQyxHQUU1RCxNQUFNMGhDLEVBQWFELEVBQW1CdGpELEVBQVFZLEVBQVV5UyxFQUFVMnZDLEVBQVk5Z0YsRUFBRzIvQyxHQUU1RXhPLEVBQVMySSxhQUFlLEVBRTVCcW5DLEVBQWFsa0IsUUFBU29rQixJQUVjLElBQXpCbHdDLEVBQVN3RCxZQUVwQkEsRUFBWXNvQixRQUFTb2tCLEdBSXJCbEcsRUFBT2xlLFFBQVNva0IsSUEyQ2pCQyxPQTdCRCxXQUlDLElBQU0sSUFBSTFoRixFQUFJc2hGLEVBQWtCcnNELEVBQUtvc0QsRUFBWXJqRixPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBQU8sQ0FFdkUsTUFBTXloRixFQUFhSixFQUFhcmhGLEdBRWhDLEdBQXVCLE9BQWxCeWhGLEVBQVd4eUMsR0FBYyxNQUU5Qnd5QyxFQUFXeHlDLEdBQUssS0FDaEJ3eUMsRUFBV3ZqRCxPQUFTLEtBQ3BCdWpELEVBQVczaUQsU0FBVyxLQUN0QjJpRCxFQUFXbHdDLFNBQVcsS0FDdEJrd0MsRUFBVzFoQyxNQUFRLE9BaUJwQnF1QixLQXZDRCxTQUFldVQsRUFBa0JDLEdBRTNCckcsRUFBT3Y5RSxPQUFTLEdBQUl1OUUsRUFBT25OLEtBQU11VCxHQUFvQlYsSUFDckRNLEVBQWF2akYsT0FBUyxHQUFJdWpGLEVBQWFuVCxLQUFNd1QsR0FBeUJULElBQ3RFcHNDLEVBQVkvMkMsT0FBUyxHQUFJKzJDLEVBQVlxNUIsS0FBTXdULEdBQXlCVCxNQXdDM0UsU0FBU1UsS0FFUixJQUFJQyxFQUFRLElBQUkxekIsUUFvQ2hCLE1BQU8sQ0FDTnQ0QyxJQW5DRCxTQUFjcXpDLEVBQU80NEIsR0FFcEIsSUFBSUMsRUFzQkosT0FwQjRCLElBQXZCRixFQUFNamdCLElBQUsxWSxJQUVmNjRCLEVBQU8sSUFBSVosR0FDWFUsRUFBTWoyRSxJQUFLczlDLEVBQU8sQ0FBRTY0QixLQUlmRCxHQUFtQkQsRUFBTWhzRSxJQUFLcXpDLEdBQVFuckQsUUFFMUNna0YsRUFBTyxJQUFJWixHQUNYVSxFQUFNaHNFLElBQUtxekMsR0FBUXpuRCxLQUFNc2dGLElBSXpCQSxFQUFPRixFQUFNaHNFLElBQUtxekMsR0FBUzQ0QixHQU10QkMsR0FZUGh3RCxRQVJELFdBRUM4dkQsRUFBUSxJQUFJMXpCLFVBV2QsU0FBUzZ6QixLQUVSLE1BQU1oOEIsRUFBUyxHQUVmLE1BQU8sQ0FFTm53QyxJQUFLLFNBQVdvc0UsR0FFZixRQUE0QnhqRSxJQUF2QnVuQyxFQUFRaThCLEVBQU1qekMsSUFFbEIsT0FBT2dYLEVBQVFpOEIsRUFBTWp6QyxJQUl0QixJQUFJeVcsRUFFSixPQUFTdzhCLEVBQU1uc0UsTUFFZCxJQUFLLG1CQUNKMnZDLEVBQVcsQ0FDVjdpQixVQUFXLElBQUk5SSxHQUNmNTBCLE1BQU8sSUFBSSttQixJQUVaLE1BRUQsSUFBSyxZQUNKdzVCLEVBQVcsQ0FDVjFtQixTQUFVLElBQUlqRixHQUNkOEksVUFBVyxJQUFJOUksR0FDZjUwQixNQUFPLElBQUkrbUIsR0FDWGtpQixTQUFVLEVBQ1Z1ckIsUUFBUyxFQUNUQyxZQUFhLEVBQ2JDLE1BQU8sR0FFUixNQUVELElBQUssYUFDSm5VLEVBQVcsQ0FDVjFtQixTQUFVLElBQUlqRixHQUNkNTBCLE1BQU8sSUFBSSttQixHQUNYa2lCLFNBQVUsRUFDVnlyQixNQUFPLEdBRVIsTUFFRCxJQUFLLGtCQUNKblUsRUFBVyxDQUNWN2lCLFVBQVcsSUFBSTlJLEdBQ2Z5Z0MsU0FBVSxJQUFJdHVDLEdBQ2R1dUMsWUFBYSxJQUFJdnVDLElBRWxCLE1BRUQsSUFBSyxnQkFDSnc1QixFQUFXLENBQ1Z2Z0QsTUFBTyxJQUFJK21CLEdBQ1g4UyxTQUFVLElBQUlqRixHQUNkb29ELFVBQVcsSUFBSXBvRCxHQUNmcW9ELFdBQVksSUFBSXJvRCxJQVFuQixPQUZBa3NCLEVBQVFpOEIsRUFBTWp6QyxJQUFPeVcsRUFFZEEsSUF1RVYsSUFBSTI4QixHQUFjLEVBRWxCLFNBQVNDLEdBQTBCQyxFQUFRQyxHQUUxQyxPQUFTQSxFQUFPcjFDLFdBQWEsRUFBSSxJQUFRbzFDLEVBQU9wMUMsV0FBYSxFQUFJLEdBSWxFLFNBQVNzMUMsR0FBYXQ4QixFQUFZOEgsR0FFakMsTUFBTXRjLEVBQVEsSUFBSXN3QyxHQUVaUyxFQTNFUCxXQUVDLE1BQU16OEIsRUFBUyxHQUVmLE1BQU8sQ0FFTm53QyxJQUFLLFNBQVdvc0UsR0FFZixRQUE0QnhqRSxJQUF2QnVuQyxFQUFRaThCLEVBQU1qekMsSUFFbEIsT0FBT2dYLEVBQVFpOEIsRUFBTWp6QyxJQUl0QixJQUFJeVcsRUFFSixPQUFTdzhCLEVBQU1uc0UsTUFFZCxJQUFLLG1CQVNMLElBQUssWUFDSjJ2QyxFQUFXLENBQ1YwVCxXQUFZLEVBQ1pDLGlCQUFrQixFQUNsQkMsYUFBYyxFQUNkQyxjQUFlLElBQUk3MkMsR0FFcEIsTUFFRCxJQUFLLGFBQ0pnakMsRUFBVyxDQUNWMFQsV0FBWSxFQUNaQyxpQkFBa0IsRUFDbEJDLGFBQWMsRUFDZEMsY0FBZSxJQUFJNzJDLEVBQ25CeTNDLGlCQUFrQixFQUNsQkMsZ0JBQWlCLEtBVXBCLE9BRkFuVSxFQUFRaThCLEVBQU1qekMsSUFBT3lXLEVBRWRBLElBc0JXaTlCLEdBRWQ1bUIsRUFBUSxDQUViMXNDLFFBQVMsRUFFVHV6RCxLQUFNLENBQ0xDLG1CQUFxQixFQUNyQkMsYUFBZSxFQUNmQyxZQUFjLEVBQ2RDLGdCQUFrQixFQUNsQkMsWUFBYyxFQUVkQyx1QkFBeUIsRUFDekJDLGlCQUFtQixFQUNuQkMsZ0JBQWtCLEdBR25CQyxRQUFTLENBQUUsRUFBRyxFQUFHLEdBQ2pCQyxNQUFPLEdBQ1BwRCxZQUFhLEdBQ2JxRCxrQkFBbUIsR0FDbkIvcEIscUJBQXNCLEdBQ3RCQyx3QkFBeUIsR0FDekIwbUIsS0FBTSxHQUNOcUQsV0FBWSxHQUNaenBCLGNBQWUsR0FDZkMsaUJBQWtCLEdBQ2xCb21CLFNBQVUsR0FDVnFELGFBQWMsS0FDZEMsYUFBYyxLQUNkamxELE1BQU8sR0FDUGtsRCxZQUFhLEdBQ2J0cEIsZUFBZ0IsR0FDaEJDLGtCQUFtQixHQUNuQitsQixLQUFNLElBSVAsSUFBTSxJQUFJcmdGLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUFPKzdELEVBQU11bkIsTUFBTTVoRixLQUFNLElBQUlxNEIsSUFFckQsTUFBTTZwRCxFQUFVLElBQUk3cEQsR0FDZHZRLEVBQVUsSUFBSWtjLEdBQ2RtK0MsRUFBVyxJQUFJbitDLEdBc1ZyQixNQUFPLENBQ051NUIsTUFyVkQsU0FBZ0JoWixFQUFRcTFCLEdBRXZCLElBQUk1NEUsRUFBSSxFQUFHNUQsRUFBSSxFQUFHZixFQUFJLEVBRXRCLElBQU0sSUFBSWlDLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUFPKzdELEVBQU11bkIsTUFBT3RqRixHQUFJNkwsSUFBSyxFQUFHLEVBQUcsR0FFM0QsSUFBSWczRSxFQUFvQixFQUNwQkMsRUFBYyxFQUNkQyxFQUFhLEVBQ2JDLEVBQWlCLEVBQ2pCQyxFQUFhLEVBRWJDLEVBQXdCLEVBQ3hCQyxFQUFrQixFQUNsQkMsRUFBaUIsRUFFckJuOUIsRUFBT21vQixLQUFNa1UsSUFHYixNQUFNd0IsR0FBNEMsSUFBNUJ4SSxFQUFxQ3Y4RSxLQUFLb0gsR0FBSyxFQUVyRSxJQUFNLElBQUluRyxFQUFJLEVBQUdXLEVBQUlzbEQsRUFBT2pvRCxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUVqRCxNQUFNa2lGLEVBQVFqOEIsRUFBUWptRCxHQUVoQm1GLEVBQVErOEUsRUFBTS84RSxNQUNkNCtFLEVBQVk3QixFQUFNNkIsVUFDbEIzMUMsRUFBVzh6QyxFQUFNOXpDLFNBRWpCa3lDLEVBQWM0QixFQUFNdG1CLFFBQVVzbUIsRUFBTXRtQixPQUFPdHFELElBQVE0d0UsRUFBTXRtQixPQUFPdHFELElBQUk0aUIsUUFBVSxLQUVwRixHQUFLZ3VELEVBQU04QixlQUVWdGhGLEdBQUt5QyxFQUFNekMsRUFBSXFoRixFQUFZRCxFQUMzQmhsRixHQUFLcUcsRUFBTXJHLEVBQUlpbEYsRUFBWUQsRUFDM0IvbEYsR0FBS29ILEVBQU1wSCxFQUFJZ21GLEVBQVlELE9BRXJCLEdBQUs1QixFQUFNK0IsYUFFakIsSUFBTSxJQUFJL2pGLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2QjY3RCxFQUFNdW5CLE1BQU9wakYsR0FBSXFqQixnQkFBaUIyK0QsRUFBTWdDLEdBQUdDLGFBQWNqa0YsR0FBSzZqRixRQUl6RCxHQUFLN0IsRUFBTWtDLG1CQUFxQixDQUV0QyxNQUFNMStCLEVBQVcvVCxFQUFNNzdCLElBQUtvc0UsR0FJNUIsR0FGQXg4QixFQUFTdmdELE1BQU0rZCxLQUFNZy9ELEVBQU0vOEUsT0FBUXllLGVBQWdCcytELEVBQU02QixVQUFZRCxHQUVoRTVCLEVBQU0vMEMsV0FBYSxDQUV2QixNQUFNeXVCLEVBQVNzbUIsRUFBTXRtQixPQUVmeW9CLEVBQWlCM0IsRUFBWTVzRSxJQUFLb3NFLEdBRXhDbUMsRUFBZWpyQixXQUFhd0MsRUFBTzBvQixLQUNuQ0QsRUFBZWhyQixpQkFBbUJ1QyxFQUFPMm9CLFdBQ3pDRixFQUFlL3FCLGFBQWVzQyxFQUFPdjJELE9BQ3JDZy9FLEVBQWU5cUIsY0FBZ0JxQyxFQUFPNG9CLFFBRXRDem9CLEVBQU13bkIsa0JBQW1CVixHQUFzQndCLEVBQy9DdG9CLEVBQU12QyxxQkFBc0JxcEIsR0FBc0J2QyxFQUNsRHZrQixFQUFNdEMsd0JBQXlCb3BCLEdBQXNCWCxFQUFNdG1CLE9BQU96eEMsT0FFbEUrNEQsSUFJRG5uQixFQUFNbWtCLFlBQWEyQyxHQUFzQm45QixFQUV6Q205QixTQUVNLEdBQUtYLEVBQU11QyxZQUFjLENBRS9CLE1BQU0vK0IsRUFBVy9ULEVBQU03N0IsSUFBS29zRSxHQVc1QixHQVRBeDhCLEVBQVMxbUIsU0FBU3JDLHNCQUF1QnVsRCxFQUFNOW1ELGFBRS9Dc3FCLEVBQVN2Z0QsTUFBTStkLEtBQU0vZCxHQUFReWUsZUFBZ0JtZ0UsRUFBWUQsR0FDekRwK0IsRUFBU3RYLFNBQVdBLEVBRXBCc1gsRUFBU2lVLFFBQVU1NkQsS0FBS21uQixJQUFLZzhELEVBQU1yOUQsT0FDbkM2Z0MsRUFBU2tVLFlBQWM3NkQsS0FBS21uQixJQUFLZzhELEVBQU1yOUQsT0FBVSxFQUFJcTlELEVBQU13QyxXQUMzRGgvQixFQUFTbVUsTUFBUXFvQixFQUFNcm9CLE1BRWxCcW9CLEVBQU0vMEMsV0FBYSxDQUV2QixNQUFNeXVCLEVBQVNzbUIsRUFBTXRtQixPQUVmeW9CLEVBQWlCM0IsRUFBWTVzRSxJQUFLb3NFLEdBRXhDbUMsRUFBZWpyQixXQUFhd0MsRUFBTzBvQixLQUNuQ0QsRUFBZWhyQixpQkFBbUJ1QyxFQUFPMm9CLFdBQ3pDRixFQUFlL3FCLGFBQWVzQyxFQUFPdjJELE9BQ3JDZy9FLEVBQWU5cUIsY0FBZ0JxQyxFQUFPNG9CLFFBRXRDem9CLEVBQU15bkIsV0FBWVQsR0FBZXNCLEVBQ2pDdG9CLEVBQU1oQyxjQUFlZ3BCLEdBQWV6QyxFQUNwQ3ZrQixFQUFNL0IsaUJBQWtCK29CLEdBQWViLEVBQU10bUIsT0FBT3p4QyxPQUVwRGk1RCxJQUlEcm5CLEVBQU1va0IsS0FBTTRDLEdBQWVyOUIsRUFFM0JxOUIsU0FFTSxHQUFLYixFQUFNeUMsZ0JBQWtCLENBRW5DLE1BQU1qL0IsRUFBVy9ULEVBQU03N0IsSUFBS29zRSxHQU01Qng4QixFQUFTdmdELE1BQU0rZCxLQUFNL2QsR0FBUXllLGVBQWdCbWdFLEdBRTdDcitCLEVBQVN5OEIsVUFBVXQyRSxJQUFtQixHQUFkcTJFLEVBQU01K0UsTUFBYSxFQUFLLEdBQ2hEb2lELEVBQVMwOEIsV0FBV3YyRSxJQUFLLEVBQW9CLEdBQWZxMkUsRUFBTTMrRSxPQUFjLEdBRWxEdzRELEVBQU1xa0IsU0FBVTRDLEdBQW1CdDlCLEVBRW5DczlCLFNBRU0sR0FBS2QsRUFBTTBDLGFBQWUsQ0FFaEMsTUFBTWwvQixFQUFXL1QsRUFBTTc3QixJQUFLb3NFLEdBTTVCLEdBSkF4OEIsRUFBU3ZnRCxNQUFNK2QsS0FBTWcvRCxFQUFNLzhFLE9BQVF5ZSxlQUFnQnMrRCxFQUFNNkIsVUFBWUQsR0FDckVwK0IsRUFBU3RYLFNBQVc4ekMsRUFBTTl6QyxTQUMxQnNYLEVBQVNtVSxNQUFRcW9CLEVBQU1yb0IsTUFFbEJxb0IsRUFBTS8wQyxXQUFhLENBRXZCLE1BQU15dUIsRUFBU3NtQixFQUFNdG1CLE9BRWZ5b0IsRUFBaUIzQixFQUFZNXNFLElBQUtvc0UsR0FFeENtQyxFQUFlanJCLFdBQWF3QyxFQUFPMG9CLEtBQ25DRCxFQUFlaHJCLGlCQUFtQnVDLEVBQU8yb0IsV0FDekNGLEVBQWUvcUIsYUFBZXNDLEVBQU92MkQsT0FDckNnL0UsRUFBZTlxQixjQUFnQnFDLEVBQU80b0IsUUFDdENILEVBQWVscUIsaUJBQW1CeUIsRUFBTzdnQyxPQUFPdVAsS0FDaEQrNUMsRUFBZWpxQixnQkFBa0J3QixFQUFPN2dDLE9BQU93UCxJQUUvQ3d4QixFQUFNNG5CLFlBQWFiLEdBQWdCdUIsRUFDbkN0b0IsRUFBTTFCLGVBQWdCeW9CLEdBQWdCeEMsRUFDdEN2a0IsRUFBTXpCLGtCQUFtQndvQixHQUFnQlosRUFBTXRtQixPQUFPenhDLE9BRXREZzVELElBSURwbkIsRUFBTXQ5QixNQUFPcWtELEdBQWdCcDlCLEVBRTdCbzlCLFNBRU0sR0FBS1osRUFBTTJDLGtCQUFvQixDQUVyQyxNQUFNbi9CLEVBQVcvVCxFQUFNNzdCLElBQUtvc0UsR0FFNUJ4OEIsRUFBUzhVLFNBQVN0M0MsS0FBTWcvRCxFQUFNLzhFLE9BQVF5ZSxlQUFnQm1nRSxFQUFZRCxHQUNsRXArQixFQUFTK1UsWUFBWXYzQyxLQUFNZy9ELEVBQU16bkIsYUFBYzcyQyxlQUFnQm1nRSxFQUFZRCxHQUUzRS9uQixFQUFNc2tCLEtBQU00QyxHQUFldjlCLEVBRTNCdTlCLEtBTUdELEVBQWlCLElBRWhCLzBCLEVBQWFDLFdBV3FDLElBQWpEL0gsRUFBVzBiLElBQUssNkJBUHJCOUYsRUFBTTBuQixhQUFlL3JCLEdBQVlvdEIsWUFDakMvb0IsRUFBTTJuQixhQUFlaHNCLEdBQVlxdEIsY0FXaUMsSUFBdEQ1K0IsRUFBVzBiLElBQUssa0NBRTNCOUYsRUFBTTBuQixhQUFlL3JCLEdBQVlzdEIsV0FDakNqcEIsRUFBTTJuQixhQUFlaHNCLEdBQVl1dEIsWUFJakNwakYsUUFBUUMsTUFBTyxnRkFRbEJpNkQsRUFBTXNuQixRQUFTLEdBQU0zZ0YsRUFDckJxNUQsRUFBTXNuQixRQUFTLEdBQU12a0YsRUFDckJpOUQsRUFBTXNuQixRQUFTLEdBQU10bEYsRUFFckIsTUFBTTZrRixFQUFPN21CLEVBQU02bUIsS0FFZEEsRUFBS0Msb0JBQXNCQSxHQUMvQkQsRUFBS0UsY0FBZ0JBLEdBQ3JCRixFQUFLRyxhQUFlQSxHQUNwQkgsRUFBS0ksaUJBQW1CQSxHQUN4QkosRUFBS0ssYUFBZUEsR0FDcEJMLEVBQUtNLHdCQUEwQkEsR0FDL0JOLEVBQUtPLGtCQUFvQkEsR0FDekJQLEVBQUtRLGlCQUFtQkEsSUFFeEJybkIsRUFBTW1rQixZQUFZbGlGLE9BQVM2a0YsRUFDM0I5bUIsRUFBTW9rQixLQUFLbmlGLE9BQVMra0YsRUFDcEJobkIsRUFBTXFrQixTQUFTcGlGLE9BQVNnbEYsRUFDeEJqbkIsRUFBTXQ5QixNQUFNemdDLE9BQVM4a0YsRUFDckIvbUIsRUFBTXNrQixLQUFLcmlGLE9BQVNpbEYsRUFFcEJsbkIsRUFBTXduQixrQkFBa0J2bEYsT0FBU2tsRixFQUNqQ25uQixFQUFNdkMscUJBQXFCeDdELE9BQVNrbEYsRUFDcENubkIsRUFBTTRuQixZQUFZM2xGLE9BQVNtbEYsRUFDM0JwbkIsRUFBTTFCLGVBQWVyOEQsT0FBU21sRixFQUM5QnBuQixFQUFNeW5CLFdBQVd4bEYsT0FBU29sRixFQUMxQnJuQixFQUFNaEMsY0FBYy83RCxPQUFTb2xGLEVBQzdCcm5CLEVBQU10Qyx3QkFBd0J6N0QsT0FBU2tsRixFQUN2Q25uQixFQUFNekIsa0JBQWtCdDhELE9BQVNtbEYsRUFDakNwbkIsRUFBTS9CLGlCQUFpQmg4RCxPQUFTb2xGLEVBRWhDUixFQUFLQyxrQkFBb0JBLEVBQ3pCRCxFQUFLRSxZQUFjQSxFQUNuQkYsRUFBS0csV0FBYUEsRUFDbEJILEVBQUtJLGVBQWlCQSxFQUN0QkosRUFBS0ssV0FBYUEsRUFFbEJMLEVBQUtNLHNCQUF3QkEsRUFDN0JOLEVBQUtPLGdCQUFrQkEsRUFDdkJQLEVBQUtRLGVBQWlCQSxFQUV0QnJuQixFQUFNMXNDLFFBQVVnekQsT0E2RmpCNkMsVUF2RkQsU0FBb0JqL0IsRUFBUWxyQixHQUUzQixJQUFJOG5ELEVBQW9CLEVBQ3BCQyxFQUFjLEVBQ2RDLEVBQWEsRUFDYkMsRUFBaUIsRUFDakJDLEVBQWEsRUFFakIsTUFBTXJmLEVBQWE3b0MsRUFBT0MsbUJBRTFCLElBQU0sSUFBSWg3QixFQUFJLEVBQUdXLEVBQUlzbEQsRUFBT2pvRCxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUVqRCxNQUFNa2lGLEVBQVFqOEIsRUFBUWptRCxHQUV0QixHQUFLa2lGLEVBQU1rQyxtQkFBcUIsQ0FFL0IsTUFBTTErQixFQUFXcVcsRUFBTW1rQixZQUFhMkMsR0FFcENuOUIsRUFBUzdpQixVQUFVbEcsc0JBQXVCdWxELEVBQU05bUQsYUFDaER3b0QsRUFBUWpuRCxzQkFBdUJ1bEQsRUFBTXZnRSxPQUFPeVosYUFDNUNzcUIsRUFBUzdpQixVQUFVcmYsSUFBS29nRSxHQUN4QmwrQixFQUFTN2lCLFVBQVV4SCxtQkFBb0J1b0MsR0FFdkNpZixTQUVNLEdBQUtYLEVBQU11QyxZQUFjLENBRS9CLE1BQU0vK0IsRUFBV3FXLEVBQU1va0IsS0FBTTRDLEdBRTdCcjlCLEVBQVMxbUIsU0FBU3JDLHNCQUF1QnVsRCxFQUFNOW1ELGFBQy9Dc3FCLEVBQVMxbUIsU0FBU3pNLGFBQWNxeEMsR0FFaENsZSxFQUFTN2lCLFVBQVVsRyxzQkFBdUJ1bEQsRUFBTTltRCxhQUNoRHdvRCxFQUFRam5ELHNCQUF1QnVsRCxFQUFNdmdFLE9BQU95WixhQUM1Q3NxQixFQUFTN2lCLFVBQVVyZixJQUFLb2dFLEdBQ3hCbCtCLEVBQVM3aUIsVUFBVXhILG1CQUFvQnVvQyxHQUV2Q21mLFNBRU0sR0FBS2IsRUFBTXlDLGdCQUFrQixDQUVuQyxNQUFNai9CLEVBQVdxVyxFQUFNcWtCLFNBQVU0QyxHQUVqQ3Q5QixFQUFTMW1CLFNBQVNyQyxzQkFBdUJ1bEQsRUFBTTltRCxhQUMvQ3NxQixFQUFTMW1CLFNBQVN6TSxhQUFjcXhDLEdBR2hDaWdCLEVBQVM3OEQsV0FDVHdDLEVBQVF0RyxLQUFNZy9ELEVBQU05bUQsYUFDcEI1UixFQUFRL0IsWUFBYW04QyxHQUNyQmlnQixFQUFTeDlDLGdCQUFpQjdjLEdBRTFCazhCLEVBQVN5OEIsVUFBVXQyRSxJQUFtQixHQUFkcTJFLEVBQU01K0UsTUFBYSxFQUFLLEdBQ2hEb2lELEVBQVMwOEIsV0FBV3YyRSxJQUFLLEVBQW9CLEdBQWZxMkUsRUFBTTMrRSxPQUFjLEdBRWxEbWlELEVBQVN5OEIsVUFBVTV2RCxhQUFjc3hELEdBQ2pDbitCLEVBQVMwOEIsV0FBVzd2RCxhQUFjc3hELEdBRWxDYixTQUVNLEdBQUtkLEVBQU0wQyxhQUFlLENBRWhDLE1BQU1sL0IsRUFBV3FXLEVBQU10OUIsTUFBT3FrRCxHQUU5QnA5QixFQUFTMW1CLFNBQVNyQyxzQkFBdUJ1bEQsRUFBTTltRCxhQUMvQ3NxQixFQUFTMW1CLFNBQVN6TSxhQUFjcXhDLEdBRWhDa2YsU0FFTSxHQUFLWixFQUFNMkMsa0JBQW9CLENBRXJDLE1BQU1uL0IsRUFBV3FXLEVBQU1za0IsS0FBTTRDLEdBRTdCdjlCLEVBQVM3aUIsVUFBVWxHLHNCQUF1QnVsRCxFQUFNOW1ELGFBQ2hEc3FCLEVBQVM3aUIsVUFBVXhILG1CQUFvQnVvQyxHQUN2Q2xlLEVBQVM3aUIsVUFBVWplLFlBRW5CcStELE9BV0ZsbkIsTUFBT0EsR0FLVCxTQUFTb3BCLEdBQWtCaC9CLEVBQVk4SCxHQUV0QyxNQUFNaEksRUFBUyxJQUFJdzhCLEdBQWF0OEIsRUFBWThILEdBRXRDbTNCLEVBQWMsR0FDZEMsRUFBZSxHQXdDckIsTUFBTyxDQUNOdmhCLEtBdkNELFdBRUNzaEIsRUFBWXBuRixPQUFTLEVBQ3JCcW5GLEVBQWFybkYsT0FBUyxHQXFDdEIrOUQsTUFUYSxDQUNicXBCLFlBQWFBLEVBQ2JDLGFBQWNBLEVBRWRwL0IsT0FBUUEsR0FNUnEvQixZQXRCRCxTQUFzQmhLLEdBRXJCcjFCLEVBQU9nWixNQUFPbW1CLEVBQWE5SixJQXFCM0JpSyxnQkFqQkQsU0FBMEJ4cUQsR0FFekJrckIsRUFBT2kvQixVQUFXRSxFQUFhcnFELElBaUIvQnlxRCxVQXJDRCxTQUFvQnRELEdBRW5Ca0QsRUFBWTFqRixLQUFNd2dGLElBb0NsQnVELFdBaENELFNBQXFCQyxHQUVwQkwsRUFBYTNqRixLQUFNZ2tGLEtBbUNyQixTQUFTQyxHQUFtQngvQixFQUFZOEgsR0FFdkMsSUFBSTIzQixFQUFlLElBQUl4M0IsUUFvQ3ZCLE1BQU8sQ0FDTnQ0QyxJQW5DRCxTQUFjcXpDLEVBQU80NEIsRUFBa0IsR0FFdEMsSUFBSThELEVBc0JKLE9BcEJtQyxJQUE5QkQsRUFBYS9qQixJQUFLMVksSUFFdEIwOEIsRUFBYyxJQUFJVixHQUFrQmgvQixFQUFZOEgsR0FDaEQyM0IsRUFBYS81RSxJQUFLczlDLEVBQU8sQ0FBRTA4QixLQUl0QjlELEdBQW1CNkQsRUFBYTl2RSxJQUFLcXpDLEdBQVFuckQsUUFFakQ2bkYsRUFBYyxJQUFJVixHQUFrQmgvQixFQUFZOEgsR0FDaEQyM0IsRUFBYTl2RSxJQUFLcXpDLEdBQVF6bkQsS0FBTW1rRixJQUloQ0EsRUFBY0QsRUFBYTl2RSxJQUFLcXpDLEdBQVM0NEIsR0FNcEM4RCxHQVlQN3pELFFBUkQsV0FFQzR6RCxFQUFlLElBQUl4M0IsVUFXckIsTUFBTWt3QixXQUEwQjdwQyxHQUUvQjVzQyxZQUFhb3BDLEdBRVp0Z0IsUUFFQXp4QixLQUFLNlcsS0FBTyxvQkFFWjdXLEtBQUtzOEUsYUExZ29CbUIsS0E0Z29CeEJ0OEUsS0FBS29TLElBQU0sS0FFWHBTLEtBQUt1NUMsU0FBVyxLQUVoQnY1QyxLQUFLaTZDLGdCQUFrQixLQUN2Qmo2QyxLQUFLazZDLGtCQUFvQixFQUN6Qmw2QyxLQUFLbTZDLGlCQUFtQixFQUV4Qm42QyxLQUFLMDdDLFdBQVksRUFDakIxN0MsS0FBSzI3QyxtQkFBcUIsRUFFMUIzN0MsS0FBS3cxQyxLQUFNLEVBRVh4MUMsS0FBS2k0QyxVQUFXbEcsR0FJakIvdEIsS0FBTStJLEdBaUJMLE9BZkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS3M4RSxhQUFldnZELEVBQU91dkQsYUFFM0J0OEUsS0FBS29TLElBQU0yYSxFQUFPM2EsSUFFbEJwUyxLQUFLdTVDLFNBQVd4c0IsRUFBT3dzQixTQUV2QnY1QyxLQUFLaTZDLGdCQUFrQmx0QixFQUFPa3RCLGdCQUM5Qmo2QyxLQUFLazZDLGtCQUFvQm50QixFQUFPbXRCLGtCQUNoQ2w2QyxLQUFLbTZDLGlCQUFtQnB0QixFQUFPb3RCLGlCQUUvQm42QyxLQUFLMDdDLFVBQVkzdUIsRUFBTzJ1QixVQUN4QjE3QyxLQUFLMjdDLG1CQUFxQjV1QixFQUFPNHVCLG1CQUUxQjM3QyxNQU1Uby9FLEdBQWtCNy9FLFVBQVVxbkYscUJBQXNCLEVBRWxELE1BQU12SCxXQUE2QjlwQyxHQUVsQzVzQyxZQUFhb3BDLEdBRVp0Z0IsUUFFQXp4QixLQUFLNlcsS0FBTyx1QkFFWjdXLEtBQUt1OEQsa0JBQW9CLElBQUkxaEMsR0FDN0I3NkIsS0FBS3c4RCxhQUFlLEVBQ3BCeDhELEtBQUt5OEQsWUFBYyxJQUVuQno4RCxLQUFLb1MsSUFBTSxLQUVYcFMsS0FBS3U1QyxTQUFXLEtBRWhCdjVDLEtBQUtpNkMsZ0JBQWtCLEtBQ3ZCajZDLEtBQUtrNkMsa0JBQW9CLEVBQ3pCbDZDLEtBQUttNkMsaUJBQW1CLEVBRXhCbjZDLEtBQUt3MUMsS0FBTSxFQUVYeDFDLEtBQUtpNEMsVUFBV2xHLEdBSWpCL3RCLEtBQU0rSSxHQWdCTCxPQWRBMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUt1OEQsa0JBQWtCdjRDLEtBQU0rSSxFQUFPd3ZDLG1CQUNwQ3Y4RCxLQUFLdzhELGFBQWV6dkMsRUFBT3l2QyxhQUMzQng4RCxLQUFLeThELFlBQWMxdkMsRUFBTzB2QyxZQUUxQno4RCxLQUFLb1MsSUFBTTJhLEVBQU8zYSxJQUVsQnBTLEtBQUt1NUMsU0FBV3hzQixFQUFPd3NCLFNBRXZCdjVDLEtBQUtpNkMsZ0JBQWtCbHRCLEVBQU9rdEIsZ0JBQzlCajZDLEtBQUtrNkMsa0JBQW9CbnRCLEVBQU9tdEIsa0JBQ2hDbDZDLEtBQUttNkMsaUJBQW1CcHRCLEVBQU9vdEIsaUJBRXhCbjZDLE1BWVQsU0FBUzZtRixHQUFnQmxnQixFQUFXbWdCLEVBQVVDLEdBRTdDLElBQUlDLEVBQVcsSUFBSXY2QixHQUVuQixNQUFNdzZCLEVBQWlCLElBQUl6akUsRUFDMUIwakUsRUFBZ0IsSUFBSTFqRSxFQUVwQjJqRSxFQUFZLElBQUlqMEQsR0FFaEJrMEQsRUFBaUIsSUFBSWhJLEdBQW1CLENBQUU5QyxhQXBub0JuQixPQXFub0J2QitLLEVBQW9CLElBQUloSSxHQUV4QmlJLEVBQWlCLEdBRWpCQyxFQUFrQlIsRUFBY2hrQixlQUUzQjdyQixFQUFhLENBQUUsRUE3dm9CTCxFQTZ2b0JrQixFQTl2b0JqQixFQTh2b0IrQixFQTV2b0I5QixHQTh2b0Jac3dDLEVBQXlCLElBQUk3Z0MsR0FBZ0IsQ0FDbERDLFFBQVMsQ0FDUjZnQyxZQUFhLEdBRWRqaEMsU0FBVSxDQUNUa2hDLFlBQWEsQ0FBRTFvRixNQUFPLE1BQ3RCMm9GLFdBQVksQ0FBRTNvRixNQUFPLElBQUl3a0IsR0FDekJyZCxPQUFRLENBQUVuSCxNQUFPLElBR2xCNm5ELGFBaENhLDJEQWlDYkMsZUEvQmUsb21DQW1DVjhnQyxFQUEyQkosRUFBdUJ6akUsUUFDeEQ2akUsRUFBeUJoaEMsUUFBUWloQyxnQkFBa0IsRUFFbkQsTUFBTUMsRUFBZ0IsSUFBSXhwQyxHQUMxQndwQyxFQUFjM3RFLGFBQ2IsV0FDQSxJQUFJbWlDLEdBQ0gsSUFBSTNvQyxhQUFjLEVBQUksR0FBSyxFQUFHLEdBQUssR0FBSyxFQUFHLElBQU8sRUFBRyxFQUFHLEtBQ3hELElBSUYsTUFBTW8wRSxFQUFpQixJQUFJbmtDLEdBQU1ra0MsRUFBZU4sR0FFMUNyaUMsRUFBUW5sRCxLQTBJZCxTQUFTZ29GLEVBQVN0ckIsRUFBUTdnQyxHQUV6QixNQUFNK0QsRUFBV2tuRCxFQUFTL3VELE9BQVFnd0QsR0FFN0JQLEVBQXVCNWdDLFFBQVE2Z0MsY0FBZ0IvcUIsRUFBT3VyQixjQUUxRFQsRUFBdUI1Z0MsUUFBUTZnQyxZQUFjL3FCLEVBQU91ckIsWUFDcERMLEVBQXlCaGhDLFFBQVE2Z0MsWUFBYy9xQixFQUFPdXJCLFlBRXREVCxFQUF1QnAzRCxhQUFjLEVBQ3JDdzNELEVBQXlCeDNELGFBQWMsR0FNeENvM0QsRUFBdUJoaEMsU0FBU2toQyxZQUFZMW9GLE1BQVEwOUQsRUFBT3RxRCxJQUFJNGlCLFFBQy9Ed3lELEVBQXVCaGhDLFNBQVNtaEMsV0FBVzNvRixNQUFRMDlELEVBQU80b0IsUUFDMURrQyxFQUF1QmhoQyxTQUFTcmdELE9BQU9uSCxNQUFRMDlELEVBQU92MkQsT0FDdER3Z0UsRUFBVWpjLGdCQUFpQmdTLEVBQU93ckIsU0FDbEN2aEIsRUFBVXB5RCxRQUNWb3lELEVBQVV3aEIsbUJBQW9CdHNELEVBQVEsS0FBTStELEVBQVU0bkQsRUFBd0JPLEVBQWdCLE1BSTlGSCxFQUF5QnBoQyxTQUFTa2hDLFlBQVkxb0YsTUFBUTA5RCxFQUFPd3JCLFFBQVFsekQsUUFDckU0eUQsRUFBeUJwaEMsU0FBU21oQyxXQUFXM29GLE1BQVEwOUQsRUFBTzRvQixRQUM1RHNDLEVBQXlCcGhDLFNBQVNyZ0QsT0FBT25ILE1BQVEwOUQsRUFBT3YyRCxPQUN4RHdnRSxFQUFVamMsZ0JBQWlCZ1MsRUFBT3RxRCxLQUNsQ3UwRCxFQUFVcHlELFFBQ1ZveUQsRUFBVXdoQixtQkFBb0J0c0QsRUFBUSxLQUFNK0QsRUFBVWdvRCxFQUEwQkcsRUFBZ0IsTUFJakcsU0FBU0ssRUFBa0JwcEQsRUFBUXFULEVBQVUyd0MsRUFBTy9uQixFQUFrQkMsRUFBaUJya0QsR0FFdEYsSUFBSXd4RSxFQUFTLEtBRWIsTUFBTUMsR0FBMEMsSUFBdkJ0RixFQUFNMEMsYUFBMEIxbUQsRUFBT3VwRCx1QkFBeUJ2cEQsRUFBT3dwRCxvQkFZaEcsR0FSQ0gsT0FGdUI3b0UsSUFBbkI4b0UsRUFFS0EsR0FJeUIsSUFBdkJ0RixFQUFNMEMsYUFBMEIyQixFQUFvQkQsRUFJekR6Z0IsRUFBVTdDLHVCQUFpRCxJQUF6Qnp4QixFQUFTNEUsYUFBMkQsSUFBbkM1RSxFQUFTMEUsZUFBZWo0QyxRQUMvRnV6QyxFQUFTNEgsaUJBQWtELElBQS9CNUgsRUFBUzZILG1CQUNyQzdILEVBQVNrSCxVQUFZbEgsRUFBU3dGLFVBQVksRUFBTSxDQUtsRCxNQUFNNHdDLEVBQU9KLEVBQU9uNEQsS0FBTXc0RCxFQUFPcjJDLEVBQVNuaUIsS0FFMUMsSUFBSXk0RCxFQUFzQnJCLEVBQWdCbUIsUUFFYmpwRSxJQUF4Qm1wRSxJQUVKQSxFQUFzQixHQUN0QnJCLEVBQWdCbUIsR0FBU0UsR0FJMUIsSUFBSUMsRUFBaUJELEVBQXFCRCxRQUVsQmxwRSxJQUFuQm9wRSxJQUVKQSxFQUFpQlAsRUFBT3RrRSxRQUN4QjRrRSxFQUFxQkQsR0FBU0UsR0FJL0JQLEVBQVNPLEVBdUNWLE9BbkNBUCxFQUFPcjZDLFFBQVVxRSxFQUFTckUsUUFDMUJxNkMsRUFBTzNzQyxVQUFZckosRUFBU3FKLFVBSTNCMnNDLEVBQU8zeUMsS0E5L29CVyxJQTQvb0JkNytCLEVBRW9DLE9BQXhCdzdCLEVBQVM2RSxXQUF3QjdFLEVBQVM2RSxXQUFhN0UsRUFBU3FELEtBSXhDLE9BQXhCckQsRUFBUzZFLFdBQXdCN0UsRUFBUzZFLFdBQWFBLEVBQVk3RSxFQUFTcUQsTUFJN0YyeUMsRUFBTzl1QyxTQUFXbEgsRUFBU2tILFNBQzNCOHVDLEVBQU94d0MsVUFBWXhGLEVBQVN3RixVQUU1Qnd3QyxFQUFPcHhDLFlBQWM1RSxFQUFTNEUsWUFDOUJveEMsRUFBT3R4QyxlQUFpQjFFLEVBQVMwRSxlQUNqQ3N4QyxFQUFPcnhDLGlCQUFtQjNFLEVBQVMyRSxpQkFFbkNxeEMsRUFBT3B1QyxnQkFBa0I1SCxFQUFTNEgsZ0JBQ2xDb3VDLEVBQU9udUMsa0JBQW9CN0gsRUFBUzZILGtCQUNwQ211QyxFQUFPbHVDLGlCQUFtQjlILEVBQVM4SCxpQkFFbkNrdUMsRUFBTzFzQyxtQkFBcUJ0SixFQUFTc0osbUJBQ3JDMHNDLEVBQU85c0MsVUFBWWxKLEVBQVNrSixXQUVBLElBQXZCeW5DLEVBQU0wQyxlQUEyRCxJQUFsQzJDLEVBQU9RLHlCQUUxQ1IsRUFBTzlyQixrQkFBa0I5K0Isc0JBQXVCdWxELEVBQU05bUQsYUFDdERtc0QsRUFBTzdyQixhQUFldkIsRUFDdEJvdEIsRUFBTzVyQixZQUFjdkIsR0FJZm10QixFQUlSLFNBQVNTLEVBQWM5cEQsRUFBUW5ELEVBQVFrdEQsRUFBYy9GLEVBQU9uc0UsR0FFM0QsSUFBd0IsSUFBbkJtb0IsRUFBT2dQLFFBQW9CLE9BSWhDLEdBRmdCaFAsRUFBTzBOLE9BQU9waEMsS0FBTXV3QixFQUFPNlEsVUFFekIxTixFQUFPNFMsUUFBVTVTLEVBQU82UyxRQUFVN1MsRUFBTzhTLFlBRW5EOVMsRUFBT2lQLFlBQWdCalAsRUFBT2tQLGVBeGlwQm5CLElBd2lwQm9DcjNCLE1BQWlDbW9CLEVBQU9tUCxlQUFpQjY0QyxFQUFTajVCLGlCQUFrQi91QixJQUFhLENBRXRKQSxFQUFPNE8sZ0JBQWdCdGxCLGlCQUFrQnlnRSxFQUFhanRELG1CQUFvQmtELEVBQU85QyxhQUVqRixNQUFNMEQsRUFBV2tuRCxFQUFTL3VELE9BQVFpSCxHQUM1QnFULEVBQVdyVCxFQUFPcVQsU0FFeEIsR0FBSy95QyxNQUFNdU8sUUFBU3drQyxHQUFhLENBRWhDLE1BQU1vTSxFQUFTN2UsRUFBUzZlLE9BRXhCLElBQU0sSUFBSS83QyxFQUFJLEVBQUdzbUYsRUFBS3ZxQyxFQUFPMy9DLE9BQVE0RCxFQUFJc21GLEVBQUl0bUYsSUFBTyxDQUVuRCxNQUFNbStDLEVBQVFwQyxFQUFRLzdDLEdBQ2hCNGhELEVBQWdCalMsRUFBVXdPLEVBQU0zQixlQUV0QyxHQUFLb0YsR0FBaUJBLEVBQWN0VyxRQUFVLENBRTdDLE1BQU1pN0MsRUFBZ0JiLEVBQWtCcHBELEVBQVFzbEIsRUFBZTArQixFQUFPK0YsRUFBYTM5QyxLQUFNMjlDLEVBQWExOUMsSUFBS3gwQixHQUUzRzh2RCxFQUFVd2hCLG1CQUFvQlksRUFBYyxLQUFNbnBELEVBQVVxcEQsRUFBZWpxRCxFQUFRNmhCLFVBTS9FLEdBQUt4TyxFQUFTckUsUUFBVSxDQUU5QixNQUFNaTdDLEVBQWdCYixFQUFrQnBwRCxFQUFRcVQsRUFBVTJ3QyxFQUFPK0YsRUFBYTM5QyxLQUFNMjlDLEVBQWExOUMsSUFBS3gwQixHQUV0Rzh2RCxFQUFVd2hCLG1CQUFvQlksRUFBYyxLQUFNbnBELEVBQVVxcEQsRUFBZWpxRCxFQUFRLE9BUXRGLE1BQU1tQixFQUFXbkIsRUFBT21CLFNBRXhCLElBQU0sSUFBSXIvQixFQUFJLEVBQUdXLEVBQUkwK0IsRUFBU3JoQyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFNUNnb0YsRUFBYzNvRCxFQUFVci9CLEdBQUsrNkIsRUFBUWt0RCxFQUFjL0YsRUFBT25zRSxHQWxUNUQ3VyxLQUFLaXBELFNBQVUsRUFFZmpwRCxLQUFLa3BGLFlBQWEsRUFDbEJscEYsS0FBS293QixhQUFjLEVBRW5CcHdCLEtBQUs2VyxLQXZ5b0JlLEVBeXlvQnBCN1csS0FBSzJxRCxPQUFTLFNBQVc1RCxFQUFRa0QsRUFBT3B1QixHQUV2QyxJQUF1QixJQUFsQnNwQixFQUFNOEQsUUFBb0IsT0FDL0IsSUFBMEIsSUFBckI5RCxFQUFNK2pDLGFBQThDLElBQXRCL2pDLEVBQU0vMEIsWUFBd0IsT0FFakUsR0FBdUIsSUFBbEIyMkIsRUFBT2pvRCxPQUFlLE9BRTNCLE1BQU1vckQsRUFBc0J5YyxFQUFVeGMsa0JBQ2hDZy9CLEVBQWlCeGlCLEVBQVV5aUIsb0JBQzNCQyxFQUFvQjFpQixFQUFVMmlCLHVCQUU5QkMsRUFBUzVpQixFQUFVOUosTUFHekIwc0IsRUFBT0MsWUEveW9CVSxHQWd6b0JqQkQsRUFBT3Q2QixRQUFRaHBELE1BQU1vM0QsU0FBVSxFQUFHLEVBQUcsRUFBRyxHQUN4Q2tzQixFQUFPdDZCLFFBQVFwNkIsTUFBTTQwRCxTQUFTLEdBQzlCRixFQUFPRyxnQkFBZ0IsR0FJdkIsSUFBTSxJQUFJNW9GLEVBQUksRUFBR2kxQixFQUFLZ3hCLEVBQU9qb0QsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRW5ELE1BQU1raUYsRUFBUWo4QixFQUFRam1ELEdBQ2hCNDdELEVBQVNzbUIsRUFBTXRtQixPQUVyQixRQUFnQmw5QyxJQUFYazlDLEVBQXVCLENBRTNCLzVELFFBQVF1aEIsS0FBTSx3QkFBeUI4K0QsRUFBTyxrQkFDOUMsU0FJRCxJQUEyQixJQUF0QnRtQixFQUFPd3NCLGFBQStDLElBQXZCeHNCLEVBQU90c0MsWUFBd0IsU0FFbkU2MkQsRUFBZWpqRSxLQUFNMDRDLEVBQU80b0IsU0FFNUIsTUFBTXFFLEVBQXFCanRCLEVBQU9rdEIsa0JBcUNsQyxHQW5DQTNDLEVBQWV4aUUsU0FBVWtsRSxHQUV6QnpDLEVBQWNsakUsS0FBTTA0QyxFQUFPNG9CLFVBRXRCMkIsRUFBZXRtRixFQUFJNG1GLEdBQW1CTixFQUFlcG1GLEVBQUkwbUYsS0FFeEROLEVBQWV0bUYsRUFBSTRtRixJQUV2QkwsRUFBY3ZtRixFQUFJZCxLQUFLcUwsTUFBT3E4RSxFQUFrQm9DLEVBQW1CaHBGLEdBQ25Fc21GLEVBQWV0bUYsRUFBSXVtRixFQUFjdm1GLEVBQUlncEYsRUFBbUJocEYsRUFDeEQrN0QsRUFBTzRvQixRQUFRM2tGLEVBQUl1bUYsRUFBY3ZtRixHQUk3QnNtRixFQUFlcG1GLEVBQUkwbUYsSUFFdkJMLEVBQWNybUYsRUFBSWhCLEtBQUtxTCxNQUFPcThFLEVBQWtCb0MsRUFBbUI5b0YsR0FDbkVvbUYsRUFBZXBtRixFQUFJcW1GLEVBQWNybUYsRUFBSThvRixFQUFtQjlvRixFQUN4RDY3RCxFQUFPNG9CLFFBQVF6a0YsRUFBSXFtRixFQUFjcm1GLElBTWYsT0FBZjY3RCxFQUFPdHFELEtBQWtCc3FELEVBQU9tdEIsb0JBdDJvQm5CLElBczJvQnlDN3BGLEtBQUs2VyxPQUUvRDZsRCxFQUFPdHFELElBQU0sSUFBSXdpQixHQUFtQnF5RCxFQUFldG1GLEVBQUdzbUYsRUFBZXBtRixHQUNyRTY3RCxFQUFPdHFELElBQUk0aUIsUUFBUTNlLEtBQU8yc0UsRUFBTTNzRSxLQUFPLGFBRXZDcW1ELEVBQU93ckIsUUFBVSxJQUFJdHpELEdBQW1CcXlELEVBQWV0bUYsRUFBR3NtRixFQUFlcG1GLEdBRXpFNjdELEVBQU83Z0MsT0FBT3VzQiwwQkFJSyxPQUFmc1UsRUFBT3RxRCxJQUFlLENBRTFCLE1BQU0wM0UsRUFBTyxDQUFFejRELFVBQVdsUixFQUFlaVIsVUFBV2pSLEVBQWVtUixPQUFRMVEsR0FFM0U4N0MsRUFBT3RxRCxJQUFNLElBQUl3aUIsR0FBbUJxeUQsRUFBZXRtRixFQUFHc21GLEVBQWVwbUYsRUFBR2lwRixHQUN4RXB0QixFQUFPdHFELElBQUk0aUIsUUFBUTNlLEtBQU8yc0UsRUFBTTNzRSxLQUFPLGFBRXZDcW1ELEVBQU83Z0MsT0FBT3VzQix5QkFJZnVlLEVBQVVqYyxnQkFBaUJnUyxFQUFPdHFELEtBQ2xDdTBELEVBQVVweUQsUUFFVixNQUFNdzFFLEVBQWdCcnRCLEVBQU9zdEIsbUJBRTdCLElBQU0sSUFBSUMsRUFBSyxFQUFHQSxFQUFLRixFQUFlRSxJQUFRLENBRTdDLE1BQU1uMkUsRUFBVzRvRCxFQUFPd3RCLFlBQWFELEdBRXJDOUMsRUFBVXg2RSxJQUNUdTZFLEVBQWN2bUYsRUFBSW1ULEVBQVNuVCxFQUMzQnVtRixFQUFjcm1GLEVBQUlpVCxFQUFTalQsRUFDM0JxbUYsRUFBY3ZtRixFQUFJbVQsRUFBUzVTLEVBQzNCZ21GLEVBQWNybUYsRUFBSWlULEVBQVN2VCxHQUc1QmdwRixFQUFPejFFLFNBQVVxekUsR0FFakJ6cUIsRUFBT3l0QixlQUFnQm5ILEVBQU9pSCxHQUU5QmpELEVBQVd0cUIsRUFBTzB0QixhQUVsQnRCLEVBQWM3K0IsRUFBT3B1QixFQUFRNmdDLEVBQU83Z0MsT0FBUW1uRCxFQUFPaGpGLEtBQUs2VyxNQU1sRDZsRCxFQUFPbXRCLG9CQXg1b0JJLElBdzVvQmtCN3BGLEtBQUs2VyxNQUV4Q214RSxFQUFTdHJCLEVBQVE3Z0MsR0FJbEI2Z0MsRUFBT3RzQyxhQUFjLEVBSXRCKzBCLEVBQU0vMEIsYUFBYyxFQUVwQnUyQyxFQUFVamMsZ0JBQWlCUixFQUFxQmkvQixFQUFnQkUsSUFzTGxFLFNBQVNnQixHQUFZdjdCLEVBQUk3SCxFQUFZOEgsR0FFcEMsTUFBTUMsRUFBV0QsRUFBYUMsU0FtVHhCczdCLEVBQWMsSUFqVHBCLFdBRUMsSUFBSUMsR0FBUyxFQUViLE1BQU10a0YsRUFBUSxJQUFJaXRCLEdBQ2xCLElBQUlzM0QsRUFBbUIsS0FDdkIsTUFBTUMsRUFBb0IsSUFBSXYzRCxHQUFTLEVBQUcsRUFBRyxFQUFHLEdBRWhELE1BQU8sQ0FFTnczRCxRQUFTLFNBQVdqMkUsR0FFZCsxRSxJQUFxQi8xRSxHQUFlODFFLElBRXhDejdCLEVBQUdyNkMsVUFBV0EsRUFBV0EsRUFBV0EsRUFBV0EsR0FDL0MrMUUsRUFBbUIvMUUsSUFNckJrMkUsVUFBVyxTQUFXQyxHQUVyQkwsRUFBU0ssR0FJVnZ0QixTQUFVLFNBQVc3NUQsRUFBRzVELEVBQUdmLEVBQUdELEVBQUc4NEMsSUFFSixJQUF2QkEsSUFFSmwwQyxHQUFLNUUsRUFBR2dCLEdBQUtoQixFQUFHQyxHQUFLRCxHQUl0QnFILEVBQU0wRyxJQUFLbkosRUFBRzVELEVBQUdmLEVBQUdELElBRXVCLElBQXRDNnJGLEVBQWtCbmtFLE9BQVFyZ0IsS0FFOUI2b0QsRUFBR3g2QyxXQUFZOVEsRUFBRzVELEVBQUdmLEVBQUdELEdBQ3hCNnJGLEVBQWtCem1FLEtBQU0vZCxLQU0xQnNHLE1BQU8sV0FFTmcrRSxHQUFTLEVBRVRDLEVBQW1CLEtBQ25CQyxFQUFrQjk5RSxLQUFPLEVBQUcsRUFBRyxFQUFHLE1BK1AvQnNvQixFQUFjLElBdlBwQixXQUVDLElBQUlzMUQsR0FBUyxFQUVUTSxFQUFtQixLQUNuQkMsRUFBbUIsS0FDbkJDLEVBQW9CLEtBRXhCLE1BQU8sQ0FFTnRCLFFBQVMsU0FBV3B6QyxHQUVkQSxFQUVKaEssRUFBUSxNQUlSRyxFQUFTLE9BTVhrK0MsUUFBUyxTQUFXTSxHQUVkSCxJQUFxQkcsR0FBZVQsSUFFeEN6N0IsRUFBR2s4QixVQUFXQSxHQUNkSCxFQUFtQkcsSUFNckJDLFFBQVMsU0FBVzcwQyxHQUVuQixHQUFLMDBDLElBQXFCMTBDLEVBQVksQ0FFckMsR0FBS0EsRUFFSixPQUFTQSxHQUVSLEtBeHFwQlksRUEwcXBCWDBZLEVBQUcxWSxVQUFXLEtBQ2QsTUFFRCxLQTVxcEJhLEVBOHFwQlowWSxFQUFHMVksVUFBVyxLQUNkLE1BRUQsS0FocnBCVyxFQWtycEJWMFksRUFBRzFZLFVBQVcsS0FDZCxNQUVELEtBcHJwQmdCLEVBNnNwQmhCLFFBRUMwWSxFQUFHMVksVUFBVyxXQXRCZixLQXhycEJZLEVBMHJwQlgwWSxFQUFHMVksVUFBVyxLQUNkLE1BRUQsS0E1cnBCbUIsRUE4cnBCbEIwWSxFQUFHMVksVUFBVyxLQUNkLE1BRUQsS0Foc3BCYyxFQWtzcEJiMFksRUFBRzFZLFVBQVcsS0FDZCxNQUVELEtBcHNwQmUsRUFzc3BCZDBZLEVBQUcxWSxVQUFXLFVBV2hCMFksRUFBRzFZLFVBQVcsS0FJZjAwQyxFQUFtQjEwQyxJQU1yQnUwQyxVQUFXLFNBQVdDLEdBRXJCTCxFQUFTSyxHQUlWdnRCLFNBQVUsU0FBV3hvQyxHQUVmazJELElBQXNCbDJELElBRTFCaTZCLEVBQUdvOEIsV0FBWXIyRCxHQUNmazJELEVBQW9CbDJELElBTXRCdG9CLE1BQU8sV0FFTmcrRSxHQUFTLEVBRVRNLEVBQW1CLEtBQ25CQyxFQUFtQixLQUNuQkMsRUFBb0IsUUE0SGpCNzFELEVBQWdCLElBcEh0QixXQUVDLElBQUlxMUQsR0FBUyxFQUVUWSxFQUFxQixLQUNyQkMsRUFBcUIsS0FDckJDLEVBQW9CLEtBQ3BCQyxFQUF5QixLQUN6QkMsRUFBcUIsS0FDckJDLEVBQXNCLEtBQ3RCQyxFQUFzQixLQUN0QkMsRUFBc0IsS0FFMUIsTUFBTyxDQUVOakMsUUFBUyxTQUFXa0MsR0FFWnBCLElBRURvQixFQUVKdC9DLEVBQVEsTUFJUkcsRUFBUyxRQVFaaytDLFFBQVMsU0FBV2tCLEdBRWRULElBQXVCUyxHQUFpQnJCLElBRTVDejdCLEVBQUc4OEIsWUFBYUEsR0FDaEJULEVBQXFCUyxJQU12QlgsUUFBUyxTQUFXejBDLEVBQWFDLEVBQVltMUMsR0FFdkNSLElBQXVCNTBDLEdBQ3ZCNjBDLElBQXNCNTBDLEdBQ3RCNjBDLElBQTJCTSxJQUUvQjk4QixFQUFHdFksWUFBYUEsRUFBYUMsRUFBWW0xQyxHQUV6Q1IsRUFBcUI1MEMsRUFDckI2MEMsRUFBb0I1MEMsRUFDcEI2MEMsRUFBeUJNLElBTTNCQyxNQUFPLFNBQVdsMUMsRUFBYUMsRUFBY0MsR0FFdkMwMEMsSUFBdUI1MEMsR0FDdkI2MEMsSUFBd0I1MEMsR0FDeEI2MEMsSUFBd0I1MEMsSUFFNUJpWSxFQUFHZzlCLFVBQVduMUMsRUFBYUMsRUFBY0MsR0FFekMwMEMsRUFBcUI1MEMsRUFDckI2MEMsRUFBc0I1MEMsRUFDdEI2MEMsRUFBc0I1MEMsSUFNeEI4ekMsVUFBVyxTQUFXQyxHQUVyQkwsRUFBU0ssR0FJVnZ0QixTQUFVLFNBQVdqUyxHQUVmc2dDLElBQXdCdGdDLElBRTVCMEQsRUFBR2k5QixhQUFjM2dDLEdBQ2pCc2dDLEVBQXNCdGdDLElBTXhCNytDLE1BQU8sV0FFTmcrRSxHQUFTLEVBRVRZLEVBQXFCLEtBQ3JCQyxFQUFxQixLQUNyQkMsRUFBb0IsS0FDcEJDLEVBQXlCLEtBQ3pCQyxFQUFxQixLQUNyQkMsRUFBc0IsS0FDdEJDLEVBQXNCLEtBQ3RCQyxFQUFzQixRQWN6QixJQUFJTSxFQUFzQixHQUV0QkMsRUFBMkIsR0FDM0JDLEVBQXFCLElBQUloOUIsUUFDekJpOUIsRUFBcUIsR0FFckJDLEVBQWlCLEtBRWpCQyxHQUF5QixFQUN6QkMsRUFBa0IsS0FDbEJDLEVBQXVCLEtBQ3ZCQyxFQUFrQixLQUNsQkMsRUFBa0IsS0FDbEJDLEVBQTRCLEtBQzVCQyxFQUF1QixLQUN2QkMsRUFBdUIsS0FDdkJDLEdBQTJCLEVBRTNCQyxFQUFtQixLQUNuQkMsRUFBa0IsS0FFbEJDLEVBQW1CLEtBRW5CQyxFQUE2QixLQUM3QkMsRUFBNEIsS0FFaEMsTUFBTXJxQixFQUFjL1QsRUFBR3h1QixhQUFjLE9BRXJDLElBQUk2c0QsR0FBcUIsRUFDckJoOUQsRUFBVSxFQUNkLE1BQU1pOUQsRUFBWXQrQixFQUFHeHVCLGFBQWMsT0FFSyxJQUFuQzhzRCxFQUFVempGLFFBQVMsVUFFdkJ3bUIsRUFBVXpDLFdBQVksY0FBY0MsS0FBTXkvRCxHQUFhLElBQ3ZERCxFQUF1Qmg5RCxHQUFXLElBRWdCLElBQXZDaTlELEVBQVV6akYsUUFBUyxlQUU5QndtQixFQUFVekMsV0FBWSxrQkFBa0JDLEtBQU15L0QsR0FBYSxJQUMzREQsRUFBdUJoOUQsR0FBVyxHQUluQyxJQUFJazlELEVBQXFCLEtBQ3JCQyxFQUF1QixHQUUzQixNQUFNQyxFQUFleitCLEVBQUd4dUIsYUFBYyxNQUNoQ2t0RCxFQUFnQjErQixFQUFHeHVCLGFBQWMsTUFFakNtdEQsR0FBaUIsSUFBSXY2RCxJQUFVM00sVUFBV2duRSxHQUMxQ0csR0FBa0IsSUFBSXg2RCxJQUFVM00sVUFBV2luRSxHQUVqRCxTQUFTenhFLEVBQWVsRixFQUFNNEwsRUFBUXFULEdBRXJDLE1BQU05ZCxFQUFPLElBQUlwTixXQUFZLEdBQ3ZCb3FCLEVBQVU4NUIsRUFBRy95QyxnQkFFbkIreUMsRUFBRzYrQixZQUFhOTJFLEVBQU1tZSxHQUN0Qjg1QixFQUFHOCtCLGNBQWUvMkUsRUFBTSxNQUFPLE1BQy9CaTRDLEVBQUc4K0IsY0FBZS8yRSxFQUFNLE1BQU8sTUFFL0IsSUFBTSxJQUFJL1YsRUFBSSxFQUFHQSxFQUFJZzFCLEVBQU9oMUIsSUFFM0JndUQsRUFBR3h5QyxXQUFZbUcsRUFBUzNoQixFQUFHLEVBQUcsS0FBTSxFQUFHLEVBQUcsRUFBRyxLQUFNLEtBQU1rWCxHQUkxRCxPQUFPZ2QsRUFJUixNQUFNNjRELEVBQWdCLEdBcUJ0QixTQUFTeGhELEVBQVEwRCxJQUVtQixJQUE5Qmk4QyxFQUFxQmo4QyxLQUV6QitlLEVBQUd6aUIsT0FBUTBELEdBQ1hpOEMsRUFBcUJqOEMsSUFBTyxHQU05QixTQUFTdkQsRUFBU3VELElBRWtCLElBQTlCaThDLEVBQXFCajhDLEtBRXpCK2UsRUFBR3RpQixRQUFTdUQsR0FDWmk4QyxFQUFxQmo4QyxJQUFPLEdBcEM5Qjg5QyxFQUFlLE1BQVM5eEUsRUFBZSxLQUFNLEtBQU0sR0FDbkQ4eEUsRUFBZSxPQUFVOXhFLEVBQWUsTUFBTyxNQUFPLEdBSXREdXVFLEVBQVlqdEIsU0FBVSxFQUFHLEVBQUcsRUFBRyxHQUMvQnBvQyxFQUFZb29DLFNBQVUsR0FDdEJub0MsRUFBY21vQyxTQUFVLEdBRXhCaHhCLEVBQVEsTUFDUnBYLEVBQVlnMkQsUUF2OHBCVSxHQXk4cEJ0QjZDLEdBQWMsR0FDZEMsRUEvK3BCb0IsR0FnL3BCcEIxaEQsRUFBUSxNQUVSbTlDLEVBdCtwQmtCLEdBOG5xQmxCLE1BQU13RSxFQUFlLENBQ3BCLENBQUVwdUUsR0FBZSxNQUNqQixJQUFzQixNQUN0QixJQUE2QixPQUc5QixHQUFLb3ZDLEVBRUpnL0IsRUE3bnFCa0IsS0E2bnFCWSxNQUM5QkEsRUE3bnFCa0IsS0E2bnFCWSxVQUV4QixDQUVOLE1BQU0xdkIsRUFBWXJYLEVBQVdyd0MsSUFBSyxvQkFFZixPQUFkMG5ELElBRUowdkIsRUF0b3FCaUIsS0Fzb3FCYTF2QixFQUFVMnZCLFFBQ3hDRCxFQXRvcUJpQixLQXNvcUJhMXZCLEVBQVU0dkIsU0FNMUMsTUFBTUMsRUFBYSxDQUNsQixJQUFnQixFQUNoQixJQUFlLEVBQ2YsSUFBb0IsSUFDcEIsSUFBb0IsSUFDcEIsSUFBNEIsSUFDNUIsSUFBb0IsSUFDcEIsSUFBb0IsSUFDcEIsSUFBNEIsSUFDNUIsSUFBNEIsSUFDNUIsSUFBNEIsSUFDNUIsSUFBNEIsS0FHN0IsU0FBUzNFLEVBQWEvekMsRUFBVU8sRUFBZUYsRUFBVUMsRUFBVUksRUFBb0JGLEVBQWVDLEVBQWV3QixHQUVwSCxHQXRxcUJpQixJQXNxcUJaakMsR0FvQkwsSUFQZ0MsSUFBM0I0MkMsSUFFSmhnRCxFQUFRLE1BQ1JnZ0QsR0FBeUIsR0FqcnFCTCxJQXFycUJoQjUyQyxFQW1GTFUsRUFBcUJBLEdBQXNCSCxFQUMzQ0MsRUFBZ0JBLEdBQWlCSCxFQUNqQ0ksRUFBZ0JBLEdBQWlCSCxFQUU1QkMsSUFBa0J1MkMsR0FBd0JwMkMsSUFBdUJ1MkMsSUFFckU1OUIsRUFBR3MvQixzQkFBdUJKLEVBQWNoNEMsR0FBaUJnNEMsRUFBYzczQyxJQUV2RW8yQyxFQUF1QnYyQyxFQUN2QjAyQyxFQUE0QnYyQyxHQUl4QkwsSUFBYTAyQyxHQUFtQnoyQyxJQUFhMDJDLEdBQW1CeDJDLElBQWtCMDJDLEdBQXdCejJDLElBQWtCMDJDLElBRWhJOTlCLEVBQUd1L0Isa0JBQW1CRixFQUFZcjRDLEdBQVlxNEMsRUFBWXA0QyxHQUFZbzRDLEVBQVlsNEMsR0FBaUJrNEMsRUFBWWo0QyxJQUUvR3MyQyxFQUFrQjEyQyxFQUNsQjIyQyxFQUFrQjEyQyxFQUNsQjQyQyxFQUF1QjEyQyxFQUN2QjIyQyxFQUF1QjEyQyxHQUl4Qm8yQyxFQUFrQjcyQyxFQUNsQm8zQyxFQUEyQixVQTFHMUIsR0FBS3AzQyxJQUFhNjJDLEdBQW1CNTBDLElBQXVCbTFDLEVBQTJCLENBV3RGLEdBVEtOLElBQXlCM3NFLEdBQWU4c0UsSUFBOEI5c0UsSUFFMUVrdkMsRUFBRzlZLGNBQWUsT0FFbEJ1MkMsRUFBdUIzc0UsRUFDdkI4c0UsRUFBNEI5c0UsR0FJeEI4M0IsRUFFSixPQUFTakMsR0FFUixLQTFzcUJpQixFQTJzcUJoQnFaLEVBQUd1L0Isa0JBQW1CLEVBQUcsSUFBSyxFQUFHLEtBQ2pDLE1BRUQsS0E3c3FCbUIsRUE4c3FCbEJ2L0IsRUFBR3cvQixVQUFXLEVBQUcsR0FDakIsTUFFRCxLQWh0cUJzQixFQWl0cUJyQngvQixFQUFHdS9CLGtCQUFtQixFQUFHLElBQUssRUFBRyxHQUNqQyxNQUVELEtBbnRxQm1CLEVBb3RxQmxCdi9CLEVBQUd1L0Isa0JBQW1CLEVBQUcsSUFBSyxFQUFHLEtBQ2pDLE1BRUQsUUFDQzFyRixRQUFRQyxNQUFPLHVDQUF3QzZ5QyxRQU96RCxPQUFTQSxHQUVSLEtBcHVxQmlCLEVBcXVxQmhCcVosRUFBR3UvQixrQkFBbUIsSUFBSyxJQUFLLEVBQUcsS0FDbkMsTUFFRCxLQXZ1cUJtQixFQXd1cUJsQnYvQixFQUFHdy9CLFVBQVcsSUFBSyxHQUNuQixNQUVELEtBMXVxQnNCLEVBMnVxQnJCeC9CLEVBQUd1L0Isa0JBQW1CLEVBQUcsSUFBSyxFQUFHLEdBQ2pDLE1BRUQsS0E3dXFCbUIsRUE4dXFCbEJ2L0IsRUFBR3cvQixVQUFXLEVBQUcsS0FDakIsTUFFRCxRQUNDM3JGLFFBQVFDLE1BQU8sdUNBQXdDNnlDLEdBTzFEKzJDLEVBQWtCLEtBQ2xCQyxFQUFrQixLQUNsQkUsRUFBdUIsS0FDdkJDLEVBQXVCLEtBRXZCTixFQUFrQjcyQyxFQUNsQm8zQyxFQUEyQm4xQyxRQTNGSSxJQUEzQjIwQyxJQUVKNy9DLEVBQVMsTUFDVDYvQyxHQUF5QixHQXVLNUIsU0FBU3lCLEVBQWM3UixHQUVqQjZRLElBQXFCN1EsSUFFcEJBLEVBRUpudEIsRUFBR3kvQixVQUFXLE1BSWR6L0IsRUFBR3kvQixVQUFXLE1BSWZ6QixFQUFtQjdRLEdBTXJCLFNBQVM4UixFQUFhUyxHQW4zcUJGLElBcTNxQmRBLEdBRUpuaUQsRUFBUSxNQUVIbWlELElBQWF6QixJQXgzcUJBLElBMDNxQlp5QixFQUVKMS9CLEVBQUcwL0IsU0FBVSxNQTMzcUJJLElBNjNxQk5BLEVBRVgxL0IsRUFBRzAvQixTQUFVLE1BSWIxL0IsRUFBRzAvQixTQUFVLFFBUWZoaUQsRUFBUyxNQUlWdWdELEVBQWtCeUIsRUFnQm5CLFNBQVNDLEVBQWtCcDNDLEVBQWVxM0MsRUFBUXBhLEdBRTVDajlCLEdBRUpoTCxFQUFRLE9BRUg0Z0QsSUFBK0J5QixHQUFVeEIsSUFBOEI1WSxJQUUzRXhsQixFQUFHelgsY0FBZXEzQyxFQUFRcGEsR0FFMUIyWSxFQUE2QnlCLEVBQzdCeEIsRUFBNEI1WSxJQU03QjluQyxFQUFTLE9Bc0JYLFNBQVN6NEIsRUFBZTQ2RSxRQUVKbnZFLElBQWRtdkUsSUFBMEJBLEVBQVksTUFBUTlyQixFQUFjLEdBRTVEd3FCLElBQXVCc0IsSUFFM0I3L0IsRUFBRy82QyxjQUFlNDZFLEdBQ2xCdEIsRUFBcUJzQixHQXNSdkIsTUFBTyxDQUVOMS9CLFFBQVMsQ0FDUmhwRCxNQUFPcWtGLEVBQ1B6MUQsTUFBT0ksRUFDUG0yQixRQUFTbDJCLEdBR1ZtWCxPQUFRQSxFQUNSRyxRQUFTQSxFQUVUcjRCLGdCQW51QkQsU0FBMEJzTyxFQUFRbXNFLEdBRWpDLE9BQUszQyxFQUEwQnhwRSxLQUFhbXNFLElBRTNDOS9CLEVBQUczNkMsZ0JBQWlCc08sRUFBUW1zRSxHQUU1QjNDLEVBQTBCeHBFLEdBQVdtc0UsRUFFaEM1L0IsSUFJWSxRQUFYdnNDLElBRUp3cEUsRUFBMEIsT0FBVTJDLEdBSXJCLFFBQVhuc0UsSUFFSndwRSxFQUEwQixPQUFVMkMsS0FNL0IsSUEwc0JSeG5DLFlBbHNCRCxTQUFzQm9DLEVBQWNvbEMsR0FFbkMsSUFBSXhuQyxFQUFjK2tDLEVBRWQvN0QsR0FBYyxFQUVsQixHQUFLbzVCLEVBV0osR0FUQXBDLEVBQWM4a0MsRUFBbUJ0MUUsSUFBS2c0RSxRQUVqQnB2RSxJQUFoQjRuQyxJQUVKQSxFQUFjLEdBQ2Q4a0MsRUFBbUJ2L0UsSUFBS2lpRixFQUFheG5DLElBSWpDb0MsRUFBYXh6Qiw2QkFBK0IsQ0FFaEQsTUFBTXRELEVBQVc4MkIsRUFBYXgwQixRQUU5QixHQUFLb3lCLEVBQVl0b0QsU0FBVzR6QixFQUFTNXpCLFFBQStCLFFBQXJCc29ELEVBQWEsR0FBZ0IsQ0FFM0UsSUFBTSxJQUFJdG1ELEVBQUksRUFBR2kxQixFQUFLckQsRUFBUzV6QixPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBRTlDc21ELEVBQWF0bUQsR0FBTSxNQUFRQSxFQUk1QnNtRCxFQUFZdG9ELE9BQVM0ekIsRUFBUzV6QixPQUU5QnN4QixHQUFjLFFBTVcsUUFBckJnM0IsRUFBYSxLQUVqQkEsRUFBYSxHQUFNLE1BRW5CaDNCLEdBQWMsUUFRVSxPQUFyQmczQixFQUFhLEtBRWpCQSxFQUFhLEdBQU0sS0FFbkJoM0IsR0FBYyxHQU1YQSxJQUVDMitCLEVBQWFDLFNBRWpCRixFQUFHMUgsWUFBYUEsR0FJaEJILEVBQVdyd0MsSUFBSyxzQkFBdUJpNEUsaUJBQWtCem5DLEtBaW9CM0RuMEMsV0F4bkJELFNBQXFCc3NELEdBRXBCLE9BQUs2c0IsSUFBbUI3c0IsSUFFdkJ6USxFQUFHNzdDLFdBQVlzc0QsR0FFZjZzQixFQUFpQjdzQixHQUVWLElBa25CUmlxQixZQUFhQSxFQUNic0YsWUEvYkQsU0FBc0J6OEMsRUFBVTA4QyxHQTd5cUJkLElBK3lxQmpCMThDLEVBQVNxRCxLQUNObEosRUFBUyxNQUNUSCxFQUFRLE1BRVgsSUFBSTR2QyxFQXB6cUJXLElBb3pxQkc1cEMsRUFBU3FELEtBQ3RCcTVDLElBQWM5UyxHQUFjQSxHQUVqQzZSLEVBQWM3UixHQWx6cUJPLElBb3pxQm5CNXBDLEVBQVNvRCxXQUF3RCxJQUF6QnBELEVBQVN3RCxZQUNoRDJ6QyxFQXR6cUJjLEdBdXpxQmRBLEVBQWFuM0MsRUFBU29ELFNBQVVwRCxFQUFTMkQsY0FBZTNELEVBQVN5RCxTQUFVekQsRUFBUzBELFNBQVUxRCxFQUFTOEQsbUJBQW9COUQsRUFBUzRELGNBQWU1RCxFQUFTNkQsY0FBZTdELEVBQVNxRixvQkFFdkx6aUIsRUFBWWcyRCxRQUFTNTRDLEVBQVMrRCxXQUM5Qm5oQixFQUFZdzBELFFBQVNwM0MsRUFBU2dFLFdBQzlCcGhCLEVBQVl5MUQsUUFBU3I0QyxFQUFTaUUsWUFDOUJnMEMsRUFBWUksUUFBU3I0QyxFQUFTOEUsWUFFOUIsTUFBTUwsRUFBZXpFLEVBQVN5RSxhQUM5QjVoQixFQUFjdTBELFFBQVMzeUMsR0FDbEJBLElBRUo1aEIsRUFBY3cxRCxRQUFTcjRDLEVBQVNrRSxrQkFDaENyaEIsRUFBYysxRCxRQUFTNTRDLEVBQVNtRSxZQUFhbkUsRUFBU29FLFdBQVlwRSxFQUFTcUUsaUJBQzNFeGhCLEVBQWMyMkQsTUFBT3g1QyxFQUFTc0UsWUFBYXRFLEVBQVN1RSxhQUFjdkUsRUFBU3dFLGVBSTVFNDNDLEVBQWtCcDhDLEVBQVNnRixjQUFlaEYsRUFBU2lGLG9CQUFxQmpGLEVBQVNrRixxQkFFcEQsSUFBN0JsRixFQUFTb0YsZ0JBQ05wTCxFQUFRLE9BQ1JHLEVBQVMsUUErWlpzaEQsYUFBY0EsRUFDZEMsWUFBYUEsRUFFYmlCLGFBdFdELFNBQXVCNXFGLEdBRWpCQSxJQUFVNG9GLElBRVRHLEdBQXFCcitCLEVBQUc1b0QsVUFBVzlCLEdBRXhDNG9GLEVBQW1CNW9GLElBaVdwQnFxRixpQkFBa0JBLEVBRWxCL0UsZUF0VUQsU0FBeUIzMEQsR0FFbkJBLEVBRUpzWCxFQUFRLE1BSVJHLEVBQVMsT0FnVVZ6NEIsY0FBZUEsRUFDZjQ1RSxZQTVTRCxTQUFzQnNCLEVBQVdDLEdBRUosT0FBdkI3QixHQUVKdDVFLElBSUQsSUFBSW83RSxFQUFlN0IsRUFBc0JELFFBRW5CN3RFLElBQWpCMnZFLElBRUpBLEVBQWUsQ0FBRXQ0RSxVQUFNMkksRUFBV3dWLGFBQVN4VixHQUMzQzh0RSxFQUFzQkQsR0FBdUI4QixHQUl6Q0EsRUFBYXQ0RSxPQUFTbzRFLEdBQWFFLEVBQWFuNkQsVUFBWWs2RCxJQUVoRXBnQyxFQUFHNitCLFlBQWFzQixFQUFXQyxHQUFnQnJCLEVBQWVvQixJQUUxREUsRUFBYXQ0RSxLQUFPbzRFLEVBQ3BCRSxFQUFhbjZELFFBQVVrNkQsSUF1UnhCRSxjQWpSRCxXQUVDLE1BQU1ELEVBQWU3QixFQUFzQkQsUUFFckI3dEUsSUFBakIydkUsUUFBb0QzdkUsSUFBdEIydkUsRUFBYXQ0RSxPQUUvQ2k0QyxFQUFHNitCLFlBQWF3QixFQUFhdDRFLEtBQU0sTUFFbkNzNEUsRUFBYXQ0RSxVQUFPMkksRUFDcEIydkUsRUFBYW42RCxhQUFVeFYsSUF5UXhCNnZFLHFCQW5RRCxXQUVDLElBRUN2Z0MsRUFBR3VnQyxxQkFBcUJsbEYsTUFBTzJrRCxFQUFJL3FELFdBRWxDLE1BQVFuQixHQUVURCxRQUFRQyxNQUFPLG9CQUFxQkEsS0E0UHJDMFosV0FoTEQsV0FFQyxJQUVDd3lDLEVBQUd4eUMsV0FBV25TLE1BQU8ya0QsRUFBSS9xRCxXQUV4QixNQUFRbkIsR0FFVEQsUUFBUUMsTUFBTyxvQkFBcUJBLEtBeUtyQzBzRixXQW5LRCxXQUVDLElBRUN4Z0MsRUFBR3dnQyxXQUFXbmxGLE1BQU8ya0QsRUFBSS9xRCxXQUV4QixNQUFRbkIsR0FFVEQsUUFBUUMsTUFBTyxvQkFBcUJBLEtBNkpyQzJzRixhQS9NRCxXQUVDLElBRUN6Z0MsRUFBR3lnQyxhQUFhcGxGLE1BQU8ya0QsRUFBSS9xRCxXQUUxQixNQUFRbkIsR0FFVEQsUUFBUUMsTUFBTyxvQkFBcUJBLEtBd01yQzRzRixhQWxNRCxXQUVDLElBRUMxZ0MsRUFBRzBnQyxhQUFhcmxGLE1BQU8ya0QsRUFBSS9xRCxXQUUxQixNQUFRbkIsR0FFVEQsUUFBUUMsTUFBTyxvQkFBcUJBLEtBMkxyQzZzRixjQTNQRCxXQUVDLElBRUMzZ0MsRUFBRzJnQyxjQUFjdGxGLE1BQU8ya0QsRUFBSS9xRCxXQUUzQixNQUFRbkIsR0FFVEQsUUFBUUMsTUFBTyxvQkFBcUJBLEtBb1ByQzhzRixjQTlPRCxXQUVDLElBRUM1Z0MsRUFBRzRnQyxjQUFjdmxGLE1BQU8ya0QsRUFBSS9xRCxXQUUzQixNQUFRbkIsR0FFVEQsUUFBUUMsTUFBTyxvQkFBcUJBLEtBdU9yQytzRix3QkFqT0QsV0FFQyxJQUVDN2dDLEVBQUc2Z0Msd0JBQXdCeGxGLE1BQU8ya0QsRUFBSS9xRCxXQUVyQyxNQUFRbkIsR0FFVEQsUUFBUUMsTUFBTyxvQkFBcUJBLEtBMk5yQ2t5QixRQTNKRCxTQUFrQkEsSUFFeUIsSUFBckMyNEQsRUFBZW5uRSxPQUFRd08sS0FFM0JnNkIsRUFBR2g2QixRQUFTQSxFQUFRbjBCLEVBQUdtMEIsRUFBUWowQixFQUFHaTBCLEVBQVE1ekIsRUFBRzR6QixFQUFRdjBCLEdBQ3JEa3RGLEVBQWV6cEUsS0FBTThRLEtBdUp0QmhoQixTQWpKRCxTQUFtQkEsSUFFMEIsSUFBdkM0NUUsRUFBZ0JwbkUsT0FBUXhTLEtBRTVCZzdDLEVBQUdoN0MsU0FBVUEsRUFBU25ULEVBQUdtVCxFQUFTalQsRUFBR2lULEVBQVM1UyxFQUFHNFMsRUFBU3ZULEdBQzFEbXRGLEVBQWdCMXBFLEtBQU1sUSxLQThJdkJ2SCxNQXRJRCxXQUlDdWlELEVBQUd0aUIsUUFBUyxNQUNac2lCLEVBQUd0aUIsUUFBUyxNQUNac2lCLEVBQUd0aUIsUUFBUyxNQUNac2lCLEVBQUd0aUIsUUFBUyxPQUNac2lCLEVBQUd0aUIsUUFBUyxNQUNac2lCLEVBQUd0aUIsUUFBUyxNQUNac2lCLEVBQUd0aUIsUUFBUyxPQUVac2lCLEVBQUc5WSxjQUFlLE9BQ2xCOFksRUFBR3cvQixVQUFXLEVBQUcsR0FDakJ4L0IsRUFBR3UvQixrQkFBbUIsRUFBRyxFQUFHLEVBQUcsR0FFL0J2L0IsRUFBR3I2QyxXQUFXLEdBQU0sR0FBTSxHQUFNLEdBQ2hDcTZDLEVBQUd4NkMsV0FBWSxFQUFHLEVBQUcsRUFBRyxHQUV4Qnc2QyxFQUFHazhCLFdBQVcsR0FDZGw4QixFQUFHMVksVUFBVyxLQUNkMFksRUFBR284QixXQUFZLEdBRWZwOEIsRUFBRzg4QixZQUFhLFlBQ2hCOThCLEVBQUd0WSxZQUFhLElBQUssRUFBRyxZQUN4QnNZLEVBQUdnOUIsVUFBVyxLQUFNLEtBQU0sTUFDMUJoOUIsRUFBR2k5QixhQUFjLEdBRWpCajlCLEVBQUcwL0IsU0FBVSxNQUNiMS9CLEVBQUd5L0IsVUFBVyxNQUVkei9CLEVBQUd6WCxjQUFlLEVBQUcsR0FFckJ5WCxFQUFHLzZDLGNBQWUsT0FFbEIrNkMsRUFBRzM2QyxnQkFBaUIsTUFBTyxPQUVULElBQWI2NkMsSUFFSkYsRUFBRzM2QyxnQkFBaUIsTUFBTyxNQUMzQjI2QyxFQUFHMzZDLGdCQUFpQixNQUFPLE9BSTVCMjZDLEVBQUc3N0MsV0FBWSxNQUVmNjdDLEVBQUc1b0QsVUFBVyxHQUVkNG9ELEVBQUdoNkIsUUFBUyxFQUFHLEVBQUdnNkIsRUFBR3JvRCxPQUFPckMsTUFBTzBxRCxFQUFHcm9ELE9BQU9wQyxRQUM3Q3lxRCxFQUFHaDdDLFNBQVUsRUFBRyxFQUFHZzdDLEVBQUdyb0QsT0FBT3JDLE1BQU8wcUQsRUFBR3JvRCxPQUFPcEMsUUFJOUMybkYsRUFBc0IsR0FFdEJxQixFQUFxQixLQUNyQkMsRUFBdUIsR0FFdkJyQixFQUEyQixHQUMzQkMsRUFBcUIsSUFBSWg5QixRQUN6Qmk5QixFQUFxQixHQUVyQkMsRUFBaUIsS0FFakJDLEdBQXlCLEVBQ3pCQyxFQUFrQixLQUNsQkMsRUFBdUIsS0FDdkJDLEVBQWtCLEtBQ2xCQyxFQUFrQixLQUNsQkMsRUFBNEIsS0FDNUJDLEVBQXVCLEtBQ3ZCQyxFQUF1QixLQUN2QkMsR0FBMkIsRUFFM0JDLEVBQW1CLEtBQ25CQyxFQUFrQixLQUVsQkMsRUFBbUIsS0FFbkJDLEVBQTZCLEtBQzdCQyxFQUE0QixLQUU1Qk8sRUFBZTlnRixJQUFLLEVBQUcsRUFBR21pRCxFQUFHcm9ELE9BQU9yQyxNQUFPMHFELEVBQUdyb0QsT0FBT3BDLFFBQ3JEcXBGLEVBQWdCL2dGLElBQUssRUFBRyxFQUFHbWlELEVBQUdyb0QsT0FBT3JDLE1BQU8wcUQsRUFBR3JvRCxPQUFPcEMsUUFFdERpbUYsRUFBWS85RSxRQUNaMG9CLEVBQVkxb0IsUUFDWjJvQixFQUFjM29CLFVBcURoQixTQUFTcWpGLEdBQWVDLEVBQUs1b0MsRUFBWTRWLEVBQU83QyxFQUFZakwsRUFBYytnQyxFQUFPL3RCLEdBRWhGLE1BQU0vUyxFQUFXRCxFQUFhQyxTQUN4QjZULEVBQWM5VCxFQUFhOFQsWUFDM0JHLEVBQWlCalUsRUFBYWlVLGVBQzlCRCxFQUFpQmhVLEVBQWFnVSxlQUM5QlcsRUFBYTNVLEVBQWEyVSxXQUMxQnFzQixFQUFxQjlvQyxFQUFXMGIsSUFBSyx3Q0FBMkMxYixFQUFXcndDLElBQUssd0NBQTJDLEtBQzNJbzVFLEVBQWdDLGlCQUFpQjFrRixLQUFNckcsVUFBVTZULFdBRWpFbTNFLEVBQWlCLElBQUkvZ0MsUUFDM0IsSUFBSTkvQixFQUVKLE1BQU04Z0UsRUFBVyxJQUFJaGhDLFFBTXJCLElBQUlpaEMsR0FBcUIsRUFFekIsSUFFQ0EsRUFBZ0Qsb0JBQXBCdjFFLGlCQUUrQixPQUFyRCxJQUFJQSxnQkFBaUIsRUFBRyxHQUFJM0YsV0FBWSxNQUU3QyxNQUFRbTdFLElBTVYsU0FBU0MsRUFBY2pzRixFQUFPQyxHQUk3QixPQUFPOHJGLEVBRU4sSUFBSXYxRSxnQkFBaUJ4VyxFQUFPQyxHQUFXOG1CLEVBQWlCLFVBSTFELFNBQVNtbEUsRUFBYW40RSxFQUFPbzRFLEVBQWlCQyxFQUFnQkMsR0FFN0QsSUFBSTFsRSxFQUFRLEVBWVosSUFSSzVTLEVBQU0vVCxNQUFRcXNGLEdBQVd0NEUsRUFBTTlULE9BQVNvc0YsS0FFNUMxbEUsRUFBUTBsRSxFQUFVNXdGLEtBQUtrRyxJQUFLb1MsRUFBTS9ULE1BQU8rVCxFQUFNOVQsU0FNM0MwbUIsRUFBUSxJQUF5QixJQUFwQndsRSxFQUEyQixDQUk1QyxHQUFtQyxvQkFBckJwMEUsa0JBQW9DaEUsYUFBaUJnRSxrQkFDbkMsb0JBQXRCc1QsbUJBQXFDdFgsYUFBaUJzWCxtQkFDdEMsb0JBQWhCSyxhQUErQjNYLGFBQWlCMlgsWUFBZ0IsQ0FFekUsTUFBTTVrQixFQUFRcWxGLEVBQWtCaHRFLEVBQWtCMWpCLEtBQUtxTCxNQUVqRDlHLEVBQVE4RyxFQUFPNmYsRUFBUTVTLEVBQU0vVCxPQUM3QkMsRUFBUzZHLEVBQU82ZixFQUFRNVMsRUFBTTlULGFBRW5CbWIsSUFBWjRQLElBQXdCQSxFQUFVaWhFLEVBQWNqc0YsRUFBT0MsSUFJNUQsTUFBTW9DLEVBQVMrcEYsRUFBaUJILEVBQWNqc0YsRUFBT0MsR0FBVytxQixFQVVoRSxPQVJBM29CLEVBQU9yQyxNQUFRQSxFQUNmcUMsRUFBT3BDLE9BQVNBLEVBRUFvQyxFQUFPd08sV0FBWSxNQUMzQkMsVUFBV2lELEVBQU8sRUFBRyxFQUFHL1QsRUFBT0MsR0FFdkMxQixRQUFRdWhCLEtBQU0sdURBQXlEL0wsRUFBTS9ULE1BQVEsSUFBTStULEVBQU05VCxPQUFTLFNBQVdELEVBQVEsSUFBTUMsRUFBUyxNQUVySW9DLEVBVVAsTUFOSyxTQUFVMFIsR0FFZHhWLFFBQVF1aEIsS0FBTSx5REFBMkQvTCxFQUFNL1QsTUFBUSxJQUFNK1QsRUFBTTlULE9BQVMsTUFJdEc4VCxFQU1ULE9BQU9BLEVBSVIsU0FBU3U0RSxFQUFnQnY0RSxHQUV4QixPQUFPbUwsRUFBY25MLEVBQU0vVCxRQUFXa2YsRUFBY25MLEVBQU05VCxRQWEzRCxTQUFTc3NGLEVBQTZCMzdELEVBQVM0N0QsR0FFOUMsT0FBTzU3RCxFQUFRbEQsaUJBQW1COCtELEdBQ2pDNTdELEVBQVEzRCxZQUFjbFIsR0FBaUI2VSxFQUFRM0QsWUFBY2pSLEVBSS9ELFNBQVN5d0UsRUFBZ0JwdUUsR0FFeEJvdEUsRUFBSWdCLGVBQWdCcHVFLEdBSXJCLFNBQVNxdUUsRUFBbUJDLEVBQW9CQyxFQUFVQyxFQUFRei9ELEVBQVVzdkQsR0FBaUIsR0FFNUYsSUFBa0IsSUFBYjl4QixFQUFxQixPQUFPZ2lDLEVBRWpDLEdBQTRCLE9BQXZCRCxFQUE4QixDQUVsQyxRQUFtQ3Z4RSxJQUE5QnF3RSxFQUFLa0IsR0FBcUMsT0FBT2xCLEVBQUtrQixHQUUzRHB1RixRQUFRdWhCLEtBQU0sMkVBQThFNnNFLEVBQXFCLEtBSWxILElBQUlwL0QsRUFBaUJxL0QsRUFvQ3JCLE9BbENrQixPQUFiQSxJQUVZLE9BQVhDLElBQWtCdC9ELEVBQWlCLE9BQ3hCLE9BQVhzL0QsSUFBa0J0L0QsRUFBaUIsT0FDeEIsT0FBWHMvRCxJQUFrQnQvRCxFQUFpQixRQUl2QixRQUFicS9ELElBRVksT0FBWEMsSUFBa0J0L0QsRUFBaUIsT0FDeEIsT0FBWHMvRCxJQUFrQnQvRCxFQUFpQixPQUN4QixPQUFYcy9ELElBQWtCdC9ELEVBQWlCLFFBSXZCLE9BQWJxL0QsSUFFWSxPQUFYQyxJQUFrQnQvRCxFQUFpQixPQUN4QixPQUFYcy9ELElBQWtCdC9ELEVBQWlCLE9BQ3hCLE9BQVhzL0QsSUFBa0J0L0QsRUFBbUJILElBQWE5UCxJQUFtQyxJQUFuQm8vRCxFQUE2QixNQUFRLE9BQzVGLFFBQVhtUSxJQUFtQnQvRCxFQUFpQixPQUN6QixRQUFYcy9ELElBQW1CdC9ELEVBQWlCLFFBSWxCLFFBQW5CQSxHQUErQyxRQUFuQkEsR0FDYixRQUFuQkEsR0FBK0MsUUFBbkJBLEdBQ1QsUUFBbkJBLEdBQStDLFFBQW5CQSxHQUU1QnMxQixFQUFXcndDLElBQUssMEJBSVYrYSxFQUlSLFNBQVN1L0QsRUFBY2w4RCxFQUFTN2MsRUFBT3k0RSxHQUV0QyxPQUE4RCxJQUF6REQsRUFBNkIzN0QsRUFBUzQ3RCxJQUE2QjU3RCxFQUFRbThELHNCQUF3Qm44RCxFQUFRM0QsWUFBY2xSLEdBQWlCNlUsRUFBUTNELFlBQWNqUixFQUU3SnZnQixLQUFLNG9FLEtBQU01b0UsS0FBS2tHLElBQUtvUyxFQUFNL1QsTUFBTytULEVBQU05VCxTQUFhLE9BRTdCbWIsSUFBcEJ3VixFQUFRdEQsU0FBeUJzRCxFQUFRdEQsUUFBUTV5QixPQUFTLEVBSTlEazJCLEVBQVF0RCxRQUFRNXlCLE9BRVprMkIsRUFBUW84RCxxQkFBdUI5eEYsTUFBTXVPLFFBQVNtbkIsRUFBUTdjLE9BRTFEQSxFQUFNdVosUUFBUTV5QixPQU1kLEVBUVQsU0FBU3V5RixFQUFnQmx4RixHQUV4QixPQUFLQSxJQUFNZ2dCLEdBNzZyQnNCLE9BNjZyQkxoZ0IsR0EzNnJCSSxPQTI2ckJnQ0EsRUFFeEQsS0FJRCxLQU1SLFNBQVNxbEUsRUFBa0JoakQsR0FFMUIsTUFBTXdTLEVBQVV4UyxFQUFNQyxPQUV0QnVTLEVBQVExUyxvQkFBcUIsVUFBV2tqRCxHQXdCekMsU0FBNEJ4d0MsR0FFM0IsTUFBTXM4RCxFQUFvQnQzQixFQUFXcGpELElBQUtvZSxHQUUxQyxRQUF1Q3hWLElBQWxDOHhFLEVBQWtCQyxZQUE0QixPQUluRCxNQUFNeGtFLEVBQVNpSSxFQUFRakksT0FDakJ5a0UsRUFBZ0J0QixFQUFTdDVFLElBQUttVyxHQUVwQyxHQUFLeWtFLEVBQWdCLENBRXBCLE1BQU10QyxFQUFlc0MsRUFBZUYsRUFBa0JHLFlBQ3REdkMsRUFBYXJSLFlBSW1CLElBQTNCcVIsRUFBYXJSLFdBRWpCNlQsRUFBZTE4RCxHQU02QixJQUF4QzkxQixPQUFPNlcsS0FBTXk3RSxHQUFnQjF5RixRQUVqQ294RixFQUFTNTRFLE9BQVF5VixHQU1uQml0QyxFQUFXcnFCLE9BQVEzYSxHQXhEbkIyOEQsQ0FBbUIzOEQsR0FFZEEsRUFBUThyRCxnQkFFWm1QLEVBQWUzNEUsT0FBUTBkLEdBTXpCLFNBQVM0OEQsRUFBdUJwdkUsR0FFL0IsTUFBTWduQyxFQUFlaG5DLEVBQU1DLE9BRTNCK21DLEVBQWFsbkMsb0JBQXFCLFVBQVdzdkUsR0EyRDlDLFNBQWlDcG9DLEdBRWhDLE1BQU14MEIsRUFBVXcwQixFQUFheDBCLFFBRXZCNjhELEVBQXlCNzNCLEVBQVdwakQsSUFBSzR5QyxHQUN6QzhuQyxFQUFvQnQzQixFQUFXcGpELElBQUtvZSxHQWdCMUMsUUFkMEN4VixJQUFyQzh4RSxFQUFrQlEsaUJBRXRCakMsRUFBSTZCLGNBQWVKLEVBQWtCUSxnQkFFckMvdkIsRUFBS3dLLE9BQU83NUMsWUFJUjgyQixFQUFhcjBCLGNBRWpCcTBCLEVBQWFyMEIsYUFBYXJDLFVBSXRCMDJCLEVBQWFDLHdCQUVqQixJQUFNLElBQUkzb0QsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCK3VGLEVBQUlrQyxrQkFBbUJGLEVBQXVCRyxtQkFBb0JseEYsSUFDN0Qrd0YsRUFBdUJJLG9CQUFxQnBDLEVBQUlxQyxtQkFBb0JMLEVBQXVCSSxtQkFBb0JueEYsU0FNckgrdUYsRUFBSWtDLGtCQUFtQkYsRUFBdUJHLG9CQUN6Q0gsRUFBdUJJLG9CQUFxQnBDLEVBQUlxQyxtQkFBb0JMLEVBQXVCSSxvQkFDM0ZKLEVBQXVCTSxnQ0FBaUN0QyxFQUFJa0Msa0JBQW1CRixFQUF1Qk0sZ0NBQ3RHTixFQUF1Qk8sMEJBQTJCdkMsRUFBSXFDLG1CQUFvQkwsRUFBdUJPLDBCQUNqR1AsRUFBdUJRLDBCQUEyQnhDLEVBQUlxQyxtQkFBb0JMLEVBQXVCUSwwQkFJdkcsR0FBSzdvQyxFQUFheHpCLDZCQUVqQixJQUFNLElBQUlsMUIsRUFBSSxFQUFHaTFCLEVBQUtmLEVBQVFsMkIsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRXBELE1BQU13eEYsRUFBdUJ0NEIsRUFBV3BqRCxJQUFLb2UsRUFBU2wwQixJQUVqRHd4RixFQUFxQlIsaUJBRXpCakMsRUFBSTZCLGNBQWVZLEVBQXFCUixnQkFFeEMvdkIsRUFBS3dLLE9BQU83NUMsWUFJYnNuQyxFQUFXcnFCLE9BQVEzYSxFQUFTbDBCLElBTTlCazVELEVBQVdycUIsT0FBUTNhLEdBQ25CZ2xDLEVBQVdycUIsT0FBUTZaLEdBdEhuQitvQyxDQUF3Qi9vQyxHQTRDekIsU0FBU2tvQyxFQUFlMThELEdBRXZCLE1BQU1zOEQsRUFBb0J0M0IsRUFBV3BqRCxJQUFLb2UsR0FDMUM2NkQsRUFBSTZCLGNBQWVKLEVBQWtCUSxnQkFFckMsTUFBTS9rRSxFQUFTaUksRUFBUWpJLGNBQ0RtakUsRUFBU3Q1RSxJQUFLbVcsR0FDZHVrRSxFQUFrQkcsWUFFeEMxdkIsRUFBS3dLLE9BQU83NUMsV0F1RWIsSUFBSTgvRCxFQUFlLEVBZ0RuQixTQUFTNWYsRUFBYzU5QyxFQUFTeTlELEdBRS9CLE1BQU1uQixFQUFvQnQzQixFQUFXcGpELElBQUtvZSxHQUkxQyxHQUZLQSxFQUFROHJELGdCQXN5Q2QsU0FBNkI5ckQsR0FFNUIsTUFBTXk1QixFQUFRc1QsRUFBS3BYLE9BQU84RCxNQUlyQndoQyxFQUFlcjVFLElBQUtvZSxLQUFjeTVCLElBRXRDd2hDLEVBQWV0akYsSUFBS3FvQixFQUFTeTVCLEdBQzdCejVCLEVBQVErQyxVQS95Q3FCMjZELENBQW9CMTlELElBRVgsSUFBbENBLEVBQVE1Qyx1QkFBbUM0QyxFQUFRN0UsUUFBVSxHQUFLbWhFLEVBQWtCcUIsWUFBYzM5RCxFQUFRN0UsUUFBVSxDQUV4SCxNQUFNaFksRUFBUTZjLEVBQVE3YyxNQUV0QixHQUFlLE9BQVZBLEVBRUp4VixRQUFRdWhCLEtBQU0sK0VBRVIsS0FBd0IsSUFBbkIvTCxFQUFNeTZFLFNBT2pCLFlBREFDLEdBQWV2QixFQUFtQnQ4RCxFQUFTeTlELEdBSjNDOXZGLFFBQVF1aEIsS0FBTSwyRUFXaEIyNEMsRUFBTTlvRCxjQUFlLE1BQVEwK0UsR0FDN0I1MUIsRUFBTTh3QixZQUFhLEtBQU0yRCxFQUFrQlEsZ0JBb0Q1QyxNQUFNZ0IsRUFBZSxDQUNwQixDQUFFOXlFLEdBQWtCLE1BQ3BCLENBQUVDLEdBQXVCLE1BQ3pCLENBQUVDLEdBQTBCLE9BR3ZCNnlFLEVBQWEsQ0FDbEIsQ0FBRTV5RSxHQUFpQixLQUNuQixLQUFnQyxLQUNoQyxLQUErQixLQUUvQixDQUFFQyxHQUFnQixLQUNsQixLQUErQixLQUMvQixDQUFFQyxHQUE0QixNQUcvQixTQUFTMnlFLEdBQXNCQyxFQUFhaitELEVBQVM0N0QsR0E0Q3BELEdBMUNLQSxHQUVKZixFQUFJakMsY0FBZXFGLEVBQWEsTUFBT0gsRUFBYzk5RCxFQUFROUQsUUFDN0QyK0QsRUFBSWpDLGNBQWVxRixFQUFhLE1BQU9ILEVBQWM5OUQsRUFBUTdELFFBRXhDLFFBQWhCOGhFLEdBQXlDLFFBQWhCQSxHQUU3QnBELEVBQUlqQyxjQUFlcUYsRUFBYSxNQUFPSCxFQUFjOTlELEVBQVFRLFFBSTlEcTZELEVBQUlqQyxjQUFlcUYsRUFBYSxNQUFPRixFQUFZLzlELEVBQVE1RCxZQUMzRHkrRCxFQUFJakMsY0FBZXFGLEVBQWEsTUFBT0YsRUFBWS85RCxFQUFRM0QsY0FJM0R3K0QsRUFBSWpDLGNBQWVxRixFQUFhLE1BQU8sT0FDdkNwRCxFQUFJakMsY0FBZXFGLEVBQWEsTUFBTyxPQUVsQixRQUFoQkEsR0FBeUMsUUFBaEJBLEdBRTdCcEQsRUFBSWpDLGNBQWVxRixFQUFhLE1BQU8sT0FJbkNqK0QsRUFBUTlELFFBQVVqUixHQUF1QitVLEVBQVE3RCxRQUFVbFIsR0FFL0R0ZCxRQUFRdWhCLEtBQU0saUlBSWYyckUsRUFBSWpDLGNBQWVxRixFQUFhLE1BQU81QixFQUFnQnI4RCxFQUFRNUQsWUFDL0R5K0QsRUFBSWpDLGNBQWVxRixFQUFhLE1BQU81QixFQUFnQnI4RCxFQUFRM0QsWUFFMUQyRCxFQUFRM0QsWUFBY2xSLEdBQWlCNlUsRUFBUTNELFlBQWNqUixHQUVqRXpkLFFBQVF1aEIsS0FBTSxxSUFNNEMsSUFBdkQraUMsRUFBVzBiLElBQUssa0NBQThDLENBRWxFLE1BQU1yRSxFQUFZclgsRUFBV3J3QyxJQUFLLGtDQUVsQyxHQUFLb2UsRUFBUW5lLE9BQVM0SixJQUE4RCxJQUFqRHdtQyxFQUFXMGIsSUFBSyw0QkFBeUMsT0FDNUYsSUFBa0IsSUFBYjNULEdBQXdCaDZCLEVBQVFuZSxPQUFTNkosSUFBdUUsSUFBdER1bUMsRUFBVzBiLElBQUssaUNBQWdELFFBRTFIM3RDLEVBQVF6RCxXQUFhLEdBQUt5b0MsRUFBV3BqRCxJQUFLb2UsR0FBVWsrRCx1QkFFeERyRCxFQUFJc0QsY0FBZUYsRUFBYTMwQixFQUFVODBCLDJCQUE0QnZ6RixLQUFLMEcsSUFBS3l1QixFQUFRekQsV0FBWXc5QixFQUFhd1UscUJBQ2pIdkosRUFBV3BqRCxJQUFLb2UsR0FBVWsrRCxvQkFBc0JsK0QsRUFBUXpELGFBUTNELFNBQVM4aEUsR0FBYS9CLEVBQW1CdDhELEdBRXhDLElBQUlzK0QsR0FBYyxPQUVxQjl6RSxJQUFsQzh4RSxFQUFrQkMsY0FFdEJELEVBQWtCQyxhQUFjLEVBRWhDdjhELEVBQVE1YSxpQkFBa0IsVUFBV29yRCxJQU10QyxNQUFNejRDLEVBQVNpSSxFQUFRakksT0FDdkIsSUFBSXlrRSxFQUFnQnRCLEVBQVN0NUUsSUFBS21XLFFBRVh2TixJQUFsQmd5RSxJQUVKQSxFQUFnQixHQUNoQnRCLEVBQVN2akYsSUFBS29nQixFQUFReWtFLElBTXZCLE1BQU0rQixFQWhOUCxTQUE2QnYrRCxHQUU1QixNQUFNdFMsRUFBUSxHQWdCZCxPQWRBQSxFQUFNbGdCLEtBQU13eUIsRUFBUTlELE9BQ3BCeE8sRUFBTWxnQixLQUFNd3lCLEVBQVE3RCxPQUNwQnpPLEVBQU1sZ0IsS0FBTXd5QixFQUFRNUQsV0FDcEIxTyxFQUFNbGdCLEtBQU13eUIsRUFBUTNELFdBQ3BCM08sRUFBTWxnQixLQUFNd3lCLEVBQVF6RCxZQUNwQjdPLEVBQU1sZ0IsS0FBTXd5QixFQUFRckQsZ0JBQ3BCalAsRUFBTWxnQixLQUFNd3lCLEVBQVExRCxRQUNwQjVPLEVBQU1sZ0IsS0FBTXd5QixFQUFRbmUsTUFDcEI2TCxFQUFNbGdCLEtBQU13eUIsRUFBUWxELGlCQUNwQnBQLEVBQU1sZ0IsS0FBTXd5QixFQUFRakQsa0JBQ3BCclAsRUFBTWxnQixLQUFNd3lCLEVBQVFoRCxPQUNwQnRQLEVBQU1sZ0IsS0FBTXd5QixFQUFRL0MsaUJBQ3BCdlAsRUFBTWxnQixLQUFNd3lCLEVBQVF4RCxVQUViOU8sRUFBTXZYLE9BOExXcW9GLENBQW9CeCtELEdBRTVDLEdBQUt1K0QsSUFBb0JqQyxFQUFrQkcsV0FBYSxNQUlianlFLElBQXJDZ3lFLEVBQWUrQixLQUluQi9CLEVBQWUrQixHQUFvQixDQUNsQ3YrRCxRQUFTNjZELEVBQUk5ekUsZ0JBQ2I4aEUsVUFBVyxHQUdaOWIsRUFBS3dLLE9BQU83NUMsV0FLWjRnRSxHQUFjLEdBSWY5QixFQUFlK0IsR0FBa0IxVixZQUtqQyxNQUFNcVIsRUFBZXNDLEVBQWVGLEVBQWtCRyxpQkFFaENqeUUsSUFBakIwdkUsSUFFSnNDLEVBQWVGLEVBQWtCRyxZQUFhNVQsWUFFZCxJQUEzQnFSLEVBQWFyUixXQUVqQjZULEVBQWUxOEQsSUFRakJzOEQsRUFBa0JHLFdBQWE4QixFQUMvQmpDLEVBQWtCUSxlQUFpQk4sRUFBZStCLEdBQWtCditELFFBSXJFLE9BQU9zK0QsRUFJUixTQUFTVCxHQUFldkIsRUFBbUJ0OEQsRUFBU3k5RCxHQUVuRCxJQUFJUSxFQUFjLEtBRWJqK0QsRUFBUVMscUJBQXFCdzlELEVBQWMsT0FDM0NqK0QsRUFBUVksa0JBQWtCcTlELEVBQWMsT0FFN0MsTUFBTUssRUFBY0QsR0FBYS9CLEVBQW1CdDhELEdBQzlDakksRUFBU2lJLEVBQVFqSSxPQUt2QixHQUhBOHZDLEVBQU05b0QsY0FBZSxNQUFRMCtFLEdBQzdCNTFCLEVBQU04d0IsWUFBYXNGLEVBQWEzQixFQUFrQlEsZ0JBRTdDL2tFLEVBQU9vRCxVQUFZcEQsRUFBTzBtRSxtQkFBb0MsSUFBaEJILEVBQXVCLENBRXpFekQsRUFBSTZELFlBQWEsTUFBTzErRCxFQUFRaEQsT0FDaEM2OUQsRUFBSTZELFlBQWEsTUFBTzErRCxFQUFRakQsa0JBQ2hDODlELEVBQUk2RCxZQUFhLEtBQU0xK0QsRUFBUS9DLGlCQUMvQjQ5RCxFQUFJNkQsWUFBYSxNQUFPLEdBRXhCLE1BQU1uRCxFQXhqQlIsU0FBaUN2N0QsR0FFaEMsT0FBS2c2QixJQUVJaDZCLEVBQVE5RCxRQUFValIsR0FBdUIrVSxFQUFRN0QsUUFBVWxSLEdBQ2pFK1UsRUFBUTNELFlBQWNsUixHQUFpQjZVLEVBQVEzRCxZQUFjalIsR0FtakJ2Q3V6RSxDQUF3QjMrRCxLQUFpRCxJQUFwQzA3RCxFQUFnQjE3RCxFQUFRN2MsT0FDckYsSUFBSUEsRUFBUW00RSxFQUFhdDdELEVBQVE3YyxNQUFPbzRFLEdBQWlCLEVBQU94dEIsR0FDaEU1cUQsRUFBUXk3RSxHQUFrQjUrRCxFQUFTN2MsR0FFbkMsTUFBTXk0RSxFQUFlRixFQUFnQnY0RSxJQUFXNjJDLEVBQy9DZ2lDLEVBQVdsQixFQUFNM2pFLFFBQVM2SSxFQUFRMUQsT0FBUTBELEVBQVF4RCxVQUVuRCxJQUtJcWlFLEVBTEE1QyxFQUFTbkIsRUFBTTNqRSxRQUFTNkksRUFBUW5lLE1BQ25DaTlFLEVBQW1CaEQsRUFBbUI5N0QsRUFBUXJELGVBQWdCcS9ELEVBQVVDLEVBQVFqOEQsRUFBUXhELFNBQVV3RCxFQUFROHJELGdCQUUzR2tTLEdBQXNCQyxFQUFhaitELEVBQVM0N0QsR0FHNUMsTUFBTWwvRCxFQUFVc0QsRUFBUXRELFFBRWxCcWlFLEVBQWtCL2tDLElBQXVDLElBQTNCaDZCLEVBQVE4ckQsZUFDdENrVCxPQUFtRHgwRSxJQUFoQzh4RSxFQUFrQnFCLFVBQ3JDc0IsRUFBUy9DLEVBQWNsOEQsRUFBUzdjLEVBQU95NEUsR0FFN0MsR0FBSzU3RCxFQUFRay9ELGVBSVpKLEVBQW1CLEtBRWQ5a0MsRUFJSDhrQyxFQUZJOStELEVBQVFuZSxPQUFTNEosRUFFRixNQUVSdVUsRUFBUW5lLE9BQVMySixFQUVULE1BRVJ3VSxFQUFRbmUsT0FBUzhKLEVBRVQsTUFJQSxNQU1mcVUsRUFBUW5lLE9BQVM0SixHQUVyQjlkLFFBQVFDLE1BQU8sZ0VBUVpveUIsRUFBUTFELFNBQVd6USxHQUFvQyxPQUFyQml6RSxHQUtqQzkrRCxFQUFRbmUsT0FBUzBKLEdBQXFCeVUsRUFBUW5lLE9BQVMySixJQUUzRDdkLFFBQVF1aEIsS0FBTSwrRkFFZDhRLEVBQVFuZSxLQUFPMEosRUFDZjB3RSxFQUFTbkIsRUFBTTNqRSxRQUFTNkksRUFBUW5lLE9BTTdCbWUsRUFBUTFELFNBQVd4USxHQUEyQyxPQUFyQmd6RSxJQUk3Q0EsRUFBbUIsTUFLZDkrRCxFQUFRbmUsT0FBUzhKLElBRXJCaGUsUUFBUXVoQixLQUFNLG9GQUVkOFEsRUFBUW5lLEtBQU84SixFQUNmc3dFLEVBQVNuQixFQUFNM2pFLFFBQVM2SSxFQUFRbmUsUUFRN0JrOUUsR0FBaUJDLEVBRXJCbjNCLEVBQU0weUIsYUFBYyxLQUFNLEVBQUd1RSxFQUFrQjM3RSxFQUFNL1QsTUFBTytULEVBQU05VCxRQUlsRXc0RCxFQUFNdmdELFdBQVksS0FBTSxFQUFHdzNFLEVBQWtCMzdFLEVBQU0vVCxNQUFPK1QsRUFBTTlULE9BQVEsRUFBRzJzRixFQUFVQyxFQUFRLFdBSXhGLEdBQUtqOEQsRUFBUXZFLGNBTW5CLEdBQUtpQixFQUFRNXlCLE9BQVMsR0FBSzh4RixFQUFlLENBRXBDbUQsR0FBaUJDLEdBRXJCbjNCLEVBQU0weUIsYUFBYyxLQUFNMEUsRUFBUUgsRUFBa0JwaUUsRUFBUyxHQUFJdHRCLE1BQU9zdEIsRUFBUyxHQUFJcnRCLFFBSXRGLElBQU0sSUFBSXZELEVBQUksRUFBR2kxQixFQUFLckUsRUFBUTV5QixPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBRTdDK3lGLEVBQVNuaUUsRUFBUzV3QixHQUViaXpGLEVBRUpsM0IsRUFBTTR5QixjQUFlLEtBQU0zdUYsRUFBRyxFQUFHLEVBQUcreUYsRUFBT3p2RixNQUFPeXZGLEVBQU94dkYsT0FBUTJzRixFQUFVQyxFQUFRNEMsRUFBTzc3RSxNQUkxRjZrRCxFQUFNdmdELFdBQVksS0FBTXhiLEVBQUdnekYsRUFBa0JELEVBQU96dkYsTUFBT3l2RixFQUFPeHZGLE9BQVEsRUFBRzJzRixFQUFVQyxFQUFRNEMsRUFBTzc3RSxNQU14R2dkLEVBQVFsRCxpQkFBa0IsT0FJckJpaUUsR0FFQ0MsR0FFSm4zQixFQUFNMHlCLGFBQWMsS0FBTTBFLEVBQVFILEVBQWtCMzdFLEVBQU0vVCxNQUFPK1QsRUFBTTlULFFBSXhFdzRELEVBQU00eUIsY0FBZSxLQUFNLEVBQUcsRUFBRyxFQUFHdDNFLEVBQU0vVCxNQUFPK1QsRUFBTTlULE9BQVEyc0YsRUFBVUMsRUFBUTk0RSxFQUFNSCxPQUl2RjZrRCxFQUFNdmdELFdBQVksS0FBTSxFQUFHdzNFLEVBQWtCMzdFLEVBQU0vVCxNQUFPK1QsRUFBTTlULE9BQVEsRUFBRzJzRixFQUFVQyxFQUFROTRFLEVBQU1ILFdBTS9GLEdBQUtnZCxFQUFRbzhELG9CQUFzQixDQUVwQzJDLEdBQWlCQyxHQUVyQm4zQixFQUFNMHlCLGFBQWMsS0FBTTBFLEVBQVFILEVBQWtCcGlFLEVBQVMsR0FBSXR0QixNQUFPc3RCLEVBQVMsR0FBSXJ0QixRQUl0RixJQUFNLElBQUl2RCxFQUFJLEVBQUdpMUIsRUFBS3JFLEVBQVE1eUIsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUU3Qyt5RixFQUFTbmlFLEVBQVM1d0IsR0FFYmswQixFQUFRMUQsU0FBVzFRLEVBRUwsT0FBYm93RSxFQUVDK0MsRUFFSmwzQixFQUFNOHlCLHdCQUF5QixLQUFNN3VGLEVBQUcsRUFBRyxFQUFHK3lGLEVBQU96dkYsTUFBT3l2RixFQUFPeHZGLE9BQVEyc0YsRUFBVTZDLEVBQU83N0UsTUFJNUY2a0QsRUFBTXd5QixxQkFBc0IsS0FBTXZ1RixFQUFHZ3pGLEVBQWtCRCxFQUFPenZGLE1BQU95dkYsRUFBT3h2RixPQUFRLEVBQUd3dkYsRUFBTzc3RSxNQU0vRnJWLFFBQVF1aEIsS0FBTSxrR0FNVjZ2RSxFQUVKbDNCLEVBQU00eUIsY0FBZSxLQUFNM3VGLEVBQUcsRUFBRyxFQUFHK3lGLEVBQU96dkYsTUFBT3l2RixFQUFPeHZGLE9BQVEyc0YsRUFBVUMsRUFBUTRDLEVBQU83N0UsTUFJMUY2a0QsRUFBTXZnRCxXQUFZLEtBQU14YixFQUFHZ3pGLEVBQWtCRCxFQUFPenZGLE1BQU95dkYsRUFBT3h2RixPQUFRLEVBQUcyc0YsRUFBVUMsRUFBUTRDLEVBQU83N0UsV0FRbkcsR0FBS2dkLEVBQVFTLG1CQUVkcytELEdBRUNDLEdBRUpuM0IsRUFBTTJ5QixhQUFjLE1BQU95RSxFQUFRSCxFQUFrQjM3RSxFQUFNL1QsTUFBTytULEVBQU05VCxPQUFROFQsRUFBTTBjLE9BSXZGZ29DLEVBQU02eUIsY0FBZSxNQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUd2M0UsRUFBTS9ULE1BQU8rVCxFQUFNOVQsT0FBUThULEVBQU0wYyxNQUFPbThELEVBQVVDLEVBQVE5NEUsRUFBTUgsT0FJeEc2a0QsRUFBTXl5QixXQUFZLE1BQU8sRUFBR3dFLEVBQWtCMzdFLEVBQU0vVCxNQUFPK1QsRUFBTTlULE9BQVE4VCxFQUFNMGMsTUFBTyxFQUFHbThELEVBQVVDLEVBQVE5NEUsRUFBTUgsV0FJNUcsR0FBS2dkLEVBQVFZLGdCQUVkbStELEdBRUNDLEdBRUpuM0IsRUFBTTJ5QixhQUFjLE1BQU95RSxFQUFRSCxFQUFrQjM3RSxFQUFNL1QsTUFBTytULEVBQU05VCxPQUFROFQsRUFBTTBjLE9BSXZGZ29DLEVBQU02eUIsY0FBZSxNQUFPLEVBQUcsRUFBRyxFQUFHLEVBQUd2M0UsRUFBTS9ULE1BQU8rVCxFQUFNOVQsT0FBUThULEVBQU0wYyxNQUFPbThELEVBQVVDLEVBQVE5NEUsRUFBTUgsT0FJeEc2a0QsRUFBTXl5QixXQUFZLE1BQU8sRUFBR3dFLEVBQWtCMzdFLEVBQU0vVCxNQUFPK1QsRUFBTTlULE9BQVE4VCxFQUFNMGMsTUFBTyxFQUFHbThELEVBQVVDLEVBQVE5NEUsRUFBTUgsV0FJNUcsR0FBS2dkLEVBQVFtOEQscUJBRWQ0QyxHQUFpQkMsRUFFckJuM0IsRUFBTTB5QixhQUFjLEtBQU0wRSxFQUFRSCxFQUFrQjM3RSxFQUFNL1QsTUFBTytULEVBQU05VCxRQUl2RXc0RCxFQUFNdmdELFdBQVksS0FBTSxFQUFHdzNFLEVBQWtCMzdFLEVBQU0vVCxNQUFPK1QsRUFBTTlULE9BQVEsRUFBRzJzRixFQUFVQyxFQUFRLFdBWTlGLEdBQUt2L0QsRUFBUTV5QixPQUFTLEdBQUs4eEYsRUFBZSxDQUVwQ21ELEdBQWlCQyxHQUVyQm4zQixFQUFNMHlCLGFBQWMsS0FBTTBFLEVBQVFILEVBQWtCcGlFLEVBQVMsR0FBSXR0QixNQUFPc3RCLEVBQVMsR0FBSXJ0QixRQUl0RixJQUFNLElBQUl2RCxFQUFJLEVBQUdpMUIsRUFBS3JFLEVBQVE1eUIsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUU3Qyt5RixFQUFTbmlFLEVBQVM1d0IsR0FFYml6RixFQUVKbDNCLEVBQU00eUIsY0FBZSxLQUFNM3VGLEVBQUcsRUFBRyxFQUFHa3dGLEVBQVVDLEVBQVE0QyxHQUl0RGgzQixFQUFNdmdELFdBQVksS0FBTXhiLEVBQUdnekYsRUFBa0I5QyxFQUFVQyxFQUFRNEMsR0FNakU3K0QsRUFBUWxELGlCQUFrQixPQUlyQmlpRSxHQUVDQyxHQUVKbjNCLEVBQU0weUIsYUFBYyxLQUFNMEUsRUFBUUgsRUFBa0IzN0UsRUFBTS9ULE1BQU8rVCxFQUFNOVQsUUFJeEV3NEQsRUFBTTR5QixjQUFlLEtBQU0sRUFBRyxFQUFHLEVBQUd1QixFQUFVQyxFQUFROTRFLElBSXREMGtELEVBQU12Z0QsV0FBWSxLQUFNLEVBQUd3M0UsRUFBa0I5QyxFQUFVQyxFQUFROTRFLEdBUTdEdzRFLEVBQTZCMzdELEVBQVM0N0QsSUFFMUNDLEVBQWdCb0MsR0FJakJsbUUsRUFBTzBtRSxpQkFBbUIxbUUsRUFBT29ELFFBRTVCNkUsRUFBUTdDLFVBQVc2QyxFQUFRN0MsU0FBVTZDLEdBSTNDczhELEVBQWtCcUIsVUFBWTM5RCxFQUFRN0UsUUFtTnZDLFNBQVNna0UsR0FBeUJ2RixFQUFhcGxDLEVBQWN4MEIsRUFBU28vRCxFQUFZQyxHQUVqRixNQUFNckQsRUFBV2xCLEVBQU0zakUsUUFBUzZJLEVBQVExRCxPQUFRMEQsRUFBUXhELFVBQ2xEeS9ELEVBQVNuQixFQUFNM2pFLFFBQVM2SSxFQUFRbmUsTUFDaENpOUUsRUFBbUJoRCxFQUFtQjk3RCxFQUFRckQsZUFBZ0JxL0QsRUFBVUMsRUFBUWo4RCxFQUFReEQsVUFDL0R3b0MsRUFBV3BqRCxJQUFLNHlDLEdBRWpCOHFDLHdCQUVOLFFBQWxCRCxHQUE2QyxRQUFsQkEsRUFFL0J4M0IsRUFBTXl5QixXQUFZK0UsRUFBZSxFQUFHUCxFQUFrQnRxQyxFQUFhcGxELE1BQU9vbEQsRUFBYW5sRCxPQUFRbWxELEVBQWEzMEIsTUFBTyxFQUFHbThELEVBQVVDLEVBQVEsTUFJeElwMEIsRUFBTXZnRCxXQUFZKzNFLEVBQWUsRUFBR1AsRUFBa0J0cUMsRUFBYXBsRCxNQUFPb2xELEVBQWFubEQsT0FBUSxFQUFHMnNGLEVBQVVDLEVBQVEsT0FNdEhwMEIsRUFBTTFvRCxnQkFBaUIsTUFBT3k2RSxHQUV6QjJGLEdBQW9CL3FDLEdBRXhCdW1DLEVBQW1CeUUsbUNBQW9DLE1BQU9KLEVBQVlDLEVBQWVyNkIsRUFBV3BqRCxJQUFLb2UsR0FBVTg4RCxlQUFnQixFQUFHMkMsR0FBd0JqckMsSUFJOUpxbUMsRUFBSTZFLHFCQUFzQixNQUFPTixFQUFZQyxFQUFlcjZCLEVBQVdwakQsSUFBS29lLEdBQVU4OEQsZUFBZ0IsR0FJdkdqMUIsRUFBTTFvRCxnQkFBaUIsTUFBTyxNQU0vQixTQUFTd2dGLEdBQTBCQyxFQUFjcHJDLEVBQWNxckMsR0FJOUQsR0FGQWhGLEVBQUlpRixpQkFBa0IsTUFBT0YsR0FFeEJwckMsRUFBYXYwQixjQUFpQnUwQixFQUFhdDBCLGNBQWdCLENBRS9ELElBQUk0K0QsRUFBbUIsTUFFdkIsR0FBS2UsR0FBaUJOLEdBQW9CL3FDLEdBQWlCLENBRTFELE1BQU1yMEIsRUFBZXEwQixFQUFhcjBCLGFBRTdCQSxHQUFnQkEsRUFBYSsrRCxpQkFFNUIvK0QsRUFBYXRlLE9BQVM0SixFQUUxQnF6RSxFQUFtQixNQUVSMytELEVBQWF0ZSxPQUFTMkosSUFFakNzekUsRUFBbUIsUUFNckIsTUFBTTErRCxFQUFVcS9ELEdBQXdCanJDLEdBRW5DK3FDLEdBQW9CL3FDLEdBRXhCdW1DLEVBQW1CZ0Ysa0NBQW1DLE1BQU8zL0QsRUFBUzArRCxFQUFrQnRxQyxFQUFhcGxELE1BQU9vbEQsRUFBYW5sRCxRQUl6SHdyRixFQUFJbUYsK0JBQWdDLE1BQU81L0QsRUFBUzArRCxFQUFrQnRxQyxFQUFhcGxELE1BQU9vbEQsRUFBYW5sRCxhQU14R3dyRixFQUFJb0Ysb0JBQXFCLE1BQU9uQixFQUFrQnRxQyxFQUFhcGxELE1BQU9vbEQsRUFBYW5sRCxRQUlwRndyRixFQUFJcUYsd0JBQXlCLE1BQU8sTUFBTyxNQUFPTixRQUU1QyxHQUFLcHJDLEVBQWF2MEIsYUFBZXUwQixFQUFhdDBCLGNBQWdCLENBRXBFLE1BQU1FLEVBQVVxL0QsR0FBd0JqckMsR0FFbkNxckMsSUFBd0QsSUFBdkNOLEdBQW9CL3FDLEdBRXpDcW1DLEVBQUltRiwrQkFBZ0MsTUFBTzUvRCxFQUFTLE1BQU9vMEIsRUFBYXBsRCxNQUFPb2xELEVBQWFubEQsUUFFakZrd0YsR0FBb0IvcUMsR0FFL0J1bUMsRUFBbUJnRixrQ0FBbUMsTUFBTzMvRCxFQUFTLE1BQU9vMEIsRUFBYXBsRCxNQUFPb2xELEVBQWFubEQsUUFJOUd3ckYsRUFBSW9GLG9CQUFxQixNQUFPLE1BQU96ckMsRUFBYXBsRCxNQUFPb2xELEVBQWFubEQsUUFLekV3ckYsRUFBSXFGLHdCQUF5QixNQUFPLE1BQU8sTUFBT04sT0FFNUMsQ0FHTixNQUFNNS9ELEdBQXdELElBQTlDdzBCLEVBQWF4ekIsNkJBQXdDd3pCLEVBQWF4MEIsUUFBUyxHQUFNdzBCLEVBQWF4MEIsUUFFeEdnOEQsRUFBV2xCLEVBQU0zakUsUUFBUzZJLEVBQVExRCxPQUFRMEQsRUFBUXhELFVBQ2xEeS9ELEVBQVNuQixFQUFNM2pFLFFBQVM2SSxFQUFRbmUsTUFDaENpOUUsRUFBbUJoRCxFQUFtQjk3RCxFQUFRckQsZUFBZ0JxL0QsRUFBVUMsRUFBUWo4RCxFQUFReEQsVUFDeEY0RCxFQUFVcS9ELEdBQXdCanJDLEdBRW5DcXJDLElBQXdELElBQXZDTixHQUFvQi9xQyxHQUV6Q3FtQyxFQUFJbUYsK0JBQWdDLE1BQU81L0QsRUFBUzArRCxFQUFrQnRxQyxFQUFhcGxELE1BQU9vbEQsRUFBYW5sRCxRQUU1Rmt3RixHQUFvQi9xQyxHQUUvQnVtQyxFQUFtQmdGLGtDQUFtQyxNQUFPMy9ELEVBQVMwK0QsRUFBa0J0cUMsRUFBYXBsRCxNQUFPb2xELEVBQWFubEQsUUFJekh3ckYsRUFBSW9GLG9CQUFxQixNQUFPbkIsRUFBa0J0cUMsRUFBYXBsRCxNQUFPb2xELEVBQWFubEQsUUFNckZ3ckYsRUFBSWlGLGlCQUFrQixNQUFPLE1BbUU5QixTQUFTSyxHQUF3QjNyQyxHQUVoQyxNQUFNcW9DLEVBQXlCNzNCLEVBQVdwakQsSUFBSzR5QyxHQUN6QzRyQyxHQUFvRCxJQUF6QzVyQyxFQUFhQyx3QkFFOUIsR0FBS0QsRUFBYXIwQixlQUFrQjA4RCxFQUF1QndELDBCQUE0QixDQUV0RixHQUFLRCxFQUFTLE1BQU0sSUFBSXQxRixNQUFPLDZEQXJFakMsU0FBNEI4dUYsRUFBYXBsQyxHQUd4QyxHQURpQkEsR0FBZ0JBLEVBQWFDLHdCQUNoQyxNQUFNLElBQUkzcEQsTUFBTywyREFJL0IsR0FGQSs4RCxFQUFNMW9ELGdCQUFpQixNQUFPeTZFLElBRXJCcGxDLEVBQWFyMEIsZUFBZ0JxMEIsRUFBYXIwQixhQUFhKytELGVBRS9ELE1BQU0sSUFBSXAwRixNQUFPLHVFQUtYazZELEVBQVdwakQsSUFBSzR5QyxFQUFhcjBCLGNBQWUyOEQsZ0JBQ2pEdG9DLEVBQWFyMEIsYUFBYWhkLE1BQU0vVCxRQUFVb2xELEVBQWFwbEQsT0FDdkRvbEQsRUFBYXIwQixhQUFhaGQsTUFBTTlULFNBQVdtbEQsRUFBYW5sRCxTQUV6RG1sRCxFQUFhcjBCLGFBQWFoZCxNQUFNL1QsTUFBUW9sRCxFQUFhcGxELE1BQ3JEb2xELEVBQWFyMEIsYUFBYWhkLE1BQU05VCxPQUFTbWxELEVBQWFubEQsT0FDdERtbEQsRUFBYXIwQixhQUFhL0UsYUFBYyxHQUl6Q3dpRCxFQUFjcHBCLEVBQWFyMEIsYUFBYyxHQUV6QyxNQUFNbWdFLEVBQW9CdDdCLEVBQVdwakQsSUFBSzR5QyxFQUFhcjBCLGNBQWUyOEQsZUFDaEUxOEQsRUFBVXEvRCxHQUF3QmpyQyxHQUV4QyxHQUFLQSxFQUFhcjBCLGFBQWE3RCxTQUFXelEsRUFFcEMwekUsR0FBb0IvcUMsR0FFeEJ1bUMsRUFBbUJ5RSxtQ0FBb0MsTUFBTyxNQUFPLEtBQU1jLEVBQW1CLEVBQUdsZ0UsR0FJakd5NkQsRUFBSTZFLHFCQUFzQixNQUFPLE1BQU8sS0FBTVksRUFBbUIsT0FJNUQsSUFBSzlyQyxFQUFhcjBCLGFBQWE3RCxTQUFXeFEsRUFjaEQsTUFBTSxJQUFJaGhCLE1BQU8sK0JBWlp5MEYsR0FBb0IvcUMsR0FFeEJ1bUMsRUFBbUJ5RSxtQ0FBb0MsTUFBTyxNQUFPLEtBQU1jLEVBQW1CLEVBQUdsZ0UsR0FJakd5NkQsRUFBSTZFLHFCQUFzQixNQUFPLE1BQU8sS0FBTVksRUFBbUIsSUFzQmxFQyxDQUFtQjFELEVBQXVCRyxtQkFBb0J4b0MsUUFJOUQsR0FBSzRyQyxFQUFTLENBRWJ2RCxFQUF1QkksbUJBQXFCLEdBRTVDLElBQU0sSUFBSW54RixFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFFdkIrN0QsRUFBTTFvRCxnQkFBaUIsTUFBTzA5RSxFQUF1QkcsbUJBQW9CbHhGLElBQ3pFK3dGLEVBQXVCSSxtQkFBb0JueEYsR0FBTSt1RixFQUFJMkYscUJBQ3JEYixHQUEwQjlDLEVBQXVCSSxtQkFBb0JueEYsR0FBSzBvRCxHQUFjLFFBTXpGcVQsRUFBTTFvRCxnQkFBaUIsTUFBTzA5RSxFQUF1Qkcsb0JBQ3JESCxFQUF1QkksbUJBQXFCcEMsRUFBSTJGLHFCQUNoRGIsR0FBMEI5QyxFQUF1QkksbUJBQW9Cem9DLEdBQWMsR0FNckZxVCxFQUFNMW9ELGdCQUFpQixNQUFPLE1BNFIvQixTQUFTc2dGLEdBQXdCanJDLEdBRWhDLE9BQU8zcEQsS0FBSzBHLElBQUttOUQsRUFBWWxhLEVBQWFwMEIsU0FJM0MsU0FBU20vRCxHQUFvQi9xQyxHQUU1QixNQUFNcW9DLEVBQXlCNzNCLEVBQVdwakQsSUFBSzR5QyxHQUUvQyxPQUFPd0YsR0FBWXhGLEVBQWFwMEIsUUFBVSxJQUFrRSxJQUE3RDZ4QixFQUFXMGIsSUFBSywwQ0FBcUcsSUFBaERrdkIsRUFBdUI0RCxxQkFtQjVJLFNBQVM3QixHQUFrQjUrRCxFQUFTN2MsR0FFbkMsTUFBTXFaLEVBQVd3RCxFQUFReEQsU0FDbkJGLEVBQVMwRCxFQUFRMUQsT0FDakJ6YSxFQUFPbWUsRUFBUW5lLEtBRXJCLE9BQXFDLElBQWhDbWUsRUFBUW84RCxzQkFBMkQsSUFBM0JwOEQsRUFBUThyRCxnQkFBMkI5ckQsRUFBUTFELFNBQVdyUCxHQUU5RnVQLElBQWEvUCxJQUlaK1AsSUFBYTlQLEdBRUMsSUFBYnN0QyxHQUlrQyxJQUFqQy9ILEVBQVcwYixJQUFLLGFBQXlCcnhDLElBQVcxUSxHQUV4RG9VLEVBQVExRCxPQUFTclAsRUFJakIrUyxFQUFRM0QsVUFBWWpSLEVBQ3BCNFUsRUFBUWxELGlCQUFrQixHQU0xQjNaLEVBQVFtWCxHQUFXb21FLGFBQWN2OUUsR0FRN0JtWixJQUFXMVEsR0FBYy9KLElBQVN5SixHQUV0QzNkLFFBQVF1aEIsS0FBTSwyRkFRaEJ2aEIsUUFBUUMsTUFBTyxxREFBc0Q0dUIsSUEzQ2tEclosRUF1RDFIblksS0FBS3d3RSxvQkE5NUNMLFdBRUMsTUFBTW1sQixFQUFjbkQsRUFVcEIsT0FSS21ELEdBQWU5eUIsR0FFbkJsZ0UsUUFBUXVoQixLQUFNLHNDQUF3Q3l4RSxFQUFjLCtDQUFpRDl5QixHQUl0SDJ2QixHQUFnQixFQUVUbUQsR0FtNUNSMzFGLEtBQUs0MUYsa0JBcjZDTCxXQUVDcEQsRUFBZSxHQXE2Q2hCeHlGLEtBQUs0eUUsYUFBZUEsRUFDcEI1eUUsS0FBS2t6RSxrQkExMUNMLFNBQTRCbCtDLEVBQVN5OUQsR0FFcEMsTUFBTW5CLEVBQW9CdDNCLEVBQVdwakQsSUFBS29lLEdBRXJDQSxFQUFRN0UsUUFBVSxHQUFLbWhFLEVBQWtCcUIsWUFBYzM5RCxFQUFRN0UsUUFFbkUwaUUsR0FBZXZCLEVBQW1CdDhELEVBQVN5OUQsSUFLNUM1MUIsRUFBTTlvRCxjQUFlLE1BQVEwK0UsR0FDN0I1MUIsRUFBTTh3QixZQUFhLE1BQU8yRCxFQUFrQlEsa0JBKzBDN0M5eEYsS0FBSzh5RSxhQTMwQ0wsU0FBdUI5OUMsRUFBU3k5RCxHQUUvQixNQUFNbkIsRUFBb0J0M0IsRUFBV3BqRCxJQUFLb2UsR0FFckNBLEVBQVE3RSxRQUFVLEdBQUttaEUsRUFBa0JxQixZQUFjMzlELEVBQVE3RSxRQUVuRTBpRSxHQUFldkIsRUFBbUJ0OEQsRUFBU3k5RCxJQUs1QzUxQixFQUFNOW9ELGNBQWUsTUFBUTArRSxHQUM3QjUxQixFQUFNOHdCLFlBQWEsTUFBTzJELEVBQWtCUSxrQkFnMEM3Qzl4RixLQUFLZ3pFLGVBNXpDTCxTQUF5QmgrQyxFQUFTeTlELEdBRWpDLE1BQU1uQixFQUFvQnQzQixFQUFXcGpELElBQUtvZSxHQUVyQ0EsRUFBUTdFLFFBQVUsR0FBS21oRSxFQUFrQnFCLFlBQWMzOUQsRUFBUTdFLFFBbWdCckUsU0FBNEJtaEUsRUFBbUJ0OEQsRUFBU3k5RCxHQUV2RCxHQUE4QixJQUF6Qno5RCxFQUFRN2MsTUFBTXJaLE9BQWUsT0FFbEMsTUFBTXcwRixFQUFjRCxHQUFhL0IsRUFBbUJ0OEQsR0FDOUNqSSxFQUFTaUksRUFBUWpJLE9BS3ZCLEdBSEE4dkMsRUFBTTlvRCxjQUFlLE1BQVEwK0UsR0FDN0I1MUIsRUFBTTh3QixZQUFhLE1BQU8yRCxFQUFrQlEsZ0JBRXZDL2tFLEVBQU9vRCxVQUFZcEQsRUFBTzBtRSxtQkFBb0MsSUFBaEJILEVBQXVCLENBRXpFekQsRUFBSTZELFlBQWEsTUFBTzErRCxFQUFRaEQsT0FDaEM2OUQsRUFBSTZELFlBQWEsTUFBTzErRCxFQUFRakQsa0JBQ2hDODlELEVBQUk2RCxZQUFhLEtBQU0xK0QsRUFBUS9DLGlCQUMvQjQ5RCxFQUFJNkQsWUFBYSxNQUFPLEdBRXhCLE1BQU1tQyxFQUFpQjdnRSxFQUFRbzhELHFCQUF1QnA4RCxFQUFRN2MsTUFBTyxHQUFJaTVFLG9CQUNuRTNnRSxFQUFrQnVFLEVBQVE3YyxNQUFPLElBQU82YyxFQUFRN2MsTUFBTyxHQUFJc1ksY0FFM0RxbEUsRUFBWSxHQUVsQixJQUFNLElBQUloMUYsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBUXRCZzFGLEVBQVdoMUYsR0FOTCswRixHQUFrQnBsRSxFQU1QQSxFQUFnQnVFLEVBQVE3YyxNQUFPclgsR0FBSXFYLE1BQVE2YyxFQUFRN2MsTUFBT3JYLEdBSjFEd3ZGLEVBQWF0N0QsRUFBUTdjLE1BQU9yWCxJQUFLLEdBQU8sRUFBTWtpRSxHQVFoRTh5QixFQUFXaDFGLEdBQU04eUYsR0FBa0I1K0QsRUFBUzhnRSxFQUFXaDFGLElBSXhELE1BQU1xWCxFQUFRMjlFLEVBQVcsR0FDeEJsRixFQUFlRixFQUFnQnY0RSxJQUFXNjJDLEVBQzFDZ2lDLEVBQVdsQixFQUFNM2pFLFFBQVM2SSxFQUFRMUQsT0FBUTBELEVBQVF4RCxVQUNsRHkvRCxFQUFTbkIsRUFBTTNqRSxRQUFTNkksRUFBUW5lLE1BQ2hDaTlFLEVBQW1CaEQsRUFBbUI5N0QsRUFBUXJELGVBQWdCcS9ELEVBQVVDLEVBQVFqOEQsRUFBUXhELFVBRW5GdWlFLEVBQWtCL2tDLElBQXVDLElBQTNCaDZCLEVBQVE4ckQsZUFDdENrVCxPQUFtRHgwRSxJQUFoQzh4RSxFQUFrQnFCLFVBQzNDLElBSUlqaEUsRUFKQXVpRSxFQUFTL0MsRUFBY2w4RCxFQUFTN2MsRUFBT3k0RSxHQU0zQyxHQUpBb0MsR0FBc0IsTUFBT2grRCxFQUFTNDdELEdBSWpDaUYsRUFBZSxDQUVkOUIsR0FBaUJDLEdBRXJCbjNCLEVBQU0weUIsYUFBYyxNQUFPMEUsRUFBUUgsRUFBa0IzN0UsRUFBTS9ULE1BQU8rVCxFQUFNOVQsUUFJekUsSUFBTSxJQUFJdkQsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQU8sQ0FFOUI0d0IsRUFBVW9rRSxFQUFXaDFGLEdBQUk0d0IsUUFFekIsSUFBTSxJQUFJMXdCLEVBQUksRUFBR0EsRUFBSTB3QixFQUFRNXlCLE9BQVFrQyxJQUFPLENBRTNDLE1BQU02eUYsRUFBU25pRSxFQUFTMXdCLEdBRW5CZzBCLEVBQVExRCxTQUFXMVEsRUFFTCxPQUFib3dFLEVBRUMrQyxFQUVKbDNCLEVBQU04eUIsd0JBQXlCLE1BQVE3dUYsRUFBR0UsRUFBRyxFQUFHLEVBQUc2eUYsRUFBT3p2RixNQUFPeXZGLEVBQU94dkYsT0FBUTJzRixFQUFVNkMsRUFBTzc3RSxNQUlqRzZrRCxFQUFNd3lCLHFCQUFzQixNQUFRdnVGLEVBQUdFLEVBQUc4eUYsRUFBa0JELEVBQU96dkYsTUFBT3l2RixFQUFPeHZGLE9BQVEsRUFBR3d2RixFQUFPNzdFLE1BTXBHclYsUUFBUXVoQixLQUFNLG1HQU1WNnZFLEVBRUpsM0IsRUFBTTR5QixjQUFlLE1BQVEzdUYsRUFBR0UsRUFBRyxFQUFHLEVBQUc2eUYsRUFBT3p2RixNQUFPeXZGLEVBQU94dkYsT0FBUTJzRixFQUFVQyxFQUFRNEMsRUFBTzc3RSxNQUkvRjZrRCxFQUFNdmdELFdBQVksTUFBUXhiLEVBQUdFLEVBQUc4eUYsRUFBa0JELEVBQU96dkYsTUFBT3l2RixFQUFPeHZGLE9BQVEsRUFBRzJzRixFQUFVQyxFQUFRNEMsRUFBTzc3RSxZQVV6RyxDQUVOMFosRUFBVXNELEVBQVF0RCxRQUVicWlFLEdBQWlCQyxJQU1oQnRpRSxFQUFRNXlCLE9BQVMsR0FBSW0xRixJQUUxQnAzQixFQUFNMHlCLGFBQWMsTUFBTzBFLEVBQVFILEVBQWtCZ0MsRUFBVyxHQUFJMXhGLE1BQU8weEYsRUFBVyxHQUFJenhGLFNBSTNGLElBQU0sSUFBSXZELEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2QixHQUFLMnZCLEVBQWdCLENBRWZzakUsRUFFSmwzQixFQUFNNHlCLGNBQWUsTUFBUTN1RixFQUFHLEVBQUcsRUFBRyxFQUFHZzFGLEVBQVdoMUYsR0FBSXNELE1BQU8weEYsRUFBV2gxRixHQUFJdUQsT0FBUTJzRixFQUFVQyxFQUFRNkUsRUFBV2gxRixHQUFJa1gsTUFJdkg2a0QsRUFBTXZnRCxXQUFZLE1BQVF4YixFQUFHLEVBQUdnekYsRUFBa0JnQyxFQUFXaDFGLEdBQUlzRCxNQUFPMHhGLEVBQVdoMUYsR0FBSXVELE9BQVEsRUFBRzJzRixFQUFVQyxFQUFRNkUsRUFBV2gxRixHQUFJa1gsTUFJcEksSUFBTSxJQUFJaFgsRUFBSSxFQUFHQSxFQUFJMHdCLEVBQVE1eUIsT0FBUWtDLElBQU8sQ0FFM0MsTUFDTSswRixFQURTcmtFLEVBQVMxd0IsR0FDR21YLE1BQU9yWCxHQUFJcVgsTUFFakM0N0UsRUFFSmwzQixFQUFNNHlCLGNBQWUsTUFBUTN1RixFQUFHRSxFQUFJLEVBQUcsRUFBRyxFQUFHKzBGLEVBQVkzeEYsTUFBTzJ4RixFQUFZMXhGLE9BQVEyc0YsRUFBVUMsRUFBUThFLEVBQVkvOUUsTUFJbEg2a0QsRUFBTXZnRCxXQUFZLE1BQVF4YixFQUFHRSxFQUFJLEVBQUc4eUYsRUFBa0JpQyxFQUFZM3hGLE1BQU8yeEYsRUFBWTF4RixPQUFRLEVBQUcyc0YsRUFBVUMsRUFBUThFLEVBQVkvOUUsV0FNMUgsQ0FFRCs3RSxFQUVKbDNCLEVBQU00eUIsY0FBZSxNQUFRM3VGLEVBQUcsRUFBRyxFQUFHLEVBQUdrd0YsRUFBVUMsRUFBUTZFLEVBQVdoMUYsSUFJdEUrN0QsRUFBTXZnRCxXQUFZLE1BQVF4YixFQUFHLEVBQUdnekYsRUFBa0I5QyxFQUFVQyxFQUFRNkUsRUFBV2gxRixJQUloRixJQUFNLElBQUlFLEVBQUksRUFBR0EsRUFBSTB3QixFQUFRNXlCLE9BQVFrQyxJQUFPLENBRTNDLE1BQU02eUYsRUFBU25pRSxFQUFTMXdCLEdBRW5CK3lGLEVBRUpsM0IsRUFBTTR5QixjQUFlLE1BQVEzdUYsRUFBR0UsRUFBSSxFQUFHLEVBQUcsRUFBR2d3RixFQUFVQyxFQUFRNEMsRUFBTzE3RSxNQUFPclgsSUFJN0UrN0QsRUFBTXZnRCxXQUFZLE1BQVF4YixFQUFHRSxFQUFJLEVBQUc4eUYsRUFBa0I5QyxFQUFVQyxFQUFRNEMsRUFBTzE3RSxNQUFPclgsTUFZdEY2dkYsRUFBNkIzN0QsRUFBUzQ3RCxJQUcxQ0MsRUFBZ0IsT0FJakI5akUsRUFBTzBtRSxpQkFBbUIxbUUsRUFBT29ELFFBRTVCNkUsRUFBUTdDLFVBQVc2QyxFQUFRN0MsU0FBVTZDLEdBSTNDczhELEVBQWtCcUIsVUFBWTM5RCxFQUFRN0UsUUF6c0JyQzZsRSxDQUFtQjFFLEVBQW1CdDhELEVBQVN5OUQsSUFLaEQ1MUIsRUFBTTlvRCxjQUFlLE1BQVEwK0UsR0FDN0I1MUIsRUFBTTh3QixZQUFhLE1BQU8yRCxFQUFrQlEsa0JBaXpDN0M5eEYsS0FBS2kyRixlQXhYTCxTQUF5QnpzQyxFQUFjMHNDLEVBQWMvZ0UsR0FFcEQsTUFBTTA4RCxFQUF5QjczQixFQUFXcGpELElBQUs0eUMsUUFFekJocUMsSUFBakIwMkUsR0FFSi9CLEdBQXlCdEMsRUFBdUJHLG1CQUFvQnhvQyxFQUFjQSxFQUFheDBCLFFBQVMsTUFBTyxXQUkxRnhWLElBQWpCMlYsR0FFSmdnRSxHQUF3QjNyQyxJQTZXMUJ4cEQsS0FBS20yRixrQkF0V0wsU0FBNEIzc0MsR0FFM0IsTUFBTXgwQixFQUFVdzBCLEVBQWF4MEIsUUFFdkI2OEQsRUFBeUI3M0IsRUFBV3BqRCxJQUFLNHlDLEdBQ3pDOG5DLEVBQW9CdDNCLEVBQVdwakQsSUFBS29lLEdBRTFDdzBCLEVBQWFwdkMsaUJBQWtCLFVBQVd3M0UsSUFFUyxJQUE5Q3BvQyxFQUFheHpCLG9DQUV5QnhXLElBQXJDOHhFLEVBQWtCUSxpQkFFdEJSLEVBQWtCUSxlQUFpQmpDLEVBQUk5ekUsaUJBSXhDdTFFLEVBQWtCcUIsVUFBWTM5RCxFQUFRN0UsUUFDdEM0eEMsRUFBS3dLLE9BQU83NUMsWUFJYixNQUFNMGlFLEdBQW9ELElBQXpDNXJDLEVBQWFDLHdCQUN4QjJzQyxHQUEwRSxJQUE5QzVzQyxFQUFheHpCLDZCQUN6QzQ2RCxFQUFlRixFQUFnQmxuQyxJQUFrQndGLEVBSXZELEdBQUtvbUMsRUFBUyxDQUVidkQsRUFBdUJHLG1CQUFxQixHQUU1QyxJQUFNLElBQUlseEYsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCK3dGLEVBQXVCRyxtQkFBb0JseEYsR0FBTSt1RixFQUFJd0cseUJBUXRELEdBRkF4RSxFQUF1QkcsbUJBQXFCbkMsRUFBSXdHLG9CQUUzQ0QsRUFFSixHQUFLcm5DLEVBQWEzSCxZQUFjLENBRS9CLE1BQU0xMEIsRUFBVzgyQixFQUFheDBCLFFBRTlCLElBQU0sSUFBSWwwQixFQUFJLEVBQUdpMUIsRUFBS3JELEVBQVM1ekIsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRXJELE1BQU13eEYsRUFBdUJ0NEIsRUFBV3BqRCxJQUFLOGIsRUFBVTV4QixTQUVWMGUsSUFBeEM4eUUsRUFBcUJSLGlCQUV6QlEsRUFBcUJSLGVBQWlCakMsRUFBSTl6RSxnQkFFMUNnbUQsRUFBS3dLLE9BQU83NUMsa0JBUWQvdkIsUUFBUXVoQixLQUFNLHNIQUlULEdBQU84cUMsR0FBWXhGLEVBQWFwMEIsUUFBVSxJQUE4QyxJQUF2Q20vRCxHQUFvQi9xQyxHQUEyQixDQUV0R3FvQyxFQUF1Qk0sK0JBQWlDdEMsRUFBSXdHLG9CQUM1RHhFLEVBQXVCTyx5QkFBMkJ2QyxFQUFJMkYscUJBRXREM0YsRUFBSWlGLGlCQUFrQixNQUFPakQsRUFBdUJPLDBCQUVwRCxNQUFNcEIsRUFBV2xCLEVBQU0zakUsUUFBUzZJLEVBQVExRCxPQUFRMEQsRUFBUXhELFVBQ2xEeS9ELEVBQVNuQixFQUFNM2pFLFFBQVM2SSxFQUFRbmUsTUFDaENpOUUsRUFBbUJoRCxFQUFtQjk3RCxFQUFRckQsZUFBZ0JxL0QsRUFBVUMsRUFBUWo4RCxFQUFReEQsVUFDeEY0RCxFQUFVcS9ELEdBQXdCanJDLEdBQ3hDcW1DLEVBQUltRiwrQkFBZ0MsTUFBTzUvRCxFQUFTMCtELEVBQWtCdHFDLEVBQWFwbEQsTUFBT29sRCxFQUFhbmxELFFBRXZHdzRELEVBQU0xb0QsZ0JBQWlCLE1BQU8wOUUsRUFBdUJNLGdDQUNyRHRDLEVBQUlxRix3QkFBeUIsTUFBTyxNQUFPLE1BQU9yRCxFQUF1Qk8sMEJBQ3pFdkMsRUFBSWlGLGlCQUFrQixNQUFPLE1BRXhCdHJDLEVBQWF2MEIsY0FFakI0OEQsRUFBdUJRLHlCQUEyQnhDLEVBQUkyRixxQkFDdERiLEdBQTBCOUMsRUFBdUJRLHlCQUEwQjdvQyxHQUFjLElBSTFGcVQsRUFBTTFvRCxnQkFBaUIsTUFBTyxNQVFoQyxHQUFLaWhGLEVBQVMsQ0FFYnY0QixFQUFNOHdCLFlBQWEsTUFBTzJELEVBQWtCUSxnQkFDNUNrQixHQUFzQixNQUFPaCtELEVBQVM0N0QsR0FFdEMsSUFBTSxJQUFJOXZGLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2QnF6RixHQUF5QnRDLEVBQXVCRyxtQkFBb0JseEYsR0FBSzBvRCxFQUFjeDBCLEVBQVMsTUFBTyxNQUFRbDBCLEdBSTNHNnZGLEVBQTZCMzdELEVBQVM0N0QsSUFFMUNDLEVBQWdCLE9BSWpCaDBCLEVBQU11eUIscUJBRUEsR0FBS2dILEVBQTBCLENBRXJDLE1BQU0xakUsRUFBVzgyQixFQUFheDBCLFFBRTlCLElBQU0sSUFBSWwwQixFQUFJLEVBQUdpMUIsRUFBS3JELEVBQVM1ekIsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRXJELE1BQU1zekYsRUFBYTFoRSxFQUFVNXhCLEdBQ3ZCd3hGLEVBQXVCdDRCLEVBQVdwakQsSUFBS3c5RSxHQUU3Q3YzQixFQUFNOHdCLFlBQWEsS0FBTTJFLEVBQXFCUixnQkFDOUNrQixHQUFzQixLQUFNb0IsRUFBWXhELEdBQ3hDdUQsR0FBeUJ0QyxFQUF1QkcsbUJBQW9CeG9DLEVBQWM0cUMsRUFBWSxNQUFRdHpGLEVBQUcsTUFFcEc2dkYsRUFBNkJ5RCxFQUFZeEQsSUFFN0NDLEVBQWdCLE1BTWxCaDBCLEVBQU11eUIsb0JBRUEsQ0FFTixJQUFJa0gsRUFBZ0IsTUFFZjlzQyxFQUFhM3pCLHVCQUF5QjJ6QixFQUFhOXpCLDRCQUVsRHM1QixFQUVKc25DLEVBQWdCOXNDLEVBQWEzekIsc0JBQXdCLE1BQVEsTUFJN0RsekIsUUFBUUMsTUFBTyxvR0FNakJpNkQsRUFBTTh3QixZQUFhMkksRUFBZWhGLEVBQWtCUSxnQkFDcERrQixHQUFzQnNELEVBQWV0aEUsRUFBUzQ3RCxHQUM5Q3VELEdBQXlCdEMsRUFBdUJHLG1CQUFvQnhvQyxFQUFjeDBCLEVBQVMsTUFBT3NoRSxHQUU3RjNGLEVBQTZCMzdELEVBQVM0N0QsSUFFMUNDLEVBQWdCeUYsR0FJakJ6NUIsRUFBTXV5QixnQkFNRjVsQyxFQUFhdjBCLGFBRWpCa2dFLEdBQXdCM3JDLElBcUwxQnhwRCxLQUFLdTJGLHlCQS9LTCxTQUFtQy9zQyxHQUVsQyxNQUFNb25DLEVBQWVGLEVBQWdCbG5DLElBQWtCd0YsRUFFakR0OEIsR0FBeUQsSUFBOUM4MkIsRUFBYXh6Qiw2QkFBd0N3ekIsRUFBYXgwQixRQUFVLENBQUV3MEIsRUFBYXgwQixTQUU1RyxJQUFNLElBQUlsMEIsRUFBSSxFQUFHaTFCLEVBQUtyRCxFQUFTNXpCLE9BQVFnQyxFQUFJaTFCLEVBQUlqMUIsSUFBTyxDQUVyRCxNQUFNazBCLEVBQVV0QyxFQUFVNXhCLEdBRTFCLEdBQUs2dkYsRUFBNkIzN0QsRUFBUzQ3RCxHQUFpQixDQUUzRCxNQUFNbnVFLEVBQVMrbUMsRUFBYUMsd0JBQTBCLE1BQVEsS0FDeER5bEMsRUFBZWwxQixFQUFXcGpELElBQUtvZSxHQUFVODhELGVBRS9DajFCLEVBQU04d0IsWUFBYWxyRSxFQUFReXNFLEdBQzNCMkIsRUFBZ0JwdUUsR0FDaEJvNkMsRUFBTXV5QixtQkErSlRwdkYsS0FBS3cyRiw4QkF2SkwsU0FBd0NodEMsR0FFdkMsR0FBT3dGLEdBQVl4RixFQUFhcDBCLFFBQVUsSUFBOEMsSUFBdkNtL0QsR0FBb0IvcUMsR0FBMkIsQ0FFL0YsTUFBTXBsRCxFQUFRb2xELEVBQWFwbEQsTUFDckJDLEVBQVNtbEQsRUFBYW5sRCxPQUM1QixJQUFJOG5DLEVBQU8sTUFDWCxNQUFNc3FELEVBQW9CLENBQUUsT0FDdEJDLEVBQWFsdEMsRUFBYXQwQixjQUFnQixNQUFRLE1BRW5EczBCLEVBQWF2MEIsYUFFakJ3aEUsRUFBa0JqMEYsS0FBTWswRixHQUl6QixNQUFNN0UsRUFBeUI3M0IsRUFBV3BqRCxJQUFLNHlDLEdBQ3pDbXRDLE9BQXFFbjNFLElBQS9DcXlFLEVBQXVCK0UscUJBQXNDL0UsRUFBdUIrRSxxQkFFckYsSUFBdEJELElBRUNudEMsRUFBYXYwQixjQUFja1gsR0FBUSxLQUNuQ3FkLEVBQWF0MEIsZ0JBQWdCaVgsR0FBUSxPQUkzQzB3QixFQUFNMW9ELGdCQUFpQixNQUFPMDlFLEVBQXVCTSxnQ0FDckR0MUIsRUFBTTFvRCxnQkFBaUIsTUFBTzA5RSxFQUF1QkcscUJBRTFCLElBQXRCMkUsSUFFSjlHLEVBQUlnSCxzQkFBdUIsTUFBTyxDQUFFSCxJQUNwQzdHLEVBQUlnSCxzQkFBdUIsTUFBTyxDQUFFSCxLQUlyQzdHLEVBQUlpSCxnQkFBaUIsRUFBRyxFQUFHMXlGLEVBQU9DLEVBQVEsRUFBRyxFQUFHRCxFQUFPQyxFQUFROG5DLEVBQU0sTUFFaEU2akQsR0FFSkgsRUFBSWdILHNCQUF1QixNQUFPSixHQUluQzU1QixFQUFNMW9ELGdCQUFpQixNQUFPLE1BQzlCMG9ELEVBQU0xb0QsZ0JBQWlCLE1BQU8wOUUsRUFBdUJNLGtDQTJHdkRueUYsS0FBS20xRix1QkFBeUJBLEdBQzlCbjFGLEtBQUttMEYsd0JBQTBCQSxHQUMvQm4wRixLQUFLdTBGLG1CQUFxQkEsR0FJM0IsU0FBU3dDLEdBQVlqb0MsRUFBSTdILEVBQVk4SCxHQUVwQyxNQUFNQyxFQUFXRCxFQUFhQyxTQTBQOUIsTUFBTyxDQUFFN2lDLFFBeFBULFNBQWtCNW9CLEVBQUdpdUIsRUFBVyxNQUUvQixJQUFJOHNDLEVBRUosR0FBSy82RCxJQUFNK2MsRUFBbUIsT0FBTyxLQUNyQyxHQTEvdUI0QixPQTAvdUJ2Qi9jLEVBQThCLE9BQU8sTUFDMUMsR0ExL3VCNEIsT0EwL3VCdkJBLEVBQThCLE9BQU8sTUFFMUMsR0FwZ3ZCZSxPQW9ndkJWQSxFQUFpQixPQUFPLEtBQzdCLEdBcGd2QmdCLE9Bb2d2QlhBLEVBQWtCLE9BQU8sS0FDOUIsR0FBS0EsSUFBTWdkLEVBQW9CLE9BQU8sS0FDdEMsR0FwZ3ZCYyxPQW9ndkJUaGQsRUFBZ0IsT0FBTyxLQUM1QixHQUFLQSxJQUFNaWQsRUFBa0IsT0FBTyxLQUNwQyxHQUFLamQsSUFBTWtkLEVBQVksT0FBTyxLQUU5QixHQUFLbGQsSUFBTW1kLEVBRVYsT0FBS3N1QyxFQUFrQixNQUV2QnNQLEVBQVlyWCxFQUFXcndDLElBQUssMEJBRVQsT0FBZDBuRCxFQUVHQSxFQUFVMDRCLGVBSVYsTUFNVCxHQW5odkJrQixPQW1odkJienpGLEVBQW9CLE9BQU8sS0FDaEMsR0FBS0EsSUFBTXFkLEVBQWEsT0FBTyxLQUMvQixHQWxodkJzQixPQWtodkJqQnJkLEVBQXdCLE9BQU8sS0FDcEMsR0FsaHZCMkIsT0FraHZCdEJBLEVBQTZCLE9BQU8sS0FDekMsR0FBS0EsSUFBTXNkLEVBQWMsT0FBTyxLQUNoQyxHQUFLdGQsSUFBTXVkLEVBQXFCLE9BQU8sTUFDdkMsR0FsaHZCZ0IsT0FraHZCWHZkLEVBQWtCLE9BQU8sS0FFOUIsR0ExaHZCZ0IsT0EwaHZCWEEsRUFHSixPQURBWixRQUFRdWhCLEtBQU0sc0lBQ1AsS0FNUixHQUFLM2dCLElBQU0wZSxFQUlWLE9BRkFxOEMsRUFBWXJYLEVBQVdyd0MsSUFBSyxZQUVULE9BQWQwbkQsRUFFR0EsRUFBVTI0QixlQUlWLEtBUVQsR0E5aXZCdUIsT0E4aXZCbEIxekYsRUFBeUIsT0FBTyxNQUNyQyxHQTlpdkJlLE9BOGl2QlZBLEVBQWlCLE9BQU8sTUFDN0IsR0E5aXZCc0IsT0E4aXZCakJBLEVBQXdCLE9BQU8sTUFDcEMsR0E5aXZCd0IsT0E4aXZCbkJBLEVBQTBCLE9BQU8sTUFJdEMsR0FBS0EsSUFBTXdkLEdBQXdCeGQsSUFBTXlkLEdBQXlCemQsSUFBTTBkLEdBQXlCMWQsSUFBTTJkLEVBRXRHLEdBQUtzUSxJQUFhOVAsRUFBZSxDQUloQyxHQUZBNDhDLEVBQVlyWCxFQUFXcndDLElBQUssc0NBRVQsT0FBZDBuRCxFQVNKLE9BQU8sS0FQUCxHQUFLLzZELElBQU13ZCxFQUF1QixPQUFPdTlDLEVBQVU0NEIsOEJBQ25ELEdBQUszekYsSUFBTXlkLEVBQXdCLE9BQU9zOUMsRUFBVTY0QixvQ0FDcEQsR0FBSzV6RixJQUFNMGQsRUFBd0IsT0FBT3E5QyxFQUFVODRCLG9DQUNwRCxHQUFLN3pGLElBQU0yZCxFQUF3QixPQUFPbzlDLEVBQVUrNEIsd0NBUS9DLENBSU4sR0FGQS80QixFQUFZclgsRUFBV3J3QyxJQUFLLGlDQUVULE9BQWQwbkQsRUFTSixPQUFPLEtBUFAsR0FBSy82RCxJQUFNd2QsRUFBdUIsT0FBT3U5QyxFQUFVZzVCLDZCQUNuRCxHQUFLL3pGLElBQU15ZCxFQUF3QixPQUFPczlDLEVBQVVpNUIsOEJBQ3BELEdBQUtoMEYsSUFBTTBkLEVBQXdCLE9BQU9xOUMsRUFBVWs1Qiw4QkFDcEQsR0FBS2owRixJQUFNMmQsRUFBd0IsT0FBT285QyxFQUFVbTVCLDhCQWN2RCxHQXRsdkI4QixRQXNsdkJ6QmwwRixHQXJsdkJ5QixRQXFsdkJRQSxHQXBsdkJQLFFBb2x2QndDQSxHQW5sdkJ4QyxRQW1sdkIwRUEsRUFBaUMsQ0FJekksR0FGQSs2RCxFQUFZclgsRUFBV3J3QyxJQUFLLGtDQUVULE9BQWQwbkQsRUFTSixPQUFPLEtBUFAsR0E1bHZCNEIsUUE0bHZCdkIvNkQsRUFBZ0MsT0FBTys2RCxFQUFVbzVCLGdDQUN0RCxHQTVsdkI0QixRQTRsdkJ2Qm4wRixFQUFnQyxPQUFPKzZELEVBQVVxNUIsZ0NBQ3RELEdBNWx2QjZCLFFBNGx2QnhCcDBGLEVBQWlDLE9BQU8rNkQsRUFBVXM1QixpQ0FDdkQsR0E1bHZCNkIsUUE0bHZCeEJyMEYsRUFBaUMsT0FBTys2RCxFQUFVdTVCLGlDQVl6RCxHQXZtdkJzQixRQXVtdkJqQnQwRixFQUlKLE9BRkErNkQsRUFBWXJYLEVBQVdyd0MsSUFBSyxpQ0FFVCxPQUFkMG5ELEVBRUdBLEVBQVV3NUIsMEJBSVYsS0FRVCxHQXhudkJzQixRQXdudkJqQnYwRixHQXZudkJzQixRQXVudkJHQSxFQUE2QixDQUkxRCxHQUZBKzZELEVBQVlyWCxFQUFXcndDLElBQUssZ0NBRVQsT0FBZDBuRCxFQU9KLE9BQU8sS0FMUCxHQTludkJvQixRQThudkJmLzZELEVBQXdCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVV5NUIsc0JBQXdCejVCLEVBQVUwNUIscUJBQ2hILEdBOW52QnlCLFFBOG52QnBCejBGLEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVUyNUIsaUNBQW1DMzVCLEVBQVU0NUIsMEJBWWxJLEdBem92QjJCLFFBeW92QnRCMzBGLEdBeG92QnNCLFFBd292QlFBLEdBdm92QlIsUUF1b3ZCc0NBLEdBdG92QnRDLFFBdW92QjFCQSxHQXRvdkIwQixRQXNvdkJJQSxHQXJvdkJKLFFBcW92QmtDQSxHQXBvdkJsQyxRQXFvdkIxQkEsR0Fwb3ZCMEIsUUFvb3ZCSUEsR0Fub3ZCSCxRQW1vdkJpQ0EsR0Fsb3ZCakMsUUFtb3ZCM0JBLEdBbG92QjJCLFFBa292QklBLEdBam92QkgsUUFpb3ZCa0NBLEdBaG92QmxDLFFBaW92QjVCQSxHQWhvdkI0QixRQWdvdkJJQSxFQUErQixDQUkvRCxHQUZBKzZELEVBQVlyWCxFQUFXcndDLElBQUssaUNBRVQsT0FBZDBuRCxFQW1CSixPQUFPLEtBakJQLEdBbnB2QnlCLFFBbXB2QnBCLzZELEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVU2NUIscUNBQXVDNzVCLEVBQVU4NUIsNkJBQ3BJLEdBbnB2QnlCLFFBbXB2QnBCNzBGLEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVUrNUIscUNBQXVDLzVCLEVBQVVnNkIsNkJBQ3BJLEdBbnB2QnlCLFFBbXB2QnBCLzBGLEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVVpNkIscUNBQXVDajZCLEVBQVVrNkIsNkJBQ3BJLEdBbnB2QnlCLFFBbXB2QnBCajFGLEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVVtNkIscUNBQXVDbjZCLEVBQVVvNkIsNkJBQ3BJLEdBbnB2QnlCLFFBbXB2QnBCbjFGLEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVVxNkIscUNBQXVDcjZCLEVBQVVzNkIsNkJBQ3BJLEdBbnB2QnlCLFFBbXB2QnBCcjFGLEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVV1NkIscUNBQXVDdjZCLEVBQVV3NkIsNkJBQ3BJLEdBbnB2QnlCLFFBbXB2QnBCdjFGLEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVV5NkIscUNBQXVDejZCLEVBQVUwNkIsNkJBQ3BJLEdBbnB2QnlCLFFBbXB2QnBCejFGLEVBQTZCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVUyNkIscUNBQXVDMzZCLEVBQVU0NkIsNkJBQ3BJLEdBbnB2QjBCLFFBbXB2QnJCMzFGLEVBQThCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVU2NkIsc0NBQXdDNzZCLEVBQVU4NkIsOEJBQ3RJLEdBbnB2QjBCLFFBbXB2QnJCNzFGLEVBQThCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVUrNkIsc0NBQXdDLzZCLEVBQVVnN0IsOEJBQ3RJLEdBbnB2QjBCLFFBbXB2QnJCLzFGLEVBQThCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVVpN0Isc0NBQXdDajdCLEVBQVVrN0IsOEJBQ3RJLEdBbnB2QjJCLFFBbXB2QnRCajJGLEVBQStCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVVtN0IsdUNBQXlDbjdCLEVBQVVvN0IsK0JBQ3hJLEdBbnB2QjJCLFFBbXB2QnRCbjJGLEVBQStCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVVxN0IsdUNBQXlDcjdCLEVBQVVzN0IsK0JBQ3hJLEdBbnB2QjJCLFFBbXB2QnRCcjJGLEVBQStCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVV1N0IsdUNBQXlDdjdCLEVBQVV3N0IsK0JBWTFJLEdBOXB2QnVCLFFBOHB2QmxCdjJGLEVBQXlCLENBSTdCLEdBRkErNkQsRUFBWXJYLEVBQVdyd0MsSUFBSyxnQ0FFVCxPQUFkMG5ELEVBTUosT0FBTyxLQUpQLEdBcHF2QnFCLFFBb3F2QmhCLzZELEVBQXlCLE9BQVNpdUIsSUFBYTlQLEVBQWlCNDhDLEVBQVV5N0IscUNBQXVDejdCLEVBQVUwN0IsK0JBWWxJLE9BQUt6MkYsSUFBTW9kLEVBRUxxdUMsRUFBa0IsT0FFdkJzUCxFQUFZclgsRUFBV3J3QyxJQUFLLHVCQUVULE9BQWQwbkQsRUFFR0EsRUFBVTI3Qix3QkFJVixXQVpULElBempIRjVhLEdBQXFCOS9FLFVBQVVzcEYsd0JBQXlCLEVBaWxIeEQsTUFBTXFSLFdBQW9CdHlDLEdBRXpCai9DLFlBQWErWixFQUFRLElBRXBCK08sUUFFQXp4QixLQUFLbTZGLFFBQVV6M0UsR0FNakJ3M0UsR0FBWTM2RixVQUFVNjZGLGVBQWdCLEVBRXRDLE1BQU1DLFdBQWM1c0QsR0FFbkI5a0MsY0FFQzhvQixRQUVBenhCLEtBQUs2VyxLQUFPLFNBTWR3akYsR0FBTTk2RixVQUFVKzZGLFNBQVUsRUFFMUIsTUFBTUMsR0FBYSxDQUFFMWpGLEtBQU0sUUFFM0IsTUFBTTJqRixHQUVMN3hGLGNBRUMzSSxLQUFLeTZGLFdBQWEsS0FDbEJ6NkYsS0FBSzA2RixNQUFRLEtBQ2IxNkYsS0FBSzI2RixNQUFRLEtBSWRDLGVBYUMsT0FYb0IsT0FBZjU2RixLQUFLMjZGLFFBRVQzNkYsS0FBSzI2RixNQUFRLElBQUlOLEdBQ2pCcjZGLEtBQUsyNkYsTUFBTTlvRSxrQkFBbUIsRUFDOUI3eEIsS0FBSzI2RixNQUFNM3NELFNBQVUsRUFFckJodUMsS0FBSzI2RixNQUFNRSxPQUFTLEdBQ3BCNzZGLEtBQUsyNkYsTUFBTUcsV0FBYSxDQUFFQyxVQUFVLElBSTlCLzZGLEtBQUsyNkYsTUFJYkssb0JBY0MsT0FaeUIsT0FBcEJoN0YsS0FBS3k2RixhQUVUejZGLEtBQUt5NkYsV0FBYSxJQUFJSixHQUN0QnI2RixLQUFLeTZGLFdBQVc1b0Usa0JBQW1CLEVBQ25DN3hCLEtBQUt5NkYsV0FBV3pzRCxTQUFVLEVBQzFCaHVDLEtBQUt5NkYsV0FBV1EsbUJBQW9CLEVBQ3BDajdGLEtBQUt5NkYsV0FBV1MsZUFBaUIsSUFBSXJnRSxHQUNyQzc2QixLQUFLeTZGLFdBQVdVLG9CQUFxQixFQUNyQ243RixLQUFLeTZGLFdBQVdXLGdCQUFrQixJQUFJdmdFLElBSWhDNzZCLEtBQUt5NkYsV0FJYlksZUFjQyxPQVpvQixPQUFmcjdGLEtBQUswNkYsUUFFVDE2RixLQUFLMDZGLE1BQVEsSUFBSUwsR0FDakJyNkYsS0FBSzA2RixNQUFNN29FLGtCQUFtQixFQUM5Qjd4QixLQUFLMDZGLE1BQU0xc0QsU0FBVSxFQUNyQmh1QyxLQUFLMDZGLE1BQU1PLG1CQUFvQixFQUMvQmo3RixLQUFLMDZGLE1BQU1RLGVBQWlCLElBQUlyZ0UsR0FDaEM3NkIsS0FBSzA2RixNQUFNUyxvQkFBcUIsRUFDaENuN0YsS0FBSzA2RixNQUFNVSxnQkFBa0IsSUFBSXZnRSxJQUkzQjc2QixLQUFLMDZGLE1BSWIzM0YsY0FBZXlmLEdBb0JkLE9BbEJ5QixPQUFwQnhpQixLQUFLeTZGLFlBRVR6NkYsS0FBS3k2RixXQUFXMTNGLGNBQWV5ZixHQUlaLE9BQWZ4aUIsS0FBSzA2RixPQUVUMTZGLEtBQUswNkYsTUFBTTMzRixjQUFleWYsR0FJUCxPQUFmeGlCLEtBQUsyNkYsT0FFVDM2RixLQUFLMjZGLE1BQU01M0YsY0FBZXlmLEdBSXBCeGlCLEtBSVJzN0YsV0FBWUMsR0FzQlgsT0FwQkF2N0YsS0FBSytDLGNBQWUsQ0FBRThULEtBQU0sZUFBZ0JtQixLQUFNdWpGLElBRXpCLE9BQXBCdjdGLEtBQUt5NkYsYUFFVHo2RixLQUFLeTZGLFdBQVd6c0QsU0FBVSxHQUlQLE9BQWZodUMsS0FBSzA2RixRQUVUMTZGLEtBQUswNkYsTUFBTTFzRCxTQUFVLEdBSUYsT0FBZmh1QyxLQUFLMjZGLFFBRVQzNkYsS0FBSzI2RixNQUFNM3NELFNBQVUsR0FJZmh1QyxLQUlSKzNCLE9BQVF3akUsRUFBYTlzQyxFQUFPK3NDLEdBRTNCLElBQUlDLEVBQVksS0FDWkMsRUFBVyxLQUNYQyxFQUFXLEtBRWYsTUFBTUMsRUFBWTU3RixLQUFLeTZGLFdBQ2pCb0IsRUFBTzc3RixLQUFLMDZGLE1BQ1pvQixFQUFPOTdGLEtBQUsyNkYsTUFFbEIsR0FBS1ksR0FBaUQsb0JBQWxDOXNDLEVBQU1tUCxRQUFRbStCLGdCQXVDakMsR0FyQ21CLE9BQWRILElBRUpILEVBQVlodEMsRUFBTXV0QyxRQUFTVCxFQUFZVSxlQUFnQlQsR0FFcEMsT0FBZEMsSUFFSkcsRUFBVTN3RSxPQUFPMUUsVUFBV2sxRSxFQUFVbGtGLFVBQVUwVCxRQUNoRDJ3RSxFQUFVM3dFLE9BQU95ZixVQUFXa3hELEVBQVU5N0QsU0FBVTg3RCxFQUFVaDBGLFNBQVVnMEYsRUFBVTd3RSxPQUV6RTB3RSxFQUFVUCxnQkFFZFUsRUFBVVgsbUJBQW9CLEVBQzlCVyxFQUFVVixlQUFlbDNFLEtBQU15M0UsRUFBVVAsaUJBSXpDVSxFQUFVWCxtQkFBb0IsRUFJMUJRLEVBQVVMLGlCQUVkUSxFQUFVVCxvQkFBcUIsRUFDL0JTLEVBQVVSLGdCQUFnQnAzRSxLQUFNeTNFLEVBQVVMLGtCQUkxQ1EsRUFBVVQsb0JBQXFCLEVBSWhDbjdGLEtBQUsrQyxjQUFldzNGLE1BTWpCdUIsR0FBUVAsRUFBWU8sS0FBTyxDQUUvQkgsR0FBVyxFQUVYLElBQU0sTUFBTU8sS0FBY1gsRUFBWU8sS0FBS3BwRCxTQUFXLENBR3JELE1BQU15cEQsRUFBWTF0QyxFQUFNMnRDLGFBQWNGLEVBQVlWLEdBRWxELFFBQTZDaDhFLElBQXhDczhFLEVBQUtqQixPQUFRcUIsRUFBV0csV0FBNEIsQ0FHeEQsTUFBTUMsRUFBUSxJQUFJakMsR0FDbEJpQyxFQUFNenFFLGtCQUFtQixFQUN6QnlxRSxFQUFNdHVELFNBQVUsRUFDaEI4dEQsRUFBS2pCLE9BQVFxQixFQUFXRyxXQUFjQyxFQUV0Q1IsRUFBSzczRSxJQUFLcTRFLEdBSVgsTUFBTUEsRUFBUVIsRUFBS2pCLE9BQVFxQixFQUFXRyxXQUVuQixPQUFkRixJQUVKRyxFQUFNcnhFLE9BQU8xRSxVQUFXNDFFLEVBQVU1a0YsVUFBVTBULFFBQzVDcXhFLEVBQU1yeEUsT0FBT3lmLFVBQVc0eEQsRUFBTXg4RCxTQUFVdzhELEVBQU0xMEYsU0FBVTAwRixFQUFNdnhFLE9BQzlEdXhFLEVBQU1DLFlBQWNKLEVBQVVoMkYsUUFJL0JtMkYsRUFBTXR1RCxRQUF3QixPQUFkbXVELEVBT2pCLE1BQU1LLEVBQVdWLEVBQUtqQixPQUFRLG9CQUN4QjRCLEVBQVdYLEVBQUtqQixPQUFRLGFBQ3hCM3JELEVBQVdzdEQsRUFBUzE4RCxTQUFTamEsV0FBWTQyRSxFQUFTMzhELFVBRWxENDhELEVBQWtCLElBQ2xCQyxFQUFZLEtBRWJiLEVBQUtoQixXQUFXQyxVQUFZN3JELEVBQVd3dEQsRUFBa0JDLEdBRTdEYixFQUFLaEIsV0FBV0MsVUFBVyxFQUMzQi82RixLQUFLK0MsY0FBZSxDQUNuQjhULEtBQU0sV0FDTitsRixXQUFZckIsRUFBWXFCLFdBQ3hCbjZFLE9BQVF6aUIsU0FHSTg3RixFQUFLaEIsV0FBV0MsVUFBWTdyRCxHQUFZd3RELEVBQWtCQyxJQUV2RWIsRUFBS2hCLFdBQVdDLFVBQVcsRUFDM0IvNkYsS0FBSytDLGNBQWUsQ0FDbkI4VCxLQUFNLGFBQ04rbEYsV0FBWXJCLEVBQVlxQixXQUN4Qm42RSxPQUFRemlCLGFBT0ksT0FBVDY3RixHQUFpQk4sRUFBWXNCLFlBRWpDbkIsRUFBV2p0QyxFQUFNdXRDLFFBQVNULEVBQVlzQixVQUFXckIsR0FFL0IsT0FBYkUsSUFFSkcsRUFBSzV3RSxPQUFPMUUsVUFBV20xRSxFQUFTbmtGLFVBQVUwVCxRQUMxQzR3RSxFQUFLNXdFLE9BQU95ZixVQUFXbXhELEVBQUsvN0QsU0FBVSs3RCxFQUFLajBGLFNBQVVpMEYsRUFBSzl3RSxPQUVyRDJ3RSxFQUFTUixnQkFFYlcsRUFBS1osbUJBQW9CLEVBQ3pCWSxFQUFLWCxlQUFlbDNFLEtBQU0wM0UsRUFBU1IsaUJBSW5DVyxFQUFLWixtQkFBb0IsRUFJckJTLEVBQVNOLGlCQUViUyxFQUFLVixvQkFBcUIsRUFDMUJVLEVBQUtULGdCQUFnQnAzRSxLQUFNMDNFLEVBQVNOLGtCQUlwQ1MsRUFBS1Ysb0JBQXFCLElBOEIvQixPQWxCbUIsT0FBZFMsSUFFSkEsRUFBVTV0RCxRQUEwQixPQUFkeXRELEdBSVQsT0FBVEksSUFFSkEsRUFBSzd0RCxRQUF5QixPQUFiMHRELEdBSUosT0FBVEksSUFFSkEsRUFBSzl0RCxRQUF5QixPQUFiMnRELEdBSVgzN0YsTUFNVCxNQUFNODhGLFdBQXFCaHNFLEdBRTFCbm9CLFlBQWF2RSxFQUFPQyxFQUFRd1MsRUFBTW1hLEVBQVNFLEVBQU9DLEVBQU9DLEVBQVdDLEVBQVdFLEVBQVlELEdBSTFGLElBRkFBLE9BQW9COVIsSUFBWDhSLEVBQXVCQSxFQUFTelEsS0FFekJBLEdBQWV5USxJQUFXeFEsRUFFekMsTUFBTSxJQUFJaGhCLE1BQU8seUZBSUowZixJQUFUM0ksR0FBc0J5YSxJQUFXelEsSUFBY2hLLEVBQU8wSixRQUM3Q2YsSUFBVDNJLEdBQXNCeWEsSUFBV3hRLElBQXFCakssRUFBTzhKLEdBRWxFOFEsTUFBTyxLQUFNVCxFQUFTRSxFQUFPQyxFQUFPQyxFQUFXQyxFQUFXQyxFQUFRemEsRUFBTTBhLEdBRXhFdnhCLEtBQUttWSxNQUFRLENBQUUvVCxNQUFPQSxFQUFPQyxPQUFRQSxHQUVyQ3JFLEtBQUtveEIsZUFBMEI1UixJQUFkNFIsRUFBMEJBLEVBQVlqUixFQUN2RG5nQixLQUFLcXhCLGVBQTBCN1IsSUFBZDZSLEVBQTBCQSxFQUFZbFIsRUFFdkRuZ0IsS0FBS2d5QixPQUFRLEVBQ2JoeUIsS0FBSzh4QixpQkFBa0IsR0FPekJnckUsR0FBYXY5RixVQUFVMjBGLGdCQUFpQixFQUV4QyxNQUFNNkksV0FBcUI3NkUsRUFFMUJ2WixZQUFhcWhELEVBQVU4RSxHQUV0QnI5QixRQUVBLE1BQU0wekIsRUFBUW5sRCxLQUVkLElBQUk0OUQsRUFBVSxLQUNWby9CLEVBQXlCLEVBRXpCeEIsRUFBaUIsS0FDakJ5QixFQUFxQixjQUVyQkMsRUFBTyxLQUNQQyxFQUFZLEtBQ1pDLEVBQWMsS0FDZEMsRUFBYyxLQUNkQyxFQUFVLEtBQ2QsTUFBTXo5RCxFQUFhaXZCLEVBQUd5dUMsdUJBQ3RCLElBQUlDLEVBQXNCLEtBQ3RCQyxFQUFrQixLQUV0QixNQUFNQyxFQUFjLEdBQ2RDLEVBQWtCLElBQUkxZixJQUl0QjJmLEVBQVUsSUFBSWgyQyxHQUNwQmcyQyxFQUFRbHhELE9BQU9MLE9BQVEsR0FDdkJ1eEQsRUFBUTlwRixTQUFXLElBQUlvZixHQUV2QixNQUFNMnFFLEVBQVUsSUFBSWoyQyxHQUNwQmkyQyxFQUFRbnhELE9BQU9MLE9BQVEsR0FDdkJ3eEQsRUFBUS9wRixTQUFXLElBQUlvZixHQUV2QixNQUFNaW5FLEVBQVUsQ0FBRXlELEVBQVNDLEdBRXJCQyxFQUFXLElBQUk1RCxHQUNyQjRELEVBQVNweEQsT0FBT0wsT0FBUSxHQUN4Qnl4RCxFQUFTcHhELE9BQU9MLE9BQVEsR0FFeEIsSUFBSTB4RCxFQUFvQixLQUNwQkMsRUFBbUIsS0F3RHZCLFNBQVNDLEVBQWdCejdFLEdBRXhCLE1BQU0wN0UsRUFBYVAsRUFBZ0IvbUYsSUFBSzRMLEVBQU0rNEUsYUFFekMyQyxHQUVKQSxFQUFXbjdGLGNBQWUsQ0FBRThULEtBQU0yTCxFQUFNM0wsS0FBTW1CLEtBQU13SyxFQUFNKzRFLGNBTTVELFNBQVM0QyxJQUVSUixFQUFnQlMsU0FBUyxTQUFXRixFQUFZM0MsR0FFL0MyQyxFQUFXNUMsV0FBWUMsTUFJeEJvQyxFQUFnQnBwRixRQUVoQndwRixFQUFvQixLQUNwQkMsRUFBbUIsS0FJbkJoMEMsRUFBU1UsZ0JBQWlCOHlDLEdBRTFCSCxFQUFjLEtBQ2RELEVBQWMsS0FDZEQsRUFBWSxLQUNadi9CLEVBQVUsS0FDVjYvQixFQUFrQixLQUlsQmxyRCxFQUFVenRDLE9BRVZxZ0QsRUFBTWs1QyxjQUFlLEVBRXJCbDVDLEVBQU1waUQsY0FBZSxDQUFFOFQsS0FBTSxlQXNLOUIsU0FBU3luRixFQUFzQjk3RSxHQUU5QixNQUFNKzdFLEVBQWUzZ0MsRUFBUTJnQyxhQUk3QixJQUFNLElBQUl6OUYsRUFBSSxFQUFHQSxFQUFJNDhGLEVBQVk1K0YsT0FBUWdDLElBRXhDNjhGLEVBQWdCaHhGLElBQUs0eEYsRUFBY3o5RixHQUFLNDhGLEVBQWE1OEYsSUFNdEQsSUFBTSxJQUFJQSxFQUFJLEVBQUdBLEVBQUkwaEIsRUFBTWc4RSxRQUFRMS9GLE9BQVFnQyxJQUFPLENBRWpELE1BQU15NkYsRUFBYy80RSxFQUFNZzhFLFFBQVMxOUYsR0FDN0JvOUYsRUFBYVAsRUFBZ0IvbUYsSUFBSzJrRixHQUVuQzJDLElBRUpBLEVBQVduN0YsY0FBZSxDQUFFOFQsS0FBTSxlQUFnQm1CLEtBQU11akYsSUFDeERvQyxFQUFnQnJtRixPQUFRaWtGLElBUTFCLElBQU0sSUFBSXo2RixFQUFJLEVBQUdBLEVBQUkwaEIsRUFBTWk4RSxNQUFNMy9GLE9BQVFnQyxJQUFPLENBRS9DLE1BQU15NkYsRUFBYy80RSxFQUFNaThFLE1BQU8zOUYsR0FDM0JvOUYsRUFBYVAsRUFBZ0IvbUYsSUFBSzJrRixHQUVuQzJDLEdBRUpBLEVBQVduN0YsY0FBZSxDQUFFOFQsS0FBTSxZQUFhbUIsS0FBTXVqRixLQXhTeER2N0YsS0FBSzArRixrQkFBbUIsRUFDeEIxK0YsS0FBS2lwRCxTQUFVLEVBRWZqcEQsS0FBS3ErRixjQUFlLEVBRXBCcitGLEtBQUsyK0YsY0FBZ0IsU0FBVy8zRixHQUUvQixJQUFJczNGLEVBQWFSLEVBQWE5MkYsR0FTOUIsWUFQb0I0WSxJQUFmMCtFLElBRUpBLEVBQWEsSUFBSTFELEdBQ2pCa0QsRUFBYTkyRixHQUFVczNGLEdBSWpCQSxFQUFXbEQscUJBSW5CaDdGLEtBQUs0K0Ysa0JBQW9CLFNBQVdoNEYsR0FFbkMsSUFBSXMzRixFQUFhUixFQUFhOTJGLEdBUzlCLFlBUG9CNFksSUFBZjArRSxJQUVKQSxFQUFhLElBQUkxRCxHQUNqQmtELEVBQWE5MkYsR0FBVXMzRixHQUlqQkEsRUFBVzdDLGdCQUluQnI3RixLQUFLNitGLFFBQVUsU0FBV2o0RixHQUV6QixJQUFJczNGLEVBQWFSLEVBQWE5MkYsR0FTOUIsWUFQb0I0WSxJQUFmMCtFLElBRUpBLEVBQWEsSUFBSTFELEdBQ2pCa0QsRUFBYTkyRixHQUFVczNGLEdBSWpCQSxFQUFXdEQsZ0JBbURuQjU2RixLQUFLOCtGLDBCQUE0QixTQUFXOS9GLEdBRTNDZytGLEVBQXlCaCtGLEdBRUcsSUFBdkJtbUQsRUFBTWs1QyxjQUVWMTdGLFFBQVF1aEIsS0FBTSwwRUFNaEJsa0IsS0FBSysrRixzQkFBd0IsU0FBVy8vRixHQUV2Q2krRixFQUFxQmorRixHQUVPLElBQXZCbW1ELEVBQU1rNUMsY0FFVjE3RixRQUFRdWhCLEtBQU0sNkVBTWhCbGtCLEtBQUtnL0Ysa0JBQW9CLFdBRXhCLE9BQU94RCxHQUlSeDdGLEtBQUtpL0YsYUFBZSxXQUVuQixPQUF1QixPQUFoQjdCLEVBQXVCQSxFQUFjQyxHQUk3Q3I5RixLQUFLay9GLFdBQWEsV0FFakIsT0FBTy9CLEdBSVJuOUYsS0FBS20vRixTQUFXLFdBRWYsT0FBTzdCLEdBSVJ0OUYsS0FBSzY5RCxXQUFhLFdBRWpCLE9BQU9ELEdBSVI1OUQsS0FBS28vRixXQUFhQyxlQUFpQnJnRyxHQUlsQyxHQUZBNCtELEVBQVU1K0QsRUFFTyxPQUFaNCtELEVBQW1CLENBbUJ2QixHQWpCQTQvQixFQUFzQnh6QyxFQUFTRyxrQkFFL0J5VCxFQUFReGpELGlCQUFrQixTQUFVNmpGLEdBQ3BDcmdDLEVBQVF4akQsaUJBQWtCLGNBQWU2akYsR0FDekNyZ0MsRUFBUXhqRCxpQkFBa0IsWUFBYTZqRixHQUN2Q3JnQyxFQUFReGpELGlCQUFrQixVQUFXNmpGLEdBQ3JDcmdDLEVBQVF4akQsaUJBQWtCLGVBQWdCNmpGLEdBQzFDcmdDLEVBQVF4akQsaUJBQWtCLGFBQWM2akYsR0FDeENyZ0MsRUFBUXhqRCxpQkFBa0IsTUFBTytqRixHQUNqQ3ZnQyxFQUFReGpELGlCQUFrQixxQkFBc0Jra0YsSUFFZixJQUE1QnorRCxFQUFXeS9ELG9CQUVUeHdDLEVBQUd5d0Msd0JBSTRCLy9FLElBQS9CbytDLEVBQVErb0IsWUFBWWo2QyxTQUErRCxJQUFuQ3NkLEVBQVMrRSxhQUFhQyxTQUF1QixDQUVuRyxNQUFNd3dDLEVBQVksQ0FDakJ6a0YsZUFBNEN5RSxJQUEvQm8rQyxFQUFRK29CLFlBQVlqNkMsUUFBeUI3TSxFQUFXOWtCLFVBQ3JFQyxNQUFPNmtCLEVBQVc3a0IsTUFDbEI2WixNQUFPZ0wsRUFBV2hMLE1BQ2xCdTJCLFFBQVN2ckIsRUFBV3VyQixRQUNwQjR4Qyx1QkFBd0JBLEdBR3pCSyxFQUFjLElBQUlvQyxhQUFjN2hDLEVBQVM5TyxFQUFJMHdDLEdBRTdDNWhDLEVBQVE4aEMsa0JBQW1CLENBQUVDLFVBQVd0QyxJQUV4Q0ksRUFBa0IsSUFBSTdvRSxHQUNyQnlvRSxFQUFZdUMsaUJBQ1p2QyxFQUFZd0Msa0JBQ1osQ0FDQ3Z1RSxPQUFRMVEsRUFDUi9KLEtBQU15SixFQUNOa1IsU0FBVXc0QixFQUFTSyxxQkFJZixDQUVOLElBQUl5MUMsRUFBYyxLQUNkQyxFQUFZLEtBQ1pDLEVBQWdCLEtBRWZuZ0UsRUFBV2hMLFFBRWZtckUsRUFBZ0JuZ0UsRUFBV3VyQixRQUFVLE1BQVEsTUFDN0MwMEMsRUFBY2pnRSxFQUFXdXJCLFFBQVV0cUMsRUFBcUJELEVBQ3hEay9FLEVBQVlsZ0UsRUFBV3VyQixRQUFVenFDLEVBQXFCSixHQUl2RCxNQUFNMC9FLEVBQXNCLENBQzNCQyxZQUFlbDJDLEVBQVNLLGlCQUFtQjNvQyxFQUFpQixNQUFRLE1BQ3BFbytFLFlBQWFFLEVBQ2JwYixZQUFhb1ksR0FHZEcsRUFBWSxJQUFJZ0QsZUFBZ0J2aUMsRUFBUzlPLEdBRXpDc3VDLEVBQWNELEVBQVVpRCxzQkFBdUJILEdBRS9DcmlDLEVBQVE4aEMsa0JBQW1CLENBQUVoekQsT0FBUSxDQUFFMHdELEtBRXZDSyxFQUFrQixJQUFJN29FLEdBQ3JCd29FLEVBQVlpRCxhQUNaakQsRUFBWWtELGNBQ1osQ0FDQ2h2RSxPQUFRMVEsRUFDUi9KLEtBQU15SixFQUNONlUsYUFBYyxJQUFJMm5FLEdBQWNNLEVBQVlpRCxhQUFjakQsRUFBWWtELGNBQWVQLE9BQVd2Z0YsT0FBV0EsT0FBV0EsT0FBV0EsT0FBV0EsT0FBV0EsRUFBV3NnRixHQUNsSzVxRSxjQUFlMkssRUFBV3VyQixRQUMxQjU1QixTQUFVdzRCLEVBQVNLLGVBQ25CajFCLFFBQVN5SyxFQUFXOWtCLFVBQVksRUFBSSxJQUdQaXZDLEVBQVNnUSxXQUFXcGpELElBQUs2bUYsR0FDakM3RyxvQkFBc0J3RyxFQUFZekcsa0JBSTFEOEcsRUFBZ0I1YyxrQkFBbUIsRUFHbkM3Z0YsS0FBS3VnRyxhQUFjLEdBRW5CL0UsUUFBdUI1OUIsRUFBUTRpQyxzQkFBdUJ2RCxHQUV0RDFxRCxFQUFVcWMsV0FBWWdQLEdBQ3RCcnJCLEVBQVV2dEMsUUFFVm1nRCxFQUFNazVDLGNBQWUsRUFFckJsNUMsRUFBTXBpRCxjQUFlLENBQUU4VCxLQUFNLG1CQXFEL0IsTUFBTTRwRixFQUFhLElBQUk1bEUsR0FDakI2bEUsRUFBYSxJQUFJN2xFLEdBeUR2QixTQUFTOGxFLEVBQWM5a0UsRUFBUTZSLEdBRWQsT0FBWEEsRUFFSjdSLEVBQU9LLFlBQVlsWSxLQUFNNlgsRUFBTzVRLFFBSWhDNFEsRUFBT0ssWUFBWTVULGlCQUFrQm9sQixFQUFPeFIsWUFBYUwsRUFBTzVRLFFBSWpFNFEsRUFBT0MsbUJBQW1COVgsS0FBTTZYLEVBQU9LLGFBQWNyUyxTQUl0RDdwQixLQUFLMmdHLGFBQWUsU0FBVzlrRSxHQUU5QixHQUFpQixPQUFaK2hDLEVBQW1CLE9BRXhCa2dDLEVBQVMxeUQsS0FBT3l5RCxFQUFRenlELEtBQU93eUQsRUFBUXh5RCxLQUFPdlAsRUFBT3VQLEtBQ3JEMHlELEVBQVN6eUQsSUFBTXd5RCxFQUFReHlELElBQU11eUQsRUFBUXZ5RCxJQUFNeFAsRUFBT3dQLElBRTdDMHlELElBQXNCRCxFQUFTMXlELE1BQVE0eUQsSUFBcUJGLEVBQVN6eUQsTUFJekV1eUIsRUFBUThoQyxrQkFBbUIsQ0FDMUJrQixVQUFXOUMsRUFBUzF5RCxLQUNwQnkxRCxTQUFVL0MsRUFBU3p5RCxNQUdwQjB5RCxFQUFvQkQsRUFBUzF5RCxLQUM3QjR5RCxFQUFtQkYsRUFBU3p5RCxLQUk3QixNQUFNcUMsRUFBUzdSLEVBQU82UixPQUNoQnlzRCxFQUFVMkQsRUFBUzNELFFBRXpCd0csRUFBYzdDLEVBQVVwd0QsR0FFeEIsSUFBTSxJQUFJNXNDLEVBQUksRUFBR0EsRUFBSXE1RixFQUFRcjdGLE9BQVFnQyxJQUVwQzYvRixFQUFjeEcsRUFBU3I1RixHQUFLNHNDLEdBSTdCb3dELEVBQVM1aEUsWUFBWXdPLFVBQVdvekQsRUFBU2grRCxTQUFVZytELEVBQVNsbUUsV0FBWWttRSxFQUFTL3lFLE9BSWpGOFEsRUFBT2lFLFNBQVM5YixLQUFNODVFLEVBQVNoK0QsVUFDL0JqRSxFQUFPakUsV0FBVzVULEtBQU04NUUsRUFBU2xtRSxZQUNqQ2lFLEVBQU85USxNQUFNL0csS0FBTTg1RSxFQUFTL3lFLE9BQzVCOFEsRUFBTzVRLE9BQU9qSCxLQUFNODVFLEVBQVM3eUUsUUFDN0I0USxFQUFPSyxZQUFZbFksS0FBTTg1RSxFQUFTNWhFLGFBRWxDLE1BQU1pRSxFQUFXdEUsRUFBT3NFLFNBRXhCLElBQU0sSUFBSXIvQixFQUFJLEVBQUdXLEVBQUkwK0IsRUFBU3JoQyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFNUNxL0IsRUFBVXIvQixHQUFJNHZDLG1CQUFtQixHQU1WLElBQW5CeXBELEVBQVFyN0YsT0FySGQsU0FBaUMrOEIsRUFBUStoRSxFQUFTQyxHQUVqRDRDLEVBQVdoakUsc0JBQXVCbWdFLEVBQVExaEUsYUFDMUN3a0UsRUFBV2pqRSxzQkFBdUJvZ0UsRUFBUTNoRSxhQUUxQyxNQUFNNGtFLEVBQU1MLEVBQVc1NkUsV0FBWTY2RSxHQUU3QkssRUFBUW5ELEVBQVE3aEUsaUJBQWlCalgsU0FDakNrOEUsRUFBUW5ELEVBQVE5aEUsaUJBQWlCalgsU0FLakNzbUIsRUFBTzIxRCxFQUFPLEtBQVNBLEVBQU8sSUFBTyxHQUNyQzExRCxFQUFNMDFELEVBQU8sS0FBU0EsRUFBTyxJQUFPLEdBQ3BDRSxHQUFXRixFQUFPLEdBQU0sR0FBTUEsRUFBTyxHQUNyQ0csR0FBY0gsRUFBTyxHQUFNLEdBQU1BLEVBQU8sR0FFeENJLEdBQVlKLEVBQU8sR0FBTSxHQUFNQSxFQUFPLEdBQ3RDSyxHQUFhSixFQUFPLEdBQU0sR0FBTUEsRUFBTyxHQUN2Q2gyRCxFQUFPSSxFQUFPKzFELEVBQ2RsMkQsRUFBUUcsRUFBT2cyRCxFQUlmQyxFQUFVUCxJQUFVSyxFQUFVQyxHQUM5QkUsRUFBVUQsR0FBWUYsRUFHNUJ2RCxFQUFRMWhFLFlBQVl3TyxVQUFXN08sRUFBT2lFLFNBQVVqRSxFQUFPakUsV0FBWWlFLEVBQU85USxPQUMxRThRLEVBQU9zVCxXQUFZbXlELEdBQ25CemxFLEVBQU93VCxXQUFZZ3lELEdBQ25CeGxFLEVBQU9LLFlBQVlnTSxRQUFTck0sRUFBT2lFLFNBQVVqRSxFQUFPakUsV0FBWWlFLEVBQU85USxPQUN2RThRLEVBQU9DLG1CQUFtQjlYLEtBQU02WCxFQUFPSyxhQUFjclMsU0FLckQsTUFBTTAzRSxFQUFRbjJELEVBQU9pMkQsRUFDZkcsRUFBT24yRCxFQUFNZzJELEVBQ2JJLEVBQVF6MkQsRUFBT3MyRCxFQUNmSSxFQUFTejJELEdBQVU2MUQsRUFBTVEsR0FDekJLLEVBQU9WLEVBQVM1MUQsRUFBTW0yRCxFQUFPRCxFQUM3QkssRUFBVVYsRUFBWTcxRCxFQUFNbTJELEVBQU9ELEVBRXpDMWxFLEVBQU9FLGlCQUFpQmdQLGdCQUFpQjAyRCxFQUFPQyxFQUFRQyxFQUFNQyxFQUFTTCxFQUFPQyxHQTBFN0VLLENBQXdCL0QsRUFBVUYsRUFBU0MsR0FNM0NDLEVBQVMvaEUsaUJBQWlCL1gsS0FBTTQ1RSxFQUFRN2hFLG1CQU0xQy83QixLQUFLOGhHLFVBQVksV0FFaEIsT0FBT2hFLEdBSVI5OUYsS0FBSytoRyxhQUFlLFdBRW5CLE9BQXFCLE9BQWhCM0UsRUFFR0EsRUFBWTRFLGVBSUMsT0FBaEIzRSxFQUVHQSxFQUFZMkUsb0JBRnBCLEdBVURoaUcsS0FBS3VnRyxhQUFlLFNBQVcwQixHQUtULE9BQWhCN0UsSUFFSkEsRUFBWTRFLGVBQWlCQyxHQUlULE9BQWhCNUUsUUFBdUQ3OUUsSUFBL0I2OUUsRUFBWTJFLGlCQUV4QzNFLEVBQVkyRSxlQUFpQkMsSUFRL0IsSUFBSUMsRUFBMkIsS0FtRy9CLE1BQU0zdkQsRUFBWSxJQUFJNGIsR0FFdEI1YixFQUFVb2Msa0JBbkdWLFNBQTJCSCxFQUFNQyxHQUtoQyxHQUhBeXVDLEVBQU96dUMsRUFBTTB6QyxjQUFlM0csR0FDNUI4QixFQUFVN3VDLEVBRUksT0FBVHl1QyxFQUFnQixDQUVwQixNQUFNa0YsRUFBUWxGLEVBQUtrRixNQUVFLE9BQWhCL0UsSUFFSnJ6QyxFQUFTcTRDLDJCQUE0QjVFLEVBQWlCSixFQUFZek8sYUFDbEU1a0MsRUFBU1UsZ0JBQWlCK3lDLElBSTNCLElBQUk2RSxHQUFzQixFQUlyQkYsRUFBTXRqRyxTQUFXZy9GLEVBQVMzRCxRQUFRcjdGLFNBRXRDZy9GLEVBQVMzRCxRQUFRcjdGLE9BQVMsRUFDMUJ3akcsR0FBc0IsR0FJdkIsSUFBTSxJQUFJeGhHLEVBQUksRUFBR0EsRUFBSXNoRyxFQUFNdGpHLE9BQVFnQyxJQUFPLENBRXpDLE1BQU1tbkQsRUFBT202QyxFQUFPdGhHLEdBRXBCLElBQUlnVCxFQUFXLEtBRWYsR0FBcUIsT0FBaEJ1cEYsRUFFSnZwRixFQUFXdXBGLEVBQVluVCxZQUFhamlDLE9BRTlCLENBRU4sTUFBTXM2QyxFQUFhcEYsRUFBVXFGLGdCQUFpQnBGLEVBQWFuMUMsR0FDM0RuMEMsRUFBV3l1RixFQUFXenVGLFNBR1gsSUFBTmhULElBRUprcEQsRUFBU3k0Qyx3QkFDUmhGLEVBQ0E4RSxFQUFXck0sYUFDWGtILEVBQVl6Ryx1QkFBb0JuM0UsRUFBWStpRixFQUFXRyxxQkFFeEQxNEMsRUFBU1UsZ0JBQWlCK3lDLElBTTVCLE1BQU01aEUsRUFBU3MrRCxFQUFTcjVGLEdBRXhCKzZCLEVBQU81USxPQUFPMUUsVUFBVzBoQyxFQUFLMXdDLFVBQVUwVCxRQUN4QzRRLEVBQU9FLGlCQUFpQnhWLFVBQVcwaEMsRUFBS2xzQixrQkFDeENGLEVBQU8vbkIsU0FBU25ILElBQUttSCxFQUFTblQsRUFBR21ULEVBQVNqVCxFQUFHaVQsRUFBUzFQLE1BQU8wUCxFQUFTelAsUUFFM0QsSUFBTnZELEdBRUpnOUYsRUFBUzd5RSxPQUFPakgsS0FBTTZYLEVBQU81USxTQUlELElBQXhCcTNFLEdBRUp4RSxFQUFTM0QsUUFBUTMzRixLQUFNcTVCLElBVTFCLE1BQU0waUUsRUFBZTNnQyxFQUFRMmdDLGFBRTdCLElBQU0sSUFBSXo5RixFQUFJLEVBQUdBLEVBQUk0OEYsRUFBWTUrRixPQUFRZ0MsSUFBTyxDQUUvQyxNQUFNbzlGLEVBQWFSLEVBQWE1OEYsR0FDMUJ5NkYsRUFBY2dELEVBQWN6OUYsR0FFbENvOUYsRUFBV25tRSxPQUFRd2pFLEVBQWE5c0MsRUFBTytzQyxHQUluQzBHLEdBQTJCQSxFQUEwQjF6QyxFQUFNQyxHQUVoRTZ1QyxFQUFVLFFBUVh0OUYsS0FBSzJ1RCxpQkFBbUIsU0FBV2gwQixHQUVsQ3VuRSxFQUEyQnZuRSxHQUk1QjM2QixLQUFLOHlCLFFBQVUsY0FNakIsU0FBUzZ2RSxHQUFnQjM0QyxFQUFVZ1EsR0FtR2xDLFNBQVM0b0MsRUFBdUJwOEMsRUFBVW5VLEdBRXpDbVUsRUFBUzVRLFFBQVE1MkMsTUFBUXF6QyxFQUFTdUQsUUFFN0J2RCxFQUFTcHNDLE9BRWJ1Z0QsRUFBU2lTLFFBQVF6NUQsTUFBTWdsQixLQUFNcXVCLEVBQVNwc0MsT0FJbENvc0MsRUFBU3FHLFVBRWI4TixFQUFTOU4sU0FBUzE1QyxNQUFNZ2xCLEtBQU1xdUIsRUFBU3FHLFVBQVdoMEIsZUFBZ0IydEIsRUFBU3NHLG1CQUl2RXRHLEVBQVNqZ0MsTUFFYm8wQyxFQUFTcDBDLElBQUlwVCxNQUFRcXpDLEVBQVNqZ0MsS0FJMUJpZ0MsRUFBU2tILFdBRWJpTixFQUFTak4sU0FBU3Y2QyxNQUFRcXpDLEVBQVNrSCxVQUkvQmxILEVBQVN1SCxVQUViNE0sRUFBUzVNLFFBQVE1NkMsTUFBUXF6QyxFQUFTdUgsUUFDbEM0TSxFQUFTM00sVUFBVTc2QyxNQUFRcXpDLEVBQVN3SCxVQXo2eEJ0QixJQTA2eEJUeEgsRUFBU3FELE9BQW9COFEsRUFBUzNNLFVBQVU3NkMsUUFBVyxJQUk1RHF6QyxFQUFTNEgsa0JBRWJ1TSxFQUFTdk0sZ0JBQWdCajdDLE1BQVFxekMsRUFBUzRILGdCQUMxQ3VNLEVBQVN0TSxrQkFBa0JsN0MsTUFBUXF6QyxFQUFTNkgsa0JBQzVDc00sRUFBU3JNLGlCQUFpQm43QyxNQUFRcXpDLEVBQVM4SCxrQkFJdkM5SCxFQUFTaUksY0FFYmtNLEVBQVNsTSxZQUFZdDdDLE1BQVFxekMsRUFBU2lJLGFBSWxDakksRUFBU3lILFlBRWIwTSxFQUFTMU0sVUFBVTk2QyxNQUFRcXpDLEVBQVN5SCxVQUNwQzBNLEVBQVN4TSxZQUFZaDdDLE1BQU1nbEIsS0FBTXF1QixFQUFTMkgsYUEvN3hCNUIsSUFnOHhCVDNILEVBQVNxRCxNQUFvQjhRLEVBQVN4TSxZQUFZaDdDLE1BQU1vbUIsVUFJekRpdEIsRUFBU2tJLGNBRWJpTSxFQUFTak0sWUFBWXY3QyxNQUFRcXpDLEVBQVNrSSxhQUlsQ2xJLEVBQVN3RixVQUFZLElBRXpCMk8sRUFBUzNPLFVBQVU3NEMsTUFBUXF6QyxFQUFTd0YsV0FJckMsTUFBTTZDLEVBQVNzZixFQUFXcGpELElBQUt5N0IsR0FBV3FJLE9BYzFDLEdBWktBLElBRUo4TCxFQUFTOUwsT0FBTzE3QyxNQUFRMDdDLEVBRXhCOEwsRUFBU3NTLFdBQVc5NUQsTUFBVTA3QyxFQUFPbVEsZ0JBQWtELElBQWpDblEsRUFBT3RvQix1QkFBc0MsRUFBSSxFQUV2R28wQixFQUFTM0wsYUFBYTc3QyxNQUFRcXpDLEVBQVN3SSxhQUN2QzJMLEVBQVN1UyxJQUFJLzVELE1BQVFxekMsRUFBUzBtQixJQUM5QnZTLEVBQVMxTCxnQkFBZ0I5N0MsTUFBUXF6QyxFQUFTeUksaUJBSXRDekksRUFBU21ILFNBQVcsQ0FFeEJnTixFQUFTaE4sU0FBU3g2QyxNQUFRcXpDLEVBQVNtSCxTQUduQyxNQUFNb3JDLEdBQXFELElBQXJDNTZCLEVBQVNveUIsd0JBQXFDdjhFLEtBQUtvSCxHQUFLLEVBRTlFdS9DLEVBQVMvTSxrQkFBa0J6NkMsTUFBUXF6QyxFQUFTb0gsa0JBQW9CbXJDLEVBNkJqRSxJQUFJaWUsRUFtR0FDLEVBNUhDendELEVBQVNxSCxRQUViOE0sRUFBUzlNLE1BQU0xNkMsTUFBUXF6QyxFQUFTcUgsTUFDaEM4TSxFQUFTN00sZUFBZTM2QyxNQUFRcXpDLEVBQVNzSCxnQkF3QnJDdEgsRUFBU2pnQyxJQUVieXdGLEVBQWF4d0QsRUFBU2pnQyxJQUVYaWdDLEVBQVNrSSxZQUVwQnNvRCxFQUFheHdELEVBQVNrSSxZQUVYbEksRUFBUzRILGdCQUVwQjRvRCxFQUFheHdELEVBQVM0SCxnQkFFWDVILEVBQVN5SCxVQUVwQitvRCxFQUFheHdELEVBQVN5SCxVQUVYekgsRUFBU3VILFFBRXBCaXBELEVBQWF4d0QsRUFBU3VILFFBRVh2SCxFQUFTK0gsYUFFcEJ5b0QsRUFBYXh3RCxFQUFTK0gsYUFFWC9ILEVBQVNnSSxhQUVwQndvRCxFQUFheHdELEVBQVNnSSxhQUVYaEksRUFBU2tILFNBRXBCc3BELEVBQWF4d0QsRUFBU2tILFNBRVhsSCxFQUFTaUksWUFFcEJ1b0QsRUFBYXh3RCxFQUFTaUksWUFFWGpJLEVBQVM2RyxhQUVwQjJwRCxFQUFheHdELEVBQVM2RyxhQUVYN0csRUFBUytHLG1CQUVwQnlwRCxFQUFheHdELEVBQVMrRyxtQkFFWC9HLEVBQVM4RyxzQkFFcEIwcEQsRUFBYXh3RCxFQUFTOEcsc0JBRVg5RyxFQUFTbUkscUJBRXBCcW9ELEVBQWF4d0QsRUFBU21JLHFCQUVYbkksRUFBU29JLGlCQUVwQm9vRCxFQUFheHdELEVBQVNvSSxpQkFFWHBJLEVBQVM0SSxnQkFFcEI0bkQsRUFBYXh3RCxFQUFTNEksZ0JBRVg1SSxFQUFTOEksYUFFcEIwbkQsRUFBYXh3RCxFQUFTOEksYUFFWDlJLEVBQVNzekIsY0FFcEJrOUIsRUFBYXh3RCxFQUFTc3pCLGNBRVh0ekIsRUFBU3V6QixvQkFFcEJpOUIsRUFBYXh3RCxFQUFTdXpCLHdCQUlIcG1ELElBQWZxakYsSUFHQ0EsRUFBV3Z0RSxzQkFFZnV0RSxFQUFhQSxFQUFXN3RFLFVBSVksSUFBaEM2dEUsRUFBV2h4RSxrQkFFZmd4RSxFQUFXdndFLGVBSVprMEIsRUFBU2tTLFlBQVkxNUQsTUFBTWdsQixLQUFNNitFLEVBQVc1M0UsU0FVeENvbkIsRUFBU3FILE1BRWJvcEQsRUFBY3p3RCxFQUFTcUgsTUFFWnJILEVBQVNtSCxXQUVwQnNwRCxFQUFjendELEVBQVNtSCxlQUlIaDZCLElBQWhCc2pGLElBR0NBLEVBQVl4dEUsc0JBRWhCd3RFLEVBQWNBLEVBQVk5dEUsVUFJVyxJQUFqQzh0RSxFQUFZanhFLGtCQUVoQml4RSxFQUFZeHdFLGVBSWJrMEIsRUFBU21TLGFBQWEzNUQsTUFBTWdsQixLQUFNOCtFLEVBQVk3M0UsU0FtU2hELE1BQU8sQ0FDTjgzRSxtQkEzbkJELFNBQTZCdjhDLEVBQVVoUixHQUV0Q2dSLEVBQVNvVCxTQUFTNTZELE1BQU1nbEIsS0FBTXd4QixFQUFJdnZDLE9BRTdCdXZDLEVBQUl3dEQsT0FFUng4QyxFQUFTa1QsUUFBUTE2RCxNQUFRdzJDLEVBQUlwSyxLQUM3Qm9iLEVBQVNtVCxPQUFPMzZELE1BQVF3MkMsRUFBSW5LLEtBRWpCbUssRUFBSXVyQyxZQUVmdjZCLEVBQVNpVCxXQUFXejZELE1BQVF3MkMsRUFBSXl0RCxVQWluQmpDQyx3QkEzbUJELFNBQWtDMThDLEVBQVVuVSxFQUFVOHdELEVBQVk5K0YsRUFBUSsrRixHQUVwRS93RCxFQUFTOEoscUJBSUY5SixFQUFTZ3hELHNCQUZwQlQsRUFBdUJwOEMsRUFBVW5VLEdBTXRCQSxFQUFTaXhELG9CQUVwQlYsRUFBdUJwOEMsRUFBVW5VLEdBbWNuQyxTQUE4Qm1VLEVBQVVuVSxHQUVsQ0EsRUFBUzBJLGNBRWJ5TCxFQUFTekwsWUFBWS83QyxNQUFRcXpDLEVBQVMwSSxhQXRjdEN3b0QsQ0FBcUIvOEMsRUFBVW5VLElBRXBCQSxFQUFTbXhELHFCQUVwQlosRUFBdUJwOEMsRUFBVW5VLEdBdWJuQyxTQUErQm1VLEVBQVVuVSxHQUV4Q21VLEVBQVM1TixTQUFTNTVDLE1BQU1nbEIsS0FBTXF1QixFQUFTdUcsVUFDdkM0TixFQUFTek4sVUFBVS81QyxNQUFRYSxLQUFLa0csSUFBS3NzQyxFQUFTMEcsVUFBVyxNQXpieEQwcUQsQ0FBc0JqOUMsRUFBVW5VLElBRXJCQSxFQUFTK3RDLHdCQUVwQndpQixFQUF1QnA4QyxFQUFVblUsR0FtY25DLFNBQWtDbVUsRUFBVW5VLEdBRTNDbVUsRUFBU25PLFVBQVVyNUMsTUFBUXF6QyxFQUFTZ0csVUFDcENtTyxFQUFTbE8sVUFBVXQ1QyxNQUFRcXpDLEVBQVNpRyxVQUUvQmpHLEVBQVMrSCxlQUVib00sRUFBU3BNLGFBQWFwN0MsTUFBUXF6QyxFQUFTK0gsY0FJbkMvSCxFQUFTZ0ksZUFFYm1NLEVBQVNuTSxhQUFhcjdDLE1BQVFxekMsRUFBU2dJLGNBSXpCMmYsRUFBV3BqRCxJQUFLeTdCLEdBQVdxSSxTQUt6QzhMLEVBQVM1TCxnQkFBZ0I1N0MsTUFBUXF6QyxFQUFTdUksaUJBeGQxQzhvRCxDQUF5Qmw5QyxFQUFVblUsR0FFOUJBLEVBQVNzeEQsd0JBNGRoQixTQUFrQ245QyxFQUFVblUsRUFBVSt3RCxHQUVyRDU4QyxFQUFTdVMsSUFBSS81RCxNQUFRcXpDLEVBQVMwbUIsSUFFekIxbUIsRUFBU2tHLE1BQVEsSUFFckJpTyxFQUFTaE8sV0FBV3g1QyxNQUFNZ2xCLEtBQU1xdUIsRUFBU21HLFlBQWE5ekIsZUFBZ0IydEIsRUFBU2tHLE9BRS9FaU8sRUFBUy9OLGVBQWV6NUMsTUFBUXF6QyxFQUFTb0csZUFFcENwRyxFQUFTc3pCLGdCQUVibmYsRUFBU21mLGNBQWMzbUUsTUFBUXF6QyxFQUFTc3pCLGVBSXBDdHpCLEVBQVN1ekIsb0JBRWJwZixFQUFTb2Ysa0JBQWtCNW1FLE1BQVFxekMsRUFBU3V6QixvQkFNekN2ekIsRUFBUzJHLFVBQVksSUFFekJ3TixFQUFTeE4sVUFBVWg2QyxNQUFRcXpDLEVBQVMyRyxVQUNwQ3dOLEVBQVN2TixtQkFBbUJqNkMsTUFBUXF6QyxFQUFTNEcsbUJBRXhDNUcsRUFBUzZHLGVBRWJzTixFQUFTdE4sYUFBYWw2QyxNQUFRcXpDLEVBQVM2RyxjQUluQzdHLEVBQVM4Ryx3QkFFYnFOLEVBQVNyTixzQkFBc0JuNkMsTUFBUXF6QyxFQUFTOEcsdUJBSTVDOUcsRUFBUytHLHFCQUVib04sRUFBU25OLHFCQUFxQnI2QyxNQUFNZ2xCLEtBQU1xdUIsRUFBU2dILHNCQUNuRG1OLEVBQVNwTixtQkFBbUJwNkMsTUFBUXF6QyxFQUFTK0csbUJBMzF5QmhDLElBNjF5QlIvRyxFQUFTcUQsTUFFYjhRLEVBQVNuTixxQkFBcUJyNkMsTUFBTW9tQixXQVFsQ2l0QixFQUFTMkksYUFBZSxJQUU1QndMLEVBQVN4TCxhQUFhaDhDLE1BQVFxekMsRUFBUzJJLGFBQ3ZDd0wsRUFBU3NmLHVCQUF1QjltRSxNQUFRb2tHLEVBQXlCcHVFLFFBQ2pFd3hCLEVBQVNxZix3QkFBd0I3bUUsTUFBTTJOLElBQUt5MkYsRUFBeUJoL0YsTUFBT2cvRixFQUF5Qi8rRixRQUVoR2d1QyxFQUFTNEksa0JBRWJ1TCxFQUFTdkwsZ0JBQWdCajhDLE1BQVFxekMsRUFBUzRJLGlCQUkzQ3VMLEVBQVN0TCxVQUFVbDhDLE1BQVFxekMsRUFBUzZJLFVBRS9CN0ksRUFBUzhJLGVBRWJxTCxFQUFTckwsYUFBYW44QyxNQUFRcXpDLEVBQVM4SSxjQUl4Q3FMLEVBQVNwTCxvQkFBb0JwOEMsTUFBUXF6QyxFQUFTK0ksb0JBQzlDb0wsRUFBU25MLGlCQUFpQnI4QyxNQUFNZ2xCLEtBQU1xdUIsRUFBU2dKLG1CQUloRG1MLEVBQVMzTixrQkFBa0I3NUMsTUFBUXF6QyxFQUFTd0csa0JBQzVDMk4sRUFBUzFOLGNBQWM5NUMsTUFBTWdsQixLQUFNcXVCLEVBQVN5RyxlQUV2Q3pHLEVBQVNtSSx1QkFFYmdNLEVBQVNoTSxxQkFBcUJ4N0MsTUFBUXF6QyxFQUFTbUksc0JBSTNDbkksRUFBU29JLG1CQUViK0wsRUFBUy9MLGlCQUFpQno3QyxNQUFRcXpDLEVBQVNvSSxrQkF0akIxQ21wRCxDQUF5QnA5QyxFQUFVblUsRUFBVSt3RCxJQUluQy93RCxFQUFTd3hELHNCQUVwQmpCLEVBQXVCcDhDLEVBQVVuVSxHQXNqQm5DLFNBQWdDbVUsRUFBVW5VLEdBRXBDQSxFQUFTaUgsU0FFYmtOLEVBQVNsTixPQUFPdDZDLE1BQVFxekMsRUFBU2lILFFBempCakN3cUQsQ0FBdUJ0OUMsRUFBVW5VLElBRXRCQSxFQUFTdTBDLG9CQUVwQmdjLEVBQXVCcDhDLEVBQVVuVSxHQUV0QkEsRUFBU3cyQyx3QkFFcEIrWixFQUF1QnA4QyxFQUFVblUsR0F1akJuQyxTQUFrQ21VLEVBQVVuVSxHQUUzQ21VLEVBQVMrVixrQkFBa0J2OUQsTUFBTWdsQixLQUFNcXVCLEVBQVNrcUIsbUJBQ2hEL1YsRUFBU2dXLGFBQWF4OUQsTUFBUXF6QyxFQUFTbXFCLGFBQ3ZDaFcsRUFBU2lXLFlBQVl6OUQsTUFBUXF6QyxFQUFTb3FCLFlBMWpCckNzbkMsQ0FBeUJ2OUMsRUFBVW5VLElBRXhCQSxFQUFTMnhELHFCQUVwQnBCLEVBQXVCcDhDLEVBQVVuVSxHQUV0QkEsRUFBUzR4RCxxQkEyUnRCLFNBQThCejlDLEVBQVVuVSxHQUV2Q21VLEVBQVNpUyxRQUFRejVELE1BQU1nbEIsS0FBTXF1QixFQUFTcHNDLE9BQ3RDdWdELEVBQVM1USxRQUFRNTJDLE1BQVFxekMsRUFBU3VELFFBNVJqQ3N1RCxDQUFxQjE5QyxFQUFVblUsR0FFMUJBLEVBQVM4eEQsc0JBOFJoQixTQUE4QjM5QyxFQUFVblUsR0FFdkNtVSxFQUFTaEwsU0FBU3g4QyxNQUFRcXpDLEVBQVNtSixTQUNuQ2dMLEVBQVMwVixVQUFVbDlELE1BQVFxekMsRUFBU21KLFNBQVduSixFQUFTb0osUUFDeEQrSyxFQUFTejdCLE1BQU0vckIsTUFBUXF6QyxFQUFTdG5CLE1BaFM5QnE1RSxDQUFxQjU5QyxFQUFVblUsSUFJckJBLEVBQVNneUQsaUJBZ1N0QixTQUFnQzc5QyxFQUFVblUsRUFBVTh3RCxFQUFZOStGLEdBNkIvRCxJQUFJdytGLEVBM0JKcjhDLEVBQVNpUyxRQUFRejVELE1BQU1nbEIsS0FBTXF1QixFQUFTcHNDLE9BQ3RDdWdELEVBQVM1USxRQUFRNTJDLE1BQVFxekMsRUFBU3VELFFBQ2xDNFEsRUFBU252QyxLQUFLclksTUFBUXF6QyxFQUFTaDdCLEtBQU84ckYsRUFDdEMzOEMsRUFBU3o3QixNQUFNL3JCLE1BQWlCLEdBQVRxRixFQUVsQmd1QyxFQUFTamdDLE1BRWJvMEMsRUFBU3AwQyxJQUFJcFQsTUFBUXF6QyxFQUFTamdDLEtBSTFCaWdDLEVBQVNrSCxXQUViaU4sRUFBU2pOLFNBQVN2NkMsTUFBUXF6QyxFQUFTa0gsVUFJL0JsSCxFQUFTd0YsVUFBWSxJQUV6QjJPLEVBQVMzTyxVQUFVNzRDLE1BQVFxekMsRUFBU3dGLFdBVWhDeEYsRUFBU2pnQyxJQUVieXdGLEVBQWF4d0QsRUFBU2pnQyxJQUVYaWdDLEVBQVNrSCxXQUVwQnNwRCxFQUFheHdELEVBQVNrSCxlQUlILzVCLElBQWZxakYsS0FFaUMsSUFBaENBLEVBQVdoeEUsa0JBRWZneEUsRUFBV3Z3RSxlQUlaazBCLEVBQVNrUyxZQUFZMTVELE1BQU1nbEIsS0FBTTYrRSxFQUFXNTNFLFNBL1U1Q3E1RSxDQUF1Qjk5QyxFQUFVblUsRUFBVTh3RCxFQUFZOStGLEdBRTVDZ3VDLEVBQVNreUQsaUJBbVZ0QixTQUFpQy85QyxFQUFVblUsR0E0QjFDLElBQUl3d0QsRUExQkpyOEMsRUFBU2lTLFFBQVF6NUQsTUFBTWdsQixLQUFNcXVCLEVBQVNwc0MsT0FDdEN1Z0QsRUFBUzVRLFFBQVE1MkMsTUFBUXF6QyxFQUFTdUQsUUFDbEM0USxFQUFTNStDLFNBQVM1SSxNQUFRcXpDLEVBQVN6cUMsU0FFOUJ5cUMsRUFBU2pnQyxNQUVibzBDLEVBQVNwMEMsSUFBSXBULE1BQVFxekMsRUFBU2pnQyxLQUkxQmlnQyxFQUFTa0gsV0FFYmlOLEVBQVNqTixTQUFTdjZDLE1BQVFxekMsRUFBU2tILFVBSS9CbEgsRUFBU3dGLFVBQVksSUFFekIyTyxFQUFTM08sVUFBVTc0QyxNQUFRcXpDLEVBQVN3RixXQVVoQ3hGLEVBQVNqZ0MsSUFFYnl3RixFQUFheHdELEVBQVNqZ0MsSUFFWGlnQyxFQUFTa0gsV0FFcEJzcEQsRUFBYXh3RCxFQUFTa0gsZUFJSC81QixJQUFmcWpGLEtBRWlDLElBQWhDQSxFQUFXaHhFLGtCQUVmZ3hFLEVBQVd2d0UsZUFJWmswQixFQUFTa1MsWUFBWTE1RCxNQUFNZ2xCLEtBQU02K0UsRUFBVzUzRSxTQWpZNUN1NUUsQ0FBd0JoK0MsRUFBVW5VLEdBRXZCQSxFQUFTb3lELGtCQUVwQmorQyxFQUFTdmdELE1BQU1qSCxNQUFNZ2xCLEtBQU1xdUIsRUFBU3BzQyxPQUNwQ3VnRCxFQUFTNVEsUUFBUTUyQyxNQUFRcXpDLEVBQVN1RCxTQUV2QnZELEVBQVNxVixtQkFFcEJyVixFQUFTbVYsb0JBQXFCLEtBOGlCakMsU0FBU2s5QyxHQUFlM3lELEVBQWEsSUFFcEMsTUFBTTNpQixPQUFnQzVQLElBQXRCdXlCLEVBQVd0ckMsT0FBdUJzckMsRUFBV3RyQyxPQVY5RCxXQUVDLE1BQU1BLEVBQVMwa0IsRUFBaUIsVUFFaEMsT0FEQTFrQixFQUFPOG1CLE1BQU1vM0UsUUFBVSxRQUNoQmwrRixFQU0rRG0rRixHQUNyRUMsT0FBa0NybEYsSUFBdkJ1eUIsRUFBV3JpQixRQUF3QnFpQixFQUFXcmlCLFFBQVUsS0FFbkVvMUUsT0FBOEJ0bEYsSUFBckJ1eUIsRUFBV2xkLE9BQXNCa2QsRUFBV2xkLE1BQ3JEa3dFLE9BQWtDdmxGLElBQXZCdXlCLEVBQVdxWixTQUF3QnJaLEVBQVdxWixRQUN6RDQ1QyxPQUFzQ3hsRixJQUF6QnV5QixFQUFXaDNCLFdBQTBCZzNCLEVBQVdoM0IsVUFDN0RrcUYsT0FBd0R6bEYsSUFBbEN1eUIsRUFBVzJGLG9CQUFtQzNGLEVBQVcyRixtQkFDL0V3dEQsT0FBOEQxbEYsSUFBckN1eUIsRUFBV296RCx1QkFBc0NwekQsRUFBV296RCxzQkFDckZDLE9BQWtENWxGLElBQS9CdXlCLEVBQVdzekQsZ0JBQWdDdHpELEVBQVdzekQsZ0JBQWtCLFVBQzNGQyxPQUE0RTlsRixJQUE1Q3V5QixFQUFXd3pELDhCQUE2Q3h6RCxFQUFXd3pELDZCQUVwRyxJQUFJQyxFQUlIQSxPQUYyQmhtRixJQUF2QnV5QixFQUFXcmlCLFFBRU5tMUUsRUFBU3RILHVCQUF1QnZpRixXQUlYd0UsSUFBckJ1eUIsRUFBVy8yQixPQUFzQisyQixFQUFXLzJCLE1BSXRELElBQUl5cUYsRUFBb0IsS0FDcEJDLEVBQXFCLEtBS3pCLE1BQU1DLEVBQWtCLEdBQ2xCQyxFQUFtQixHQUl6QjVsRyxLQUFLNmxHLFdBQWF6MkUsRUFHbEJwdkIsS0FBSzI4RSxNQUFRLENBTVpDLG1CQUFtQixHQUtwQjU4RSxLQUFLKzlELFdBQVksRUFDakIvOUQsS0FBS2crRCxnQkFBaUIsRUFDdEJoK0QsS0FBS2krRCxnQkFBaUIsRUFDdEJqK0QsS0FBS2srRCxrQkFBbUIsRUFJeEJsK0QsS0FBSzhsRyxhQUFjLEVBSW5COWxHLEtBQUsrMkMsZUFBaUIsR0FDdEIvMkMsS0FBSzhqRSxzQkFBdUIsRUFJNUI5akUsS0FBS3FxRCxlQUFpQjVvQyxFQUl0QnpoQixLQUFLbzhFLHlCQUEwQixFQUkvQnA4RSxLQUFLdXFELFlBdjl5QmdCLEVBdzl5QnJCdnFELEtBQUsrbEcsb0JBQXNCLEVBSTNCLE1BQU1DLEVBQVFobUcsS0FFZCxJQUFJaW1HLEdBQWlCLEVBSWpCQyxFQUF5QixFQUN6QkMsRUFBNEIsRUFDNUJDLEVBQXVCLEtBQ3ZCQyxHQUF1QixFQUV2QkMsRUFBaUIsS0FFckIsTUFBTUMsRUFBbUIsSUFBSXJ6RSxHQUN2QnN6RSxFQUFrQixJQUFJdHpFLEdBQzVCLElBQUl1ekUsRUFBc0IsS0FJdEJDLEVBQVN0M0UsRUFBUWhyQixNQUNqQnVpRyxFQUFVdjNFLEVBQVEvcUIsT0FFbEJ1aUcsRUFBYyxFQUNkQyxFQUFjLEtBQ2RDLEVBQW1CLEtBRXZCLE1BQU0zZixFQUFZLElBQUlqMEQsR0FBUyxFQUFHLEVBQUd3ekUsRUFBUUMsR0FDdkNJLEVBQVcsSUFBSTd6RSxHQUFTLEVBQUcsRUFBR3d6RSxFQUFRQyxHQUM1QyxJQUFJSyxHQUFlLEVBSW5CLE1BQU1oZ0IsRUFBVyxJQUFJdjZCLEdBSXJCLElBQUl3NkMsR0FBbUIsRUFDbkJDLEdBQXdCLEVBSXhCQyxFQUE0QixLQUloQyxNQUFNQyxFQUFvQixJQUFJNWdFLEdBRXhCOGtCLEVBQVcsSUFBSTluQyxFQUNmNmpGLEVBQVcsSUFBSXhzRSxHQUVmeXNFLEVBQWMsQ0FBRTUxRCxXQUFZLEtBQU04RCxJQUFLLEtBQU03RCxZQUFhLEtBQU00MUQsaUJBQWtCLEtBQU05MUQsU0FBUyxHQUV2RyxTQUFTKzFELElBRVIsT0FBZ0MsT0FBekJwQixFQUFnQ1EsRUFBYyxFQU10RCxJQW1GSTMvQyxFQUFZOEgsRUFBYzhOLEVBQU9rRixHQUNqQy9ILEdBQVl0bkMsR0FBVWtxQyxHQUFVb2lCLEdBQVluL0MsR0FBWWlSLEdBQVlnc0IsR0FDcEUycUMsR0FBYzEyRCxHQUFXMjJELEdBQWFoaEIsR0FBYzEvQixHQUFVbzZCLEdBRTlEMXZDLEdBQVlpMkQsR0FBY0MsR0FBZ0JDLEdBRTFDL1gsR0FBT3R4QixHQXpGUHF4QixHQUFNZ1YsRUFFVixTQUFTNXZGLEdBQVk2eUYsRUFBY0MsR0FFbEMsSUFBTSxJQUFJam5HLEVBQUksRUFBR0EsRUFBSWduRyxFQUFhaHBHLE9BQVFnQyxJQUFPLENBRWhELE1BQU1rbkcsRUFBY0YsRUFBY2huRyxHQUM1QjR1QixFQUFVTixFQUFRbmEsV0FBWSt5RixFQUFhRCxHQUNqRCxHQUFpQixPQUFacjRFLEVBQW1CLE9BQU9BLEVBSWhDLE9BQU8sS0FJUixJQUVDLE1BQU1xNEUsRUFBb0IsQ0FDekIvc0YsT0FBTyxFQUNQNlosTUFBT2l3RSxFQUNQMTVDLFFBQVMyNUMsRUFDVGhxRixVQUFXaXFGLEVBQ1h0dEQsbUJBQW9CdXRELEVBQ3BCRSxzQkFBdUJELEVBQ3ZCRyxnQkFBaUJELEVBQ2pCRyw2QkFBOEJELEdBVS9CLEdBTkssaUJBQWtCbDJFLEdBQVVBLEVBQVFqVixhQUFjLGNBQWUsaUJBR3RFaVYsRUFBUWhWLGlCQUFrQixtQkFBb0I2dEYsSUFBZSxHQUM3RDc0RSxFQUFRaFYsaUJBQWtCLHVCQUF3Qjh0RixJQUFrQixHQUV2RCxPQUFSclksR0FBZSxDQUVuQixNQUFNaVksRUFBZSxDQUFFLFNBQVUsUUFBUyxzQkFVMUMsSUFSZ0MsSUFBM0I5QixFQUFNbUMsa0JBRVZMLEVBQWFqaUcsUUFJZGdxRixHQUFNNTZFLEdBQVk2eUYsRUFBY0MsR0FFbkIsT0FBUmxZLEdBRUosTUFBSzU2RSxHQUFZNnlGLEdBRVYsSUFBSWhvRyxNQUFPLCtEQUlYLElBQUlBLE1BQU8sc0NBVWtCMGYsSUFBakNxd0UsR0FBSXJ0QiwyQkFFUnF0QixHQUFJcnRCLHlCQUEyQixXQUU5QixNQUFPLENBQUUsU0FBWSxFQUFHLFNBQVksRUFBRyxVQUFhLEtBTXJELE1BQVE1L0QsR0FHVCxNQURBRCxRQUFRQyxNQUFPLHdCQUEwQkEsRUFBTXdsRyxTQUN6Q3hsRyxFQVlQLFNBQVN5bEcsS0FFUnBoRCxFQUFhLElBQUlpbEIsR0FBaUIyakIsSUFFbEM5Z0MsRUFBZSxJQUFJc1QsR0FBbUJ3dEIsR0FBSzVvQyxFQUFZbFYsR0FFdkRrVixFQUFXMmQsS0FBTTdWLEdBRWpCK2dDLEdBQVEsSUFBSWlILEdBQVlsSCxHQUFLNW9DLEVBQVk4SCxHQUV6QzhOLEVBQVEsSUFBSXd0QixHQUFZd0YsR0FBSzVvQyxFQUFZOEgsR0FFekNnVCxHQUFPLElBQUlpTCxHQUFXNmlCLElBQ3RCNzFCLEdBQWEsSUFBSThuQixHQUNqQnB2RCxHQUFXLElBQUlrOUQsR0FBZUMsR0FBSzVvQyxFQUFZNFYsRUFBTzdDLEdBQVlqTCxFQUFjK2dDLEdBQU8vdEIsSUFDdkZuRixHQUFXLElBQUkwSSxHQUFlMGdDLEdBQzlCaG5CLEdBQWEsSUFBSXJULEdBQWlCcTZCLEdBQ2xDbm1FLEdBQWEsSUFBSWd2QixHQUFpQmdoQyxHQUFLOWdDLEdBQ3ZDeVAsR0FBZ0IsSUFBSUosR0FBb0J5eEIsR0FBSzVvQyxFQUFZcG5CLEdBQVlrdkIsR0FDckVqZSxHQUFhLElBQUlzN0IsR0FBaUJ5akIsR0FBS2h3RCxHQUFZa2lDLEdBQU12RCxJQUN6RDFCLEdBQVUsSUFBSXNTLEdBQWN5Z0IsR0FBSy8rQyxHQUFZalIsR0FBWWtpQyxJQUN6RDRsQyxHQUFlLElBQUloNkIsR0FBbUJraUIsR0FBSzlnQyxFQUFjcjhCLElBQ3pEczBCLEdBQVcsSUFBSTJjLEdBQWUzSixJQUM5Qnl0QyxHQUFlLElBQUkxb0IsR0FBZWluQixFQUFPcHBDLEdBQVVvaUIsR0FBWS8zQixFQUFZOEgsRUFBY3lQLEdBQWV4WCxJQUN4R2pXLEdBQVksSUFBSTR4RCxHQUFnQnFELEVBQU9oc0MsSUFDdkMwdEMsR0FBYyxJQUFJL2tCLEdBQ2xCK0QsR0FBZSxJQUFJRCxHQUFtQngvQixFQUFZOEgsR0FDbERyZCxHQUFhLElBQUlpckIsR0FBaUJxcEMsRUFBT3BwQyxHQUFVQyxFQUFPQyxHQUFTMG9DLEVBQVFQLEdBQzNFN2pCLEdBQVksSUFBSXlGLEdBQWdCbWYsRUFBT2xwQyxHQUFTL04sR0FFaEQ2NEMsR0FBaUIsSUFBSTlsQyxHQUFxQit0QixHQUFLNW9DLEVBQVk4YSxHQUFNaFQsR0FDakU4NEMsR0FBd0IsSUFBSS82QixHQUE0QitpQixHQUFLNW9DLEVBQVk4YSxHQUFNaFQsR0FFL0VnVCxHQUFLcUwsU0FBV3E2QixHQUFhcjZCLFNBRTdCNDRCLEVBQU1qM0MsYUFBZUEsRUFDckJpM0MsRUFBTS8rQyxXQUFhQSxFQUNuQisrQyxFQUFNaHNDLFdBQWFBLEdBQ25CZ3NDLEVBQU0wQixZQUFjQSxHQUNwQjFCLEVBQU01a0IsVUFBWUEsR0FDbEI0a0IsRUFBTW5wQyxNQUFRQSxFQUNkbXBDLEVBQU1qa0MsS0FBT0EsR0FJZHNtQyxLQUlBLE1BQU01OUMsR0FBSyxJQUFJc3lDLEdBQWNpSixFQUFPblcsSUF3UXBDLFNBQVNvWSxHQUFlemxGLEdBRXZCQSxFQUFNOGxGLGlCQUVOM2xHLFFBQVFnTixJQUFLLHNDQUViczJGLEdBQWlCLEVBSWxCLFNBQVNpQyxLQUVSdmxHLFFBQVFnTixJQUFLLDBDQUViczJGLEdBQWlCLEVBRWpCLE1BQU1zQyxFQUFnQnhtQyxHQUFLc0wsVUFDckI2TyxFQUFtQmtGLEdBQVVuNEIsUUFDN0J1L0MsRUFBc0JwbkIsR0FBVThILFdBQ2hDdWYsRUFBdUJybkIsR0FBVWh4RCxZQUNqQzJvRCxFQUFnQnFJLEdBQVV2cUUsS0FFaEN3eEYsS0FFQXRtQyxHQUFLc0wsVUFBWWs3QixFQUNqQm5uQixHQUFVbjRCLFFBQVVpekIsRUFDcEJrRixHQUFVOEgsV0FBYXNmLEVBQ3ZCcG5CLEdBQVVoeEQsWUFBY3E0RSxFQUN4QnJuQixHQUFVdnFFLEtBQU9raUUsRUFJbEIsU0FBUzJ2QixHQUFtQmxtRixHQUUzQixNQUFNNnZCLEVBQVc3dkIsRUFBTUMsT0FFdkI0dkIsRUFBUy92QixvQkFBcUIsVUFBV29tRixJQVExQyxTQUE2QnIyRCxJQVM3QixTQUEyQ0EsR0FFMUMsTUFBTSs2QixFQUFXcFQsR0FBV3BqRCxJQUFLeTdCLEdBQVcrNkIsY0FFMUI1dEQsSUFBYjR0RCxJQUVKQSxFQUFTZ3hCLFNBQVMsU0FBVzcrQixHQUU1QmtvQyxHQUFhN2xCLGVBQWdCcmlCLE1BSXpCbHRCLEVBQVNxVixrQkFFYisvQyxHQUFhNWxCLG1CQUFvQnh2QyxLQXJCbkNzMkQsQ0FBa0N0MkQsR0FFbEMybkIsR0FBV3JxQixPQUFRMEMsR0FWbkJ1MkQsQ0FBb0J2MkQsR0E1U3JCcnlDLEtBQUt5cUQsR0FBS0EsR0FJVnpxRCxLQUFLaVYsV0FBYSxXQUVqQixPQUFPNDZFLElBSVI3dkYsS0FBS3U5RixxQkFBdUIsV0FFM0IsT0FBTzFOLEdBQUkwTix3QkFJWnY5RixLQUFLNm9HLGlCQUFtQixXQUV2QixNQUFNdnFDLEVBQVlyWCxFQUFXcndDLElBQUssc0JBQzdCMG5ELEdBQVlBLEVBQVV3cUMsZUFJNUI5b0csS0FBSytvRyxvQkFBc0IsV0FFMUIsTUFBTXpxQyxFQUFZclgsRUFBV3J3QyxJQUFLLHNCQUM3QjBuRCxHQUFZQSxFQUFVMHFDLGtCQUk1QmhwRyxLQUFLaXBHLGNBQWdCLFdBRXBCLE9BQU9yQyxHQUlSNW1HLEtBQUtrcEcsY0FBZ0IsU0FBV2xxRyxRQUVoQndnQixJQUFWeGdCLElBRUw0bkcsRUFBYzVuRyxFQUVkZ0IsS0FBS3ExQixRQUFTcXhFLEVBQVFDLEdBQVMsS0FJaEMzbUcsS0FBS3MvQixRQUFVLFNBQVc3YyxHQUV6QixPQUFPQSxFQUFPOVYsSUFBSys1RixFQUFRQyxJQUk1QjNtRyxLQUFLcTFCLFFBQVUsU0FBV2p4QixFQUFPQyxFQUFROGtHLEdBRW5DMStDLEdBQUc0ekMsYUFFUDE3RixRQUFRdWhCLEtBQU0sMEVBS2Z3aUYsRUFBU3RpRyxFQUNUdWlHLEVBQVV0aUcsRUFFVitxQixFQUFRaHJCLE1BQVF2RSxLQUFLcUwsTUFBTzlHLEVBQVF3aUcsR0FDcEN4M0UsRUFBUS9xQixPQUFTeEUsS0FBS3FMLE1BQU83RyxFQUFTdWlHLElBRWpCLElBQWhCdUMsSUFFSi81RSxFQUFRN0IsTUFBTW5wQixNQUFRQSxFQUFRLEtBQzlCZ3JCLEVBQVE3QixNQUFNbHBCLE9BQVNBLEVBQVMsTUFJakNyRSxLQUFLb3BHLFlBQWEsRUFBRyxFQUFHaGxHLEVBQU9DLEtBSWhDckUsS0FBS3FwRyxxQkFBdUIsU0FBVzVtRixHQUV0QyxPQUFPQSxFQUFPOVYsSUFBSys1RixFQUFTRSxFQUFhRCxFQUFVQyxHQUFjMTdGLFNBSWxFbEwsS0FBS3NwRyxxQkFBdUIsU0FBV2xsRyxFQUFPQyxFQUFROCtGLEdBRXJEdUQsRUFBU3RpRyxFQUNUdWlHLEVBQVV0aUcsRUFFVnVpRyxFQUFjekQsRUFFZC96RSxFQUFRaHJCLE1BQVF2RSxLQUFLcUwsTUFBTzlHLEVBQVErK0YsR0FDcEMvekUsRUFBUS9xQixPQUFTeEUsS0FBS3FMLE1BQU83RyxFQUFTOCtGLEdBRXRDbmpHLEtBQUtvcEcsWUFBYSxFQUFHLEVBQUdobEcsRUFBT0MsSUFJaENyRSxLQUFLdXBHLG1CQUFxQixTQUFXOW1GLEdBRXBDLE9BQU9BLEVBQU91QixLQUFNdWlGLElBSXJCdm1HLEtBQUtrcUYsWUFBYyxTQUFXem5FLEdBRTdCLE9BQU9BLEVBQU91QixLQUFNbWpFLElBSXJCbm5GLEtBQUtvcEcsWUFBYyxTQUFXem9HLEVBQUdFLEVBQUd1RCxFQUFPQyxHQUVyQzFELEVBQUVnMEIsVUFFTnd5RCxFQUFVeDZFLElBQUtoTSxFQUFFQSxFQUFHQSxFQUFFRSxFQUFHRixFQUFFTyxFQUFHUCxFQUFFSixHQUloQzRtRixFQUFVeDZFLElBQUtoTSxFQUFHRSxFQUFHdUQsRUFBT0MsR0FJN0J3NEQsRUFBTS9vRCxTQUFVeXlGLEVBQWlCdmlGLEtBQU1takUsR0FBWXppRSxlQUFnQmtpRixHQUFjMTdGLFVBSWxGbEwsS0FBS3dwRyxXQUFhLFNBQVcvbUYsR0FFNUIsT0FBT0EsRUFBT3VCLEtBQU0raUYsSUFJckIvbUcsS0FBS3lwRyxXQUFhLFNBQVc5b0csRUFBR0UsRUFBR3VELEVBQU9DLEdBRXBDMUQsRUFBRWcwQixVQUVOb3lFLEVBQVNwNkYsSUFBS2hNLEVBQUVBLEVBQUdBLEVBQUVFLEVBQUdGLEVBQUVPLEVBQUdQLEVBQUVKLEdBSS9Cd21HLEVBQVNwNkYsSUFBS2hNLEVBQUdFLEVBQUd1RCxFQUFPQyxHQUk1Qnc0RCxFQUFNL25DLFFBQVMweEUsRUFBZ0J4aUYsS0FBTStpRixHQUFXcmlGLGVBQWdCa2lGLEdBQWMxN0YsVUFJL0VsTCxLQUFLMHBHLGVBQWlCLFdBRXJCLE9BQU8xQyxHQUlSaG5HLEtBQUswcEYsZUFBaUIsU0FBV2lnQixHQUVoQzlzQyxFQUFNNnNCLGVBQWdCc2QsRUFBZTJDLElBSXRDM3BHLEtBQUs0cEcsY0FBZ0IsU0FBV0MsR0FFL0JoRCxFQUFjZ0QsR0FJZjdwRyxLQUFLOHBHLG1CQUFxQixTQUFXRCxHQUVwQy9DLEVBQW1CK0MsR0FNcEI3cEcsS0FBS3M5RCxjQUFnQixTQUFXNzZDLEdBRS9CLE9BQU9BLEVBQU91QixLQUFNMHRCLEdBQVc0ckIsa0JBSWhDdDlELEtBQUt1OUQsY0FBZ0IsV0FFcEI3ckIsR0FBVzZyQixjQUFjcHpELE1BQU91bkMsR0FBWTN0QyxZQUk3Qy9ELEtBQUt3OUQsY0FBZ0IsV0FFcEIsT0FBTzlyQixHQUFXOHJCLGlCQUluQng5RCxLQUFLeTlELGNBQWdCLFdBRXBCL3JCLEdBQVcrckIsY0FBY3R6RCxNQUFPdW5DLEdBQVkzdEMsWUFJN0MvRCxLQUFLdVUsTUFBUSxTQUFXdE8sR0FBUSxFQUFNNHVCLEdBQVEsRUFBTXUyQixHQUFVLEdBRTdELElBQUkyK0MsRUFBTyxFQUVOOWpHLElBQVE4akcsR0FBUSxPQUNoQmwxRSxJQUFRazFFLEdBQVEsS0FDaEIzK0MsSUFBVTIrQyxHQUFRLE1BRXZCbGEsR0FBSXQ3RSxNQUFPdzFGLElBSVovcEcsS0FBS3NVLFdBQWEsV0FFakJ0VSxLQUFLdVUsT0FBTyxHQUFNLEdBQU8sSUFJMUJ2VSxLQUFLa3JGLFdBQWEsV0FFakJsckYsS0FBS3VVLE9BQU8sR0FBTyxHQUFNLElBSTFCdlUsS0FBSytyRixhQUFlLFdBRW5CL3JGLEtBQUt1VSxPQUFPLEdBQU8sR0FBTyxJQU0zQnZVLEtBQUs4eUIsUUFBVSxXQUVkMUQsRUFBUTlNLG9CQUFxQixtQkFBb0IybEYsSUFBZSxHQUNoRTc0RSxFQUFROU0sb0JBQXFCLHVCQUF3QjRsRixJQUFrQixHQUV2RVIsR0FBWTUwRSxVQUNaNHpELEdBQWE1ekQsVUFDYmtuQyxHQUFXbG5DLFVBQ1g4cEMsR0FBUzlwQyxVQUNUa3NELEdBQVdsc0QsVUFDWGdxQyxHQUFRaHFDLFVBQ1IwckMsR0FBYzFyQyxVQUNkMjBFLEdBQWEzMEUsVUFFYjIzQixHQUFHMzNCLFVBRUgyM0IsR0FBR25vQyxvQkFBcUIsZUFBZ0IwbkYsSUFDeEN2L0MsR0FBR25vQyxvQkFBcUIsYUFBYzJuRixJQUVqQzlDLElBRUpBLEVBQTBCcjBFLFVBQzFCcTBFLEVBQTRCLE1BSTdCNTBELEdBQVV6dEMsUUFtRlg5RSxLQUFLbW9GLG1CQUFxQixTQUFXdHNELEVBQVFvdUIsRUFBT3JxQixFQUFVeVMsRUFBVXJULEVBQVE2aEIsR0FFaEUsT0FBVm9KLElBQWlCQSxFQUFRcTlDLEdBRTlCLE1BQU12WSxFQUFnQi92RCxFQUFPNFMsUUFBVTVTLEVBQU85QyxZQUFZdFMsY0FBZ0IsRUFFcEUyMUMsRUE2dUJQLFNBQXFCMWpDLEVBQVFvdUIsRUFBT3JxQixFQUFVeVMsRUFBVXJULElBRWhDLElBQWxCaXJCLEVBQU14WSxVQUFtQndZLEVBQVFxOUMsR0FFdEM1MEUsR0FBU2tqRSxvQkFFVCxNQUFNcGdELEVBQU15VSxFQUFNelUsSUFDWjdELEVBQWNVLEVBQVMrdEMsdUJBQXlCbjJCLEVBQU10WSxZQUFjLEtBQ3BFbmdCLEVBQXNDLE9BQXpCNDBFLEVBQWtDSixFQUFNMzdDLGdCQUE2RCxJQUExQys3QyxFQUFxQnZsQixpQkFBNEJ1bEIsRUFBcUJweEUsUUFBUXhELFNBQVcvUCxFQUNqS2k1QixHQUFXckksRUFBUyt0Qyx1QkFBeUJwQixHQUFhcGlCLElBQVdobUQsSUFBS3k3QixFQUFTcUksUUFBVS9JLEdBQzdGK3BDLEdBQXlDLElBQTFCcnBDLEVBQVNzRCxnQkFBNEIvVixFQUFTQyxXQUFXNTVCLE9BQWdELElBQXZDMjVCLEVBQVNDLFdBQVc1NUIsTUFBTXMyQyxTQUMzR2svQixJQUFvQnBwQyxFQUFTeUgsYUFBZ0JsYSxFQUFTQyxXQUFXd2YsUUFDakU0RSxJQUFrQnJrQixFQUFTMmUsZ0JBQWdCemUsU0FDM0N1dUMsSUFBa0J6dUMsRUFBUzJlLGdCQUFnQnRoQixPQUMzQ3F4QyxJQUFpQjF1QyxFQUFTMmUsZ0JBQWdCdDRDLE1BQzFDc2tELEVBQWNsWSxFQUFTc0YsV0FBYXF1RCxFQUFNejdDLFlBM3YxQjVCLEVBNnYxQmQ5SyxFQUFpQjdmLEVBQVMyZSxnQkFBZ0J6ZSxVQUFZRixFQUFTMmUsZ0JBQWdCdGhCLFFBQVUyQyxFQUFTMmUsZ0JBQWdCdDRDLE1BQ2xIK25FLE9BQXlDeHVELElBQW5CaWdDLEVBQWlDQSxFQUFlM2dELE9BQVMsRUFFL0VvbUUsRUFBcUJsTCxHQUFXcGpELElBQUt5N0IsR0FDckMwVSxFQUFTMitDLEVBQW1CN29DLE1BQU05VixPQUV4QyxJQUEwQixJQUFyQmtnRCxLQUUyQixJQUExQkMsR0FBa0NyckUsSUFBV3lxRSxHQUFpQixDQUVsRSxNQUFNcmhDLEVBQ0xwcEMsSUFBV3lxRSxHQUNYajBELEVBQVN0QyxLQUFPczJELEVBS2pCci9DLEdBQVNnZSxTQUFVM3lCLEVBQVV4VyxFQUFRb3BDLEdBUXZDLElBQUlpbEMsR0FBcUIsRUFFcEI3M0QsRUFBU2xpQixVQUFZKzBDLEVBQW1CeXRCLFVBRXZDenRCLEVBQW1CaWxDLGFBQWlCamxDLEVBQW1Ca2xDLHFCQUF1QnJqRCxFQUFPOFYsTUFBTTFzQyxTQUlwRiswQyxFQUFtQjdhLGlCQUFtQjc0QixHQUl0Q3dOLEVBQU9zUyxrQkFBcUQsSUFBbEM0ekIsRUFBbUJnVyxXQU54RGd2QixHQUFxQixFQVVSbHJFLEVBQU9zUyxrQkFBcUQsSUFBbEM0ekIsRUFBbUJnVyxXQUkvQ2w4QyxFQUFPaVQsZ0JBQWlELElBQWhDaXpCLEVBQW1CMlcsU0FFdERxdUIsR0FBcUIsRUFFUmxyRSxFQUFPaVQsZ0JBQWlELElBQWhDaXpCLEVBQW1CMlcsU0FJN0MzVyxFQUFtQnhxQixTQUFXQSxHQUk5QnJJLEVBQVNtRCxLQUFPMHZCLEVBQW1CMXZCLE1BQVFBLEVBRnREMDBELEdBQXFCLE9BTStCMXFGLElBQXpDMGxELEVBQW1CNFMsbUJBQzVCNVMsRUFBbUI0UyxvQkFBc0I5d0IsR0FBU21kLFdBQ3BEZSxFQUFtQmQsa0JBQW9CcGQsR0FBU29kLGlCQUlyQ2MsRUFBbUJ3VyxlQUFpQkEsR0FJcEN4VyxFQUFtQnVXLGlCQUFtQkEsR0FJdEN2VyxFQUFtQmpoQixlQUFpQkEsR0FJcENpaEIsRUFBbUJtSixlQUFpQkEsR0FJcENuSixFQUFtQm9KLGNBQWdCQSxHQUluQ3BKLEVBQW1CM2EsY0FBZ0JBLElBSVQsSUFBMUJ3RSxFQUFhQyxVQUFxQmtXLEVBQW1COEksb0JBQXNCQSxLQXRCdEZrOEIsR0FBcUIsR0FKckJBLEdBQXFCLEVBZHJCQSxHQUFxQixFQVJyQkEsR0FBcUIsR0F3RHRCQSxHQUFxQixFQUNyQmhsQyxFQUFtQnl0QixVQUFZdGdELEVBQVNsaUIsU0FNekMsSUFBSW92QyxFQUFVMkYsRUFBbUJrbkIsZ0JBRUwsSUFBdkI4ZCxJQUVKM3FDLEVBQVU4cUMsR0FBWWg0RCxFQUFVNFgsRUFBT2pyQixJQUl4QyxJQUFJc3JFLEdBQWlCLEVBQ2pCQyxHQUFrQixFQUNsQkMsR0FBZ0IsRUFFcEIsTUFBTUMsRUFBYWxyQyxFQUFRd1AsY0FDMUIyN0IsRUFBYXhsQyxFQUFtQjFlLFNBa0JqQyxHQWhCS3FXLEVBQU01cEQsV0FBWXNzRCxFQUFRQSxXQUU5QitxQyxHQUFpQixFQUNqQkMsR0FBa0IsRUFDbEJDLEdBQWdCLEdBSVpuNEQsRUFBU3RDLEtBQU9zMkQsSUFFcEJBLEVBQXFCaDBELEVBQVN0QyxHQUU5Qnc2RCxHQUFrQixHQUlkRCxHQUFrQmhFLElBQW1CenFFLEVBQVMsQ0EyQmxELEdBekJBNHVFLEVBQVd6N0IsU0FBVTZnQixHQUFLLG1CQUFvQmgwRCxFQUFPRSxrQkFFaERnekIsRUFBYTZULHdCQUVqQjZuQyxFQUFXejdCLFNBQVU2Z0IsR0FBSyxnQkFDekIsR0FBUWh3RixLQUFLOFAsSUFBS2tzQixFQUFPd1AsSUFBTSxHQUFReHJDLEtBQUsrUCxNQUl6QzAyRixJQUFtQnpxRSxJQUV2QnlxRSxFQUFpQnpxRSxFQU1qQjB1RSxHQUFrQixFQUNsQkMsR0FBZ0IsR0FPWm40RCxFQUFTcVYsa0JBQ2JyVixFQUFTbXhELHFCQUNUbnhELEVBQVNpeEQsb0JBQ1RqeEQsRUFBUyt0Qyx3QkFDVC90QyxFQUFTcUksT0FBUyxDQUVsQixNQUFNaXdELEVBQVVGLEVBQVdyNEYsSUFBSXc0RixvQkFFZHByRixJQUFabXJGLEdBRUpBLEVBQVEzN0IsU0FBVTZnQixHQUNqQndYLEVBQVM1cEUsc0JBQXVCNUIsRUFBT0ssZUFNckNtVyxFQUFTbXhELHFCQUNibnhELEVBQVNpeEQsb0JBQ1RqeEQsRUFBU2d4RCx1QkFDVGh4RCxFQUFTOEoscUJBQ1Q5SixFQUFTK3RDLHdCQUNUL3RDLEVBQVNxVixtQkFFVCtpRCxFQUFXejdCLFNBQVU2Z0IsR0FBSyxrQkFBa0QsSUFBaENoMEQsRUFBT3FxQyx1QkFJL0M3ekIsRUFBU214RCxxQkFDYm54RCxFQUFTaXhELG9CQUNUanhELEVBQVNneEQsdUJBQ1RoeEQsRUFBUzhKLHFCQUNUOUosRUFBUyt0Qyx3QkFDVC90QyxFQUFTcVYsa0JBQ1RyVixFQUFTb3lELGtCQUNUemxFLEVBQU9pVCxnQkFFUHc0RCxFQUFXejdCLFNBQVU2Z0IsR0FBSyxhQUFjaDBELEVBQU9DLG9CQVVqRCxHQUFLa0QsRUFBT2lULGNBQWdCLENBRTNCdzRELEVBQVd6MEIsWUFBYTZaLEdBQUs3d0QsRUFBUSxjQUNyQ3lyRSxFQUFXejBCLFlBQWE2WixHQUFLN3dELEVBQVEscUJBRXJDLE1BQU1vVCxFQUFXcFQsRUFBT29ULFNBRW5CQSxJQUVDMmMsRUFBYTBVLHFCQUVhLE9BQXpCcnhCLEVBQVN5NEQsYUFBdUJ6NEQsRUFBUzA0RCxxQkFFOUNMLEVBQVd6N0IsU0FBVTZnQixHQUFLLGNBQWV6OUMsRUFBU3k0RCxZQUFhbjRFLElBQy9EKzNFLEVBQVd6N0IsU0FBVTZnQixHQUFLLGtCQUFtQno5QyxFQUFTMjRELGtCQUl0RE4sRUFBV3owQixZQUFhNlosR0FBS3o5QyxFQUFVLGlCQVExQyxNQUFNbU0sRUFBa0IzZSxFQUFTMmUsZ0JBMEVsQyxJQUF3Q2lJLEVBQVV4bkQsRUFOakQsWUFsRWtDd2dCLElBQTdCKytCLEVBQWdCemUsZUFBcUR0Z0IsSUFBM0IrK0IsRUFBZ0J0aEIsYUFBb0R6ZCxJQUExQisrQixFQUFnQnQ0QyxRQUFpRCxJQUExQjhvRCxFQUFhQyxXQUU1STI0QyxHQUFhNXZFLE9BQVFpSCxFQUFRWSxFQUFVeVMsRUFBVWt0QixJQUs3Q2dyQyxHQUFtQnJsQyxFQUFtQmgzQixnQkFBa0JsUCxFQUFPa1AsaUJBRW5FZzNCLEVBQW1CaDNCLGNBQWdCbFAsRUFBT2tQLGNBQzFDdThELEVBQVd6N0IsU0FBVTZnQixHQUFLLGdCQUFpQjd3RCxFQUFPa1AsZ0JBSTlDcThELElBRUpFLEVBQVd6N0IsU0FBVTZnQixHQUFLLHNCQUF1Qm1XLEVBQU1ELHFCQUVsRDdnQyxFQUFtQmlsQyxjQXNEd0JuckcsRUEzQ0p3ckcsR0EyQ05oa0QsRUEzQ05ra0QsR0E2Q3hCN3dDLGtCQUFrQnpwQyxZQUFjcHhCLEVBQ3pDd25ELEVBQVNzVCxXQUFXMXBDLFlBQWNweEIsRUFFbEN3bkQsRUFBU3VULGtCQUFrQjNwQyxZQUFjcHhCLEVBQ3pDd25ELEVBQVN5VCx3QkFBd0I3cEMsWUFBY3B4QixFQUMvQ3duRCxFQUFTdVUsWUFBWTNxQyxZQUFjcHhCLEVBQ25Dd25ELEVBQVN3VSxrQkFBa0I1cUMsWUFBY3B4QixFQUN6Q3duRCxFQUFTZ1UsV0FBV3BxQyxZQUFjcHhCLEVBQ2xDd25ELEVBQVNvVSxpQkFBaUJ4cUMsWUFBY3B4QixFQUN4Q3duRCxFQUFTZ1YsZUFBZXByQyxZQUFjcHhCLEVBQ3RDd25ELEVBQVM2VSxpQkFBaUJqckMsWUFBY3B4QixHQWpEbEN3MkMsR0FBT25ELEVBQVNtRCxLQUVwQnpFLEdBQVVneUQsbUJBQW9CMkgsRUFBWWwxRCxHQUkzQ3pFLEdBQVVteUQsd0JBQXlCd0gsRUFBWXI0RCxFQUFVdTBELEVBQWFELEVBQVNRLEdBRS9FdHhCLEdBQWNJLE9BQVE0WixHQUFLM3FCLEVBQW1COGxDLGFBQWNOLEVBQVloNEUsS0FJcEUyZixFQUFTcVYsbUJBQW9ELElBQWhDclYsRUFBU21WLHFCQUUxQ3F1QixHQUFjSSxPQUFRNFosR0FBSzNxQixFQUFtQjhsQyxhQUFjTixFQUFZaDRFLElBQ3hFMmYsRUFBU21WLG9CQUFxQixHQUkxQm5WLEVBQVNreUQsa0JBRWJrRyxFQUFXejdCLFNBQVU2Z0IsR0FBSyxTQUFVN3dELEVBQU9qWSxRQU01QzBqRixFQUFXejdCLFNBQVU2Z0IsR0FBSyxrQkFBbUI3d0QsRUFBTzRPLGlCQUNwRDY4RCxFQUFXejdCLFNBQVU2Z0IsR0FBSyxlQUFnQjd3RCxFQUFPNk8sY0FDakQ0OEQsRUFBV3o3QixTQUFVNmdCLEdBQUssY0FBZTd3RCxFQUFPOUMsYUFFekNxakMsRUEvaUNTMHJDLENBQVlwdkUsRUFBUW91QixFQUFPcnFCLEVBQVV5UyxFQUFVclQsR0FFL0Q2OUIsRUFBTWl5QixZQUFhejhDLEVBQVUwOEMsR0FJN0IsSUFBSW5vRixFQUFRZzVCLEVBQVNoNUIsTUFDckIsTUFBTWs1QixFQUFXRixFQUFTQyxXQUFXQyxTQUlyQyxHQUFlLE9BQVZsNUIsR0FFSixRQUFrQjRZLElBQWJzZ0IsR0FBNkMsSUFBbkJBLEVBQVNoSyxNQUFjLFlBRWhELEdBQXFCLElBQWhCbHZCLEVBQU1rdkIsTUFFakIsT0FNRCxJQVdJblAsRUFYQXVrRixFQUFjLEdBRVUsSUFBdkI3NEQsRUFBU3FKLFlBRWI5MEMsRUFBUWtxQyxHQUFXODdCLHNCQUF1Qmh0QyxHQUMxQ3NyRSxFQUFjLEdBSWYxc0MsR0FBY3VCLE1BQU8vZ0MsRUFBUXFULEVBQVVrdEIsRUFBUzMvQixFQUFVaDVCLEdBRzFELElBQUlvakQsRUFBVzQ5QyxHQUVBLE9BQVZoaEcsSUFFSitmLEVBQVlrWixHQUFXanBCLElBQUtoUSxHQUU1Qm9qRCxFQUFXNjlDLEdBQ1g3OUMsRUFBU25MLFNBQVVsNEIsSUFNcEIsTUFBTXdrRixFQUF3QixPQUFWdmtHLEVBQW1CQSxFQUFNa3ZCLE1BQVFnSyxFQUFTaEssTUFFeERzMUUsRUFBYXhyRSxFQUFTK2UsVUFBVTM1QyxNQUFRa21HLEVBQ3hDRyxFQUFhenJFLEVBQVMrZSxVQUFVN29CLE1BQVFvMUUsRUFFeEM1bEQsRUFBdUIsT0FBVnpFLEVBQWlCQSxFQUFNNzdDLE1BQVFrbUcsRUFBYyxFQUMxRDlrRCxFQUF1QixPQUFWdkYsRUFBaUJBLEVBQU0vcUIsTUFBUW8xRSxFQUFjbjdGLEVBQUFBLEVBRTFEdTdGLEVBQVl6ckcsS0FBS2tHLElBQUtxbEcsRUFBWTlsRCxHQUNsQ2ltRCxFQUFVMXJHLEtBQUswRyxJQUFLNGtHLEVBQVdDLEVBQWFDLEVBQVkvbEQsRUFBYWMsR0FBZSxFQUVwRm9sRCxFQUFZM3JHLEtBQUtrRyxJQUFLLEVBQUd3bEcsRUFBVUQsRUFBWSxHQUVyRCxHQUFtQixJQUFkRSxFQUFMLENBSUEsR0FBS3hzRSxFQUFPNFMsUUFFaUIsSUFBdkJTLEVBQVNxSixXQUVibWhCLEVBQU1teUIsYUFBYzM4QyxFQUFTc0osbUJBQXFCNnJELEtBQ2xEeDlDLEVBQVNpWSxRQUFTLElBSWxCalksRUFBU2lZLFFBQVMsUUFJYixHQUFLampDLEVBQU82UyxPQUFTLENBRTNCLElBQUkzckMsRUFBWW1zQyxFQUFTa0osZUFFTi83QixJQUFkdFosSUFBMEJBLEVBQVksR0FFM0MyMkQsRUFBTW15QixhQUFjOW9GLEVBQVlzaEcsS0FFM0J4b0UsRUFBT3lzRSxlQUVYemhELEVBQVNpWSxRQUFTLEdBRVBqakMsRUFBTzBzRSxXQUVsQjFoRCxFQUFTaVksUUFBUyxHQUlsQmpZLEVBQVNpWSxRQUFTLFFBSVJqakMsRUFBTzhTLFNBRWxCa1ksRUFBU2lZLFFBQVMsR0FFUGpqQyxFQUFPMnNFLFVBRWxCM2hELEVBQVNpWSxRQUFTLEdBSW5CLEdBQUtqakMsRUFBT3NTLGdCQUVYMFksRUFBU2tZLGdCQUFpQm9wQyxFQUFXRSxFQUFXeHNFLEVBQU9sSixZQUVqRCxHQUFLOEosRUFBU2doQywwQkFBNEIsQ0FFaEQsTUFBTTBNLEVBQWdCenRFLEtBQUswRyxJQUFLcTVCLEVBQVMwdEMsY0FBZTF0QyxFQUFTdWhDLG1CQUVqRW5YLEVBQVNrWSxnQkFBaUJvcEMsRUFBV0UsRUFBV2wrQixRQUloRHRqQixFQUFTVyxPQUFRMmdELEVBQVdFLEtBUTlCeHJHLEtBQUtpcUUsUUFBVSxTQUFXaGdCLEVBQU9wdUIsR0FFaEM2cEUsRUFBcUJoZixHQUFhOXZFLElBQUtxekMsR0FDdkN5N0MsRUFBbUI5Z0MsT0FFbkJnaEMsRUFBaUJwakcsS0FBTWtqRyxHQUV2Qno3QyxFQUFNelosaUJBQWlCLFNBQVd4UixHQUU1QkEsRUFBT3lRLFNBQVd6USxFQUFPME4sT0FBT3BoQyxLQUFNdXdCLEVBQU82USxVQUVqRGc1RCxFQUFtQnBmLFVBQVd0bkQsR0FFekJBLEVBQU9pUCxZQUVYeTNELEVBQW1CbmYsV0FBWXZuRCxPQVFsQzBtRSxFQUFtQnRmLFlBQWE0ZixFQUFNNXBCLHlCQUV0Q255QixFQUFNMVosVUFBVSxTQUFXdlIsR0FFMUIsTUFBTXFULEVBQVdyVCxFQUFPcVQsU0FFeEIsR0FBS0EsRUFFSixHQUFLL3lDLE1BQU11TyxRQUFTd2tDLEdBRW5CLElBQU0sSUFBSXZ4QyxFQUFJLEVBQUdBLEVBQUl1eEMsRUFBU3Z6QyxPQUFRZ0MsSUFJckN1cEcsR0FGa0JoNEQsRUFBVXZ4QyxHQUVMbXBELEVBQU9qckIsUUFNL0JxckUsR0FBWWg0RCxFQUFVNFgsRUFBT2pyQixNQVFoQzRtRSxFQUFpQi80RixNQUNqQjY0RixFQUFxQixNQU10QixJQUFJeEQsR0FBMkIsS0FRL0IsU0FBUzhILEtBRVJ6M0QsR0FBVXp0QyxPQUlYLFNBQVNtbEcsS0FFUjEzRCxHQUFVdnRDLFFBSVgsTUFBTXV0QyxHQUFZLElBQUk0YixHQXFLdEIsU0FBU3k5QyxHQUFlNXNFLEVBQVFuRCxFQUFRbW1ELEVBQVk4akIsR0FFbkQsSUFBd0IsSUFBbkI5bUUsRUFBT2dQLFFBQW9CLE9BSWhDLEdBRmdCaFAsRUFBTzBOLE9BQU9waEMsS0FBTXV3QixFQUFPNlEsUUFJMUMsR0FBSzFOLEVBQU9zN0QsUUFFWHRZLEVBQWFoakQsRUFBT29QLGlCQUVkLEdBQUtwUCxFQUFPNnNFLE9BRVMsSUFBdEI3c0UsRUFBT2txRCxZQUFzQmxxRCxFQUFPakgsT0FBUThELFFBRTNDLEdBQUttRCxFQUFPeVEsUUFFbEJpMkQsRUFBbUJwZixVQUFXdG5ELEdBRXpCQSxFQUFPaVAsWUFFWHkzRCxFQUFtQm5mLFdBQVl2bkQsUUFJMUIsR0FBS0EsRUFBTzJzRSxVQUVsQixJQUFPM3NFLEVBQU9tUCxlQUFpQjY0QyxFQUFTaDVCLGlCQUFrQmh2QixHQUFXLENBRS9EOG1FLEdBRUp1QixFQUFTNXBFLHNCQUF1QnVCLEVBQU85QyxhQUNyQzdJLGFBQWMrekUsR0FJakIsTUFBTXhuRSxFQUFXazlCLEdBQVEva0MsT0FBUWlILEdBQzNCcVQsRUFBV3JULEVBQU9xVCxTQUVuQkEsRUFBU3JFLFNBRWJ5M0QsRUFBa0JqakcsS0FBTXc4QixFQUFRWSxFQUFVeVMsRUFBVTJ2QyxFQUFZcWxCLEVBQVNubUcsRUFBRyxZQU14RSxJQUFLODlCLEVBQU80UyxRQUFVNVMsRUFBTzZTLFFBQVU3UyxFQUFPOFMsWUFFL0M5UyxFQUFPaVQsZUFJTmpULEVBQU9vVCxTQUFTcWMsUUFBVXNULEdBQUtwWCxPQUFPOEQsUUFFMUN6dkIsRUFBT29ULFNBQVNyYSxTQUNoQmlILEVBQU9vVCxTQUFTcWMsTUFBUXNULEdBQUtwWCxPQUFPOEQsUUFNL0J6dkIsRUFBT21QLGVBQWlCNjRDLEVBQVNqNUIsaUJBQWtCL3VCLElBQVcsQ0FFL0Q4bUUsR0FFSnVCLEVBQVM1cEUsc0JBQXVCdUIsRUFBTzlDLGFBQ3JDN0ksYUFBYyt6RSxHQUlqQixNQUFNeG5FLEVBQVdrOUIsR0FBUS9rQyxPQUFRaUgsR0FDM0JxVCxFQUFXclQsRUFBT3FULFNBRXhCLEdBQUsveUMsTUFBTXVPLFFBQVN3a0MsR0FBYSxDQUVoQyxNQUFNb00sRUFBUzdlLEVBQVM2ZSxPQUV4QixJQUFNLElBQUkzOUMsRUFBSSxFQUFHVyxFQUFJZzlDLEVBQU8zL0MsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFakQsTUFBTSsvQyxFQUFRcEMsRUFBUTM5QyxHQUNoQndqRCxFQUFnQmpTLEVBQVV3TyxFQUFNM0IsZUFFakNvRixHQUFpQkEsRUFBY3RXLFNBRW5DeTNELEVBQWtCampHLEtBQU13OEIsRUFBUVksRUFBVTBrQixFQUFlMDlCLEVBQVlxbEIsRUFBU25tRyxFQUFHMi9DLFNBTXhFeE8sRUFBU3JFLFNBRXBCeTNELEVBQWtCampHLEtBQU13OEIsRUFBUVksRUFBVXlTLEVBQVUydkMsRUFBWXFsQixFQUFTbm1HLEVBQUcsTUFVaEYsTUFBTWkvQixFQUFXbkIsRUFBT21CLFNBRXhCLElBQU0sSUFBSXIvQixFQUFJLEVBQUdXLEVBQUkwK0IsRUFBU3JoQyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFNUM4cUcsR0FBZXpyRSxFQUFVci9CLEdBQUsrNkIsRUFBUW1tRCxFQUFZOGpCLEdBTXBELFNBQVNnRyxHQUFhckcsRUFBbUJ4N0MsRUFBT3B1QixFQUFRL25CLEdBRXZELE1BQU1pNEYsRUFBZ0J0RyxFQUFrQnBwQixPQUNsQzJ2QixFQUFzQnZHLEVBQWtCcGpCLGFBQ3hDNHBCLEVBQXFCeEcsRUFBa0I1dkQsWUFFN0M2dkQsRUFBbUJyZixnQkFBaUJ4cUQsR0FFL0Jtd0UsRUFBb0JsdEcsT0FBUyxHQWtCbkMsU0FBaUNpdEcsRUFBZTloRCxFQUFPcHVCLEdBRXRELE1BQU1tekIsRUFBV0QsRUFBYUMsU0FFSyxPQUE5Qm00QyxJQUVKQSxFQUE0QixJQUFJdnlFLEdBQW1CLEVBQUcsRUFBRyxDQUN4RDlDLGlCQUFpQixFQUNqQmpiLEtBQXlDLE9BQW5DaTVFLEdBQU0zakUsUUFBU3pMLEdBQTJCQSxFQUFnQkosRUFDaEUrUSxVQUFXaFIsRUFDWCtVLFFBQVc0NUIsSUFBMkIsSUFBZmcyQyxFQUF3QixFQUFJLEtBS3JEZ0IsRUFBTXFELHFCQUFzQi85QyxHQUV2QjBELEVBRUptNEMsRUFBMEI5eEUsUUFBU2kyQixFQUFTM3FELEVBQUcycUQsRUFBU3pxRCxHQUl4RHNtRyxFQUEwQjl4RSxRQUFTOVIsRUFBaUIrbkMsRUFBUzNxRCxHQUFLNGlCLEVBQWlCK25DLEVBQVN6cUQsSUFNN0YsTUFBTXFwRCxFQUFzQjg3QyxFQUFNNzdDLGtCQUNsQzY3QyxFQUFNdDdDLGdCQUFpQnk4QyxHQUN2Qm5CLEVBQU16eEYsUUFJTixNQUFNKzFDLEVBQXFCMDdDLEVBQU16N0MsWUFDakN5N0MsRUFBTXo3QyxZQXBpMUJjLEVBc2kxQnBCMmhELEdBQWVILEVBQWU5aEQsRUFBT3B1QixHQUVyQ21xRSxFQUFNejdDLFlBQWNELEVBRXBCNTNCLEdBQVM4akUsOEJBQStCMlEsR0FDeEN6MEUsR0FBUzZqRSx5QkFBMEI0USxHQUVuQ25CLEVBQU10N0MsZ0JBQWlCUixHQS9EZWlpRCxDQUF3QkosRUFBZTloRCxFQUFPcHVCLEdBRS9FL25CLEdBQVcrb0QsRUFBTS9vRCxTQUFVeXlGLEVBQWlCdmlGLEtBQU1sUSxJQUVsRGk0RixFQUFjanRHLE9BQVMsR0FBSW90RyxHQUFlSCxFQUFlOWhELEVBQU9wdUIsR0FDaEVtd0UsRUFBb0JsdEcsT0FBUyxHQUFJb3RHLEdBQWVGLEVBQXFCL2hELEVBQU9wdUIsR0FDNUVvd0UsRUFBbUJudEcsT0FBUyxHQUFJb3RHLEdBQWVELEVBQW9CaGlELEVBQU9wdUIsR0FJL0VnaEMsRUFBTTVOLFFBQVFwNkIsTUFBTTQwRCxTQUFTLEdBQzdCNXNCLEVBQU01TixRQUFRcDZCLE1BQU02MUQsU0FBUyxHQUM3Qjd0QixFQUFNNU4sUUFBUWhwRCxNQUFNeWtGLFNBQVMsR0FFN0I3dEIsRUFBTTR4QixrQkFBa0IsR0FxRHpCLFNBQVN5ZCxHQUFleHVDLEVBQVl6VCxFQUFPcHVCLEdBRTFDLE1BQU0wckUsR0FBcUMsSUFBbEJ0OUMsRUFBTXhZLFFBQW1Cd1ksRUFBTXM5QyxpQkFBbUIsS0FFM0UsSUFBTSxJQUFJem1HLEVBQUksRUFBR1csRUFBSWk4RCxFQUFXNStELE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXJELE1BQU15aEYsRUFBYTdrQixFQUFZNThELEdBRXpCaytCLEVBQVN1akQsRUFBV3ZqRCxPQUNwQlksRUFBVzJpRCxFQUFXM2lELFNBQ3RCeVMsRUFBZ0MsT0FBckJrMUQsRUFBNEJobEIsRUFBV2x3QyxTQUFXazFELEVBQzdEMW1ELEVBQVEwaEMsRUFBVzFoQyxNQUVwQjdoQixFQUFPME4sT0FBT3BoQyxLQUFNdXdCLEVBQU82USxTQUUvQm84QyxHQUFjOXBELEVBQVFpckIsRUFBT3B1QixFQUFRK0QsRUFBVXlTLEVBQVV3TyxJQVE1RCxTQUFTaW9DLEdBQWM5cEQsRUFBUWlyQixFQUFPcHVCLEVBQVErRCxFQUFVeVMsRUFBVXdPLEdBRWpFN2hCLEVBQU9zUCxlQUFnQjAzRCxFQUFPLzdDLEVBQU9wdUIsRUFBUStELEVBQVV5UyxFQUFVd08sR0FFakU3aEIsRUFBTzRPLGdCQUFnQnRsQixpQkFBa0J1VCxFQUFPQyxtQkFBb0JrRCxFQUFPOUMsYUFDM0U4QyxFQUFPNk8sYUFBYXhqQixnQkFBaUIyVSxFQUFPNE8saUJBRTVDeUUsRUFBUy9ELGVBQWdCMDNELEVBQU8vN0MsRUFBT3B1QixFQUFRK0QsRUFBVVosRUFBUTZoQixJQUVuQyxJQUF6QnhPLEVBQVN3RCxhQXJuMUJHLElBcW4xQnFCeEQsRUFBU3FELE1BRTlDckQsRUFBU3FELEtBeG4xQkssRUF5bjFCZHJELEVBQVNqaUIsYUFBYyxFQUN2QjQxRSxFQUFNN2QsbUJBQW9CdHNELEVBQVFvdUIsRUFBT3JxQixFQUFVeVMsRUFBVXJULEVBQVE2aEIsR0FFckV4TyxFQUFTcUQsS0E3bjFCTSxFQThuMUJmckQsRUFBU2ppQixhQUFjLEVBQ3ZCNDFFLEVBQU03ZCxtQkFBb0J0c0QsRUFBUW91QixFQUFPcnFCLEVBQVV5UyxFQUFVclQsRUFBUTZoQixHQUVyRXhPLEVBQVNxRCxLQS9uMUJPLEdBbW8xQmhCc3dELEVBQU03ZCxtQkFBb0J0c0QsRUFBUW91QixFQUFPcnFCLEVBQVV5UyxFQUFVclQsRUFBUTZoQixHQUl0RTdoQixFQUFPdVAsY0FBZXkzRCxFQUFPLzdDLEVBQU9wdUIsRUFBUStELEVBQVV5UyxFQUFVd08sR0FJakUsU0FBU3dwRCxHQUFZaDRELEVBQVU0WCxFQUFPanJCLElBRWQsSUFBbEJpckIsRUFBTXhZLFVBQW1Cd1ksRUFBUXE5QyxHQUV0QyxNQUFNcGlDLEVBQXFCbEwsR0FBV3BqRCxJQUFLeTdCLEdBRXJDMFUsRUFBUzIrQyxFQUFtQjdvQyxNQUFNOVYsT0FDbENvL0IsRUFBZXVmLEVBQW1CN29DLE1BQU1zcEIsYUFFeENpa0IsRUFBcUJyakQsRUFBTzhWLE1BQU0xc0MsUUFFbEM0aEIsRUFBYTAxRCxHQUFhdm5CLGNBQWU3dEMsRUFBVTBVLEVBQU84VixNQUFPc3BCLEVBQWNsOEIsRUFBT2pyQixHQUN0Rm90RSxFQUFrQjNFLEdBQWFwbUIsbUJBQW9CdHZDLEdBRXpELElBQUlxN0IsRUFBV2xJLEVBQW1Ca0ksU0FJbENsSSxFQUFtQnZ6QixZQUFjVSxFQUFTK3RDLHVCQUF5Qm4yQixFQUFNdFksWUFBYyxLQUN2RnV6QixFQUFtQjF2QixJQUFNeVUsRUFBTXpVLElBQy9CMHZCLEVBQW1CeHFCLFFBQVdySSxFQUFTK3RDLHVCQUF5QnBCLEdBQWFwaUIsSUFBV2htRCxJQUFLeTdCLEVBQVNxSSxRQUFVd3FCLEVBQW1CdnpCLGtCQUVqSG55QixJQUFiNHRELElBSUovNkIsRUFBU2o0QixpQkFBa0IsVUFBV3N1RixJQUV0Q3Q3QixFQUFXLElBQUk2USxJQUNmL1ksRUFBbUJrSSxTQUFXQSxHQUkvQixJQUFJN04sRUFBVTZOLEVBQVN4MkQsSUFBS3cxRixHQUU1QixRQUFpQjVzRixJQUFaKy9DLEdBSUosR0FBSzJGLEVBQW1Ca25CLGlCQUFtQjdzQixHQUFXMkYsRUFBbUJrbEMscUJBQXVCQSxFQUkvRixPQUZBaUMsR0FBZ0NoNkQsRUFBVU4sR0FFbkN3dEIsT0FNUnh0QixFQUFXeVUsU0FBV2loRCxHQUFhMTRCLFlBQWExOEIsR0FFaERBLEVBQVN5RixRQUFTOVksRUFBUStTLEVBQVlpMEQsR0FFdEMzekQsRUFBUzBGLGdCQUFpQmhHLEVBQVlpMEQsR0FFdEN6bUMsRUFBVWtvQyxHQUFhaG1CLGVBQWdCMXZDLEVBQVlxNkQsR0FDbkRoL0IsRUFBU3pnRSxJQUFLeS9GLEVBQWlCN3NDLEdBRS9CMkYsRUFBbUIxZSxTQUFXelUsRUFBV3lVLFNBSTFDLE1BQU1BLEVBQVcwZSxFQUFtQjFlLFVBRTNCblUsRUFBU3FWLGtCQUFzQnJWLEVBQVMyb0MsdUJBQStDLElBQXRCM29DLEVBQVMyVSxXQUVsRlIsRUFBU3pQLGVBQWlCaVEsR0FBU2lkLFNBSXBDb29DLEdBQWdDaDZELEVBQVVOLEdBSTFDbXpCLEVBQW1CaWxDLFlBbVpwQixTQUE4QjkzRCxHQUU3QixPQUFPQSxFQUFTZ3hELHVCQUF5Qmh4RCxFQUFTaXhELG9CQUFzQmp4RCxFQUFTbXhELHFCQUNoRm54RCxFQUFTK3RDLHdCQUEwQi90QyxFQUFTb3lELGtCQUMxQ3B5RCxFQUFTcVYsbUJBQXdDLElBQXBCclYsRUFBUzBVLE9BdlpSdWxELENBQXFCajZELEdBQ3RENnlCLEVBQW1Ca2xDLG1CQUFxQkEsRUFFbkNsbEMsRUFBbUJpbEMsY0FJdkIzakQsRUFBU3FULGtCQUFrQjc2RCxNQUFRK25ELEVBQU84VixNQUFNc25CLFFBQ2hEMzlCLEVBQVNzVCxXQUFXOTZELE1BQVErbkQsRUFBTzhWLE1BQU11bkIsTUFDekM1OUIsRUFBU3VULGtCQUFrQi82RCxNQUFRK25ELEVBQU84VixNQUFNbWtCLFlBQ2hEeDZCLEVBQVN5VCx3QkFBd0JqN0QsTUFBUStuRCxFQUFPOFYsTUFBTXduQixrQkFDdEQ3OUIsRUFBU2dVLFdBQVd4N0QsTUFBUStuRCxFQUFPOFYsTUFBTW9rQixLQUN6Q3o2QixFQUFTb1UsaUJBQWlCNTdELE1BQVErbkQsRUFBTzhWLE1BQU15bkIsV0FDL0M5OUIsRUFBU2dWLGVBQWV4OEQsTUFBUStuRCxFQUFPOFYsTUFBTXFrQixTQUM3QzE2QixFQUFTaVYsTUFBTXo4RCxNQUFRK25ELEVBQU84VixNQUFNMG5CLGFBQ3BDLzlCLEVBQVNrVixNQUFNMThELE1BQVErbkQsRUFBTzhWLE1BQU0ybkIsYUFDcENoK0IsRUFBU3VVLFlBQVkvN0QsTUFBUStuRCxFQUFPOFYsTUFBTXQ5QixNQUMxQ2luQixFQUFTd1Usa0JBQWtCaDhELE1BQVErbkQsRUFBTzhWLE1BQU00bkIsWUFDaERqK0IsRUFBUzZVLGlCQUFpQnI4RCxNQUFRK25ELEVBQU84VixNQUFNc2tCLEtBRS9DMzZCLEVBQVM4VCxxQkFBcUJ0N0QsTUFBUStuRCxFQUFPOFYsTUFBTXZDLHFCQUNuRDlULEVBQVMrVCx3QkFBd0J2N0QsTUFBUStuRCxFQUFPOFYsTUFBTXRDLHdCQUN0RC9ULEVBQVNxVSxjQUFjNzdELE1BQVErbkQsRUFBTzhWLE1BQU1oQyxjQUM1Q3JVLEVBQVNzVSxpQkFBaUI5N0QsTUFBUStuRCxFQUFPOFYsTUFBTS9CLGlCQUMvQ3RVLEVBQVMyVSxlQUFlbjhELE1BQVErbkQsRUFBTzhWLE1BQU0xQixlQUM3QzNVLEVBQVM0VSxrQkFBa0JwOEQsTUFBUStuRCxFQUFPOFYsTUFBTXpCLG1CQUtqRCxNQUFNbXhDLEVBQWVodEMsRUFBUXdQLGNBQ3ZCaThCLEVBQWVuMUIsR0FBY0ssYUFBY3EyQixFQUFhdjNCLElBQUt4dUIsR0FLbkUsT0FIQTBlLEVBQW1Ca25CLGVBQWlCN3NCLEVBQ3BDMkYsRUFBbUI4bEMsYUFBZUEsRUFFM0J6ckMsRUFJUixTQUFTOHNDLEdBQWdDaDZELEVBQVVOLEdBRWxELE1BQU1tekIsRUFBcUJsTCxHQUFXcGpELElBQUt5N0IsR0FFM0M2eUIsRUFBbUI3YSxlQUFpQnRZLEVBQVdzWSxlQUMvQzZhLEVBQW1CZ1csV0FBYW5wQyxFQUFXbXBDLFdBQzNDaFcsRUFBbUIyVyxTQUFXOXBDLEVBQVc4cEMsU0FDekMzVyxFQUFtQmpoQixhQUFlbFMsRUFBV2tTLGFBQzdDaWhCLEVBQW1CbUosYUFBZXQ4QixFQUFXczhCLGFBQzdDbkosRUFBbUJvSixZQUFjdjhCLEVBQVd1OEIsWUFDNUNwSixFQUFtQjhJLGtCQUFvQmo4QixFQUFXaThCLGtCQUNsRDlJLEVBQW1CNFMsa0JBQW9CL2xDLEVBQVcrbEMsa0JBQ2xENVMsRUFBbUJkLGdCQUFrQnJ5QixFQUFXZ21DLG9CQUNoRDdTLEVBQW1Cd1csYUFBZTNwQyxFQUFXMnBDLGFBQzdDeFcsRUFBbUJ1VyxlQUFpQjFwQyxFQUFXMHBDLGVBQy9DdlcsRUFBbUIzYSxZQUFjeFksRUFBV3dZLFlBeGhCN0NoWSxHQUFVb2Msa0JBbkJWLFNBQTJCSCxHQUVyQjB6QyxJQUEyQkEsR0FBMEIxekMsTUFtQnRDLG9CQUFUN3VELE1BQXVCNHlDLEdBQVVxYyxXQUFZanZELE1BRXpESyxLQUFLMnVELGlCQUFtQixTQUFXaDBCLEdBRWxDdW5FLEdBQTJCdm5FLEVBQzNCOHZCLEdBQUdrRSxpQkFBa0JoMEIsR0FFTixPQUFiQSxFQUFzQjRYLEdBQVV6dEMsT0FBU3l0QyxHQUFVdnRDLFNBSXREeWxELEdBQUdyd0MsaUJBQWtCLGVBQWdCNHZGLElBQ3JDdi9DLEdBQUdyd0MsaUJBQWtCLGFBQWM2dkYsSUFJbkNqcUcsS0FBSzJxRCxPQUFTLFNBQVdWLEVBQU9wdUIsR0FFL0IsUUFBZ0JyYyxJQUFYcWMsSUFBNEMsSUFBcEJBLEVBQU8yVCxTQUduQyxZQURBN3NDLFFBQVFDLE1BQU8sMEVBS2hCLElBQXdCLElBQW5CcWpHLEVBQTBCLFFBSUwsSUFBckJoOEMsRUFBTWkvQixZQUFzQmovQixFQUFNdlosb0JBSWhCLE9BQWxCN1UsRUFBTzZSLFFBQWtCN1IsRUFBTzZVLHFCQUVqQixJQUFmK1osR0FBR3hCLFVBQXdDLElBQXBCd0IsR0FBRzR6QyxnQkFFRCxJQUF4QjV6QyxHQUFHaTBDLGtCQUE0QmowQyxHQUFHazJDLGFBQWM5a0UsR0FFckRBLEVBQVM0dUIsR0FBR3EzQyxjQUtVLElBQWxCNzNDLEVBQU14WSxTQUFtQndZLEVBQU0zYixlQUFnQjAzRCxFQUFPLzdDLEVBQU9wdUIsRUFBUXVxRSxHQUUxRVYsRUFBcUJoZixHQUFhOXZFLElBQUtxekMsRUFBTzI3QyxFQUFpQjltRyxRQUMvRDRtRyxFQUFtQjlnQyxPQUVuQmdoQyxFQUFpQnBqRyxLQUFNa2pHLEdBRXZCMEIsRUFBa0I5K0UsaUJBQWtCdVQsRUFBT0UsaUJBQWtCRixFQUFPQyxvQkFDcEVrckQsRUFBU2w2Qix3QkFBeUJzNkMsR0FFbENGLEVBQXdCbG5HLEtBQUs4akUscUJBQzdCbWpDLEVBQW1CamdELEdBQVM0ZCxLQUFNNWtFLEtBQUsrMkMsZUFBZ0Jtd0QsRUFBdUJyckUsR0FFOUU0cEUsRUFBb0JpQyxHQUFZOXdGLElBQUtxekMsRUFBTzA3QyxFQUFnQjdtRyxRQUM1RDJtRyxFQUFrQjdnQyxPQUVsQitnQyxFQUFnQm5qRyxLQUFNaWpHLEdBRXRCbUcsR0FBZTNoRCxFQUFPcHVCLEVBQVEsRUFBR21xRSxFQUFNRixhQUV2Q0wsRUFBa0JqakIsVUFFUyxJQUF0QndqQixFQUFNRixhQUVWTCxFQUFrQnYyQixLQUFNMjNCLEVBQWFDLElBTVosSUFBckJHLEdBQTRCamdELEdBQVM4ZCxlQUUxQyxNQUFNcWhCLEVBQWV1ZixFQUFtQjdvQyxNQUFNc3BCLGFBa0I5QyxHQWhCQS9FLEdBQVV6MkIsT0FBUXc3QixFQUFjbDhCLEVBQU9wdUIsSUFFYixJQUFyQm9yRSxHQUE0QmpnRCxHQUFTK2QsY0FJYixJQUF4Qi9rRSxLQUFLK2hFLEtBQUtzTCxXQUFxQnJ0RSxLQUFLK2hFLEtBQUt4MUQsUUFJOUNtbEMsR0FBV2laLE9BQVE4NkMsRUFBbUJ4N0MsR0FJdEN5N0MsRUFBbUJ0ZixZQUFhNGYsRUFBTTVwQix5QkFFakN2Z0QsRUFBT3UrRCxjQUFnQixDQUUzQixNQUFNRCxFQUFVdCtELEVBQU9zK0QsUUFFdkIsSUFBTSxJQUFJcjVGLEVBQUksRUFBR1csRUFBSTA0RixFQUFRcjdGLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRWxELE1BQU0wckcsRUFBVXJTLEVBQVNyNUYsR0FFekJnckcsR0FBYXJHLEVBQW1CeDdDLEVBQU91aUQsRUFBU0EsRUFBUTE0RixnQkFNekRnNEYsR0FBYXJHLEVBQW1CeDdDLEVBQU9wdUIsR0FNVixPQUF6QnVxRSxJQUlKMXpFLEdBQVM4akUsOEJBQStCNFAsR0FJeEMxekUsR0FBUzZqRSx5QkFBMEI2UCxLQU1iLElBQWxCbjhDLEVBQU14WSxTQUFtQndZLEVBQU0xYixjQUFleTNELEVBQU8vN0MsRUFBT3B1QixHQUlqRTJpQyxHQUFjc0Isb0JBQ2R1bUMsR0FBdUIsRUFDdkJDLEVBQWlCLEtBRWpCVixFQUFpQi80RixNQUloQjY0RixFQUZJRSxFQUFpQjltRyxPQUFTLEVBRVQ4bUcsRUFBa0JBLEVBQWlCOW1HLE9BQVMsR0FJNUMsS0FJdEI2bUcsRUFBZ0I5NEYsTUFJZjQ0RixFQUZJRSxFQUFnQjdtRyxPQUFTLEVBRVQ2bUcsRUFBaUJBLEVBQWdCN21HLE9BQVMsR0FJMUMsTUE4dEJ0QmtCLEtBQUtvcEYsa0JBQW9CLFdBRXhCLE9BQU84YyxHQUlSbG1HLEtBQUtzcEYscUJBQXVCLFdBRTNCLE9BQU82YyxHQUlSbm1HLEtBQUttcUQsZ0JBQWtCLFdBRXRCLE9BQU9pOEMsR0FJUnBtRyxLQUFLeWlHLHdCQUEwQixTQUFXajVDLEVBQWMwc0MsRUFBYy9nRSxHQUVyRTZrQyxHQUFXcGpELElBQUs0eUMsRUFBYXgwQixTQUFVODhELGVBQWlCb0UsRUFDeERsOEIsR0FBV3BqRCxJQUFLNHlDLEVBQWFyMEIsY0FBZTI4RCxlQUFpQjM4RCxFQUU3RCxNQUFNMDhELEVBQXlCNzNCLEdBQVdwakQsSUFBSzR5QyxHQUMvQ3FvQyxFQUF1QnlDLHVCQUF3QixFQUUxQ3pDLEVBQXVCeUMsd0JBRTNCekMsRUFBdUJ3RCwrQkFBNkM3MUUsSUFBakIyVixFQUU1QzA4RCxFQUF1QndELDRCQUlxQyxJQUE3RHB1QyxFQUFXMGIsSUFBSywwQ0FFcEJoZ0UsUUFBUXVoQixLQUFNLDBHQUNkMnRFLEVBQXVCNEQsc0JBQXVCLEtBVWxEejFGLEtBQUtxaUcsMkJBQTZCLFNBQVc3NEMsRUFBY2lqRCxHQUUxRCxNQUFNNWEsRUFBeUI3M0IsR0FBV3BqRCxJQUFLNHlDLEdBQy9DcW9DLEVBQXVCRyxtQkFBcUJ5YSxFQUM1QzVhLEVBQXVCNmEsNkJBQWlEbHRGLElBQXZCaXRGLEdBSWxEenNHLEtBQUswcUQsZ0JBQWtCLFNBQVdsQixFQUFjMi9CLEVBQWlCLEVBQUdFLEVBQW9CLEdBRXZGK2MsRUFBdUI1OEMsRUFDdkIwOEMsRUFBeUIvYyxFQUN6QmdkLEVBQTRCOWMsRUFFNUIsSUFBSXNqQixHQUF3QixFQUU1QixHQUFLbmpELEVBQWUsQ0FFbkIsTUFBTXFvQyxFQUF5QjczQixHQUFXcGpELElBQUs0eUMsUUFFU2hxQyxJQUFuRHF5RSxFQUF1QjZhLHlCQUczQjd2QyxFQUFNMW9ELGdCQUFpQixNQUFPLE1BQzlCdzRGLEdBQXdCLFFBRWlDbnRGLElBQTlDcXlFLEVBQXVCRyxtQkFFbEN0L0QsR0FBU3lqRSxrQkFBbUIzc0MsR0FFakJxb0MsRUFBdUJ5Qyx1QkFHbEM1aEUsR0FBU3VqRSxlQUFnQnpzQyxFQUFjd1EsR0FBV3BqRCxJQUFLNHlDLEVBQWF4MEIsU0FBVTg4RCxlQUFnQjkzQixHQUFXcGpELElBQUs0eUMsRUFBYXIwQixjQUFlMjhELGdCQU01SSxJQUFJbEQsRUFBYyxLQUNkd0csR0FBUyxFQUNUd1gsR0FBbUIsRUFFdkIsR0FBS3BqRCxFQUFlLENBRW5CLE1BQU14MEIsRUFBVXcwQixFQUFheDBCLFNBRXhCQSxFQUFRWSxpQkFBbUJaLEVBQVFTLHNCQUV2Q20zRSxHQUFtQixHQUlwQixNQUFNNWEsRUFBcUJoNEIsR0FBV3BqRCxJQUFLNHlDLEdBQWV3b0MsbUJBRXJEeG9DLEVBQWFDLHlCQUVqQm1sQyxFQUFjb0QsRUFBb0I3SSxHQUNsQ2lNLEdBQVMsR0FJVHhHLEVBRmE3L0IsRUFBYUMsVUFBWXhGLEVBQWFwMEIsUUFBVSxJQUF1RCxJQUFoRDFDLEdBQVM2aEUsbUJBQW9CL3FDLEdBRW5Gd1EsR0FBV3BqRCxJQUFLNHlDLEdBQWUyb0MsK0JBSS9CSCxFQUlmdVUsRUFBaUJ2aUYsS0FBTXdsQyxFQUFhMTFDLFVBQ3BDMHlGLEVBQWdCeGlGLEtBQU13bEMsRUFBYTEwQixTQUNuQzJ4RSxFQUFzQmo5QyxFQUFhejBCLGlCQUluQ3d4RSxFQUFpQnZpRixLQUFNbWpFLEdBQVl6aUUsZUFBZ0JraUYsR0FBYzE3RixRQUNqRXM3RixFQUFnQnhpRixLQUFNK2lGLEdBQVdyaUYsZUFBZ0JraUYsR0FBYzE3RixRQUMvRHU3RixFQUFzQk8sRUFnQnZCLEdBWnlCbnFDLEVBQU0xb0QsZ0JBQWlCLE1BQU95NkUsSUFFOUI3L0IsRUFBYTNILGFBQWV1bEQsR0FFcEQ5dkMsRUFBTXpWLFlBQWFvQyxFQUFjb2xDLEdBSWxDL3hCLEVBQU0vb0QsU0FBVXl5RixHQUNoQjFwQyxFQUFNL25DLFFBQVMweEUsR0FDZjNwQyxFQUFNNnNCLGVBQWdCK2MsR0FFakJyUixFQUFTLENBRWIsTUFBTTlELEVBQW9CdDNCLEdBQVdwakQsSUFBSzR5QyxFQUFheDBCLFNBQ3ZENjZELEdBQUk2RSxxQkFBc0IsTUFBTyxNQUFPLE1BQVF2TCxFQUFnQm1JLEVBQWtCUSxlQUFnQnpJLFFBRTVGLEdBQUt1akIsRUFBbUIsQ0FFOUIsTUFBTXRiLEVBQW9CdDNCLEdBQVdwakQsSUFBSzR5QyxFQUFheDBCLFNBQ2pENjNFLEVBQVExakIsR0FBa0IsRUFDaEMwRyxHQUFJaWQsd0JBQXlCLE1BQU8sTUFBT3hiLEVBQWtCUSxlQUFnQnpJLEdBQXFCLEVBQUd3akIsR0FJdEd4RyxHQUF1QixHQUl4QnJtRyxLQUFLK3NHLHVCQUF5QixTQUFXdmpELEVBQWM3b0QsRUFBR0UsRUFBR3VELEVBQU9DLEVBQVE4SCxFQUFRNmdHLEdBRW5GLElBQVN4akQsSUFBZ0JBLEVBQWFsMEIsb0JBR3JDLFlBREEzeUIsUUFBUUMsTUFBTyw0RkFLaEIsSUFBSWdzRixFQUFjNTBCLEdBQVdwakQsSUFBSzR5QyxHQUFld29DLG1CQVFqRCxHQU5LeG9DLEVBQWFDLDhCQUFtRGpxQyxJQUF4Qnd0RixJQUU1Q3BlLEVBQWNBLEVBQWFvZSxJQUl2QnBlLEVBQWMsQ0FFbEIveEIsRUFBTTFvRCxnQkFBaUIsTUFBT3k2RSxHQUU5QixJQUVDLE1BQU01NUQsRUFBVXcwQixFQUFheDBCLFFBQ3ZCaTRFLEVBQWdCajRFLEVBQVExRCxPQUN4QjJoRSxFQUFjaitELEVBQVFuZSxLQUU1QixHQUFLbzJGLElBQWtCcnNGLEdBQWNrdkUsR0FBTTNqRSxRQUFTOGdGLEtBQW9CcGQsR0FBSXZ2RCxhQUFjLE9BR3pGLFlBREEzOUIsUUFBUUMsTUFBTyw2R0FLaEIsTUFBTXNxRyxFQUE0QmphLElBQWdCdnlFLElBQXFCdW1DLEVBQVcwYixJQUFLLGdDQUFxQzVULEVBQWFDLFVBQVkvSCxFQUFXMGIsSUFBSywyQkFFckssS0FBS3N3QixJQUFnQjN5RSxHQUFvQnd2RSxHQUFNM2pFLFFBQVM4bUUsS0FBa0JwRCxHQUFJdnZELGFBQWMsUUFDdkYyeUQsSUFBZ0J4eUUsSUFBZXN1QyxFQUFhQyxVQUFZL0gsRUFBVzBiLElBQUssc0JBQXlCMWIsRUFBVzBiLElBQUssOEJBQ25IdXFDLEdBR0YsWUFEQXZxRyxRQUFRQyxNQUFPLHVIQU9UakMsR0FBSyxHQUFLQSxHQUFPNm9ELEVBQWFwbEQsTUFBUUEsR0FBZXZELEdBQUssR0FBS0EsR0FBTzJvRCxFQUFhbmxELE9BQVNBLEdBRWxHd3JGLEdBQUlzZCxXQUFZeHNHLEVBQUdFLEVBQUd1RCxFQUFPQyxFQUFReXJGLEdBQU0zakUsUUFBUzhnRixHQUFpQm5kLEdBQU0zakUsUUFBUzhtRSxHQUFlOW1GLEdBSW5HLFFBSUQsTUFBTXlpRixFQUF5QyxPQUF6QndYLEVBQWtDcHNDLEdBQVdwakQsSUFBS3d2RixHQUF1QnBVLG1CQUFxQixLQUNwSG4xQixFQUFNMW9ELGdCQUFpQixNQUFPeTZFLE1BUWpDNXVGLEtBQUtvdEcseUJBQTJCLFNBQVd0dEUsRUFBVTlLLEVBQVNxNEUsRUFBUSxHQUVyRSxJQUFzQyxJQUFqQ3I0RSxFQUFRbThELHFCQUdaLFlBREF4dUYsUUFBUUMsTUFBTyw2RkFLaEIsTUFBTTBxRyxFQUFhenRHLEtBQUs2UCxJQUFLLEdBQUsyOUYsR0FDNUJqcEcsRUFBUXZFLEtBQUtxTCxNQUFPOHBCLEVBQVE3YyxNQUFNL1QsTUFBUWtwRyxHQUMxQ2pwRyxFQUFTeEUsS0FBS3FMLE1BQU84cEIsRUFBUTdjLE1BQU05VCxPQUFTaXBHLEdBRWxENTZFLEdBQVNrZ0QsYUFBYzU5QyxFQUFTLEdBRWhDNjZELEdBQUkwZCxrQkFBbUIsS0FBTUYsRUFBTyxFQUFHLEVBQUd2dEUsRUFBU24vQixFQUFHbS9CLEVBQVNqL0IsRUFBR3VELEVBQU9DLEdBRXpFdzRELEVBQU11eUIsaUJBSVBwdkYsS0FBS3d0RyxxQkFBdUIsU0FBVzF0RSxFQUFVMnRFLEVBQVlDLEVBQVlMLEVBQVEsR0FFaEYsTUFBTWpwRyxFQUFRcXBHLEVBQVd0MUYsTUFBTS9ULE1BQ3pCQyxFQUFTb3BHLEVBQVd0MUYsTUFBTTlULE9BQzFCMnNGLEVBQVdsQixHQUFNM2pFLFFBQVN1aEYsRUFBV3A4RSxRQUNyQzIvRCxFQUFTbkIsR0FBTTNqRSxRQUFTdWhGLEVBQVc3MkYsTUFFekM2YixHQUFTa2dELGFBQWM4NkIsRUFBWSxHQUluQzdkLEdBQUk2RCxZQUFhLE1BQU9nYSxFQUFXMTdFLE9BQ25DNjlELEdBQUk2RCxZQUFhLE1BQU9nYSxFQUFXMzdFLGtCQUNuQzg5RCxHQUFJNkQsWUFBYSxLQUFNZ2EsRUFBV3o3RSxpQkFFN0J3N0UsRUFBV2g5RSxjQUVmby9ELEdBQUlKLGNBQWUsS0FBTTRkLEVBQU92dEUsRUFBU24vQixFQUFHbS9CLEVBQVNqL0IsRUFBR3VELEVBQU9DLEVBQVEyc0YsRUFBVUMsRUFBUXdjLEVBQVd0MUYsTUFBTUgsTUFJckd5MUYsRUFBV3JjLG9CQUVmdkIsR0FBSUYsd0JBQXlCLEtBQU0wZCxFQUFPdnRFLEVBQVNuL0IsRUFBR20vQixFQUFTai9CLEVBQUc0c0csRUFBVy83RSxRQUFTLEdBQUl0dEIsTUFBT3FwRyxFQUFXLzdFLFFBQVMsR0FBSXJ0QixPQUFRMnNGLEVBQVV5YyxFQUFXLzdFLFFBQVMsR0FBSTFaLE1BSW5LNjNFLEdBQUlKLGNBQWUsS0FBTTRkLEVBQU92dEUsRUFBU24vQixFQUFHbS9CLEVBQVNqL0IsRUFBR213RixFQUFVQyxFQUFRd2MsRUFBV3QxRixPQU94RSxJQUFWazFGLEdBQWVLLEVBQVc1N0UsaUJBQWtCKzlELEdBQUlnQixlQUFnQixNQUVyRWgwQixFQUFNdXlCLGlCQUlQcHZGLEtBQUsydEcsdUJBQXlCLFNBQVdDLEVBQVc5dEUsRUFBVTJ0RSxFQUFZQyxFQUFZTCxFQUFRLEdBRTdGLEdBQUtySCxFQUFNbUMsaUJBR1YsWUFEQXhsRyxRQUFRdWhCLEtBQU0sNkVBS2YsTUFBTTlmLEVBQVF3cEcsRUFBVTduRyxJQUFJcEYsRUFBSWl0RyxFQUFVcm5HLElBQUk1RixFQUFJLEVBQzVDMEQsRUFBU3VwRyxFQUFVN25HLElBQUlsRixFQUFJK3NHLEVBQVVybkcsSUFBSTFGLEVBQUksRUFDN0NnMEIsRUFBUSs0RSxFQUFVN25HLElBQUk3RSxFQUFJMHNHLEVBQVVybkcsSUFBSXJGLEVBQUksRUFDNUM4dkYsRUFBV2xCLEdBQU0zakUsUUFBU3VoRixFQUFXcDhFLFFBQ3JDMi9ELEVBQVNuQixHQUFNM2pFLFFBQVN1aEYsRUFBVzcyRixNQUN6QyxJQUFJZzNGLEVBRUosR0FBS0gsRUFBVzkzRSxnQkFFZmxELEdBQVNvZ0QsYUFBYzQ2QixFQUFZLEdBQ25DRyxFQUFXLFVBRUwsS0FBS0gsRUFBV2o0RSxtQkFRdEIsWUFEQTl5QixRQUFRdWhCLEtBQU0sK0dBTGR3TyxHQUFTd2dELGtCQUFtQnc2QixFQUFZLEdBQ3hDRyxFQUFXLE1BU1poZSxHQUFJNkQsWUFBYSxNQUFPZ2EsRUFBVzE3RSxPQUNuQzY5RCxHQUFJNkQsWUFBYSxNQUFPZ2EsRUFBVzM3RSxrQkFDbkM4OUQsR0FBSTZELFlBQWEsS0FBTWdhLEVBQVd6N0UsaUJBRWxDLE1BQU02N0UsRUFBZWplLEdBQUl2dkQsYUFBYyxNQUNqQ3l0RSxFQUFvQmxlLEdBQUl2dkQsYUFBYyxPQUN0QzB0RSxFQUFtQm5lLEdBQUl2dkQsYUFBYyxNQUNyQzJ0RSxFQUFpQnBlLEdBQUl2dkQsYUFBYyxNQUNuQzR0RSxFQUFtQnJlLEdBQUl2dkQsYUFBYyxPQUVyQ25vQixFQUFRczFGLEVBQVdyYyxvQkFBc0JxYyxFQUFXLzdFLFFBQVMsR0FBTSs3RSxFQUFXdDFGLE1BRXBGMDNFLEdBQUk2RCxZQUFhLEtBQU12N0UsRUFBTS9ULE9BQzdCeXJGLEdBQUk2RCxZQUFhLE1BQU92N0UsRUFBTTlULFFBQzlCd3JGLEdBQUk2RCxZQUFhLEtBQU1rYSxFQUFVcm5HLElBQUk1RixHQUNyQ2t2RixHQUFJNkQsWUFBYSxLQUFNa2EsRUFBVXJuRyxJQUFJMUYsR0FDckNndkYsR0FBSTZELFlBQWEsTUFBT2thLEVBQVVybkcsSUFBSXJGLEdBRWpDdXNHLEVBQVdoOUUsZUFBaUJnOUUsRUFBVzczRSxnQkFFM0NpNkQsR0FBSUgsY0FBZW1lLEVBQVVSLEVBQU92dEUsRUFBU24vQixFQUFHbS9CLEVBQVNqL0IsRUFBR2kvQixFQUFTNStCLEVBQUdrRCxFQUFPQyxFQUFRd3dCLEVBQU9tOEQsRUFBVUMsRUFBUTk0RSxFQUFNSCxNQUlqSHkxRixFQUFXcmMscUJBRWZ6dUYsUUFBUXVoQixLQUFNLDJGQUNkMnJFLEdBQUlzZSx3QkFBeUJOLEVBQVVSLEVBQU92dEUsRUFBU24vQixFQUFHbS9CLEVBQVNqL0IsRUFBR2kvQixFQUFTNStCLEVBQUdrRCxFQUFPQyxFQUFRd3dCLEVBQU9tOEQsRUFBVTc0RSxFQUFNSCxPQUl4SDYzRSxHQUFJSCxjQUFlbWUsRUFBVVIsRUFBT3Z0RSxFQUFTbi9CLEVBQUdtL0IsRUFBU2ovQixFQUFHaS9CLEVBQVM1K0IsRUFBR2tELEVBQU9DLEVBQVF3d0IsRUFBT204RCxFQUFVQyxFQUFROTRFLEdBTWxIMDNFLEdBQUk2RCxZQUFhLEtBQU1vYSxHQUN2QmplLEdBQUk2RCxZQUFhLE1BQU9xYSxHQUN4QmxlLEdBQUk2RCxZQUFhLEtBQU1zYSxHQUN2Qm5lLEdBQUk2RCxZQUFhLEtBQU11YSxHQUN2QnBlLEdBQUk2RCxZQUFhLE1BQU93YSxHQUdULElBQVZiLEdBQWVLLEVBQVc1N0UsaUJBQWtCKzlELEdBQUlnQixlQUFnQmdkLEdBRXJFaHhDLEVBQU11eUIsaUJBSVBwdkYsS0FBS3F6RixZQUFjLFNBQVdyK0QsR0FFN0J0QyxHQUFTa2dELGFBQWM1OUMsRUFBUyxHQUVoQzZuQyxFQUFNdXlCLGlCQUlQcHZGLEtBQUtvdUcsV0FBYSxXQUVqQmxJLEVBQXlCLEVBQ3pCQyxFQUE0QixFQUM1QkMsRUFBdUIsS0FFdkJ2cEMsRUFBTXR3RCxRQUNOaXlELEdBQWNqeUQsU0FJb0Isb0JBQXZCOGhHLG9CQUVYQSxtQkFBbUJ0ckcsY0FBZSxJQUFJRixZQUFhLFVBQVcsQ0FBRXlyRyxPQUFRdHVHLFFBTTFFMGtHLEdBQWNubEcsVUFBVWd2RyxpQkFBa0IsRUFFMUMsY0FBNkI3SixLQUVkbmxHLFVBQVU0b0csa0JBQW1CLEVBRTVDLE1BQU1xRyxHQUVMN2xHLFlBQWExQyxFQUFPZzlGLEVBQVUsT0FFN0JqakcsS0FBS3FXLEtBQU8sR0FFWnJXLEtBQUtpRyxNQUFRLElBQUkrbUIsR0FBTy9tQixHQUN4QmpHLEtBQUtpakcsUUFBVUEsRUFJaEJsL0UsUUFFQyxPQUFPLElBQUl5cUYsR0FBU3h1RyxLQUFLaUcsTUFBT2pHLEtBQUtpakcsU0FJdENyM0YsU0FFQyxNQUFPLENBQ05pTCxLQUFNLFVBQ041USxNQUFPakcsS0FBS2lHLE1BQU1rb0IsU0FDbEI4MEUsUUFBU2pqRyxLQUFLaWpHLFVBT2pCdUwsR0FBUWp2RyxVQUFVd2hGLFdBQVksRUFFOUIsTUFBTTB0QixHQUVMOWxHLFlBQWExQyxFQUFPbWxDLEVBQU8sRUFBR0MsRUFBTSxLQUVuQ3JyQyxLQUFLcVcsS0FBTyxHQUVaclcsS0FBS2lHLE1BQVEsSUFBSSttQixHQUFPL21CLEdBRXhCakcsS0FBS29yQyxLQUFPQSxFQUNacHJDLEtBQUtxckMsSUFBTUEsRUFJWnRuQixRQUVDLE9BQU8sSUFBSTBxRixHQUFLenVHLEtBQUtpRyxNQUFPakcsS0FBS29yQyxLQUFNcHJDLEtBQUtxckMsS0FJN0N6L0IsU0FFQyxNQUFPLENBQ05pTCxLQUFNLE1BQ041USxNQUFPakcsS0FBS2lHLE1BQU1rb0IsU0FDbEJpZCxLQUFNcHJDLEtBQUtvckMsS0FDWEMsSUFBS3JyQyxLQUFLcXJDLE1BT2JvakUsR0FBSWx2RyxVQUFVeWpHLE9BQVEsRUFFdEIsTUFBTTBMLFdBQWNqaEUsR0FFbkI5a0MsY0FFQzhvQixRQUVBenhCLEtBQUs2VyxLQUFPLFFBRVo3VyxLQUFLMHhDLFdBQWEsS0FDbEIxeEMsS0FBSzJ4QyxZQUFjLEtBQ25CM3hDLEtBQUt3MUMsSUFBTSxLQUVYeDFDLEtBQUt1bkcsaUJBQW1CLEtBRXhCdm5HLEtBQUtrcEYsWUFBYSxFQUVpQixvQkFBdkJtbEIsb0JBRVhBLG1CQUFtQnRyRyxjQUFlLElBQUlGLFlBQWEsVUFBVyxDQUFFeXJHLE9BQVF0dUcsUUFNMUVna0IsS0FBTStJLEVBQVE2bEIsR0FhYixPQVhBbmhCLE1BQU16TixLQUFNK0ksRUFBUTZsQixHQUVPLE9BQXRCN2xCLEVBQU8ya0IsYUFBc0IxeEMsS0FBSzB4QyxXQUFhM2tCLEVBQU8ya0IsV0FBVzN0QixTQUMxQyxPQUF2QmdKLEVBQU80a0IsY0FBdUIzeEMsS0FBSzJ4QyxZQUFjNWtCLEVBQU80a0IsWUFBWTV0QixTQUNyRCxPQUFmZ0osRUFBT3lvQixNQUFleDFDLEtBQUt3MUMsSUFBTXpvQixFQUFPeW9CLElBQUl6eEIsU0FFaEIsT0FBNUJnSixFQUFPdzZFLG1CQUE0QnZuRyxLQUFLdW5HLGlCQUFtQng2RSxFQUFPdzZFLGlCQUFpQnhqRixTQUV4Ri9qQixLQUFLa3BGLFdBQWFuOEQsRUFBT204RCxXQUN6QmxwRixLQUFLNnhCLGlCQUFtQjlFLEVBQU84RSxpQkFFeEI3eEIsS0FJUjRMLE9BQVF5a0IsR0FFUCxNQUFNclksRUFBT3laLE1BQU03bEIsT0FBUXlrQixHQUkzQixPQUZrQixPQUFicndCLEtBQUt3MUMsTUFBZXg5QixFQUFLZ25CLE9BQU93VyxJQUFNeDFDLEtBQUt3MUMsSUFBSTVwQyxVQUU3Q29NLEdBTVQwMkYsR0FBTW52RyxVQUFVa3lDLFNBQVUsRUFFMUIsTUFBTWs5RCxHQUVMaG1HLFlBQWErWixFQUFPMi9CLEdBRW5CcmlELEtBQUswaUIsTUFBUUEsRUFDYjFpQixLQUFLcWlELE9BQVNBLEVBQ2RyaUQsS0FBSzgxQixXQUFrQnRXLElBQVZrRCxFQUFzQkEsRUFBTTVqQixPQUFTdWpELEVBQVMsRUFFM0RyaUQsS0FBS3c4QyxNQUFRMTZCLEVBQ2I5aEIsS0FBS3k4QyxZQUFjLENBQUVqMkIsT0FBUSxFQUFHc1AsT0FBUyxHQUV6QzkxQixLQUFLbXdCLFFBQVUsRUFFZm53QixLQUFLa3dCLEtBQU9wTixJQUliNDVCLG9CQUVJdHNCLGdCQUFhcHhCLElBRUQsSUFBVkEsR0FBaUJnQixLQUFLbXdCLFVBSTVCd3NCLFNBQVUzOUMsR0FJVCxPQUZBZ0IsS0FBS3c4QyxNQUFReDlDLEVBRU5nQixLQUlSZ2tCLEtBQU0rSSxHQU9MLE9BTEEvc0IsS0FBSzBpQixNQUFRLElBQUlxSyxFQUFPckssTUFBTS9aLFlBQWFva0IsRUFBT3JLLE9BQ2xEMWlCLEtBQUs4MUIsTUFBUS9JLEVBQU8rSSxNQUNwQjkxQixLQUFLcWlELE9BQVN0MUIsRUFBT3MxQixPQUNyQnJpRCxLQUFLdzhDLE1BQVF6dkIsRUFBT3l2QixNQUVieDhDLEtBSVI0OEMsT0FBUUMsRUFBUWwyQixFQUFXbTJCLEdBRTFCRCxHQUFVNzhDLEtBQUtxaUQsT0FDZnZGLEdBQVVuMkIsRUFBVTA3QixPQUVwQixJQUFNLElBQUl2aEQsRUFBSSxFQUFHVyxFQUFJekIsS0FBS3FpRCxPQUFRdmhELEVBQUlXLEVBQUdYLElBRXhDZCxLQUFLMGlCLE1BQU9tNkIsRUFBUy83QyxHQUFNNmxCLEVBQVVqRSxNQUFPbzZCLEVBQVNoOEMsR0FJdEQsT0FBT2QsS0FJUjJNLElBQUszTixFQUFPd25CLEVBQVMsR0FJcEIsT0FGQXhtQixLQUFLMGlCLE1BQU0vVixJQUFLM04sRUFBT3duQixHQUVoQnhtQixLQUlSK2pCLE1BQU8vTCxRQUVxQndILElBQXRCeEgsRUFBSzQyRixlQUVUNTJGLEVBQUs0MkYsYUFBZSxTQUlZcHZGLElBQTVCeGYsS0FBSzBpQixNQUFNdlcsT0FBTzBpRyxRQUV0Qjd1RyxLQUFLMGlCLE1BQU12VyxPQUFPMGlHLE1BQVEvckYsVUFJMkJ0RCxJQUFqRHhILEVBQUs0MkYsYUFBYzV1RyxLQUFLMGlCLE1BQU12VyxPQUFPMGlHLFNBRXpDNzJGLEVBQUs0MkYsYUFBYzV1RyxLQUFLMGlCLE1BQU12VyxPQUFPMGlHLE9BQVU3dUcsS0FBSzBpQixNQUFNNVcsTUFBTyxHQUFJSyxRQUl0RSxNQUFNdVcsRUFBUSxJQUFJMWlCLEtBQUswaUIsTUFBTS9aLFlBQWFxUCxFQUFLNDJGLGFBQWM1dUcsS0FBSzBpQixNQUFNdlcsT0FBTzBpRyxRQUV6RTdnRyxFQUFLLElBQUloTyxLQUFLMkksWUFBYStaLEVBQU8xaUIsS0FBS3FpRCxRQUc3QyxPQUZBcjBDLEVBQUcydUMsU0FBVTM4QyxLQUFLdzhDLE9BRVh4dUMsRUFJUnl2QyxTQUFVOWlCLEdBSVQsT0FGQTM2QixLQUFLMDhDLGlCQUFtQi9oQixFQUVqQjM2QixLQUlSNEwsT0FBUW9NLEdBd0JQLFlBdEIyQndILElBQXRCeEgsRUFBSzQyRixlQUVUNTJGLEVBQUs0MkYsYUFBZSxTQU1ZcHZGLElBQTVCeGYsS0FBSzBpQixNQUFNdlcsT0FBTzBpRyxRQUV0Qjd1RyxLQUFLMGlCLE1BQU12VyxPQUFPMGlHLE1BQVEvckYsVUFJMkJ0RCxJQUFqRHhILEVBQUs0MkYsYUFBYzV1RyxLQUFLMGlCLE1BQU12VyxPQUFPMGlHLFNBRXpDNzJGLEVBQUs0MkYsYUFBYzV1RyxLQUFLMGlCLE1BQU12VyxPQUFPMGlHLE9BQVV2dkcsTUFBTUMsVUFBVXVNLE1BQU1sTCxLQUFNLElBQUlnckIsWUFBYTVyQixLQUFLMGlCLE1BQU12VyxVQU1qRyxDQUNOK2pCLEtBQU1sd0IsS0FBS2t3QixLQUNYL2pCLE9BQVFuTSxLQUFLMGlCLE1BQU12VyxPQUFPMGlHLE1BQzFCaDRGLEtBQU03VyxLQUFLMGlCLE1BQU0vWixZQUFZME4sS0FDN0Jnc0MsT0FBUXJpRCxLQUFLcWlELFNBT2hCc3NELEdBQWtCcHZHLFVBQVV1dkcscUJBQXNCLEVBRWxELE1BQU1DLEdBQTBCLElBQUlsMEUsR0FFcEMsTUFBTW0wRSxHQUVMcm1HLFlBQWFzbUcsRUFBbUIxeUQsRUFBVS8xQixFQUFRMkksR0FBYSxHQUU5RG52QixLQUFLcVcsS0FBTyxHQUVaclcsS0FBS2dZLEtBQU9pM0YsRUFDWmp2RyxLQUFLdThDLFNBQVdBLEVBQ2hCdjhDLEtBQUt3bUIsT0FBU0EsRUFFZHhtQixLQUFLbXZCLFlBQTRCLElBQWZBLEVBSWYyRyxZQUVILE9BQU85MUIsS0FBS2dZLEtBQUs4ZCxNQUlkcFQsWUFFSCxPQUFPMWlCLEtBQUtnWSxLQUFLMEssTUFJZDBOLGdCQUFhcHhCLEdBRWhCZ0IsS0FBS2dZLEtBQUtvWSxZQUFjcHhCLEVBSXpCcTBCLGFBQWNweUIsR0FFYixJQUFNLElBQUlILEVBQUksRUFBR1csRUFBSXpCLEtBQUtnWSxLQUFLOGQsTUFBT2gxQixFQUFJVyxFQUFHWCxJQUU1Q2l1RyxHQUFVcm9GLG9CQUFxQjFtQixLQUFNYyxHQUVyQ2l1RyxHQUFVMTdFLGFBQWNweUIsR0FFeEJqQixLQUFLdTlDLE9BQVF6OEMsRUFBR2l1RyxHQUFVcHVHLEVBQUdvdUcsR0FBVWx1RyxFQUFHa3VHLEdBQVU3dEcsR0FJckQsT0FBT2xCLEtBSVJtN0Isa0JBQW1CbDZCLEdBRWxCLElBQU0sSUFBSUgsRUFBSSxFQUFHVyxFQUFJekIsS0FBSzgxQixNQUFPaDFCLEVBQUlXLEVBQUdYLElBRXZDaXVHLEdBQVVyb0Ysb0JBQXFCMW1CLEtBQU1jLEdBRXJDaXVHLEdBQVU1ekUsa0JBQW1CbDZCLEdBRTdCakIsS0FBS3U5QyxPQUFRejhDLEVBQUdpdUcsR0FBVXB1RyxFQUFHb3VHLEdBQVVsdUcsRUFBR2t1RyxHQUFVN3RHLEdBSXJELE9BQU9sQixLQUlSbThCLG1CQUFvQmw3QixHQUVuQixJQUFNLElBQUlILEVBQUksRUFBR1csRUFBSXpCLEtBQUs4MUIsTUFBT2gxQixFQUFJVyxFQUFHWCxJQUV2Q2l1RyxHQUFVcm9GLG9CQUFxQjFtQixLQUFNYyxHQUVyQ2l1RyxHQUFVNXlFLG1CQUFvQmw3QixHQUU5QmpCLEtBQUt1OUMsT0FBUXo4QyxFQUFHaXVHLEdBQVVwdUcsRUFBR291RyxHQUFVbHVHLEVBQUdrdUcsR0FBVTd0RyxHQUlyRCxPQUFPbEIsS0FJUjJqQixLQUFNL2MsRUFBT2pHLEdBSVosT0FGQVgsS0FBS2dZLEtBQUswSyxNQUFPOWIsRUFBUTVHLEtBQUtnWSxLQUFLcXFDLE9BQVNyaUQsS0FBS3dtQixRQUFXN2xCLEVBRXJEWCxLQUlSNGpCLEtBQU1oZCxFQUFPL0YsR0FJWixPQUZBYixLQUFLZ1ksS0FBSzBLLE1BQU85YixFQUFRNUcsS0FBS2dZLEtBQUtxcUMsT0FBU3JpRCxLQUFLd21CLE9BQVMsR0FBTTNsQixFQUV6RGIsS0FJUm16QixLQUFNdnNCLEVBQU8xRixHQUlaLE9BRkFsQixLQUFLZ1ksS0FBSzBLLE1BQU85YixFQUFRNUcsS0FBS2dZLEtBQUtxcUMsT0FBU3JpRCxLQUFLd21CLE9BQVMsR0FBTXRsQixFQUV6RGxCLEtBSVJvekIsS0FBTXhzQixFQUFPckcsR0FJWixPQUZBUCxLQUFLZ1ksS0FBSzBLLE1BQU85YixFQUFRNUcsS0FBS2dZLEtBQUtxcUMsT0FBU3JpRCxLQUFLd21CLE9BQVMsR0FBTWptQixFQUV6RFAsS0FJUjRtQixLQUFNaGdCLEdBRUwsT0FBTzVHLEtBQUtnWSxLQUFLMEssTUFBTzliLEVBQVE1RyxLQUFLZ1ksS0FBS3FxQyxPQUFTcmlELEtBQUt3bUIsUUFJekRLLEtBQU1qZ0IsR0FFTCxPQUFPNUcsS0FBS2dZLEtBQUswSyxNQUFPOWIsRUFBUTVHLEtBQUtnWSxLQUFLcXFDLE9BQVNyaUQsS0FBS3dtQixPQUFTLEdBSWxFMEksS0FBTXRvQixHQUVMLE9BQU81RyxLQUFLZ1ksS0FBSzBLLE1BQU85YixFQUFRNUcsS0FBS2dZLEtBQUtxcUMsT0FBU3JpRCxLQUFLd21CLE9BQVMsR0FJbEVrTyxLQUFNOXRCLEdBRUwsT0FBTzVHLEtBQUtnWSxLQUFLMEssTUFBTzliLEVBQVE1RyxLQUFLZ1ksS0FBS3FxQyxPQUFTcmlELEtBQUt3bUIsT0FBUyxHQUlsRTgyQixNQUFPMTJDLEVBQU9qRyxFQUFHRSxHQU9oQixPQUxBK0YsRUFBUUEsRUFBUTVHLEtBQUtnWSxLQUFLcXFDLE9BQVNyaUQsS0FBS3dtQixPQUV4Q3htQixLQUFLZ1ksS0FBSzBLLE1BQU85YixFQUFRLEdBQU1qRyxFQUMvQlgsS0FBS2dZLEtBQUswSyxNQUFPOWIsRUFBUSxHQUFNL0YsRUFFeEJiLEtBSVJ1OUMsT0FBUTMyQyxFQUFPakcsRUFBR0UsRUFBR0ssR0FRcEIsT0FOQTBGLEVBQVFBLEVBQVE1RyxLQUFLZ1ksS0FBS3FxQyxPQUFTcmlELEtBQUt3bUIsT0FFeEN4bUIsS0FBS2dZLEtBQUswSyxNQUFPOWIsRUFBUSxHQUFNakcsRUFDL0JYLEtBQUtnWSxLQUFLMEssTUFBTzliLEVBQVEsR0FBTS9GLEVBQy9CYixLQUFLZ1ksS0FBSzBLLE1BQU85YixFQUFRLEdBQU0xRixFQUV4QmxCLEtBSVJ3OUMsUUFBUzUyQyxFQUFPakcsRUFBR0UsRUFBR0ssRUFBR1gsR0FTeEIsT0FQQXFHLEVBQVFBLEVBQVE1RyxLQUFLZ1ksS0FBS3FxQyxPQUFTcmlELEtBQUt3bUIsT0FFeEN4bUIsS0FBS2dZLEtBQUswSyxNQUFPOWIsRUFBUSxHQUFNakcsRUFDL0JYLEtBQUtnWSxLQUFLMEssTUFBTzliLEVBQVEsR0FBTS9GLEVBQy9CYixLQUFLZ1ksS0FBSzBLLE1BQU85YixFQUFRLEdBQU0xRixFQUMvQmxCLEtBQUtnWSxLQUFLMEssTUFBTzliLEVBQVEsR0FBTXJHLEVBRXhCUCxLQUlSK2pCLE1BQU8vTCxHQUVOLFFBQWN3SCxJQUFUeEgsRUFBcUIsQ0FFekJyVixRQUFRZ04sSUFBSyxtSEFFYixNQUFNK1MsRUFBUSxHQUVkLElBQU0sSUFBSTVoQixFQUFJLEVBQUdBLEVBQUlkLEtBQUs4MUIsTUFBT2gxQixJQUFPLENBRXZDLE1BQU04RixFQUFROUYsRUFBSWQsS0FBS2dZLEtBQUtxcUMsT0FBU3JpRCxLQUFLd21CLE9BRTFDLElBQU0sSUFBSXhsQixFQUFJLEVBQUdBLEVBQUloQixLQUFLdThDLFNBQVV2N0MsSUFFbkMwaEIsRUFBTWxnQixLQUFNeEMsS0FBS2dZLEtBQUswSyxNQUFPOWIsRUFBUTVGLElBTXZDLE9BQU8sSUFBSXM3QyxHQUFpQixJQUFJdDhDLEtBQUswaUIsTUFBTS9aLFlBQWErWixHQUFTMWlCLEtBQUt1OEMsU0FBVXY4QyxLQUFLbXZCLFlBZ0JyRixZQVppQzNQLElBQTVCeEgsRUFBS2szRixxQkFFVGwzRixFQUFLazNGLG1CQUFxQixTQUl3QjF2RixJQUE5Q3hILEVBQUtrM0YsbUJBQW9CbHZHLEtBQUtnWSxLQUFLa1ksUUFFdkNsWSxFQUFLazNGLG1CQUFvQmx2RyxLQUFLZ1ksS0FBS2tZLE1BQVNsd0IsS0FBS2dZLEtBQUsrTCxNQUFPL0wsSUFJdkQsSUFBSWczRixHQUE0QmgzRixFQUFLazNGLG1CQUFvQmx2RyxLQUFLZ1ksS0FBS2tZLE1BQVFsd0IsS0FBS3U4QyxTQUFVdjhDLEtBQUt3bUIsT0FBUXhtQixLQUFLbXZCLFlBTXJIdmpCLE9BQVFvTSxHQUVQLFFBQWN3SCxJQUFUeEgsRUFBcUIsQ0FFekJyVixRQUFRZ04sSUFBSyx3SEFFYixNQUFNK1MsRUFBUSxHQUVkLElBQU0sSUFBSTVoQixFQUFJLEVBQUdBLEVBQUlkLEtBQUs4MUIsTUFBT2gxQixJQUFPLENBRXZDLE1BQU04RixFQUFROUYsRUFBSWQsS0FBS2dZLEtBQUtxcUMsT0FBU3JpRCxLQUFLd21CLE9BRTFDLElBQU0sSUFBSXhsQixFQUFJLEVBQUdBLEVBQUloQixLQUFLdThDLFNBQVV2N0MsSUFFbkMwaEIsRUFBTWxnQixLQUFNeEMsS0FBS2dZLEtBQUswSyxNQUFPOWIsRUFBUTVGLElBUXZDLE1BQU8sQ0FDTnU3QyxTQUFVdjhDLEtBQUt1OEMsU0FDZjFsQyxLQUFNN1csS0FBSzBpQixNQUFNL1osWUFBWTBOLEtBQzdCcU0sTUFBT0EsRUFDUHlNLFdBQVludkIsS0FBS212QixZQW1CbEIsWUFaaUMzUCxJQUE1QnhILEVBQUtrM0YscUJBRVRsM0YsRUFBS2szRixtQkFBcUIsU0FJd0IxdkYsSUFBOUN4SCxFQUFLazNGLG1CQUFvQmx2RyxLQUFLZ1ksS0FBS2tZLFFBRXZDbFksRUFBS2szRixtQkFBb0JsdkcsS0FBS2dZLEtBQUtrWSxNQUFTbHdCLEtBQUtnWSxLQUFLcE0sT0FBUW9NLElBSXhELENBQ05vcUMsOEJBQThCLEVBQzlCN0YsU0FBVXY4QyxLQUFLdThDLFNBQ2Z2a0MsS0FBTWhZLEtBQUtnWSxLQUFLa1ksS0FDaEIxSixPQUFReG1CLEtBQUt3bUIsT0FDYjJJLFdBQVludkIsS0FBS212QixhQVNyQjYvRSxHQUEyQnp2RyxVQUFVNmlELDhCQUErQixFQUVwRSxNQUFNNjlCLFdBQXVCMXFDLEdBRTVCNXNDLFlBQWFvcEMsR0FFWnRnQixRQUVBenhCLEtBQUs2VyxLQUFPLGlCQUVaN1csS0FBS2lHLE1BQVEsSUFBSSttQixHQUFPLFVBRXhCaHRCLEtBQUtvUyxJQUFNLEtBRVhwUyxLQUFLdTVDLFNBQVcsS0FFaEJ2NUMsS0FBSzRILFNBQVcsRUFFaEI1SCxLQUFLczdDLGlCQUFrQixFQUV2QnQ3QyxLQUFLNjFDLGFBQWMsRUFFbkI3MUMsS0FBS2k0QyxVQUFXbEcsR0FJakIvdEIsS0FBTStJLEdBY0wsT0FaQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLaUcsTUFBTStkLEtBQU0rSSxFQUFPOW1CLE9BRXhCakcsS0FBS29TLElBQU0yYSxFQUFPM2EsSUFFbEJwUyxLQUFLdTVDLFNBQVd4c0IsRUFBT3dzQixTQUV2QnY1QyxLQUFLNEgsU0FBV21sQixFQUFPbmxCLFNBRXZCNUgsS0FBS3M3QyxnQkFBa0J2dUIsRUFBT3V1QixnQkFFdkJ0N0MsTUFRVCxJQUFJbXZHLEdBRkpsdkIsR0FBZTFnRixVQUFVZ2xHLGtCQUFtQixFQUk1QyxNQUFNNkssR0FBZ0MsSUFBSXYwRSxHQUNwQ3cwRSxHQUE0QixJQUFJeDBFLEdBQ2hDeTBFLEdBQTRCLElBQUl6MEUsR0FFaEMwMEUsR0FBaUMsSUFBSS9yRixFQUNyQ2dzRixHQUFpQyxJQUFJaHNGLEVBQ3JDaXNGLEdBQWlDLElBQUlqcEUsR0FFckNrcEUsR0FBb0IsSUFBSTcwRSxHQUN4QjgwRSxHQUFvQixJQUFJOTBFLEdBQ3hCKzBFLEdBQW9CLElBQUkvMEUsR0FFeEJnMUUsR0FBcUIsSUFBSXJzRixFQUN6QnNzRixHQUFxQixJQUFJdHNGLEVBQ3pCdXNGLEdBQXFCLElBQUl2c0YsRUErSC9CLFNBQVN3c0YsR0FBaUJDLEVBQWdCQyxFQUFZbnBGLEVBQVFnRSxFQUFPOUQsRUFBS0QsR0FHekV1b0YsR0FBaUJockYsV0FBWTByRixFQUFnQmxwRixHQUFTM0MsVUFBVyxJQUFNSyxTQUFVc0csUUFHcEV2TCxJQUFSeUgsR0FFSnVvRixHQUFpQjd1RyxFQUFNcW1CLEVBQU11b0YsR0FBaUI1dUcsRUFBUXNtQixFQUFNc29GLEdBQWlCMXVHLEVBQzdFMnVHLEdBQWlCM3VHLEVBQU1vbUIsRUFBTXNvRixHQUFpQjV1RyxFQUFRcW1CLEVBQU11b0YsR0FBaUIxdUcsR0FJN0UydUcsR0FBaUJ4ckYsS0FBTXVyRixJQUt4QlUsRUFBZWpzRixLQUFNa3NGLEdBQ3JCRCxFQUFldHZHLEdBQUs2dUcsR0FBaUI3dUcsRUFDckNzdkcsRUFBZXB2RyxHQUFLMnVHLEdBQWlCM3VHLEVBR3JDb3ZHLEVBQWU1OEUsYUFBY284RSxLQXBKOUIsY0FBcUJoaUUsR0FFcEI5a0MsWUFBYTBwQyxHQU1aLEdBSkE1Z0IsUUFFQXp4QixLQUFLNlcsS0FBTyxjQUVPMkksSUFBZDJ2RixHQUEwQixDQUU5QkEsR0FBWSxJQUFJN3dELEdBRWhCLE1BQU02eEQsRUFBZSxJQUFJeDhGLGFBQWMsRUFDcEMsSUFBTyxHQUFLLEVBQUcsRUFBRyxFQUNwQixJQUFPLEdBQUssRUFBRyxFQUFHLEVBQ2xCLEdBQUssR0FBSyxFQUFHLEVBQUcsR0FDZCxHQUFLLEdBQUssRUFBRyxFQUFHLElBR2JzN0YsRUFBb0IsSUFBSU4sR0FBbUJ3QixFQUFjLEdBRS9EaEIsR0FBVXR3RCxTQUFVLENBQUUsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQ3JDc3dELEdBQVVoMUYsYUFBYyxXQUFZLElBQUk2MEYsR0FBNEJDLEVBQW1CLEVBQUcsR0FBRyxJQUM3RkUsR0FBVWgxRixhQUFjLEtBQU0sSUFBSTYwRixHQUE0QkMsRUFBbUIsRUFBRyxHQUFHLElBSXhGanZHLEtBQUs0L0IsU0FBV3V2RSxHQUNoQm52RyxLQUFLcXlDLGNBQTBCN3lCLElBQWI2eUIsRUFBMkJBLEVBQVcsSUFBSTR0QyxHQUU1RGpnRixLQUFLK21CLE9BQVMsSUFBSXZELEVBQVMsR0FBSyxJQUlqQzhzQixRQUFTNFQsRUFBV0MsR0FFTyxPQUFyQkQsRUFBVXJvQixRQUVkbDVCLFFBQVFDLE1BQU8seUZBSWhCeXNHLEdBQVkzeEUsbUJBQW9CMTlCLEtBQUtrOEIsYUFFckN1ekUsR0FBaUJ6ckYsS0FBTWtnQyxFQUFVcm9CLE9BQU9LLGFBQ3hDbDhCLEtBQUs0dEMsZ0JBQWdCdGxCLGlCQUFrQjQ3QixFQUFVcm9CLE9BQU9DLG1CQUFvQjk3QixLQUFLazhCLGFBRWpGb3pFLEdBQVk3eEUsc0JBQXVCejlCLEtBQUs0dEMsaUJBRW5Dc1csRUFBVXJvQixPQUFPeXRCLHNCQUF5RCxJQUFsQ3RwRCxLQUFLcXlDLFNBQVNpSixpQkFFMUQrekQsR0FBWTNxRixnQkFBa0I0cUYsR0FBWXB1RyxHQUkzQyxNQUFNMEcsRUFBVzVILEtBQUtxeUMsU0FBU3pxQyxTQUMvQixJQUFJcWYsRUFBS0QsRUFFUyxJQUFicGYsSUFFSm9mLEVBQU1ubkIsS0FBS21uQixJQUFLcGYsR0FDaEJxZixFQUFNcG5CLEtBQUtvbkIsSUFBS3JmLElBSWpCLE1BQU1tZixFQUFTL21CLEtBQUsrbUIsT0FFcEJpcEYsR0FBaUJOLEdBQUkvaUcsS0FBTyxJQUFPLEdBQUssR0FBSzJpRyxHQUFhdm9GLEVBQVFzb0YsR0FBYXBvRixFQUFLRCxHQUNwRmdwRixHQUFpQkwsR0FBSWhqRyxJQUFLLElBQU8sR0FBSyxHQUFLMmlHLEdBQWF2b0YsRUFBUXNvRixHQUFhcG9GLEVBQUtELEdBQ2xGZ3BGLEdBQWlCSixHQUFJampHLElBQUssR0FBSyxHQUFLLEdBQUsyaUcsR0FBYXZvRixFQUFRc29GLEdBQWFwb0YsRUFBS0QsR0FFaEY2b0YsR0FBS2xqRyxJQUFLLEVBQUcsR0FDYm1qRyxHQUFLbmpHLElBQUssRUFBRyxHQUNib2pHLEdBQUtwakcsSUFBSyxFQUFHLEdBR2IsSUFBSWsxQixFQUFZcWlCLEVBQVV0Z0IsSUFBSXFDLGtCQUFtQnlwRSxHQUFLQyxHQUFLQyxJQUFLLEVBQU9SLElBRXZFLEdBQW1CLE9BQWR2dEUsSUFHSm11RSxHQUFpQkwsR0FBSWhqRyxLQUFPLEdBQUssR0FBSyxHQUFLMmlHLEdBQWF2b0YsRUFBUXNvRixHQUFhcG9GLEVBQUtELEdBQ2xGOG9GLEdBQUtuakcsSUFBSyxFQUFHLEdBRWJrMUIsRUFBWXFpQixFQUFVdGdCLElBQUlxQyxrQkFBbUJ5cEUsR0FBS0UsR0FBS0QsSUFBSyxFQUFPUCxJQUNoRCxPQUFkdnRFLEdBRUosT0FNRixNQUFNcU4sRUFBV2dWLEVBQVV0Z0IsSUFBSUYsT0FBTzdkLFdBQVl1cEYsSUFFN0NsZ0UsRUFBV2dWLEVBQVU5WSxNQUFROEQsRUFBV2dWLEVBQVU3WSxLQUV2RDhZLEVBQVczaEQsS0FBTSxDQUVoQjBzQyxTQUFVQSxFQUNWM1AsTUFBTzZ2RSxHQUFnQnJyRixRQUN2QmlQLEdBQUl3Z0IsR0FBU3dCLE1BQU9vNkQsR0FBaUJNLEdBQUtDLEdBQUtDLEdBQUtDLEdBQU1DLEdBQU1DLEdBQU0sSUFBSXZzRixHQUMxRWloQyxLQUFNLEtBQ056bEIsT0FBUWgvQixPQU1WZ2tCLEtBQU0rSSxHQVFMLE9BTkEwRSxNQUFNek4sS0FBTStJLFFBRVd2TixJQUFsQnVOLEVBQU9oRyxRQUF1Qi9tQixLQUFLK21CLE9BQU8vQyxLQUFNK0ksRUFBT2hHLFFBRTVEL21CLEtBQUtxeUMsU0FBV3RsQixFQUFPc2xCLFNBRWhCcnlDLFFBTUZULFVBQVVvc0csVUFBVyxFQTJONUIsTUFBTXlFLEdBQThCLElBQUl2MUUsR0FFbEN3MUUsR0FBMkIsSUFBSW45RSxHQUMvQm85RSxHQUE0QixJQUFJcDlFLEdBRWhDcTlFLEdBQTBCLElBQUkxMUUsR0FDOUIyMUUsR0FBd0IsSUFBSWhxRSxHQUVsQyxNQUFNaXFFLFdBQW9CN3NELEdBRXpCajdDLFlBQWFpM0IsRUFBVXlTLEdBRXRCNWdCLE1BQU9tTyxFQUFVeVMsR0FFakJyeUMsS0FBSzZXLEtBQU8sY0FFWjdXLEtBQUtreUMsU0FBVyxXQUNoQmx5QyxLQUFLbXlDLFdBQWEsSUFBSTNMLEdBQ3RCeG1DLEtBQUswd0csa0JBQW9CLElBQUlscUUsR0FJOUJ4aUIsS0FBTStJLEdBVUwsT0FSQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLa3lDLFNBQVdubEIsRUFBT21sQixTQUN2Qmx5QyxLQUFLbXlDLFdBQVdudUIsS0FBTStJLEVBQU9vbEIsWUFDN0JueUMsS0FBSzB3RyxrQkFBa0Ixc0YsS0FBTStJLEVBQU8yakYsbUJBRXBDMXdHLEtBQUtveUMsU0FBV3JsQixFQUFPcWxCLFNBRWhCcHlDLEtBSVIyd0csS0FBTXYrRCxFQUFVRCxHQUVmbnlDLEtBQUtveUMsU0FBV0EsT0FFSTV5QixJQUFmMnlCLElBRUpueUMsS0FBSzB3QyxtQkFBbUIsR0FFeEIxd0MsS0FBS295QyxTQUFTdytELG9CQUVkeitELEVBQWFueUMsS0FBS2s4QixhQUluQmw4QixLQUFLbXlDLFdBQVdudUIsS0FBTW11QixHQUN0Qm55QyxLQUFLMHdHLGtCQUFrQjFzRixLQUFNbXVCLEdBQWF0b0IsU0FJM0NxekUsT0FFQ2w5RixLQUFLb3lDLFNBQVM4cUQsT0FJZjJULHVCQUVDLE1BQU1weEUsRUFBUyxJQUFJdk0sR0FFYjQ5RSxFQUFhOXdHLEtBQUs0L0IsU0FBU0MsV0FBV2l4RSxXQUU1QyxJQUFNLElBQUlod0csRUFBSSxFQUFHVyxFQUFJcXZHLEVBQVdoN0UsTUFBT2gxQixFQUFJVyxFQUFHWCxJQUFPLENBRXBEMitCLEVBQU8vWSxvQkFBcUJvcUYsRUFBWWh3RyxHQUV4QyxNQUFNaXFCLEVBQVEsRUFBTTBVLEVBQU9oYSxrQkFFdEJzRixJQUFVaGIsRUFBQUEsRUFFZDB2QixFQUFPL2EsZUFBZ0JxRyxHQUl2QjBVLEVBQU85eUIsSUFBSyxFQUFHLEVBQUcsRUFBRyxHQUl0Qm1rRyxFQUFXdHpELFFBQVMxOEMsRUFBRzIrQixFQUFPOStCLEVBQUc4K0IsRUFBTzUrQixFQUFHNCtCLEVBQU92K0IsRUFBR3UrQixFQUFPbC9CLElBTTlEbXdDLGtCQUFtQkMsR0FFbEJsZixNQUFNaWYsa0JBQW1CQyxHQUVGLGFBQWxCM3dDLEtBQUtreUMsU0FFVGx5QyxLQUFLMHdHLGtCQUFrQjFzRixLQUFNaGtCLEtBQUtrOEIsYUFBY3JTLFNBRW5CLGFBQWxCN3BCLEtBQUtreUMsU0FFaEJseUMsS0FBSzB3RyxrQkFBa0Ixc0YsS0FBTWhrQixLQUFLbXlDLFlBQWF0b0IsU0FJL0NsbkIsUUFBUXVoQixLQUFNLDZDQUErQ2xrQixLQUFLa3lDLFVBTXBFMlMsY0FBZWorQyxFQUFPNmIsR0FFckIsTUFBTTJ2QixFQUFXcHlDLEtBQUtveUMsU0FDaEJ4UyxFQUFXNS9CLEtBQUs0L0IsU0FFdEJ5d0UsR0FBVzNwRixvQkFBcUJrWixFQUFTQyxXQUFXa3hFLFVBQVducUcsR0FDL0QwcEcsR0FBWTVwRixvQkFBcUJrWixFQUFTQyxXQUFXaXhFLFdBQVlscUcsR0FFakV3cEcsR0FBY3BzRixLQUFNdkIsR0FBUzRRLGFBQWNyekIsS0FBS215QyxZQUVoRDF2QixFQUFPOVYsSUFBSyxFQUFHLEVBQUcsR0FFbEIsSUFBTSxJQUFJN0wsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQU8sQ0FFOUIsTUFBTTBxRSxFQUFTOGtDLEdBQVl4c0YsYUFBY2hqQixHQUV6QyxHQUFnQixJQUFYMHFFLEVBQWUsQ0FFbkIsTUFBTXdsQyxFQUFZWCxHQUFXdnNGLGFBQWNoakIsR0FFM0MwdkcsR0FBUWxvRixpQkFBa0I4cEIsRUFBU2l1QyxNQUFPMndCLEdBQVk5MEUsWUFBYWtXLEVBQVM2K0QsYUFBY0QsSUFFMUZ2dUYsRUFBTzRCLGdCQUFpQmtzRixHQUFVdnNGLEtBQU1vc0YsSUFBZ0IvOEUsYUFBY205RSxJQUFXaGxDLElBTW5GLE9BQU8vb0QsRUFBTzRRLGFBQWNyekIsS0FBSzB3RyxvQkFNbkNELEdBQVlseEcsVUFBVTB5QyxlQUFnQixHQUV0QyxjQUFtQnhFLEdBRWxCOWtDLGNBRUM4b0IsUUFFQXp4QixLQUFLNlcsS0FBTyxVQU1UdFgsVUFBVTJ4RyxRQUFTLEdBRXhCLGNBQTBCcGdGLEdBRXpCbm9CLFlBQWFxUCxFQUFPLEtBQU01VCxFQUFRLEVBQUdDLEVBQVMsRUFBR2l0QixFQUFRemEsRUFBTW1hLEVBQVNFLEVBQU9DLEVBQU9DLEVBQVlqUixLQUFla1IsRUFBWWxSLEtBQWVvUixFQUFZQyxHQUV2SkMsTUFBTyxLQUFNVCxFQUFTRSxFQUFPQyxFQUFPQyxFQUFXQyxFQUFXQyxFQUFRemEsRUFBTTBhLEVBQVlDLEdBRXBGeHhCLEtBQUttWSxNQUFRLENBQUVILEtBQU1BLEVBQU01VCxNQUFPQSxFQUFPQyxPQUFRQSxHQUVqRHJFLEtBQUs4eEIsaUJBQWtCLEVBQ3ZCOXhCLEtBQUtneUIsT0FBUSxFQUNiaHlCLEtBQUtpeUIsZ0JBQWtCLEtBTWIxeUIsVUFBVWt4QixlQUFnQixFQWlSdEMsTUFBTTBnRixXQUFpQzcwRCxHQUV0QzN6QyxZQUFhK1osRUFBTzY1QixFQUFVcHRCLEVBQVl3d0MsRUFBbUIsR0FFakMsaUJBQWZ4d0MsSUFFWHd3QyxFQUFtQnh3QyxFQUVuQkEsR0FBYSxFQUVieHNCLFFBQVFDLE1BQU8sa0dBSWhCNnVCLE1BQU8vTyxFQUFPNjVCLEVBQVVwdEIsR0FFeEJudkIsS0FBSzIvRCxpQkFBbUJBLEVBSXpCMzdDLEtBQU0rSSxHQU1MLE9BSkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBSzIvRCxpQkFBbUI1eUMsRUFBTzR5QyxpQkFFeEIzL0QsS0FJUjRMLFNBRUMsTUFBTW9NLEVBQU95WixNQUFNN2xCLFNBTW5CLE9BSkFvTSxFQUFLMm5ELGlCQUFtQjMvRCxLQUFLMi9ELGlCQUU3QjNuRCxFQUFLb3BELDRCQUE2QixFQUUzQnBwRCxHQU1UbTVGLEdBQXlCNXhHLFVBQVU2aEUsNEJBQTZCLEVBRWhFLE1BQU1nd0MsR0FBcUMsSUFBSTVxRSxHQUN6QzZxRSxHQUFxQyxJQUFJN3FFLEdBRXpDOHFFLEdBQXNCLEdBRXRCQyxHQUFzQixJQUFJM3RELElBRWhDLGNBQTRCQSxHQUUzQmo3QyxZQUFhaTNCLEVBQVV5UyxFQUFVdmMsR0FFaENyRSxNQUFPbU8sRUFBVXlTLEdBRWpCcnlDLEtBQUt1eEMsZUFBaUIsSUFBSTQvRCxHQUEwQixJQUFJeDlGLGFBQXNCLEdBQVJtaUIsR0FBYyxJQUNwRjkxQixLQUFLd3hDLGNBQWdCLEtBRXJCeHhDLEtBQUs4MUIsTUFBUUEsRUFFYjkxQixLQUFLbXVDLGVBQWdCLEVBSXRCbnFCLEtBQU0rSSxHQVVMLE9BUkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS3V4QyxlQUFldnRCLEtBQU0rSSxFQUFPd2tCLGdCQUVILE9BQXpCeGtCLEVBQU95a0IsZ0JBQXlCeHhDLEtBQUt3eEMsY0FBZ0J6a0IsRUFBT3lrQixjQUFjenRCLFNBRS9FL2pCLEtBQUs4MUIsTUFBUS9JLEVBQU8rSSxNQUViOTFCLEtBSVJ3eEcsV0FBWTVxRyxFQUFPWCxHQUVsQkEsRUFBTXNnQixVQUFXdm1CLEtBQUt3eEMsY0FBYzl1QixNQUFlLEVBQVI5YixHQUk1QzZxRyxZQUFhN3FHLEVBQU9xa0IsR0FFbkJBLEVBQU8xRSxVQUFXdm1CLEtBQUt1eEMsZUFBZTd1QixNQUFlLEdBQVI5YixHQUk5QzBwQyxRQUFTNFQsRUFBV0MsR0FFbkIsTUFBTWpvQixFQUFjbDhCLEtBQUtrOEIsWUFDbkJ3MUUsRUFBZTF4RyxLQUFLODFCLE1BSzFCLEdBSEF5N0UsR0FBTTN4RSxTQUFXNS9CLEtBQUs0L0IsU0FDdEIyeEUsR0FBTWwvRCxTQUFXcnlDLEtBQUtxeUMsY0FFRTd5QixJQUFuQit4RixHQUFNbC9ELFNBRVgsSUFBTSxJQUFJcy9ELEVBQWEsRUFBR0EsRUFBYUQsRUFBY0MsSUFBZ0IsQ0FJcEUzeEcsS0FBS3l4RyxZQUFhRSxFQUFZUCxJQUU5QkMsR0FBcUIvb0YsaUJBQWtCNFQsRUFBYWsxRSxJQUlwREcsR0FBTXIxRSxZQUFjbTFFLEdBRXBCRSxHQUFNamhFLFFBQVM0VCxFQUFXb3RELElBSTFCLElBQU0sSUFBSXh3RyxFQUFJLEVBQUdXLEVBQUk2dkcsR0FBb0J4eUcsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFOUQsTUFBTStnQyxFQUFZeXZFLEdBQXFCeHdHLEdBQ3ZDK2dDLEVBQVU4dkUsV0FBYUEsRUFDdkI5dkUsRUFBVTdDLE9BQVNoL0IsS0FDbkJta0QsRUFBVzNoRCxLQUFNcS9CLEdBSWxCeXZFLEdBQW9CeHlHLE9BQVMsR0FNL0I4eUcsV0FBWWhyRyxFQUFPWCxHQUVVLE9BQXZCakcsS0FBS3d4QyxnQkFFVHh4QyxLQUFLd3hDLGNBQWdCLElBQUkyL0QsR0FBMEIsSUFBSXg5RixhQUEwQyxFQUE1QjNULEtBQUt1eEMsZUFBZXpiLE9BQWEsSUFJdkc3dkIsRUFBTXdnQixRQUFTem1CLEtBQUt3eEMsY0FBYzl1QixNQUFlLEVBQVI5YixHQUkxQ2lyRyxZQUFhanJHLEVBQU9xa0IsR0FFbkJBLEVBQU94RSxRQUFTem1CLEtBQUt1eEMsZUFBZTd1QixNQUFlLEdBQVI5YixHQUk1Q2k5QyxzQkFJQS93QixVQUVDOXlCLEtBQUsrQyxjQUFlLENBQUU4VCxLQUFNLGVBTWhCdFgsVUFBVSt4QyxpQkFBa0IsRUFFMUMsTUFBTXV1QyxXQUEwQnRxQyxHQUUvQjVzQyxZQUFhb3BDLEdBRVp0Z0IsUUFFQXp4QixLQUFLNlcsS0FBTyxvQkFFWjdXLEtBQUtpRyxNQUFRLElBQUkrbUIsR0FBTyxVQUV4Qmh0QixLQUFLdTdDLFVBQVksRUFDakJ2N0MsS0FBSzh4RyxRQUFVLFFBQ2Y5eEcsS0FBSyt4RyxTQUFXLFFBRWhCL3hHLEtBQUtpNEMsVUFBV2xHLEdBS2pCL3RCLEtBQU0rSSxHQVVMLE9BUkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS2lHLE1BQU0rZCxLQUFNK0ksRUFBTzltQixPQUV4QmpHLEtBQUt1N0MsVUFBWXh1QixFQUFPd3VCLFVBQ3hCdjdDLEtBQUs4eEcsUUFBVS9rRixFQUFPK2tGLFFBQ3RCOXhHLEtBQUsreEcsU0FBV2hsRixFQUFPZ2xGLFNBRWhCL3hHLE1BTVQ2L0UsR0FBa0J0Z0YsVUFBVTBrRyxxQkFBc0IsRUFFbEQsTUFBTStOLEdBQXlCLElBQUluM0UsR0FDN0JvM0UsR0FBdUIsSUFBSXAzRSxHQUMzQnEzRSxHQUFpQyxJQUFJMXJFLEdBQ3JDMnJFLEdBQXVCLElBQUkxdUUsR0FDM0IydUUsR0FBMEIsSUFBSTF2RSxHQUVwQyxNQUFNMnZFLFdBQWE1a0UsR0FFbEI5a0MsWUFBYWkzQixFQUFXLElBQUkwZSxHQUFrQmpNLEVBQVcsSUFBSXd0QyxJQUU1RHB1RCxRQUVBenhCLEtBQUs2VyxLQUFPLE9BRVo3VyxLQUFLNC9CLFNBQVdBLEVBQ2hCNS9CLEtBQUtxeUMsU0FBV0EsRUFFaEJyeUMsS0FBSzZqRCxxQkFJTjcvQixLQUFNK0ksR0FPTCxPQUxBMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUtxeUMsU0FBV3RsQixFQUFPc2xCLFNBQ3ZCcnlDLEtBQUs0L0IsU0FBVzdTLEVBQU82UyxTQUVoQjUvQixLQUlSc3lHLHVCQUVDLE1BQU0xeUUsRUFBVzUvQixLQUFLNC9CLFNBRXRCLEdBQUtBLEVBQVNnaUIsaUJBSWIsR0FBd0IsT0FBbkJoaUIsRUFBU2g1QixNQUFpQixDQUU5QixNQUFNczZDLEVBQW9CdGhCLEVBQVNDLFdBQVdDLFNBQ3hDeXlFLEVBQWdCLENBQUUsR0FFeEIsSUFBTSxJQUFJenhHLEVBQUksRUFBR1csRUFBSXkvQyxFQUFrQnByQixNQUFPaDFCLEVBQUlXLEVBQUdYLElBRXBEa3hHLEdBQVN0ckYsb0JBQXFCdzZCLEVBQW1CcGdELEVBQUksR0FDckRteEcsR0FBT3ZyRixvQkFBcUJ3NkIsRUFBbUJwZ0QsR0FFL0N5eEcsRUFBZXp4RyxHQUFNeXhHLEVBQWV6eEcsRUFBSSxHQUN4Q3l4RyxFQUFlenhHLElBQU9reEcsR0FBU25zRixXQUFZb3NGLElBSTVDcnlFLEVBQVN6bEIsYUFBYyxlQUFnQixJQUFJMmpDLEdBQXdCeTBELEVBQWUsU0FJbEY1dkcsUUFBUXVoQixLQUFNLHNHQUlKMGIsRUFBUzhrQixZQUVwQi9oRCxRQUFRQyxNQUFPLDBHQUloQixPQUFPNUMsS0FJUnN3QyxRQUFTNFQsRUFBV0MsR0FFbkIsTUFBTXZrQixFQUFXNS9CLEtBQUs0L0IsU0FDaEIxRCxFQUFjbDhCLEtBQUtrOEIsWUFDbkJ5Z0UsRUFBWXo0QyxFQUFVMmtCLE9BQU93cEMsS0FBSzFWLFVBQ2xDaCtDLEVBQVkvZSxFQUFTK2UsVUFVM0IsR0FOaUMsT0FBNUIvZSxFQUFTOGUsZ0JBQTBCOWUsRUFBUzBmLHdCQUVqRDh5RCxHQUFVcHVGLEtBQU00YixFQUFTOGUsZ0JBQ3pCMHpELEdBQVUvK0UsYUFBYzZJLEdBQ3hCazJFLEdBQVVqc0csUUFBVXcyRixHQUVpQyxJQUFoRHo0QyxFQUFVdGdCLElBQUlwRCxpQkFBa0I0eEUsSUFBd0IsT0FJN0RGLEdBQWlCbHVGLEtBQU1rWSxHQUFjclMsU0FDckNzb0YsR0FBT251RixLQUFNa2dDLEVBQVV0Z0IsS0FBTXZRLGFBQWM2K0UsSUFFM0MsTUFBTU0sRUFBaUI3VixJQUFnQjM4RixLQUFLK3FCLE1BQU1wcUIsRUFBSVgsS0FBSytxQixNQUFNbHFCLEVBQUliLEtBQUsrcUIsTUFBTTdwQixHQUFNLEdBQ2hGdXhHLEVBQW1CRCxFQUFpQkEsRUFFcENFLEVBQVMsSUFBSTczRSxHQUNiODNFLEVBQU8sSUFBSTkzRSxHQUNYKzNFLEVBQWUsSUFBSS8zRSxHQUNuQmc0RSxFQUFXLElBQUloNEUsR0FDZjFCLEVBQU9uNUIsS0FBS3lyRyxlQUFpQixFQUFJLEVBRXZDLEdBQUs3ckUsRUFBU2dpQixpQkFBbUIsQ0FFaEMsTUFBTWg3QyxFQUFRZzVCLEVBQVNoNUIsTUFFakJzNkMsRUFEYXRoQixFQUFTQyxXQUNTQyxTQUVyQyxHQUFlLE9BQVZsNUIsRUFLSixJQUFNLElBQUk5RixFQUhJakIsS0FBS2tHLElBQUssRUFBRzQ0QyxFQUFVMzVDLE9BR2hCdkQsRUFGVDVCLEtBQUswRyxJQUFLSyxFQUFNa3ZCLE1BQVM2b0IsRUFBVTM1QyxNQUFRMjVDLEVBQVU3b0IsT0FFbEMsRUFBR2gxQixFQUFJVyxFQUFHWCxHQUFLcTRCLEVBQU8sQ0FFcEQsTUFBTXY2QixFQUFJZ0ksRUFBTWdnQixLQUFNOWxCLEdBQ2hCakMsRUFBSStILEVBQU1nZ0IsS0FBTTlsQixFQUFJLEdBTzFCLEdBTEE0eEcsRUFBT2hzRixvQkFBcUJ3NkIsRUFBbUJ0aUQsR0FDL0MrekcsRUFBS2pzRixvQkFBcUJ3NkIsRUFBbUJyaUQsR0FFOUJzekcsR0FBT2h1RSxvQkFBcUJ1dUUsRUFBUUMsRUFBTUUsRUFBVUQsR0FFckRILEVBQW1CLFNBRWpDSSxFQUFTeC9FLGFBQWNyekIsS0FBS2s4QixhQUU1QixNQUFNZ1QsRUFBV2dWLEVBQVV0Z0IsSUFBSUYsT0FBTzdkLFdBQVlndEYsR0FFN0MzakUsRUFBV2dWLEVBQVU5WSxNQUFROEQsRUFBV2dWLEVBQVU3WSxLQUV2RDhZLEVBQVczaEQsS0FBTSxDQUVoQjBzQyxTQUFVQSxFQUdWM1AsTUFBT3F6RSxFQUFhN3VGLFFBQVFzUCxhQUFjcnpCLEtBQUtrOEIsYUFDL0N0MUIsTUFBTzlGLEVBQ1AyakQsS0FBTSxLQUNORCxVQUFXLEtBQ1h4bEIsT0FBUWgvQixZQVdWLElBQU0sSUFBSWMsRUFISWpCLEtBQUtrRyxJQUFLLEVBQUc0NEMsRUFBVTM1QyxPQUdoQnZELEVBRlQ1QixLQUFLMEcsSUFBSzI2QyxFQUFrQnByQixNQUFTNm9CLEVBQVUzNUMsTUFBUTI1QyxFQUFVN29CLE9BRTlDLEVBQUdoMUIsRUFBSVcsRUFBR1gsR0FBS3E0QixFQUFPLENBT3BELEdBTEF1NUUsRUFBT2hzRixvQkFBcUJ3NkIsRUFBbUJwZ0QsR0FDL0M2eEcsRUFBS2pzRixvQkFBcUJ3NkIsRUFBbUJwZ0QsRUFBSSxHQUVsQ3F4RyxHQUFPaHVFLG9CQUFxQnV1RSxFQUFRQyxFQUFNRSxFQUFVRCxHQUVyREgsRUFBbUIsU0FFakNJLEVBQVN4L0UsYUFBY3J6QixLQUFLazhCLGFBRTVCLE1BQU1nVCxFQUFXZ1YsRUFBVXRnQixJQUFJRixPQUFPN2QsV0FBWWd0RixHQUU3QzNqRSxFQUFXZ1YsRUFBVTlZLE1BQVE4RCxFQUFXZ1YsRUFBVTdZLEtBRXZEOFksRUFBVzNoRCxLQUFNLENBRWhCMHNDLFNBQVVBLEVBR1YzUCxNQUFPcXpFLEVBQWE3dUYsUUFBUXNQLGFBQWNyekIsS0FBS2s4QixhQUMvQ3QxQixNQUFPOUYsRUFDUDJqRCxLQUFNLEtBQ05ELFVBQVcsS0FDWHhsQixPQUFRaC9CLGFBUUE0L0IsRUFBUzhrQixZQUVwQi9oRCxRQUFRQyxNQUFPLDZGQU1qQmloRCxxQkFFQyxNQUFNamtCLEVBQVc1L0IsS0FBSzQvQixTQUV0QixHQUFLQSxFQUFTZ2lCLGlCQUFtQixDQUVoQyxNQUFNckQsRUFBa0IzZSxFQUFTMmUsZ0JBQzNCeG9DLEVBQU83VyxPQUFPNlcsS0FBTXdvQyxHQUUxQixHQUFLeG9DLEVBQUtqWCxPQUFTLEVBQUksQ0FFdEIsTUFBTTJnRCxFQUFpQmxCLEVBQWlCeG9DLEVBQU0sSUFFOUMsUUFBd0J5SixJQUFuQmlnQyxFQUErQixDQUVuQ3ovQyxLQUFLOGpELHNCQUF3QixHQUM3QjlqRCxLQUFLK2pELHNCQUF3QixHQUU3QixJQUFNLElBQUk5aUQsRUFBSSxFQUFHK2lELEVBQUt2RSxFQUFlM2dELE9BQVFtQyxFQUFJK2lELEVBQUkvaUQsSUFBTyxDQUUzRCxNQUFNb1YsRUFBT29wQyxFQUFnQngrQyxHQUFJb1YsTUFBUTdNLE9BQVF2SSxHQUVqRGpCLEtBQUs4akQsc0JBQXNCdGhELEtBQU0sR0FDakN4QyxLQUFLK2pELHNCQUF1QjF0QyxHQUFTcFYsU0FRbEMsQ0FFTixNQUFNZ2pELEVBQWVya0IsRUFBU3FrQixrQkFFUnprQyxJQUFqQnlrQyxHQUE4QkEsRUFBYW5sRCxPQUFTLEdBRXhENkQsUUFBUUMsTUFBTyx3R0FVbkJ5dkcsR0FBSzl5RyxVQUFVc3lDLFFBQVMsRUFFeEIsTUFBTWloRSxHQUF1QixJQUFJajRFLEdBQzNCazRFLEdBQXFCLElBQUlsNEUsR0FFL0IsTUFBTW00RSxXQUFxQlgsR0FFMUIxcEcsWUFBYWkzQixFQUFVeVMsR0FFdEI1Z0IsTUFBT21PLEVBQVV5UyxHQUVqQnJ5QyxLQUFLNlcsS0FBTyxlQUlieTdGLHVCQUVDLE1BQU0xeUUsRUFBVzUvQixLQUFLNC9CLFNBRXRCLEdBQUtBLEVBQVNnaUIsaUJBSWIsR0FBd0IsT0FBbkJoaUIsRUFBU2g1QixNQUFpQixDQUU5QixNQUFNczZDLEVBQW9CdGhCLEVBQVNDLFdBQVdDLFNBQ3hDeXlFLEVBQWdCLEdBRXRCLElBQU0sSUFBSXp4RyxFQUFJLEVBQUdXLEVBQUl5L0MsRUFBa0JwckIsTUFBT2gxQixFQUFJVyxFQUFHWCxHQUFLLEVBRXpEZ3lHLEdBQU9wc0Ysb0JBQXFCdzZCLEVBQW1CcGdELEdBQy9DaXlHLEdBQUtyc0Ysb0JBQXFCdzZCLEVBQW1CcGdELEVBQUksR0FFakR5eEcsRUFBZXp4RyxHQUFjLElBQU5BLEVBQVksRUFBSXl4RyxFQUFlenhHLEVBQUksR0FDMUR5eEcsRUFBZXp4RyxFQUFJLEdBQU15eEcsRUFBZXp4RyxHQUFNZ3lHLEdBQU9qdEYsV0FBWWt0RixJQUlsRW56RSxFQUFTemxCLGFBQWMsZUFBZ0IsSUFBSTJqQyxHQUF3QnkwRCxFQUFlLFNBSWxGNXZHLFFBQVF1aEIsS0FBTSw4R0FJSjBiLEVBQVM4a0IsWUFFcEIvaEQsUUFBUUMsTUFBTyxrSEFJaEIsT0FBTzVDLE1BTVRnekcsR0FBYXp6RyxVQUFVa3NHLGdCQUFpQixHQUV4QyxjQUF1QjRHLEdBRXRCMXBHLFlBQWFpM0IsRUFBVXlTLEdBRXRCNWdCLE1BQU9tTyxFQUFVeVMsR0FFakJyeUMsS0FBSzZXLEtBQU8sY0FNTHRYLFVBQVVtc0csWUFBYSxFQUVoQyxNQUFNM3JCLFdBQXVCeHFDLEdBRTVCNXNDLFlBQWFvcEMsR0FFWnRnQixRQUVBenhCLEtBQUs2VyxLQUFPLGlCQUVaN1csS0FBS2lHLE1BQVEsSUFBSSttQixHQUFPLFVBRXhCaHRCLEtBQUtvUyxJQUFNLEtBRVhwUyxLQUFLdTVDLFNBQVcsS0FFaEJ2NUMsS0FBS3FYLEtBQU8sRUFDWnJYLEtBQUtzN0MsaUJBQWtCLEVBRXZCdDdDLEtBQUtpNEMsVUFBV2xHLEdBSWpCL3RCLEtBQU0rSSxHQWFMLE9BWEEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS2lHLE1BQU0rZCxLQUFNK0ksRUFBTzltQixPQUV4QmpHLEtBQUtvUyxJQUFNMmEsRUFBTzNhLElBRWxCcFMsS0FBS3U1QyxTQUFXeHNCLEVBQU93c0IsU0FFdkJ2NUMsS0FBS3FYLEtBQU8wVixFQUFPMVYsS0FDbkJyWCxLQUFLczdDLGdCQUFrQnZ1QixFQUFPdXVCLGdCQUV2QnQ3QyxNQU1UKy9FLEdBQWV4Z0YsVUFBVThrRyxrQkFBbUIsRUFFNUMsTUFBTTRPLEdBQStCLElBQUl6c0UsR0FDbkMwc0UsR0FBcUIsSUFBSXp2RSxHQUN6QjB2RSxHQUF3QixJQUFJendFLEdBQzVCMHdFLEdBQTRCLElBQUl2NEUsR0FrSnRDLFNBQVN3NEUsR0FBVzl6RSxFQUFPMzRCLEVBQU82ckcsRUFBa0J2MkUsRUFBYWdvQixFQUFXQyxFQUFZbmxCLEdBRXZGLE1BQU1zMEUsRUFBcUJKLEdBQUtodkUsa0JBQW1CM0UsR0FFbkQsR0FBSyt6RSxFQUFxQmIsRUFBbUIsQ0FFNUMsTUFBTWMsRUFBaUIsSUFBSTE0RSxHQUUzQnE0RSxHQUFLbHZFLG9CQUFxQnpFLEVBQU9nMEUsR0FDakNBLEVBQWVsZ0YsYUFBYzZJLEdBRTdCLE1BQU1nVCxFQUFXZ1YsRUFBVXRnQixJQUFJRixPQUFPN2QsV0FBWTB0RixHQUVsRCxHQUFLcmtFLEVBQVdnVixFQUFVOVksTUFBUThELEVBQVdnVixFQUFVN1ksSUFBTSxPQUU3RDhZLEVBQVczaEQsS0FBTSxDQUVoQjBzQyxTQUFVQSxFQUNWc2tFLGNBQWUzekcsS0FBSzJsQixLQUFNOHRGLEdBQzFCL3pFLE1BQU9nMEUsRUFDUDNzRyxNQUFPQSxFQUNQNjlDLEtBQU0sS0FDTnpsQixPQUFRQSxNQXRLWCxjQUFxQnlPLEdBRXBCOWtDLFlBQWFpM0IsRUFBVyxJQUFJMGUsR0FBa0JqTSxFQUFXLElBQUkwdEMsSUFFNUR0dUQsUUFFQXp4QixLQUFLNlcsS0FBTyxTQUVaN1csS0FBSzQvQixTQUFXQSxFQUNoQjUvQixLQUFLcXlDLFNBQVdBLEVBRWhCcnlDLEtBQUs2akQscUJBSU43L0IsS0FBTStJLEdBT0wsT0FMQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLcXlDLFNBQVd0bEIsRUFBT3NsQixTQUN2QnJ5QyxLQUFLNC9CLFNBQVc3UyxFQUFPNlMsU0FFaEI1L0IsS0FJUnN3QyxRQUFTNFQsRUFBV0MsR0FFbkIsTUFBTXZrQixFQUFXNS9CLEtBQUs0L0IsU0FDaEIxRCxFQUFjbDhCLEtBQUtrOEIsWUFDbkJ5Z0UsRUFBWXo0QyxFQUFVMmtCLE9BQU80cUMsT0FBTzlXLFVBQ3BDaCtDLEVBQVkvZSxFQUFTK2UsVUFVM0IsR0FOaUMsT0FBNUIvZSxFQUFTOGUsZ0JBQTBCOWUsRUFBUzBmLHdCQUVqRDZ6RCxHQUFRbnZGLEtBQU00YixFQUFTOGUsZ0JBQ3ZCeTBELEdBQVE5L0UsYUFBYzZJLEdBQ3RCaTNFLEdBQVFodEcsUUFBVXcyRixHQUVpQyxJQUE5Q3o0QyxFQUFVdGdCLElBQUlwRCxpQkFBa0IyeUUsSUFBc0IsT0FJM0RGLEdBQWVqdkYsS0FBTWtZLEdBQWNyUyxTQUNuQ3FwRixHQUFLbHZGLEtBQU1rZ0MsRUFBVXRnQixLQUFNdlEsYUFBYzQvRSxJQUV6QyxNQUFNVCxFQUFpQjdWLElBQWdCMzhGLEtBQUsrcUIsTUFBTXBxQixFQUFJWCxLQUFLK3FCLE1BQU1scUIsRUFBSWIsS0FBSytxQixNQUFNN3BCLEdBQU0sR0FDaEZ1eEcsRUFBbUJELEVBQWlCQSxFQUUxQyxHQUFLNXlFLEVBQVNnaUIsaUJBQW1CLENBRWhDLE1BQU1oN0MsRUFBUWc1QixFQUFTaDVCLE1BRWpCczZDLEVBRGF0aEIsRUFBU0MsV0FDU0MsU0FFckMsR0FBZSxPQUFWbDVCLEVBS0osSUFBTSxJQUFJOUYsRUFISWpCLEtBQUtrRyxJQUFLLEVBQUc0NEMsRUFBVTM1QyxPQUdoQit3QixFQUZUbDJCLEtBQUswRyxJQUFLSyxFQUFNa3ZCLE1BQVM2b0IsRUFBVTM1QyxNQUFRMjVDLEVBQVU3b0IsT0FFbENoMUIsRUFBSWkxQixFQUFJajFCLElBQU8sQ0FFN0MsTUFBTWxDLEVBQUlnSSxFQUFNZ2dCLEtBQU05bEIsR0FFdEJzeUcsR0FBWTFzRixvQkFBcUJ3NkIsRUFBbUJ0aUQsR0FFcER5MEcsR0FBV0QsR0FBYXgwRyxFQUFHNnpHLEVBQWtCdjJFLEVBQWFnb0IsRUFBV0MsRUFBWW5rRCxXQVNsRixJQUFNLElBQUljLEVBSElqQixLQUFLa0csSUFBSyxFQUFHNDRDLEVBQVUzNUMsT0FHaEJ2RCxFQUZUNUIsS0FBSzBHLElBQUsyNkMsRUFBa0JwckIsTUFBUzZvQixFQUFVMzVDLE1BQVEyNUMsRUFBVTdvQixPQUUvQ2gxQixFQUFJVyxFQUFHWCxJQUVwQ3N5RyxHQUFZMXNGLG9CQUFxQnc2QixFQUFtQnBnRCxHQUVwRHV5RyxHQUFXRCxHQUFhdHlHLEVBQUcyeEcsRUFBa0J2MkUsRUFBYWdvQixFQUFXQyxFQUFZbmtELFdBUW5GMkMsUUFBUUMsTUFBTywrRkFNakJpaEQscUJBRUMsTUFBTWprQixFQUFXNS9CLEtBQUs0L0IsU0FFdEIsR0FBS0EsRUFBU2dpQixpQkFBbUIsQ0FFaEMsTUFBTXJELEVBQWtCM2UsRUFBUzJlLGdCQUMzQnhvQyxFQUFPN1csT0FBTzZXLEtBQU13b0MsR0FFMUIsR0FBS3hvQyxFQUFLalgsT0FBUyxFQUFJLENBRXRCLE1BQU0yZ0QsRUFBaUJsQixFQUFpQnhvQyxFQUFNLElBRTlDLFFBQXdCeUosSUFBbkJpZ0MsRUFBK0IsQ0FFbkN6L0MsS0FBSzhqRCxzQkFBd0IsR0FDN0I5akQsS0FBSytqRCxzQkFBd0IsR0FFN0IsSUFBTSxJQUFJOWlELEVBQUksRUFBRytpRCxFQUFLdkUsRUFBZTNnRCxPQUFRbUMsRUFBSStpRCxFQUFJL2lELElBQU8sQ0FFM0QsTUFBTW9WLEVBQU9vcEMsRUFBZ0J4K0MsR0FBSW9WLE1BQVE3TSxPQUFRdkksR0FFakRqQixLQUFLOGpELHNCQUFzQnRoRCxLQUFNLEdBQ2pDeEMsS0FBSytqRCxzQkFBdUIxdEMsR0FBU3BWLFNBUWxDLENBRU4sTUFBTWdqRCxFQUFlcmtCLEVBQVNxa0Isa0JBRVJ6a0MsSUFBakJ5a0MsR0FBOEJBLEVBQWFubEQsT0FBUyxHQUV4RDZELFFBQVFDLE1BQU8sNEdBVVpyRCxVQUFVdXlDLFVBQVcsRUFnQzVCLGNBQTJCaGhCLEdBRTFCbm9CLFlBQWFwRSxFQUFPeXNCLEVBQVNFLEVBQU9DLEVBQU9DLEVBQVdDLEVBQVdDLEVBQVF6YSxFQUFNMGEsR0FFOUVFLE1BQU9sdEIsRUFBT3lzQixFQUFTRSxFQUFPQyxFQUFPQyxFQUFXQyxFQUFXQyxFQUFRemEsRUFBTTBhLEdBRXpFdnhCLEtBQUtxeEIsZUFBMEI3UixJQUFkNlIsRUFBMEJBLEVBQVlqUixFQUN2RHBnQixLQUFLb3hCLGVBQTBCNVIsSUFBZDRSLEVBQTBCQSxFQUFZaFIsRUFFdkRwZ0IsS0FBSzh4QixpQkFBa0IsRUFFdkIsTUFBTXF6QixFQUFRbmxELEtBU1QsOEJBQStCdUUsR0FFbkNBLEVBQU1tdkcsMkJBVFAsU0FBU0MsSUFFUnh1RCxFQUFNLzBCLGFBQWMsRUFDcEI3ckIsRUFBTW12RywwQkFBMkJDLE1BWW5DNXZGLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxZQUFhM0ksS0FBS21ZLE9BQVE2TCxLQUFNaGtCLE1BSWpEKzNCLFNBRUMsTUFBTXh6QixFQUFRdkUsS0FBS21ZLE9BR1ksR0FGRCw4QkFBK0I1VCxHQUVyQkEsRUFBTXF2RyxZQUFjcnZHLEVBQU1zdkcsb0JBRWpFN3pHLEtBQUtvd0IsYUFBYyxLQVFUN3dCLFVBQVV1aEYsZ0JBQWlCLEVBRXhDLGNBQWlDaHdELEdBRWhDbm9CLFlBQWF2RSxFQUFPQyxFQUFRaXRCLEdBRTNCRyxNQUFPLENBQUVydEIsTUFBQUEsRUFBT0MsT0FBQUEsSUFFaEJyRSxLQUFLc3hCLE9BQVNBLEVBRWR0eEIsS0FBS294QixVQUFZalIsRUFDakJuZ0IsS0FBS3F4QixVQUFZbFIsRUFFakJuZ0IsS0FBSzh4QixpQkFBa0IsRUFFdkI5eEIsS0FBS293QixhQUFjLElBTUY3d0IsVUFBVTR4RixzQkFBdUIsR0FFcEQsY0FBZ0NyZ0UsR0FFL0Jub0IsWUFBYStvQixFQUFTdHRCLEVBQU9DLEVBQVFpdEIsRUFBUXphLEVBQU1tYSxFQUFTRSxFQUFPQyxFQUFPQyxFQUFXQyxFQUFXRSxFQUFZQyxHQUUzR0MsTUFBTyxLQUFNVCxFQUFTRSxFQUFPQyxFQUFPQyxFQUFXQyxFQUFXQyxFQUFRemEsRUFBTTBhLEVBQVlDLEdBRXBGeHhCLEtBQUttWSxNQUFRLENBQUUvVCxNQUFPQSxFQUFPQyxPQUFRQSxHQUNyQ3JFLEtBQUsweEIsUUFBVUEsRUFLZjF4QixLQUFLZ3lCLE9BQVEsRUFLYmh5QixLQUFLOHhCLGlCQUFrQixLQU1QdnlCLFVBQVU2eEYscUJBQXNCLEVBRWxELGNBQTRCdGdFLEdBRTNCbm9CLFlBQWFsQyxFQUFRdXFCLEVBQVNFLEVBQU9DLEVBQU9DLEVBQVdDLEVBQVdDLEVBQVF6YSxFQUFNMGEsR0FFL0VFLE1BQU9ockIsRUFBUXVxQixFQUFTRSxFQUFPQyxFQUFPQyxFQUFXQyxFQUFXQyxFQUFRemEsRUFBTTBhLEdBRTFFdnhCLEtBQUtvd0IsYUFBYyxJQU1QN3dCLFVBQVV1MEcsaUJBQWtCLEVBZ0MxQyxNQUFNQyxHQUVMcHJHLGNBRUMzSSxLQUFLNlcsS0FBTyxRQUVaN1csS0FBS2cwRyxtQkFBcUIsSUFPM0JDLFdBR0MsT0FEQXR4RyxRQUFRdWhCLEtBQU0sNkNBQ1AsS0FPUmd3RixXQUFZMTBHLEVBQUcyMEcsR0FFZCxNQUFNcDBHLEVBQUlDLEtBQUtvMEcsZUFBZ0I1MEcsR0FDL0IsT0FBT1EsS0FBS2kwRyxTQUFVbDBHLEVBQUdvMEcsR0FNMUJFLFVBQVdDLEVBQVksR0FFdEIsTUFBTTcxRSxFQUFTLEdBRWYsSUFBTSxJQUFJbjhCLEVBQUksRUFBR0EsR0FBS2d5RyxFQUFXaHlHLElBRWhDbThCLEVBQU9qOEIsS0FBTXhDLEtBQUtpMEcsU0FBVTN4RyxFQUFJZ3lHLElBSWpDLE9BQU83MUUsRUFNUjgxRSxnQkFBaUJELEVBQVksR0FFNUIsTUFBTTcxRSxFQUFTLEdBRWYsSUFBTSxJQUFJbjhCLEVBQUksRUFBR0EsR0FBS2d5RyxFQUFXaHlHLElBRWhDbThCLEVBQU9qOEIsS0FBTXhDLEtBQUtrMEcsV0FBWTV4RyxFQUFJZ3lHLElBSW5DLE9BQU83MUUsRUFNUisxRSxZQUVDLE1BQU1DLEVBQVV6MEcsS0FBSzAwRyxhQUNyQixPQUFPRCxFQUFTQSxFQUFRMzFHLE9BQVMsR0FNbEM0MUcsV0FBWUosRUFBWXQwRyxLQUFLZzBHLG9CQUU1QixHQUFLaDBHLEtBQUsyMEcsaUJBQ1AzMEcsS0FBSzIwRyxnQkFBZ0I3MUcsU0FBV3cxRyxFQUFZLElBQzVDdDBHLEtBQUtvd0IsWUFFUCxPQUFPcHdCLEtBQUsyMEcsZ0JBSWIzMEcsS0FBS293QixhQUFjLEVBRW5CLE1BQU1xaUIsRUFBUSxHQUNkLElBQUltaUUsRUFBU0MsRUFBTzcwRyxLQUFLaTBHLFNBQVUsR0FDL0Ixb0MsRUFBTSxFQUVWOTRCLEVBQU1qd0MsS0FBTSxHQUVaLElBQU0sSUFBSWUsRUFBSSxFQUFHQSxHQUFLK3dHLEVBQVcvd0csSUFFaENxeEcsRUFBVTUwRyxLQUFLaTBHLFNBQVUxd0csRUFBSSt3RyxHQUM3Qi9vQyxHQUFPcXBDLEVBQVEvdUYsV0FBWWd2RixHQUMzQnBpRSxFQUFNandDLEtBQU0rb0UsR0FDWnNwQyxFQUFPRCxFQU1SLE9BRkE1MEcsS0FBSzIwRyxnQkFBa0JsaUUsRUFFaEJBLEVBSVJxaUUsbUJBRUM5MEcsS0FBS293QixhQUFjLEVBQ25CcHdCLEtBQUswMEcsYUFNTk4sZUFBZ0I1MEcsRUFBRzB2QyxHQUVsQixNQUFNNmxFLEVBQWEvMEcsS0FBSzAwRyxhQUV4QixJQUFJNXpHLEVBQUksRUFDUixNQUFNaTFCLEVBQUtnL0UsRUFBV2oyRyxPQUV0QixJQUFJazJHLEVBSUhBLEVBRkk5bEUsR0FNYzF2QyxFQUFJdTFHLEVBQVloL0UsRUFBSyxHQU14QyxJQUE0QmsvRSxFQUF4QkMsRUFBTSxFQUFHQyxFQUFPcC9FLEVBQUssRUFFekIsS0FBUW0vRSxHQUFPQyxHQU1kLEdBSkFyMEcsRUFBSWpCLEtBQUtxTCxNQUFPZ3FHLEdBQVFDLEVBQU9ELEdBQVEsR0FFdkNELEVBQWFGLEVBQVlqMEcsR0FBTWswRyxFQUUxQkMsRUFBYSxFQUVqQkMsRUFBTXAwRyxFQUFJLE1BRUosTUFBS20wRyxFQUFhLEdBSWxCLENBRU5FLEVBQU9yMEcsRUFDUCxNQUxBcTBHLEVBQU9yMEcsRUFBSSxFQWViLEdBRkFBLEVBQUlxMEcsRUFFQ0osRUFBWWowRyxLQUFRazBHLEVBRXhCLE9BQU9sMEcsR0FBTWkxQixFQUFLLEdBTW5CLE1BQU1xL0UsRUFBZUwsRUFBWWowRyxHQWFqQyxPQUZZQSxHQUpjazBHLEVBQWtCSSxJQU54QkwsRUFBWWowRyxFQUFJLEdBRUFzMEcsS0FRRXIvRSxFQUFLLEdBVzVDcy9FLFdBQVl0MUcsRUFBR28wRyxHQUVkLE1BQU0xbEYsRUFBUSxLQUNkLElBQUkwVyxFQUFLcGxDLEVBQUkwdUIsRUFDVDZtRixFQUFLdjFHLEVBQUkwdUIsRUFJUjBXLEVBQUssSUFBSUEsRUFBSyxHQUNkbXdFLEVBQUssSUFBSUEsRUFBSyxHQUVuQixNQUFNQyxFQUFNdjFHLEtBQUtpMEcsU0FBVTl1RSxHQUNyQnF3RSxFQUFNeDFHLEtBQUtpMEcsU0FBVXFCLEdBRXJCajJELEVBQVU4MEQsSUFBc0JvQixFQUFjLFVBQUksSUFBSS94RixFQUFZLElBQUlxWCxJQUk1RSxPQUZBd2tCLEVBQVFyN0IsS0FBTXd4RixHQUFNbHhGLElBQUtpeEYsR0FBTTd2RixZQUV4QjI1QixFQUlSbzJELGFBQWNqMkcsRUFBRzIwRyxHQUVoQixNQUFNcDBHLEVBQUlDLEtBQUtvMEcsZUFBZ0I1MEcsR0FDL0IsT0FBT1EsS0FBS3ExRyxXQUFZdDFHLEVBQUdvMEcsR0FJNUJ1QixvQkFBcUJDLEVBQVVDLEdBSTlCLE1BQU0zNEUsRUFBUyxJQUFJcEMsR0FFYm9sQixFQUFXLEdBQ1hILEVBQVUsR0FDVisxRCxFQUFZLEdBRVpDLEVBQU0sSUFBSWo3RSxHQUNWazdFLEVBQU0sSUFBSXZ2RSxHQUloQixJQUFNLElBQUkxbEMsRUFBSSxFQUFHQSxHQUFLNjBHLEVBQVU3MEcsSUFBTyxDQUV0QyxNQUFNdEIsRUFBSXNCLEVBQUk2MEcsRUFFZDExRCxFQUFVbi9DLEdBQU1kLEtBQUt5MUcsYUFBY2oyRyxFQUFHLElBQUlxN0IsSUFPM0NpbEIsRUFBUyxHQUFNLElBQUlqbEIsR0FDbkJnN0UsRUFBVyxHQUFNLElBQUloN0UsR0FDckIsSUFBSXQwQixFQUFNUCxPQUFPb0ksVUFDakIsTUFBTXFjLEVBQUs1cUIsS0FBSzJSLElBQUt5dUMsRUFBVSxHQUFJdC9DLEdBQzdCK3BCLEVBQUs3cUIsS0FBSzJSLElBQUt5dUMsRUFBVSxHQUFJcC9DLEdBQzdCbTFHLEVBQUtuMkcsS0FBSzJSLElBQUt5dUMsRUFBVSxHQUFJLytDLEdBRTlCdXBCLEdBQU1sa0IsSUFFVkEsRUFBTWtrQixFQUNOd1MsRUFBT3R3QixJQUFLLEVBQUcsRUFBRyxJQUlkK2QsR0FBTW5rQixJQUVWQSxFQUFNbWtCLEVBQ051UyxFQUFPdHdCLElBQUssRUFBRyxFQUFHLElBSWRxcEcsR0FBTXp2RyxHQUVWMDJCLEVBQU90d0IsSUFBSyxFQUFHLEVBQUcsR0FJbkJtcEcsRUFBSTE1RSxhQUFjNmpCLEVBQVUsR0FBS2hqQixHQUFTdlgsWUFFMUNvNkIsRUFBUyxHQUFJMWpCLGFBQWM2akIsRUFBVSxHQUFLNjFELEdBQzFDRCxFQUFXLEdBQUl6NUUsYUFBYzZqQixFQUFVLEdBQUtILEVBQVMsSUFLckQsSUFBTSxJQUFJaC9DLEVBQUksRUFBR0EsR0FBSzYwRyxFQUFVNzBHLElBQU8sQ0FRdEMsR0FOQWcvQyxFQUFTaC9DLEdBQU1nL0MsRUFBU2gvQyxFQUFJLEdBQUlpakIsUUFFaEM4eEYsRUFBVy8wRyxHQUFNKzBHLEVBQVcvMEcsRUFBSSxHQUFJaWpCLFFBRXBDK3hGLEVBQUkxNUUsYUFBYzZqQixFQUFVbi9DLEVBQUksR0FBS20vQyxFQUFVbi9DLElBRTFDZzFHLEVBQUloM0csU0FBV2tILE9BQU93eEIsUUFBVSxDQUVwQ3MrRSxFQUFJcHdGLFlBRUosTUFBTXNGLEVBQVFuckIsS0FBSzB6QixLQUFNblEsRUFBTzY4QixFQUFVbi9DLEVBQUksR0FBSXVrQixJQUFLNDZCLEVBQVVuL0MsS0FBUyxFQUFHLElBRTdFZy9DLEVBQVNoL0MsR0FBSXV5QixhQUFjMGlGLEVBQUlqc0UsaUJBQWtCZ3NFLEVBQUs5cUYsSUFJdkQ2cUYsRUFBVy8wRyxHQUFJczdCLGFBQWM2akIsRUFBVW4vQyxHQUFLZy9DLEVBQVNoL0MsSUFNdEQsSUFBZ0IsSUFBWDgwRyxFQUFrQixDQUV0QixJQUFJNXFGLEVBQVFuckIsS0FBSzB6QixLQUFNblEsRUFBTzA4QixFQUFTLEdBQUl6NkIsSUFBS3k2QixFQUFTNjFELEtBQWdCLEVBQUcsSUFDNUUzcUYsR0FBUzJxRixFQUVKMTFELEVBQVUsR0FBSTU2QixJQUFLeXdGLEVBQUkxNUUsYUFBYzBqQixFQUFTLEdBQUtBLEVBQVM2MUQsS0FBaUIsSUFFakYzcUYsR0FBVUEsR0FJWCxJQUFNLElBQUlscUIsRUFBSSxFQUFHQSxHQUFLNjBHLEVBQVU3MEcsSUFHL0JnL0MsRUFBU2gvQyxHQUFJdXlCLGFBQWMwaUYsRUFBSWpzRSxpQkFBa0JtVyxFQUFVbi9DLEdBQUtrcUIsRUFBUWxxQixJQUN4RSswRyxFQUFXLzBHLEdBQUlzN0IsYUFBYzZqQixFQUFVbi9DLEdBQUtnL0MsRUFBU2gvQyxJQU12RCxNQUFPLENBQ05tL0MsU0FBVUEsRUFDVkgsUUFBU0EsRUFDVCsxRCxVQUFXQSxHQUtiOXhGLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjcWIsS0FBTWhrQixNQUlyQ2drQixLQUFNK0ksR0FJTCxPQUZBL3NCLEtBQUtnMEcsbUJBQXFCam5GLEVBQU9pbkYsbUJBRTFCaDBHLEtBSVI0TCxTQUVDLE1BQU1vTSxFQUFPLENBQ1oyYSxTQUFVLENBQ1R4QyxRQUFTLElBQ1R0WixLQUFNLFFBQ04rYixVQUFXLGlCQU9iLE9BSEE1YSxFQUFLZzhGLG1CQUFxQmgwRyxLQUFLZzBHLG1CQUMvQmg4RixFQUFLbkIsS0FBTzdXLEtBQUs2VyxLQUVWbUIsRUFJUmkrRixTQUFVQyxHQUlULE9BRkFsMkcsS0FBS2cwRyxtQkFBcUJrQyxFQUFLbEMsbUJBRXhCaDBHLE1BTVQsTUFBTW0yRyxXQUFxQnBDLEdBRTFCcHJHLFlBQWF5dEcsRUFBSyxFQUFHQyxFQUFLLEVBQUdDLEVBQVUsRUFBR0MsRUFBVSxFQUFHQyxFQUFjLEVBQUdDLEVBQXNCLEVBQVY1MkcsS0FBS29ILEdBQVF5dkcsR0FBYSxFQUFPQyxFQUFZLEdBRWhJbGxGLFFBRUF6eEIsS0FBSzZXLEtBQU8sZUFFWjdXLEtBQUtvMkcsR0FBS0EsRUFDVnAyRyxLQUFLcTJHLEdBQUtBLEVBRVZyMkcsS0FBS3MyRyxRQUFVQSxFQUNmdDJHLEtBQUt1MkcsUUFBVUEsRUFFZnYyRyxLQUFLdzJHLFlBQWNBLEVBQ25CeDJHLEtBQUt5MkcsVUFBWUEsRUFFakJ6MkcsS0FBSzAyRyxXQUFhQSxFQUVsQjEyRyxLQUFLMjJHLFVBQVlBLEVBSWxCMUMsU0FBVWwwRyxFQUFHbzBHLEdBRVosTUFBTTUwRSxFQUFRNDBFLEdBQWtCLElBQUkzd0YsRUFFOUJvekYsRUFBa0IsRUFBVi8yRyxLQUFLb0gsR0FDbkIsSUFBSTR2RyxFQUFhNzJHLEtBQUt5MkcsVUFBWXoyRyxLQUFLdzJHLFlBQ3ZDLE1BQU1NLEVBQWFqM0csS0FBSzJSLElBQUtxbEcsR0FBZTd3RyxPQUFPd3hCLFFBR25ELEtBQVFxL0UsRUFBYSxHQUFJQSxHQUFjRCxFQUN2QyxLQUFRQyxFQUFhRCxHQUFRQyxHQUFjRCxFQUV0Q0MsRUFBYTd3RyxPQUFPd3hCLFVBSXZCcS9FLEVBRklDLEVBRVMsRUFJQUYsSUFNVSxJQUFwQjUyRyxLQUFLMDJHLFlBQXlCSSxJQUU3QkQsSUFBZUQsRUFFbkJDLEdBQWVELEVBSWZDLEdBQTBCRCxHQU01QixNQUFNanhGLEVBQVEzbEIsS0FBS3cyRyxZQUFjejJHLEVBQUk4MkcsRUFDckMsSUFBSWwyRyxFQUFJWCxLQUFLbzJHLEdBQUtwMkcsS0FBS3MyRyxRQUFVejJHLEtBQUttbkIsSUFBS3JCLEdBQ3ZDOWtCLEVBQUliLEtBQUtxMkcsR0FBS3IyRyxLQUFLdTJHLFFBQVUxMkcsS0FBS29uQixJQUFLdEIsR0FFM0MsR0FBd0IsSUFBbkIzbEIsS0FBSzIyRyxVQUFrQixDQUUzQixNQUFNM3ZGLEVBQU1ubkIsS0FBS21uQixJQUFLaG5CLEtBQUsyMkcsV0FDckIxdkYsRUFBTXBuQixLQUFLb25CLElBQUtqbkIsS0FBSzIyRyxXQUVyQmxzRixFQUFLOXBCLEVBQUlYLEtBQUtvMkcsR0FDZDFyRixFQUFLN3BCLEVBQUliLEtBQUtxMkcsR0FHcEIxMUcsRUFBSThwQixFQUFLekQsRUFBTTBELEVBQUt6RCxFQUFNam5CLEtBQUtvMkcsR0FDL0J2MUcsRUFBSTRwQixFQUFLeEQsRUFBTXlELEVBQUsxRCxFQUFNaG5CLEtBQUtxMkcsR0FJaEMsT0FBTzkyRSxFQUFNNXlCLElBQUtoTSxFQUFHRSxHQUl0Qm1qQixLQUFNK0ksR0FpQkwsT0FmQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLbzJHLEdBQUtycEYsRUFBT3FwRixHQUNqQnAyRyxLQUFLcTJHLEdBQUt0cEYsRUFBT3NwRixHQUVqQnIyRyxLQUFLczJHLFFBQVV2cEYsRUFBT3VwRixRQUN0QnQyRyxLQUFLdTJHLFFBQVV4cEYsRUFBT3dwRixRQUV0QnYyRyxLQUFLdzJHLFlBQWN6cEYsRUFBT3lwRixZQUMxQngyRyxLQUFLeTJHLFVBQVkxcEYsRUFBTzBwRixVQUV4QnoyRyxLQUFLMDJHLFdBQWEzcEYsRUFBTzJwRixXQUV6QjEyRyxLQUFLMjJHLFVBQVk1cEYsRUFBTzRwRixVQUVqQjMyRyxLQUlSNEwsU0FFQyxNQUFNb00sRUFBT3laLE1BQU03bEIsU0FlbkIsT0FiQW9NLEVBQUtvK0YsR0FBS3AyRyxLQUFLbzJHLEdBQ2ZwK0YsRUFBS3ErRixHQUFLcjJHLEtBQUtxMkcsR0FFZnIrRixFQUFLcytGLFFBQVV0MkcsS0FBS3MyRyxRQUNwQnQrRixFQUFLdStGLFFBQVV2MkcsS0FBS3UyRyxRQUVwQnYrRixFQUFLdytGLFlBQWN4MkcsS0FBS3cyRyxZQUN4QngrRixFQUFLeStGLFVBQVl6MkcsS0FBS3kyRyxVQUV0QnorRixFQUFLMCtGLFdBQWExMkcsS0FBSzAyRyxXQUV2QjErRixFQUFLMitGLFVBQVkzMkcsS0FBSzIyRyxVQUVmMytGLEVBSVJpK0YsU0FBVUMsR0FpQlQsT0FmQXprRixNQUFNd2tGLFNBQVVDLEdBRWhCbDJHLEtBQUtvMkcsR0FBS0YsRUFBS0UsR0FDZnAyRyxLQUFLcTJHLEdBQUtILEVBQUtHLEdBRWZyMkcsS0FBS3MyRyxRQUFVSixFQUFLSSxRQUNwQnQyRyxLQUFLdTJHLFFBQVVMLEVBQUtLLFFBRXBCdjJHLEtBQUt3MkcsWUFBY04sRUFBS00sWUFDeEJ4MkcsS0FBS3kyRyxVQUFZUCxFQUFLTyxVQUV0QnoyRyxLQUFLMDJHLFdBQWFSLEVBQUtRLFdBRXZCMTJHLEtBQUsyMkcsVUFBWVQsRUFBS1MsVUFFZjMyRyxNQU1UbTJHLEdBQWE1MkcsVUFBVXczRyxnQkFBaUIsRUFFeEMsTUFBTUMsV0FBaUJiLEdBRXRCeHRHLFlBQWF5dEcsRUFBSUMsRUFBSVksRUFBU1QsRUFBYUMsRUFBV0MsR0FFckRqbEYsTUFBTzJrRixFQUFJQyxFQUFJWSxFQUFTQSxFQUFTVCxFQUFhQyxFQUFXQyxHQUV6RDEyRyxLQUFLNlcsS0FBTyxZQTRCZCxTQUFTcWdHLEtBRVIsSUFBSUMsRUFBSyxFQUFHaC9FLEVBQUssRUFBR0MsRUFBSyxFQUFHQyxFQUFLLEVBVWpDLFNBQVN1c0MsRUFBTTl0QyxFQUFJSSxFQUFJZ08sRUFBSUMsR0FFMUJneUUsRUFBS3JnRixFQUNMcUIsRUFBSytNLEVBQ0w5TSxHQUFPLEVBQUl0QixFQUFLLEVBQUlJLEVBQUssRUFBSWdPLEVBQUtDLEVBQ2xDOU0sRUFBSyxFQUFJdkIsRUFBSyxFQUFJSSxFQUFLZ08sRUFBS0MsRUFJN0IsTUFBTyxDQUVOaXlFLGVBQWdCLFNBQVd0Z0YsRUFBSUksRUFBSWtULEVBQUlpdEUsRUFBSUMsR0FFMUMxeUMsRUFBTTF0QyxFQUFJa1QsRUFBSWt0RSxHQUFZbHRFLEVBQUt0VCxHQUFNd2dGLEdBQVlELEVBQUtuZ0YsS0FJdkRxZ0YseUJBQTBCLFNBQVd6Z0YsRUFBSUksRUFBSWtULEVBQUlpdEUsRUFBSUcsRUFBS0MsRUFBS0MsR0FHOUQsSUFBSXZ5RSxHQUFPak8sRUFBS0osR0FBTzBnRixHQUFRcHRFLEVBQUt0VCxJQUFTMGdGLEVBQU1DLElBQVVydEUsRUFBS2xULEdBQU91Z0YsRUFDckVuQyxHQUFPbHJFLEVBQUtsVCxHQUFPdWdGLEdBQVFKLEVBQUtuZ0YsSUFBU3VnRixFQUFNQyxJQUFVTCxFQUFLanRFLEdBQU9zdEUsRUFHekV2eUUsR0FBTXN5RSxFQUNObkMsR0FBTW1DLEVBRU43eUMsRUFBTTF0QyxFQUFJa1QsRUFBSWpGLEVBQUltd0UsSUFJbkJxQyxLQUFNLFNBQVc1M0csR0FFaEIsTUFBTXUxRyxFQUFLdjFHLEVBQUlBLEVBRWYsT0FBT28zRyxFQUFLaC9FLEVBQUtwNEIsRUFBSXE0QixFQUFLazlFLEVBQUtqOUUsR0FEcEJpOUUsRUFBS3YxRyxLQXBFbkJpM0csR0FBU3ozRyxVQUFVcTRHLFlBQWEsRUErRWhDLE1BQU14dEYsR0FBTSxJQUFJeVEsR0FDVmc5RSxHQUFLLElBQUlYLEdBQWFZLEdBQUssSUFBSVosR0FBYWEsR0FBSyxJQUFJYixHQUUzRCxNQUFNYyxXQUF5QmpFLEdBRTlCcHJHLFlBQWE4MUIsRUFBUyxHQUFJbTNFLEdBQVMsRUFBT3FDLEVBQVksY0FBZVgsRUFBVSxJQUU5RTdsRixRQUVBenhCLEtBQUs2VyxLQUFPLG1CQUVaN1csS0FBS3krQixPQUFTQSxFQUNkeitCLEtBQUs0MUcsT0FBU0EsRUFDZDUxRyxLQUFLaTRHLFVBQVlBLEVBQ2pCajRHLEtBQUtzM0csUUFBVUEsRUFJaEJyRCxTQUFVbDBHLEVBQUdvMEcsRUFBaUIsSUFBSXQ1RSxJQUVqQyxNQUFNMEUsRUFBUTQwRSxFQUVSMTFFLEVBQVN6K0IsS0FBS3krQixPQUNkaDlCLEVBQUlnOUIsRUFBTzMvQixPQUVYeUUsR0FBTTlCLEdBQU16QixLQUFLNDFHLE9BQVMsRUFBSSxJQUFRNzFHLEVBQzVDLElBY0lvaUMsRUFBSStSLEVBZEpna0UsRUFBV3I0RyxLQUFLcUwsTUFBTzNILEdBQ3ZCaW9FLEVBQVNqb0UsRUFBSTIwRyxFQUVabDRHLEtBQUs0MUcsT0FFVHNDLEdBQVlBLEVBQVcsRUFBSSxHQUFNcjRHLEtBQUtxTCxNQUFPckwsS0FBSzJSLElBQUswbUcsR0FBYXoyRyxHQUFNLEdBQU1BLEVBRTFELElBQVgrcEUsR0FBZ0Iwc0MsSUFBYXoyRyxFQUFJLElBRTVDeTJHLEVBQVd6MkcsRUFBSSxFQUNmK3BFLEVBQVMsR0FNTHhyRSxLQUFLNDFHLFFBQVVzQyxFQUFXLEVBRTlCLzFFLEVBQUsxRCxHQUFVeTVFLEVBQVcsR0FBTXoyRyxJQUtoQzJvQixHQUFJN0YsV0FBWWthLEVBQVEsR0FBS0EsRUFBUSxJQUFNeGEsSUFBS3dhLEVBQVEsSUFDeEQwRCxFQUFLL1gsSUFJTixNQUFNZ1ksRUFBSzNELEVBQVF5NUUsRUFBV3oyRyxHQUN4QjRnQyxFQUFLNUQsR0FBVXk1RSxFQUFXLEdBQU16MkcsR0FjdEMsR0FaS3pCLEtBQUs0MUcsUUFBVXNDLEVBQVcsRUFBSXoyRyxFQUVsQ3l5QyxFQUFLelYsR0FBVXk1RSxFQUFXLEdBQU16MkcsSUFLaEMyb0IsR0FBSTdGLFdBQVlrYSxFQUFRaDlCLEVBQUksR0FBS2c5QixFQUFRaDlCLEVBQUksSUFBTXdpQixJQUFLd2EsRUFBUWg5QixFQUFJLElBQ3BFeXlDLEVBQUs5cEIsSUFJa0IsZ0JBQW5CcHFCLEtBQUtpNEcsV0FBa0QsWUFBbkJqNEcsS0FBS2k0RyxVQUEwQixDQUd2RSxNQUFNdm9HLEVBQXlCLFlBQW5CMVAsS0FBS2k0RyxVQUEwQixHQUFNLElBQ2pELElBQUlULEVBQU0zM0csS0FBSzZQLElBQUt5eUIsRUFBR3JjLGtCQUFtQnNjLEdBQU0xeUIsR0FDNUMrbkcsRUFBTTUzRyxLQUFLNlAsSUFBSzB5QixFQUFHdGMsa0JBQW1CdWMsR0FBTTN5QixHQUM1Q2dvRyxFQUFNNzNHLEtBQUs2UCxJQUFLMnlCLEVBQUd2YyxrQkFBbUJvdUIsR0FBTXhrQyxHQUczQytuRyxFQUFNLE9BQU9BLEVBQU0sR0FDbkJELEVBQU0sT0FBT0EsRUFBTUMsR0FDbkJDLEVBQU0sT0FBT0EsRUFBTUQsR0FFeEJJLEdBQUdOLHlCQUEwQnAxRSxFQUFHeGhDLEVBQUd5aEMsRUFBR3poQyxFQUFHMGhDLEVBQUcxaEMsRUFBR3V6QyxFQUFHdnpDLEVBQUc2MkcsRUFBS0MsRUFBS0MsR0FDL0RJLEdBQUdQLHlCQUEwQnAxRSxFQUFHdGhDLEVBQUd1aEMsRUFBR3ZoQyxFQUFHd2hDLEVBQUd4aEMsRUFBR3F6QyxFQUFHcnpDLEVBQUcyMkcsRUFBS0MsRUFBS0MsR0FDL0RLLEdBQUdSLHlCQUEwQnAxRSxFQUFHamhDLEVBQUdraEMsRUFBR2xoQyxFQUFHbWhDLEVBQUduaEMsRUFBR2d6QyxFQUFHaHpDLEVBQUdzMkcsRUFBS0MsRUFBS0MsT0FFakMsZUFBbkIxM0csS0FBS2k0RyxZQUVoQkosR0FBR1QsZUFBZ0JqMUUsRUFBR3hoQyxFQUFHeWhDLEVBQUd6aEMsRUFBRzBoQyxFQUFHMWhDLEVBQUd1ekMsRUFBR3Z6QyxFQUFHWCxLQUFLczNHLFNBQ2hEUSxHQUFHVixlQUFnQmoxRSxFQUFHdGhDLEVBQUd1aEMsRUFBR3ZoQyxFQUFHd2hDLEVBQUd4aEMsRUFBR3F6QyxFQUFHcnpDLEVBQUdiLEtBQUtzM0csU0FDaERTLEdBQUdYLGVBQWdCajFFLEVBQUdqaEMsRUFBR2toQyxFQUFHbGhDLEVBQUdtaEMsRUFBR25oQyxFQUFHZ3pDLEVBQUdoekMsRUFBR2xCLEtBQUtzM0csVUFVakQsT0FOQS8zRSxFQUFNNXlCLElBQ0xrckcsR0FBR0YsS0FBTW5zQyxHQUNUc3NDLEdBQUdILEtBQU1uc0MsR0FDVHVzQyxHQUFHSixLQUFNbnNDLElBR0hqc0MsRUFJUnZiLEtBQU0rSSxHQUVMMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUt5K0IsT0FBUyxHQUVkLElBQU0sSUFBSTM5QixFQUFJLEVBQUdXLEVBQUlzckIsRUFBTzBSLE9BQU8zL0IsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFeEQsTUFBTXkrQixFQUFReFMsRUFBTzBSLE9BQVEzOUIsR0FFN0JkLEtBQUt5K0IsT0FBT2o4QixLQUFNKzhCLEVBQU14YixTQVF6QixPQUpBL2pCLEtBQUs0MUcsT0FBUzdvRixFQUFPNm9GLE9BQ3JCNTFHLEtBQUtpNEcsVUFBWWxyRixFQUFPa3JGLFVBQ3hCajRHLEtBQUtzM0csUUFBVXZxRixFQUFPdXFGLFFBRWZ0M0csS0FJUjRMLFNBRUMsTUFBTW9NLEVBQU95WixNQUFNN2xCLFNBRW5Cb00sRUFBS3ltQixPQUFTLEdBRWQsSUFBTSxJQUFJMzlCLEVBQUksRUFBR1csRUFBSXpCLEtBQUt5K0IsT0FBTzMvQixPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUV0RCxNQUFNeStCLEVBQVF2L0IsS0FBS3krQixPQUFRMzlCLEdBQzNCa1gsRUFBS3ltQixPQUFPajhCLEtBQU0rOEIsRUFBTTlZLFdBUXpCLE9BSkF6TyxFQUFLNDlGLE9BQVM1MUcsS0FBSzQxRyxPQUNuQjU5RixFQUFLaWdHLFVBQVlqNEcsS0FBS2k0RyxVQUN0QmpnRyxFQUFLcy9GLFFBQVV0M0csS0FBS3MzRyxRQUVidC9GLEVBSVJpK0YsU0FBVUMsR0FFVHprRixNQUFNd2tGLFNBQVVDLEdBRWhCbDJHLEtBQUt5K0IsT0FBUyxHQUVkLElBQU0sSUFBSTM5QixFQUFJLEVBQUdXLEVBQUl5MEcsRUFBS3ozRSxPQUFPMy9CLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXRELE1BQU15K0IsRUFBUTIyRSxFQUFLejNFLE9BQVEzOUIsR0FDM0JkLEtBQUt5K0IsT0FBT2o4QixNQUFNLElBQUlxNEIsSUFBVXRVLFVBQVdnWixJQVE1QyxPQUpBdi9CLEtBQUs0MUcsT0FBU00sRUFBS04sT0FDbkI1MUcsS0FBS2k0RyxVQUFZL0IsRUFBSytCLFVBQ3RCajRHLEtBQUtzM0csUUFBVXBCLEVBQUtvQixRQUVidDNHLE1BYVQsU0FBU200RyxHQUFZcDRHLEVBQUdvaUMsRUFBSUMsRUFBSUMsRUFBSTZSLEdBRW5DLE1BQU1qUyxFQUFtQixJQUFaSSxFQUFLRixHQUNaL2IsRUFBbUIsSUFBWjh0QixFQUFLOVIsR0FDWmt6RSxFQUFLdjFHLEVBQUlBLEVBRWYsT0FBUyxFQUFJcWlDLEVBQUssRUFBSUMsRUFBS0osRUFBSzdiLElBRHJCcm1CLEVBQUl1MUcsS0FDaUMsRUFBSWx6RSxFQUFLLEVBQUlDLEVBQUssRUFBSUosRUFBSzdiLEdBQU9rdkYsRUFBS3J6RSxFQUFLbGlDLEVBQUlxaUMsRUF5QmpHLFNBQVNnMkUsR0FBaUJyNEcsRUFBR29pQyxFQUFJQyxFQUFJQyxHQUVwQyxPQXJCRCxTQUE0QnRpQyxFQUFHd0QsR0FFOUIsTUFBTWIsRUFBSSxFQUFJM0MsRUFDZCxPQUFPMkMsRUFBSUEsRUFBSWEsRUFrQlI4MEcsQ0FBbUJ0NEcsRUFBR29pQyxHQWQ5QixTQUE0QnBpQyxFQUFHd0QsR0FFOUIsT0FBTyxHQUFNLEVBQUl4RCxHQUFNQSxFQUFJd0QsRUFZUyswRyxDQUFtQnY0RyxFQUFHcWlDLEdBUjNELFNBQTRCcmlDLEVBQUd3RCxHQUU5QixPQUFPeEQsRUFBSUEsRUFBSXdELEVBT2RnMUcsQ0FBbUJ4NEcsRUFBR3NpQyxHQWdDeEIsU0FBU20yRSxHQUFhejRHLEVBQUdvaUMsRUFBSUMsRUFBSUMsRUFBSTZSLEdBRXBDLE9BNUJELFNBQXdCbjBDLEVBQUd3RCxHQUUxQixNQUFNYixFQUFJLEVBQUkzQyxFQUNkLE9BQU8yQyxFQUFJQSxFQUFJQSxFQUFJYSxFQXlCWmsxRyxDQUFlMTRHLEVBQUdvaUMsR0FyQjFCLFNBQXdCcGlDLEVBQUd3RCxHQUUxQixNQUFNYixFQUFJLEVBQUkzQyxFQUNkLE9BQU8sRUFBSTJDLEVBQUlBLEVBQUkzQyxFQUFJd0QsRUFrQlNtMUcsQ0FBZTM0RyxFQUFHcWlDLEdBZG5ELFNBQXdCcmlDLEVBQUd3RCxHQUUxQixPQUFPLEdBQU0sRUFBSXhELEdBQU1BLEVBQUlBLEVBQUl3RCxFQVkwQm8xRyxDQUFlNTRHLEVBQUdzaUMsR0FSNUUsU0FBd0J0aUMsRUFBR3dELEdBRTFCLE9BQU94RCxFQUFJQSxFQUFJQSxFQUFJd0QsRUFPbEJxMUcsQ0FBZTc0RyxFQUFHbTBDLEdBNUVwQjhqRSxHQUFpQno0RyxVQUFVczVHLG9CQUFxQixFQWdGaEQsTUFBTUMsV0FBeUIvRSxHQUU5QnByRyxZQUFhczVCLEVBQUssSUFBSXplLEVBQVc0QyxFQUFLLElBQUk1QyxFQUFXNkMsRUFBSyxJQUFJN0MsRUFBV3UxRixFQUFLLElBQUl2MUYsR0FFakZpTyxRQUVBenhCLEtBQUs2VyxLQUFPLG1CQUVaN1csS0FBS2lpQyxHQUFLQSxFQUNWamlDLEtBQUtvbUIsR0FBS0EsRUFDVnBtQixLQUFLcW1CLEdBQUtBLEVBQ1ZybUIsS0FBSys0RyxHQUFLQSxFQUlYOUUsU0FBVWwwRyxFQUFHbzBHLEVBQWlCLElBQUkzd0YsR0FFakMsTUFBTStiLEVBQVE0MEUsRUFFUmx5RSxFQUFLamlDLEtBQUtpaUMsR0FBSTdiLEVBQUtwbUIsS0FBS29tQixHQUFJQyxFQUFLcm1CLEtBQUtxbUIsR0FBSTB5RixFQUFLLzRHLEtBQUsrNEcsR0FPMUQsT0FMQXg1RSxFQUFNNXlCLElBQ0w2ckcsR0FBYXo0RyxFQUFHa2lDLEVBQUd0aEMsRUFBR3lsQixFQUFHemxCLEVBQUcwbEIsRUFBRzFsQixFQUFHbzRHLEVBQUdwNEcsR0FDckM2M0csR0FBYXo0RyxFQUFHa2lDLEVBQUdwaEMsRUFBR3VsQixFQUFHdmxCLEVBQUd3bEIsRUFBR3hsQixFQUFHazRHLEVBQUdsNEcsSUFHL0IwK0IsRUFJUnZiLEtBQU0rSSxHQVNMLE9BUEEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS2lpQyxHQUFHamUsS0FBTStJLEVBQU9rVixJQUNyQmppQyxLQUFLb21CLEdBQUdwQyxLQUFNK0ksRUFBTzNHLElBQ3JCcG1CLEtBQUtxbUIsR0FBR3JDLEtBQU0rSSxFQUFPMUcsSUFDckJybUIsS0FBSys0RyxHQUFHLzBGLEtBQU0rSSxFQUFPZ3NGLElBRWQvNEcsS0FJUjRMLFNBRUMsTUFBTW9NLEVBQU95WixNQUFNN2xCLFNBT25CLE9BTEFvTSxFQUFLaXFCLEdBQUtqaUMsS0FBS2lpQyxHQUFHeGIsVUFDbEJ6TyxFQUFLb08sR0FBS3BtQixLQUFLb21CLEdBQUdLLFVBQ2xCek8sRUFBS3FPLEdBQUtybUIsS0FBS3FtQixHQUFHSSxVQUNsQnpPLEVBQUsrZ0csR0FBSy80RyxLQUFLKzRHLEdBQUd0eUYsVUFFWHpPLEVBSVJpK0YsU0FBVUMsR0FTVCxPQVBBemtGLE1BQU13a0YsU0FBVUMsR0FFaEJsMkcsS0FBS2lpQyxHQUFHMWIsVUFBVzJ2RixFQUFLajBFLElBQ3hCamlDLEtBQUtvbUIsR0FBR0csVUFBVzJ2RixFQUFLOXZGLElBQ3hCcG1CLEtBQUtxbUIsR0FBR0UsVUFBVzJ2RixFQUFLN3ZGLElBQ3hCcm1CLEtBQUsrNEcsR0FBR3h5RixVQUFXMnZGLEVBQUs2QyxJQUVqQi80RyxNQU1UODRHLEdBQWlCdjVHLFVBQVV5NUcsb0JBQXFCLEVBRWhELE1BQU1DLFdBQTBCbEYsR0FFL0JwckcsWUFBYXM1QixFQUFLLElBQUlwSCxHQUFXelUsRUFBSyxJQUFJeVUsR0FBV3hVLEVBQUssSUFBSXdVLEdBQVdrK0UsRUFBSyxJQUFJbCtFLElBRWpGcEosUUFFQXp4QixLQUFLNlcsS0FBTyxvQkFFWjdXLEtBQUtpaUMsR0FBS0EsRUFDVmppQyxLQUFLb21CLEdBQUtBLEVBQ1ZwbUIsS0FBS3FtQixHQUFLQSxFQUNWcm1CLEtBQUsrNEcsR0FBS0EsRUFJWDlFLFNBQVVsMEcsRUFBR28wRyxFQUFpQixJQUFJdDVFLElBRWpDLE1BQU0wRSxFQUFRNDBFLEVBRVJseUUsRUFBS2ppQyxLQUFLaWlDLEdBQUk3YixFQUFLcG1CLEtBQUtvbUIsR0FBSUMsRUFBS3JtQixLQUFLcW1CLEdBQUkweUYsRUFBSy80RyxLQUFLKzRHLEdBUTFELE9BTkF4NUUsRUFBTTV5QixJQUNMNnJHLEdBQWF6NEcsRUFBR2tpQyxFQUFHdGhDLEVBQUd5bEIsRUFBR3psQixFQUFHMGxCLEVBQUcxbEIsRUFBR280RyxFQUFHcDRHLEdBQ3JDNjNHLEdBQWF6NEcsRUFBR2tpQyxFQUFHcGhDLEVBQUd1bEIsRUFBR3ZsQixFQUFHd2xCLEVBQUd4bEIsRUFBR2s0RyxFQUFHbDRHLEdBQ3JDMjNHLEdBQWF6NEcsRUFBR2tpQyxFQUFHL2dDLEVBQUdrbEIsRUFBR2xsQixFQUFHbWxCLEVBQUdubEIsRUFBRzYzRyxFQUFHNzNHLElBRy9CcStCLEVBSVJ2YixLQUFNK0ksR0FTTCxPQVBBMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUtpaUMsR0FBR2plLEtBQU0rSSxFQUFPa1YsSUFDckJqaUMsS0FBS29tQixHQUFHcEMsS0FBTStJLEVBQU8zRyxJQUNyQnBtQixLQUFLcW1CLEdBQUdyQyxLQUFNK0ksRUFBTzFHLElBQ3JCcm1CLEtBQUsrNEcsR0FBRy8wRixLQUFNK0ksRUFBT2dzRixJQUVkLzRHLEtBSVI0TCxTQUVDLE1BQU1vTSxFQUFPeVosTUFBTTdsQixTQU9uQixPQUxBb00sRUFBS2lxQixHQUFLamlDLEtBQUtpaUMsR0FBR3hiLFVBQ2xCek8sRUFBS29PLEdBQUtwbUIsS0FBS29tQixHQUFHSyxVQUNsQnpPLEVBQUtxTyxHQUFLcm1CLEtBQUtxbUIsR0FBR0ksVUFDbEJ6TyxFQUFLK2dHLEdBQUsvNEcsS0FBSys0RyxHQUFHdHlGLFVBRVh6TyxFQUlSaStGLFNBQVVDLEdBU1QsT0FQQXprRixNQUFNd2tGLFNBQVVDLEdBRWhCbDJHLEtBQUtpaUMsR0FBRzFiLFVBQVcydkYsRUFBS2owRSxJQUN4QmppQyxLQUFLb21CLEdBQUdHLFVBQVcydkYsRUFBSzl2RixJQUN4QnBtQixLQUFLcW1CLEdBQUdFLFVBQVcydkYsRUFBSzd2RixJQUN4QnJtQixLQUFLKzRHLEdBQUd4eUYsVUFBVzJ2RixFQUFLNkMsSUFFakIvNEcsTUFNVGk1RyxHQUFrQjE1RyxVQUFVMjVHLHFCQUFzQixFQUVsRCxNQUFNQyxXQUFrQnBGLEdBRXZCcHJHLFlBQWF5ZCxFQUFLLElBQUk1QyxFQUFXNkMsRUFBSyxJQUFJN0MsR0FFekNpTyxRQUVBenhCLEtBQUs2VyxLQUFPLFlBRVo3VyxLQUFLb21CLEdBQUtBLEVBQ1ZwbUIsS0FBS3FtQixHQUFLQSxFQUlYNHRGLFNBQVVsMEcsRUFBR28wRyxFQUFpQixJQUFJM3dGLEdBRWpDLE1BQU0rYixFQUFRNDBFLEVBYWQsT0FYVyxJQUFOcDBHLEVBRUp3L0IsRUFBTXZiLEtBQU1oa0IsS0FBS3FtQixLQUlqQmtaLEVBQU12YixLQUFNaGtCLEtBQUtxbUIsSUFBSy9CLElBQUt0a0IsS0FBS29tQixJQUNoQ21aLEVBQU03YSxlQUFnQjNrQixHQUFJa2tCLElBQUtqa0IsS0FBS29tQixLQUk5Qm1aLEVBS1IyMEUsV0FBWTEwRyxFQUFHMjBHLEdBRWQsT0FBT24wRyxLQUFLaTBHLFNBQVV6MEcsRUFBRzIwRyxHQUkxQmtCLFdBQVl0MUcsRUFBR28wRyxHQUVkLE1BQU05MEQsRUFBVTgwRCxHQUFrQixJQUFJM3dGLEVBSXRDLE9BRkE2N0IsRUFBUXI3QixLQUFNaGtCLEtBQUtxbUIsSUFBSy9CLElBQUt0a0IsS0FBS29tQixJQUFLVixZQUVoQzI1QixFQUlScjdCLEtBQU0rSSxHQU9MLE9BTEEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS29tQixHQUFHcEMsS0FBTStJLEVBQU8zRyxJQUNyQnBtQixLQUFLcW1CLEdBQUdyQyxLQUFNK0ksRUFBTzFHLElBRWRybUIsS0FJUjRMLFNBRUMsTUFBTW9NLEVBQU95WixNQUFNN2xCLFNBS25CLE9BSEFvTSxFQUFLb08sR0FBS3BtQixLQUFLb21CLEdBQUdLLFVBQ2xCek8sRUFBS3FPLEdBQUtybUIsS0FBS3FtQixHQUFHSSxVQUVYek8sRUFJUmkrRixTQUFVQyxHQU9ULE9BTEF6a0YsTUFBTXdrRixTQUFVQyxHQUVoQmwyRyxLQUFLb21CLEdBQUdHLFVBQVcydkYsRUFBSzl2RixJQUN4QnBtQixLQUFLcW1CLEdBQUdFLFVBQVcydkYsRUFBSzd2RixJQUVqQnJtQixNQU1UbTVHLEdBQVU1NUcsVUFBVTY1RyxhQUFjLEVBd0VsQyxNQUFNQyxXQUE2QnRGLEdBRWxDcHJHLFlBQWFzNUIsRUFBSyxJQUFJemUsRUFBVzRDLEVBQUssSUFBSTVDLEVBQVc2QyxFQUFLLElBQUk3QyxHQUU3RGlPLFFBRUF6eEIsS0FBSzZXLEtBQU8sdUJBRVo3VyxLQUFLaWlDLEdBQUtBLEVBQ1ZqaUMsS0FBS29tQixHQUFLQSxFQUNWcG1CLEtBQUtxbUIsR0FBS0EsRUFJWDR0RixTQUFVbDBHLEVBQUdvMEcsRUFBaUIsSUFBSTN3RixHQUVqQyxNQUFNK2IsRUFBUTQwRSxFQUVSbHlFLEVBQUtqaUMsS0FBS2lpQyxHQUFJN2IsRUFBS3BtQixLQUFLb21CLEdBQUlDLEVBQUtybUIsS0FBS3FtQixHQU81QyxPQUxBa1osRUFBTTV5QixJQUNMeXJHLEdBQWlCcjRHLEVBQUdraUMsRUFBR3RoQyxFQUFHeWxCLEVBQUd6bEIsRUFBRzBsQixFQUFHMWxCLEdBQ25DeTNHLEdBQWlCcjRHLEVBQUdraUMsRUFBR3BoQyxFQUFHdWxCLEVBQUd2bEIsRUFBR3dsQixFQUFHeGxCLElBRzdCMCtCLEVBSVJ2YixLQUFNK0ksR0FRTCxPQU5BMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUtpaUMsR0FBR2plLEtBQU0rSSxFQUFPa1YsSUFDckJqaUMsS0FBS29tQixHQUFHcEMsS0FBTStJLEVBQU8zRyxJQUNyQnBtQixLQUFLcW1CLEdBQUdyQyxLQUFNK0ksRUFBTzFHLElBRWRybUIsS0FJUjRMLFNBRUMsTUFBTW9NLEVBQU95WixNQUFNN2xCLFNBTW5CLE9BSkFvTSxFQUFLaXFCLEdBQUtqaUMsS0FBS2lpQyxHQUFHeGIsVUFDbEJ6TyxFQUFLb08sR0FBS3BtQixLQUFLb21CLEdBQUdLLFVBQ2xCek8sRUFBS3FPLEdBQUtybUIsS0FBS3FtQixHQUFHSSxVQUVYek8sRUFJUmkrRixTQUFVQyxHQVFULE9BTkF6a0YsTUFBTXdrRixTQUFVQyxHQUVoQmwyRyxLQUFLaWlDLEdBQUcxYixVQUFXMnZGLEVBQUtqMEUsSUFDeEJqaUMsS0FBS29tQixHQUFHRyxVQUFXMnZGLEVBQUs5dkYsSUFDeEJwbUIsS0FBS3FtQixHQUFHRSxVQUFXMnZGLEVBQUs3dkYsSUFFakJybUIsTUFNVHE1RyxHQUFxQjk1RyxVQUFVKzVHLHdCQUF5QixFQUV4RCxNQUFNQyxXQUE4QnhGLEdBRW5DcHJHLFlBQWFzNUIsRUFBSyxJQUFJcEgsR0FBV3pVLEVBQUssSUFBSXlVLEdBQVd4VSxFQUFLLElBQUl3VSxJQUU3RHBKLFFBRUF6eEIsS0FBSzZXLEtBQU8sd0JBRVo3VyxLQUFLaWlDLEdBQUtBLEVBQ1ZqaUMsS0FBS29tQixHQUFLQSxFQUNWcG1CLEtBQUtxbUIsR0FBS0EsRUFJWDR0RixTQUFVbDBHLEVBQUdvMEcsRUFBaUIsSUFBSXQ1RSxJQUVqQyxNQUFNMEUsRUFBUTQwRSxFQUVSbHlFLEVBQUtqaUMsS0FBS2lpQyxHQUFJN2IsRUFBS3BtQixLQUFLb21CLEdBQUlDLEVBQUtybUIsS0FBS3FtQixHQVE1QyxPQU5Ba1osRUFBTTV5QixJQUNMeXJHLEdBQWlCcjRHLEVBQUdraUMsRUFBR3RoQyxFQUFHeWxCLEVBQUd6bEIsRUFBRzBsQixFQUFHMWxCLEdBQ25DeTNHLEdBQWlCcjRHLEVBQUdraUMsRUFBR3BoQyxFQUFHdWxCLEVBQUd2bEIsRUFBR3dsQixFQUFHeGxCLEdBQ25DdTNHLEdBQWlCcjRHLEVBQUdraUMsRUFBRy9nQyxFQUFHa2xCLEVBQUdsbEIsRUFBR21sQixFQUFHbmxCLElBRzdCcStCLEVBSVJ2YixLQUFNK0ksR0FRTCxPQU5BMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUtpaUMsR0FBR2plLEtBQU0rSSxFQUFPa1YsSUFDckJqaUMsS0FBS29tQixHQUFHcEMsS0FBTStJLEVBQU8zRyxJQUNyQnBtQixLQUFLcW1CLEdBQUdyQyxLQUFNK0ksRUFBTzFHLElBRWRybUIsS0FJUjRMLFNBRUMsTUFBTW9NLEVBQU95WixNQUFNN2xCLFNBTW5CLE9BSkFvTSxFQUFLaXFCLEdBQUtqaUMsS0FBS2lpQyxHQUFHeGIsVUFDbEJ6TyxFQUFLb08sR0FBS3BtQixLQUFLb21CLEdBQUdLLFVBQ2xCek8sRUFBS3FPLEdBQUtybUIsS0FBS3FtQixHQUFHSSxVQUVYek8sRUFJUmkrRixTQUFVQyxHQVFULE9BTkF6a0YsTUFBTXdrRixTQUFVQyxHQUVoQmwyRyxLQUFLaWlDLEdBQUcxYixVQUFXMnZGLEVBQUtqMEUsSUFDeEJqaUMsS0FBS29tQixHQUFHRyxVQUFXMnZGLEVBQUs5dkYsSUFDeEJwbUIsS0FBS3FtQixHQUFHRSxVQUFXMnZGLEVBQUs3dkYsSUFFakJybUIsTUFNVHU1RyxHQUFzQmg2RyxVQUFVaTZHLHlCQUEwQixFQUUxRCxNQUFNQyxXQUFvQjFGLEdBRXpCcHJHLFlBQWE4MUIsRUFBUyxJQUVyQmhOLFFBRUF6eEIsS0FBSzZXLEtBQU8sY0FFWjdXLEtBQUt5K0IsT0FBU0EsRUFJZncxRSxTQUFVbDBHLEVBQUdvMEcsRUFBaUIsSUFBSTN3RixHQUVqQyxNQUFNK2IsRUFBUTQwRSxFQUVSMTFFLEVBQVN6K0IsS0FBS3krQixPQUNkbDdCLEdBQU1rN0IsRUFBTzMvQixPQUFTLEdBQU1pQixFQUU1Qm00RyxFQUFXcjRHLEtBQUtxTCxNQUFPM0gsR0FDdkJpb0UsRUFBU2pvRSxFQUFJMjBHLEVBRWIvMUUsRUFBSzFELEVBQXFCLElBQWJ5NUUsRUFBaUJBLEVBQVdBLEVBQVcsR0FDcEQ5MUUsRUFBSzNELEVBQVF5NUUsR0FDYjcxRSxFQUFLNUQsRUFBUXk1RSxFQUFXejVFLEVBQU8zL0IsT0FBUyxFQUFJMi9CLEVBQU8zL0IsT0FBUyxFQUFJbzVHLEVBQVcsR0FDM0Voa0UsRUFBS3pWLEVBQVF5NUUsRUFBV3o1RSxFQUFPMy9CLE9BQVMsRUFBSTIvQixFQUFPMy9CLE9BQVMsRUFBSW81RyxFQUFXLEdBT2pGLE9BTEEzNEUsRUFBTTV5QixJQUNMd3JHLEdBQVkzc0MsRUFBUXJwQyxFQUFHeGhDLEVBQUd5aEMsRUFBR3poQyxFQUFHMGhDLEVBQUcxaEMsRUFBR3V6QyxFQUFHdnpDLEdBQ3pDdzNHLEdBQVkzc0MsRUFBUXJwQyxFQUFHdGhDLEVBQUd1aEMsRUFBR3ZoQyxFQUFHd2hDLEVBQUd4aEMsRUFBR3F6QyxFQUFHcnpDLElBR25DMCtCLEVBSVJ2YixLQUFNK0ksR0FFTDBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLeStCLE9BQVMsR0FFZCxJQUFNLElBQUkzOUIsRUFBSSxFQUFHVyxFQUFJc3JCLEVBQU8wUixPQUFPMy9CLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXhELE1BQU15K0IsRUFBUXhTLEVBQU8wUixPQUFRMzlCLEdBRTdCZCxLQUFLeStCLE9BQU9qOEIsS0FBTSs4QixFQUFNeGIsU0FJekIsT0FBTy9qQixLQUlSNEwsU0FFQyxNQUFNb00sRUFBT3laLE1BQU03bEIsU0FFbkJvTSxFQUFLeW1CLE9BQVMsR0FFZCxJQUFNLElBQUkzOUIsRUFBSSxFQUFHVyxFQUFJekIsS0FBS3krQixPQUFPMy9CLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXRELE1BQU15K0IsRUFBUXYvQixLQUFLeStCLE9BQVEzOUIsR0FDM0JrWCxFQUFLeW1CLE9BQU9qOEIsS0FBTSs4QixFQUFNOVksV0FJekIsT0FBT3pPLEVBSVJpK0YsU0FBVUMsR0FFVHprRixNQUFNd2tGLFNBQVVDLEdBRWhCbDJHLEtBQUt5K0IsT0FBUyxHQUVkLElBQU0sSUFBSTM5QixFQUFJLEVBQUdXLEVBQUl5MEcsRUFBS3ozRSxPQUFPMy9CLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXRELE1BQU15K0IsRUFBUTIyRSxFQUFLejNFLE9BQVEzOUIsR0FDM0JkLEtBQUt5K0IsT0FBT2o4QixNQUFNLElBQUlnaEIsR0FBVStDLFVBQVdnWixJQUk1QyxPQUFPdi9CLE1BTVR5NUcsR0FBWWw2RyxVQUFVbTZHLGVBQWdCLEVBRXRDLElBQUlDLEdBQXNCejZHLE9BQU91UCxPQUFPLENBQ3ZDaEcsVUFBVyxLQUNYdXVHLFNBQVVBLEdBQ1ZnQixpQkFBa0JBLEdBQ2xCYyxpQkFBa0JBLEdBQ2xCRyxrQkFBbUJBLEdBQ25COUMsYUFBY0EsR0FDZGdELFVBQVdBLEdBQ1hTLFdBclRELGNBQXlCN0YsR0FFeEJwckcsWUFBYXlkLEVBQUssSUFBSXlVLEdBQVd4VSxFQUFLLElBQUl3VSxJQUV6Q3BKLFFBRUF6eEIsS0FBSzZXLEtBQU8sYUFDWjdXLEtBQUs2NUcsY0FBZSxFQUVwQjc1RyxLQUFLb21CLEdBQUtBLEVBQ1ZwbUIsS0FBS3FtQixHQUFLQSxFQUdYNHRGLFNBQVVsMEcsRUFBR28wRyxFQUFpQixJQUFJdDVFLElBRWpDLE1BQU0wRSxFQUFRNDBFLEVBYWQsT0FYVyxJQUFOcDBHLEVBRUp3L0IsRUFBTXZiLEtBQU1oa0IsS0FBS3FtQixLQUlqQmtaLEVBQU12YixLQUFNaGtCLEtBQUtxbUIsSUFBSy9CLElBQUt0a0IsS0FBS29tQixJQUNoQ21aLEVBQU03YSxlQUFnQjNrQixHQUFJa2tCLElBQUtqa0IsS0FBS29tQixLQUk5Qm1aLEVBSVIyMEUsV0FBWTEwRyxFQUFHMjBHLEdBRWQsT0FBT24wRyxLQUFLaTBHLFNBQVV6MEcsRUFBRzIwRyxHQUcxQm53RixLQUFNK0ksR0FPTCxPQUxBMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUtvbUIsR0FBR3BDLEtBQU0rSSxFQUFPM0csSUFDckJwbUIsS0FBS3FtQixHQUFHckMsS0FBTStJLEVBQU8xRyxJQUVkcm1CLEtBR1I0TCxTQUVDLE1BQU1vTSxFQUFPeVosTUFBTTdsQixTQUtuQixPQUhBb00sRUFBS29PLEdBQUtwbUIsS0FBS29tQixHQUFHSyxVQUNsQnpPLEVBQUtxTyxHQUFLcm1CLEtBQUtxbUIsR0FBR0ksVUFFWHpPLEVBR1JpK0YsU0FBVUMsR0FPVCxPQUxBemtGLE1BQU13a0YsU0FBVUMsR0FFaEJsMkcsS0FBS29tQixHQUFHRyxVQUFXMnZGLEVBQUs5dkYsSUFDeEJwbUIsS0FBS3FtQixHQUFHRSxVQUFXMnZGLEVBQUs3dkYsSUFFakJybUIsT0FzUFJxNUcscUJBQXNCQSxHQUN0QkUsc0JBQXVCQSxHQUN2QkUsWUFBYUEsS0FRZCxNQUFNSyxXQUFrQi9GLEdBRXZCcHJHLGNBRUM4b0IsUUFFQXp4QixLQUFLNlcsS0FBTyxZQUVaN1csS0FBSys1RyxPQUFTLEdBQ2QvNUcsS0FBS2c2RyxXQUFZLEVBSWxCLzFGLElBQUtnMkYsR0FFSmo2RyxLQUFLKzVHLE9BQU92M0csS0FBTXkzRyxHQUluQkMsWUFHQyxNQUFNQyxFQUFhbjZHLEtBQUsrNUcsT0FBUSxHQUFJOUYsU0FBVSxHQUN4Q21HLEVBQVdwNkcsS0FBSys1RyxPQUFRLzVHLEtBQUsrNUcsT0FBT2o3RyxPQUFTLEdBQUltMUcsU0FBVSxHQUUxRGtHLEVBQVc3ekYsT0FBUTh6RixJQUV6QnA2RyxLQUFLKzVHLE9BQU92M0csS0FBTSxJQUFJMjJHLEdBQVdpQixFQUFVRCxJQWU3Q2xHLFNBQVVsMEcsRUFBR28wRyxHQUVaLE1BQU03eEcsRUFBSXZDLEVBQUlDLEtBQUt3MEcsWUFDYjZGLEVBQWVyNkcsS0FBS3M2RyxrQkFDMUIsSUFBSXg1RyxFQUFJLEVBSVIsS0FBUUEsRUFBSXU1RyxFQUFhdjdHLFFBQVMsQ0FFakMsR0FBS3U3RyxFQUFjdjVHLElBQU93QixFQUFJLENBRTdCLE1BQU1pNEcsRUFBT0YsRUFBY3Y1RyxHQUFNd0IsRUFDM0IyM0csRUFBUWo2RyxLQUFLKzVHLE9BQVFqNUcsR0FFckIwNUcsRUFBZ0JQLEVBQU16RixZQUN0QmgxRyxFQUFzQixJQUFsQmc3RyxFQUFzQixFQUFJLEVBQUlELEVBQU9DLEVBRS9DLE9BQU9QLEVBQU0vRixXQUFZMTBHLEVBQUcyMEcsR0FJN0JyekcsSUFJRCxPQUFPLEtBVVIwekcsWUFFQyxNQUFNaUcsRUFBT3o2RyxLQUFLczZHLGtCQUNsQixPQUFPRyxFQUFNQSxFQUFLMzdHLE9BQVMsR0FLNUJnMkcsbUJBRUM5MEcsS0FBS293QixhQUFjLEVBQ25CcHdCLEtBQUswNkcsYUFBZSxLQUNwQjE2RyxLQUFLczZHLGtCQU9OQSxrQkFJQyxHQUFLdDZHLEtBQUswNkcsY0FBZ0IxNkcsS0FBSzA2RyxhQUFhNTdHLFNBQVdrQixLQUFLKzVHLE9BQU9qN0csT0FFbEUsT0FBT2tCLEtBQUswNkcsYUFPYixNQUFNakcsRUFBVSxHQUNoQixJQUFJa0csRUFBTyxFQUVYLElBQU0sSUFBSTc1RyxFQUFJLEVBQUdXLEVBQUl6QixLQUFLKzVHLE9BQU9qN0csT0FBUWdDLEVBQUlXLEVBQUdYLElBRS9DNjVHLEdBQVEzNkcsS0FBSys1RyxPQUFRajVHLEdBQUkwekcsWUFDekJDLEVBQVFqeUcsS0FBTW00RyxHQU1mLE9BRkEzNkcsS0FBSzA2RyxhQUFlakcsRUFFYkEsRUFJUkYsZ0JBQWlCRCxFQUFZLElBRTVCLE1BQU03MUUsRUFBUyxHQUVmLElBQU0sSUFBSTM5QixFQUFJLEVBQUdBLEdBQUt3ekcsRUFBV3h6RyxJQUVoQzI5QixFQUFPajhCLEtBQU14QyxLQUFLaTBHLFNBQVVuekcsRUFBSXd6RyxJQVVqQyxPQU5LdDBHLEtBQUtnNkcsV0FFVHY3RSxFQUFPajhCLEtBQU1pOEIsRUFBUSxJQUlmQSxFQUlSNDFFLFVBQVdDLEVBQVksSUFFdEIsTUFBTTcxRSxFQUFTLEdBQ2YsSUFBSW8yRSxFQUVKLElBQU0sSUFBSS96RyxFQUFJLEVBQUdpNUcsRUFBUy81RyxLQUFLKzVHLE9BQVFqNUcsRUFBSWk1RyxFQUFPajdHLE9BQVFnQyxJQUFPLENBRWhFLE1BQU1tNUcsRUFBUUYsRUFBUWo1RyxHQUNoQjZtRixFQUFhc3lCLEVBQU1sRCxlQUE2QixFQUFaekMsRUFDckMyRixFQUFNYixhQUFlYSxFQUFNSixhQUFpQixFQUM3Q0ksRUFBTVAsY0FBZ0JwRixFQUFZMkYsRUFBTXg3RSxPQUFPMy9CLE9BQzlDdzFHLEVBRUNzRyxFQUFNWCxFQUFNNUYsVUFBVzFzQixHQUU3QixJQUFNLElBQUkzbUYsRUFBSSxFQUFHQSxFQUFJNDVHLEVBQUk5N0csT0FBUWtDLElBQU8sQ0FFdkMsTUFBTXUrQixFQUFRcTdFLEVBQUs1NUcsR0FFZDZ6RyxHQUFRQSxFQUFLdnVGLE9BQVFpWixLQUUxQmQsRUFBT2o4QixLQUFNKzhCLEdBQ2JzMUUsRUFBT3QxRSxJQVlULE9BTkt2L0IsS0FBS2c2RyxXQUFhdjdFLEVBQU8zL0IsT0FBUyxJQUFPMi9CLEVBQVFBLEVBQU8zL0IsT0FBUyxHQUFJd25CLE9BQVFtWSxFQUFRLEtBRXpGQSxFQUFPajhCLEtBQU1pOEIsRUFBUSxJQUlmQSxFQUlSemEsS0FBTStJLEdBRUwwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBSys1RyxPQUFTLEdBRWQsSUFBTSxJQUFJajVHLEVBQUksRUFBR1csRUFBSXNyQixFQUFPZ3RGLE9BQU9qN0csT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFeEQsTUFBTW01RyxFQUFRbHRGLEVBQU9ndEYsT0FBUWo1RyxHQUU3QmQsS0FBSys1RyxPQUFPdjNHLEtBQU15M0csRUFBTWwyRixTQU16QixPQUZBL2pCLEtBQUtnNkcsVUFBWWp0RixFQUFPaXRGLFVBRWpCaDZHLEtBSVI0TCxTQUVDLE1BQU1vTSxFQUFPeVosTUFBTTdsQixTQUVuQm9NLEVBQUtnaUcsVUFBWWg2RyxLQUFLZzZHLFVBQ3RCaGlHLEVBQUsraEcsT0FBUyxHQUVkLElBQU0sSUFBSWo1RyxFQUFJLEVBQUdXLEVBQUl6QixLQUFLKzVHLE9BQU9qN0csT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFdEQsTUFBTW01RyxFQUFRajZHLEtBQUsrNUcsT0FBUWo1RyxHQUMzQmtYLEVBQUsraEcsT0FBT3YzRyxLQUFNeTNHLEVBQU1ydUcsVUFJekIsT0FBT29NLEVBSVJpK0YsU0FBVUMsR0FFVHprRixNQUFNd2tGLFNBQVVDLEdBRWhCbDJHLEtBQUtnNkcsVUFBWTlELEVBQUs4RCxVQUN0Qmg2RyxLQUFLKzVHLE9BQVMsR0FFZCxJQUFNLElBQUlqNUcsRUFBSSxFQUFHVyxFQUFJeTBHLEVBQUs2RCxPQUFPajdHLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXRELE1BQU1tNUcsRUFBUS9ELEVBQUs2RCxPQUFRajVHLEdBQzNCZCxLQUFLKzVHLE9BQU92M0csTUFBTSxJQUFJbTNHLEdBQVFNLEVBQU1wakcsT0FBU28vRixTQUFVZ0UsSUFJeEQsT0FBT2o2RyxNQU1ULE1BQU02NkcsV0FBYWYsR0FFbEJueEcsWUFBYTgxQixHQUVaaE4sUUFDQXp4QixLQUFLNlcsS0FBTyxPQUVaN1csS0FBSzg2RyxhQUFlLElBQUl0M0YsRUFFbkJpYixHQUVKeitCLEtBQUt3K0IsY0FBZUMsR0FNdEJELGNBQWVDLEdBRWR6K0IsS0FBS3NILE9BQVFtM0IsRUFBUSxHQUFJOTlCLEVBQUc4OUIsRUFBUSxHQUFJNTlCLEdBRXhDLElBQU0sSUFBSUMsRUFBSSxFQUFHVyxFQUFJZzlCLEVBQU8zL0IsT0FBUWdDLEVBQUlXLEVBQUdYLElBRTFDZCxLQUFLdUgsT0FBUWszQixFQUFRMzlCLEdBQUlILEVBQUc4OUIsRUFBUTM5QixHQUFJRCxHQUl6QyxPQUFPYixLQUlSc0gsT0FBUTNHLEVBQUdFLEdBSVYsT0FGQWIsS0FBSzg2RyxhQUFhbnVHLElBQUtoTSxFQUFHRSxHQUVuQmIsS0FJUnVILE9BQVE1RyxFQUFHRSxHQUVWLE1BQU1vNUcsRUFBUSxJQUFJZCxHQUFXbjVHLEtBQUs4NkcsYUFBYS8yRixRQUFTLElBQUlQLEVBQVM3aUIsRUFBR0UsSUFLeEUsT0FKQWIsS0FBSys1RyxPQUFPdjNHLEtBQU15M0csR0FFbEJqNkcsS0FBSzg2RyxhQUFhbnVHLElBQUtoTSxFQUFHRSxHQUVuQmIsS0FJUis2RyxpQkFBa0JDLEVBQU1DLEVBQU03RSxFQUFJQyxHQUVqQyxNQUFNNEQsRUFBUSxJQUFJWixHQUNqQnI1RyxLQUFLODZHLGFBQWEvMkYsUUFDbEIsSUFBSVAsRUFBU3czRixFQUFNQyxHQUNuQixJQUFJejNGLEVBQVM0eUYsRUFBSUMsSUFPbEIsT0FKQXIyRyxLQUFLKzVHLE9BQU92M0csS0FBTXkzRyxHQUVsQmo2RyxLQUFLODZHLGFBQWFudUcsSUFBS3lwRyxFQUFJQyxHQUVwQnIyRyxLQUlSazdHLGNBQWVDLEVBQU9DLEVBQU9DLEVBQU9DLEVBQU9sRixFQUFJQyxHQUU5QyxNQUFNNEQsRUFBUSxJQUFJbkIsR0FDakI5NEcsS0FBSzg2RyxhQUFhLzJGLFFBQ2xCLElBQUlQLEVBQVMyM0YsRUFBT0MsR0FDcEIsSUFBSTUzRixFQUFTNjNGLEVBQU9DLEdBQ3BCLElBQUk5M0YsRUFBUzR5RixFQUFJQyxJQU9sQixPQUpBcjJHLEtBQUsrNUcsT0FBT3YzRyxLQUFNeTNHLEdBRWxCajZHLEtBQUs4NkcsYUFBYW51RyxJQUFLeXBHLEVBQUlDLEdBRXBCcjJHLEtBSVJ1N0csV0FBWVgsR0FFWCxNQUFNWSxFQUFPLENBQUV4N0csS0FBSzg2RyxhQUFhLzJGLFNBQVV2WSxPQUFRb3ZHLEdBRTdDWCxFQUFRLElBQUlSLEdBQWErQixHQUsvQixPQUpBeDdHLEtBQUsrNUcsT0FBT3YzRyxLQUFNeTNHLEdBRWxCajZHLEtBQUs4NkcsYUFBYTkyRixLQUFNNDJGLEVBQUtBLEVBQUk5N0csT0FBUyxJQUVuQ2tCLEtBSVJnSCxJQUFLb3ZHLEVBQUlDLEVBQUlZLEVBQVNULEVBQWFDLEVBQVdDLEdBRTdDLE1BQU01L0UsRUFBSzkyQixLQUFLODZHLGFBQWFuNkcsRUFDdkJvMkIsRUFBSy8yQixLQUFLODZHLGFBQWFqNkcsRUFLN0IsT0FIQWIsS0FBS3k3RyxPQUFRckYsRUFBS3QvRSxFQUFJdS9FLEVBQUt0L0UsRUFBSWtnRixFQUM5QlQsRUFBYUMsRUFBV0MsR0FFbEIxMkcsS0FJUnk3RyxPQUFRckYsRUFBSUMsRUFBSVksRUFBU1QsRUFBYUMsRUFBV0MsR0FJaEQsT0FGQTEyRyxLQUFLMDdHLFdBQVl0RixFQUFJQyxFQUFJWSxFQUFTQSxFQUFTVCxFQUFhQyxFQUFXQyxHQUU1RDEyRyxLQUlSMjdHLFFBQVN2RixFQUFJQyxFQUFJQyxFQUFTQyxFQUFTQyxFQUFhQyxFQUFXQyxFQUFZQyxHQUV0RSxNQUFNNy9FLEVBQUs5MkIsS0FBSzg2RyxhQUFhbjZHLEVBQ3ZCbzJCLEVBQUsvMkIsS0FBSzg2RyxhQUFhajZHLEVBSTdCLE9BRkFiLEtBQUswN0csV0FBWXRGLEVBQUt0L0UsRUFBSXUvRSxFQUFLdC9FLEVBQUl1L0UsRUFBU0MsRUFBU0MsRUFBYUMsRUFBV0MsRUFBWUMsR0FFbEYzMkcsS0FJUjA3RyxXQUFZdEYsRUFBSUMsRUFBSUMsRUFBU0MsRUFBU0MsRUFBYUMsRUFBV0MsRUFBWUMsR0FFekUsTUFBTXNELEVBQVEsSUFBSTlELEdBQWNDLEVBQUlDLEVBQUlDLEVBQVNDLEVBQVNDLEVBQWFDLEVBQVdDLEVBQVlDLEdBRTlGLEdBQUszMkcsS0FBSys1RyxPQUFPajdHLE9BQVMsRUFBSSxDQUc3QixNQUFNODhHLEVBQWEzQixFQUFNaEcsU0FBVSxHQUU1QjJILEVBQVd0MUYsT0FBUXRtQixLQUFLODZHLGVBRTlCOTZHLEtBQUt1SCxPQUFRcTBHLEVBQVdqN0csRUFBR2k3RyxFQUFXLzZHLEdBTXhDYixLQUFLKzVHLE9BQU92M0csS0FBTXkzRyxHQUVsQixNQUFNNEIsRUFBWTVCLEVBQU1oRyxTQUFVLEdBR2xDLE9BRkFqMEcsS0FBSzg2RyxhQUFhOTJGLEtBQU02M0YsR0FFakI3N0csS0FJUmdrQixLQUFNK0ksR0FNTCxPQUpBMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUs4NkcsYUFBYTkyRixLQUFNK0ksRUFBTyt0RixjQUV4Qjk2RyxLQUlSNEwsU0FFQyxNQUFNb00sRUFBT3laLE1BQU03bEIsU0FJbkIsT0FGQW9NLEVBQUs4aUcsYUFBZTk2RyxLQUFLODZHLGFBQWFyMEYsVUFFL0J6TyxFQUlSaStGLFNBQVVDLEdBTVQsT0FKQXprRixNQUFNd2tGLFNBQVVDLEdBRWhCbDJHLEtBQUs4NkcsYUFBYXYwRixVQUFXMnZGLEVBQUs0RSxjQUUzQjk2RyxNQXU3QkcsSUFBSTY2QixHQUNGLElBQUlBLEdBQ0YsSUFBSUEsR0FDRixJQUFJMlksR0FtSXRCLE1BQU1zb0UsV0FBY2pCLEdBRW5CbHlHLFlBQWE4MUIsR0FFWmhOLE1BQU9nTixHQUVQeitCLEtBQUtrd0IsS0FBT3BOLElBRVo5aUIsS0FBSzZXLEtBQU8sUUFFWjdXLEtBQUsrN0csTUFBUSxHQUlkQyxlQUFnQjFILEdBRWYsTUFBTTJILEVBQVcsR0FFakIsSUFBTSxJQUFJbjdHLEVBQUksRUFBR1csRUFBSXpCLEtBQUsrN0csTUFBTWo5RyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFOUNtN0csRUFBVW43RyxHQUFNZCxLQUFLKzdHLE1BQU9qN0csR0FBSXV6RyxVQUFXQyxHQUk1QyxPQUFPMkgsRUFNUkMsY0FBZTVILEdBRWQsTUFBTyxDQUVOdGlFLE1BQU9oeUMsS0FBS3EwRyxVQUFXQyxHQUN2QnlILE1BQU8vN0csS0FBS2c4RyxlQUFnQjFILElBTTlCdHdGLEtBQU0rSSxHQUVMMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUsrN0csTUFBUSxHQUViLElBQU0sSUFBSWo3RyxFQUFJLEVBQUdXLEVBQUlzckIsRUFBT2d2RixNQUFNajlHLE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXZELE1BQU1xN0csRUFBT3B2RixFQUFPZ3ZGLE1BQU9qN0csR0FFM0JkLEtBQUsrN0csTUFBTXY1RyxLQUFNMjVHLEVBQUtwNEYsU0FJdkIsT0FBTy9qQixLQUlSNEwsU0FFQyxNQUFNb00sRUFBT3laLE1BQU03bEIsU0FFbkJvTSxFQUFLa1ksS0FBT2x3QixLQUFLa3dCLEtBQ2pCbFksRUFBSytqRyxNQUFRLEdBRWIsSUFBTSxJQUFJajdHLEVBQUksRUFBR1csRUFBSXpCLEtBQUsrN0csTUFBTWo5RyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUVyRCxNQUFNcTdHLEVBQU9uOEcsS0FBSys3RyxNQUFPajdHLEdBQ3pCa1gsRUFBSytqRyxNQUFNdjVHLEtBQU0yNUcsRUFBS3Z3RyxVQUl2QixPQUFPb00sRUFJUmkrRixTQUFVQyxHQUVUemtGLE1BQU13a0YsU0FBVUMsR0FFaEJsMkcsS0FBS2t3QixLQUFPZ21GLEVBQUtobUYsS0FDakJsd0IsS0FBSys3RyxNQUFRLEdBRWIsSUFBTSxJQUFJajdHLEVBQUksRUFBR1csRUFBSXkwRyxFQUFLNkYsTUFBTWo5RyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUVyRCxNQUFNcTdHLEVBQU9qRyxFQUFLNkYsTUFBT2o3RyxHQUN6QmQsS0FBSys3RyxNQUFNdjVHLE1BQU0sSUFBSXE0RyxJQUFPNUUsU0FBVWtHLElBSXZDLE9BQU9uOEcsTUF5RFQsU0FBU284RyxHQUFZcGtHLEVBQU1oVCxFQUFPaUksRUFBS292RyxFQUFLQyxHQUUzQyxJQUFJeDdHLEVBQUcrekcsRUFFUCxHQUFLeUgsSUErc0JOLFNBQXFCdGtHLEVBQU1oVCxFQUFPaUksRUFBS292RyxHQUV0QyxJQUFJOXdDLEVBQU0sRUFDVixJQUFNLElBQUl6cUUsRUFBSWtFLEVBQU9oRSxFQUFJaU0sRUFBTW92RyxFQUFLdjdHLEVBQUltTSxFQUFLbk0sR0FBS3U3RyxFQUVqRDl3QyxJQUFTdnpELEVBQU1oWCxHQUFNZ1gsRUFBTWxYLEtBQVVrWCxFQUFNbFgsRUFBSSxHQUFNa1gsRUFBTWhYLEVBQUksSUFDL0RBLEVBQUlGLEVBSUwsT0FBT3lxRSxFQXp0QmNneEMsQ0FBWXZrRyxFQUFNaFQsRUFBT2lJLEVBQUtvdkcsR0FBUSxFQUUxRCxJQUFNdjdHLEVBQUlrRSxFQUFPbEUsRUFBSW1NLEVBQUtuTSxHQUFLdTdHLEVBQU14SCxFQUFPMkgsR0FBWTE3RyxFQUFHa1gsRUFBTWxYLEdBQUtrWCxFQUFNbFgsRUFBSSxHQUFLK3pHLFFBSXJGLElBQU0vekcsRUFBSW1NLEVBQU1vdkcsRUFBS3Y3RyxHQUFLa0UsRUFBT2xFLEdBQUt1N0csRUFBTXhILEVBQU8ySCxHQUFZMTdHLEVBQUdrWCxFQUFNbFgsR0FBS2tYLEVBQU1sWCxFQUFJLEdBQUsrekcsR0FXN0YsT0FQS0EsR0FBUXZ1RixHQUFRdXVGLEVBQU1BLEVBQUtyMEcsUUFFL0JpOEcsR0FBWTVILEdBQ1pBLEVBQU9BLEVBQUtyMEcsTUFJTnEwRyxFQUtSLFNBQVM2SCxHQUFjMTNHLEVBQU9pSSxHQUU3QixJQUFPakksRUFBUSxPQUFPQSxFQUNmaUksSUFBTUEsRUFBTWpJLEdBRW5CLElBQ0MyM0csRUFER3A1RyxFQUFJeUIsRUFFUixHQUlDLEdBRkEyM0csR0FBUSxFQUVEcDVHLEVBQUVxNUcsVUFBYXQyRixHQUFRL2lCLEVBQUdBLEVBQUUvQyxPQUF3QyxJQUE5QixHQUFNK0MsRUFBRXM1RyxLQUFNdDVHLEVBQUdBLEVBQUUvQyxNQVMvRCtDLEVBQUlBLEVBQUUvQyxTQVQwRSxDQUloRixHQUZBaThHLEdBQVlsNUcsR0FDWkEsRUFBSTBKLEVBQU0xSixFQUFFczVHLEtBQ1B0NUcsSUFBTUEsRUFBRS9DLEtBQU8sTUFDcEJtOEcsR0FBUSxTQVFBQSxHQUFTcDVHLElBQU0wSixHQUV6QixPQUFPQSxFQUtSLFNBQVM2dkcsR0FBY0MsRUFBSzd2QyxFQUFXbXZDLEVBQUtwK0UsRUFBTUMsRUFBTTgrRSxFQUFTQyxHQUVoRSxJQUFPRixFQUFNLFFBR05FLEdBQVFELEdBMFZoQixTQUFxQmg0RyxFQUFPaTVCLEVBQU1DLEVBQU04K0UsR0FFdkMsSUFBSXo1RyxFQUFJeUIsRUFDUixHQUVjLE9BQVJ6QixFQUFFckMsSUFBYXFDLEVBQUVyQyxFQUFJZzhHLEdBQVEzNUcsRUFBRTVDLEVBQUc0QyxFQUFFMUMsRUFBR285QixFQUFNQyxFQUFNOCtFLElBQ3hEejVHLEVBQUU0NUcsTUFBUTU1RyxFQUFFczVHLEtBQ1p0NUcsRUFBRTY1RyxNQUFRNzVHLEVBQUUvQyxLQUNaK0MsRUFBSUEsRUFBRS9DLFdBRUcrQyxJQUFNeUIsR0FFaEJ6QixFQUFFNDVHLE1BQU1DLE1BQVEsS0FDaEI3NUcsRUFBRTQ1RyxNQUFRLEtBUVgsU0FBcUJyNkIsR0FFcEIsSUFBSWhpRixFQUFHeUMsRUFBR3RFLEVBQUdJLEVBQUdnK0csRUFBTUMsRUFBV0MsRUFBT0MsRUFDdkNDLEVBQVMsRUFFVixFQUFHLENBT0YsSUFMQWw2RyxFQUFJdS9FLEVBQ0pBLEVBQU8sS0FDUHU2QixFQUFPLEtBQ1BDLEVBQVksRUFFSi81RyxHQUFJLENBS1gsSUFIQSs1RyxJQUNBcitHLEVBQUlzRSxFQUNKZzZHLEVBQVEsRUFDRno4RyxFQUFJLEVBQUdBLEVBQUkyOEcsSUFFaEJGLElBQ0F0K0csRUFBSUEsRUFBRW0rRyxNQUNDbitHLEdBSmlCNkIsS0FVekIsSUFGQTA4RyxFQUFRQyxFQUVBRixFQUFRLEdBQU9DLEVBQVEsR0FBS3YrRyxHQUVwQixJQUFWcytHLElBQTJCLElBQVZDLElBQWlCditHLEdBQUtzRSxFQUFFckMsR0FBS2pDLEVBQUVpQyxJQUVwRDdCLEVBQUlrRSxFQUNKQSxFQUFJQSxFQUFFNjVHLE1BQ05HLE1BSUFsK0csRUFBSUosRUFDSkEsRUFBSUEsRUFBRW0rRyxNQUNOSSxLQUlJSCxFQUFPQSxFQUFLRCxNQUFRLzlHLEVBQ3BCeWpGLEVBQU96akYsRUFFWkEsRUFBRTg5RyxNQUFRRSxFQUNWQSxFQUFPaCtHLEVBSVJrRSxFQUFJdEUsRUFJTG8rRyxFQUFLRCxNQUFRLEtBQ2JLLEdBQVUsUUFFREgsRUFBWSxHQWhFdEJJLENBQVluNkcsR0F6V2FvNkcsQ0FBWVosRUFBSzkrRSxFQUFNQyxFQUFNOCtFLEdBRXRELElBQ0NILEVBQU1yOEcsRUFESHNFLEVBQU9pNEcsRUFJWCxLQUFRQSxFQUFJRixPQUFTRSxFQUFJdjhHLE1BS3hCLEdBSEFxOEcsRUFBT0UsRUFBSUYsS0FDWHI4RyxFQUFPdThHLEVBQUl2OEcsS0FFTnc4RyxFQUFVWSxHQUFhYixFQUFLOStFLEVBQU1DLEVBQU04K0UsR0FBWWEsR0FBT2QsR0FHL0Q3dkMsRUFBVTFxRSxLQUFNcTZHLEVBQUsvN0csRUFBSXU3RyxHQUN6Qm52QyxFQUFVMXFFLEtBQU11NkcsRUFBSWo4RyxFQUFJdTdHLEdBQ3hCbnZDLEVBQVUxcUUsS0FBTWhDLEVBQUtNLEVBQUl1N0csR0FFekJJLEdBQVlNLEdBR1pBLEVBQU12OEcsRUFBS0EsS0FDWHNFLEVBQU90RSxFQUFLQSxVQVNiLElBSEF1OEcsRUFBTXY4RyxLQUdPc0UsRUFBTyxDQUdabTRHLEVBTWMsSUFBVEEsRUFHWEgsR0FEQUMsRUFBTWUsR0FBd0JwQixHQUFjSyxHQUFPN3ZDLEVBQVdtdkMsR0FDM0NudkMsRUFBV212QyxFQUFLcCtFLEVBQU1DLEVBQU04K0UsRUFBUyxHQUlwQyxJQUFUQyxHQUVYYyxHQUFhaEIsRUFBSzd2QyxFQUFXbXZDLEVBQUtwK0UsRUFBTUMsRUFBTTgrRSxHQWI5Q0YsR0FBY0osR0FBY0ssR0FBTzd2QyxFQUFXbXZDLEVBQUtwK0UsRUFBTUMsRUFBTTgrRSxFQUFTLEdBaUJ6RSxPQVNILFNBQVNhLEdBQU9kLEdBRWYsTUFBTW4rRyxFQUFJbStHLEVBQUlGLEtBQ2JoK0csRUFBSWsrRyxFQUNKcjdHLEVBQUlxN0csRUFBSXY4RyxLQUVULEdBQUssR0FBTTVCLEVBQUdDLEVBQUc2QyxJQUFPLEVBQUksT0FBTyxFQUduQyxJQUFJNkIsRUFBSXc1RyxFQUFJdjhHLEtBQUtBLEtBRWpCLEtBQVErQyxJQUFNdzVHLEVBQUlGLE1BQU8sQ0FFeEIsR0FBS21CLEdBQWlCcC9HLEVBQUUrQixFQUFHL0IsRUFBRWlDLEVBQUdoQyxFQUFFOEIsRUFBRzlCLEVBQUVnQyxFQUFHYSxFQUFFZixFQUFHZSxFQUFFYixFQUFHMEMsRUFBRTVDLEVBQUc0QyxFQUFFMUMsSUFDMUQsR0FBTTBDLEVBQUVzNUcsS0FBTXQ1RyxFQUFHQSxFQUFFL0MsT0FBVSxFQUFJLE9BQU8sRUFDekMrQyxFQUFJQSxFQUFFL0MsS0FJUCxPQUFPLEVBSVIsU0FBU285RyxHQUFhYixFQUFLOStFLEVBQU1DLEVBQU04K0UsR0FFdEMsTUFBTXArRyxFQUFJbStHLEVBQUlGLEtBQ2JoK0csRUFBSWsrRyxFQUNKcjdHLEVBQUlxN0csRUFBSXY4RyxLQUVULEdBQUssR0FBTTVCLEVBQUdDLEVBQUc2QyxJQUFPLEVBQUksT0FBTyxFQUduQyxNQUFNdThHLEVBQVFyL0csRUFBRStCLEVBQUk5QixFQUFFOEIsRUFBTS9CLEVBQUUrQixFQUFJZSxFQUFFZixFQUFJL0IsRUFBRStCLEVBQUllLEVBQUVmLEVBQVE5QixFQUFFOEIsRUFBSWUsRUFBRWYsRUFBSTlCLEVBQUU4QixFQUFJZSxFQUFFZixFQUMzRXU5RyxFQUFRdC9HLEVBQUVpQyxFQUFJaEMsRUFBRWdDLEVBQU1qQyxFQUFFaUMsRUFBSWEsRUFBRWIsRUFBSWpDLEVBQUVpQyxFQUFJYSxFQUFFYixFQUFRaEMsRUFBRWdDLEVBQUlhLEVBQUViLEVBQUloQyxFQUFFZ0MsRUFBSWEsRUFBRWIsRUFDdEVzOUcsRUFBUXYvRyxFQUFFK0IsRUFBSTlCLEVBQUU4QixFQUFNL0IsRUFBRStCLEVBQUllLEVBQUVmLEVBQUkvQixFQUFFK0IsRUFBSWUsRUFBRWYsRUFBUTlCLEVBQUU4QixFQUFJZSxFQUFFZixFQUFJOUIsRUFBRThCLEVBQUllLEVBQUVmLEVBQ3RFeTlHLEVBQVF4L0csRUFBRWlDLEVBQUloQyxFQUFFZ0MsRUFBTWpDLEVBQUVpQyxFQUFJYSxFQUFFYixFQUFJakMsRUFBRWlDLEVBQUlhLEVBQUViLEVBQVFoQyxFQUFFZ0MsRUFBSWEsRUFBRWIsRUFBSWhDLEVBQUVnQyxFQUFJYSxFQUFFYixFQUdqRXM5QixFQUFPKytFLEdBQVFlLEVBQU9DLEVBQU9qZ0YsRUFBTUMsRUFBTTgrRSxHQUM5QzErRSxFQUFPNCtFLEdBQVFpQixFQUFPQyxFQUFPbmdGLEVBQU1DLEVBQU04K0UsR0FFMUMsSUFBSXo1RyxFQUFJdzVHLEVBQUlJLE1BQ1h4K0csRUFBSW8rRyxFQUFJSyxNQUdULEtBQVE3NUcsR0FBS0EsRUFBRXJDLEdBQUtpOUIsR0FBUXgvQixHQUFLQSxFQUFFdUMsR0FBS285QixHQUFPLENBRTlDLEdBQUsvNkIsSUFBTXc1RyxFQUFJRixNQUFRdDVHLElBQU13NUcsRUFBSXY4RyxNQUNoQ3c5RyxHQUFpQnAvRyxFQUFFK0IsRUFBRy9CLEVBQUVpQyxFQUFHaEMsRUFBRThCLEVBQUc5QixFQUFFZ0MsRUFBR2EsRUFBRWYsRUFBR2UsRUFBRWIsRUFBRzBDLEVBQUU1QyxFQUFHNEMsRUFBRTFDLElBQ3RELEdBQU0wQyxFQUFFczVHLEtBQU10NUcsRUFBR0EsRUFBRS9DLE9BQVUsRUFBSSxPQUFPLEVBR3pDLEdBRkErQyxFQUFJQSxFQUFFNDVHLE1BRUR4K0csSUFBTW8rRyxFQUFJRixNQUFRbCtHLElBQU1vK0csRUFBSXY4RyxNQUNoQ3c5RyxHQUFpQnAvRyxFQUFFK0IsRUFBRy9CLEVBQUVpQyxFQUFHaEMsRUFBRThCLEVBQUc5QixFQUFFZ0MsRUFBR2EsRUFBRWYsRUFBR2UsRUFBRWIsRUFBR2xDLEVBQUVnQyxFQUFHaEMsRUFBRWtDLElBQ3RELEdBQU1sQyxFQUFFaytHLEtBQU1sK0csRUFBR0EsRUFBRTZCLE9BQVUsRUFBSSxPQUFPLEVBQ3pDN0IsRUFBSUEsRUFBRXkrRyxNQUtQLEtBQVE3NUcsR0FBS0EsRUFBRXJDLEdBQUtpOUIsR0FBTyxDQUUxQixHQUFLNTZCLElBQU13NUcsRUFBSUYsTUFBUXQ1RyxJQUFNdzVHLEVBQUl2OEcsTUFDaEN3OUcsR0FBaUJwL0csRUFBRStCLEVBQUcvQixFQUFFaUMsRUFBR2hDLEVBQUU4QixFQUFHOUIsRUFBRWdDLEVBQUdhLEVBQUVmLEVBQUdlLEVBQUViLEVBQUcwQyxFQUFFNUMsRUFBRzRDLEVBQUUxQyxJQUN0RCxHQUFNMEMsRUFBRXM1RyxLQUFNdDVHLEVBQUdBLEVBQUUvQyxPQUFVLEVBQUksT0FBTyxFQUN6QytDLEVBQUlBLEVBQUU0NUcsTUFLUCxLQUFReCtHLEdBQUtBLEVBQUV1QyxHQUFLbzlCLEdBQU8sQ0FFMUIsR0FBSzMvQixJQUFNbytHLEVBQUlGLE1BQVFsK0csSUFBTW8rRyxFQUFJdjhHLE1BQ2hDdzlHLEdBQWlCcC9HLEVBQUUrQixFQUFHL0IsRUFBRWlDLEVBQUdoQyxFQUFFOEIsRUFBRzlCLEVBQUVnQyxFQUFHYSxFQUFFZixFQUFHZSxFQUFFYixFQUFHbEMsRUFBRWdDLEVBQUdoQyxFQUFFa0MsSUFDdEQsR0FBTWxDLEVBQUVrK0csS0FBTWwrRyxFQUFHQSxFQUFFNkIsT0FBVSxFQUFJLE9BQU8sRUFDekM3QixFQUFJQSxFQUFFeStHLE1BSVAsT0FBTyxFQUtSLFNBQVNVLEdBQXdCOTRHLEVBQU9rb0UsRUFBV212QyxHQUVsRCxJQUFJOTRHLEVBQUl5QixFQUNSLEVBQUcsQ0FFRixNQUFNcEcsRUFBSTJFLEVBQUVzNUcsS0FDWGgrRyxFQUFJMEUsRUFBRS9DLEtBQUtBLE1BRUw4bEIsR0FBUTFuQixFQUFHQyxJQUFPc2xELEdBQVl2bEQsRUFBRzJFLEVBQUdBLEVBQUUvQyxLQUFNM0IsSUFBT3cvRyxHQUFlei9HLEVBQUdDLElBQU93L0csR0FBZXgvRyxFQUFHRCxLQUVwR3N1RSxFQUFVMXFFLEtBQU01RCxFQUFFa0MsRUFBSXU3RyxHQUN0Qm52QyxFQUFVMXFFLEtBQU1lLEVBQUV6QyxFQUFJdTdHLEdBQ3RCbnZDLEVBQVUxcUUsS0FBTTNELEVBQUVpQyxFQUFJdTdHLEdBR3RCSSxHQUFZbDVHLEdBQ1prNUcsR0FBWWw1RyxFQUFFL0MsTUFFZCtDLEVBQUl5QixFQUFRbkcsR0FJYjBFLEVBQUlBLEVBQUUvQyxXQUVHK0MsSUFBTXlCLEdBRWhCLE9BQU8wM0csR0FBY241RyxHQUt0QixTQUFTdzZHLEdBQWEvNEcsRUFBT2tvRSxFQUFXbXZDLEVBQUtwK0UsRUFBTUMsRUFBTTgrRSxHQUd4RCxJQUFJcCtHLEVBQUlvRyxFQUNSLEVBQUcsQ0FFRixJQUFJbkcsRUFBSUQsRUFBRTRCLEtBQUtBLEtBQ2YsS0FBUTNCLElBQU1ELEVBQUVpK0csTUFBTyxDQUV0QixHQUFLaitHLEVBQUVrQyxJQUFNakMsRUFBRWlDLEdBQUt3OUcsR0FBaUIxL0csRUFBR0MsR0FBTSxDQUc3QyxJQUFJNkMsRUFBSTY4RyxHQUFjMy9HLEVBQUdDLEdBU3pCLE9BTkFELEVBQUk4OUcsR0FBYzk5RyxFQUFHQSxFQUFFNEIsTUFDdkJrQixFQUFJZzdHLEdBQWNoN0csRUFBR0EsRUFBRWxCLE1BR3ZCczhHLEdBQWNsK0csRUFBR3N1RSxFQUFXbXZDLEVBQUtwK0UsRUFBTUMsRUFBTTgrRSxRQUM3Q0YsR0FBY3A3RyxFQUFHd3JFLEVBQVdtdkMsRUFBS3ArRSxFQUFNQyxFQUFNOCtFLEdBSzlDbitHLEVBQUlBLEVBQUUyQixLQUlQNUIsRUFBSUEsRUFBRTRCLFdBRUc1QixJQUFNb0csR0FrQ2pCLFNBQVN3NUcsR0FBVTUvRyxFQUFHQyxHQUVyQixPQUFPRCxFQUFFK0IsRUFBSTlCLEVBQUU4QixFQUtoQixTQUFTODlHLEdBQWV0QyxFQUFNdUMsR0FHN0IsR0FEQUEsRUFjRCxTQUF5QnZDLEVBQU11QyxHQUU5QixJQUFJbjdHLEVBQUltN0csRUFDUixNQUFNQyxFQUFLeEMsRUFBS3g3RyxFQUNWaStHLEVBQUt6QyxFQUFLdDdHLEVBQ2hCLElBQXFCSSxFQUFqQm02QixHQUFLLElBSVQsRUFBRyxDQUVGLEdBQUt3akYsR0FBTXI3RyxFQUFFMUMsR0FBSys5RyxHQUFNcjdHLEVBQUUvQyxLQUFLSyxHQUFLMEMsRUFBRS9DLEtBQUtLLElBQU0wQyxFQUFFMUMsRUFBSSxDQUV0RCxNQUFNRixFQUFJNEMsRUFBRTVDLEdBQU1pK0csRUFBS3I3RyxFQUFFMUMsSUFBUTBDLEVBQUUvQyxLQUFLRyxFQUFJNEMsRUFBRTVDLElBQVE0QyxFQUFFL0MsS0FBS0ssRUFBSTBDLEVBQUUxQyxHQUNuRSxHQUFLRixHQUFLZytHLEdBQU1oK0csRUFBSXk2QixFQUFLLENBR3hCLEdBREFBLEVBQUt6NkIsRUFDQUEsSUFBTWcrRyxFQUFLLENBRWYsR0FBS0MsSUFBT3I3RyxFQUFFMUMsRUFBSSxPQUFPMEMsRUFDekIsR0FBS3E3RyxJQUFPcjdHLEVBQUUvQyxLQUFLSyxFQUFJLE9BQU8wQyxFQUFFL0MsS0FJakNTLEVBQUlzQyxFQUFFNUMsRUFBSTRDLEVBQUUvQyxLQUFLRyxFQUFJNEMsRUFBSUEsRUFBRS9DLE1BTTdCK0MsRUFBSUEsRUFBRS9DLFdBRUcrQyxJQUFNbTdHLEdBRWhCLElBQU96OUcsRUFBSSxPQUFPLEtBRWxCLEdBQUswOUcsSUFBT3ZqRixFQUFLLE9BQU9uNkIsRUFNeEIsTUFBTTZELEVBQU83RCxFQUNaNDlHLEVBQUs1OUcsRUFBRU4sRUFDUG0rRyxFQUFLNzlHLEVBQUVKLEVBQ1IsSUFBdUI4bkQsRUFBbkJvMkQsRUFBU2h2RyxFQUFBQSxFQUVieE0sRUFBSXRDLEVBRUosR0FFTTA5RyxHQUFNcDdHLEVBQUU1QyxHQUFLNEMsRUFBRTVDLEdBQUtrK0csR0FBTUYsSUFBT3A3RyxFQUFFNUMsR0FDdENxOUcsR0FBaUJZLEVBQUtFLEVBQUtILEVBQUt2akYsRUFBSXdqRixFQUFJQyxFQUFJQyxFQUFJRixFQUFLRSxFQUFLMWpGLEVBQUt1akYsRUFBSUMsRUFBSXI3RyxFQUFFNUMsRUFBRzRDLEVBQUUxQyxLQUUvRThuRCxFQUFNOW9ELEtBQUsyUixJQUFLb3RHLEVBQUtyN0csRUFBRTFDLElBQVE4OUcsRUFBS3A3RyxFQUFFNUMsR0FFakMwOUcsR0FBZTk2RyxFQUFHNDRHLEtBQVl4ekQsRUFBTW8yRCxHQUFZcDJELElBQVFvMkQsSUFBWXg3RyxFQUFFNUMsRUFBSU0sRUFBRU4sR0FBTzRDLEVBQUU1QyxJQUFNTSxFQUFFTixHQUFLcStHLEdBQXNCLzlHLEVBQUdzQyxPQUUvSHRDLEVBQUlzQyxFQUNKdzdHLEVBQVNwMkQsSUFNWHBsRCxFQUFJQSxFQUFFL0MsV0FFRytDLElBQU11QixHQUVoQixPQUFPN0QsRUFuRktnK0csQ0FBZ0I5QyxFQUFNdUMsR0FDN0JBLEVBQVksQ0FFaEIsTUFBTTcvRyxFQUFJMC9HLEdBQWNHLEVBQVd2QyxHQUduQ08sR0FBY2dDLEVBQVdBLEVBQVVsK0csTUFDbkNrOEcsR0FBYzc5RyxFQUFHQSxFQUFFMkIsT0FpRnJCLFNBQVN3K0csR0FBc0IvOUcsRUFBR3NDLEdBRWpDLE9BQU8sR0FBTXRDLEVBQUU0N0csS0FBTTU3RyxFQUFHc0MsRUFBRXM1RyxNQUFTLEdBQUssR0FBTXQ1RyxFQUFFL0MsS0FBTVMsRUFBR0EsRUFBRVQsTUFBUyxFQTJGckUsU0FBUzA4RyxHQUFRdjhHLEVBQUdFLEVBQUdvOUIsRUFBTUMsRUFBTTgrRSxHQWdCbEMsT0FQQXI4RyxFQUF5QixhQUR6QkEsRUFBeUIsWUFEekJBLEVBQXlCLFlBRHpCQSxFQUF5QixXQUh6QkEsRUFBSSxPQUFVQSxFQUFJczlCLEdBQVMrK0UsR0FHZnI4RyxHQUFLLElBQ0xBLEdBQUssSUFDTEEsR0FBSyxJQUNMQSxHQUFLLEtBS2pCRSxFQUF5QixhQUR6QkEsRUFBeUIsWUFEekJBLEVBQXlCLFlBRHpCQSxFQUF5QixXQVB6QkEsRUFBSSxPQUFVQSxFQUFJcTlCLEdBQVM4K0UsR0FPZm44RyxHQUFLLElBQ0xBLEdBQUssSUFDTEEsR0FBSyxJQUNMQSxHQUFLLEtBRUMsRUFLbkIsU0FBU3ErRyxHQUFhbDZHLEdBRXJCLElBQUl6QixFQUFJeUIsRUFDUG02RyxFQUFXbjZHLEVBQ1osSUFFTXpCLEVBQUU1QyxFQUFJdytHLEVBQVN4K0csR0FBTzRDLEVBQUU1QyxJQUFNdytHLEVBQVN4K0csR0FBSzRDLEVBQUUxQyxFQUFJcytHLEVBQVN0K0csS0FBTXMrRyxFQUFXNTdHLEdBQ2pGQSxFQUFJQSxFQUFFL0MsV0FFRytDLElBQU15QixHQUVoQixPQUFPbTZHLEVBS1IsU0FBU25CLEdBQWlCM2hGLEVBQUlDLEVBQUlFLEVBQUlDLEVBQUk1UixFQUFJQyxFQUFJK3NGLEVBQUlDLEdBRXJELE9BQVNqdEYsRUFBS2d0RixJQUFTdjdFLEVBQUt3N0UsSUFBU3o3RSxFQUFLdzdFLElBQVMvc0YsRUFBS2d0RixJQUFRLElBQzVEejdFLEVBQUt3N0UsSUFBU3A3RSxFQUFLcTdFLElBQVN0N0UsRUFBS3E3RSxJQUFTdjdFLEVBQUt3N0UsSUFBUSxJQUN2RHQ3RSxFQUFLcTdFLElBQVMvc0YsRUFBS2d0RixJQUFTanRGLEVBQUtndEYsSUFBU3A3RSxFQUFLcTdFLElBQVEsRUFLNUQsU0FBU3dHLEdBQWlCMS9HLEVBQUdDLEdBRTVCLE9BQU9ELEVBQUU0QixLQUFLTSxJQUFNakMsRUFBRWlDLEdBQUtsQyxFQUFFaStHLEtBQUsvN0csSUFBTWpDLEVBQUVpQyxJQXNEM0MsU0FBNEJsQyxFQUFHQyxHQUU5QixJQUFJMEUsRUFBSTNFLEVBQ1IsRUFBRyxDQUVGLEdBQUsyRSxFQUFFekMsSUFBTWxDLEVBQUVrQyxHQUFLeUMsRUFBRS9DLEtBQUtNLElBQU1sQyxFQUFFa0MsR0FBS3lDLEVBQUV6QyxJQUFNakMsRUFBRWlDLEdBQUt5QyxFQUFFL0MsS0FBS00sSUFBTWpDLEVBQUVpQyxHQUNwRXFqRCxHQUFZNWdELEVBQUdBLEVBQUUvQyxLQUFNNUIsRUFBR0MsR0FBTSxPQUFPLEVBQ3pDMEUsRUFBSUEsRUFBRS9DLFdBRUcrQyxJQUFNM0UsR0FFaEIsT0FBTyxFQWpFMEN3Z0gsQ0FBbUJ4Z0gsRUFBR0MsS0FDcEV3L0csR0FBZXovRyxFQUFHQyxJQUFPdy9HLEdBQWV4L0csRUFBR0QsSUE4RS9DLFNBQXVCQSxFQUFHQyxHQUV6QixJQUFJMEUsRUFBSTNFLEVBQ1B5Z0gsR0FBUyxFQUNWLE1BQU14SCxHQUFPajVHLEVBQUUrQixFQUFJOUIsRUFBRThCLEdBQU0sRUFDMUJtM0csR0FBT2w1RyxFQUFFaUMsRUFBSWhDLEVBQUVnQyxHQUFNLEVBQ3RCLEdBRVUwQyxFQUFFMUMsRUFBSWkzRyxHQUFXdjBHLEVBQUUvQyxLQUFLSyxFQUFJaTNHLEdBQVV2MEcsRUFBRS9DLEtBQUtLLElBQU0wQyxFQUFFMUMsR0FDMURnM0csR0FBT3QwRyxFQUFFL0MsS0FBS0csRUFBSTRDLEVBQUU1QyxJQUFRbTNHLEVBQUt2MEcsRUFBRTFDLElBQVEwQyxFQUFFL0MsS0FBS0ssRUFBSTBDLEVBQUUxQyxHQUFNMEMsRUFBRTVDLElBQ25FMCtHLEdBQVdBLEdBQ1o5N0csRUFBSUEsRUFBRS9DLFdBRUcrQyxJQUFNM0UsR0FFaEIsT0FBT3lnSCxFQTdGOENDLENBQWMxZ0gsRUFBR0MsS0FDbkUsR0FBTUQsRUFBRWkrRyxLQUFNaitHLEVBQUdDLEVBQUVnK0csT0FBVSxHQUFNaitHLEVBQUdDLEVBQUVnK0csS0FBTWgrRyxLQUNoRHluQixHQUFRMW5CLEVBQUdDLElBQU8sR0FBTUQsRUFBRWkrRyxLQUFNaitHLEVBQUdBLEVBQUU0QixNQUFTLEdBQUssR0FBTTNCLEVBQUVnK0csS0FBTWgrRyxFQUFHQSxFQUFFMkIsTUFBUyxHQUtqRixTQUFTLEdBQU0rQyxFQUFHdEUsRUFBR3VFLEdBRXBCLE9BQVN2RSxFQUFFNEIsRUFBSTBDLEVBQUUxQyxJQUFRMkMsRUFBRTdDLEVBQUkxQixFQUFFMEIsSUFBUTFCLEVBQUUwQixFQUFJNEMsRUFBRTVDLElBQVE2QyxFQUFFM0MsRUFBSTVCLEVBQUU0QixHQUtsRSxTQUFTeWxCLEdBQVE4YixFQUFJQyxHQUVwQixPQUFPRCxFQUFHemhDLElBQU0waEMsRUFBRzFoQyxHQUFLeWhDLEVBQUd2aEMsSUFBTXdoQyxFQUFHeGhDLEVBS3JDLFNBQVNzakQsR0FBWS9oQixFQUFJbTlFLEVBQUlsOUUsRUFBSW05RSxHQUVoQyxNQUFNQyxFQUFLdDVFLEdBQU0sR0FBTS9ELEVBQUltOUUsRUFBSWw5RSxJQUN6QnE5RSxFQUFLdjVFLEdBQU0sR0FBTS9ELEVBQUltOUUsRUFBSUMsSUFDekJHLEVBQUt4NUUsR0FBTSxHQUFNOUQsRUFBSW05RSxFQUFJcDlFLElBQ3pCdzlFLEVBQUt6NUUsR0FBTSxHQUFNOUQsRUFBSW05RSxFQUFJRCxJQUUvQixPQUFLRSxJQUFPQyxHQUFNQyxJQUFPQyxLQUViLElBQVBILElBQVlJLEdBQVd6OUUsRUFBSUMsRUFBSWs5RSxPQUN4QixJQUFQRyxJQUFZRyxHQUFXejlFLEVBQUlvOUUsRUFBSUQsT0FDeEIsSUFBUEksSUFBWUUsR0FBV3g5RSxFQUFJRCxFQUFJbzlFLE9BQ3hCLElBQVBJLElBQVlDLEdBQVd4OUUsRUFBSWs5RSxFQUFJQyxJQU9yQyxTQUFTSyxHQUFXdDhHLEVBQUd0RSxFQUFHdUUsR0FFekIsT0FBT3ZFLEVBQUUwQixHQUFLZCxLQUFLa0csSUFBS3hDLEVBQUU1QyxFQUFHNkMsRUFBRTdDLElBQU8xQixFQUFFMEIsR0FBS2QsS0FBSzBHLElBQUtoRCxFQUFFNUMsRUFBRzZDLEVBQUU3QyxJQUFPMUIsRUFBRTRCLEdBQUtoQixLQUFLa0csSUFBS3hDLEVBQUUxQyxFQUFHMkMsRUFBRTNDLElBQU81QixFQUFFNEIsR0FBS2hCLEtBQUswRyxJQUFLaEQsRUFBRTFDLEVBQUcyQyxFQUFFM0MsR0FJN0gsU0FBU3NsQyxHQUFNMjVFLEdBRWQsT0FBT0EsRUFBTSxFQUFJLEVBQUlBLEVBQU0sR0FBTSxFQUFJLEVBcUJ0QyxTQUFTekIsR0FBZXovRyxFQUFHQyxHQUUxQixPQUFPLEdBQU1ELEVBQUVpK0csS0FBTWorRyxFQUFHQSxFQUFFNEIsTUFBUyxFQUNsQyxHQUFNNUIsRUFBR0MsRUFBR0QsRUFBRTRCLE9BQVUsR0FBSyxHQUFNNUIsRUFBR0EsRUFBRWkrRyxLQUFNaCtHLElBQU8sRUFDckQsR0FBTUQsRUFBR0MsRUFBR0QsRUFBRWkrRyxNQUFTLEdBQUssR0FBTWorRyxFQUFHQSxFQUFFNEIsS0FBTTNCLEdBQU0sRUEwQnJELFNBQVMwL0csR0FBYzMvRyxFQUFHQyxHQUV6QixNQUFNa2hILEVBQUssSUFBSUMsR0FBTXBoSCxFQUFFa0MsRUFBR2xDLEVBQUUrQixFQUFHL0IsRUFBRWlDLEdBQ2hDby9HLEVBQUssSUFBSUQsR0FBTW5oSCxFQUFFaUMsRUFBR2pDLEVBQUU4QixFQUFHOUIsRUFBRWdDLEdBQzNCcS9HLEVBQUt0aEgsRUFBRTRCLEtBQ1AyL0csRUFBS3RoSCxFQUFFZytHLEtBY1IsT0FaQWorRyxFQUFFNEIsS0FBTzNCLEVBQ1RBLEVBQUVnK0csS0FBT2orRyxFQUVUbWhILEVBQUd2L0csS0FBTzAvRyxFQUNWQSxFQUFHckQsS0FBT2tELEVBRVZFLEVBQUd6L0csS0FBT3UvRyxFQUNWQSxFQUFHbEQsS0FBT29ELEVBRVZFLEVBQUczL0csS0FBT3kvRyxFQUNWQSxFQUFHcEQsS0FBT3NELEVBRUhGLEVBS1IsU0FBU3pELEdBQVkxN0csRUFBR0gsRUFBR0UsRUFBR2cwRyxHQUU3QixNQUFNdHhHLEVBQUksSUFBSXk4RyxHQUFNbC9HLEVBQUdILEVBQUdFLEdBZ0IxQixPQWRPZzBHLEdBT050eEcsRUFBRS9DLEtBQU9xMEcsRUFBS3IwRyxLQUNkK0MsRUFBRXM1RyxLQUFPaEksRUFDVEEsRUFBS3IwRyxLQUFLcThHLEtBQU90NUcsRUFDakJzeEcsRUFBS3IwRyxLQUFPK0MsSUFSWkEsRUFBRXM1RyxLQUFPdDVHLEVBQ1RBLEVBQUUvQyxLQUFPK0MsR0FXSEEsRUFJUixTQUFTazVHLEdBQVlsNUcsR0FFcEJBLEVBQUUvQyxLQUFLcThHLEtBQU90NUcsRUFBRXM1RyxLQUNoQnQ1RyxFQUFFczVHLEtBQUtyOEcsS0FBTytDLEVBQUUvQyxLQUVYK0MsRUFBRTQ1RyxRQUFRNTVHLEVBQUU0NUcsTUFBTUMsTUFBUTc1RyxFQUFFNjVHLE9BQzVCNzVHLEVBQUU2NUcsUUFBUTc1RyxFQUFFNjVHLE1BQU1ELE1BQVE1NUcsRUFBRTQ1RyxPQUlsQyxTQUFTNkMsR0FBTWwvRyxFQUFHSCxFQUFHRSxHQUdwQmIsS0FBS2MsRUFBSUEsRUFHVGQsS0FBS1csRUFBSUEsRUFDVFgsS0FBS2EsRUFBSUEsRUFHVGIsS0FBSzY4RyxLQUFPLEtBQ1o3OEcsS0FBS1EsS0FBTyxLQUdaUixLQUFLa0IsRUFBSSxLQUdUbEIsS0FBS205RyxNQUFRLEtBQ2JuOUcsS0FBS285RyxNQUFRLEtBR2JwOUcsS0FBSzQ4RyxTQUFVLEVBa0JoQixNQUFNd0QsR0FJTDd3RixZQUFhOHdGLEdBRVosTUFBTTFoSCxFQUFJMGhILEVBQVF2aEgsT0FDbEIsSUFBSUYsRUFBSSxFQUVSLElBQU0sSUFBSTJFLEVBQUk1RSxFQUFJLEVBQUdNLEVBQUksRUFBR0EsRUFBSU4sRUFBRzRFLEVBQUl0RSxJQUV0Q0wsR0FBS3loSCxFQUFTOThHLEdBQUk1QyxFQUFJMC9HLEVBQVNwaEgsR0FBSTRCLEVBQUl3L0csRUFBU3BoSCxHQUFJMEIsRUFBSTAvRyxFQUFTOThHLEdBQUkxQyxFQUl0RSxNQUFXLEdBQUpqQyxFQUlSMndCLG1CQUFvQnFyRixHQUVuQixPQUFPd0YsR0FBV0UsS0FBTTFGLEdBQVEsRUFJakNyckYsd0JBQXlCOHdGLEVBQVN0RSxHQUVqQyxNQUFNMzJELEVBQVcsR0FDWG03RCxFQUFjLEdBQ2RDLEVBQVEsR0FFZEMsR0FBaUJKLEdBQ2pCSyxHQUFZdDdELEVBQVVpN0QsR0FJdEIsSUFBSU0sRUFBWU4sRUFBUXZoSCxPQUV4Qmk5RyxFQUFNM2QsUUFBU3FpQixJQUVmLElBQU0sSUFBSTMvRyxFQUFJLEVBQUdBLEVBQUlpN0csRUFBTWo5RyxPQUFRZ0MsSUFFbEN5L0csRUFBWS85RyxLQUFNbStHLEdBQ2xCQSxHQUFhNUUsRUFBT2o3RyxHQUFJaEMsT0FDeEI0aEgsR0FBWXQ3RCxFQUFVMjJELEVBQU9qN0csSUFNOUIsTUFBTW9zRSxFQWgwQk0sU0FBV2wxRCxFQUFNdW9HLEVBQWFsRSxFQUFNLEdBRWhELE1BQU11RSxFQUFXTCxHQUFlQSxFQUFZemhILE9BQ3RDK2hILEVBQVdELEVBQVdMLEVBQWEsR0FBTWxFLEVBQU1ya0csRUFBS2xaLE9BQzFELElBQUk0L0csRUFBWXRDLEdBQVlwa0csRUFBTSxFQUFHNm9HLEVBQVV4RSxHQUFLLEdBQ3BELE1BQU1udkMsRUFBWSxHQUVsQixJQUFPd3hDLEdBQWFBLEVBQVVsK0csT0FBU2srRyxFQUFVN0IsS0FBTyxPQUFPM3ZDLEVBRS9ELElBQUlqdkMsRUFBTUMsRUFBTUUsRUFBTUMsRUFBTTE5QixFQUFHRSxFQUFHbThHLEVBS2xDLEdBSEs0RCxJQUFXbEMsRUFxVGxCLFNBQXlCMW1HLEVBQU11b0csRUFBYTdCLEVBQVdyQyxHQUV0RCxNQUFNeUUsRUFBUSxHQUNkLElBQUloZ0gsRUFBRzIyQixFQUFLenlCLEVBQU9pSSxFQUFLNjFFLEVBRXhCLElBQU1oaUYsRUFBSSxFQUFHMjJCLEVBQU04b0YsRUFBWXpoSCxPQUFRZ0MsRUFBSTIyQixFQUFLMzJCLElBRS9Da0UsRUFBUXU3RyxFQUFhei9HLEdBQU11N0csRUFDM0JwdkcsRUFBTW5NLEVBQUkyMkIsRUFBTSxFQUFJOG9GLEVBQWF6L0csRUFBSSxHQUFNdTdHLEVBQU1ya0csRUFBS2xaLE9BQ3REZ2tGLEVBQU9zNUIsR0FBWXBrRyxFQUFNaFQsRUFBT2lJLEVBQUtvdkcsR0FBSyxHQUNyQ3Y1QixJQUFTQSxFQUFLdGlGLE9BQU9zaUYsRUFBSzg1QixTQUFVLEdBQ3pDa0UsRUFBTXQrRyxLQUFNMDhHLEdBQWFwOEIsSUFPMUIsSUFIQWcrQixFQUFNNXhDLEtBQU1zdkMsSUFHTjE5RyxFQUFJLEVBQUdBLEVBQUlnZ0gsRUFBTWhpSCxPQUFRZ0MsSUFFOUIyOUcsR0FBZXFDLEVBQU9oZ0gsR0FBSzQ5RyxHQUMzQkEsRUFBWWhDLEdBQWNnQyxFQUFXQSxFQUFVbCtHLE1BSWhELE9BQU9rK0csRUE5VXNCcUMsQ0FBZ0Ivb0csRUFBTXVvRyxFQUFhN0IsRUFBV3JDLElBR3JFcmtHLEVBQUtsWixPQUFTLEdBQUt1OUcsRUFBTSxDQUU3QnArRSxFQUFPRyxFQUFPcG1CLEVBQU0sR0FDcEJrbUIsRUFBT0csRUFBT3JtQixFQUFNLEdBRXBCLElBQU0sSUFBSWxYLEVBQUl1N0csRUFBS3Y3RyxFQUFJKy9HLEVBQVUvL0csR0FBS3U3RyxFQUVyQzE3RyxFQUFJcVgsRUFBTWxYLEdBQ1ZELEVBQUltWCxFQUFNbFgsRUFBSSxHQUNUSCxFQUFJczlCLElBQU9BLEVBQU90OUIsR0FDbEJFLEVBQUlxOUIsSUFBT0EsRUFBT3I5QixHQUNsQkYsRUFBSXk5QixJQUFPQSxFQUFPejlCLEdBQ2xCRSxFQUFJdzlCLElBQU9BLEVBQU94OUIsR0FLeEJtOEcsRUFBVW45RyxLQUFLa0csSUFBS3E0QixFQUFPSCxFQUFNSSxFQUFPSCxHQUN4QzgrRSxFQUFzQixJQUFaQSxFQUFnQixFQUFJQSxFQUFVLEVBTXpDLE9BRkFGLEdBQWM0QixFQUFXeHhDLEVBQVdtdkMsRUFBS3ArRSxFQUFNQyxFQUFNOCtFLEdBRTlDOXZDLEVBMHhCVzh6QyxDQUFvQjU3RCxFQUFVbTdELEdBSWhELElBQU0sSUFBSXovRyxFQUFJLEVBQUdBLEVBQUlvc0UsRUFBVXB1RSxPQUFRZ0MsR0FBSyxFQUUzQzAvRyxFQUFNaCtHLEtBQU0wcUUsRUFBVXBoRSxNQUFPaEwsRUFBR0EsRUFBSSxJQUlyQyxPQUFPMC9HLEdBTVQsU0FBU0MsR0FBaUJoaUYsR0FFekIsTUFBTWg5QixFQUFJZzlCLEVBQU8zL0IsT0FFWjJDLEVBQUksR0FBS2c5QixFQUFRaDlCLEVBQUksR0FBSTZrQixPQUFRbVksRUFBUSxLQUU3Q0EsRUFBTzV4QixNQU1ULFNBQVM2ekcsR0FBWXQ3RCxFQUFVaTdELEdBRTlCLElBQU0sSUFBSXYvRyxFQUFJLEVBQUdBLEVBQUl1L0csRUFBUXZoSCxPQUFRZ0MsSUFFcENza0QsRUFBUzVpRCxLQUFNNjlHLEVBQVN2L0csR0FBSUgsR0FDNUJ5a0QsRUFBUzVpRCxLQUFNNjlHLEVBQVN2L0csR0FBSUQsR0E0QjlCLE1BQU1vZ0gsV0FBd0IzaUUsR0FFN0IzMUMsWUFBYXFvQyxFQUFTLElBQUk4cUUsR0FBTyxDQUFFLElBQUl0NEYsRUFBUyxHQUFLLElBQU8sSUFBSUEsR0FBVyxHQUFLLElBQU8sSUFBSUEsR0FBVyxJQUFPLElBQU8sSUFBSUEsRUFBUyxJQUFPLE1BQVcxTixFQUFVLElBRTVKMmIsUUFFQXp4QixLQUFLNlcsS0FBTyxrQkFFWjdXLEtBQUsreEMsV0FBYSxDQUNqQmYsT0FBUUEsRUFDUmw3QixRQUFTQSxHQUdWazdCLEVBQVMxeEMsTUFBTXVPLFFBQVNtakMsR0FBV0EsRUFBUyxDQUFFQSxHQUU5QyxNQUFNbVUsRUFBUW5sRCxLQUVSa2hILEVBQWdCLEdBQ2hCQyxFQUFVLEdBRWhCLElBQU0sSUFBSXJnSCxFQUFJLEVBQUdXLEVBQUl1dkMsRUFBT2x5QyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFHMUNzZ0gsRUFEY3B3RSxFQUFRbHdDLElBY3ZCLFNBQVNzZ0gsRUFBVXB2RSxHQUVsQixNQUFNcXZFLEVBQWMsR0FJZEMsT0FBMEM5aEcsSUFBMUIxSixFQUFRd3JHLGNBQThCeHJHLEVBQVF3ckcsY0FBZ0IsR0FDOUVDLE9BQTBCL2hHLElBQWxCMUosRUFBUXlyRyxNQUFzQnpyRyxFQUFReXJHLE1BQVEsRUFDNUQsSUFBSTFzRixPQUEwQnJWLElBQWxCMUosRUFBUStlLE1BQXNCL2UsRUFBUStlLE1BQVEsRUFFdEQyc0YsT0FBd0NoaUcsSUFBekIxSixFQUFRMHJHLGNBQTZCMXJHLEVBQVEwckcsYUFDNURDLE9BQTRDamlHLElBQTNCMUosRUFBUTJyRyxlQUErQjNyRyxFQUFRMnJHLGVBQWlCLEdBQ2pGQyxPQUFrQ2xpRyxJQUF0QjFKLEVBQVE0ckcsVUFBMEI1ckcsRUFBUTRyRyxVQUFZRCxFQUFpQixHQUNuRkUsT0FBc0NuaUcsSUFBeEIxSixFQUFRNnJHLFlBQTRCN3JHLEVBQVE2ckcsWUFBYyxFQUN4RUMsT0FBMENwaUcsSUFBMUIxSixFQUFROHJHLGNBQThCOXJHLEVBQVE4ckcsY0FBZ0IsRUFFbEYsTUFBTUMsRUFBYy9yRyxFQUFRK3JHLFlBRXRCQyxPQUFnQ3RpRyxJQUF4QjFKLEVBQVFpc0csWUFBNEJqc0csRUFBUWlzRyxZQUFjQyxRQUloRHhpRyxJQUFuQjFKLEVBQVFtc0csU0FFWnQvRyxRQUFRdWhCLEtBQU0sa0VBQ2QyUSxFQUFRL2UsRUFBUW1zRyxRQU1qQixJQUFJQyxFQUNBQyxFQUFZQyxFQUFVbmxGLEVBQVFvbEYsRUFEbEJDLEdBQWdCLEVBRzNCVCxJQUVKSyxFQUFhTCxFQUFZdE4sZ0JBQWlCZ04sR0FFMUNlLEdBQWdCLEVBQ2hCZCxHQUFlLEVBTWZXLEVBQWFOLEVBQVluTSxvQkFBcUI2TCxHQUFPLEdBSXJEYSxFQUFXLElBQUl2bkYsR0FDZm9DLEVBQVMsSUFBSXBDLEdBQ2J3bkYsRUFBWSxJQUFJeG5GLElBTVYybUYsSUFFTkksRUFBZ0IsRUFDaEJILEVBQWlCLEVBQ2pCQyxFQUFZLEVBQ1pDLEVBQWMsR0FNZixNQUFNWSxFQUFjdndFLEVBQU1rcUUsY0FBZW9GLEdBRXpDLElBQUlsOEQsRUFBV205RCxFQUFZdndFLE1BQzNCLE1BQU0rcEUsRUFBUXdHLEVBQVl4RyxNQUkxQixJQUZrQnFFLEdBQVdvQyxZQUFhcDlELEdBRTNCLENBRWRBLEVBQVdBLEVBQVNxOUQsVUFJcEIsSUFBTSxJQUFJcmlILEVBQUksRUFBR3NpSCxFQUFLM0csRUFBTWo5RyxPQUFRc0IsRUFBSXNpSCxFQUFJdGlILElBQU8sQ0FFbEQsTUFBTXVpSCxFQUFRNUcsRUFBTzM3RyxHQUVoQmdnSCxHQUFXb0MsWUFBYUcsS0FFNUI1RyxFQUFPMzdHLEdBQU11aUgsRUFBTUYsWUFTdEIsTUFBTWpDLEVBQVFKLEdBQVd3QyxpQkFBa0J4OUQsRUFBVTIyRCxHQUkvQ3NFLEVBQVVqN0QsRUFFaEIsSUFBTSxJQUFJaGxELEVBQUksRUFBR3NpSCxFQUFLM0csRUFBTWo5RyxPQUFRc0IsRUFBSXNpSCxFQUFJdGlILElBQU8sQ0FFbEQsTUFBTXVpSCxFQUFRNUcsRUFBTzM3RyxHQUVyQmdsRCxFQUFXQSxFQUFTNTVDLE9BQVFtM0csR0FLN0IsU0FBU0UsRUFBVUMsRUFBSWhOLEVBQUt6K0YsR0FJM0IsT0FGT3krRixHQUFNbnpHLFFBQVFDLE1BQU8sNkNBRXJCa3pHLEVBQUkveEYsUUFBUVcsZUFBZ0JyTixHQUFPNE0sSUFBSzYrRixHQUloRCxNQUFNQyxFQUFPMzlELEVBQVN0bUQsT0FBUWtrSCxFQUFPeEMsRUFBTTFoSCxPQU0zQyxTQUFTbWtILEVBQWFDLEVBQU1DLEVBQVFDLEdBU25DLElBQUlDLEVBQVdDLEVBQVdDLEVBSzFCLE1BQU1DLEVBQVdOLEVBQUt2aUgsRUFBSXdpSCxFQUFPeGlILEVBQ2hDOGlILEVBQVdQLEVBQUtyaUgsRUFBSXNpSCxFQUFPdGlILEVBQ3RCNmlILEVBQVdOLEVBQU96aUgsRUFBSXVpSCxFQUFLdmlILEVBQ2hDZ2pILEVBQVdQLEVBQU92aUgsRUFBSXFpSCxFQUFLcmlILEVBRXRCK2lILEVBQWlCSixFQUFXQSxFQUFXQyxFQUFXQSxFQUdsREksRUFBZUwsRUFBV0csRUFBV0YsRUFBV0MsRUFFdEQsR0FBSzdqSCxLQUFLMlIsSUFBS3F5RyxHQUFlNzlHLE9BQU93eEIsUUFBVSxDQU05QyxNQUFNc3NGLEVBQWFqa0gsS0FBSzJsQixLQUFNbytGLEdBQ3hCRyxFQUFhbGtILEtBQUsybEIsS0FBTWsrRixFQUFXQSxFQUFXQyxFQUFXQSxHQUl6REssRUFBa0JiLEVBQU94aUgsRUFBSThpSCxFQUFXSyxFQUN4Q0csRUFBa0JkLEVBQU90aUgsRUFBSTJpSCxFQUFXTSxFQU94Q0ksSUFMa0JkLEVBQU96aUgsRUFBSWdqSCxFQUFXSSxFQUtmQyxHQUFrQkwsR0FKekJQLEVBQU92aUgsRUFBSTZpSCxFQUFXSyxFQUsxQkUsR0FBa0JQLElBQ25DRixFQUFXRyxFQUFXRixFQUFXQyxHQUlwQ0wsRUFBY1csRUFBZ0JSLEVBQVdVLEVBQUtoQixFQUFLdmlILEVBQ25EMmlILEVBQWNXLEVBQWdCUixFQUFXUyxFQUFLaEIsRUFBS3JpSCxFQUluRCxNQUFNc2pILEVBQWtCZCxFQUFZQSxFQUFZQyxFQUFZQSxFQUM1RCxHQUFLYSxHQUFpQixFQUVyQixPQUFPLElBQUkzZ0csRUFBUzYvRixFQUFXQyxHQUkvQkMsRUFBWTFqSCxLQUFLMmxCLEtBQU0yK0YsRUFBZ0IsT0FJbEMsQ0FJTixJQUFJQyxHQUFlLEVBRWRaLEVBQVd4OUcsT0FBT3d4QixRQUVqQmtzRixFQUFXMTlHLE9BQU93eEIsVUFFdEI0c0YsR0FBZSxHQU1YWixHQUFheDlHLE9BQU93eEIsUUFFbkJrc0YsR0FBYTE5RyxPQUFPd3hCLFVBRXhCNHNGLEdBQWUsR0FNWHZrSCxLQUFLc21DLEtBQU1zOUUsS0FBZTVqSCxLQUFLc21DLEtBQU13OUUsS0FFekNTLEdBQWUsR0FRYkEsR0FHSmYsR0FBY0ksRUFDZEgsRUFBWUUsRUFDWkQsRUFBWTFqSCxLQUFLMmxCLEtBQU1vK0YsS0FLdkJQLEVBQVlHLEVBQ1pGLEVBQVlHLEVBQ1pGLEVBQVkxakgsS0FBSzJsQixLQUFNbytGLEVBQWUsSUFNeEMsT0FBTyxJQUFJcGdHLEVBQVM2L0YsRUFBWUUsRUFBV0QsRUFBWUMsR0FLeEQsTUFBTWMsRUFBbUIsR0FFekIsSUFBTSxJQUFJdmpILEVBQUksRUFBR2kxQixFQUFLc3FGLEVBQVF2aEgsT0FBUWtDLEVBQUkrMEIsRUFBSyxFQUFHcnpCLEVBQUk1QixFQUFJLEVBQUdBLEVBQUlpMUIsRUFBSWoxQixJQUFNRSxJQUFNMEIsSUFFM0UxQixJQUFNKzBCLElBQUsvMEIsRUFBSSxHQUNmMEIsSUFBTXF6QixJQUFLcnpCLEVBQUksR0FLcEIyaEgsRUFBa0J2akgsR0FBTW1pSCxFQUFhNUMsRUFBU3YvRyxHQUFLdS9HLEVBQVNyL0csR0FBS3EvRyxFQUFTMzlHLElBSTNFLE1BQU00aEgsRUFBaUIsR0FDdkIsSUFBSUMsRUFBa0JDLEVBQW9CSCxFQUFpQjc0RyxTQUUzRCxJQUFNLElBQUlwTCxFQUFJLEVBQUdzaUgsRUFBSzNHLEVBQU1qOUcsT0FBUXNCLEVBQUlzaUgsRUFBSXRpSCxJQUFPLENBRWxELE1BQU11aUgsRUFBUTVHLEVBQU8zN0csR0FFckJta0gsRUFBbUIsR0FFbkIsSUFBTSxJQUFJempILEVBQUksRUFBR2kxQixFQUFLNHNGLEVBQU03akgsT0FBUWtDLEVBQUkrMEIsRUFBSyxFQUFHcnpCLEVBQUk1QixFQUFJLEVBQUdBLEVBQUlpMUIsRUFBSWoxQixJQUFNRSxJQUFNMEIsSUFFekUxQixJQUFNKzBCLElBQUsvMEIsRUFBSSxHQUNmMEIsSUFBTXF6QixJQUFLcnpCLEVBQUksR0FHcEI2aEgsRUFBa0J6akgsR0FBTW1pSCxFQUFhTixFQUFPN2hILEdBQUs2aEgsRUFBTzNoSCxHQUFLMmhILEVBQU9qZ0gsSUFJckU0aEgsRUFBZTloSCxLQUFNK2hILEdBQ3JCQyxFQUFvQkEsRUFBa0JoNUcsT0FBUSs0RyxHQU8vQyxJQUFNLElBQUkxbEgsRUFBSSxFQUFHQSxFQUFJK2lILEVBQWUvaUgsSUFBTyxDQUkxQyxNQUFNa0IsRUFBSWxCLEVBQUkraUgsRUFDUjFnSCxFQUFJdWdILEVBQWlCNWhILEtBQUttbkIsSUFBS2puQixFQUFJRixLQUFLb0gsR0FBSyxHQUM3Q3c5RyxFQUFLL0MsRUFBWTdoSCxLQUFLb25CLElBQUtsbkIsRUFBSUYsS0FBS29ILEdBQUssR0FBTTA2RyxFQUlyRCxJQUFNLElBQUk3Z0gsRUFBSSxFQUFHaTFCLEVBQUtzcUYsRUFBUXZoSCxPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBQU8sQ0FFcEQsTUFBTTRqSCxFQUFPN0IsRUFBVXhDLEVBQVN2L0csR0FBS3VqSCxFQUFrQnZqSCxHQUFLMmpILEdBRTVEeGtILEVBQUd5a0gsRUFBSy9qSCxFQUFHK2pILEVBQUs3akgsR0FBS0ssR0FNdEIsSUFBTSxJQUFJZCxFQUFJLEVBQUdzaUgsRUFBSzNHLEVBQU1qOUcsT0FBUXNCLEVBQUlzaUgsRUFBSXRpSCxJQUFPLENBRWxELE1BQU11aUgsRUFBUTVHLEVBQU8zN0csR0FDckJta0gsRUFBbUJELEVBQWdCbGtILEdBRW5DLElBQU0sSUFBSVUsRUFBSSxFQUFHaTFCLEVBQUs0c0YsRUFBTTdqSCxPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBQU8sQ0FFbEQsTUFBTTRqSCxFQUFPN0IsRUFBVUYsRUFBTzdoSCxHQUFLeWpILEVBQWtCempILEdBQUsyakgsR0FFMUR4a0gsRUFBR3lrSCxFQUFLL2pILEVBQUcrakgsRUFBSzdqSCxHQUFLSyxLQVF4QixNQUFNdWpILEVBQUsvQyxFQUFZQyxFQUl2QixJQUFNLElBQUk3Z0gsRUFBSSxFQUFHQSxFQUFJaWlILEVBQU1qaUgsSUFBTyxDQUVqQyxNQUFNNGpILEVBQU9sRCxFQUFlcUIsRUFBVXo5RCxFQUFVdGtELEdBQUswakgsRUFBbUIxakgsR0FBSzJqSCxHQUFPci9ELEVBQVV0a0QsR0FFdkZ3aEgsR0FRTnJsRixFQUFPalosS0FBTW0rRixFQUFXcmlFLFFBQVMsSUFBTXA3QixlQUFnQmdnRyxFQUFLL2pILEdBQzVEeWhILEVBQVNwK0YsS0FBTW0rRixFQUFXdE0sVUFBVyxJQUFNbnhGLGVBQWdCZ2dHLEVBQUs3akgsR0FFaEV3aEgsRUFBVXIrRixLQUFNaytGLEVBQVksSUFBTWorRixJQUFLZ1osR0FBU2haLElBQUttK0YsR0FFckRuaUgsRUFBR29pSCxFQUFVMWhILEVBQUcwaEgsRUFBVXhoSCxFQUFHd2hILEVBQVVuaEgsSUFYdkNqQixFQUFHeWtILEVBQUsvakgsRUFBRytqSCxFQUFLN2pILEVBQUcsR0FvQnJCLElBQU0sSUFBSXlDLEVBQUksRUFBR0EsR0FBS2krRyxFQUFPaitHLElBRTVCLElBQU0sSUFBSXhDLEVBQUksRUFBR0EsRUFBSWlpSCxFQUFNamlILElBQU8sQ0FFakMsTUFBTTRqSCxFQUFPbEQsRUFBZXFCLEVBQVV6OUQsRUFBVXRrRCxHQUFLMGpILEVBQW1CMWpILEdBQUsyakgsR0FBT3IvRCxFQUFVdGtELEdBRXZGd2hILEdBUU5ybEYsRUFBT2paLEtBQU1tK0YsRUFBV3JpRSxRQUFTeDhDLElBQU1vaEIsZUFBZ0JnZ0csRUFBSy9qSCxHQUM1RHloSCxFQUFTcCtGLEtBQU1tK0YsRUFBV3RNLFVBQVd2eUcsSUFBTW9oQixlQUFnQmdnRyxFQUFLN2pILEdBRWhFd2hILEVBQVVyK0YsS0FBTWsrRixFQUFZNStHLElBQU0yZ0IsSUFBS2daLEdBQVNoWixJQUFLbStGLEdBRXJEbmlILEVBQUdvaUgsRUFBVTFoSCxFQUFHMGhILEVBQVV4aEgsRUFBR3doSCxFQUFVbmhILElBWHZDakIsRUFBR3lrSCxFQUFLL2pILEVBQUcrakgsRUFBSzdqSCxFQUFHZzBCLEVBQVEwc0YsRUFBUWorRyxHQXVCdEMsSUFBTSxJQUFJekUsRUFBSStpSCxFQUFnQixFQUFHL2lILEdBQUssRUFBR0EsSUFBTyxDQUUvQyxNQUFNa0IsRUFBSWxCLEVBQUkraUgsRUFDUjFnSCxFQUFJdWdILEVBQWlCNWhILEtBQUttbkIsSUFBS2puQixFQUFJRixLQUFLb0gsR0FBSyxHQUM3Q3c5RyxFQUFLL0MsRUFBWTdoSCxLQUFLb25CLElBQUtsbkIsRUFBSUYsS0FBS29ILEdBQUssR0FBTTA2RyxFQUlyRCxJQUFNLElBQUk3Z0gsRUFBSSxFQUFHaTFCLEVBQUtzcUYsRUFBUXZoSCxPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBQU8sQ0FFcEQsTUFBTTRqSCxFQUFPN0IsRUFBVXhDLEVBQVN2L0csR0FBS3VqSCxFQUFrQnZqSCxHQUFLMmpILEdBQzVEeGtILEVBQUd5a0gsRUFBSy9qSCxFQUFHK2pILEVBQUs3akgsRUFBR2cwQixFQUFRM3pCLEdBTTVCLElBQU0sSUFBSWQsRUFBSSxFQUFHc2lILEVBQUszRyxFQUFNajlHLE9BQVFzQixFQUFJc2lILEVBQUl0aUgsSUFBTyxDQUVsRCxNQUFNdWlILEVBQVE1RyxFQUFPMzdHLEdBQ3JCbWtILEVBQW1CRCxFQUFnQmxrSCxHQUVuQyxJQUFNLElBQUlVLEVBQUksRUFBR2kxQixFQUFLNHNGLEVBQU03akgsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRWxELE1BQU00akgsRUFBTzdCLEVBQVVGLEVBQU83aEgsR0FBS3lqSCxFQUFrQnpqSCxHQUFLMmpILEdBRW5EbkMsRUFNTnJpSCxFQUFHeWtILEVBQUsvakgsRUFBRytqSCxFQUFLN2pILEVBQUlxaEgsRUFBWVgsRUFBUSxHQUFJMWdILEVBQUdxaEgsRUFBWVgsRUFBUSxHQUFJNWdILEVBQUlPLEdBSjNFakIsRUFBR3lrSCxFQUFLL2pILEVBQUcrakgsRUFBSzdqSCxFQUFHZzBCLEVBQVEzekIsS0E0Ry9CLFNBQVN5akgsRUFBV3RFLEVBQVN1RSxHQUU1QixJQUFJOWpILEVBQUl1L0csRUFBUXZoSCxPQUVoQixPQUFXZ0MsR0FBSyxHQUFJLENBRW5CLE1BQU1FLEVBQUlGLEVBQ1YsSUFBSTRCLEVBQUk1QixFQUFJLEVBQ1A0QixFQUFJLElBQUlBLEVBQUkyOUcsRUFBUXZoSCxPQUFTLEdBSWxDLElBQU0sSUFBSXdFLEVBQUksRUFBR3VoSCxFQUFPdEQsRUFBd0IsRUFBaEJLLEVBQXFCdCtHLEVBQUl1aEgsRUFBSXZoSCxJQUFPLENBRW5FLE1BQU13aEgsRUFBUS9CLEVBQU96L0csRUFDZnloSCxFQUFRaEMsR0FBU3ovRyxFQUFJLEdBTzNCMGhILEVBTFVKLEVBQWM1akgsRUFBSThqSCxFQUN2QkYsRUFBY2xpSCxFQUFJb2lILEVBQ2xCRixFQUFjbGlILEVBQUlxaUgsRUFDbEJILEVBQWM1akgsRUFBSStqSCxLQVUxQixTQUFTOWtILEVBQUdVLEVBQUdFLEVBQUdLLEdBRWpCbWdILEVBQVk3K0csS0FBTTdCLEdBQ2xCMGdILEVBQVk3K0csS0FBTTNCLEdBQ2xCd2dILEVBQVk3K0csS0FBTXRCLEdBS25CLFNBQVMrakgsRUFBSXJtSCxFQUFHQyxFQUFHNkMsR0FFbEJ3akgsRUFBV3RtSCxHQUNYc21ILEVBQVdybUgsR0FDWHFtSCxFQUFXeGpILEdBRVgsTUFBTXlqSCxFQUFZakUsRUFBY3BpSCxPQUFTLEVBQ25DaWhELEVBQU0raEUsRUFBTXNELGNBQWVqZ0UsRUFBTys3RCxFQUFlaUUsRUFBWSxFQUFHQSxFQUFZLEVBQUdBLEVBQVksR0FFakdFLEVBQU90bEUsRUFBSyxJQUNac2xFLEVBQU90bEUsRUFBSyxJQUNac2xFLEVBQU90bEUsRUFBSyxJQUliLFNBQVNpbEUsRUFBSXBtSCxFQUFHQyxFQUFHNkMsRUFBR1ksR0FFckI0aUgsRUFBV3RtSCxHQUNYc21ILEVBQVdybUgsR0FDWHFtSCxFQUFXNWlILEdBRVg0aUgsRUFBV3JtSCxHQUNYcW1ILEVBQVd4akgsR0FDWHdqSCxFQUFXNWlILEdBR1gsTUFBTTZpSCxFQUFZakUsRUFBY3BpSCxPQUFTLEVBQ25DaWhELEVBQU0raEUsRUFBTXdELG1CQUFvQm5nRSxFQUFPKzdELEVBQWVpRSxFQUFZLEVBQUdBLEVBQVksRUFBR0EsRUFBWSxFQUFHQSxFQUFZLEdBRXJIRSxFQUFPdGxFLEVBQUssSUFDWnNsRSxFQUFPdGxFLEVBQUssSUFDWnNsRSxFQUFPdGxFLEVBQUssSUFFWnNsRSxFQUFPdGxFLEVBQUssSUFDWnNsRSxFQUFPdGxFLEVBQUssSUFDWnNsRSxFQUFPdGxFLEVBQUssSUFJYixTQUFTbWxFLEVBQVd0K0csR0FFbkJzNkcsRUFBYzErRyxLQUFNNitHLEVBQXFCLEVBQVJ6NkcsRUFBWSxJQUM3Q3M2RyxFQUFjMStHLEtBQU02K0csRUFBcUIsRUFBUno2RyxFQUFZLElBQzdDczZHLEVBQWMxK0csS0FBTTYrRyxFQUFxQixFQUFSejZHLEVBQVksSUFLOUMsU0FBU3krRyxFQUFPRSxHQUVmcEUsRUFBUTMrRyxLQUFNK2lILEVBQVE1a0gsR0FDdEJ3Z0gsRUFBUTMrRyxLQUFNK2lILEVBQVExa0gsSUEzS3ZCLFdBRUMsTUFBTW1FLEVBQVFrOEcsRUFBY3BpSCxPQUFTLEVBRXJDLEdBQUswaUgsRUFBZSxDQUVuQixJQUFJM1UsRUFBUSxFQUNScm1GLEVBQVN1OEYsRUFBT2xXLEVBSXBCLElBQU0sSUFBSS9yRyxFQUFJLEVBQUdBLEVBQUlraUgsRUFBTWxpSCxJQUFPLENBRWpDLE1BQU0yakQsRUFBTys3RCxFQUFPMS9HLEdBQ3BCbWtILEVBQUl4Z0UsRUFBTSxHQUFNaitCLEVBQVFpK0IsRUFBTSxHQUFNaitCLEVBQVFpK0IsRUFBTSxHQUFNaitCLEdBSXpEcW1GLEVBQVEwVSxFQUF3QixFQUFoQkssRUFDaEJwN0YsRUFBU3U4RixFQUFPbFcsRUFJaEIsSUFBTSxJQUFJL3JHLEVBQUksRUFBR0EsRUFBSWtpSCxFQUFNbGlILElBQU8sQ0FFakMsTUFBTTJqRCxFQUFPKzdELEVBQU8xL0csR0FDcEJta0gsRUFBSXhnRSxFQUFNLEdBQU1qK0IsRUFBUWkrQixFQUFNLEdBQU1qK0IsRUFBUWkrQixFQUFNLEdBQU1qK0IsUUFJbkQsQ0FJTixJQUFNLElBQUkxbEIsRUFBSSxFQUFHQSxFQUFJa2lILEVBQU1saUgsSUFBTyxDQUVqQyxNQUFNMmpELEVBQU8rN0QsRUFBTzEvRyxHQUNwQm1rSCxFQUFJeGdFLEVBQU0sR0FBS0EsRUFBTSxHQUFLQSxFQUFNLElBTWpDLElBQU0sSUFBSTNqRCxFQUFJLEVBQUdBLEVBQUlraUgsRUFBTWxpSCxJQUFPLENBRWpDLE1BQU0yakQsRUFBTys3RCxFQUFPMS9HLEdBQ3BCbWtILEVBQUl4Z0UsRUFBTSxHQUFNcytELEVBQU94QixFQUFPOThELEVBQU0sR0FBTXMrRCxFQUFPeEIsRUFBTzk4RCxFQUFNLEdBQU1zK0QsRUFBT3hCLElBTTdFcDhELEVBQU1sRyxTQUFVajZDLEVBQU9rOEcsRUFBY3BpSCxPQUFTLEVBQUlrRyxFQUFPLEdBN0QxRHdnSCxHQW1FQSxXQUVDLE1BQU14Z0gsRUFBUWs4RyxFQUFjcGlILE9BQVMsRUFDckMsSUFBSThsSCxFQUFjLEVBQ2xCRCxFQUFXdEUsRUFBU3VFLEdBQ3BCQSxHQUFldkUsRUFBUXZoSCxPQUV2QixJQUFNLElBQUlzQixFQUFJLEVBQUdzaUgsRUFBSzNHLEVBQU1qOUcsT0FBUXNCLEVBQUlzaUgsRUFBSXRpSCxJQUFPLENBRWxELE1BQU11aUgsRUFBUTVHLEVBQU8zN0csR0FDckJ1a0gsRUFBV2hDLEVBQU9pQyxHQUdsQkEsR0FBZWpDLEVBQU03akgsT0FLdEJxbUQsRUFBTWxHLFNBQVVqNkMsRUFBT2s4RyxFQUFjcGlILE9BQVMsRUFBSWtHLEVBQU8sR0FqRjFEeWdILEdBN2JEemxILEtBQUttYSxhQUFjLFdBQVksSUFBSTJqQyxHQUF3Qm9qRSxFQUFlLElBQzFFbGhILEtBQUttYSxhQUFjLEtBQU0sSUFBSTJqQyxHQUF3QnFqRSxFQUFTLElBRTlEbmhILEtBQUtpaEQsdUJBa25CTnIxQyxTQUVDLE1BQU1vTSxFQUFPeVosTUFBTTdsQixTQUtuQixPQXdGRixTQUFtQm9sQyxFQUFRbDdCLEVBQVNrQyxHQUluQyxHQUZBQSxFQUFLZzVCLE9BQVMsR0FFVDF4QyxNQUFNdU8sUUFBU21qQyxHQUVuQixJQUFNLElBQUlsd0MsRUFBSSxFQUFHVyxFQUFJdXZDLEVBQU9seUMsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFakQsTUFBTWt4QyxFQUFRaEIsRUFBUWx3QyxHQUV0QmtYLEVBQUtnNUIsT0FBT3h1QyxLQUFNd3ZDLEVBQU05aEIsV0FNekJsWSxFQUFLZzVCLE9BQU94dUMsS0FBTXd1QyxFQUFPOWdCLE1BTTFCLFlBRjZCMVEsSUFBeEIxSixFQUFRK3JHLGNBQTRCN3BHLEVBQUtsQyxRQUFRK3JHLFlBQWMvckcsRUFBUStyRyxZQUFZajJHLFVBRWpGb00sRUE5R0MwdEcsQ0FIUTFsSCxLQUFLK3hDLFdBQVdmLE9BQ2ZoeEMsS0FBSyt4QyxXQUFXajhCLFFBRUVrQyxHQUluQ3VYLGdCQUFpQnZYLEVBQU1nNUIsR0FFdEIsTUFBTTIwRSxFQUFpQixHQUV2QixJQUFNLElBQUkza0gsRUFBSSxFQUFHMCtDLEVBQUsxbkMsRUFBS2c1QixPQUFPbHlDLE9BQVFrQyxFQUFJMCtDLEVBQUkxK0MsSUFBTyxDQUV4RCxNQUFNZ3hDLEVBQVFoQixFQUFRaDVCLEVBQUtnNUIsT0FBUWh3QyxJQUVuQzJrSCxFQUFlbmpILEtBQU13dkMsR0FJdEIsTUFBTTZ2RSxFQUFjN3BHLEVBQUtsQyxRQUFRK3JHLFlBUWpDLFlBTnFCcmlHLElBQWhCcWlHLElBRUo3cEcsRUFBS2xDLFFBQVErckcsYUFBYyxJQUFJbEksR0FBUWtJLEVBQVlockcsT0FBU28vRixTQUFVNEwsSUFJaEUsSUFBSVosR0FBaUIwRSxFQUFnQjN0RyxFQUFLbEMsVUFNbkQsTUFBTWtzRyxHQUFtQixDQUV4Qm9ELGNBQWUsU0FBV3hsRixFQUFVd2xCLEVBQVV3Z0UsRUFBUUMsRUFBUUMsR0FFN0QsTUFBTUMsRUFBTTNnRSxFQUFtQixFQUFUd2dFLEdBQ2hCSSxFQUFNNWdFLEVBQW1CLEVBQVR3Z0UsRUFBYSxHQUM3QkssRUFBTTdnRSxFQUFtQixFQUFUeWdFLEdBQ2hCSyxFQUFNOWdFLEVBQW1CLEVBQVR5Z0UsRUFBYSxHQUM3Qk0sRUFBTS9nRSxFQUFtQixFQUFUMGdFLEdBQ2hCTSxFQUFNaGhFLEVBQW1CLEVBQVQwZ0UsRUFBYSxHQUVuQyxNQUFPLENBQ04sSUFBSXRpRyxFQUFTdWlHLEVBQUtDLEdBQ2xCLElBQUl4aUcsRUFBU3lpRyxFQUFLQyxHQUNsQixJQUFJMWlHLEVBQVMyaUcsRUFBS0MsS0FLcEJkLG1CQUFvQixTQUFXMWxGLEVBQVV3bEIsRUFBVXdnRSxFQUFRQyxFQUFRQyxFQUFRTyxHQUUxRSxNQUFNTixFQUFNM2dFLEVBQW1CLEVBQVR3Z0UsR0FDaEJJLEVBQU01Z0UsRUFBbUIsRUFBVHdnRSxFQUFhLEdBQzdCVSxFQUFNbGhFLEVBQW1CLEVBQVR3Z0UsRUFBYSxHQUM3QkssRUFBTTdnRSxFQUFtQixFQUFUeWdFLEdBQ2hCSyxFQUFNOWdFLEVBQW1CLEVBQVR5Z0UsRUFBYSxHQUM3QlUsRUFBTW5oRSxFQUFtQixFQUFUeWdFLEVBQWEsR0FDN0JNLEVBQU0vZ0UsRUFBbUIsRUFBVDBnRSxHQUNoQk0sRUFBTWhoRSxFQUFtQixFQUFUMGdFLEVBQWEsR0FDN0JVLEVBQU1waEUsRUFBbUIsRUFBVDBnRSxFQUFhLEdBQzdCVyxFQUFNcmhFLEVBQW1CLEVBQVRpaEUsR0FDaEJLLEVBQU10aEUsRUFBbUIsRUFBVGloRSxFQUFhLEdBQzdCTSxFQUFNdmhFLEVBQW1CLEVBQVRpaEUsRUFBYSxHQUVuQyxPQUFLeG1ILEtBQUsyUixJQUFLdzBHLEVBQU1FLEdBQVFybUgsS0FBSzJSLElBQUt1MEcsRUFBTUUsR0FFckMsQ0FDTixJQUFJemlHLEVBQVN1aUcsRUFBSyxFQUFJTyxHQUN0QixJQUFJOWlHLEVBQVN5aUcsRUFBSyxFQUFJTSxHQUN0QixJQUFJL2lHLEVBQVMyaUcsRUFBSyxFQUFJSyxHQUN0QixJQUFJaGpHLEVBQVNpakcsRUFBSyxFQUFJRSxJQUtoQixDQUNOLElBQUluakcsRUFBU3dpRyxFQUFLLEVBQUlNLEdBQ3RCLElBQUk5aUcsRUFBUzBpRyxFQUFLLEVBQUlLLEdBQ3RCLElBQUkvaUcsRUFBUzRpRyxFQUFLLEVBQUlJLEdBQ3RCLElBQUloakcsRUFBU2tqRyxFQUFLLEVBQUlDLE1BME4xQixNQUFNQyxXQUFzQnRvRSxHQUUzQjMxQyxZQUFhcW9DLEVBQVMsSUFBSThxRSxHQUFPLENBQUUsSUFBSXQ0RixFQUFTLEVBQUcsSUFBTyxJQUFJQSxHQUFXLElBQU8sSUFBTyxJQUFJQSxFQUFTLElBQU8sTUFBVzg5RixFQUFnQixJQUVySTd2RixRQUNBenhCLEtBQUs2VyxLQUFPLGdCQUVaN1csS0FBSyt4QyxXQUFhLENBQ2pCZixPQUFRQSxFQUNSc3dFLGNBQWVBLEdBS2hCLE1BQU0xaEUsRUFBVSxHQUNWd0YsRUFBVyxHQUNYdEYsRUFBVSxHQUNWQyxFQUFNLEdBSVosSUFBSXVGLEVBQWEsRUFDYmMsRUFBYSxFQUlqQixJQUFpQyxJQUE1QjltRCxNQUFNdU8sUUFBU21qQyxHQUVuQm93RSxFQUFVcHdFLFFBSVYsSUFBTSxJQUFJbHdDLEVBQUksRUFBR0EsRUFBSWt3QyxFQUFPbHlDLE9BQVFnQyxJQUVuQ3NnSCxFQUFVcHdFLEVBQVFsd0MsSUFFbEJkLEtBQUtpL0MsU0FBVXFHLEVBQVljLEVBQVl0bEQsR0FFdkN3a0QsR0FBY2MsRUFDZEEsRUFBYSxFQWdCZixTQUFTZzdELEVBQVVwdkUsR0FFbEIsTUFBTTYwRSxFQUFjemhFLEVBQVN0bUQsT0FBUyxFQUNoQzIvQixFQUFTdVQsRUFBTWtxRSxjQUFlb0YsR0FFcEMsSUFBSXdGLEVBQWdCcm9GLEVBQU91VCxNQUMzQixNQUFNKzBFLEVBQWF0b0YsRUFBT3M5RSxPQUl1QixJQUE1Q3FFLEdBQVdvQyxZQUFhc0UsS0FFNUJBLEVBQWdCQSxFQUFjckUsV0FJL0IsSUFBTSxJQUFJM2hILEVBQUksRUFBR1csRUFBSXNsSCxFQUFXam9ILE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXJELE1BQU1rbUgsRUFBWUQsRUFBWWptSCxJQUVlLElBQXhDcy9HLEdBQVdvQyxZQUFhd0UsS0FFNUJELEVBQVlqbUgsR0FBTWttSCxFQUFVdkUsV0FNOUIsTUFBTWpDLEVBQVFKLEdBQVd3QyxpQkFBa0JrRSxFQUFlQyxHQUkxRCxJQUFNLElBQUlqbUgsRUFBSSxFQUFHVyxFQUFJc2xILEVBQVdqb0gsT0FBUWdDLEVBQUlXLEVBQUdYLElBQU8sQ0FFckQsTUFBTWttSCxFQUFZRCxFQUFZam1ILEdBQzlCZ21ILEVBQWdCQSxFQUFjdDdHLE9BQVF3N0csR0FNdkMsSUFBTSxJQUFJbG1ILEVBQUksRUFBR1csRUFBSXFsSCxFQUFjaG9ILE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRXhELE1BQU1tbUgsRUFBU0gsRUFBZWhtSCxHQUU5QnNrRCxFQUFTNWlELEtBQU15a0gsRUFBT3RtSCxFQUFHc21ILEVBQU9wbUgsRUFBRyxHQUNuQ2kvQyxFQUFRdDlDLEtBQU0sRUFBRyxFQUFHLEdBQ3BCdTlDLEVBQUl2OUMsS0FBTXlrSCxFQUFPdG1ILEVBQUdzbUgsRUFBT3BtSCxHQU01QixJQUFNLElBQUlDLEVBQUksRUFBR1csRUFBSSsrRyxFQUFNMWhILE9BQVFnQyxFQUFJVyxFQUFHWCxJQUFPLENBRWhELE1BQU0yakQsRUFBTys3RCxFQUFPMS9HLEdBRWRsQyxFQUFJNmxELEVBQU0sR0FBTW9pRSxFQUNoQmhvSCxFQUFJNGxELEVBQU0sR0FBTW9pRSxFQUNoQm5sSCxFQUFJK2lELEVBQU0sR0FBTW9pRSxFQUV0QmpuRSxFQUFRcDlDLEtBQU01RCxFQUFHQyxFQUFHNkMsR0FDcEIwa0QsR0FBYyxHQXRFaEJwbUQsS0FBSzYrQyxTQUFVZSxHQUNmNS9DLEtBQUttYSxhQUFjLFdBQVksSUFBSTJqQyxHQUF3QnNILEVBQVUsSUFDckVwbEQsS0FBS21hLGFBQWMsU0FBVSxJQUFJMmpDLEdBQXdCZ0MsRUFBUyxJQUNsRTkvQyxLQUFLbWEsYUFBYyxLQUFNLElBQUkyakMsR0FBd0JpQyxFQUFLLElBMkUzRG4wQyxTQUVDLE1BQU1vTSxFQUFPeVosTUFBTTdsQixTQUluQixPQXNCRixTQUFpQm9sQyxFQUFRaDVCLEdBSXhCLEdBRkFBLEVBQUtnNUIsT0FBUyxHQUVUMXhDLE1BQU11TyxRQUFTbWpDLEdBRW5CLElBQU0sSUFBSWx3QyxFQUFJLEVBQUdXLEVBQUl1dkMsRUFBT2x5QyxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFBTyxDQUVqRCxNQUFNa3hDLEVBQVFoQixFQUFRbHdDLEdBRXRCa1gsRUFBS2c1QixPQUFPeHVDLEtBQU13dkMsRUFBTTloQixXQU16QmxZLEVBQUtnNUIsT0FBT3h1QyxLQUFNd3VDLEVBQU85Z0IsTUFJMUIsT0FBT2xZLEVBMUNDcE0sQ0FGUTVMLEtBQUsreEMsV0FBV2YsT0FFUmg1QixHQUl4QnVYLGdCQUFpQnZYLEVBQU1nNUIsR0FFdEIsTUFBTTIwRSxFQUFpQixHQUV2QixJQUFNLElBQUkza0gsRUFBSSxFQUFHMCtDLEVBQUsxbkMsRUFBS2c1QixPQUFPbHlDLE9BQVFrQyxFQUFJMCtDLEVBQUkxK0MsSUFBTyxDQUV4RCxNQUFNZ3hDLEVBQVFoQixFQUFRaDVCLEVBQUtnNUIsT0FBUWh3QyxJQUVuQzJrSCxFQUFlbmpILEtBQU13dkMsR0FJdEIsT0FBTyxJQUFJNDBFLEdBQWVqQixFQUFnQjN0RyxFQUFLc3BHLGdCQTJ4QmpELE1BQU10aEMsV0FBdUJ6cUMsR0FFNUI1c0MsWUFBYW9wQyxHQUVadGdCLFFBRUF6eEIsS0FBSzZXLEtBQU8saUJBRVo3VyxLQUFLaUcsTUFBUSxJQUFJK21CLEdBQU8sR0FDeEJodEIsS0FBSzYxQyxhQUFjLEVBRW5CNzFDLEtBQUtpNEMsVUFBV2xHLEdBSWpCL3RCLEtBQU0rSSxHQU1MLE9BSkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS2lHLE1BQU0rZCxLQUFNK0ksRUFBTzltQixPQUVqQmpHLE1BTVRnZ0YsR0FBZXpnRixVQUFVa2xHLGtCQUFtQixFQUU1QyxNQUFNeWlCLFdBQTBCdmdFLEdBRS9CaCtDLFlBQWFvcEMsR0FFWnRnQixNQUFPc2dCLEdBRVAveEMsS0FBSzZXLEtBQU8scUJBTWRxd0csR0FBa0IzbkgsVUFBVXk3RSxxQkFBc0IsRUFFbEQsTUFBTTBFLFdBQTZCbnFDLEdBRWxDNXNDLFlBQWFvcEMsR0FFWnRnQixRQUVBenhCLEtBQUs0bUQsUUFBVSxDQUFFLFNBQVksSUFFN0I1bUQsS0FBSzZXLEtBQU8sdUJBRVo3VyxLQUFLaUcsTUFBUSxJQUFJK21CLEdBQU8sVUFDeEJodEIsS0FBS3E0QyxVQUFZLEVBQ2pCcjRDLEtBQUtzNEMsVUFBWSxFQUVqQnQ0QyxLQUFLb1MsSUFBTSxLQUVYcFMsS0FBS3c1QyxTQUFXLEtBQ2hCeDVDLEtBQUt5NUMsa0JBQW9CLEVBRXpCejVDLEtBQUswNUMsTUFBUSxLQUNiMTVDLEtBQUsyNUMsZUFBaUIsRUFFdEIzNUMsS0FBSzA0QyxTQUFXLElBQUkxckIsR0FBTyxHQUMzQmh0QixLQUFLMjRDLGtCQUFvQixFQUN6QjM0QyxLQUFLczZDLFlBQWMsS0FFbkJ0NkMsS0FBSzQ1QyxRQUFVLEtBQ2Y1NUMsS0FBSzY1QyxVQUFZLEVBRWpCNzVDLEtBQUs4NUMsVUFBWSxLQUNqQjk1QyxLQUFLKzVDLGNBLzJtQ3VCLEVBZzNtQzVCLzVDLEtBQUtnNkMsWUFBYyxJQUFJeDJCLEVBQVMsRUFBRyxHQUVuQ3hqQixLQUFLaTZDLGdCQUFrQixLQUN2Qmo2QyxLQUFLazZDLGtCQUFvQixFQUN6Qmw2QyxLQUFLbTZDLGlCQUFtQixFQUV4Qm42QyxLQUFLbzZDLGFBQWUsS0FFcEJwNkMsS0FBS3E2QyxhQUFlLEtBRXBCcjZDLEtBQUt1NUMsU0FBVyxLQUVoQnY1QyxLQUFLMDZDLE9BQVMsS0FDZDE2QyxLQUFLNDZDLGdCQUFrQixFQUV2QjU2QyxLQUFLMDdDLFdBQVksRUFDakIxN0MsS0FBSzI3QyxtQkFBcUIsRUFDMUIzN0MsS0FBSzQ3QyxpQkFBbUIsUUFDeEI1N0MsS0FBSzY3QyxrQkFBb0IsUUFFekI3N0MsS0FBS200QyxhQUFjLEVBRW5CbjRDLEtBQUtpNEMsVUFBV2xHLEdBSWpCL3RCLEtBQU0rSSxHQWlETCxPQS9DQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLNG1ELFFBQVUsQ0FBRSxTQUFZLElBRTdCNW1ELEtBQUtpRyxNQUFNK2QsS0FBTStJLEVBQU85bUIsT0FDeEJqRyxLQUFLcTRDLFVBQVl0ckIsRUFBT3NyQixVQUN4QnI0QyxLQUFLczRDLFVBQVl2ckIsRUFBT3VyQixVQUV4QnQ0QyxLQUFLb1MsSUFBTTJhLEVBQU8zYSxJQUVsQnBTLEtBQUt3NUMsU0FBV3pzQixFQUFPeXNCLFNBQ3ZCeDVDLEtBQUt5NUMsa0JBQW9CMXNCLEVBQU8wc0Isa0JBRWhDejVDLEtBQUswNUMsTUFBUTNzQixFQUFPMnNCLE1BQ3BCMTVDLEtBQUsyNUMsZUFBaUI1c0IsRUFBTzRzQixlQUU3QjM1QyxLQUFLMDRDLFNBQVMxMEIsS0FBTStJLEVBQU8yckIsVUFDM0IxNEMsS0FBS3M2QyxZQUFjdnRCLEVBQU91dEIsWUFDMUJ0NkMsS0FBSzI0QyxrQkFBb0I1ckIsRUFBTzRyQixrQkFFaEMzNEMsS0FBSzQ1QyxRQUFVN3NCLEVBQU82c0IsUUFDdEI1NUMsS0FBSzY1QyxVQUFZOXNCLEVBQU84c0IsVUFFeEI3NUMsS0FBSzg1QyxVQUFZL3NCLEVBQU8rc0IsVUFDeEI5NUMsS0FBSys1QyxjQUFnQmh0QixFQUFPZ3RCLGNBQzVCLzVDLEtBQUtnNkMsWUFBWWgyQixLQUFNK0ksRUFBT2l0QixhQUU5Qmg2QyxLQUFLaTZDLGdCQUFrQmx0QixFQUFPa3RCLGdCQUM5Qmo2QyxLQUFLazZDLGtCQUFvQm50QixFQUFPbXRCLGtCQUNoQ2w2QyxLQUFLbTZDLGlCQUFtQnB0QixFQUFPb3RCLGlCQUUvQm42QyxLQUFLbzZDLGFBQWVydEIsRUFBT3F0QixhQUUzQnA2QyxLQUFLcTZDLGFBQWV0dEIsRUFBT3N0QixhQUUzQnI2QyxLQUFLdTVDLFNBQVd4c0IsRUFBT3dzQixTQUV2QnY1QyxLQUFLMDZDLE9BQVMzdEIsRUFBTzJ0QixPQUNyQjE2QyxLQUFLNDZDLGdCQUFrQjd0QixFQUFPNnRCLGdCQUU5QjU2QyxLQUFLMDdDLFVBQVkzdUIsRUFBTzJ1QixVQUN4QjE3QyxLQUFLMjdDLG1CQUFxQjV1QixFQUFPNHVCLG1CQUNqQzM3QyxLQUFLNDdDLGlCQUFtQjd1QixFQUFPNnVCLGlCQUMvQjU3QyxLQUFLNjdDLGtCQUFvQjl1QixFQUFPOHVCLGtCQUVoQzc3QyxLQUFLbTRDLFlBQWNwckIsRUFBT29yQixZQUVuQm40QyxNQU1UMC9FLEdBQXFCbmdGLFVBQVU2Z0Ysd0JBQXlCLEVBRXhELE1BQU1ULFdBQTZCRCxHQUVsQy8yRSxZQUFhb3BDLEdBRVp0Z0IsUUFFQXp4QixLQUFLNG1ELFFBQVUsQ0FFZCxTQUFZLEdBQ1osU0FBWSxJQUliNW1ELEtBQUs2VyxLQUFPLHVCQUVaN1csS0FBS2s1QyxhQUFlLEtBQ3BCbDVDLEtBQUtpNUMsbUJBQXFCLEVBQzFCajVDLEtBQUttNUMsc0JBQXdCLEtBQzdCbjVDLEtBQUtxNUMscUJBQXVCLElBQUk3MUIsRUFBUyxFQUFHLEdBQzVDeGpCLEtBQUtvNUMsbUJBQXFCLEtBRTFCcDVDLEtBQUsrNEQsSUFBTSxJQUVYNzVELE9BQU9FLGVBQWdCWSxLQUFNLGVBQWdCLENBQzVDNFcsSUFBSyxXQUVKLE9BQVN3TSxFQUFPLEtBQVFwakIsS0FBSys0RCxJQUFNLElBQVEvNEQsS0FBSys0RCxJQUFNLEdBQUssRUFBRyxJQUcvRHBzRCxJQUFLLFNBQVdrdUMsR0FFZjc2QyxLQUFLKzRELEtBQVEsRUFBSSxHQUFNbGUsSUFBbUIsRUFBSSxHQUFNQSxNQUt0RDc2QyxLQUFLdzRDLFdBQWEsSUFBSXhyQixHQUFPLEdBQzdCaHRCLEtBQUsybEUsY0FBZ0IsS0FDckIzbEUsS0FBS3k0QyxlQUFpQixFQUN0Qno0QyxLQUFLNGxFLGtCQUFvQixLQUV6QjVsRSxLQUFLaTdDLGdCQUFrQixLQUV2Qmo3QyxLQUFLazdDLFVBQVksRUFDakJsN0MsS0FBS203QyxhQUFlLEtBQ3BCbjdDLEtBQUtvN0Msb0JBQXNCLEVBQzNCcDdDLEtBQUtxN0MsaUJBQW1CLElBQUlydUIsR0FBTyxFQUFHLEVBQUcsR0FFekNodEIsS0FBSzY0QyxrQkFBb0IsRUFDekI3NEMsS0FBS3c2QyxxQkFBdUIsS0FDNUJ4NkMsS0FBSzg0QyxjQUFnQixJQUFJOXJCLEdBQU8sRUFBRyxFQUFHLEdBQ3RDaHRCLEtBQUt5NkMsaUJBQW1CLEtBRXhCejZDLEtBQUttbkgsT0FBUyxFQUNkbm5ILEtBQUtvbkgsV0FBYSxFQUNsQnBuSCxLQUFLcW5ILGNBQWdCLEVBRXJCcm5ILEtBQUtpNEMsVUFBV2xHLEdBSWJ3RyxZQUVILE9BQU92NEMsS0FBS21uSCxPQUlUNXVFLFVBQU92NUMsR0FFTGdCLEtBQUttbkgsT0FBUyxHQUFNbm9ILEVBQVEsR0FFaENnQixLQUFLbXdCLFVBSU5ud0IsS0FBS21uSCxPQUFTbm9ILEVBSVhnNkMsZ0JBRUgsT0FBT2g1QyxLQUFLb25ILFdBSVRwdUUsY0FBV2g2QyxHQUVUZ0IsS0FBS29uSCxXQUFhLEdBQU1wb0gsRUFBUSxHQUVwQ2dCLEtBQUttd0IsVUFJTm53QixLQUFLb25ILFdBQWFwb0gsRUFJZmc4QyxtQkFFSCxPQUFPaDdDLEtBQUtxbkgsY0FJVHJzRSxpQkFBY2g4QyxHQUVaZ0IsS0FBS3FuSCxjQUFnQixHQUFNcm9ILEVBQVEsR0FFdkNnQixLQUFLbXdCLFVBSU5ud0IsS0FBS3FuSCxjQUFnQnJvSCxFQUl0QmdsQixLQUFNK0ksR0F1Q0wsT0FyQ0EwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBSzRtRCxRQUFVLENBRWQsU0FBWSxHQUNaLFNBQVksSUFJYjVtRCxLQUFLZzVDLFVBQVlqc0IsRUFBT2lzQixVQUN4Qmg1QyxLQUFLazVDLGFBQWVuc0IsRUFBT21zQixhQUMzQmw1QyxLQUFLaTVDLG1CQUFxQmxzQixFQUFPa3NCLG1CQUNqQ2o1QyxLQUFLbTVDLHNCQUF3QnBzQixFQUFPb3NCLHNCQUNwQ241QyxLQUFLbzVDLG1CQUFxQnJzQixFQUFPcXNCLG1CQUNqQ3A1QyxLQUFLcTVDLHFCQUFxQnIxQixLQUFNK0ksRUFBT3NzQixzQkFFdkNyNUMsS0FBSys0RCxJQUFNaHNDLEVBQU9nc0MsSUFFbEIvNEQsS0FBS3U0QyxNQUFReHJCLEVBQU93ckIsTUFDcEJ2NEMsS0FBS3c0QyxXQUFXeDBCLEtBQU0rSSxFQUFPeXJCLFlBQzdCeDRDLEtBQUsybEUsY0FBZ0I1NEMsRUFBTzQ0QyxjQUM1QjNsRSxLQUFLeTRDLGVBQWlCMXJCLEVBQU8wckIsZUFDN0J6NEMsS0FBSzRsRSxrQkFBb0I3NEMsRUFBTzY0QyxrQkFFaEM1bEUsS0FBS2c3QyxhQUFlanVCLEVBQU9pdUIsYUFDM0JoN0MsS0FBS2k3QyxnQkFBa0JsdUIsRUFBT2t1QixnQkFFOUJqN0MsS0FBS2s3QyxVQUFZbnVCLEVBQU9tdUIsVUFDeEJsN0MsS0FBS203QyxhQUFlcHVCLEVBQU9vdUIsYUFDM0JuN0MsS0FBS283QyxvQkFBc0JydUIsRUFBT3F1QixvQkFDbENwN0MsS0FBS3E3QyxpQkFBaUJyM0IsS0FBTStJLEVBQU9zdUIsa0JBRW5DcjdDLEtBQUs2NEMsa0JBQW9COXJCLEVBQU84ckIsa0JBQ2hDNzRDLEtBQUt3NkMscUJBQXVCenRCLEVBQU95dEIscUJBQ25DeDZDLEtBQUs4NEMsY0FBYzkwQixLQUFNK0ksRUFBTytyQixlQUNoQzk0QyxLQUFLeTZDLGlCQUFtQjF0QixFQUFPMHRCLGlCQUV4Qno2QyxNQU1UMi9FLEdBQXFCcGdGLFVBQVVva0csd0JBQXlCLEVBRXhELE1BQU1ua0IsV0FBMEJqcUMsR0FFL0I1c0MsWUFBYW9wQyxHQUVadGdCLFFBRUF6eEIsS0FBSzZXLEtBQU8sb0JBRVo3VyxLQUFLaUcsTUFBUSxJQUFJK21CLEdBQU8sVUFDeEJodEIsS0FBSzQ0QyxTQUFXLElBQUk1ckIsR0FBTyxTQUMzQmh0QixLQUFLKzRDLFVBQVksR0FFakIvNEMsS0FBS29TLElBQU0sS0FFWHBTLEtBQUt3NUMsU0FBVyxLQUNoQng1QyxLQUFLeTVDLGtCQUFvQixFQUV6Qno1QyxLQUFLMDVDLE1BQVEsS0FDYjE1QyxLQUFLMjVDLGVBQWlCLEVBRXRCMzVDLEtBQUswNEMsU0FBVyxJQUFJMXJCLEdBQU8sR0FDM0JodEIsS0FBSzI0QyxrQkFBb0IsRUFDekIzNEMsS0FBS3M2QyxZQUFjLEtBRW5CdDZDLEtBQUs0NUMsUUFBVSxLQUNmNTVDLEtBQUs2NUMsVUFBWSxFQUVqQjc1QyxLQUFLODVDLFVBQVksS0FDakI5NUMsS0FBSys1QyxjQWpvbkN1QixFQWtvbkM1Qi81QyxLQUFLZzZDLFlBQWMsSUFBSXgyQixFQUFTLEVBQUcsR0FFbkN4akIsS0FBS2k2QyxnQkFBa0IsS0FDdkJqNkMsS0FBS2s2QyxrQkFBb0IsRUFDekJsNkMsS0FBS202QyxpQkFBbUIsRUFFeEJuNkMsS0FBS3U2QyxZQUFjLEtBRW5CdjZDLEtBQUt1NUMsU0FBVyxLQUVoQnY1QyxLQUFLMDZDLE9BQVMsS0FDZDE2QyxLQUFLMjZDLFFBOXVuQ21CLEVBK3VuQ3hCMzZDLEtBQUs2NkMsYUFBZSxFQUNwQjc2QyxLQUFLODZDLGdCQUFrQixJQUV2Qjk2QyxLQUFLMDdDLFdBQVksRUFDakIxN0MsS0FBSzI3QyxtQkFBcUIsRUFDMUIzN0MsS0FBSzQ3QyxpQkFBbUIsUUFDeEI1N0MsS0FBSzY3QyxrQkFBb0IsUUFFekI3N0MsS0FBS200QyxhQUFjLEVBRW5CbjRDLEtBQUtpNEMsVUFBV2xHLEdBSWpCL3RCLEtBQU0rSSxHQStDTCxPQTdDQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLaUcsTUFBTStkLEtBQU0rSSxFQUFPOW1CLE9BQ3hCakcsS0FBSzQ0QyxTQUFTNTBCLEtBQU0rSSxFQUFPNnJCLFVBQzNCNTRDLEtBQUsrNEMsVUFBWWhzQixFQUFPZ3NCLFVBRXhCLzRDLEtBQUtvUyxJQUFNMmEsRUFBTzNhLElBRWxCcFMsS0FBS3c1QyxTQUFXenNCLEVBQU95c0IsU0FDdkJ4NUMsS0FBS3k1QyxrQkFBb0Ixc0IsRUFBTzBzQixrQkFFaEN6NUMsS0FBSzA1QyxNQUFRM3NCLEVBQU8yc0IsTUFDcEIxNUMsS0FBSzI1QyxlQUFpQjVzQixFQUFPNHNCLGVBRTdCMzVDLEtBQUswNEMsU0FBUzEwQixLQUFNK0ksRUFBTzJyQixVQUMzQjE0QyxLQUFLczZDLFlBQWN2dEIsRUFBT3V0QixZQUMxQnQ2QyxLQUFLMjRDLGtCQUFvQjVyQixFQUFPNHJCLGtCQUVoQzM0QyxLQUFLNDVDLFFBQVU3c0IsRUFBTzZzQixRQUN0QjU1QyxLQUFLNjVDLFVBQVk5c0IsRUFBTzhzQixVQUV4Qjc1QyxLQUFLODVDLFVBQVkvc0IsRUFBTytzQixVQUN4Qjk1QyxLQUFLKzVDLGNBQWdCaHRCLEVBQU9ndEIsY0FDNUIvNUMsS0FBS2c2QyxZQUFZaDJCLEtBQU0rSSxFQUFPaXRCLGFBRTlCaDZDLEtBQUtpNkMsZ0JBQWtCbHRCLEVBQU9rdEIsZ0JBQzlCajZDLEtBQUtrNkMsa0JBQW9CbnRCLEVBQU9tdEIsa0JBQ2hDbDZDLEtBQUttNkMsaUJBQW1CcHRCLEVBQU9vdEIsaUJBRS9CbjZDLEtBQUt1NkMsWUFBY3h0QixFQUFPd3RCLFlBRTFCdjZDLEtBQUt1NUMsU0FBV3hzQixFQUFPd3NCLFNBRXZCdjVDLEtBQUswNkMsT0FBUzN0QixFQUFPMnRCLE9BQ3JCMTZDLEtBQUsyNkMsUUFBVTV0QixFQUFPNHRCLFFBQ3RCMzZDLEtBQUs2NkMsYUFBZTl0QixFQUFPOHRCLGFBQzNCNzZDLEtBQUs4NkMsZ0JBQWtCL3RCLEVBQU8rdEIsZ0JBRTlCOTZDLEtBQUswN0MsVUFBWTN1QixFQUFPMnVCLFVBQ3hCMTdDLEtBQUsyN0MsbUJBQXFCNXVCLEVBQU80dUIsbUJBQ2pDMzdDLEtBQUs0N0MsaUJBQW1CN3VCLEVBQU82dUIsaUJBQy9CNTdDLEtBQUs2N0Msa0JBQW9COXVCLEVBQU84dUIsa0JBRWhDNzdDLEtBQUttNEMsWUFBY3ByQixFQUFPb3JCLFlBRW5CbjRDLE1BTVR3L0UsR0FBa0JqZ0YsVUFBVWlrRyxxQkFBc0IsRUFFbEQsTUFBTS9qQixXQUF5QmxxQyxHQUU5QjVzQyxZQUFhb3BDLEdBRVp0Z0IsUUFFQXp4QixLQUFLNG1ELFFBQVUsQ0FBRSxLQUFRLElBRXpCNW1ELEtBQUs2VyxLQUFPLG1CQUVaN1csS0FBS2lHLE1BQVEsSUFBSSttQixHQUFPLFVBRXhCaHRCLEtBQUtvUyxJQUFNLEtBQ1hwUyxLQUFLKzZDLFlBQWMsS0FFbkIvNkMsS0FBS3c1QyxTQUFXLEtBQ2hCeDVDLEtBQUt5NUMsa0JBQW9CLEVBRXpCejVDLEtBQUswNUMsTUFBUSxLQUNiMTVDLEtBQUsyNUMsZUFBaUIsRUFFdEIzNUMsS0FBSzA0QyxTQUFXLElBQUkxckIsR0FBTyxHQUMzQmh0QixLQUFLMjRDLGtCQUFvQixFQUN6QjM0QyxLQUFLczZDLFlBQWMsS0FFbkJ0NkMsS0FBSzQ1QyxRQUFVLEtBQ2Y1NUMsS0FBSzY1QyxVQUFZLEVBRWpCNzVDLEtBQUs4NUMsVUFBWSxLQUNqQjk1QyxLQUFLKzVDLGNBaHZuQ3VCLEVBaXZuQzVCLzVDLEtBQUtnNkMsWUFBYyxJQUFJeDJCLEVBQVMsRUFBRyxHQUVuQ3hqQixLQUFLaTZDLGdCQUFrQixLQUN2Qmo2QyxLQUFLazZDLGtCQUFvQixFQUN6Qmw2QyxLQUFLbTZDLGlCQUFtQixFQUV4Qm42QyxLQUFLdTVDLFNBQVcsS0FFaEJ2NUMsS0FBSzA3QyxXQUFZLEVBQ2pCMTdDLEtBQUsyN0MsbUJBQXFCLEVBQzFCMzdDLEtBQUs0N0MsaUJBQW1CLFFBQ3hCNTdDLEtBQUs2N0Msa0JBQW9CLFFBRXpCNzdDLEtBQUtpNEMsVUFBV2xHLEdBSWpCL3RCLEtBQU0rSSxHQXFDTCxPQW5DQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLaUcsTUFBTStkLEtBQU0rSSxFQUFPOW1CLE9BRXhCakcsS0FBS29TLElBQU0yYSxFQUFPM2EsSUFDbEJwUyxLQUFLKzZDLFlBQWNodUIsRUFBT2d1QixZQUUxQi82QyxLQUFLdzVDLFNBQVd6c0IsRUFBT3lzQixTQUN2Qng1QyxLQUFLeTVDLGtCQUFvQjFzQixFQUFPMHNCLGtCQUVoQ3o1QyxLQUFLMDVDLE1BQVEzc0IsRUFBTzJzQixNQUNwQjE1QyxLQUFLMjVDLGVBQWlCNXNCLEVBQU80c0IsZUFFN0IzNUMsS0FBSzA0QyxTQUFTMTBCLEtBQU0rSSxFQUFPMnJCLFVBQzNCMTRDLEtBQUtzNkMsWUFBY3Z0QixFQUFPdXRCLFlBQzFCdDZDLEtBQUsyNEMsa0JBQW9CNXJCLEVBQU80ckIsa0JBRWhDMzRDLEtBQUs0NUMsUUFBVTdzQixFQUFPNnNCLFFBQ3RCNTVDLEtBQUs2NUMsVUFBWTlzQixFQUFPOHNCLFVBRXhCNzVDLEtBQUs4NUMsVUFBWS9zQixFQUFPK3NCLFVBQ3hCOTVDLEtBQUsrNUMsY0FBZ0JodEIsRUFBT2d0QixjQUM1Qi81QyxLQUFLZzZDLFlBQVloMkIsS0FBTStJLEVBQU9pdEIsYUFFOUJoNkMsS0FBS2k2QyxnQkFBa0JsdEIsRUFBT2t0QixnQkFDOUJqNkMsS0FBS2s2QyxrQkFBb0JudEIsRUFBT210QixrQkFDaENsNkMsS0FBS202QyxpQkFBbUJwdEIsRUFBT290QixpQkFFL0JuNkMsS0FBS3U1QyxTQUFXeHNCLEVBQU93c0IsU0FFdkJ2NUMsS0FBSzA3QyxVQUFZM3VCLEVBQU8ydUIsVUFDeEIxN0MsS0FBSzI3QyxtQkFBcUI1dUIsRUFBTzR1QixtQkFDakMzN0MsS0FBSzQ3QyxpQkFBbUI3dUIsRUFBTzZ1QixpQkFDL0I1N0MsS0FBSzY3QyxrQkFBb0I5dUIsRUFBTzh1QixrQkFFekI3N0MsTUFNVHkvRSxHQUFpQmxnRixVQUFVK2pHLG9CQUFxQixFQUVoRCxNQUFNaGtCLFdBQTJCL3BDLEdBRWhDNXNDLFlBQWFvcEMsR0FFWnRnQixRQUVBenhCLEtBQUs2VyxLQUFPLHFCQUVaN1csS0FBSzQ1QyxRQUFVLEtBQ2Y1NUMsS0FBSzY1QyxVQUFZLEVBRWpCNzVDLEtBQUs4NUMsVUFBWSxLQUNqQjk1QyxLQUFLKzVDLGNBM3puQ3VCLEVBNHpuQzVCLzVDLEtBQUtnNkMsWUFBYyxJQUFJeDJCLEVBQVMsRUFBRyxHQUVuQ3hqQixLQUFLaTZDLGdCQUFrQixLQUN2Qmo2QyxLQUFLazZDLGtCQUFvQixFQUN6Qmw2QyxLQUFLbTZDLGlCQUFtQixFQUV4Qm42QyxLQUFLMDdDLFdBQVksRUFDakIxN0MsS0FBSzI3QyxtQkFBcUIsRUFFMUIzN0MsS0FBS3cxQyxLQUFNLEVBRVh4MUMsS0FBS200QyxhQUFjLEVBRW5CbjRDLEtBQUtpNEMsVUFBV2xHLEdBSWpCL3RCLEtBQU0rSSxHQW9CTCxPQWxCQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLNDVDLFFBQVU3c0IsRUFBTzZzQixRQUN0QjU1QyxLQUFLNjVDLFVBQVk5c0IsRUFBTzhzQixVQUV4Qjc1QyxLQUFLODVDLFVBQVkvc0IsRUFBTytzQixVQUN4Qjk1QyxLQUFLKzVDLGNBQWdCaHRCLEVBQU9ndEIsY0FDNUIvNUMsS0FBS2c2QyxZQUFZaDJCLEtBQU0rSSxFQUFPaXRCLGFBRTlCaDZDLEtBQUtpNkMsZ0JBQWtCbHRCLEVBQU9rdEIsZ0JBQzlCajZDLEtBQUtrNkMsa0JBQW9CbnRCLEVBQU9tdEIsa0JBQ2hDbDZDLEtBQUttNkMsaUJBQW1CcHRCLEVBQU9vdEIsaUJBRS9CbjZDLEtBQUswN0MsVUFBWTN1QixFQUFPMnVCLFVBQ3hCMTdDLEtBQUsyN0MsbUJBQXFCNXVCLEVBQU80dUIsbUJBRWpDMzdDLEtBQUttNEMsWUFBY3ByQixFQUFPb3JCLFlBRW5CbjRDLE1BTVRzL0UsR0FBbUIvL0UsVUFBVXlrRyxzQkFBdUIsRUFFcEQsTUFBTXprQixXQUE0QmhxQyxHQUVqQzVzQyxZQUFhb3BDLEdBRVp0Z0IsUUFFQXp4QixLQUFLNlcsS0FBTyxzQkFFWjdXLEtBQUtpRyxNQUFRLElBQUkrbUIsR0FBTyxVQUV4Qmh0QixLQUFLb1MsSUFBTSxLQUVYcFMsS0FBS3c1QyxTQUFXLEtBQ2hCeDVDLEtBQUt5NUMsa0JBQW9CLEVBRXpCejVDLEtBQUswNUMsTUFBUSxLQUNiMTVDLEtBQUsyNUMsZUFBaUIsRUFFdEIzNUMsS0FBSzA0QyxTQUFXLElBQUkxckIsR0FBTyxHQUMzQmh0QixLQUFLMjRDLGtCQUFvQixFQUN6QjM0QyxLQUFLczZDLFlBQWMsS0FFbkJ0NkMsS0FBS3U2QyxZQUFjLEtBRW5CdjZDLEtBQUt1NUMsU0FBVyxLQUVoQnY1QyxLQUFLMDZDLE9BQVMsS0FDZDE2QyxLQUFLMjZDLFFBcituQ21CLEVBcytuQ3hCMzZDLEtBQUs2NkMsYUFBZSxFQUNwQjc2QyxLQUFLODZDLGdCQUFrQixJQUV2Qjk2QyxLQUFLMDdDLFdBQVksRUFDakIxN0MsS0FBSzI3QyxtQkFBcUIsRUFDMUIzN0MsS0FBSzQ3QyxpQkFBbUIsUUFDeEI1N0MsS0FBSzY3QyxrQkFBb0IsUUFFekI3N0MsS0FBS2k0QyxVQUFXbEcsR0FJakIvdEIsS0FBTStJLEdBZ0NMLE9BOUJBMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUtpRyxNQUFNK2QsS0FBTStJLEVBQU85bUIsT0FFeEJqRyxLQUFLb1MsSUFBTTJhLEVBQU8zYSxJQUVsQnBTLEtBQUt3NUMsU0FBV3pzQixFQUFPeXNCLFNBQ3ZCeDVDLEtBQUt5NUMsa0JBQW9CMXNCLEVBQU8wc0Isa0JBRWhDejVDLEtBQUswNUMsTUFBUTNzQixFQUFPMnNCLE1BQ3BCMTVDLEtBQUsyNUMsZUFBaUI1c0IsRUFBTzRzQixlQUU3QjM1QyxLQUFLMDRDLFNBQVMxMEIsS0FBTStJLEVBQU8yckIsVUFDM0IxNEMsS0FBS3M2QyxZQUFjdnRCLEVBQU91dEIsWUFDMUJ0NkMsS0FBSzI0QyxrQkFBb0I1ckIsRUFBTzRyQixrQkFFaEMzNEMsS0FBS3U2QyxZQUFjeHRCLEVBQU93dEIsWUFFMUJ2NkMsS0FBS3U1QyxTQUFXeHNCLEVBQU93c0IsU0FFdkJ2NUMsS0FBSzA2QyxPQUFTM3RCLEVBQU8ydEIsT0FDckIxNkMsS0FBSzI2QyxRQUFVNXRCLEVBQU80dEIsUUFDdEIzNkMsS0FBSzY2QyxhQUFlOXRCLEVBQU84dEIsYUFDM0I3NkMsS0FBSzg2QyxnQkFBa0IvdEIsRUFBTyt0QixnQkFFOUI5NkMsS0FBSzA3QyxVQUFZM3VCLEVBQU8ydUIsVUFDeEIxN0MsS0FBSzI3QyxtQkFBcUI1dUIsRUFBTzR1QixtQkFDakMzN0MsS0FBSzQ3QyxpQkFBbUI3dUIsRUFBTzZ1QixpQkFDL0I1N0MsS0FBSzY3QyxrQkFBb0I5dUIsRUFBTzh1QixrQkFFekI3N0MsTUFNVHUvRSxHQUFvQmhnRixVQUFVOGpHLHVCQUF3QixFQUV0RCxNQUFNempCLFdBQTJCcnFDLEdBRWhDNXNDLFlBQWFvcEMsR0FFWnRnQixRQUVBenhCLEtBQUs0bUQsUUFBVSxDQUFFLE9BQVUsSUFFM0I1bUQsS0FBSzZXLEtBQU8scUJBRVo3VyxLQUFLaUcsTUFBUSxJQUFJK21CLEdBQU8sVUFFeEJodEIsS0FBS3M1QyxPQUFTLEtBRWR0NUMsS0FBS29TLElBQU0sS0FFWHBTLEtBQUs0NUMsUUFBVSxLQUNmNTVDLEtBQUs2NUMsVUFBWSxFQUVqQjc1QyxLQUFLODVDLFVBQVksS0FDakI5NUMsS0FBSys1QyxjQTc4bkN1QixFQTg4bkM1Qi81QyxLQUFLZzZDLFlBQWMsSUFBSXgyQixFQUFTLEVBQUcsR0FFbkN4akIsS0FBS2k2QyxnQkFBa0IsS0FDdkJqNkMsS0FBS2s2QyxrQkFBb0IsRUFDekJsNkMsS0FBS202QyxpQkFBbUIsRUFFeEJuNkMsS0FBS3U1QyxTQUFXLEtBRWhCdjVDLEtBQUttNEMsYUFBYyxFQUVuQm40QyxLQUFLaTRDLFVBQVdsRyxHQUtqQi90QixLQUFNK0ksR0EyQkwsT0F6QkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBSzRtRCxRQUFVLENBQUUsT0FBVSxJQUUzQjVtRCxLQUFLaUcsTUFBTStkLEtBQU0rSSxFQUFPOW1CLE9BRXhCakcsS0FBS3M1QyxPQUFTdnNCLEVBQU91c0IsT0FFckJ0NUMsS0FBS29TLElBQU0yYSxFQUFPM2EsSUFFbEJwUyxLQUFLNDVDLFFBQVU3c0IsRUFBTzZzQixRQUN0QjU1QyxLQUFLNjVDLFVBQVk5c0IsRUFBTzhzQixVQUV4Qjc1QyxLQUFLODVDLFVBQVkvc0IsRUFBTytzQixVQUN4Qjk1QyxLQUFLKzVDLGNBQWdCaHRCLEVBQU9ndEIsY0FDNUIvNUMsS0FBS2c2QyxZQUFZaDJCLEtBQU0rSSxFQUFPaXRCLGFBRTlCaDZDLEtBQUtpNkMsZ0JBQWtCbHRCLEVBQU9rdEIsZ0JBQzlCajZDLEtBQUtrNkMsa0JBQW9CbnRCLEVBQU9tdEIsa0JBQ2hDbDZDLEtBQUttNkMsaUJBQW1CcHRCLEVBQU9vdEIsaUJBRS9CbjZDLEtBQUt1NUMsU0FBV3hzQixFQUFPd3NCLFNBRXZCdjVDLEtBQUttNEMsWUFBY3ByQixFQUFPb3JCLFlBRW5CbjRDLE1BTVQ0L0UsR0FBbUJyZ0YsVUFBVXNrRyxzQkFBdUIsRUFFcEQsTUFBTS9qQixXQUEyQkQsR0FFaENsM0UsWUFBYW9wQyxHQUVadGdCLFFBRUF6eEIsS0FBSzZXLEtBQU8scUJBRVo3VyxLQUFLK3FCLE1BQVEsRUFDYi9xQixLQUFLdzdDLFNBQVcsRUFDaEJ4N0MsS0FBS3k3QyxRQUFVLEVBRWZ6N0MsS0FBS2k0QyxVQUFXbEcsR0FJakIvdEIsS0FBTStJLEdBUUwsT0FOQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLK3FCLE1BQVFnQyxFQUFPaEMsTUFDcEIvcUIsS0FBS3c3QyxTQUFXenVCLEVBQU95dUIsU0FDdkJ4N0MsS0FBS3k3QyxRQUFVMXVCLEVBQU8wdUIsUUFFZno3QyxNQU1UOC9FLEdBQW1CdmdGLFVBQVU0a0csc0JBQXVCLEVBRXBELE1BQU1takIsR0FBYyxDQUNuQnRuQyxlQUFBQSxHQUNBQyxlQUFBQSxHQUNBaW5DLGtCQUFBQSxHQUNBdmdFLGVBQUFBLEdBQ0FvNUIsZUFBQUEsR0FDQUoscUJBQUFBLEdBQ0FELHFCQUFBQSxHQUNBRixrQkFBQUEsR0FDQUMsaUJBQUFBLEdBQ0FILG1CQUFBQSxHQUNBQyxvQkFBQUEsR0FDQUgsa0JBQUFBLEdBQ0FDLHFCQUFBQSxHQUNBbmpDLGtCQUFBQSxHQUNBMGpDLG1CQUFBQSxHQUNBRSxtQkFBQUEsR0FDQUQsa0JBQUFBLEdBQ0F0cUMsU0FBQUEsSUFHREEsR0FBUzBHLFNBQVcsU0FBV3BsQyxHQUU5QixPQUFPLElBQUl5d0csR0FBYXp3RyxJQUl6QixNQUFNMHdHLEdBQWlCLENBR3RCQyxXQUFZLFNBQVc5a0csRUFBTzdiLEVBQU1RLEdBRW5DLE9BQUtrZ0gsR0FBZUUsYUFBYy9rRyxHQUkxQixJQUFJQSxFQUFNL1osWUFBYStaLEVBQU01WCxTQUFVakUsT0FBYTJZLElBQVBuWSxFQUFtQkEsRUFBS3FiLEVBQU01akIsU0FJNUU0akIsRUFBTTVXLE1BQU9qRixFQUFNUSxJQUszQnFnSCxhQUFjLFNBQVdobEcsRUFBTzdMLEVBQU04d0csR0FFckMsT0FBT2psRyxJQUNKaWxHLEdBQWNqbEcsRUFBTS9aLGNBQWdCa08sRUFBYzZMLEVBRWQsaUJBQTNCN0wsRUFBSzI0QyxrQkFFVCxJQUFJMzRDLEVBQU02TCxHQUlYcGpCLE1BQU1DLFVBQVV1TSxNQUFNbEwsS0FBTThoQixJQUlwQytrRyxhQUFjLFNBQVd6b0YsR0FFeEIsT0FBTzl5QixZQUFZMDdHLE9BQVE1b0YsTUFDdEJBLGFBQWtCNm9GLFdBS3hCQyxpQkFBa0IsU0FBV0MsR0FRNUIsTUFBTXBwSCxFQUFJb3BILEVBQU1qcEgsT0FDVnVwRixFQUFTLElBQUkvb0YsTUFBT1gsR0FDMUIsSUFBTSxJQUFJbUMsRUFBSSxFQUFHQSxJQUFNbkMsSUFBTW1DLEVBQUl1bkYsRUFBUXZuRixHQUFNQSxFQUkvQyxPQUZBdW5GLEVBQU9uWixNQVZQLFNBQXNCcHVFLEVBQUdFLEdBRXhCLE9BQU8rbUgsRUFBT2puSCxHQUFNaW5ILEVBQU8vbUgsTUFVckJxbkYsR0FLUjIvQixZQUFhLFNBQVd0MUUsRUFBUTJQLEVBQVFwcUIsR0FFdkMsTUFBTWd3RixFQUFVdjFFLEVBQU81ekMsT0FDakJ1cEYsRUFBUyxJQUFJMzFDLEVBQU8vcEMsWUFBYXMvRyxHQUV2QyxJQUFNLElBQUlubkgsRUFBSSxFQUFHMjFCLEVBQVksRUFBR0EsSUFBY3d4RixJQUFZbm5ILEVBQUksQ0FFN0QsTUFBTW9uSCxFQUFZandGLEVBQU9uM0IsR0FBTXVoRCxFQUUvQixJQUFNLElBQUlyaEQsRUFBSSxFQUFHQSxJQUFNcWhELElBQVdyaEQsRUFFakNxbkYsRUFBUTV4RCxLQUFpQmljLEVBQVF3MUUsRUFBWWxuSCxHQU0vQyxPQUFPcW5GLEdBS1I4L0IsWUFBYSxTQUFXQyxFQUFVTCxFQUFPcjFFLEVBQVEyMUUsR0FFaEQsSUFBSXZuSCxFQUFJLEVBQUc2eEMsRUFBTXkxRSxFQUFVLEdBRTNCLFVBQWdCNW9HLElBQVJtekIsUUFBa0RuekIsSUFBN0JtekIsRUFBSzAxRSxJQUVqQzExRSxFQUFNeTFFLEVBQVV0bkgsS0FJakIsUUFBYTBlLElBQVJtekIsRUFBb0IsT0FFekIsSUFBSTN6QyxFQUFRMnpDLEVBQUswMUUsR0FDakIsUUFBZTdvRyxJQUFWeGdCLEVBRUwsR0FBS00sTUFBTXVPLFFBQVM3TyxHQUVuQixHQUVDQSxFQUFRMnpDLEVBQUswMUUsUUFFRTdvRyxJQUFWeGdCLElBRUorb0gsRUFBTXZsSCxLQUFNbXdDLEVBQUk2YixNQUNoQjliLEVBQU9sd0MsS0FBSzJILE1BQU91b0MsRUFBUTF6QyxJQUk1QjJ6QyxFQUFNeTFFLEVBQVV0bkgsZ0JBRUMwZSxJQUFSbXpCLFFBRUosUUFBdUJuekIsSUFBbEJ4Z0IsRUFBTXluQixRQUlqQixHQUVDem5CLEVBQVEyekMsRUFBSzAxRSxRQUVFN29HLElBQVZ4Z0IsSUFFSitvSCxFQUFNdmxILEtBQU1td0MsRUFBSTZiLE1BQ2hCeHZELEVBQU15bkIsUUFBU2lzQixFQUFRQSxFQUFPNXpDLFNBSS9CNnpDLEVBQU15MUUsRUFBVXRuSCxnQkFFQzBlLElBQVJtekIsUUFNVixHQUVDM3pDLEVBQVEyekMsRUFBSzAxRSxRQUVFN29HLElBQVZ4Z0IsSUFFSitvSCxFQUFNdmxILEtBQU1td0MsRUFBSTZiLE1BQ2hCOWIsRUFBT2x3QyxLQUFNeEQsSUFJZDJ6QyxFQUFNeTFFLEVBQVV0bkgsZ0JBRUMwZSxJQUFSbXpCLElBTVoyMUUsUUFBUyxTQUFXQyxFQUFZbHlHLEVBQU1teUcsRUFBWUMsRUFBVUMsRUFBTSxJQUVqRSxNQUFNQyxFQUFPSixFQUFXeGtHLFFBRXhCNGtHLEVBQUt0eUcsS0FBT0EsRUFFWixNQUFNdXlHLEVBQVMsR0FFZixJQUFNLElBQUk5bkgsRUFBSSxFQUFHQSxFQUFJNm5ILEVBQUtDLE9BQU85cEgsU0FBV2dDLEVBQUksQ0FFL0MsTUFBTStuSCxFQUFRRixFQUFLQyxPQUFROW5ILEdBQ3JCZ29ILEVBQVlELEVBQU1FLGVBRWxCaEIsRUFBUSxHQUNScjFFLEVBQVMsR0FFZixJQUFNLElBQUkxeEMsRUFBSSxFQUFHQSxFQUFJNm5ILEVBQU1kLE1BQU1qcEgsU0FBV2tDLEVBQUksQ0FFL0MsTUFBTXl0RCxFQUFRbzZELEVBQU1kLE1BQU8vbUgsR0FBTTBuSCxFQUVqQyxLQUFLajZELEVBQVErNUQsR0FBYy81RCxHQUFTZzZELEdBQXBDLENBRUFWLEVBQU12bEgsS0FBTXFtSCxFQUFNZCxNQUFPL21ILElBRXpCLElBQU0sSUFBSTBCLEVBQUksRUFBR0EsRUFBSW9tSCxJQUFjcG1ILEVBRWxDZ3dDLEVBQU9sd0MsS0FBTXFtSCxFQUFNbjJFLE9BQVExeEMsRUFBSThuSCxFQUFZcG1ILEtBTXZCLElBQWpCcWxILEVBQU1qcEgsU0FFWCtwSCxFQUFNZCxNQUFRUixHQUFlRyxhQUFjSyxFQUFPYyxFQUFNZCxNQUFNcC9HLGFBQzlEa2dILEVBQU1uMkUsT0FBUzYwRSxHQUFlRyxhQUFjaDFFLEVBQVFtMkUsRUFBTW4yRSxPQUFPL3BDLGFBRWpFaWdILEVBQU9wbUgsS0FBTXFtSCxJQUlkRixFQUFLQyxPQUFTQSxFQUlkLElBQUlJLEVBQWVqNUcsRUFBQUEsRUFFbkIsSUFBTSxJQUFJalAsRUFBSSxFQUFHQSxFQUFJNm5ILEVBQUtDLE9BQU85cEgsU0FBV2dDLEVBRXRDa29ILEVBQWVMLEVBQUtDLE9BQVE5bkgsR0FBSWluSCxNQUFPLEtBRTNDaUIsRUFBZUwsRUFBS0MsT0FBUTluSCxHQUFJaW5ILE1BQU8sSUFRekMsSUFBTSxJQUFJam5ILEVBQUksRUFBR0EsRUFBSTZuSCxFQUFLQyxPQUFPOXBILFNBQVdnQyxFQUUzQzZuSCxFQUFLQyxPQUFROW5ILEdBQUkrRSxPQUFTLEVBQUltakgsR0FNL0IsT0FGQUwsRUFBS00sZ0JBRUVOLEdBSVJPLGlCQUFrQixTQUFXQyxFQUFZQyxFQUFpQixFQUFHQyxFQUFnQkYsRUFBWVQsRUFBTSxJQUV6RkEsR0FBTyxJQUFJQSxFQUFNLElBRXRCLE1BQU1ZLEVBQVlELEVBQWNULE9BQU85cEgsT0FDakN5cUgsRUFBZ0JILEVBQWlCVixFQUd2QyxJQUFNLElBQUk1bkgsRUFBSSxFQUFHQSxFQUFJd29ILElBQWN4b0gsRUFBSSxDQUV0QyxNQUFNMG9ILEVBQWlCSCxFQUFjVCxPQUFROW5ILEdBQ3ZDMm9ILEVBQXFCRCxFQUFlRSxjQUcxQyxHQUE0QixTQUF2QkQsR0FBd0QsV0FBdkJBLEVBQWtDLFNBR3hFLE1BQU1FLEVBQWNSLEVBQVdQLE9BQU9nQixNQUFNLFNBQVdmLEdBRXRELE9BQU9BLEVBQU14eUcsT0FBU216RyxFQUFlbnpHLE1BQ2pDd3lHLEVBQU1hLGdCQUFrQkQsS0FJN0IsUUFBcUJqcUcsSUFBaEJtcUcsRUFBNEIsU0FFakMsSUFBSUUsRUFBa0IsRUFDdEIsTUFBTUMsRUFBcUJOLEVBQWVULGVBRXJDUyxFQUFlTyxrQkFBa0JDLDRDQUVyQ0gsRUFBa0JDLEVBQXFCLEdBSXhDLElBQUlHLEVBQWUsRUFDbkIsTUFBTUMsRUFBa0JQLEVBQVlaLGVBRS9CWSxFQUFZSSxrQkFBa0JDLDRDQUVsQ0MsRUFBZUMsRUFBa0IsR0FJbEMsTUFBTTEwQyxFQUFZZzBDLEVBQWV6QixNQUFNanBILE9BQVMsRUFDaEQsSUFBSXFySCxFQUdKLEdBQUtaLEdBQWlCQyxFQUFlekIsTUFBTyxHQUFNLENBR2pELE1BQU1xQyxFQUFhUCxFQUNiUSxFQUFXUCxFQUFxQkQsRUFDdENNLEVBQWlCNUMsR0FBZUMsV0FBWWdDLEVBQWU5MkUsT0FBUTAzRSxFQUFZQyxRQUV6RSxHQUFLZCxHQUFpQkMsRUFBZXpCLE1BQU92eUMsR0FBYyxDQUdoRSxNQUFNNDBDLEVBQWE1MEMsRUFBWXMwQyxFQUFxQkQsRUFDOUNRLEVBQVdELEVBQWFOLEVBQXFCRCxFQUNuRE0sRUFBaUI1QyxHQUFlQyxXQUFZZ0MsRUFBZTkyRSxPQUFRMDNFLEVBQVlDLE9BRXpFLENBR04sTUFBTUMsRUFBY2QsRUFBZU8sb0JBQzdCSyxFQUFhUCxFQUNiUSxFQUFXUCxFQUFxQkQsRUFDdENTLEVBQVlDLFNBQVVoQixHQUN0QlksRUFBaUI1QyxHQUFlQyxXQUFZOEMsRUFBWUUsYUFBY0osRUFBWUMsR0FLdkQsZUFBdkJaLElBRWtCLElBQUl4ekYsSUFBYTFQLFVBQVc0akcsR0FBaUJ6a0csWUFBWTJULFlBQ2pFNVMsUUFBUzBqRyxHQU14QixNQUFNTSxFQUFXZCxFQUFZNUIsTUFBTWpwSCxPQUNuQyxJQUFNLElBQUlrQyxFQUFJLEVBQUdBLEVBQUl5cEgsSUFBYXpwSCxFQUFJLENBRXJDLE1BQU0wcEgsRUFBYTFwSCxFQUFJa3BILEVBQWtCRCxFQUV6QyxHQUE0QixlQUF2QlIsRUFHSnh6RixHQUFXMDBGLHdCQUNWaEIsRUFBWWozRSxPQUNaZzRFLEVBQ0FQLEVBQ0EsRUFDQVIsRUFBWWozRSxPQUNaZzRFLE9BR0ssQ0FFTixNQUFNRSxFQUFXVixFQUFpQyxFQUFmRCxFQUduQyxJQUFNLElBQUl2bkgsRUFBSSxFQUFHQSxFQUFJa29ILElBQWFsb0gsRUFFakNpbkgsRUFBWWozRSxPQUFRZzRFLEVBQWFob0gsSUFBT3luSCxFQUFnQnpuSCxLQVk1RCxPQUZBeW1ILEVBQVcwQixVQTM1b0NzQixLQTY1b0MxQjFCLElBMkJULE1BQU0yQixHQUVMbmlILFlBQWFvaUgsRUFBb0JDLEVBQWNDLEVBQVlULEdBRTFEeHFILEtBQUsrcUgsbUJBQXFCQSxFQUMxQi9xSCxLQUFLa3JILGFBQWUsRUFFcEJsckgsS0FBS3dxSCxrQkFBZ0NockcsSUFBakJnckcsRUFDbkJBLEVBQWUsSUFBSVEsRUFBYXJpSCxZQUFhc2lILEdBQzlDanJILEtBQUtnckgsYUFBZUEsRUFDcEJockgsS0FBSzhvSCxVQUFZbUMsRUFFakJqckgsS0FBS21ySCxTQUFXLEtBQ2hCbnJILEtBQUtvckgsaUJBQW1CLEdBSXpCYixTQUFVeHFILEdBRVQsTUFBTXNySCxFQUFLcnJILEtBQUsrcUgsbUJBQ2hCLElBQUl2MkUsRUFBS3gwQyxLQUFLa3JILGFBQ2IvbEYsRUFBS2ttRixFQUFJNzJFLEdBQ1R0UCxFQUFLbW1GLEVBQUk3MkUsRUFBSyxHQUVmODJFLEVBQW1CLENBRWxCQyxFQUFNLENBRUwsSUFBSXRnRixFQUVKdWdGLEVBQWEsQ0FNWkMsRUFBYyxLQUFTMXJILEVBQUlvbEMsR0FBTyxDQUVqQyxJQUFNLElBQUl1bUYsRUFBV2wzRSxFQUFLLElBQU8sQ0FFaEMsUUFBWWgxQixJQUFQMmxCLEVBQW1CLENBRXZCLEdBQUtwbEMsRUFBSW1sQyxFQUFLLE1BQU11bUYsRUFNcEIsT0FGQWozRSxFQUFLNjJFLEVBQUd2c0gsT0FDUmtCLEtBQUtrckgsYUFBZTEyRSxFQUNieDBDLEtBQUsyckgsVUFBV24zRSxFQUFLLEVBQUd6MEMsRUFBR21sQyxHQUluQyxHQUFLc1AsSUFBT2szRSxFQUFXLE1BS3ZCLEdBSEF4bUYsRUFBS0MsRUFDTEEsRUFBS2ttRixJQUFPNzJFLEdBRVB6MEMsRUFBSW9sQyxFQUdSLE1BQU1vbUYsRUFPUnRnRixFQUFRb2dGLEVBQUd2c0gsT0FDWCxNQUFNMHNILEVBTVAsR0FBU3pySCxHQUFLbWxDLEVBaURkLE1BQU1vbUYsRUFqRE4sQ0FJQyxNQUFNTSxFQUFXUCxFQUFJLEdBRWhCdHJILEVBQUk2ckgsSUFFUnAzRSxFQUFLLEVBQ0x0UCxFQUFLMG1GLEdBTU4sSUFBTSxJQUFJRixFQUFXbDNFLEVBQUssSUFBTyxDQUVoQyxRQUFZaDFCLElBQVAwbEIsRUFLSixPQURBbGxDLEtBQUtrckgsYUFBZSxFQUNibHJILEtBQUs2ckgsYUFBYyxFQUFHOXJILEVBQUdvbEMsR0FJakMsR0FBS3FQLElBQU9rM0UsRUFBVyxNQUt2QixHQUhBdm1GLEVBQUtELEVBQ0xBLEVBQUttbUYsSUFBTzcyRSxFQUFLLEdBRVp6MEMsR0FBS21sQyxFQUdULE1BQU1xbUYsRUFPUnRnRixFQUFRdUosRUFDUkEsRUFBSyxHQWFQLEtBQVFBLEVBQUt2SixHQUFRLENBRXBCLE1BQU02Z0YsRUFBUXQzRSxFQUFLdkosSUFBWSxFQUUxQmxyQyxFQUFJc3JILEVBQUlTLEdBRVo3Z0YsRUFBUTZnRixFQUlSdDNFLEVBQUtzM0UsRUFBTSxFQVdiLEdBTEEzbUYsRUFBS2ttRixFQUFJNzJFLEdBQ1R0UCxFQUFLbW1GLEVBQUk3MkUsRUFBSyxRQUlGaDFCLElBQVAwbEIsRUFHSixPQURBbGxDLEtBQUtrckgsYUFBZSxFQUNibHJILEtBQUs2ckgsYUFBYyxFQUFHOXJILEVBQUdvbEMsR0FJakMsUUFBWTNsQixJQUFQMmxCLEVBSUosT0FGQXFQLEVBQUs2MkUsRUFBR3ZzSCxPQUNSa0IsS0FBS2tySCxhQUFlMTJFLEVBQ2J4MEMsS0FBSzJySCxVQUFXbjNFLEVBQUssRUFBR3RQLEVBQUlubEMsR0FNckNDLEtBQUtrckgsYUFBZTEyRSxFQUVwQngwQyxLQUFLK3JILGlCQUFrQnYzRSxFQUFJdFAsRUFBSUMsR0FJaEMsT0FBT25sQyxLQUFLZ3NILGFBQWN4M0UsRUFBSXRQLEVBQUlubEMsRUFBR29sQyxHQUl0QzhtRixlQUVDLE9BQU9qc0gsS0FBS21ySCxVQUFZbnJILEtBQUtvckgsaUJBSTlCYyxpQkFBa0J0bEgsR0FJakIsTUFBTXloRixFQUFTcm9GLEtBQUt3cUgsYUFDbkI5M0UsRUFBUzF5QyxLQUFLZ3JILGFBQ2Qzb0UsRUFBU3JpRCxLQUFLOG9ILFVBQ2R0aUcsRUFBUzVmLEVBQVF5N0MsRUFFbEIsSUFBTSxJQUFJdmhELEVBQUksRUFBR0EsSUFBTXVoRCxJQUFXdmhELEVBRWpDdW5GLEVBQVF2bkYsR0FBTTR4QyxFQUFRbHNCLEVBQVMxbEIsR0FJaEMsT0FBT3VuRixFQU1SMmpDLGVBRUMsTUFBTSxJQUFJbHNILE1BQU8sMkJBS2xCaXNILHFCQVVEakIsR0FBWXZySCxVQUFVc3NILGFBQWVmLEdBQVl2ckgsVUFBVTJzSCxpQkFDM0RwQixHQUFZdnJILFVBQVVvc0gsVUFBWWIsR0FBWXZySCxVQUFVMnNILGlCQVV4RCxNQUFNQyxXQUF5QnJCLEdBRTlCbmlILFlBQWFvaUgsRUFBb0JDLEVBQWNDLEVBQVlULEdBRTFELzRGLE1BQU9zNUYsRUFBb0JDLEVBQWNDLEVBQVlULEdBRXJEeHFILEtBQUtvc0gsYUFBZ0IsRUFDckJwc0gsS0FBS3FzSCxhQUFnQixFQUNyQnJzSCxLQUFLc3NILGFBQWdCLEVBQ3JCdHNILEtBQUt1c0gsYUFBZ0IsRUFFckJ2c0gsS0FBS29ySCxpQkFBbUIsQ0FFdkJvQixZQUFhbHJHLEVBQ2JtckcsVUFBV25yRyxHQU1ieXFHLGlCQUFrQnYzRSxFQUFJdFAsRUFBSUMsR0FFekIsTUFBTWttRixFQUFLcnJILEtBQUsrcUgsbUJBQ2hCLElBQUkyQixFQUFRbDRFLEVBQUssRUFDaEJtNEUsRUFBUW40RSxFQUFLLEVBRWJvNEUsRUFBUXZCLEVBQUlxQixHQUNaRyxFQUFReEIsRUFBSXNCLEdBRWIsUUFBZW50RyxJQUFWb3RHLEVBRUosT0FBUzVzSCxLQUFLaXNILGVBQWVPLGFBRTVCLEtBQUtqckcsRUFHSm1yRyxFQUFRbDRFLEVBQ1JvNEUsRUFBUSxFQUFJMW5GLEVBQUtDLEVBRWpCLE1BRUQsS0FBSzNqQixFQUdKa3JHLEVBQVFyQixFQUFHdnNILE9BQVMsRUFDcEI4dEgsRUFBUTFuRixFQUFLbW1GLEVBQUlxQixHQUFVckIsRUFBSXFCLEVBQVEsR0FFdkMsTUFFRCxRQUdDQSxFQUFRbDRFLEVBQ1JvNEUsRUFBUXpuRixFQU1YLFFBQWUzbEIsSUFBVnF0RyxFQUVKLE9BQVM3c0gsS0FBS2lzSCxlQUFlUSxXQUU1QixLQUFLbHJHLEVBR0pvckcsRUFBUW40RSxFQUNScTRFLEVBQVEsRUFBSTFuRixFQUFLRCxFQUVqQixNQUVELEtBQUsxakIsRUFHSm1yRyxFQUFRLEVBQ1JFLEVBQVExbkYsRUFBS2ttRixFQUFJLEdBQU1BLEVBQUksR0FFM0IsTUFFRCxRQUdDc0IsRUFBUW40RSxFQUFLLEVBQ2JxNEUsRUFBUTNuRixFQU1YLE1BQU00bkYsRUFBdUIsSUFBWjNuRixFQUFLRCxHQUNyQm1kLEVBQVNyaUQsS0FBSzhvSCxVQUVmOW9ILEtBQUtvc0gsWUFBY1UsR0FBVzVuRixFQUFLMG5GLEdBQ25DNXNILEtBQUtzc0gsWUFBY1EsR0FBV0QsRUFBUTFuRixHQUN0Q25sQyxLQUFLcXNILFlBQWNLLEVBQVFycUUsRUFDM0JyaUQsS0FBS3VzSCxZQUFjSSxFQUFRdHFFLEVBSTVCMnBFLGFBQWN4M0UsRUFBSXRQLEVBQUlubEMsRUFBR29sQyxHQUV4QixNQUFNa2pELEVBQVNyb0YsS0FBS3dxSCxhQUNuQjkzRSxFQUFTMXlDLEtBQUtnckgsYUFDZDNvRSxFQUFTcmlELEtBQUs4b0gsVUFFZHJKLEVBQUtqckUsRUFBSzZOLEVBQVMwcUUsRUFBS3ROLEVBQUtwOUQsRUFDN0IycUUsRUFBS2h0SCxLQUFLcXNILFlBQWNZLEVBQUtqdEgsS0FBS3VzSCxZQUNsQ1csRUFBS2x0SCxLQUFLb3NILFlBQWFlLEVBQUtudEgsS0FBS3NzSCxZQUVqQy9vSCxHQUFNeEQsRUFBSW1sQyxJQUFTQyxFQUFLRCxHQUN4Qm1tRixFQUFLOW5ILEVBQUlBLEVBQ1Q2cEgsRUFBTS9CLEVBQUs5bkgsRUFJTjhwSCxHQUFPSCxFQUFLRSxFQUFNLEVBQUlGLEVBQUs3QixFQUFLNkIsRUFBSzNwSCxFQUNyQ21oQyxHQUFPLEVBQUl3b0YsR0FBT0UsSUFBVSxJQUFNLEVBQUlGLEdBQU83QixJQUFTLEdBQU02QixHQUFPM3BILEVBQUksRUFDdkUrMEIsSUFBUyxFQUFJNjBGLEdBQU9DLEdBQVEsSUFBTUQsR0FBTzlCLEVBQUssR0FBTTluSCxFQUNwRCtwSCxFQUFLSCxFQUFLQyxFQUFNRCxFQUFLOUIsRUFJM0IsSUFBTSxJQUFJdnFILEVBQUksRUFBR0EsSUFBTXVoRCxJQUFXdmhELEVBRWpDdW5GLEVBQVF2bkYsR0FDTnVzSCxFQUFLMzZFLEVBQVFzNkUsRUFBS2xzSCxHQUNsQjRqQyxFQUFLZ08sRUFBUXE2RSxFQUFLanNILEdBQ2xCdzNCLEVBQUtvYSxFQUFRK3NFLEVBQUszK0csR0FDbEJ3c0gsRUFBSzU2RSxFQUFRdTZFLEVBQUtuc0gsR0FJckIsT0FBT3VuRixHQU1ULE1BQU1rbEMsV0FBMEJ6QyxHQUUvQm5pSCxZQUFhb2lILEVBQW9CQyxFQUFjQyxFQUFZVCxHQUUxRC80RixNQUFPczVGLEVBQW9CQyxFQUFjQyxFQUFZVCxHQUl0RHdCLGFBQWN4M0UsRUFBSXRQLEVBQUlubEMsRUFBR29sQyxHQUV4QixNQUFNa2pELEVBQVNyb0YsS0FBS3dxSCxhQUNuQjkzRSxFQUFTMXlDLEtBQUtnckgsYUFDZDNvRSxFQUFTcmlELEtBQUs4b0gsVUFFZDBFLEVBQVVoNUUsRUFBSzZOLEVBQ2ZvckUsRUFBVUQsRUFBVW5yRSxFQUVwQnFyRSxHQUFZM3RILEVBQUltbEMsSUFBU0MsRUFBS0QsR0FDOUJ5b0YsRUFBVSxFQUFJRCxFQUVmLElBQU0sSUFBSTVzSCxFQUFJLEVBQUdBLElBQU11aEQsSUFBV3ZoRCxFQUVqQ3VuRixFQUFRdm5GLEdBQ040eEMsRUFBUSs2RSxFQUFVM3NILEdBQU02c0gsRUFDeEJqN0UsRUFBUTg2RSxFQUFVMXNILEdBQU00c0gsRUFJM0IsT0FBT3JsQyxHQVlULE1BQU11bEMsV0FBNEI5QyxHQUVqQ25pSCxZQUFhb2lILEVBQW9CQyxFQUFjQyxFQUFZVCxHQUUxRC80RixNQUFPczVGLEVBQW9CQyxFQUFjQyxFQUFZVCxHQUl0RHdCLGFBQWN4M0UsR0FFYixPQUFPeDBDLEtBQUtrc0gsaUJBQWtCMTNFLEVBQUssSUFNckMsTUFBTXE1RSxHQUVMbGxILFlBQWEwTixFQUFNMHhHLEVBQU9yMUUsRUFBUW83RSxHQUVqQyxRQUFjdHVHLElBQVRuSixFQUFxQixNQUFNLElBQUl2VyxNQUFPLGdEQUMzQyxRQUFlMGYsSUFBVnVvRyxHQUF3QyxJQUFqQkEsRUFBTWpwSCxPQUFlLE1BQU0sSUFBSWdCLE1BQU8sb0RBQXNEdVcsR0FFeEhyVyxLQUFLcVcsS0FBT0EsRUFFWnJXLEtBQUsrbkgsTUFBUVIsR0FBZUcsYUFBY0ssRUFBTy9uSCxLQUFLK3RILGdCQUN0RC90SCxLQUFLMHlDLE9BQVM2MEUsR0FBZUcsYUFBY2gxRSxFQUFRMXlDLEtBQUtndUgsaUJBRXhEaHVILEtBQUtpdUgsaUJBQWtCSCxHQUFpQjl0SCxLQUFLa3VILHNCQU85QzMrRixjQUFlczVGLEdBRWQsTUFBTXNGLEVBQVl0RixFQUFNbGdILFlBRXhCLElBQUl1dEcsRUFHSixHQUFLaVksRUFBVXZpSCxTQUFXNUwsS0FBSzRMLE9BRTlCc3FHLEVBQU9pWSxFQUFVdmlILE9BQVFpOUcsT0FFbkIsQ0FHTjNTLEVBQU8sQ0FFTixLQUFRMlMsRUFBTXh5RyxLQUNkLE1BQVNreEcsR0FBZUcsYUFBY21CLEVBQU1kLE1BQU96b0gsT0FDbkQsT0FBVWlvSCxHQUFlRyxhQUFjbUIsRUFBTW4yRSxPQUFRcHpDLFFBSXRELE1BQU13dUgsRUFBZ0JqRixFQUFNdUYsbUJBRXZCTixJQUFrQmpGLEVBQU1xRix1QkFFNUJoWSxFQUFLNFgsY0FBZ0JBLEdBUXZCLE9BRkE1WCxFQUFLci9GLEtBQU9neUcsRUFBTWEsY0FFWHhULEVBSVJtWSxpQ0FBa0NobUMsR0FFakMsT0FBTyxJQUFJdWxDLEdBQXFCNXRILEtBQUsrbkgsTUFBTy9uSCxLQUFLMHlDLE9BQVExeUMsS0FBSytvSCxlQUFnQjFnQyxHQUkvRWltQywrQkFBZ0NqbUMsR0FFL0IsT0FBTyxJQUFJa2xDLEdBQW1CdnRILEtBQUsrbkgsTUFBTy9uSCxLQUFLMHlDLE9BQVExeUMsS0FBSytvSCxlQUFnQjFnQyxHQUk3RWttQywrQkFBZ0NsbUMsR0FFL0IsT0FBTyxJQUFJOGpDLEdBQWtCbnNILEtBQUsrbkgsTUFBTy9uSCxLQUFLMHlDLE9BQVExeUMsS0FBSytvSCxlQUFnQjFnQyxHQUk1RTRsQyxpQkFBa0JILEdBRWpCLElBQUlVLEVBRUosT0FBU1YsR0FFUixLQUFLM3NHLEVBRUpxdEcsRUFBZ0J4dUgsS0FBS3F1SCxpQ0FFckIsTUFFRCxLQUFLanRHLEVBRUpvdEcsRUFBZ0J4dUgsS0FBS3N1SCwrQkFFckIsTUFFRCxLQUFLanRHLEVBRUptdEcsRUFBZ0J4dUgsS0FBS3V1SCwrQkFNdkIsUUFBdUIvdUcsSUFBbEJndkcsRUFBOEIsQ0FFbEMsTUFBTXBtQixFQUFVLGlDQUNmcG9HLEtBQUswcEgsY0FBZ0IseUJBQTJCMXBILEtBQUtxVyxLQUV0RCxRQUFnQ21KLElBQTNCeGYsS0FBSytwSCxrQkFBa0MsQ0FHM0MsR0FBSytELElBQWtCOXRILEtBQUtrdUgscUJBTTNCLE1BQU0sSUFBSXB1SCxNQUFPc29HLEdBSmpCcG9HLEtBQUtpdUgsaUJBQWtCanVILEtBQUtrdUgsc0JBVzlCLE9BREF2ckgsUUFBUXVoQixLQUFNLHVCQUF3QmtrRixHQUMvQnBvRyxLQU1SLE9BRkFBLEtBQUsrcEgsa0JBQW9CeUUsRUFFbEJ4dUgsS0FJUm91SCxtQkFFQyxPQUFTcHVILEtBQUsrcEgsbUJBRWIsS0FBSy9wSCxLQUFLcXVILGlDQUVULE9BQU9sdEcsRUFFUixLQUFLbmhCLEtBQUtzdUgsK0JBRVQsT0FBT2x0RyxFQUVSLEtBQUtwaEIsS0FBS3V1SCwrQkFFVCxPQUFPbHRHLEdBTVYwbkcsZUFFQyxPQUFPL29ILEtBQUsweUMsT0FBTzV6QyxPQUFTa0IsS0FBSytuSCxNQUFNanBILE9BS3hDK0csTUFBTzRvSCxHQUVOLEdBQW9CLElBQWZBLEVBQXFCLENBRXpCLE1BQU0xRyxFQUFRL25ILEtBQUsrbkgsTUFFbkIsSUFBTSxJQUFJam5ILEVBQUksRUFBR25DLEVBQUlvcEgsRUFBTWpwSCxPQUFRZ0MsSUFBTW5DLElBQU1tQyxFQUU5Q2luSCxFQUFPam5ILElBQU8ydEgsRUFNaEIsT0FBT3p1SCxLQUtSK3FCLE1BQU8yakcsR0FFTixHQUFtQixJQUFkQSxFQUFvQixDQUV4QixNQUFNM0csRUFBUS9uSCxLQUFLK25ILE1BRW5CLElBQU0sSUFBSWpuSCxFQUFJLEVBQUduQyxFQUFJb3BILEVBQU1qcEgsT0FBUWdDLElBQU1uQyxJQUFNbUMsRUFFOUNpbkgsRUFBT2puSCxJQUFPNHRILEVBTWhCLE9BQU8xdUgsS0FNUnUyRSxLQUFNbzRDLEVBQVdDLEdBRWhCLE1BQU03RyxFQUFRL25ILEtBQUsrbkgsTUFDbEI4RyxFQUFROUcsRUFBTWpwSCxPQUVmLElBQUkrSCxFQUFPLEVBQ1ZRLEVBQUt3bkgsRUFBUSxFQUVkLEtBQVFob0gsSUFBU2dvSCxHQUFTOUcsRUFBT2xoSCxHQUFTOG5ILEtBRXRDOW5ILEVBSUosTUFBaUIsSUFBVFEsR0FBYzBnSCxFQUFPMWdILEdBQU91bkgsS0FFaEN2bkgsRUFNSixLQUZHQSxFQUVXLElBQVRSLEdBQWNRLElBQU93bkgsRUFBUSxDQUc1QmhvSCxHQUFRUSxJQUVaQSxFQUFLeEgsS0FBS2tHLElBQUtzQixFQUFJLEdBQ25CUixFQUFPUSxFQUFLLEdBSWIsTUFBTWc3QyxFQUFTcmlELEtBQUsrb0gsZUFDcEIvb0gsS0FBSytuSCxNQUFRUixHQUFlQyxXQUFZTyxFQUFPbGhILEVBQU1RLEdBQ3JEckgsS0FBSzB5QyxPQUFTNjBFLEdBQWVDLFdBQVl4bkgsS0FBSzB5QyxPQUFRN3JDLEVBQU93N0MsRUFBUWg3QyxFQUFLZzdDLEdBSTNFLE9BQU9yaUQsS0FLUjh1SCxXQUVDLElBQUlDLEdBQVEsRUFFWixNQUFNakcsRUFBWTlvSCxLQUFLK29ILGVBQ2xCRCxFQUFZanBILEtBQUtxTCxNQUFPNDlHLElBQWdCLElBRTVDbm1ILFFBQVFDLE1BQU8sb0RBQXFENUMsTUFDcEUrdUgsR0FBUSxHQUlULE1BQU1oSCxFQUFRL25ILEtBQUsrbkgsTUFDbEJyMUUsRUFBUzF5QyxLQUFLMHlDLE9BRWRtOEUsRUFBUTlHLEVBQU1qcEgsT0FFQSxJQUFWK3ZILElBRUpsc0gsUUFBUUMsTUFBTyx1Q0FBd0M1QyxNQUN2RCt1SCxHQUFRLEdBSVQsSUFBSUMsRUFBVyxLQUVmLElBQU0sSUFBSWx1SCxFQUFJLEVBQUdBLElBQU0rdEgsRUFBTy90SCxJQUFPLENBRXBDLE1BQU1tdUgsRUFBV2xILEVBQU9qbkgsR0FFeEIsR0FBeUIsaUJBQWJtdUgsR0FBeUJ6L0csTUFBT3kvRyxHQUFhLENBRXhEdHNILFFBQVFDLE1BQU8sbURBQW9ENUMsS0FBTWMsRUFBR211SCxHQUM1RUYsR0FBUSxFQUNSLE1BSUQsR0FBa0IsT0FBYkMsR0FBcUJBLEVBQVdDLEVBQVcsQ0FFL0N0c0gsUUFBUUMsTUFBTywwQ0FBMkM1QyxLQUFNYyxFQUFHbXVILEVBQVVELEdBQzdFRCxHQUFRLEVBQ1IsTUFJREMsRUFBV0MsRUFJWixRQUFnQnp2RyxJQUFYa3pCLEdBRUM2MEUsR0FBZUUsYUFBYy8wRSxHQUVqQyxJQUFNLElBQUk1eEMsRUFBSSxFQUFHbkMsRUFBSSt6QyxFQUFPNXpDLE9BQVFnQyxJQUFNbkMsSUFBTW1DLEVBQUksQ0FFbkQsTUFBTTlCLEVBQVEwekMsRUFBUTV4QyxHQUV0QixHQUFLME8sTUFBT3hRLEdBQVUsQ0FFckIyRCxRQUFRQyxNQUFPLG9EQUFxRDVDLEtBQU1jLEVBQUc5QixHQUM3RSt2SCxHQUFRLEVBQ1IsT0FVSixPQUFPQSxFQU1SRyxXQUdDLE1BQU1uSCxFQUFRUixHQUFlQyxXQUFZeG5ILEtBQUsrbkgsT0FDN0NyMUUsRUFBUzYwRSxHQUFlQyxXQUFZeG5ILEtBQUsweUMsUUFDekMyUCxFQUFTcmlELEtBQUsrb0gsZUFFZG9HLEVBQXNCbnZILEtBQUtvdUgscUJBQXVCL3NHLEVBRWxEbTBELEVBQVl1eUMsRUFBTWpwSCxPQUFTLEVBRTVCLElBQUlzd0gsRUFBYSxFQUVqQixJQUFNLElBQUl0dUgsRUFBSSxFQUFHQSxFQUFJMDBFLElBQWMxMEUsRUFBSSxDQUV0QyxJQUFJdXVILEdBQU8sRUFFWCxNQUFNN2dFLEVBQU91NUQsRUFBT2puSCxHQUtwQixHQUFLMHRELElBSll1NUQsRUFBT2puSCxFQUFJLEtBSU0sSUFBTkEsR0FBVzB0RCxJQUFTdTVELEVBQU8sSUFFdEQsR0FBT29ILEVBd0JORSxHQUFPLE1BeEJxQixDQUk1QixNQUFNN29HLEVBQVMxbEIsRUFBSXVoRCxFQUNsQml0RSxFQUFVOW9HLEVBQVM2N0IsRUFDbkJrdEUsRUFBVS9vRyxFQUFTNjdCLEVBRXBCLElBQU0sSUFBSXJoRCxFQUFJLEVBQUdBLElBQU1xaEQsSUFBV3JoRCxFQUFJLENBRXJDLE1BQU1oQyxFQUFRMHpDLEVBQVFsc0IsRUFBU3hsQixHQUUvQixHQUFLaEMsSUFBVTB6QyxFQUFRNDhFLEVBQVV0dUgsSUFDaENoQyxJQUFVMHpDLEVBQVE2OEUsRUFBVXZ1SCxHQUFNLENBRWxDcXVILEdBQU8sRUFDUCxRQWdCSixHQUFLQSxFQUFPLENBRVgsR0FBS3Z1SCxJQUFNc3VILEVBQWEsQ0FFdkJySCxFQUFPcUgsR0FBZXJILEVBQU9qbkgsR0FFN0IsTUFBTTB1SCxFQUFhMXVILEVBQUl1aEQsRUFDdEJvdEUsRUFBY0wsRUFBYS9zRSxFQUU1QixJQUFNLElBQUlyaEQsRUFBSSxFQUFHQSxJQUFNcWhELElBQVdyaEQsRUFFakMweEMsRUFBUSs4RSxFQUFjenVILEdBQU0weEMsRUFBUTg4RSxFQUFheHVILEtBTWhEb3VILEdBUUwsR0FBSzU1QyxFQUFZLEVBQUksQ0FFcEJ1eUMsRUFBT3FILEdBQWVySCxFQUFPdnlDLEdBRTdCLElBQU0sSUFBSWc2QyxFQUFhaDZDLEVBQVluekIsRUFBUW90RSxFQUFjTCxFQUFhL3NFLEVBQVFyaEQsRUFBSSxFQUFHQSxJQUFNcWhELElBQVdyaEQsRUFFckcweEMsRUFBUSs4RSxFQUFjenVILEdBQU0weEMsRUFBUTg4RSxFQUFheHVILEtBSS9Db3VILEVBZ0JKLE9BWktBLElBQWVySCxFQUFNanBILFFBRXpCa0IsS0FBSytuSCxNQUFRUixHQUFlQyxXQUFZTyxFQUFPLEVBQUdxSCxHQUNsRHB2SCxLQUFLMHlDLE9BQVM2MEUsR0FBZUMsV0FBWTkwRSxFQUFRLEVBQUcwOEUsRUFBYS9zRSxLQUlqRXJpRCxLQUFLK25ILE1BQVFBLEVBQ2IvbkgsS0FBSzB5QyxPQUFTQSxHQUlSMXlDLEtBSVIrakIsUUFFQyxNQUFNZ2tHLEVBQVFSLEdBQWVDLFdBQVl4bkgsS0FBSytuSCxNQUFPLEdBQy9DcjFFLEVBQVM2MEUsR0FBZUMsV0FBWXhuSCxLQUFLMHlDLE9BQVEsR0FHakRtMkUsRUFBUSxJQUFJNkcsRUFEUzF2SCxLQUFLMkksYUFDTTNJLEtBQUtxVyxLQUFNMHhHLEVBQU9yMUUsR0FLeEQsT0FGQW0yRSxFQUFNa0Isa0JBQW9CL3BILEtBQUsrcEgsa0JBRXhCbEIsR0FNVGdGLEdBQWN0dUgsVUFBVXd1SCxlQUFpQnA2RyxhQUN6Q2s2RyxHQUFjdHVILFVBQVV5dUgsZ0JBQWtCcjZHLGFBQzFDazZHLEdBQWN0dUgsVUFBVTJ1SCxxQkFBdUI5c0csRUFLL0MsTUFBTXV1RyxXQUE2QjlCLElBRW5DOEIsR0FBcUJwd0gsVUFBVW1xSCxjQUFnQixPQUMvQ2lHLEdBQXFCcHdILFVBQVV5dUgsZ0JBQWtCMXVILE1BQ2pEcXdILEdBQXFCcHdILFVBQVUydUgscUJBQXVCL3NHLEVBQ3REd3VHLEdBQXFCcHdILFVBQVUrdUgsb0NBQWlDOXVHLEVBQ2hFbXdHLEdBQXFCcHdILFVBQVVndkgsb0NBQWlDL3VHLEVBS2hFLE1BQU1vd0csV0FBMkIvQixJQUVqQytCLEdBQW1CcndILFVBQVVtcUgsY0FBZ0IsUUFLN0MsTUFBTW1HLFdBQTRCaEMsSUFFbENnQyxHQUFvQnR3SCxVQUFVbXFILGNBQWdCLFNBTTlDLE1BQU1vRyxXQUFvQ2hGLEdBRXpDbmlILFlBQWFvaUgsRUFBb0JDLEVBQWNDLEVBQVlULEdBRTFELzRGLE1BQU9zNUYsRUFBb0JDLEVBQWNDLEVBQVlULEdBSXREd0IsYUFBY3gzRSxFQUFJdFAsRUFBSW5sQyxFQUFHb2xDLEdBRXhCLE1BQU1rakQsRUFBU3JvRixLQUFLd3FILGFBQ25COTNFLEVBQVMxeUMsS0FBS2dySCxhQUNkM29FLEVBQVNyaUQsS0FBSzhvSCxVQUVkOXRHLEdBQVVqYixFQUFJbWxDLElBQVNDLEVBQUtELEdBRTdCLElBQUkxZSxFQUFTZ3VCLEVBQUs2TixFQUVsQixJQUFNLElBQUlwMUMsRUFBTXVaLEVBQVM2N0IsRUFBUTc3QixJQUFXdlosRUFBS3VaLEdBQVUsRUFFMUR5UCxHQUFXODVGLFVBQVcxbkMsRUFBUSxFQUFHMzFDLEVBQVFsc0IsRUFBUzY3QixFQUFRM1AsRUFBUWxzQixFQUFReEwsR0FJM0UsT0FBT3F0RSxHQVNULE1BQU0ybkMsV0FBZ0NuQyxHQUVyQ1MsK0JBQWdDam1DLEdBRS9CLE9BQU8sSUFBSXluQyxHQUE2Qjl2SCxLQUFLK25ILE1BQU8vbkgsS0FBSzB5QyxPQUFRMXlDLEtBQUsrb0gsZUFBZ0IxZ0MsSUFNeEYybkMsR0FBd0J6d0gsVUFBVW1xSCxjQUFnQixhQUVsRHNHLEdBQXdCendILFVBQVUydUgscUJBQXVCOXNHLEVBQ3pENHVHLEdBQXdCendILFVBQVVndkgsb0NBQWlDL3VHLEVBS25FLE1BQU15d0csV0FBNEJwQyxJQUVsQ29DLEdBQW9CMXdILFVBQVVtcUgsY0FBZ0IsU0FDOUN1RyxHQUFvQjF3SCxVQUFVeXVILGdCQUFrQjF1SCxNQUNoRDJ3SCxHQUFvQjF3SCxVQUFVMnVILHFCQUF1Qi9zRyxFQUNyRDh1RyxHQUFvQjF3SCxVQUFVK3VILG9DQUFpQzl1RyxFQUMvRHl3RyxHQUFvQjF3SCxVQUFVZ3ZILG9DQUFpQy91RyxFQUsvRCxNQUFNMHdHLFdBQTRCckMsSUFFbENxQyxHQUFvQjN3SCxVQUFVbXFILGNBQWdCLFNBRTlDLE1BQU15RyxHQUVMeG5ILFlBQWEwTixFQUFNKzVHLEdBQVcsRUFBS3hILEVBQVFpQyxFQUFZd0YsTUFFdERyd0gsS0FBS3FXLEtBQU9BLEVBQ1pyVyxLQUFLNG9ILE9BQVNBLEVBQ2Q1b0gsS0FBS293SCxTQUFXQSxFQUNoQnB3SCxLQUFLNnFILFVBQVlBLEVBRWpCN3FILEtBQUtrd0IsS0FBT3BOLElBR1A5aUIsS0FBS293SCxTQUFXLEdBRXBCcHdILEtBQUtpcEgsZ0JBT1AxNUYsYUFBYzJtRixHQUViLE1BQU0wUyxFQUFTLEdBQ2QwSCxFQUFhcGEsRUFBSzBTLE9BQ2xCMkgsRUFBWSxHQUFRcmEsRUFBS3dTLEtBQU8sR0FFakMsSUFBTSxJQUFJNW5ILEVBQUksRUFBR25DLEVBQUkyeEgsRUFBV3h4SCxPQUFRZ0MsSUFBTW5DLElBQU1tQyxFQUVuRDhuSCxFQUFPcG1ILEtBQU1ndUgsR0FBb0JGLEVBQVl4dkgsSUFBTWlxQixNQUFPd2xHLElBSTNELE1BQU01SCxFQUFPLElBQUkzb0gsS0FBTWsyRyxFQUFLNy9GLEtBQU02L0YsRUFBS2thLFNBQVV4SCxFQUFRMVMsRUFBSzJVLFdBRzlELE9BRkFsQyxFQUFLejRGLEtBQU9nbUYsRUFBS2htRixLQUVWeTRGLEVBSVJwNUYsY0FBZW81RixHQUVkLE1BQU1DLEVBQVMsR0FDZDZILEVBQWE5SCxFQUFLQyxPQUViMVMsRUFBTyxDQUVaLEtBQVF5UyxFQUFLdHlHLEtBQ2IsU0FBWXN5RyxFQUFLeUgsU0FDakIsT0FBVXhILEVBQ1YsS0FBUUQsRUFBS3o0RixLQUNiLFVBQWF5NEYsRUFBS2tDLFdBSW5CLElBQU0sSUFBSS9wSCxFQUFJLEVBQUduQyxFQUFJOHhILEVBQVczeEgsT0FBUWdDLElBQU1uQyxJQUFNbUMsRUFFbkQ4bkgsRUFBT3BtSCxLQUFNcXJILEdBQWNqaUgsT0FBUTZrSCxFQUFZM3ZILEtBSWhELE9BQU9vMUcsRUFJUjNtRixxQ0FBc0NsWixFQUFNcTZHLEVBQXFCaEksRUFBS2lJLEdBRXJFLE1BQU1DLEVBQWtCRixFQUFvQjV4SCxPQUN0QzhwSCxFQUFTLEdBRWYsSUFBTSxJQUFJOW5ILEVBQUksRUFBR0EsRUFBSTh2SCxFQUFpQjl2SCxJQUFPLENBRTVDLElBQUlpbkgsRUFBUSxHQUNScjFFLEVBQVMsR0FFYnExRSxFQUFNdmxILE1BQ0gxQixFQUFJOHZILEVBQWtCLEdBQU1BLEVBQzlCOXZILEdBQ0VBLEVBQUksR0FBTTh2SCxHQUVibCtFLEVBQU9sd0MsS0FBTSxFQUFHLEVBQUcsR0FFbkIsTUFBTXkxQixFQUFRc3ZGLEdBQWVPLGlCQUFrQkMsR0FDL0NBLEVBQVFSLEdBQWVTLFlBQWFELEVBQU8sRUFBRzl2RixHQUM5Q3lhLEVBQVM2MEUsR0FBZVMsWUFBYXQxRSxFQUFRLEVBQUd6YSxHQUl6QzA0RixHQUF5QixJQUFmNUksRUFBTyxLQUV2QkEsRUFBTXZsSCxLQUFNb3VILEdBQ1psK0UsRUFBT2x3QyxLQUFNa3dDLEVBQVEsS0FJdEJrMkUsRUFBT3BtSCxLQUNOLElBQUlxdEgsR0FDSCwwQkFBNEJhLEVBQXFCNXZILEdBQUl1VixLQUFPLElBQzVEMHhHLEVBQU9yMUUsR0FDTjNuQixNQUFPLEVBQU0yOUYsSUFJakIsT0FBTyxJQUFJMW9ILEtBQU1xVyxHQUFRLEVBQUd1eUcsR0FJN0JyNUYsa0JBQW1Cc2hHLEVBQW1CeDZHLEdBRXJDLElBQUl5NkcsRUFBWUQsRUFFaEIsSUFBT3Z4SCxNQUFNdU8sUUFBU2dqSCxHQUFzQixDQUUzQyxNQUFNOXZILEVBQUk4dkgsRUFDVkMsRUFBWS92SCxFQUFFNitCLFVBQVk3K0IsRUFBRTYrQixTQUFTeU8sWUFBY3R0QyxFQUFFc3RDLFdBSXRELElBQU0sSUFBSXZ0QyxFQUFJLEVBQUdBLEVBQUlnd0gsRUFBVWh5SCxPQUFRZ0MsSUFFdEMsR0FBS2d3SCxFQUFXaHdILEdBQUl1VixPQUFTQSxFQUU1QixPQUFPeTZHLEVBQVdod0gsR0FNcEIsT0FBTyxLQUlSeXVCLDJDQUE0QzAwQixFQUFjeWtFLEVBQUtpSSxHQUU5RCxNQUFNSSxFQUEwQixHQUkxQkMsRUFBVSxxQkFJaEIsSUFBTSxJQUFJbHdILEVBQUksRUFBR2kxQixFQUFLa3VCLEVBQWFubEQsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRXpELE1BQU0ydEUsRUFBY3hxQixFQUFjbmpELEdBQzVCbXdILEVBQVF4aUQsRUFBWXA0RCxLQUFLby9ELE1BQU91N0MsR0FFdEMsR0FBS0MsR0FBU0EsRUFBTW55SCxPQUFTLEVBQUksQ0FFaEMsTUFBTXVYLEVBQU80NkcsRUFBTyxHQUVwQixJQUFJQyxFQUF3QkgsRUFBeUIxNkcsR0FFOUM2NkcsSUFFTkgsRUFBeUIxNkcsR0FBUzY2RyxFQUF3QixJQUkzREEsRUFBc0IxdUgsS0FBTWlzRSxJQU05QixNQUFNMGlELEVBQVEsR0FFZCxJQUFNLE1BQU05NkcsS0FBUTA2RyxFQUVuQkksRUFBTTN1SCxLQUFNeEMsS0FBS294SCw4QkFBK0IvNkcsRUFBTTA2RyxFQUF5QjE2RyxHQUFRcXlHLEVBQUtpSSxJQUk3RixPQUFPUSxFQUtSNWhHLHNCQUF1QmdqQixFQUFXOHRDLEdBRWpDLElBQU85dEMsRUFHTixPQURBNXZDLFFBQVFDLE1BQU8seURBQ1IsS0FJUixNQUFNeXVILEVBQW1CLFNBQVdsRCxFQUFXbUQsRUFBV0MsRUFBZUMsRUFBY0MsR0FHdEYsR0FBOEIsSUFBekJGLEVBQWN6eUgsT0FBZSxDQUVqQyxNQUFNaXBILEVBQVEsR0FDUnIxRSxFQUFTLEdBRWY2MEUsR0FBZVksWUFBYW9KLEVBQWV4SixFQUFPcjFFLEVBQVE4K0UsR0FHcEMsSUFBakJ6SixFQUFNanBILFFBRVYyeUgsRUFBV2p2SCxLQUFNLElBQUkyckgsRUFBV21ELEVBQVd2SixFQUFPcjFFLE1BUS9DazJFLEVBQVMsR0FFVDhJLEVBQVduL0UsRUFBVWw4QixNQUFRLFVBQzdCcXlHLEVBQU1uMkUsRUFBVW0yRSxLQUFPLEdBQ3ZCbUMsRUFBWXQ0RSxFQUFVczRFLFVBRzVCLElBQUl1RixFQUFXNzlFLEVBQVV6ekMsU0FBWSxFQUVyQyxNQUFNNnlILEVBQWtCcC9FLEVBQVVxL0UsV0FBYSxHQUUvQyxJQUFNLElBQUl4eEgsRUFBSSxFQUFHQSxFQUFJdXhILEVBQWdCN3lILE9BQVFzQixJQUFPLENBRW5ELE1BQU1teEgsRUFBZ0JJLEVBQWlCdnhILEdBQUkyVixLQUczQyxHQUFPdzdHLEdBQTBDLElBQXpCQSxFQUFjenlILE9BR3RDLEdBQUt5eUgsRUFBZSxHQUFJdHRFLGFBQWUsQ0FHdEMsTUFBTTR0RSxFQUFtQixHQUV6QixJQUFJbnZILEVBRUosSUFBTUEsRUFBSSxFQUFHQSxFQUFJNnVILEVBQWN6eUgsT0FBUTRELElBRXRDLEdBQUs2dUgsRUFBZTd1SCxHQUFJdWhELGFBRXZCLElBQU0sSUFBSWhqRCxFQUFJLEVBQUdBLEVBQUlzd0gsRUFBZTd1SCxHQUFJdWhELGFBQWFubEQsT0FBUW1DLElBRTVENHdILEVBQWtCTixFQUFlN3VILEdBQUl1aEQsYUFBY2hqRCxLQUFVLEVBV2hFLElBQU0sTUFBTTZ3SCxLQUFtQkQsRUFBbUIsQ0FFakQsTUFBTTlKLEVBQVEsR0FDUnIxRSxFQUFTLEdBRWYsSUFBTSxJQUFJenhDLEVBQUksRUFBR0EsSUFBTXN3SCxFQUFlN3VILEdBQUl1aEQsYUFBYW5sRCxTQUFXbUMsRUFBSSxDQUVyRSxNQUFNOHdILEVBQWVSLEVBQWU3dUgsR0FFcENxbEgsRUFBTXZsSCxLQUFNdXZILEVBQWF2akUsTUFDekI5YixFQUFPbHdDLEtBQVF1dkgsRUFBYXRqRCxjQUFnQnFqRCxFQUFvQixFQUFJLEdBSXJFbEosRUFBT3BtSCxLQUFNLElBQUlxdEgsR0FBcUIseUJBQTJCaUMsRUFBa0IsSUFBSy9KLEVBQU9yMUUsSUFJaEcwOUUsRUFBV3lCLEVBQWlCL3lILE9BQVM0cEgsTUFFL0IsQ0FJTixNQUFNc0osRUFBVyxVQUFZM3hDLEVBQU9qZ0YsR0FBSWlXLEtBQU8sSUFFL0NnN0csRUFDQ25CLEdBQXFCOEIsRUFBVyxZQUNoQ1QsRUFBZSxNQUFPM0ksR0FFdkJ5SSxFQUNDckIsR0FBeUJnQyxFQUFXLGNBQ3BDVCxFQUFlLE1BQU8zSSxHQUV2QnlJLEVBQ0NuQixHQUFxQjhCLEVBQVcsU0FDaENULEVBQWUsTUFBTzNJLElBTXpCLE9BQXVCLElBQWxCQSxFQUFPOXBILE9BRUosS0FJSyxJQUFJa0IsS0FBTTB4SCxFQUFVdEIsRUFBVXhILEVBQVFpQyxHQU1wRDVCLGdCQUdDLElBQUltSCxFQUFXLEVBRWYsSUFBTSxJQUFJdHZILEVBQUksRUFBR25DLEVBSEZxQixLQUFLNG9ILE9BR1E5cEgsT0FBUWdDLElBQU1uQyxJQUFNbUMsRUFBSSxDQUVuRCxNQUFNK25ILEVBQVE3b0gsS0FBSzRvSCxPQUFROW5ILEdBRTNCc3ZILEVBQVd2d0gsS0FBS2tHLElBQUtxcUgsRUFBVXZILEVBQU1kLE1BQU9jLEVBQU1kLE1BQU1qcEgsT0FBUyxJQU1sRSxPQUZBa0IsS0FBS293SCxTQUFXQSxFQUVUcHdILEtBSVJ1MkUsT0FFQyxJQUFNLElBQUl6MUUsRUFBSSxFQUFHQSxFQUFJZCxLQUFLNG9ILE9BQU85cEgsT0FBUWdDLElBRXhDZCxLQUFLNG9ILE9BQVE5bkgsR0FBSXkxRSxLQUFNLEVBQUd2MkUsS0FBS293SCxVQUloQyxPQUFPcHdILEtBSVI4dUgsV0FFQyxJQUFJQyxHQUFRLEVBRVosSUFBTSxJQUFJanVILEVBQUksRUFBR0EsRUFBSWQsS0FBSzRvSCxPQUFPOXBILE9BQVFnQyxJQUV4Q2l1SCxFQUFRQSxHQUFTL3VILEtBQUs0b0gsT0FBUTluSCxHQUFJZ3VILFdBSW5DLE9BQU9DLEVBSVJHLFdBRUMsSUFBTSxJQUFJcHVILEVBQUksRUFBR0EsRUFBSWQsS0FBSzRvSCxPQUFPOXBILE9BQVFnQyxJQUV4Q2QsS0FBSzRvSCxPQUFROW5ILEdBQUlvdUgsV0FJbEIsT0FBT2x2SCxLQUlSK2pCLFFBRUMsTUFBTTZrRyxFQUFTLEdBRWYsSUFBTSxJQUFJOW5ILEVBQUksRUFBR0EsRUFBSWQsS0FBSzRvSCxPQUFPOXBILE9BQVFnQyxJQUV4QzhuSCxFQUFPcG1ILEtBQU14QyxLQUFLNG9ILE9BQVE5bkgsR0FBSWlqQixTQUkvQixPQUFPLElBQUkvakIsS0FBSzJJLFlBQWEzSSxLQUFLcVcsS0FBTXJXLEtBQUtvd0gsU0FBVXhILEVBQVE1b0gsS0FBSzZxSCxXQUlyRWovRyxTQUVDLE9BQU81TCxLQUFLMkksWUFBWWlELE9BQVE1TCxPQWdEbEMsU0FBU3d3SCxHQUFvQnRhLEdBRTVCLFFBQW1CMTJGLElBQWQwMkYsRUFBS3IvRixLQUVULE1BQU0sSUFBSS9XLE1BQU8sNERBSWxCLE1BQU1xdUgsRUFsRFAsU0FBdUM4RCxHQUV0QyxPQUFTQSxFQUFTOXVHLGVBRWpCLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFVBRUosT0FBTzBzRyxHQUVSLElBQUssU0FDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssVUFFSixPQUFPSyxHQUVSLElBQUssUUFFSixPQUFPTixHQUVSLElBQUssYUFFSixPQUFPSSxHQUVSLElBQUssT0FDTCxJQUFLLFVBRUosT0FBT0wsR0FFUixJQUFLLFNBRUosT0FBT00sR0FJVCxNQUFNLElBQUlud0gsTUFBTyw4Q0FBZ0RteUgsR0FZL0NDLENBQThCaGMsRUFBS3IvRixNQUVyRCxRQUFvQjJJLElBQWYwMkYsRUFBSzZSLE1BQXNCLENBRS9CLE1BQU1BLEVBQVEsR0FBSXIxRSxFQUFTLEdBRTNCNjBFLEdBQWVZLFlBQWFqUyxFQUFLbmdHLEtBQU1neUcsRUFBT3IxRSxFQUFRLFNBRXREd2pFLEVBQUs2UixNQUFRQSxFQUNiN1IsRUFBS3hqRSxPQUFTQSxFQUtmLFlBQXlCbHpCLElBQXBCMnVHLEVBQVUzN0YsTUFFUDI3RixFQUFVMzdGLE1BQU8wakYsR0FLakIsSUFBSWlZLEVBQVdqWSxFQUFLNy9GLEtBQU02L0YsRUFBSzZSLE1BQU83UixFQUFLeGpFLE9BQVF3akUsRUFBSzRYLGVBTWpFLE1BQU1xRSxHQUFRLENBRWJscEUsU0FBUyxFQUVUcHhDLE1BQU8sR0FFUG9NLElBQUssU0FBVzB1QixFQUFLeS9FLElBRUUsSUFBakJweUgsS0FBS2lwRCxVQUlWanBELEtBQUs2WCxNQUFPODZCLEdBQVF5L0UsSUFJckJ4N0csSUFBSyxTQUFXKzdCLEdBRWYsSUFBc0IsSUFBakIzeUMsS0FBS2lwRCxRQUlWLE9BQU9qcEQsS0FBSzZYLE1BQU84NkIsSUFJcEJoRCxPQUFRLFNBQVdnRCxVQUVYM3lDLEtBQUs2WCxNQUFPODZCLElBSXBCcCtCLE1BQU8sV0FFTnZVLEtBQUs2WCxNQUFRLEtBaUpmLE1BQU13NkcsR0FBd0IsSUEzSTlCLE1BRUMxcEgsWUFBYTJwSCxFQUFRQyxFQUFZQyxHQUVoQyxNQUFNcnRFLEVBQVFubEQsS0FFZCxJQUdJeXlILEVBSEFDLEdBQVksRUFDWkMsRUFBYyxFQUNkQyxFQUFhLEVBRWpCLE1BQU1DLEVBQVcsR0FLakI3eUgsS0FBSzh5SCxhQUFVdHpHLEVBQ2Z4ZixLQUFLc3lILE9BQVNBLEVBQ2R0eUgsS0FBS3V5SCxXQUFhQSxFQUNsQnZ5SCxLQUFLd3lILFFBQVVBLEVBRWZ4eUgsS0FBSyt5SCxVQUFZLFNBQVdqN0csR0FFM0I4NkcsS0FFbUIsSUFBZEYsUUFFbUJsekcsSUFBbEIybEMsRUFBTTJ0RSxTQUVWM3RFLEVBQU0ydEUsUUFBU2g3RyxFQUFLNjZHLEVBQWFDLEdBTW5DRixHQUFZLEdBSWIxeUgsS0FBS2d6SCxRQUFVLFNBQVdsN0csR0FFekI2NkcsU0FFMEJuekcsSUFBckIybEMsRUFBTW90RSxZQUVWcHRFLEVBQU1vdEUsV0FBWXo2RyxFQUFLNjZHLEVBQWFDLEdBSWhDRCxJQUFnQkMsSUFFcEJGLEdBQVksT0FFVWx6RyxJQUFqQjJsQyxFQUFNbXRFLFFBRVZudEUsRUFBTW10RSxXQVFUdHlILEtBQUtpekgsVUFBWSxTQUFXbjdHLFFBRUowSCxJQUFsQjJsQyxFQUFNcXRFLFNBRVZydEUsRUFBTXF0RSxRQUFTMTZHLElBTWpCOVgsS0FBS2t6SCxXQUFhLFNBQVdwN0csR0FFNUIsT0FBSzI2RyxFQUVHQSxFQUFhMzZHLEdBSWRBLEdBSVI5WCxLQUFLbXpILGVBQWlCLFNBQVc1N0csR0FJaEMsT0FGQWs3RyxFQUFjbDdHLEVBRVB2WCxNQUlSQSxLQUFLb3pILFdBQWEsU0FBV0MsRUFBT0MsR0FJbkMsT0FGQVQsRUFBU3J3SCxLQUFNNndILEVBQU9DLEdBRWZ0ekgsTUFJUkEsS0FBS3V6SCxjQUFnQixTQUFXRixHQUUvQixNQUFNenNILEVBQVFpc0gsRUFBU2xwSCxRQUFTMHBILEdBUWhDLE9BTmlCLElBQVp6c0gsR0FFSmlzSCxFQUFTL2pILE9BQVFsSSxFQUFPLEdBSWxCNUcsTUFJUkEsS0FBS3d6SCxXQUFhLFNBQVdwQixHQUU1QixJQUFNLElBQUl0eEgsRUFBSSxFQUFHVyxFQUFJb3hILEVBQVMvekgsT0FBUWdDLEVBQUlXLEVBQUdYLEdBQUssRUFBSSxDQUVyRCxNQUFNdXlILEVBQVFSLEVBQVUveEgsR0FDbEJ3eUgsRUFBU1QsRUFBVS94SCxFQUFJLEdBSTdCLEdBRkt1eUgsRUFBTUksU0FBU0osRUFBTTc5QyxVQUFZLEdBRWpDNjlDLEVBQU0vbkgsS0FBTThtSCxHQUVoQixPQUFPa0IsRUFNVCxPQUFPLFFBVVYsTUFBTUksR0FFTC9xSCxZQUFhZ3JILEdBRVozekgsS0FBSzJ6SCxhQUF3Qm4wRyxJQUFabTBHLEVBQTBCQSxFQUFVdEIsR0FFckRyeUgsS0FBSzR6SCxZQUFjLFlBQ25CNXpILEtBQUs2ekgsaUJBQWtCLEVBQ3ZCN3pILEtBQUtrYSxLQUFPLEdBQ1psYSxLQUFLOHpILGFBQWUsR0FDcEI5ekgsS0FBSyt6SCxjQUFnQixHQUl0QkMsUUFFQUMsVUFBV244RyxFQUFLeTZHLEdBRWYsTUFBTXB0RSxFQUFRbmxELEtBRWQsT0FBTyxJQUFJaUMsU0FBUyxTQUFXQyxFQUFTSyxHQUV2QzRpRCxFQUFNNnVFLEtBQU1sOEcsRUFBSzVWLEVBQVNxd0gsRUFBWWh3SCxNQU14Q2l3QixTQUVBMGhHLGVBQWdCTixHQUdmLE9BREE1ekgsS0FBSzR6SCxZQUFjQSxFQUNaNXpILEtBSVJtMEgsbUJBQW9CbjFILEdBR25CLE9BREFnQixLQUFLNnpILGdCQUFrQjcwSCxFQUNoQmdCLEtBSVJvMEgsUUFBU2w2RyxHQUdSLE9BREFsYSxLQUFLa2EsS0FBT0EsRUFDTGxhLEtBSVJxMEgsZ0JBQWlCUCxHQUdoQixPQURBOXpILEtBQUs4ekgsYUFBZUEsRUFDYjl6SCxLQUlSczBILGlCQUFrQlAsR0FHakIsT0FEQS96SCxLQUFLK3pILGNBQWdCQSxFQUNkL3pILE1BTVQsTUFBTXUwSCxHQUFVLEdBRWhCLE1BQU1DLFdBQW1CZCxHQUV4Qi9xSCxZQUFhZ3JILEdBRVpsaUcsTUFBT2tpRyxHQUlSSyxLQUFNbDhHLEVBQUt3NkcsRUFBUUMsRUFBWUMsUUFFakJoekcsSUFBUjFILElBQW9CQSxFQUFNLFNBRVowSCxJQUFkeGYsS0FBS2thLE9BQXFCcEMsRUFBTTlYLEtBQUtrYSxLQUFPcEMsR0FFakRBLEVBQU05WCxLQUFLMnpILFFBQVFULFdBQVlwN0csR0FFL0IsTUFBTXUzQyxFQUFTOGlFLEdBQU12N0csSUFBS2tCLEdBRTFCLFFBQWdCMEgsSUFBWDZ2QyxFQVlKLE9BVkFydkQsS0FBSzJ6SCxRQUFRWixVQUFXajdHLEdBRXhCclYsWUFBWSxLQUVONnZILEdBQVNBLEVBQVFqakUsR0FFdEJydkQsS0FBSzJ6SCxRQUFRWCxRQUFTbDdHLEtBRXBCLEdBRUl1M0MsRUFNUixRQUF3Qjd2QyxJQUFuQiswRyxHQUFTejhHLEdBVWIsWUFSQXk4RyxHQUFTejhHLEdBQU10VixLQUFNLENBRXBCOHZILE9BQVFBLEVBQ1JDLFdBQVlBLEVBQ1pDLFFBQVNBLElBU1grQixHQUFTejhHLEdBQVEsR0FFakJ5OEcsR0FBU3o4RyxHQUFNdFYsS0FBTSxDQUNwQjh2SCxPQUFRQSxFQUNSQyxXQUFZQSxFQUNaQyxRQUFTQSxJQUlWLE1BQU1pQyxFQUFNLElBQUlDLFFBQVM1OEcsRUFBSyxDQUM3QjY4RyxRQUFTLElBQUlDLFFBQVM1MEgsS0FBSyt6SCxlQUMzQmMsWUFBYTcwSCxLQUFLNnpILGdCQUFrQixVQUFZLGdCQUszQ2lCLEVBQVc5MEgsS0FBSzgwSCxTQUNoQkMsRUFBZS8wSCxLQUFLKzBILGFBRzFCNytHLE1BQU91K0csR0FDTHR5SCxNQUFNNnlILElBRU4sR0FBeUIsTUFBcEJBLEVBQVMzK0MsUUFBc0MsSUFBcEIyK0MsRUFBUzMrQyxPQUFlLENBYXZELEdBUnlCLElBQXBCMitDLEVBQVMzK0MsUUFFYjF6RSxRQUFRdWhCLEtBQU0sNkNBTWdCLG9CQUFuQit3RyxxQkFBb0R6MUcsSUFBbEJ3MUcsRUFBUzM2RyxXQUFrRG1GLElBQTVCdzFHLEVBQVMzNkcsS0FBSzY2RyxVQUUxRixPQUFPRixFQUlSLE1BQU1HLEVBQVlaLEdBQVN6OEcsR0FDckJzOUcsRUFBU0osRUFBUzM2RyxLQUFLNjZHLFlBQ3ZCRyxFQUFnQkwsRUFBU0wsUUFBUS85RyxJQUFLLGtCQUN0QzArRyxFQUFRRCxFQUFnQnhuRyxTQUFVd25HLEdBQWtCLEVBQ3BERSxFQUE2QixJQUFWRCxFQUN6QixJQUFJRSxFQUFTLEVBR2IsTUFBTTErRyxFQUFTLElBQUltK0csZUFBZ0IsQ0FDbENqd0gsTUFBT2s1RixJQUlOLFNBQVN1M0IsSUFFUkwsRUFBT00sT0FBT3Z6SCxNQUFNLEVBQUlwRCxLQUFBQSxFQUFNQyxNQUFBQSxNQUU3QixHQUFLRCxFQUVKbS9GLEVBQVd6a0YsWUFFTCxDQUVOKzdHLEdBQVV4MkgsRUFBTXFOLFdBRWhCLE1BQU1tVyxFQUFRLElBQUltekcsY0FBZSxXQUFZLENBQUVKLGlCQUFBQSxFQUFrQkMsT0FBQUEsRUFBUUYsTUFBQUEsSUFDekUsSUFBTSxJQUFJeDBILEVBQUksRUFBR2kxQixFQUFLby9GLEVBQVVyMkgsT0FBUWdDLEVBQUlpMUIsRUFBSWoxQixJQUFPLENBRXRELE1BQU02NUIsRUFBV3c2RixFQUFXcjBILEdBQ3ZCNjVCLEVBQVM0M0YsWUFBYTUzRixFQUFTNDNGLFdBQVkvdkcsR0FJakQwN0UsRUFBVzAzQixRQUFTNTJILEdBQ3BCeTJILFFBdkJIQSxNQW1DRixPQUFPLElBQUlJLFNBQVUvK0csR0FJckIsTUFBTWhYLE1BQU8sY0FBY2sxSCxFQUFTbDlHLHVCQUF1Qms5RyxFQUFTMytDLFdBQVcyK0MsRUFBU2MsaUJBS3pGM3pILE1BQU02eUgsSUFFTixPQUFTRCxHQUVSLElBQUssY0FFSixPQUFPQyxFQUFTNytHLGNBRWpCLElBQUssT0FFSixPQUFPNitHLEVBQVNlLE9BRWpCLElBQUssV0FFSixPQUFPZixFQUFTZ0IsT0FDZDd6SCxNQUFNNnpILElBRVMsSUFBSUMsV0FDTEMsZ0JBQWlCRixFQUFNbEIsS0FJeEMsSUFBSyxPQUVKLE9BQU9FLEVBQVM5ZSxPQUVqQixRQUVDLFFBQWtCMTJGLElBQWJzMUcsRUFFSixPQUFPRSxFQUFTZ0IsT0FFVixDQUdOLE1BQ01yb0csRUFESywwQkFDS0EsS0FBTW1uRyxHQUNoQnppSCxFQUFRc2IsR0FBUUEsRUFBTSxHQUFNQSxFQUFNLEdBQUl4SyxtQkFBZ0IzRCxFQUN0RDIyRyxFQUFVLElBQUk1ckgsWUFBYThILEdBQ2pDLE9BQU8yaUgsRUFBUzcrRyxjQUFjaFUsTUFBTWlMLEdBQU0rb0gsRUFBUS9sSCxPQUFRaEQsVUFPN0RqTCxNQUFNNlYsSUFJTm02RyxHQUFNbHVHLElBQUtuTSxFQUFLRSxHQUVoQixNQUFNbTlHLEVBQVlaLEdBQVN6OEcsVUFDcEJ5OEcsR0FBU3o4RyxHQUVoQixJQUFNLElBQUloWCxFQUFJLEVBQUdpMUIsRUFBS28vRixFQUFVcjJILE9BQVFnQyxFQUFJaTFCLEVBQUlqMUIsSUFBTyxDQUV0RCxNQUFNNjVCLEVBQVd3NkYsRUFBV3IwSCxHQUN2QjY1QixFQUFTMjNGLFFBQVMzM0YsRUFBUzIzRixPQUFRdDZHLE9BS3pDdFUsT0FBTzBzRixJQUlQLE1BQU0ra0MsRUFBWVosR0FBU3o4RyxHQUUzQixRQUFtQjBILElBQWQyMUcsRUFJSixNQURBbjFILEtBQUsyekgsUUFBUVYsVUFBV243RyxHQUNsQnM0RSxTQUlBbWtDLEdBQVN6OEcsR0FFaEIsSUFBTSxJQUFJaFgsRUFBSSxFQUFHaTFCLEVBQUtvL0YsRUFBVXIySCxPQUFRZ0MsRUFBSWkxQixFQUFJajFCLElBQU8sQ0FFdEQsTUFBTTY1QixFQUFXdzZGLEVBQVdyMEgsR0FDdkI2NUIsRUFBUzYzRixTQUFVNzNGLEVBQVM2M0YsUUFBU3BpQyxHQUkzQ3B3RixLQUFLMnpILFFBQVFWLFVBQVduN0csTUFHeEJzK0csU0FBUyxLQUVUcDJILEtBQUsyekgsUUFBUVgsUUFBU2w3RyxNQUl4QjlYLEtBQUsyekgsUUFBUVosVUFBV2o3RyxHQUl6QnUrRyxnQkFBaUJyM0gsR0FHaEIsT0FEQWdCLEtBQUsrMEgsYUFBZS8xSCxFQUNiZ0IsS0FJUnMySCxZQUFhdDNILEdBR1osT0FEQWdCLEtBQUs4MEgsU0FBVzkxSCxFQUNUZ0IsTUFpTVQsTUFBTXUySCxXQUFvQjdDLEdBRXpCL3FILFlBQWFnckgsR0FFWmxpRyxNQUFPa2lHLEdBSVJLLEtBQU1sOEcsRUFBS3c2RyxFQUFRQyxFQUFZQyxRQUVYaHpHLElBQWR4ZixLQUFLa2EsT0FBcUJwQyxFQUFNOVgsS0FBS2thLEtBQU9wQyxHQUVqREEsRUFBTTlYLEtBQUsyekgsUUFBUVQsV0FBWXA3RyxHQUUvQixNQUFNcXRDLEVBQVFubEQsS0FFUnF2RCxFQUFTOGlFLEdBQU12N0csSUFBS2tCLEdBRTFCLFFBQWdCMEgsSUFBWDZ2QyxFQVlKLE9BVkFsSyxFQUFNd3VFLFFBQVFaLFVBQVdqN0csR0FFekJyVixZQUFZLFdBRU42dkgsR0FBU0EsRUFBUWpqRSxHQUV0QmxLLEVBQU13dUUsUUFBUVgsUUFBU2w3RyxLQUVyQixHQUVJdTNDLEVBSVIsTUFBTWwzQyxFQUFRZ1QsRUFBaUIsT0FFL0IsU0FBU3FyRyxJQUVSQyxJQUVBdEUsR0FBTWx1RyxJQUFLbk0sRUFBSzlYLE1BRVhzeUgsR0FBU0EsRUFBUXR5SCxNQUV0Qm1sRCxFQUFNd3VFLFFBQVFYLFFBQVNsN0csR0FJeEIsU0FBUzQrRyxFQUFjbDBHLEdBRXRCaTBHLElBRUtqRSxHQUFVQSxFQUFTaHdHLEdBRXhCMmlDLEVBQU13dUUsUUFBUVYsVUFBV243RyxHQUN6QnF0QyxFQUFNd3VFLFFBQVFYLFFBQVNsN0csR0FJeEIsU0FBUzIrRyxJQUVSdCtHLEVBQU1tSyxvQkFBcUIsT0FBUWswRyxHQUFhLEdBQ2hEcitHLEVBQU1tSyxvQkFBcUIsUUFBU28wRyxHQUFjLEdBaUJuRCxPQWJBditHLEVBQU1pQyxpQkFBa0IsT0FBUW84RyxHQUFhLEdBQzdDcitHLEVBQU1pQyxpQkFBa0IsUUFBU3M4RyxHQUFjLEdBRXBCLFVBQXRCNStHLEVBQUloTSxNQUFPLEVBQUcsU0FFUTBULElBQXJCeGYsS0FBSzR6SCxjQUE0Qno3RyxFQUFNeTdHLFlBQWM1ekgsS0FBSzR6SCxhQUloRXp1RSxFQUFNd3VFLFFBQVFaLFVBQVdqN0csR0FFekJLLEVBQU1xWCxJQUFNMVgsRUFFTEssR0FNVCxNQUFNdytHLFdBQTBCakQsR0FFL0IvcUgsWUFBYWdySCxHQUVabGlHLE1BQU9raUcsR0FJUkssS0FBTTRDLEVBQU10RSxFQUFRQyxFQUFZQyxHQUUvQixNQUFNeDlGLEVBQVUsSUFBSTQxQixHQUVkMG9FLEVBQVMsSUFBSWlELEdBQWF2MkgsS0FBSzJ6SCxTQUNyQ0wsRUFBT1ksZUFBZ0JsMEgsS0FBSzR6SCxhQUM1Qk4sRUFBT2MsUUFBU3AwSCxLQUFLa2EsTUFFckIsSUFBSXM3RyxFQUFTLEVBRWIsU0FBU3FCLEVBQWEvMUgsR0FFckJ3eUgsRUFBT1UsS0FBTTRDLEVBQU05MUgsSUFBSyxTQUFXcVgsR0FFbEM2YyxFQUFRekUsT0FBUXp2QixHQUFNcVgsRUFFdEJxOUcsSUFFZ0IsSUFBWEEsSUFFSnhnRyxFQUFRNUUsYUFBYyxFQUVqQmtpRyxHQUFTQSxFQUFRdDlGLFdBSXJCeFYsRUFBV2d6RyxHQUlmLElBQU0sSUFBSTF4SCxFQUFJLEVBQUdBLEVBQUk4MUgsRUFBSzkzSCxTQUFXZ0MsRUFFcEMrMUgsRUFBYS8xSCxHQUlkLE9BQU9rMEIsR0FpSFQsTUFBTThoRyxXQUFzQnBELEdBRTNCL3FILFlBQWFnckgsR0FFWmxpRyxNQUFPa2lHLEdBSVJLLEtBQU1sOEcsRUFBS3c2RyxFQUFRQyxFQUFZQyxHQUU5QixNQUFNeDlGLEVBQVUsSUFBSWxFLEdBRWR3aUcsRUFBUyxJQUFJaUQsR0FBYXYySCxLQUFLMnpILFNBaUJyQyxPQWhCQUwsRUFBT1ksZUFBZ0JsMEgsS0FBSzR6SCxhQUM1Qk4sRUFBT2MsUUFBU3AwSCxLQUFLa2EsTUFFckJvNUcsRUFBT1UsS0FBTWw4RyxHQUFLLFNBQVdLLEdBRTVCNmMsRUFBUTdjLE1BQVFBLEVBQ2hCNmMsRUFBUTVFLGFBQWMsT0FFTjVRLElBQVg4eUcsR0FFSkEsRUFBUXQ5RixLQUlQdTlGLEVBQVlDLEdBRVJ4OUYsR0FNVCxNQUFNK2hHLFdBQWN0cEYsR0FFbkI5a0MsWUFBYTFDLEVBQU80K0UsRUFBWSxHQUUvQnB6RCxRQUVBenhCLEtBQUs2VyxLQUFPLFFBRVo3VyxLQUFLaUcsTUFBUSxJQUFJK21CLEdBQU8vbUIsR0FDeEJqRyxLQUFLNmtGLFVBQVlBLEVBSWxCL3hELFdBTUE5TyxLQUFNK0ksR0FPTCxPQUxBMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUtpRyxNQUFNK2QsS0FBTStJLEVBQU85bUIsT0FDeEJqRyxLQUFLNmtGLFVBQVk5M0QsRUFBTzgzRCxVQUVqQjdrRixLQUlSNEwsT0FBUXlrQixHQUVQLE1BQU1yWSxFQUFPeVosTUFBTTdsQixPQUFReWtCLEdBYzNCLE9BWkFyWSxFQUFLZ25CLE9BQU8vNEIsTUFBUWpHLEtBQUtpRyxNQUFNa29CLFNBQy9CblcsRUFBS2duQixPQUFPNmxELFVBQVk3a0YsS0FBSzZrRixlQUVIcmxFLElBQXJCeGYsS0FBS3U3RCxjQUE0QnZqRCxFQUFLZ25CLE9BQU91OEIsWUFBY3Y3RCxLQUFLdTdELFlBQVlwdEMsZUFFMUQzTyxJQUFsQnhmLEtBQUtrdkMsV0FBeUJsM0IsRUFBS2duQixPQUFPa1EsU0FBV2x2QyxLQUFLa3ZDLGVBQzNDMXZCLElBQWZ4ZixLQUFLMmxCLFFBQXNCM04sRUFBS2duQixPQUFPclosTUFBUTNsQixLQUFLMmxCLFlBQ3JDbkcsSUFBZnhmLEtBQUsyNkQsUUFBc0IzaUQsRUFBS2duQixPQUFPMjdCLE1BQVEzNkQsS0FBSzI2RCxZQUNsQ243QyxJQUFsQnhmLEtBQUt3bEYsV0FBeUJ4dEUsRUFBS2duQixPQUFPd21ELFNBQVd4bEYsS0FBS3dsRixlQUUxQ2htRSxJQUFoQnhmLEtBQUswOEQsU0FBdUIxa0QsRUFBS2duQixPQUFPMDlCLE9BQVMxOEQsS0FBSzA4RCxPQUFPOXdELFVBRTNEb00sR0FNVCsrRyxHQUFNeDNILFVBQVVrd0MsU0FBVSxHQUUxQixjQUE4QnNuRixHQUU3QnB1SCxZQUFhMnlELEVBQVVDLEVBQWFzcEIsR0FFbkNwekQsTUFBTzZwQyxFQUFVdXBCLEdBRWpCN2tGLEtBQUs2VyxLQUFPLGtCQUVaN1csS0FBSzgvQixTQUFTOWIsS0FBTXlwQixHQUFTRSxXQUM3QjN0QyxLQUFLc3lCLGVBRUx0eUIsS0FBS3U3RCxZQUFjLElBQUl2dUMsR0FBT3V1QyxHQUkvQnYzQyxLQUFNK0ksR0FNTCxPQUpBZ3FHLEdBQU14M0gsVUFBVXlrQixLQUFLcGpCLEtBQU1aLEtBQU0rc0IsR0FFakMvc0IsS0FBS3U3RCxZQUFZdjNDLEtBQU0rSSxFQUFPd3VDLGFBRXZCdjdELFFBTU9ULFVBQVVvbUYsbUJBQW9CLEVBRTlDLE1BQU1xeEMsR0FBb0MsSUFBSXh3RixHQUN4Q3l3RixHQUFzQyxJQUFJcDhGLEdBQzFDcThGLEdBQThCLElBQUlyOEYsR0FFeEMsTUFBTXM4RixHQUVMeHVILFlBQWFrekIsR0FFWjc3QixLQUFLNjdCLE9BQVNBLEVBRWQ3N0IsS0FBS29sRixLQUFPLEVBQ1pwbEYsS0FBS3FsRixXQUFhLEVBQ2xCcmxGLEtBQUttRyxPQUFTLEVBQ2RuRyxLQUFLaW9GLFlBQWMsRUFFbkJqb0YsS0FBS3NsRixRQUFVLElBQUk5aEUsRUFBUyxJQUFLLEtBRWpDeGpCLEtBQUtvUyxJQUFNLEtBQ1hwUyxLQUFLa29GLFFBQVUsS0FDZmxvRixLQUFLaXJCLE9BQVMsSUFBSXViLEdBRWxCeG1DLEtBQUtrcEYsWUFBYSxFQUNsQmxwRixLQUFLb3dCLGFBQWMsRUFFbkJwd0IsS0FBS2duRixTQUFXLElBQUl2NkIsR0FDcEJ6c0QsS0FBS28zSCxjQUFnQixJQUFJNXpHLEVBQVMsRUFBRyxHQUVyQ3hqQixLQUFLcTNILGVBQWlCLEVBRXRCcjNILEtBQUtzM0gsV0FBYSxDQUVqQixJQUFJcGtHLEdBQVMsRUFBRyxFQUFHLEVBQUcsSUFNeEI4MkQsbUJBRUMsT0FBT2hxRixLQUFLcTNILGVBSWJqdEMsYUFFQyxPQUFPcHFGLEtBQUtnbkYsU0FJYm1ELGVBQWdCbkgsR0FFZixNQUFNK0YsRUFBZS9vRixLQUFLNjdCLE9BQ3BCMDdGLEVBQWV2M0gsS0FBS2lyQixPQUUxQmdzRyxHQUFzQng1RixzQkFBdUJ1bEQsRUFBTTltRCxhQUNuRDZzRCxFQUFhanBELFNBQVM5YixLQUFNaXpHLElBRTVCQyxHQUFjejVGLHNCQUF1QnVsRCxFQUFNdmdFLE9BQU95WixhQUNsRDZzRCxFQUFhamxELE9BQVFvekYsSUFDckJudUMsRUFBYXI0QyxvQkFFYnNtRixHQUFvQjF1RyxpQkFBa0J5Z0UsRUFBYWh0RCxpQkFBa0JndEQsRUFBYWp0RCxvQkFDbEY5N0IsS0FBS2duRixTQUFTbDZCLHdCQUF5QmtxRSxJQUV2Q08sRUFBYTVxSCxJQUNaLEdBQUssRUFBSyxFQUFLLEdBQ2YsRUFBSyxHQUFLLEVBQUssR0FDZixFQUFLLEVBQUssR0FBSyxHQUNmLEVBQUssRUFBSyxFQUFLLEdBR2hCNHFILEVBQWE5eUcsU0FBVXNrRSxFQUFhaHRELGtCQUNwQ3c3RixFQUFhOXlHLFNBQVVza0UsRUFBYWp0RCxvQkFJckNvdUQsWUFBYXN0QyxHQUVaLE9BQU94M0gsS0FBS3MzSCxXQUFZRSxHQUl6QjV0QyxrQkFFQyxPQUFPNXBGLEtBQUtvM0gsY0FJYnRrRyxVQUVNOXlCLEtBQUtvUyxLQUVUcFMsS0FBS29TLElBQUkwZ0IsVUFJTDl5QixLQUFLa29GLFNBRVRsb0YsS0FBS2tvRixRQUFRcDFELFVBTWY5TyxLQUFNK0ksR0FTTCxPQVBBL3NCLEtBQUs2N0IsT0FBUzlPLEVBQU84TyxPQUFPOVgsUUFFNUIvakIsS0FBS29sRixLQUFPcjRELEVBQU9xNEQsS0FDbkJwbEYsS0FBS21HLE9BQVM0bUIsRUFBTzVtQixPQUVyQm5HLEtBQUtzbEYsUUFBUXRoRSxLQUFNK0ksRUFBT3U0RCxTQUVuQnRsRixLQUlSK2pCLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjcWIsS0FBTWhrQixNQUlyQzRMLFNBRUMsTUFBTW96QixFQUFTLEdBVWYsT0FSbUIsSUFBZGgvQixLQUFLb2xGLE9BQWFwbUQsRUFBT29tRCxLQUFPcGxGLEtBQUtvbEYsTUFDakIsSUFBcEJwbEYsS0FBS3FsRixhQUFtQnJtRCxFQUFPcW1ELFdBQWFybEYsS0FBS3FsRixZQUNqQyxJQUFoQnJsRixLQUFLbUcsU0FBZTY0QixFQUFPNzRCLE9BQVNuRyxLQUFLbUcsUUFDdEIsTUFBbkJuRyxLQUFLc2xGLFFBQVEza0YsR0FBZ0MsTUFBbkJYLEtBQUtzbEYsUUFBUXprRixJQUFZbStCLEVBQU9zbUQsUUFBVXRsRixLQUFLc2xGLFFBQVE3K0QsV0FFdEZ1WSxFQUFPbkQsT0FBUzc3QixLQUFLNjdCLE9BQU9qd0IsUUFBUSxHQUFRb3pCLGNBQ3JDQSxFQUFPbkQsT0FBTzVRLE9BRWQrVCxHQU1ULE1BQU15NEYsV0FBd0JOLEdBRTdCeHVILGNBRUM4b0IsTUFBTyxJQUFJbTJCLEdBQW1CLEdBQUksRUFBRyxHQUFLLE1BRTFDNW5ELEtBQUtnb0QsTUFBUSxFQUlkbWlDLGVBQWdCbkgsR0FFZixNQUFNbm5ELEVBQVM3N0IsS0FBSzY3QixPQUVkZ3NCLEVBQWdCLEVBQVZobEMsRUFBY21nRSxFQUFNcjlELE1BQVEzbEIsS0FBS2dvRCxNQUN2Q0YsRUFBUzluRCxLQUFLc2xGLFFBQVFsaEYsTUFBUXBFLEtBQUtzbEYsUUFBUWpoRixPQUMzQ2duQyxFQUFNMjNDLEVBQU05ekMsVUFBWXJULEVBQU93UCxJQUVoQ3djLElBQVFoc0IsRUFBT2dzQixLQUFPQyxJQUFXanNCLEVBQU9pc0IsUUFBVXpjLElBQVF4UCxFQUFPd1AsTUFFckV4UCxFQUFPZ3NCLElBQU1BLEVBQ2Joc0IsRUFBT2lzQixPQUFTQSxFQUNoQmpzQixFQUFPd1AsSUFBTUEsRUFDYnhQLEVBQU91c0IsMEJBSVIzMkIsTUFBTTA0RCxlQUFnQm5ILEdBSXZCaC9ELEtBQU0rSSxHQU1MLE9BSkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS2dvRCxNQUFRajdCLEVBQU9pN0IsTUFFYmhvRCxNQU1UeTNILEdBQWdCbDRILFVBQVVtNEgsbUJBQW9CLEdBRTlDLGNBQXdCWCxHQUV2QnB1SCxZQUFhMUMsRUFBTzQrRSxFQUFXMzFDLEVBQVcsRUFBR3ZwQixFQUFROWxCLEtBQUtvSCxHQUFLLEVBQUd1K0UsRUFBVyxFQUFHN3FCLEVBQVEsR0FFdkZscEMsTUFBT3hyQixFQUFPNCtFLEdBRWQ3a0YsS0FBSzZXLEtBQU8sWUFFWjdXLEtBQUs4L0IsU0FBUzliLEtBQU15cEIsR0FBU0UsV0FDN0IzdEMsS0FBS3N5QixlQUVMdHlCLEtBQUt5aUIsT0FBUyxJQUFJZ3JCLEdBRWxCenRDLEtBQUtrdkMsU0FBV0EsRUFDaEJsdkMsS0FBSzJsQixNQUFRQSxFQUNiM2xCLEtBQUt3bEYsU0FBV0EsRUFDaEJ4bEYsS0FBSzI2RCxNQUFRQSxFQUViMzZELEtBQUswOEQsT0FBUyxJQUFJKzZELEdBSWZFLFlBSUgsT0FBTzMzSCxLQUFLNmtGLFVBQVlobEYsS0FBS29ILEdBSTFCMHdILFVBQU9BLEdBR1YzM0gsS0FBSzZrRixVQUFZOHlDLEVBQVE5M0gsS0FBS29ILEdBSS9CNnJCLFVBRUM5eUIsS0FBSzA4RCxPQUFPNXBDLFVBSWI5TyxLQUFNK0ksR0FhTCxPQVhBMEUsTUFBTXpOLEtBQU0rSSxHQUVaL3NCLEtBQUtrdkMsU0FBV25pQixFQUFPbWlCLFNBQ3ZCbHZDLEtBQUsybEIsTUFBUW9ILEVBQU9wSCxNQUNwQjNsQixLQUFLd2xGLFNBQVd6NEQsRUFBT3k0RCxTQUN2QnhsRixLQUFLMjZELE1BQVE1dEMsRUFBTzR0QyxNQUVwQjM2RCxLQUFLeWlCLE9BQVNzSyxFQUFPdEssT0FBT3NCLFFBRTVCL2pCLEtBQUswOEQsT0FBUzN2QyxFQUFPMnZDLE9BQU8zNEMsUUFFckIvakIsUUFNQ1QsVUFBVWdtRixhQUFjLEVBRWxDLE1BQU02aEIsR0FBa0MsSUFBSTVnRSxHQUN0Q294RixHQUFvQyxJQUFJLzhGLEdBQ3hDZzlGLEdBQTRCLElBQUloOUYsR0FFdEMsTUFBTWk5RixXQUF5QlgsR0FFOUJ4dUgsY0FFQzhvQixNQUFPLElBQUltMkIsR0FBbUIsR0FBSSxFQUFHLEdBQUssTUFFMUM1bkQsS0FBS28zSCxjQUFnQixJQUFJNXpHLEVBQVMsRUFBRyxHQUVyQ3hqQixLQUFLcTNILGVBQWlCLEVBRXRCcjNILEtBQUtzM0gsV0FBYSxDQWVqQixJQUFJcGtHLEdBQVMsRUFBRyxFQUFHLEVBQUcsR0FFdEIsSUFBSUEsR0FBUyxFQUFHLEVBQUcsRUFBRyxHQUV0QixJQUFJQSxHQUFTLEVBQUcsRUFBRyxFQUFHLEdBRXRCLElBQUlBLEdBQVMsRUFBRyxFQUFHLEVBQUcsR0FFdEIsSUFBSUEsR0FBUyxFQUFHLEVBQUcsRUFBRyxHQUV0QixJQUFJQSxHQUFTLEVBQUcsRUFBRyxFQUFHLElBR3ZCbHpCLEtBQUsrM0gsZ0JBQWtCLENBQ3RCLElBQUlsOUYsR0FBUyxFQUFHLEVBQUcsR0FBSyxJQUFJQSxJQUFXLEVBQUcsRUFBRyxHQUFLLElBQUlBLEdBQVMsRUFBRyxFQUFHLEdBQ3JFLElBQUlBLEdBQVMsRUFBRyxHQUFLLEdBQUssSUFBSUEsR0FBUyxFQUFHLEVBQUcsR0FBSyxJQUFJQSxHQUFTLEdBQUssRUFBRyxJQUd4RTc2QixLQUFLZzRILFNBQVcsQ0FDZixJQUFJbjlGLEdBQVMsRUFBRyxFQUFHLEdBQUssSUFBSUEsR0FBUyxFQUFHLEVBQUcsR0FBSyxJQUFJQSxHQUFTLEVBQUcsRUFBRyxHQUNuRSxJQUFJQSxHQUFTLEVBQUcsRUFBRyxHQUFLLElBQUlBLEdBQVMsRUFBRyxFQUFHLEdBQUssSUFBSUEsR0FBUyxFQUFHLEdBQUssSUFLdkVzdkQsZUFBZ0JuSCxFQUFPdzBDLEVBQWdCLEdBRXRDLE1BQU0zN0YsRUFBUzc3QixLQUFLNjdCLE9BQ2QwN0YsRUFBZXYzSCxLQUFLaXJCLE9BRXBCb2dCLEVBQU0yM0MsRUFBTTl6QyxVQUFZclQsRUFBT3dQLElBRWhDQSxJQUFReFAsRUFBT3dQLE1BRW5CeFAsRUFBT3dQLElBQU1BLEVBQ2J4UCxFQUFPdXNCLDBCQUlSd3ZFLEdBQW9CbjZGLHNCQUF1QnVsRCxFQUFNOW1ELGFBQ2pETCxFQUFPaUUsU0FBUzliLEtBQU00ekcsSUFFdEJDLEdBQVk3ekcsS0FBTTZYLEVBQU9pRSxVQUN6QiszRixHQUFZNXpHLElBQUtqa0IsS0FBSyszSCxnQkFBaUJQLElBQ3ZDMzdGLEVBQU95TSxHQUFHdGtCLEtBQU1oa0IsS0FBS2c0SCxTQUFVUixJQUMvQjM3RixFQUFPaUksT0FBUSt6RixJQUNmaDhGLEVBQU82VSxvQkFFUDZtRixFQUFhN3RGLGlCQUFtQmt1RixHQUFvQmozSCxHQUFLaTNILEdBQW9CLzJILEdBQUsrMkgsR0FBb0IxMkgsR0FFdEdrbUcsR0FBa0I5K0UsaUJBQWtCdVQsRUFBT0UsaUJBQWtCRixFQUFPQyxvQkFDcEU5N0IsS0FBS2duRixTQUFTbDZCLHdCQUF5QnM2QyxLQU16QzB3QixHQUFpQnY0SCxVQUFVc3FGLG9CQUFxQixHQUVoRCxjQUF5Qmt0QyxHQUV4QnB1SCxZQUFhMUMsRUFBTzQrRSxFQUFXMzFDLEVBQVcsRUFBR3lyQixFQUFRLEdBRXBEbHBDLE1BQU94ckIsRUFBTzQrRSxHQUVkN2tGLEtBQUs2VyxLQUFPLGFBRVo3VyxLQUFLa3ZDLFNBQVdBLEVBQ2hCbHZDLEtBQUsyNkQsTUFBUUEsRUFFYjM2RCxLQUFLMDhELE9BQVMsSUFBSW83RCxHQUlmSCxZQUlILE9BQXdCLEVBQWpCMzNILEtBQUs2a0YsVUFBZ0JobEYsS0FBS29ILEdBSTlCMHdILFVBQU9BLEdBR1YzM0gsS0FBSzZrRixVQUFZOHlDLEdBQVUsRUFBSTkzSCxLQUFLb0gsSUFJckM2ckIsVUFFQzl5QixLQUFLMDhELE9BQU81cEMsVUFJYjlPLEtBQU0rSSxHQVNMLE9BUEEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS2t2QyxTQUFXbmlCLEVBQU9taUIsU0FDdkJsdkMsS0FBSzI2RCxNQUFRNXRDLEVBQU80dEMsTUFFcEIzNkQsS0FBSzA4RCxPQUFTM3ZDLEVBQU8ydkMsT0FBTzM0QyxRQUVyQi9qQixRQU1FVCxVQUFVbW1GLGNBQWUsRUFFcEMsTUFBTXV5QyxXQUErQmQsR0FFcEN4dUgsY0FFQzhvQixNQUFPLElBQUlzMEMsSUFBc0IsRUFBRyxFQUFHLEdBQUssRUFBRyxHQUFLLE9BTXREa3lELEdBQXVCMTRILFVBQVUyNEgsMEJBQTJCLEdBRTVELGNBQStCbkIsR0FFOUJwdUgsWUFBYTFDLEVBQU80K0UsR0FFbkJwekQsTUFBT3hyQixFQUFPNCtFLEdBRWQ3a0YsS0FBSzZXLEtBQU8sbUJBRVo3VyxLQUFLOC9CLFNBQVM5YixLQUFNeXBCLEdBQVNFLFdBQzdCM3RDLEtBQUtzeUIsZUFFTHR5QixLQUFLeWlCLE9BQVMsSUFBSWdyQixHQUVsQnp0QyxLQUFLMDhELE9BQVMsSUFBSXU3RCxHQUluQm5sRyxVQUVDOXlCLEtBQUswOEQsT0FBTzVwQyxVQUliOU8sS0FBTStJLEdBT0wsT0FMQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLeWlCLE9BQVNzSyxFQUFPdEssT0FBT3NCLFFBQzVCL2pCLEtBQUswOEQsT0FBUzN2QyxFQUFPMnZDLE9BQU8zNEMsUUFFckIvakIsUUFNUVQsVUFBVTJsRixvQkFBcUIsR0FFaEQsY0FBMkI2eEMsR0FFMUJwdUgsWUFBYTFDLEVBQU80K0UsR0FFbkJwekQsTUFBT3hyQixFQUFPNCtFLEdBRWQ3a0YsS0FBSzZXLEtBQU8sa0JBTUR0WCxVQUFVdWxGLGdCQUFpQixHQUV4QyxjQUE0Qml5QyxHQUUzQnB1SCxZQUFhMUMsRUFBTzQrRSxFQUFXemdGLEVBQVEsR0FBSUMsRUFBUyxJQUVuRG90QixNQUFPeHJCLEVBQU80K0UsR0FFZDdrRixLQUFLNlcsS0FBTyxnQkFFWjdXLEtBQUtvRSxNQUFRQSxFQUNicEUsS0FBS3FFLE9BQVNBLEVBSVhzekgsWUFHSCxPQUFPMzNILEtBQUs2a0YsVUFBWTdrRixLQUFLb0UsTUFBUXBFLEtBQUtxRSxPQUFTeEUsS0FBS29ILEdBSXJEMHdILFVBQU9BLEdBR1YzM0gsS0FBSzZrRixVQUFZOHlDLEdBQVUzM0gsS0FBS29FLE1BQVFwRSxLQUFLcUUsT0FBU3hFLEtBQUtvSCxJQUk1RCtjLEtBQU0rSSxHQU9MLE9BTEEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS29FLE1BQVEyb0IsRUFBTzNvQixNQUNwQnBFLEtBQUtxRSxPQUFTMG9CLEVBQU8xb0IsT0FFZHJFLEtBSVI0TCxPQUFReWtCLEdBRVAsTUFBTXJZLEVBQU95WixNQUFNN2xCLE9BQVF5a0IsR0FLM0IsT0FIQXJZLEVBQUtnbkIsT0FBTzU2QixNQUFRcEUsS0FBS29FLE1BQ3pCNFQsRUFBS2duQixPQUFPMzZCLE9BQVNyRSxLQUFLcUUsT0FFbkIyVCxLQU1LelksVUFBVWttRixpQkFBa0IsRUFZMUMsTUFBTTB5QyxHQUVMeHZILGNBRUMzSSxLQUFLaWxGLGFBQWUsR0FFcEIsSUFBTSxJQUFJbmtGLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2QmQsS0FBS2lsRixhQUFhemlGLEtBQU0sSUFBSXE0QixJQU05Qmx1QixJQUFLczRFLEdBRUosSUFBTSxJQUFJbmtGLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2QmQsS0FBS2lsRixhQUFjbmtGLEdBQUlrakIsS0FBTWloRSxFQUFjbmtGLElBSTVDLE9BQU9kLEtBSVJvNEgsT0FFQyxJQUFNLElBQUl0M0gsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCZCxLQUFLaWxGLGFBQWNua0YsR0FBSTZMLElBQUssRUFBRyxFQUFHLEdBSW5DLE9BQU8zTSxLQU1ScTRILE1BQU9wN0YsRUFBUXhhLEdBSWQsTUFBTTloQixFQUFJczhCLEVBQU90OEIsRUFBR0UsRUFBSW84QixFQUFPcDhCLEVBQUdLLEVBQUkrN0IsRUFBTy83QixFQUV2Q28zSCxFQUFRdDRILEtBQUtpbEYsYUFpQm5CLE9BZEF4aUUsRUFBT3VCLEtBQU1zMEcsRUFBTyxJQUFNNXpHLGVBQWdCLFNBRzFDakMsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQUssUUFBV3ozSCxHQUMvQzRoQixFQUFPNEIsZ0JBQWlCaTBHLEVBQU8sR0FBSyxRQUFXcDNILEdBQy9DdWhCLEVBQU80QixnQkFBaUJpMEcsRUFBTyxHQUFLLFFBQVczM0gsR0FHL0M4aEIsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQWtCMzNILEVBQUlFLEVBQWpCLFVBQ3BDNGhCLEVBQU80QixnQkFBaUJpMEcsRUFBTyxHQUFrQnozSCxFQUFJSyxFQUFqQixVQUNwQ3VoQixFQUFPNEIsZ0JBQWlCaTBHLEVBQU8sR0FBSyxTQUFhLEVBQU1wM0gsRUFBSUEsRUFBSSxJQUMvRHVoQixFQUFPNEIsZ0JBQWlCaTBHLEVBQU8sR0FBa0IzM0gsRUFBSU8sRUFBakIsVUFDcEN1aEIsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQUssU0FBYTMzSCxFQUFJQSxFQUFJRSxFQUFJQSxJQUV0RDRoQixFQU9SODFHLGdCQUFpQnQ3RixFQUFReGEsR0FJeEIsTUFBTTloQixFQUFJczhCLEVBQU90OEIsRUFBR0UsRUFBSW84QixFQUFPcDhCLEVBQUdLLEVBQUkrN0IsRUFBTy83QixFQUV2Q28zSCxFQUFRdDRILEtBQUtpbEYsYUFpQm5CLE9BZEF4aUUsRUFBT3VCLEtBQU1zMEcsRUFBTyxJQUFNNXpHLGVBQWdCLFNBRzFDakMsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQUssU0FBaUJ6M0gsR0FDckQ0aEIsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQUssU0FBaUJwM0gsR0FDckR1aEIsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQUssU0FBaUIzM0gsR0FHckQ4aEIsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQUssUUFBaUIzM0gsRUFBSUUsR0FDekQ0aEIsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQUssUUFBaUJ6M0gsRUFBSUssR0FDekR1aEIsRUFBTzRCLGdCQUFpQmkwRyxFQUFPLEdBQUssUUFBV3AzSCxFQUFJQSxFQUFJLFNBQ3ZEdWhCLEVBQU80QixnQkFBaUJpMEcsRUFBTyxHQUFLLFFBQWlCMzNILEVBQUlPLEdBQ3pEdWhCLEVBQU80QixnQkFBaUJpMEcsRUFBTyxHQUFLLFNBQWEzM0gsRUFBSUEsRUFBSUUsRUFBSUEsSUFFdEQ0aEIsRUFJUndCLElBQUsrZ0UsR0FFSixJQUFNLElBQUlsa0YsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCZCxLQUFLaWxGLGFBQWNua0YsR0FBSW1qQixJQUFLK2dFLEVBQUdDLGFBQWNua0YsSUFJOUMsT0FBT2QsS0FJUnc0SCxZQUFheHpDLEVBQUkxaEYsR0FFaEIsSUFBTSxJQUFJeEMsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCZCxLQUFLaWxGLGFBQWNua0YsR0FBSXVqQixnQkFBaUIyZ0UsRUFBR0MsYUFBY25rRixHQUFLd0MsR0FJL0QsT0FBT3RELEtBSVIrcUIsTUFBT3puQixHQUVOLElBQU0sSUFBSXhDLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2QmQsS0FBS2lsRixhQUFjbmtGLEdBQUk0akIsZUFBZ0JwaEIsR0FJeEMsT0FBT3RELEtBSVJxakIsS0FBTTJoRSxFQUFJaHFFLEdBRVQsSUFBTSxJQUFJbGEsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCZCxLQUFLaWxGLGFBQWNua0YsR0FBSXVpQixLQUFNMmhFLEVBQUdDLGFBQWNua0YsR0FBS2thLEdBSXBELE9BQU9oYixLQUlSc21CLE9BQVEwK0QsR0FFUCxJQUFNLElBQUlsa0YsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCLElBQU9kLEtBQUtpbEYsYUFBY25rRixHQUFJd2xCLE9BQVEwK0QsRUFBR0MsYUFBY25rRixJQUV0RCxPQUFPLEVBTVQsT0FBTyxFQUlSa2pCLEtBQU1naEUsR0FFTCxPQUFPaGxGLEtBQUsyTSxJQUFLcTRFLEVBQUdDLGNBSXJCbGhFLFFBRUMsT0FBTyxJQUFJL2pCLEtBQUsySSxhQUFjcWIsS0FBTWhrQixNQUlyQ3VtQixVQUFXN0QsRUFBTzhELEVBQVMsR0FFMUIsTUFBTXkrRCxFQUFlamxGLEtBQUtpbEYsYUFFMUIsSUFBTSxJQUFJbmtGLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUV2Qm1rRixFQUFjbmtGLEdBQUl5bEIsVUFBVzdELEVBQU84RCxFQUFlLEVBQUoxbEIsR0FJaEQsT0FBT2QsS0FJUnltQixRQUFTL0QsRUFBUSxHQUFJOEQsRUFBUyxHQUU3QixNQUFNeStELEVBQWVqbEYsS0FBS2lsRixhQUUxQixJQUFNLElBQUlua0YsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBRXZCbWtGLEVBQWNua0YsR0FBSTJsQixRQUFTL0QsRUFBTzhELEVBQWUsRUFBSjFsQixHQUk5QyxPQUFPNGhCLEVBTVI2TSxrQkFBbUIwTixFQUFRdzdGLEdBSTFCLE1BQU05M0gsRUFBSXM4QixFQUFPdDhCLEVBQUdFLEVBQUlvOEIsRUFBT3A4QixFQUFHSyxFQUFJKzdCLEVBQU8vN0IsRUFHN0N1M0gsRUFBUyxHQUFNLFFBR2ZBLEVBQVMsR0FBTSxRQUFXNTNILEVBQzFCNDNILEVBQVMsR0FBTSxRQUFXdjNILEVBQzFCdTNILEVBQVMsR0FBTSxRQUFXOTNILEVBRzFCODNILEVBQVMsR0FBTSxTQUFXOTNILEVBQUlFLEVBQzlCNDNILEVBQVMsR0FBTSxTQUFXNTNILEVBQUlLLEVBQzlCdTNILEVBQVMsR0FBTSxTQUFhLEVBQUl2M0gsRUFBSUEsRUFBSSxHQUN4Q3UzSCxFQUFTLEdBQU0sU0FBVzkzSCxFQUFJTyxFQUM5QnUzSCxFQUFTLEdBQU0sU0FBYTkzSCxFQUFJQSxFQUFJRSxFQUFJQSxJQU0xQ3MzSCxHQUFvQjU0SCxVQUFVbTVILHVCQUF3QixFQUV0RCxNQUFNQyxXQUFtQjVCLEdBRXhCcHVILFlBQWFxOEUsRUFBSyxJQUFJbXpDLEdBQXVCdHpDLEVBQVksR0FFeERwekQsV0FBT2pTLEVBQVdxbEUsR0FFbEI3a0YsS0FBS2dsRixHQUFLQSxFQUlYaGhFLEtBQU0rSSxHQU1MLE9BSkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBS2dsRixHQUFHaGhFLEtBQU0rSSxFQUFPaTRELElBRWRobEYsS0FJUmkyRyxTQUFVQyxHQUtULE9BSEFsMkcsS0FBSzZrRixVQUFZcXhCLEVBQUtyeEIsVUFDdEI3a0YsS0FBS2dsRixHQUFHeitELFVBQVcydkYsRUFBS2x4QixJQUVqQmhsRixLQUlSNEwsT0FBUXlrQixHQUVQLE1BQU1yWSxFQUFPeVosTUFBTTdsQixPQUFReWtCLEdBSTNCLE9BRkFyWSxFQUFLZ25CLE9BQU9nbUQsR0FBS2hsRixLQUFLZ2xGLEdBQUd2K0QsVUFFbEJ6TyxHQU1UMmdILEdBQVdwNUgsVUFBVXdsRixjQUFlLEVBb3ZEcEMsSUFBSThmLElBajRDSixjQUFzQ3ZtRCxHQUVyQzMxQyxjQUVDOG9CLFFBRUF6eEIsS0FBSzZXLEtBQU8sMEJBQ1o3VyxLQUFLc3RFLGNBQWdCdjlELEVBQUFBLEVBSXRCaVUsS0FBTStJLEdBTUwsT0FKQTBFLE1BQU16TixLQUFNK0ksR0FFWi9zQixLQUFLc3RFLGNBQWdCdmdELEVBQU91Z0QsY0FFckJ0dEUsS0FJUitqQixRQUVDLE9BQU8sSUFBSS9qQixLQUFLMkksYUFBY3FiLEtBQU1oa0IsTUFJckM0TCxTQUVDLE1BQU1vTSxFQUFPeVosTUFBTTdsQixPQUFRNUwsTUFNM0IsT0FKQWdZLEVBQUtzMUQsY0FBZ0J0dEUsS0FBS3N0RSxjQUUxQnQxRCxFQUFLNG9ELDJCQUE0QixFQUUxQjVvRCxLQU1lelksVUFBVXFoRSwyQkFBNEIsRUF5dkM5RCxjQUFnQzh5RCxHQUUvQi9xSCxZQUFhZ3JILEdBRVpsaUcsTUFBT2tpRyxHQUUyQixvQkFBdEI1K0csbUJBRVhwUyxRQUFRdWhCLEtBQU0sK0RBSU8sb0JBQVZoTyxPQUVYdlQsUUFBUXVoQixLQUFNLG1EQUlmbGtCLEtBQUs4VixRQUFVLENBQUVpYyxpQkFBa0IsUUFJcENyWSxXQUFZNUQsR0FJWCxPQUZBOVYsS0FBSzhWLFFBQVVBLEVBRVI5VixLQUlSZzBILEtBQU1sOEcsRUFBS3c2RyxFQUFRQyxFQUFZQyxRQUVqQmh6RyxJQUFSMUgsSUFBb0JBLEVBQU0sU0FFWjBILElBQWR4ZixLQUFLa2EsT0FBcUJwQyxFQUFNOVgsS0FBS2thLEtBQU9wQyxHQUVqREEsRUFBTTlYLEtBQUsyekgsUUFBUVQsV0FBWXA3RyxHQUUvQixNQUFNcXRDLEVBQVFubEQsS0FFUnF2RCxFQUFTOGlFLEdBQU12N0csSUFBS2tCLEdBRTFCLFFBQWdCMEgsSUFBWDZ2QyxFQVlKLE9BVkFsSyxFQUFNd3VFLFFBQVFaLFVBQVdqN0csR0FFekJyVixZQUFZLFdBRU42dkgsR0FBU0EsRUFBUWpqRSxHQUV0QmxLLEVBQU13dUUsUUFBUVgsUUFBU2w3RyxLQUVyQixHQUVJdTNDLEVBSVIsTUFBTXVwRSxFQUFlLEdBQ3JCQSxFQUFhL0QsWUFBcUMsY0FBckI3MEgsS0FBSzR6SCxZQUFnQyxjQUFnQixVQUNsRmdGLEVBQWFqRSxRQUFVMzBILEtBQUsrekgsY0FFNUI3OUcsTUFBTzRCLEVBQUs4Z0gsR0FBZXoySCxNQUFNLFNBQVcwMkgsR0FFM0MsT0FBT0EsRUFBSTlDLFVBRVI1ekgsTUFBTSxTQUFXNHpILEdBRXBCLE9BQU9oaEgsa0JBQW1CZ2hILEVBQU03MkgsT0FBTzRFLE9BQVFxaEQsRUFBTXJ2QyxRQUFTLENBQUVnakgscUJBQXNCLGFBRW5GMzJILE1BQU0sU0FBVzQySCxHQUVwQjVHLEdBQU1sdUcsSUFBS25NLEVBQUtpaEgsR0FFWHpHLEdBQVNBLEVBQVF5RyxHQUV0QjV6RSxFQUFNd3VFLFFBQVFYLFFBQVNsN0csTUFFcEJwVSxPQUFPLFNBQVdyRSxHQUVoQm16SCxHQUFVQSxFQUFTbnpILEdBRXhCOGxELEVBQU13dUUsUUFBUVYsVUFBV243RyxHQUN6QnF0QyxFQUFNd3VFLFFBQVFYLFFBQVNsN0csTUFJeEJxdEMsRUFBTXd1RSxRQUFRWixVQUFXajdHLEtBTVR2WSxVQUFVeTVILHFCQUFzQixFQTBCbEQsTUFBTUMsV0FBb0J2RixHQUV6Qi9xSCxZQUFhZ3JILEdBRVpsaUcsTUFBT2tpRyxHQUlSSyxLQUFNbDhHLEVBQUt3NkcsRUFBUUMsRUFBWUMsR0FFOUIsTUFBTXJ0RSxFQUFRbmxELEtBRVJzekgsRUFBUyxJQUFJa0IsR0FBWXgwSCxLQUFLMnpILFNBQ3BDTCxFQUFPK0MsZ0JBQWlCLGVBQ3hCL0MsRUFBT2MsUUFBU3AwSCxLQUFLa2EsTUFDckJvNUcsRUFBT2dCLGlCQUFrQnQwSCxLQUFLK3pILGVBQzlCVCxFQUFPYSxtQkFBb0JuMEgsS0FBSzZ6SCxpQkFDaENQLEVBQU9VLEtBQU1sOEcsR0FBSyxTQUFXM0wsR0FFNUIsSUFJQyxNQUFNK3NILEVBQWEvc0gsRUFBT0wsTUFBTyxTQXpDakIwVCxJQUFicWxGLEtBRUpBLEdBQVcsSUFBTW5sRyxPQUFPeTVILGNBQWdCejVILE9BQU8wNUgscUJBSXpDdjBCLElBc0NHdzBCLGdCQUFpQkgsR0FBWSxTQUFXSSxHQUUvQ2hILEVBQVFnSCxNQUlSLE1BQVFqNkgsR0FFSm16SCxFQUVKQSxFQUFTbnpILEdBSVRzRCxRQUFRQyxNQUFPdkQsR0FJaEI4bEQsRUFBTXd1RSxRQUFRVixVQUFXbjdHLE1BSXhCeTZHLEVBQVlDLEtBTWpCLGNBQW1DbUcsR0FFbENod0gsWUFBYTJ5RCxFQUFVQyxFQUFhc3BCLEVBQVksR0FFL0NwekQsV0FBT2pTLEVBQVdxbEUsR0FFbEIsTUFBTS8xRCxHQUFTLElBQUk5QixJQUFRcmdCLElBQUsydUQsR0FDMUJ2c0MsR0FBUyxJQUFJL0IsSUFBUXJnQixJQUFLNHVELEdBRTFCZytELEVBQU0sSUFBSTErRixHQUFTL0wsRUFBT3RyQixFQUFHc3JCLEVBQU9sdkIsRUFBR2t2QixFQUFPandCLEdBQzlDMjZILEVBQVMsSUFBSTMrRixHQUFTOUwsRUFBT3ZyQixFQUFHdXJCLEVBQU9udkIsRUFBR212QixFQUFPbHdCLEdBR2pEczRHLEVBQUt0M0csS0FBSzJsQixLQUFNM2xCLEtBQUtvSCxJQUNyQmt4QixFQUFLZy9FLEVBQUt0M0csS0FBSzJsQixLQUFNLEtBRTNCeGxCLEtBQUtnbEYsR0FBR0MsYUFBYyxHQUFJamhFLEtBQU11MUcsR0FBTXQxRyxJQUFLdTFHLEdBQVM5MEcsZUFBZ0J5eUYsR0FDcEVuM0csS0FBS2dsRixHQUFHQyxhQUFjLEdBQUlqaEUsS0FBTXUxRyxHQUFNajFHLElBQUtrMUcsR0FBUzkwRyxlQUFnQnlULE1BTWpENTRCLFVBQVVrNkgsd0JBQXlCLEVBRXhELGNBQWdDZCxHQUUvQmh3SCxZQUFhMUMsRUFBTzQrRSxFQUFZLEdBRS9CcHpELFdBQU9qUyxFQUFXcWxFLEdBRWxCLE1BQU0vMUQsR0FBUyxJQUFJOUIsSUFBUXJnQixJQUFLMUcsR0FHaENqRyxLQUFLZ2xGLEdBQUdDLGFBQWMsR0FBSXQ0RSxJQUFLbWlCLEVBQU90ckIsRUFBR3NyQixFQUFPbHZCLEVBQUdrdkIsRUFBT2p3QixHQUFJNmxCLGVBQWdCLEVBQUk3a0IsS0FBSzJsQixLQUFNM2xCLEtBQUtvSCxPQU1sRjFILFVBQVVtNkgscUJBQXNCLEVBNDFCbEQsTUFBTUMsR0FFTGh4SCxZQUFhaXhILEVBQVMzSCxFQUFVbkosR0FLL0IsSUFBSStRLEVBQ0hDLEVBQ0FDLEVBa0JELE9BdkJBLzVILEtBQUs0NUgsUUFBVUEsRUFDZjU1SCxLQUFLOG9ILFVBQVlBLEVBc0JSbUosR0FFUixJQUFLLGFBQ0o0SCxFQUFjNzVILEtBQUtnNkgsT0FDbkJGLEVBQXNCOTVILEtBQUtpNkgsZUFDM0JGLEVBQWMvNUgsS0FBS2s2SCwrQkFFbkJsNkgsS0FBS21NLE9BQVMsSUFBSTBmLGFBQTBCLEVBQVppOUYsR0FDaEM5b0gsS0FBS202SCxXQUFhLEVBQ2xCLE1BRUQsSUFBSyxTQUNMLElBQUssT0FDSk4sRUFBYzc1SCxLQUFLbzZILFFBSW5CTixFQUFzQjk1SCxLQUFLbzZILFFBRTNCTCxFQUFjLzVILEtBQUtxNkgsMEJBRW5CcjZILEtBQUttTSxPQUFTLElBQUk3TSxNQUFtQixFQUFad3BILEdBQ3pCLE1BRUQsUUFDQytRLEVBQWM3NUgsS0FBS3M2SCxNQUNuQlIsRUFBc0I5NUgsS0FBS3U2SCxjQUMzQlIsRUFBYy81SCxLQUFLdzZILDRCQUVuQng2SCxLQUFLbU0sT0FBUyxJQUFJMGYsYUFBMEIsRUFBWmk5RixHQUlsQzlvSCxLQUFLeTZILGlCQUFtQlosRUFDeEI3NUgsS0FBSzA2SCx5QkFBMkJaLEVBQ2hDOTVILEtBQUsyNkgsYUFBZVosRUFDcEIvNUgsS0FBSzQ2SCxXQUFhLEVBQ2xCNTZILEtBQUs2NkgsVUFBWSxFQUVqQjc2SCxLQUFLODZILGlCQUFtQixFQUN4Qjk2SCxLQUFLKzZILHlCQUEyQixFQUVoQy82SCxLQUFLZzdILFNBQVcsRUFDaEJoN0gsS0FBS2k3SCxlQUFpQixFQUt2QkMsV0FBWUMsRUFBVzN2RCxHQUt0QixNQUFNci9ELEVBQVNuTSxLQUFLbU0sT0FDbkJrMkMsRUFBU3JpRCxLQUFLOG9ILFVBQ2R0aUcsRUFBUzIwRyxFQUFZOTRFLEVBQVNBLEVBRS9CLElBQUkrNEUsRUFBZ0JwN0gsS0FBSzg2SCxpQkFFekIsR0FBdUIsSUFBbEJNLEVBQXNCLENBSTFCLElBQU0sSUFBSXQ2SCxFQUFJLEVBQUdBLElBQU11aEQsSUFBV3ZoRCxFQUVqQ3FMLEVBQVFxYSxFQUFTMWxCLEdBQU1xTCxFQUFRckwsR0FJaENzNkgsRUFBZ0I1dkQsTUFFVixDQUlONHZELEdBQWlCNXZELEVBQ2pCLE1BQU02dkQsRUFBTTd2RCxFQUFTNHZELEVBQ3JCcDdILEtBQUt5NkgsaUJBQWtCdHVILEVBQVFxYSxFQUFRLEVBQUc2MEcsRUFBS2g1RSxHQUloRHJpRCxLQUFLODZILGlCQUFtQk0sRUFLekJFLG1CQUFvQjl2RCxHQUVuQixNQUFNci9ELEVBQVNuTSxLQUFLbU0sT0FDbkJrMkMsRUFBU3JpRCxLQUFLOG9ILFVBQ2R0aUcsRUFBUzY3QixFQUFTcmlELEtBQUs2NkgsVUFFZSxJQUFsQzc2SCxLQUFLKzZILDBCQUlULzZILEtBQUsyNkgsZUFNTjM2SCxLQUFLMDZILHlCQUEwQnZ1SCxFQUFRcWEsRUFBUSxFQUFHZ2xELEVBQVFucEIsR0FDMURyaUQsS0FBSys2SCwwQkFBNEJ2dkQsRUFLbENyaEUsTUFBT2d4SCxHQUVOLE1BQU05NEUsRUFBU3JpRCxLQUFLOG9ILFVBQ25CMzhHLEVBQVNuTSxLQUFLbU0sT0FDZHFhLEVBQVMyMEcsRUFBWTk0RSxFQUFTQSxFQUU5Qm1wQixFQUFTeHJFLEtBQUs4NkgsaUJBQ2RTLEVBQWlCdjdILEtBQUsrNkgseUJBRXRCbkIsRUFBVTU1SCxLQUFLNDVILFFBS2hCLEdBSEE1NUgsS0FBSzg2SCxpQkFBbUIsRUFDeEI5NkgsS0FBSys2SCx5QkFBMkIsRUFFM0J2dkQsRUFBUyxFQUFJLENBSWpCLE1BQU1nd0QsRUFBc0JuNUUsRUFBU3JpRCxLQUFLNDZILFdBRTFDNTZILEtBQUt5NkgsaUJBQ0p0dUgsRUFBUXFhLEVBQVFnMUcsRUFBcUIsRUFBSWh3RCxFQUFRbnBCLEdBSTlDazVFLEVBQWlCLEdBSXJCdjdILEtBQUswNkgseUJBQTBCdnVILEVBQVFxYSxFQUFReG1CLEtBQUs2NkgsVUFBWXg0RSxFQUFRLEVBQUdBLEdBSTVFLElBQU0sSUFBSXZoRCxFQUFJdWhELEVBQVFoakQsRUFBSWdqRCxFQUFTQSxFQUFRdmhELElBQU16QixJQUFNeUIsRUFFdEQsR0FBS3FMLEVBQVFyTCxLQUFRcUwsRUFBUXJMLEVBQUl1aEQsR0FBVyxDQUkzQ3UzRSxFQUFRNXFELFNBQVU3aUUsRUFBUXFhLEdBQzFCLE9BU0hpMUcsb0JBRUMsTUFBTTdCLEVBQVU1NUgsS0FBSzQ1SCxRQUVmenRILEVBQVNuTSxLQUFLbU0sT0FDbkJrMkMsRUFBU3JpRCxLQUFLOG9ILFVBRWQwUyxFQUFzQm41RSxFQUFTcmlELEtBQUs0NkgsV0FFckNoQixFQUFROEIsU0FBVXZ2SCxFQUFRcXZILEdBRzFCLElBQU0sSUFBSTE2SCxFQUFJdWhELEVBQVFoakQsRUFBSW04SCxFQUFxQjE2SCxJQUFNekIsSUFBTXlCLEVBRTFEcUwsRUFBUXJMLEdBQU1xTCxFQUFRcXZILEVBQXdCMTZILEVBQUl1aEQsR0FLbkRyaUQsS0FBSzI2SCxlQUVMMzZILEtBQUs4NkgsaUJBQW1CLEVBQ3hCOTZILEtBQUsrNkgseUJBQTJCLEVBS2pDWSx1QkFFQyxNQUFNSCxFQUF1QyxFQUFqQng3SCxLQUFLOG9ILFVBQ2pDOW9ILEtBQUs0NUgsUUFBUTVxRCxTQUFVaHZFLEtBQUttTSxPQUFRcXZILEdBSXJDaEIsOEJBRUMsTUFBTXBRLEVBQWFwcUgsS0FBSzY2SCxVQUFZNzZILEtBQUs4b0gsVUFDbkN1QixFQUFXRCxFQUFhcHFILEtBQUs4b0gsVUFFbkMsSUFBTSxJQUFJaG9ILEVBQUlzcEgsRUFBWXRwSCxFQUFJdXBILEVBQVV2cEgsSUFFdkNkLEtBQUttTSxPQUFRckwsR0FBTSxFQU1yQm81SCxpQ0FFQ2w2SCxLQUFLdzZILDhCQUNMeDZILEtBQUttTSxPQUFRbk0sS0FBSzY2SCxVQUFZNzZILEtBQUs4b0gsVUFBWSxHQUFNLEVBSXREdVIsNEJBRUMsTUFBTWpRLEVBQWFwcUgsS0FBSzQ2SCxXQUFhNTZILEtBQUs4b0gsVUFDcEM4UyxFQUFjNTdILEtBQUs2NkgsVUFBWTc2SCxLQUFLOG9ILFVBRTFDLElBQU0sSUFBSWhvSCxFQUFJLEVBQUdBLEVBQUlkLEtBQUs4b0gsVUFBV2hvSCxJQUVwQ2QsS0FBS21NLE9BQVF5dkgsRUFBYzk2SCxHQUFNZCxLQUFLbU0sT0FBUWkrRyxFQUFhdHBILEdBUzdEczVILFFBQVNqdUgsRUFBUXNxQixFQUFXeXhGLEVBQVdub0gsRUFBR3NpRCxHQUV6QyxHQUFLdGlELEdBQUssR0FFVCxJQUFNLElBQUllLEVBQUksRUFBR0EsSUFBTXVoRCxJQUFXdmhELEVBRWpDcUwsRUFBUXNxQixFQUFZMzFCLEdBQU1xTCxFQUFRKzdHLEVBQVlwbkgsR0FRakRrNUgsT0FBUTd0SCxFQUFRc3FCLEVBQVd5eEYsRUFBV25vSCxHQUVyQ2syQixHQUFXODVGLFVBQVc1akgsRUFBUXNxQixFQUFXdHFCLEVBQVFzcUIsRUFBV3RxQixFQUFRKzdHLEVBQVdub0gsR0FJaEZrNkgsZUFBZ0I5dEgsRUFBUXNxQixFQUFXeXhGLEVBQVdub0gsRUFBR3NpRCxHQUVoRCxNQUFNdzVFLEVBQWE3N0gsS0FBS202SCxXQUFhOTNFLEVBR3JDcHNCLEdBQVcwMEYsd0JBQXlCeCtHLEVBQVEwdkgsRUFBWTF2SCxFQUFRc3FCLEVBQVd0cUIsRUFBUSs3RyxHQUduRmp5RixHQUFXODVGLFVBQVc1akgsRUFBUXNxQixFQUFXdHFCLEVBQVFzcUIsRUFBV3RxQixFQUFRMHZILEVBQVk5N0gsR0FJakZ1NkgsTUFBT251SCxFQUFRc3FCLEVBQVd5eEYsRUFBV25vSCxFQUFHc2lELEdBRXZDLE1BQU0vK0MsRUFBSSxFQUFJdkQsRUFFZCxJQUFNLElBQUllLEVBQUksRUFBR0EsSUFBTXVoRCxJQUFXdmhELEVBQUksQ0FFckMsTUFBTUUsRUFBSXkxQixFQUFZMzFCLEVBRXRCcUwsRUFBUW5MLEdBQU1tTCxFQUFRbkwsR0FBTXNDLEVBQUk2SSxFQUFRKzdHLEVBQVlwbkgsR0FBTWYsR0FNNUR3NkgsY0FBZXB1SCxFQUFRc3FCLEVBQVd5eEYsRUFBV25vSCxFQUFHc2lELEdBRS9DLElBQU0sSUFBSXZoRCxFQUFJLEVBQUdBLElBQU11aEQsSUFBV3ZoRCxFQUFJLENBRXJDLE1BQU1FLEVBQUl5MUIsRUFBWTMxQixFQUV0QnFMLEVBQVFuTCxHQUFNbUwsRUFBUW5MLEdBQU1tTCxFQUFRKzdHLEVBQVlwbkgsR0FBTWYsSUFTekQsTUFDTSs3SCxHQUFjLElBQUlweUgsT0FBUSxrQkFBZ0MsS0FLMURxeUgsR0FBWSxtQkFDWkMsR0FBaUIsS0FQSSxnQkFPc0I1a0QsUUFBUyxNQUFPLElBQU8sSUFJbEU2a0QsR0FBZSxrQkFBa0JsdkcsT0FBT3FxRCxRQUFTLEtBQU0ya0QsSUFHdkRHLEdBQVUsV0FBV252RyxPQUFPcXFELFFBQVMsT0FBUTRrRCxJQUk3Q0csR0FBWSw0QkFBNEJwdkcsT0FBT3FxRCxRQUFTLEtBQU0ya0QsSUFJOURLLEdBQWMsdUJBQXVCcnZHLE9BQU9xcUQsUUFBUyxLQUFNMmtELElBRTNETSxHQUFXLElBQUkzeUgsT0FDbEIsSUFDQXV5SCxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBLEtBR0dFLEdBQXdCLENBQUUsV0FBWSxZQUFhLFNBb0V6RCxNQUFNQyxHQUVMNXpILFlBQWE2ekgsRUFBVXRpSCxFQUFNdWlILEdBRTVCejhILEtBQUtrYSxLQUFPQSxFQUNabGEsS0FBS3k4SCxXQUFhQSxHQUFjRixHQUFnQkcsZUFBZ0J4aUgsR0FFaEVsYSxLQUFLMjhILEtBQU9KLEdBQWdCSyxTQUFVSixFQUFVeDhILEtBQUt5OEgsV0FBV0ksV0FBY0wsRUFFOUV4OEgsS0FBS3c4SCxTQUFXQSxFQUdoQng4SCxLQUFLMDdILFNBQVcxN0gsS0FBSzg4SCxrQkFDckI5OEgsS0FBS2d2RSxTQUFXaHZFLEtBQUsrOEgsa0JBS3RCeHRHLGNBQWV5dEcsRUFBTTlpSCxFQUFNdWlILEdBRTFCLE9BQVNPLEdBQVFBLEVBQUtDLHVCQU1kLElBQUlWLEdBQWdCVyxVQUFXRixFQUFNOWlILEVBQU11aUgsR0FKM0MsSUFBSUYsR0FBaUJTLEVBQU05aUgsRUFBTXVpSCxHQWlCMUNsdEcsd0JBQXlCbFosR0FFeEIsT0FBT0EsRUFBSytnRSxRQUFTLE1BQU8sS0FBTUEsUUFBUzBrRCxHQUFhLElBSXpEdnNHLHNCQUF1QitoRyxHQUV0QixNQUFNNkwsRUFBVWQsR0FBUzF1RyxLQUFNMmpHLEdBRS9CLEdBQWlCLE9BQVo2TCxFQUVKLE1BQU0sSUFBSXI5SCxNQUFPLDRDQUE4Q3d4SCxHQUloRSxNQUFNOEwsRUFBVSxDQUVmUCxTQUFVTSxFQUFTLEdBQ25CRSxXQUFZRixFQUFTLEdBQ3JCRyxZQUFhSCxFQUFTLEdBQ3RCM0wsYUFBYzJMLEVBQVMsR0FDdkJJLGNBQWVKLEVBQVMsSUFHbkJLLEVBQVVKLEVBQVFQLFVBQVlPLEVBQVFQLFNBQVNobkgsWUFBYSxLQUVsRSxRQUFpQjJKLElBQVpnK0csSUFBdUMsSUFBZEEsRUFBa0IsQ0FFL0MsTUFBTUgsRUFBYUQsRUFBUVAsU0FBU2puSCxVQUFXNG5ILEVBQVUsSUFNRixJQUFsRGxCLEdBQXNCM3lILFFBQVMwekgsS0FFbkNELEVBQVFQLFNBQVdPLEVBQVFQLFNBQVNqbkgsVUFBVyxFQUFHNG5ILEdBQ2xESixFQUFRQyxXQUFhQSxHQU12QixHQUE4QixPQUF6QkQsRUFBUTVMLGNBQXlELElBQWhDNEwsRUFBUTVMLGFBQWExeUgsT0FFMUQsTUFBTSxJQUFJZ0IsTUFBTywrREFBaUV3eEgsR0FJbkYsT0FBTzhMLEVBSVI3dEcsZ0JBQWlCeXRHLEVBQU1ILEdBRXRCLFFBQWtCcjlHLElBQWJxOUcsR0FBdUMsS0FBYkEsR0FBZ0MsTUFBYkEsSUFBbUMsSUFBZkEsR0FBb0JBLElBQWFHLEVBQUszbUgsTUFBUXdtSCxJQUFhRyxFQUFLOXNHLEtBRXJJLE9BQU84c0csRUFLUixHQUFLQSxFQUFLNXFGLFNBQVcsQ0FFcEIsTUFBTXFyRixFQUFPVCxFQUFLNXFGLFNBQVNzckYsY0FBZWIsR0FFMUMsUUFBY3I5RyxJQUFUaStHLEVBRUosT0FBT0EsRUFPVCxHQUFLVCxFQUFLNzhGLFNBQVcsQ0FFcEIsTUFBTXc5RixFQUFvQixTQUFXeDlGLEdBRXBDLElBQU0sSUFBSXIvQixFQUFJLEVBQUdBLEVBQUlxL0IsRUFBU3JoQyxPQUFRZ0MsSUFBTyxDQUU1QyxNQUFNODhILEVBQVl6OUYsRUFBVXIvQixHQUU1QixHQUFLODhILEVBQVV2bkgsT0FBU3dtSCxHQUFZZSxFQUFVMXRHLE9BQVMyc0csRUFFdEQsT0FBT2UsRUFJUixNQUFNdjFDLEVBQVNzMUMsRUFBbUJDLEVBQVV6OUYsVUFFNUMsR0FBS2tvRCxFQUFTLE9BQU9BLEVBSXRCLE9BQU8sTUFJRncxQyxFQUFjRixFQUFtQlgsRUFBSzc4RixVQUU1QyxHQUFLMDlGLEVBRUosT0FBT0EsRUFNVCxPQUFPLEtBS1JDLHlCQUNBQyx5QkFJQUMsaUJBQWtCN3hILEVBQVFxYSxHQUV6QnJhLEVBQVFxYSxHQUFXeG1CLEtBQUtpK0gsYUFBY2orSCxLQUFLd3hILGNBSTVDME0sZ0JBQWlCL3hILEVBQVFxYSxHQUV4QixNQUFNdUcsRUFBUy9zQixLQUFLbStILGlCQUVwQixJQUFNLElBQUlyOUgsRUFBSSxFQUFHbkMsRUFBSW91QixFQUFPanVCLE9BQVFnQyxJQUFNbkMsSUFBTW1DLEVBRS9DcUwsRUFBUXFhLEtBQWN1RyxFQUFRanNCLEdBTWhDczlILHVCQUF3Qmp5SCxFQUFRcWEsR0FFL0JyYSxFQUFRcWEsR0FBV3htQixLQUFLbStILGlCQUFrQm4rSCxLQUFLdTlILGVBSWhEYyxrQkFBbUJseUgsRUFBUXFhLEdBRTFCeG1CLEtBQUttK0gsaUJBQWlCMTNHLFFBQVN0YSxFQUFRcWEsR0FNeEM4M0csaUJBQWtCbnlILEVBQVFxYSxHQUV6QnhtQixLQUFLaStILGFBQWNqK0gsS0FBS3d4SCxjQUFpQnJsSCxFQUFRcWEsR0FJbEQrM0csZ0NBQWlDcHlILEVBQVFxYSxHQUV4Q3htQixLQUFLaStILGFBQWNqK0gsS0FBS3d4SCxjQUFpQnJsSCxFQUFRcWEsR0FDakR4bUIsS0FBS2krSCxhQUFhN3RHLGFBQWMsRUFJakNvdUcsMkNBQTRDcnlILEVBQVFxYSxHQUVuRHhtQixLQUFLaStILGFBQWNqK0gsS0FBS3d4SCxjQUFpQnJsSCxFQUFRcWEsR0FDakR4bUIsS0FBS2krSCxhQUFhbHdGLHdCQUF5QixFQU01QzB3RixnQkFBaUJ0eUgsRUFBUXFhLEdBRXhCLE1BQU1rNEcsRUFBTzErSCxLQUFLbStILGlCQUVsQixJQUFNLElBQUlyOUgsRUFBSSxFQUFHbkMsRUFBSSsvSCxFQUFLNS9ILE9BQVFnQyxJQUFNbkMsSUFBTW1DLEVBRTdDNDlILEVBQU01OUgsR0FBTXFMLEVBQVFxYSxLQU10Qm00RywrQkFBZ0N4eUgsRUFBUXFhLEdBRXZDLE1BQU1rNEcsRUFBTzErSCxLQUFLbStILGlCQUVsQixJQUFNLElBQUlyOUgsRUFBSSxFQUFHbkMsRUFBSSsvSCxFQUFLNS9ILE9BQVFnQyxJQUFNbkMsSUFBTW1DLEVBRTdDNDlILEVBQU01OUgsR0FBTXFMLEVBQVFxYSxLQUlyQnhtQixLQUFLaStILGFBQWE3dEcsYUFBYyxFQUlqQ3d1RywwQ0FBMkN6eUgsRUFBUXFhLEdBRWxELE1BQU1rNEcsRUFBTzErSCxLQUFLbStILGlCQUVsQixJQUFNLElBQUlyOUgsRUFBSSxFQUFHbkMsRUFBSSsvSCxFQUFLNS9ILE9BQVFnQyxJQUFNbkMsSUFBTW1DLEVBRTdDNDlILEVBQU01OUgsR0FBTXFMLEVBQVFxYSxLQUlyQnhtQixLQUFLaStILGFBQWFsd0Ysd0JBQXlCLEVBTTVDOHdGLHVCQUF3QjF5SCxFQUFRcWEsR0FFL0J4bUIsS0FBS20rSCxpQkFBa0JuK0gsS0FBS3U5SCxlQUFrQnB4SCxFQUFRcWEsR0FJdkRzNEcsc0NBQXVDM3lILEVBQVFxYSxHQUU5Q3htQixLQUFLbStILGlCQUFrQm4rSCxLQUFLdTlILGVBQWtCcHhILEVBQVFxYSxHQUN0RHhtQixLQUFLaStILGFBQWE3dEcsYUFBYyxFQUlqQzJ1RyxpREFBa0Q1eUgsRUFBUXFhLEdBRXpEeG1CLEtBQUttK0gsaUJBQWtCbitILEtBQUt1OUgsZUFBa0JweEgsRUFBUXFhLEdBQ3REeG1CLEtBQUtpK0gsYUFBYWx3Rix3QkFBeUIsRUFNNUNpeEYsb0JBQXFCN3lILEVBQVFxYSxHQUU1QnhtQixLQUFLbStILGlCQUFpQjUzRyxVQUFXcGEsRUFBUXFhLEdBSTFDeTRHLG1DQUFvQzl5SCxFQUFRcWEsR0FFM0N4bUIsS0FBS20rSCxpQkFBaUI1M0csVUFBV3BhLEVBQVFxYSxHQUN6Q3htQixLQUFLaStILGFBQWE3dEcsYUFBYyxFQUlqQzh1Ryw4Q0FBK0MveUgsRUFBUXFhLEdBRXREeG1CLEtBQUttK0gsaUJBQWlCNTNHLFVBQVdwYSxFQUFRcWEsR0FDekN4bUIsS0FBS2krSCxhQUFhbHdGLHdCQUF5QixFQUk1Qyt1RixrQkFBbUJxQyxFQUFhMzRHLEdBRS9CeG1CLEtBQUsyd0csT0FDTDN3RyxLQUFLMDdILFNBQVV5RCxFQUFhMzRHLEdBSTdCdTJHLGtCQUFtQnFDLEVBQWE1NEcsR0FFL0J4bUIsS0FBSzJ3RyxPQUNMM3dHLEtBQUtndkUsU0FBVW93RCxFQUFhNTRHLEdBSzdCbXFGLE9BRUMsSUFBSXN0QixFQUFlaitILEtBQUsyOEgsS0FDeEIsTUFBTUYsRUFBYXo4SCxLQUFLeThILFdBRWxCWSxFQUFhWixFQUFXWSxXQUN4QjdMLEVBQWVpTCxFQUFXakwsYUFDaEMsSUFBSStMLEVBQWdCZCxFQUFXYyxjQWUvQixHQWJPVSxJQUVOQSxFQUFlMUIsR0FBZ0JLLFNBQVU1OEgsS0FBS3c4SCxTQUFVQyxFQUFXSSxXQUFjNzhILEtBQUt3OEgsU0FFdEZ4OEgsS0FBSzI4SCxLQUFPc0IsR0FLYmorSCxLQUFLMDdILFNBQVcxN0gsS0FBSzg5SCxzQkFDckI5OUgsS0FBS2d2RSxTQUFXaHZFLEtBQUsrOUgsdUJBR2RFLEVBR04sWUFEQXQ3SCxRQUFRQyxNQUFPLDJEQUE2RDVDLEtBQUtrYSxLQUFPLHlCQUt6RixHQUFLbWpILEVBQWEsQ0FFakIsSUFBSUMsRUFBY2IsRUFBV2EsWUFHN0IsT0FBU0QsR0FFUixJQUFLLFlBRUosSUFBT1ksRUFBYTVyRixTQUduQixZQURBMXZDLFFBQVFDLE1BQU8sb0ZBQXFGNUMsTUFLckcsSUFBT2krSCxFQUFhNXJGLFNBQVN0QixVQUc1QixZQURBcHVDLFFBQVFDLE1BQU8sOEdBQStHNUMsTUFLL0hpK0gsRUFBZUEsRUFBYTVyRixTQUFTdEIsVUFFckMsTUFFRCxJQUFLLFFBRUosSUFBT2t0RixFQUFhN3JGLFNBR25CLFlBREF6dkMsUUFBUUMsTUFBTyxpRkFBa0Y1QyxNQVFsR2krSCxFQUFlQSxFQUFhN3JGLFNBQVNpdUMsTUFHckMsSUFBTSxJQUFJdi9FLEVBQUksRUFBR0EsRUFBSW05SCxFQUFhbi9ILE9BQVFnQyxJQUV6QyxHQUFLbTlILEVBQWNuOUgsR0FBSXVWLE9BQVNpbkgsRUFBYyxDQUU3Q0EsRUFBY3g4SCxFQUNkLE1BTUYsTUFFRCxRQUVDLFFBQW9DMGUsSUFBL0J5K0csRUFBY1osR0FHbEIsWUFEQTE2SCxRQUFRQyxNQUFPLHVFQUF3RTVDLE1BS3hGaStILEVBQWVBLEVBQWNaLEdBSy9CLFFBQXFCNzlHLElBQWhCODlHLEVBQTRCLENBRWhDLFFBQXFDOTlHLElBQWhDeStHLEVBQWNYLEdBR2xCLFlBREEzNkgsUUFBUUMsTUFBTyx3RkFBeUY1QyxLQUFNaStILEdBSy9HQSxFQUFlQSxFQUFjWCxJQU8vQixNQUFNK0IsRUFBZXBCLEVBQWN6TSxHQUVuQyxRQUFzQmh5RyxJQUFqQjYvRyxFQUE2QixDQUVqQyxNQUFNeEMsRUFBV0osRUFBV0ksU0FJNUIsWUFGQWw2SCxRQUFRQyxNQUFPLCtEQUFpRWk2SCxFQUMvRSxJQUFNckwsRUFBZSx3QkFBMEJ5TSxHQU1qRCxJQUFJcUIsRUFBYXQvSCxLQUFLdS9ILFdBQVdDLEtBRWpDeC9ILEtBQUtpK0gsYUFBZUEsT0FFY3orRyxJQUE3QnkrRyxFQUFhN3RHLFlBRWpCa3ZHLEVBQWF0L0gsS0FBS3UvSCxXQUFXRSxpQkFFc0JqZ0gsSUFBeEN5K0csRUFBYWx3Rix5QkFFeEJ1eEYsRUFBYXQvSCxLQUFLdS9ILFdBQVdHLHdCQUs5QixJQUFJQyxFQUFjMy9ILEtBQUs0L0gsWUFBWUMsT0FFbkMsUUFBdUJyZ0gsSUFBbEIrOUcsRUFBOEIsQ0FJbEMsR0FBc0IsMEJBQWpCL0wsRUFBMkMsQ0FLL0MsSUFBT3lNLEVBQWFyK0YsU0FHbkIsWUFEQWo5QixRQUFRQyxNQUFPLHNHQUF1RzVDLE1BS3ZILElBQUtpK0gsRUFBYXIrRixTQUFTZ2lCLGlCQW1CMUIsWUFEQWovQyxRQUFRQyxNQUFPLG9IQUFxSDVDLE1BaEJwSSxJQUFPaStILEVBQWFyK0YsU0FBUzJlLGdCQUc1QixZQURBNTdDLFFBQVFDLE1BQU8sc0hBQXVINUMsV0FLMUV3ZixJQUF4RHkrRyxFQUFhbDZFLHNCQUF1Qnc1RSxLQUV4Q0EsRUFBZ0JVLEVBQWFsNkUsc0JBQXVCdzVFLElBY3ZEb0MsRUFBYzMvSCxLQUFLNC9ILFlBQVlFLGFBRS9COS9ILEtBQUttK0gsaUJBQW1Ca0IsRUFDeEJyL0gsS0FBS3U5SCxjQUFnQkEsWUFFaUIvOUcsSUFBM0I2L0csRUFBYTk0RyxnQkFBb0QvRyxJQUF6QjYvRyxFQUFhNTRHLFNBSWhFazVHLEVBQWMzL0gsS0FBSzQvSCxZQUFZRyxlQUUvQi8vSCxLQUFLbStILGlCQUFtQmtCLEdBRWIvL0gsTUFBTXVPLFFBQVN3eEgsSUFFMUJNLEVBQWMzL0gsS0FBSzQvSCxZQUFZSSxZQUUvQmhnSSxLQUFLbStILGlCQUFtQmtCLEdBSXhCci9ILEtBQUt3eEgsYUFBZUEsRUFLckJ4eEgsS0FBSzA3SCxTQUFXMTdILEtBQUtpZ0ksb0JBQXFCTixHQUMxQzMvSCxLQUFLZ3ZFLFNBQVdodkUsS0FBS2tnSSxpQ0FBa0NQLEdBQWVMLEdBSXZFYSxTQUVDbmdJLEtBQUsyOEgsS0FBTyxLQUlaMzhILEtBQUswN0gsU0FBVzE3SCxLQUFLODhILGtCQUNyQjk4SCxLQUFLZ3ZFLFNBQVdodkUsS0FBSys4SCxtQkFNdkJSLEdBQWdCVyxVQS9sQmhCLE1BRUN2MEgsWUFBYXkzSCxFQUFhbG1ILEVBQU1tbUgsR0FFL0IsTUFBTTVELEVBQWE0RCxHQUFzQjlELEdBQWdCRyxlQUFnQnhpSCxHQUV6RWxhLEtBQUtzZ0ksYUFBZUYsRUFDcEJwZ0ksS0FBS3VnSSxVQUFZSCxFQUFZSSxXQUFZdG1ILEVBQU11aUgsR0FJaERmLFNBQVVoNUcsRUFBTzhELEdBRWhCeG1CLEtBQUsyd0csT0FFTCxNQUFNOHZCLEVBQWtCemdJLEtBQUtzZ0ksYUFBYUksZ0JBQ3pDOUcsRUFBVTU1SCxLQUFLdWdJLFVBQVdFLFFBR1ZqaEgsSUFBWm82RyxHQUF3QkEsRUFBUThCLFNBQVVoNUcsRUFBTzhELEdBSXZEd29ELFNBQVV0c0QsRUFBTzhELEdBRWhCLE1BQU1tNkcsRUFBVzNnSSxLQUFLdWdJLFVBRXRCLElBQU0sSUFBSXovSCxFQUFJZCxLQUFLc2dJLGFBQWFJLGdCQUFpQi9oSSxFQUFJZ2lJLEVBQVM3aEksT0FBUWdDLElBQU1uQyxJQUFNbUMsRUFFakY2L0gsRUFBVTcvSCxHQUFJa3VFLFNBQVV0c0QsRUFBTzhELEdBTWpDbXFGLE9BRUMsTUFBTWd3QixFQUFXM2dJLEtBQUt1Z0ksVUFFdEIsSUFBTSxJQUFJei9ILEVBQUlkLEtBQUtzZ0ksYUFBYUksZ0JBQWlCL2hJLEVBQUlnaUksRUFBUzdoSSxPQUFRZ0MsSUFBTW5DLElBQU1tQyxFQUVqRjYvSCxFQUFVNy9ILEdBQUk2dkcsT0FNaEJ3dkIsU0FFQyxNQUFNUSxFQUFXM2dJLEtBQUt1Z0ksVUFFdEIsSUFBTSxJQUFJei9ILEVBQUlkLEtBQUtzZ0ksYUFBYUksZ0JBQWlCL2hJLEVBQUlnaUksRUFBUzdoSSxPQUFRZ0MsSUFBTW5DLElBQU1tQyxFQUVqRjYvSCxFQUFVNy9ILEdBQUlxL0gsV0E0aUJqQjVELEdBQWdCaDlILFVBQVVxZ0ksWUFBYyxDQUN2Q0MsT0FBUSxFQUNSRyxZQUFhLEVBQ2JGLGFBQWMsRUFDZEMsZUFBZ0IsR0FHakJ4RCxHQUFnQmg5SCxVQUFVZ2dJLFdBQWEsQ0FDdENDLEtBQU0sRUFDTkMsWUFBYSxFQUNiQyx1QkFBd0IsR0FHekJuRCxHQUFnQmg5SCxVQUFVMGdJLG9CQUFzQixDQUUvQzFELEdBQWdCaDlILFVBQVV5K0gsaUJBQzFCekIsR0FBZ0JoOUgsVUFBVTIrSCxnQkFDMUIzQixHQUFnQmg5SCxVQUFVNitILHVCQUMxQjdCLEdBQWdCaDlILFVBQVU4K0gsbUJBSTNCOUIsR0FBZ0JoOUgsVUFBVTJnSSxpQ0FBbUMsQ0FFNUQsQ0FFQzNELEdBQWdCaDlILFVBQVUrK0gsaUJBQzFCL0IsR0FBZ0JoOUgsVUFBVWcvSCxnQ0FDMUJoQyxHQUFnQmg5SCxVQUFVaS9ILDRDQUV4QixDQUlGakMsR0FBZ0JoOUgsVUFBVWsvSCxnQkFDMUJsQyxHQUFnQmg5SCxVQUFVby9ILCtCQUMxQnBDLEdBQWdCaDlILFVBQVVxL0gsMkNBRXhCLENBR0ZyQyxHQUFnQmg5SCxVQUFVcy9ILHVCQUMxQnRDLEdBQWdCaDlILFVBQVV1L0gsc0NBQzFCdkMsR0FBZ0JoOUgsVUFBVXcvSCxrREFFeEIsQ0FHRnhDLEdBQWdCaDlILFVBQVV5L0gsb0JBQzFCekMsR0FBZ0JoOUgsVUFBVTAvSCxtQ0FDMUIxQyxHQUFnQmg5SCxVQUFVMi9ILGdEQXFZNUIsTUFBTTBCLEdBRUxqNEgsWUFBYWs0SCxFQUFPbFksRUFBTW1ZLEVBQVksS0FBTWpXLEVBQVlsQyxFQUFLa0MsV0FFNUQ3cUgsS0FBSytnSSxPQUFTRixFQUNkN2dJLEtBQUtnaEksTUFBUXJZLEVBQ2Izb0gsS0FBS2loSSxXQUFhSCxFQUNsQjlnSSxLQUFLNnFILFVBQVlBLEVBRWpCLE1BQU1qQyxFQUFTRCxFQUFLQyxPQUNuQnNZLEVBQVV0WSxFQUFPOXBILE9BQ2pCcWlJLEVBQWUsSUFBSTdoSSxNQUFPNGhJLEdBRXJCRSxFQUFzQixDQUMzQjVVLFlBQWFsckcsRUFDYm1yRyxVQUFXbnJHLEdBR1osSUFBTSxJQUFJeGdCLEVBQUksRUFBR0EsSUFBTW9nSSxJQUFZcGdJLEVBQUksQ0FFdEMsTUFBTXdwSCxFQUFjMUIsRUFBUTluSCxHQUFJaXBILGtCQUFtQixNQUNuRG9YLEVBQWNyZ0ksR0FBTXdwSCxFQUNwQkEsRUFBWWEsU0FBV2lXLEVBSXhCcGhJLEtBQUtxaEkscUJBQXVCRCxFQUU1QnBoSSxLQUFLc2hJLGNBQWdCSCxFQUdyQm5oSSxLQUFLdWhJLGtCQUFvQixJQUFJamlJLE1BQU80aEksR0FFcENsaEksS0FBS3doSSxZQUFjLEtBQ25CeGhJLEtBQUt5aEksa0JBQW9CLEtBRXpCemhJLEtBQUswaEksc0JBQXdCLEtBQzdCMWhJLEtBQUsyaEksbUJBQXFCLEtBRTFCM2hJLEtBQUs0aEksS0F0djNDWSxLQXV2M0NqQjVoSSxLQUFLNmhJLFlBQWUsRUFJcEI3aEksS0FBSzhoSSxXQUFhLEtBSWxCOWhJLEtBQUt3dUQsS0FBTyxFQUVaeHVELEtBQUswdUgsVUFBWSxFQUNqQjF1SCxLQUFLK2hJLG9CQUFzQixFQUUzQi9oSSxLQUFLd3JFLE9BQVMsRUFDZHhyRSxLQUFLZ2lJLGlCQUFtQixFQUV4QmhpSSxLQUFLaWlJLFlBQWNseUgsRUFBQUEsRUFFbkIvUCxLQUFLMEUsUUFBUyxFQUNkMUUsS0FBS2lwRCxTQUFVLEVBRWZqcEQsS0FBS2tpSSxtQkFBb0IsRUFFekJsaUksS0FBS21pSSxrQkFBbUIsRUFDeEJuaUksS0FBS29pSSxnQkFBaUIsRUFNdkI3OEgsT0FJQyxPQUZBdkYsS0FBSytnSSxPQUFPc0IsZ0JBQWlCcmlJLE1BRXRCQSxLQUlSOEUsT0FJQyxPQUZBOUUsS0FBSytnSSxPQUFPdUIsa0JBQW1CdGlJLE1BRXhCQSxLQUFLdU0sUUFJYkEsUUFTQyxPQVBBdk0sS0FBSzBFLFFBQVMsRUFDZDFFLEtBQUtpcEQsU0FBVSxFQUVmanBELEtBQUt3dUQsS0FBTyxFQUNaeHVELEtBQUs2aEksWUFBZSxFQUNwQjdoSSxLQUFLOGhJLFdBQWEsS0FFWDloSSxLQUFLdWlJLGFBQWFDLGNBSTFCQyxZQUVDLE9BQU96aUksS0FBS2lwRCxVQUFhanBELEtBQUswRSxRQUE2QixJQUFuQjFFLEtBQUswdUgsV0FDeEIsT0FBcEIxdUgsS0FBSzhoSSxZQUF1QjloSSxLQUFLK2dJLE9BQU8yQixnQkFBaUIxaUksTUFLM0QyaUksY0FFQyxPQUFPM2lJLEtBQUsrZ0ksT0FBTzJCLGdCQUFpQjFpSSxNQUlyQzRpSSxRQUFTcDBFLEdBSVIsT0FGQXh1RCxLQUFLOGhJLFdBQWF0ekUsRUFFWHh1RCxLQUlSNmlJLFFBQVM3Z0UsRUFBTWlnRSxHQUtkLE9BSEFqaUksS0FBSzRoSSxLQUFPNS9ELEVBQ1poaUUsS0FBS2lpSSxZQUFjQSxFQUVaamlJLEtBU1I4aUksbUJBQW9CdDNELEdBT25CLE9BTEF4ckUsS0FBS3dyRSxPQUFTQSxFQUdkeHJFLEtBQUtnaUksaUJBQW1CaGlJLEtBQUtpcEQsUUFBVXVpQixFQUFTLEVBRXpDeHJFLEtBQUt1aUksYUFLYlEscUJBRUMsT0FBTy9pSSxLQUFLZ2lJLGlCQUliZ0IsT0FBUTVTLEdBRVAsT0FBT3B3SCxLQUFLaWpJLGdCQUFpQjdTLEVBQVUsRUFBRyxHQUkzQzhTLFFBQVM5UyxHQUVSLE9BQU9wd0gsS0FBS2lqSSxnQkFBaUI3UyxFQUFVLEVBQUcsR0FJM0MrUyxjQUFlQyxFQUFlaFQsRUFBVWlULEdBS3ZDLEdBSEFELEVBQWNGLFFBQVM5UyxHQUN2QnB3SCxLQUFLZ2pJLE9BQVE1UyxHQUVSaVQsRUFBTyxDQUVYLE1BQU1DLEVBQWlCdGpJLEtBQUtnaEksTUFBTTVRLFNBQ2pDbVQsRUFBa0JILEVBQWNwQyxNQUFNNVEsU0FFdENvVCxFQUFnQkQsRUFBa0JELEVBQ2xDRyxFQUFnQkgsRUFBaUJDLEVBRWxDSCxFQUFjQyxLQUFNLEVBQUtHLEVBQWVwVCxHQUN4Q3B3SCxLQUFLcWpJLEtBQU1JLEVBQWUsRUFBS3JULEdBSWhDLE9BQU9wd0gsS0FJUjBqSSxZQUFhQyxFQUFjdlQsRUFBVWlULEdBRXBDLE9BQU9NLEVBQWFSLGNBQWVuakksS0FBTW93SCxFQUFVaVQsR0FJcERkLGFBRUMsTUFBTXFCLEVBQW9CNWpJLEtBQUsyaEksbUJBUy9CLE9BUDJCLE9BQXRCaUMsSUFFSjVqSSxLQUFLMmhJLG1CQUFxQixLQUMxQjNoSSxLQUFLK2dJLE9BQU84Qyw0QkFBNkJELElBSW5DNWpJLEtBU1I4akksc0JBQXVCcFYsR0FLdEIsT0FIQTF1SCxLQUFLMHVILFVBQVlBLEVBQ2pCMXVILEtBQUsraEksb0JBQXNCL2hJLEtBQUswRSxPQUFTLEVBQUlncUgsRUFFdEMxdUgsS0FBS3dpSSxjQUtidUIsd0JBRUMsT0FBTy9qSSxLQUFLK2hJLG9CQUliaUMsWUFBYTVULEdBSVosT0FGQXB3SCxLQUFLMHVILFVBQVkxdUgsS0FBS2doSSxNQUFNNVEsU0FBV0EsRUFFaENwd0gsS0FBS3dpSSxjQUlieUIsU0FBVUMsR0FLVCxPQUhBbGtJLEtBQUt3dUQsS0FBTzAxRSxFQUFPMTFFLEtBQ25CeHVELEtBQUswdUgsVUFBWXdWLEVBQU94VixVQUVqQjF1SCxLQUFLd2lJLGNBSWIyQixLQUFNL1QsR0FFTCxPQUFPcHdILEtBQUtxakksS0FBTXJqSSxLQUFLK2hJLG9CQUFxQixFQUFHM1IsR0FJaERpVCxLQUFNZSxFQUFnQkMsRUFBY2pVLEdBRW5DLE1BQU15USxFQUFRN2dJLEtBQUsrZ0ksT0FDbEJsbEgsRUFBTWdsSCxFQUFNcnlFLEtBQ1prZ0UsRUFBWTF1SCxLQUFLMHVILFVBRWxCLElBQUlwRSxFQUFjdHFILEtBQUswaEksc0JBRUYsT0FBaEJwWCxJQUVKQSxFQUFjdVcsRUFBTXlELDBCQUNwQnRrSSxLQUFLMGhJLHNCQUF3QnBYLEdBSTlCLE1BQU12QyxFQUFRdUMsRUFBWVMsbUJBQ3pCcjRFLEVBQVM0M0UsRUFBWVUsYUFRdEIsT0FOQWpELEVBQU8sR0FBTWxzRyxFQUNia3NHLEVBQU8sR0FBTWxzRyxFQUFNdTBHLEVBRW5CMTlFLEVBQVEsR0FBTTB4RixFQUFpQjFWLEVBQy9CaDhFLEVBQVEsR0FBTTJ4RixFQUFlM1YsRUFFdEIxdUgsS0FJUndpSSxjQUVDLE1BQU0rQixFQUF1QnZrSSxLQUFLMGhJLHNCQVNsQyxPQVA4QixPQUF6QjZDLElBRUp2a0ksS0FBSzBoSSxzQkFBd0IsS0FDN0IxaEksS0FBSytnSSxPQUFPOEMsNEJBQTZCVSxJQUluQ3ZrSSxLQU1Sd2tJLFdBRUMsT0FBT3hrSSxLQUFLK2dJLE9BSWIwRCxVQUVDLE9BQU96a0ksS0FBS2doSSxNQUliMEQsVUFFQyxPQUFPMWtJLEtBQUtpaEksWUFBY2poSSxLQUFLK2dJLE9BQU80RCxNQU12Q0MsUUFBU3AyRSxFQUFNcTJFLEVBQVdDLEVBQWUzSixHQUl4QyxJQUFPbjdILEtBQUtpcEQsUUFLWCxZQURBanBELEtBQUsra0ksY0FBZXYyRSxHQUtyQixNQUFNbWdFLEVBQVkzdUgsS0FBSzhoSSxXQUV2QixHQUFtQixPQUFkblQsRUFBcUIsQ0FJekIsTUFBTXFXLEdBQWdCeDJFLEVBQU9tZ0UsR0FBY21XLEVBQzNDLEdBQUtFLEVBQWMsR0FBdUIsSUFBbEJGLEVBRXZCLE9BTUQ5a0ksS0FBSzhoSSxXQUFhLEtBQ2xCK0MsRUFBWUMsRUFBZ0JFLEVBTTdCSCxHQUFhN2tJLEtBQUtpbEksaUJBQWtCejJFLEdBQ3BDLE1BQU0wMkUsRUFBV2xsSSxLQUFLbWxJLFlBQWFOLEdBSzdCcjVELEVBQVN4ckUsS0FBSytrSSxjQUFldjJFLEdBRW5DLEdBQUtnZCxFQUFTLEVBQUksQ0FFakIsTUFBTTIxRCxFQUFlbmhJLEtBQUtzaEksY0FDcEI4RCxFQUFpQnBsSSxLQUFLdWhJLGtCQUU1QixHQW5qNENnQyxPQW1qNEN2QnZoSSxLQUFLNnFILFVBSVosSUFBTSxJQUFJN3BILEVBQUksRUFBR0MsRUFBSWtnSSxFQUFhcmlJLE9BQVFrQyxJQUFNQyxJQUFNRCxFQUVyRG1nSSxFQUFjbmdJLEdBQUl1cEgsU0FBVTJhLEdBQzVCRSxFQUFnQnBrSSxHQUFJczZILG1CQUFvQjl2RCxRQVN6QyxJQUFNLElBQUl4cUUsRUFBSSxFQUFHQyxFQUFJa2dJLEVBQWFyaUksT0FBUWtDLElBQU1DLElBQU1ELEVBRXJEbWdJLEVBQWNuZ0ksR0FBSXVwSCxTQUFVMmEsR0FDNUJFLEVBQWdCcGtJLEdBQUlrNkgsV0FBWUMsRUFBVzN2RCxJQVVoRHU1RCxjQUFldjJFLEdBRWQsSUFBSWdkLEVBQVMsRUFFYixHQUFLeHJFLEtBQUtpcEQsUUFBVSxDQUVuQnVpQixFQUFTeHJFLEtBQUt3ckUsT0FDZCxNQUFNOCtDLEVBQWN0cUgsS0FBSzJoSSxtQkFFekIsR0FBcUIsT0FBaEJyWCxFQUF1QixDQUUzQixNQUFNK2EsRUFBbUIvYSxFQUFZQyxTQUFVLzdELEdBQVEsR0FFdkRnZCxHQUFVNjVELEVBRUw3MkUsRUFBTzg3RCxFQUFZUyxtQkFBb0IsS0FFM0MvcUgsS0FBS3VpSSxhQUVxQixJQUFyQjhDLElBR0pybEksS0FBS2lwRCxTQUFVLEtBV25CLE9BREFqcEQsS0FBS2dpSSxpQkFBbUJ4MkQsRUFDakJBLEVBSVJ5NUQsaUJBQWtCejJFLEdBRWpCLElBQUlrZ0UsRUFBWSxFQUVoQixJQUFPMXVILEtBQUswRSxPQUFTLENBRXBCZ3FILEVBQVkxdUgsS0FBSzB1SCxVQUVqQixNQUFNcEUsRUFBY3RxSCxLQUFLMGhJLHNCQUVKLE9BQWhCcFgsSUFJSm9FLEdBRnlCcEUsRUFBWUMsU0FBVS83RCxHQUFRLEdBSWxEQSxFQUFPODdELEVBQVlTLG1CQUFvQixLQUUzQy9xSCxLQUFLd2lJLGNBRWMsSUFBZDlULEVBR0oxdUgsS0FBSzBFLFFBQVMsRUFLZDFFLEtBQUswdUgsVUFBWUEsSUFXckIsT0FEQTF1SCxLQUFLK2hJLG9CQUFzQnJULEVBQ3BCQSxFQUlSeVcsWUFBYU4sR0FFWixNQUFNelUsRUFBV3B3SCxLQUFLZ2hJLE1BQU01USxTQUN0QndSLEVBQU81aEksS0FBSzRoSSxLQUVsQixJQUFJcHpFLEVBQU94dUQsS0FBS3d1RCxLQUFPcTJFLEVBQ25CUyxFQUFZdGxJLEtBQUs2aEksV0FFckIsTUFBTTBELEVBaHI0Q2EsT0FncjRDQTNELEVBRW5CLEdBQW1CLElBQWRpRCxFQUVKLE9BQXFCLElBQWhCUyxFQUEyQjkyRSxFQUV2QisyRSxHQUFrQyxJQUFSLEVBQVpELEdBQTBCbFYsRUFBVzVoRSxFQUFPQSxFQUlwRSxHQTVyNENlLE9BNHI0Q1ZvekUsRUFBb0IsRUFFSCxJQUFoQjBELElBSUp0bEksS0FBSzZoSSxXQUFhLEVBQ2xCN2hJLEtBQUt3bEksYUFBYSxHQUFNLEdBQU0sSUFJL0JDLEVBQWEsQ0FFWixHQUFLajNFLEdBQVE0aEUsRUFFWjVoRSxFQUFPNGhFLE1BRUQsTUFBSzVoRSxFQUFPLEdBSVosQ0FFTnh1RCxLQUFLd3VELEtBQU9BLEVBRVosTUFBTWkzRSxFQU5OajNFLEVBQU8sRUFVSHh1RCxLQUFLa2lJLGtCQUFvQmxpSSxLQUFLMEUsUUFBUyxFQUN2QzFFLEtBQUtpcEQsU0FBVSxFQUVwQmpwRCxLQUFLd3VELEtBQU9BLEVBRVp4dUQsS0FBSytnSSxPQUFPaCtILGNBQWUsQ0FDMUI4VCxLQUFNLFdBQVlxdEgsT0FBUWxrSSxLQUMxQjJqQyxVQUFXa2hHLEVBQVksR0FBTSxFQUFJLFNBSzdCLENBd0JOLElBdEJxQixJQUFoQlMsSUFJQ1QsR0FBYSxHQUVqQlMsRUFBWSxFQUVadGxJLEtBQUt3bEksYUFBYSxFQUEyQixJQUFyQnhsSSxLQUFLaWlJLFlBQW1Cc0QsSUFRaER2bEksS0FBS3dsSSxZQUFrQyxJQUFyQnhsSSxLQUFLaWlJLGFBQW1CLEVBQU1zRCxJQU03Qy8yRSxHQUFRNGhFLEdBQVk1aEUsRUFBTyxFQUFJLENBSW5DLE1BQU1rM0UsRUFBWTdsSSxLQUFLcUwsTUFBT3NqRCxFQUFPNGhFLEdBQ3JDNWhFLEdBQVE0aEUsRUFBV3NWLEVBRW5CSixHQUFhemxJLEtBQUsyUixJQUFLazBILEdBRXZCLE1BQU1DLEVBQVUzbEksS0FBS2lpSSxZQUFjcUQsRUFFbkMsR0FBS0ssR0FBVyxFQUlWM2xJLEtBQUtraUksa0JBQW9CbGlJLEtBQUswRSxRQUFTLEVBQ3ZDMUUsS0FBS2lwRCxTQUFVLEVBRXBCdUYsRUFBT3EyRSxFQUFZLEVBQUl6VSxFQUFXLEVBRWxDcHdILEtBQUt3dUQsS0FBT0EsRUFFWnh1RCxLQUFLK2dJLE9BQU9oK0gsY0FBZSxDQUMxQjhULEtBQU0sV0FBWXF0SCxPQUFRbGtJLEtBQzFCMmpDLFVBQVdraEcsRUFBWSxFQUFJLEdBQU0sUUFHNUIsQ0FJTixHQUFpQixJQUFaYyxFQUFnQixDQUlwQixNQUFNQyxFQUFVZixFQUFZLEVBQzVCN2tJLEtBQUt3bEksWUFBYUksR0FBV0EsRUFBU0wsUUFJdEN2bEksS0FBS3dsSSxhQUFhLEdBQU8sRUFBT0QsR0FJakN2bEksS0FBSzZoSSxXQUFheUQsRUFFbEJ0bEksS0FBS3d1RCxLQUFPQSxFQUVaeHVELEtBQUsrZ0ksT0FBT2grSCxjQUFlLENBQzFCOFQsS0FBTSxPQUFRcXRILE9BQVFsa0ksS0FBTTBsSSxVQUFXQSxVQU96QzFsSSxLQUFLd3VELEtBQU9BLEVBSWIsR0FBSysyRSxHQUFrQyxJQUFSLEVBQVpELEdBSWxCLE9BQU9sVixFQUFXNWhFLEVBTXBCLE9BQU9BLEVBSVJnM0UsWUFBYUksRUFBU0MsRUFBT04sR0FFNUIsTUFBTXBhLEVBQVduckgsS0FBS3FoSSxxQkFFakJrRSxHQUVKcGEsRUFBU3FCLFlBQWNqckcsRUFDdkI0cEcsRUFBU3NCLFVBQVlsckcsSUFRcEI0cEcsRUFBU3FCLFlBRkxvWixFQUVtQjVsSSxLQUFLbWlJLGlCQUFtQjVnSCxFQUFrQkQsRUFJMUNFLEVBTXZCMnBHLEVBQVNzQixVQUZMb1osRUFFaUI3bEksS0FBS29pSSxlQUFpQjdnSCxFQUFrQkQsRUFJdENFLEdBUTFCeWhILGdCQUFpQjdTLEVBQVUwVixFQUFXQyxHQUVyQyxNQUFNbEYsRUFBUTdnSSxLQUFLK2dJLE9BQVFsbEgsRUFBTWdsSCxFQUFNcnlFLEtBQ3ZDLElBQUk4N0QsRUFBY3RxSCxLQUFLMmhJLG1CQUVGLE9BQWhCclgsSUFFSkEsRUFBY3VXLEVBQU15RCwwQkFDcEJ0a0ksS0FBSzJoSSxtQkFBcUJyWCxHQUkzQixNQUFNdkMsRUFBUXVDLEVBQVlTLG1CQUN6QnI0RSxFQUFTNDNFLEVBQVlVLGFBT3RCLE9BTEFqRCxFQUFPLEdBQU1sc0csRUFDYjYyQixFQUFRLEdBQU1vekYsRUFDZC9kLEVBQU8sR0FBTWxzRyxFQUFNdTBHLEVBQ25CMTlFLEVBQVEsR0FBTXF6RixFQUVQL2xJLE9BTVQsY0FBNkJraUIsRUFFNUJ2WixZQUFhcTBILEdBRVp2ckcsUUFFQXp4QixLQUFLMmtJLE1BQVEzSCxFQUNiaDlILEtBQUtnbUkscUJBQ0xobUksS0FBS2ltSSxXQUFhLEVBQ2xCam1JLEtBQUt3dUQsS0FBTyxFQUNaeHVELEtBQUswdUgsVUFBWSxFQUlsQndYLFlBQWFoQyxFQUFRaUMsR0FFcEIsTUFBTW5KLEVBQU9rSCxFQUFPakQsWUFBY2poSSxLQUFLMmtJLE1BQ3RDL2IsRUFBU3NiLEVBQU9sRCxNQUFNcFksT0FDdEJzWSxFQUFVdFksRUFBTzlwSCxPQUNqQjZoSSxFQUFXdUQsRUFBTzNDLGtCQUNsQkosRUFBZStDLEVBQU81QyxjQUN0QjhFLEVBQVdwSixFQUFLOXNHLEtBQ2hCbTJHLEVBQWlCcm1JLEtBQUtzbUksdUJBRXZCLElBQUlDLEVBQWlCRixFQUFnQkQsUUFFYjVtSCxJQUFuQittSCxJQUVKQSxFQUFpQixHQUNqQkYsRUFBZ0JELEdBQWFHLEdBSTlCLElBQU0sSUFBSXpsSSxFQUFJLEVBQUdBLElBQU1vZ0ksSUFBWXBnSSxFQUFJLENBRXRDLE1BQU0rbkgsRUFBUUQsRUFBUTluSCxHQUNyQnd3SCxFQUFZekksRUFBTXh5RyxLQUVuQixJQUFJdWpILEVBQVUyTSxFQUFnQmpWLEdBRTlCLFFBQWlCOXhHLElBQVpvNkcsSUFFREEsRUFBUXFCLGVBQ1gwRixFQUFVNy9ILEdBQU04NEgsTUFFVixDQUlOLEdBRkFBLEVBQVUrRyxFQUFVNy9ILFFBRUgwZSxJQUFabzZHLEVBQXdCLENBSUMsT0FBeEJBLEVBQVE0SCxnQkFFVDVILEVBQVFxQixlQUNYajdILEtBQUt3bUksb0JBQXFCNU0sRUFBU3dNLEVBQVU5VSxJQUk5QyxTQUlELE1BQU1wM0csRUFBT2lzSCxHQUFtQkEsRUFDL0I1RSxrQkFBbUJ6Z0ksR0FBSTg0SCxRQUFRNkMsV0FFaEM3QyxFQUFVLElBQUlELEdBQ2I0QyxHQUFnQmwwSCxPQUFRMjBILEVBQU0xTCxFQUFXcDNHLEdBQ3pDMnVHLEVBQU1hLGNBQWViLEVBQU1FLGtCQUV6QjZRLEVBQVFxQixlQUNYajdILEtBQUt3bUksb0JBQXFCNU0sRUFBU3dNLEVBQVU5VSxHQUU3Q3FQLEVBQVU3L0gsR0FBTTg0SCxFQUlqQnVILEVBQWNyZ0ksR0FBSTBwSCxhQUFlb1AsRUFBUXp0SCxRQU0zQ2sySCxnQkFBaUI2QixHQUVoQixJQUFPbGtJLEtBQUswaUksZ0JBQWlCd0IsR0FBVyxDQUV2QyxHQUE0QixPQUF2QkEsRUFBTzFDLFlBQXVCLENBS2xDLE1BQU00RSxHQUFhbEMsRUFBT2pELFlBQWNqaEksS0FBSzJrSSxPQUFRejBHLEtBQ3BEdTJHLEVBQVd2QyxFQUFPbEQsTUFBTTl3RyxLQUN4QncyRyxFQUFpQjFtSSxLQUFLMm1JLGVBQWdCRixHQUV2Q3ptSSxLQUFLa21JLFlBQWFoQyxFQUNqQndDLEdBQWtCQSxFQUFlRSxhQUFjLElBRWhENW1JLEtBQUs2bUksbUJBQW9CM0MsRUFBUXVDLEVBQVVMLEdBSTVDLE1BQU16RixFQUFXdUQsRUFBTzNDLGtCQUd4QixJQUFNLElBQUl6Z0ksRUFBSSxFQUFHbkMsRUFBSWdpSSxFQUFTN2hJLE9BQVFnQyxJQUFNbkMsSUFBTW1DLEVBQUksQ0FFckQsTUFBTTg0SCxFQUFVK0csRUFBVTcvSCxHQUVHLEdBQXhCODRILEVBQVFvQixhQUVaaDdILEtBQUs4bUksYUFBY2xOLEdBQ25CQSxFQUFRNkIscUJBTVZ6N0gsS0FBSyttSSxZQUFhN0MsSUFNcEI1QixrQkFBbUI0QixHQUVsQixHQUFLbGtJLEtBQUswaUksZ0JBQWlCd0IsR0FBVyxDQUVyQyxNQUFNdkQsRUFBV3VELEVBQU8zQyxrQkFHeEIsSUFBTSxJQUFJemdJLEVBQUksRUFBR25DLEVBQUlnaUksRUFBUzdoSSxPQUFRZ0MsSUFBTW5DLElBQU1tQyxFQUFJLENBRXJELE1BQU04NEgsRUFBVStHLEVBQVU3L0gsR0FFRyxLQUFyQjg0SCxFQUFRb0IsV0FFZnBCLEVBQVErQix1QkFDUjM3SCxLQUFLZ25JLGlCQUFrQnBOLElBTXpCNTVILEtBQUtpbkksZ0JBQWlCL0MsSUFReEI4QixxQkFFQ2htSSxLQUFLa25JLFNBQVcsR0FDaEJsbkksS0FBS21uSSxnQkFBa0IsRUFFdkJubkksS0FBSzJtSSxlQUFpQixHQVF0QjNtSSxLQUFLdWdJLFVBQVksR0FDakJ2Z0ksS0FBS29uSSxpQkFBbUIsRUFFeEJwbkksS0FBS3NtSSx1QkFBeUIsR0FHOUJ0bUksS0FBS3FuSSxxQkFBdUIsR0FDNUJybkksS0FBS3NuSSw0QkFBOEIsRUFFbkMsTUFBTW5pRixFQUFRbmxELEtBRWRBLEtBQUt1bkksTUFBUSxDQUVaQyxRQUFTLENBQ0psUyxZQUVILE9BQU9ud0UsRUFBTStoRixTQUFTcG9JLFFBR25CMm9JLFlBRUgsT0FBT3RpRixFQUFNZ2lGLGtCQUlmeEcsU0FBVSxDQUNMckwsWUFFSCxPQUFPbndFLEVBQU1vN0UsVUFBVXpoSSxRQUdwQjJvSSxZQUVILE9BQU90aUYsRUFBTWlpRixtQkFJZk0sb0JBQXFCLENBQ2hCcFMsWUFFSCxPQUFPbndFLEVBQU1raUYscUJBQXFCdm9JLFFBRy9CMm9JLFlBRUgsT0FBT3RpRixFQUFNbWlGLCtCQVdqQjVFLGdCQUFpQndCLEdBRWhCLE1BQU10OUgsRUFBUXM5SCxFQUFPMUMsWUFDckIsT0FBaUIsT0FBVjU2SCxHQUFrQkEsRUFBUTVHLEtBQUttbkksZ0JBSXZDTixtQkFBb0IzQyxFQUFRdUMsRUFBVUwsR0FFckMsTUFBTW9CLEVBQVV4bkksS0FBS2tuSSxTQUNwQlMsRUFBZ0IzbkksS0FBSzJtSSxlQUV0QixJQUFJRCxFQUFpQmlCLEVBQWVsQixHQUVwQyxRQUF3QmpuSCxJQUFuQmtuSCxFQUVKQSxFQUFpQixDQUVoQkUsYUFBYyxDQUFFMUMsR0FDaEIwRCxhQUFjLElBSWYxRCxFQUFPekMsa0JBQW9CLEVBRTNCa0csRUFBZWxCLEdBQWFDLE1BRXRCLENBRU4sTUFBTUUsRUFBZUYsRUFBZUUsYUFFcEMxQyxFQUFPekMsa0JBQW9CbUYsRUFBYTluSSxPQUN4QzhuSSxFQUFhcGtJLEtBQU0waEksR0FJcEJBLEVBQU8xQyxZQUFjZ0csRUFBUTFvSSxPQUM3QjBvSSxFQUFRaGxJLEtBQU0waEksR0FFZHdDLEVBQWVrQixhQUFjeEIsR0FBYWxDLEVBSTNDMkQsc0JBQXVCM0QsR0FFdEIsTUFBTXNELEVBQVV4bkksS0FBS2tuSSxTQUNwQlksRUFBcUJOLEVBQVNBLEVBQVExb0ksT0FBUyxHQUMvQ2lwSSxFQUFhN0QsRUFBTzFDLFlBRXJCc0csRUFBbUJ0RyxZQUFjdUcsRUFDakNQLEVBQVNPLEdBQWVELEVBQ3hCTixFQUFRMzZILE1BRVJxM0gsRUFBTzFDLFlBQWMsS0FHckIsTUFBTWlGLEVBQVd2QyxFQUFPbEQsTUFBTTl3RyxLQUM3QnkzRyxFQUFnQjNuSSxLQUFLMm1JLGVBQ3JCRCxFQUFpQmlCLEVBQWVsQixHQUNoQ3VCLEVBQXNCdEIsRUFBZUUsYUFFckNxQixFQUNDRCxFQUFxQkEsRUFBb0JscEksT0FBUyxHQUVuRG9wSSxFQUFtQmhFLEVBQU96QyxrQkFFM0J3RyxFQUFnQnhHLGtCQUFvQnlHLEVBQ3BDRixFQUFxQkUsR0FBcUJELEVBQzFDRCxFQUFvQm43SCxNQUVwQnEzSCxFQUFPekMsa0JBQW9CLFlBR05pRixFQUFla0IsY0FDdEIxRCxFQUFPakQsWUFBY2poSSxLQUFLMmtJLE9BQVF6MEcsTUFJWixJQUEvQjgzRyxFQUFvQmxwSSxlQUVqQjZvSSxFQUFlbEIsR0FJdkJ6bUksS0FBS21vSSxpQ0FBa0NqRSxHQUl4Q2lFLGlDQUFrQ2pFLEdBRWpDLE1BQU12RCxFQUFXdUQsRUFBTzNDLGtCQUV4QixJQUFNLElBQUl6Z0ksRUFBSSxFQUFHbkMsRUFBSWdpSSxFQUFTN2hJLE9BQVFnQyxJQUFNbkMsSUFBTW1DLEVBQUksQ0FFckQsTUFBTTg0SCxFQUFVK0csRUFBVTcvSCxHQUVTLEtBQTNCODRILEVBQVFxQixnQkFFZmo3SCxLQUFLb29JLHVCQUF3QnhPLElBUWhDbU4sWUFBYTdDLEdBUVosTUFBTXNELEVBQVV4bkksS0FBS2tuSSxTQUNwQm1CLEVBQVluRSxFQUFPMUMsWUFFbkI4RyxFQUFrQnRvSSxLQUFLbW5JLGtCQUV2Qm9CLEVBQXNCZixFQUFTYyxHQUVoQ3BFLEVBQU8xQyxZQUFjOEcsRUFDckJkLEVBQVNjLEdBQW9CcEUsRUFFN0JxRSxFQUFvQi9HLFlBQWM2RyxFQUNsQ2IsRUFBU2EsR0FBY0UsRUFJeEJ0QixnQkFBaUIvQyxHQVFoQixNQUFNc0QsRUFBVXhuSSxLQUFLa25JLFNBQ3BCbUIsRUFBWW5FLEVBQU8xQyxZQUVuQmdILElBQXdCeG9JLEtBQUttbkksZ0JBRTdCc0IsRUFBbUJqQixFQUFTZ0IsR0FFN0J0RSxFQUFPMUMsWUFBY2dILEVBQ3JCaEIsRUFBU2dCLEdBQXVCdEUsRUFFaEN1RSxFQUFpQmpILFlBQWM2RyxFQUMvQmIsRUFBU2EsR0FBY0ksRUFNeEJqQyxvQkFBcUI1TSxFQUFTd00sRUFBVTlVLEdBRXZDLE1BQU0rVSxFQUFpQnJtSSxLQUFLc21JLHVCQUMzQjNGLEVBQVczZ0ksS0FBS3VnSSxVQUVqQixJQUFJbUksRUFBZ0JyQyxFQUFnQkQsUUFFYjVtSCxJQUFsQmtwSCxJQUVKQSxFQUFnQixHQUNoQnJDLEVBQWdCRCxHQUFhc0MsR0FJOUJBLEVBQWVwWCxHQUFjc0ksRUFFN0JBLEVBQVE0SCxZQUFjYixFQUFTN2hJLE9BQy9CNmhJLEVBQVNuK0gsS0FBTW8zSCxHQUloQndPLHVCQUF3QnhPLEdBRXZCLE1BQU0rRyxFQUFXM2dJLEtBQUt1Z0ksVUFDckJvSSxFQUFjL08sRUFBUUEsUUFDdEJ3TSxFQUFXdUMsRUFBWW5NLFNBQVN0c0csS0FDaENvaEcsRUFBWXFYLEVBQVl6dUgsS0FDeEJtc0gsRUFBaUJybUksS0FBS3NtSSx1QkFDdEJvQyxFQUFnQnJDLEVBQWdCRCxHQUVoQ3dDLEVBQXNCakksRUFBVUEsRUFBUzdoSSxPQUFTLEdBQ2xEaXBJLEVBQWFuTyxFQUFRNEgsWUFFdEJvSCxFQUFvQnBILFlBQWN1RyxFQUNsQ3BILEVBQVVvSCxHQUFlYSxFQUN6QmpJLEVBQVM5ekgsYUFFRjY3SCxFQUFlcFgsR0FFdUIsSUFBeENweUgsT0FBTzZXLEtBQU0yeUgsR0FBZ0I1cEksZUFFMUJ1bkksRUFBZ0JELEdBTXpCVSxhQUFjbE4sR0FFYixNQUFNK0csRUFBVzNnSSxLQUFLdWdJLFVBQ3JCOEgsRUFBWXpPLEVBQVE0SCxZQUVwQjhHLEVBQWtCdG9JLEtBQUtvbkksbUJBRXZCeUIsRUFBdUJsSSxFQUFVMkgsR0FFbEMxTyxFQUFRNEgsWUFBYzhHLEVBQ3RCM0gsRUFBVTJILEdBQW9CMU8sRUFFOUJpUCxFQUFxQnJILFlBQWM2RyxFQUNuQzFILEVBQVUwSCxHQUFjUSxFQUl6QjdCLGlCQUFrQnBOLEdBRWpCLE1BQU0rRyxFQUFXM2dJLEtBQUt1Z0ksVUFDckI4SCxFQUFZek8sRUFBUTRILFlBRXBCZ0gsSUFBd0J4b0ksS0FBS29uSSxpQkFFN0IwQixFQUFvQm5JLEVBQVU2SCxHQUUvQjVPLEVBQVE0SCxZQUFjZ0gsRUFDdEI3SCxFQUFVNkgsR0FBdUI1TyxFQUVqQ2tQLEVBQWtCdEgsWUFBYzZHLEVBQ2hDMUgsRUFBVTBILEdBQWNTLEVBT3pCeEUsMEJBRUMsTUFBTW5ELEVBQWVuaEksS0FBS3FuSSxxQkFDekJpQixFQUFrQnRvSSxLQUFLc25JLDhCQUV4QixJQUFJaGQsRUFBYzZXLEVBQWNtSCxHQWFoQyxZQVhxQjlvSCxJQUFoQjhxRyxJQUVKQSxFQUFjLElBQUlpRCxHQUNqQixJQUFJNTVHLGFBQWMsR0FBSyxJQUFJQSxhQUFjLEdBQ3pDLEVBQUczVCxLQUFLK29JLGtDQUVUemUsRUFBWTBlLGFBQWVWLEVBQzNCbkgsRUFBY21ILEdBQW9CaGUsR0FJNUJBLEVBSVJ1Wiw0QkFBNkJ2WixHQUU1QixNQUFNNlcsRUFBZW5oSSxLQUFLcW5JLHFCQUN6QmdCLEVBQVkvZCxFQUFZMGUsYUFFeEJSLElBQXdCeG9JLEtBQUtzbkksNEJBRTdCMkIsRUFBd0I5SCxFQUFjcUgsR0FFdkNsZSxFQUFZMGUsYUFBZVIsRUFDM0JySCxFQUFjcUgsR0FBdUJsZSxFQUVyQzJlLEVBQXNCRCxhQUFlWCxFQUNyQ2xILEVBQWNrSCxHQUFjWSxFQU83QkMsV0FBWXZnQixFQUFNd2dCLEVBQWN0ZSxHQUUvQixNQUFNbVMsRUFBT21NLEdBQWdCbnBJLEtBQUsya0ksTUFDakN5QixFQUFXcEosRUFBSzlzRyxLQUVqQixJQUFJazVHLEVBQTZCLGlCQUFUemdCLEVBQW9Cd0gsR0FBY2taLFdBQVlyTSxFQUFNclUsR0FBU0EsRUFFckYsTUFBTThkLEVBQTBCLE9BQWYyQyxFQUFzQkEsRUFBV2w1RyxLQUFPeTRGLEVBRW5EK2QsRUFBaUIxbUksS0FBSzJtSSxlQUFnQkYsR0FDNUMsSUFBSU4sRUFBa0IsS0FnQnRCLFFBZG1CM21ILElBQWRxckcsSUFJSEEsRUFGbUIsT0FBZnVlLEVBRVFBLEVBQVd2ZSxVQXA0NUNNLFdBODQ1Q1ByckcsSUFBbkJrbkgsRUFBK0IsQ0FFbkMsTUFBTTRDLEVBQWlCNUMsRUFBZWtCLGFBQWN4QixHQUVwRCxRQUF3QjVtSCxJQUFuQjhwSCxHQUFnQ0EsRUFBZXplLFlBQWNBLEVBRWpFLE9BQU95ZSxFQU1SbkQsRUFBa0JPLEVBQWVFLGFBQWMsR0FHM0IsT0FBZndDLElBQ0pBLEVBQWFqRCxFQUFnQm5GLE9BSy9CLEdBQW9CLE9BQWZvSSxFQUFzQixPQUFPLEtBR2xDLE1BQU1HLEVBQVksSUFBSTNJLEdBQWlCNWdJLEtBQU1vcEksRUFBWUQsRUFBY3RlLEdBT3ZFLE9BTEE3cUgsS0FBS2ttSSxZQUFhcUQsRUFBV3BELEdBRzdCbm1JLEtBQUs2bUksbUJBQW9CMEMsRUFBVzlDLEVBQVVMLEdBRXZDbUQsRUFLUkQsZUFBZ0IzZ0IsRUFBTXdnQixHQUVyQixNQUFNbk0sRUFBT21NLEdBQWdCbnBJLEtBQUsya0ksTUFDakN5QixFQUFXcEosRUFBSzlzRyxLQUVoQms1RyxFQUE2QixpQkFBVHpnQixFQUNuQndILEdBQWNrWixXQUFZck0sRUFBTXJVLEdBQVNBLEVBRTFDOGQsRUFBVzJDLEVBQWFBLEVBQVdsNUcsS0FBT3k0RixFQUUxQytkLEVBQWlCMW1JLEtBQUsybUksZUFBZ0JGLEdBRXZDLFlBQXdCam5ILElBQW5Ca25ILEdBRUdBLEVBQWVrQixhQUFjeEIsSUFJOUIsS0FLUm9ELGdCQUVDLE1BQU1oQyxFQUFVeG5JLEtBQUtrbkksU0FHckIsSUFBTSxJQUFJcG1JLEVBRkVkLEtBQUttbkksZ0JBRVEsRUFBR3JtSSxHQUFLLElBQU1BLEVBRXRDMG1JLEVBQVMxbUksR0FBSWdFLE9BSWQsT0FBTzlFLEtBS1IrM0IsT0FBUThzRyxHQUVQQSxHQUFhN2tJLEtBQUswdUgsVUFFbEIsTUFBTThZLEVBQVV4bkksS0FBS2tuSSxTQUNwQnVDLEVBQVd6cEksS0FBS21uSSxnQkFFaEIzNEUsRUFBT3h1RCxLQUFLd3VELE1BQVFxMkUsRUFDcEJDLEVBQWdCamxJLEtBQUtzbUMsS0FBTTArRixHQUUzQjFKLEVBQVluN0gsS0FBS2ltSSxZQUFjLEVBSWhDLElBQU0sSUFBSW5sSSxFQUFJLEVBQUdBLElBQU0yb0ksSUFBYTNvSSxFQUVwQjBtSSxFQUFTMW1JLEdBRWpCOGpJLFFBQVNwMkUsRUFBTXEyRSxFQUFXQyxFQUFlM0osR0FNakQsTUFBTXdGLEVBQVczZ0ksS0FBS3VnSSxVQUNyQm1KLEVBQVkxcEksS0FBS29uSSxpQkFFbEIsSUFBTSxJQUFJdG1JLEVBQUksRUFBR0EsSUFBTTRvSSxJQUFjNW9JLEVBRXBDNi9ILEVBQVU3L0gsR0FBSXFKLE1BQU9neEgsR0FJdEIsT0FBT243SCxLQUtSMnBJLFFBQVNDLEdBRVI1cEksS0FBS3d1RCxLQUFPLEVBQ1osSUFBTSxJQUFJMXRELEVBQUksRUFBR0EsRUFBSWQsS0FBS2tuSSxTQUFTcG9JLE9BQVFnQyxJQUUxQ2QsS0FBS2tuSSxTQUFVcG1JLEdBQUkwdEQsS0FBTyxFQUkzQixPQUFPeHVELEtBQUsrM0IsT0FBUTZ4RyxHQUtyQmxGLFVBRUMsT0FBTzFrSSxLQUFLMmtJLE1BS2JrRixZQUFhbGhCLEdBRVosTUFBTTZlLEVBQVV4bkksS0FBS2tuSSxTQUNwQlQsRUFBVzlkLEVBQUt6NEYsS0FDaEJ5M0csRUFBZ0IzbkksS0FBSzJtSSxlQUNyQkQsRUFBaUJpQixFQUFlbEIsR0FFakMsUUFBd0JqbkgsSUFBbkJrbkgsRUFBK0IsQ0FNbkMsTUFBTW9ELEVBQWtCcEQsRUFBZUUsYUFFdkMsSUFBTSxJQUFJOWxJLEVBQUksRUFBR25DLEVBQUltckksRUFBZ0JockksT0FBUWdDLElBQU1uQyxJQUFNbUMsRUFBSSxDQUU1RCxNQUFNb2pJLEVBQVM0RixFQUFpQmhwSSxHQUVoQ2QsS0FBS3NpSSxrQkFBbUI0QixHQUV4QixNQUFNNkQsRUFBYTdELEVBQU8xQyxZQUN6QnNHLEVBQXFCTixFQUFTQSxFQUFRMW9JLE9BQVMsR0FFaERvbEksRUFBTzFDLFlBQWMsS0FDckIwQyxFQUFPekMsa0JBQW9CLEtBRTNCcUcsRUFBbUJ0RyxZQUFjdUcsRUFDakNQLEVBQVNPLEdBQWVELEVBQ3hCTixFQUFRMzZILE1BRVI3TSxLQUFLbW9JLGlDQUFrQ2pFLFVBSWpDeUQsRUFBZWxCLElBT3hCc0QsWUFBYS9NLEdBRVosTUFBTW9KLEVBQVdwSixFQUFLOXNHLEtBQ3JCeTNHLEVBQWdCM25JLEtBQUsybUksZUFFdEIsSUFBTSxNQUFNRixLQUFZa0IsRUFBZ0IsQ0FFdkMsTUFDQ3pELEVBRG9CeUQsRUFBZWxCLEdBQVdtQixhQUN2QnhCLFFBRVI1bUgsSUFBWDBrSCxJQUVKbGtJLEtBQUtzaUksa0JBQW1CNEIsR0FDeEJsa0ksS0FBSzZuSSxzQkFBdUIzRCxJQU05QixNQUNDd0UsRUFEc0Ixb0ksS0FBS3NtSSx1QkFDS0YsR0FFakMsUUFBdUI1bUgsSUFBbEJrcEgsRUFFSixJQUFNLE1BQU1wWCxLQUFhb1gsRUFBZ0IsQ0FFeEMsTUFBTTlPLEVBQVU4TyxFQUFlcFgsR0FDL0JzSSxFQUFRK0IsdUJBQ1IzN0gsS0FBS29vSSx1QkFBd0J4TyxJQVNoQ29RLGNBQWVyaEIsRUFBTXdnQixHQUVwQixNQUFNakYsRUFBU2xrSSxLQUFLc3BJLGVBQWdCM2dCLEVBQU13Z0IsR0FFMUIsT0FBWGpGLElBRUpsa0ksS0FBS3NpSSxrQkFBbUI0QixHQUN4QmxrSSxLQUFLNm5JLHNCQUF1QjNELE9BUWhCM2tJLFVBQVV3cEksaUNBQW1DLElBQUlwMUgsYUFBYyxHQUU5RSxNQUFNczJILEdBRUx0aEksWUFBYTNKLEdBRVUsaUJBQVZBLElBRVgyRCxRQUFRdWhCLEtBQU0sc0RBQ2RsbEIsRUFBUStFLFVBQVcsSUFJcEIvRCxLQUFLaEIsTUFBUUEsRUFJZCtrQixRQUVDLE9BQU8sSUFBSWttSCxRQUE4QnpxSCxJQUFyQnhmLEtBQUtoQixNQUFNK2tCLE1BQXNCL2pCLEtBQUtoQixNQUFRZ0IsS0FBS2hCLE1BQU0ra0IsV0FNL0UsY0FBeUM0cUYsR0FFeENobUcsWUFBYStaLEVBQU8yL0IsRUFBUXNkLEVBQW1CLEdBRTlDbHVDLE1BQU8vTyxFQUFPMi9CLEdBRWRyaUQsS0FBSzIvRCxpQkFBbUJBLEVBSXpCMzdDLEtBQU0rSSxHQU1MLE9BSkEwRSxNQUFNek4sS0FBTStJLEdBRVovc0IsS0FBSzIvRCxpQkFBbUI1eUMsRUFBTzR5QyxpQkFFeEIzL0QsS0FJUitqQixNQUFPL0wsR0FFTixNQUFNaEssRUFBS3lqQixNQUFNMU4sTUFBTy9MLEdBSXhCLE9BRkFoSyxFQUFHMnhELGlCQUFtQjMvRCxLQUFLMi9ELGlCQUVwQjN4RCxFQUlScEMsT0FBUW9NLEdBRVAsTUFBTWsrRixFQUFPemtGLE1BQU03bEIsT0FBUW9NLEdBSzNCLE9BSEFrK0YsRUFBS2oxQyw4QkFBK0IsRUFDcENpMUMsRUFBS3YyQyxpQkFBbUIzL0QsS0FBSzIvRCxpQkFFdEJ1MkMsS0FNa0IzMkcsVUFBVTBoRSw4QkFBK0IsRUE0S3BFLE1BQU1pcEUsR0FFTHZoSSxZQUFheEMsRUFBUyxFQUFHazNCLEVBQU0sRUFBR3JTLEVBQVEsR0FNekMsT0FKQWhyQixLQUFLbUcsT0FBU0EsRUFDZG5HLEtBQUtxOUIsSUFBTUEsRUFDWHI5QixLQUFLZ3JCLE1BQVFBLEVBRU5ockIsS0FJUjJNLElBQUt4RyxFQUFRazNCLEVBQUtyUyxHQU1qQixPQUpBaHJCLEtBQUttRyxPQUFTQSxFQUNkbkcsS0FBS3E5QixJQUFNQSxFQUNYcjlCLEtBQUtnckIsTUFBUUEsRUFFTmhyQixLQUlSZ2tCLEtBQU1tbUgsR0FNTCxPQUpBbnFJLEtBQUttRyxPQUFTZ2tJLEVBQU1oa0ksT0FDcEJuRyxLQUFLcTlCLElBQU04c0csRUFBTTlzRyxJQUNqQnI5QixLQUFLZ3JCLE1BQVFtL0csRUFBTW4vRyxNQUVaaHJCLEtBS1JvcUksV0FFQyxNQUFNQyxFQUFNLEtBR1osT0FGQXJxSSxLQUFLcTlCLElBQU14OUIsS0FBS2tHLElBQUtza0ksRUFBS3hxSSxLQUFLMEcsSUFBSzFHLEtBQUtvSCxHQUFLb2pJLEVBQUtycUksS0FBS3E5QixNQUVqRHI5QixLQUlSOHJDLGVBQWdCN3JDLEdBRWYsT0FBT0QsS0FBS3NxSSx1QkFBd0JycUksRUFBRVUsRUFBR1YsRUFBRVksRUFBR1osRUFBRWlCLEdBSWpEb3BJLHVCQUF3QjNwSSxFQUFHRSxFQUFHSyxHQWdCN0IsT0FkQWxCLEtBQUttRyxPQUFTdEcsS0FBSzJsQixLQUFNN2tCLEVBQUlBLEVBQUlFLEVBQUlBLEVBQUlLLEVBQUlBLEdBRXhCLElBQWhCbEIsS0FBS21HLFFBRVRuRyxLQUFLZ3JCLE1BQVEsRUFDYmhyQixLQUFLcTlCLElBQU0sSUFJWHI5QixLQUFLZ3JCLE1BQVFuckIsS0FBSytsQixNQUFPamxCLEVBQUdPLEdBQzVCbEIsS0FBS3E5QixJQUFNeDlCLEtBQUswekIsS0FBTW5RLEVBQU92aUIsRUFBSWIsS0FBS21HLFFBQVUsRUFBRyxLQUk3Q25HLEtBSVIrakIsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLGFBQWNxYixLQUFNaGtCLE9Ba0V0QyxNQUFNdXFJLEdBQTBCLElBQUkvbUgsRUFFcEMsTUFBTWduSCxHQUVMN2hJLFlBQWFwQyxFQUFNLElBQUlpZCxFQUFTLElBQVksS0FBY3pkLEVBQU0sSUFBSXlkLEdBQVMsS0FBWSxNQUV4RnhqQixLQUFLdUcsSUFBTUEsRUFDWHZHLEtBQUsrRixJQUFNQSxFQUlaNEcsSUFBS3BHLEVBQUtSLEdBS1QsT0FIQS9GLEtBQUt1RyxJQUFJeWQsS0FBTXpkLEdBQ2Z2RyxLQUFLK0YsSUFBSWllLEtBQU1qZSxHQUVSL0YsS0FJUncrQixjQUFlQyxHQUVkeitCLEtBQUswK0IsWUFFTCxJQUFNLElBQUk1OUIsRUFBSSxFQUFHaTFCLEVBQUswSSxFQUFPMy9CLE9BQVFnQyxFQUFJaTFCLEVBQUlqMUIsSUFFNUNkLEtBQUsyK0IsY0FBZUYsRUFBUTM5QixJQUk3QixPQUFPZCxLQUlSNCtCLHFCQUFzQjdYLEVBQVExUCxHQUU3QixNQUFNd25CLEVBQVcwckcsR0FBVXZtSCxLQUFNM00sR0FBT3FOLGVBQWdCLElBSXhELE9BSEExa0IsS0FBS3VHLElBQUl5ZCxLQUFNK0MsR0FBU3pDLElBQUt1YSxHQUM3QjcrQixLQUFLK0YsSUFBSWllLEtBQU0rQyxHQUFTOUMsSUFBSzRhLEdBRXRCNytCLEtBSVIrakIsUUFFQyxPQUFPLElBQUkvakIsS0FBSzJJLGFBQWNxYixLQUFNaGtCLE1BSXJDZ2tCLEtBQU1tYixHQUtMLE9BSEFuL0IsS0FBS3VHLElBQUl5ZCxLQUFNbWIsRUFBSTU0QixLQUNuQnZHLEtBQUsrRixJQUFJaWUsS0FBTW1iLEVBQUlwNUIsS0FFWi9GLEtBSVIwK0IsWUFLQyxPQUhBMStCLEtBQUt1RyxJQUFJNUYsRUFBSVgsS0FBS3VHLElBQUkxRixFQUFJLElBQzFCYixLQUFLK0YsSUFBSXBGLEVBQUlYLEtBQUsrRixJQUFJbEYsR0FBSSxJQUVuQmIsS0FJUm8vQixVQUlDLE9BQVNwL0IsS0FBSytGLElBQUlwRixFQUFJWCxLQUFLdUcsSUFBSTVGLEdBQVNYLEtBQUsrRixJQUFJbEYsRUFBSWIsS0FBS3VHLElBQUkxRixFQUkvRHcrQixVQUFXNWMsR0FFVixPQUFPemlCLEtBQUtvL0IsVUFBWTNjLEVBQU85VixJQUFLLEVBQUcsR0FBTThWLEVBQU8wQixXQUFZbmtCLEtBQUt1RyxJQUFLdkcsS0FBSytGLEtBQU0yZSxlQUFnQixJQUl0RzRhLFFBQVM3YyxHQUVSLE9BQU96aUIsS0FBS28vQixVQUFZM2MsRUFBTzlWLElBQUssRUFBRyxHQUFNOFYsRUFBTzhCLFdBQVl2a0IsS0FBSytGLElBQUsvRixLQUFLdUcsS0FJaEZvNEIsY0FBZVksR0FLZCxPQUhBdi9CLEtBQUt1RyxJQUFJQSxJQUFLZzVCLEdBQ2R2L0IsS0FBSytGLElBQUlBLElBQUt3NUIsR0FFUHYvQixLQUlSdy9CLGVBQWdCQyxHQUtmLE9BSEF6L0IsS0FBS3VHLElBQUkrZCxJQUFLbWIsR0FDZHovQixLQUFLK0YsSUFBSWtlLElBQUt3YixHQUVQei9CLEtBSVIwL0IsZUFBZ0JoYyxHQUtmLE9BSEExakIsS0FBS3VHLElBQUk2ZCxXQUFhVixHQUN0QjFqQixLQUFLK0YsSUFBSXFlLFVBQVdWLEdBRWIxakIsS0FJUm9nQyxjQUFlYixHQUVkLFFBQU9BLEVBQU01K0IsRUFBSVgsS0FBS3VHLElBQUk1RixHQUFLNCtCLEVBQU01K0IsRUFBSVgsS0FBSytGLElBQUlwRixHQUNqRDQrQixFQUFNMStCLEVBQUliLEtBQUt1RyxJQUFJMUYsR0FBSzArQixFQUFNMStCLEVBQUliLEtBQUsrRixJQUFJbEYsR0FJN0N3L0IsWUFBYWxCLEdBRVosT0FBT24vQixLQUFLdUcsSUFBSTVGLEdBQUt3K0IsRUFBSTU0QixJQUFJNUYsR0FBS3crQixFQUFJcDVCLElBQUlwRixHQUFLWCxLQUFLK0YsSUFBSXBGLEdBQ3ZEWCxLQUFLdUcsSUFBSTFGLEdBQUtzK0IsRUFBSTU0QixJQUFJMUYsR0FBS3MrQixFQUFJcDVCLElBQUlsRixHQUFLYixLQUFLK0YsSUFBSWxGLEVBSW5EeS9CLGFBQWNmLEVBQU85YyxHQUtwQixPQUFPQSxFQUFPOVYsS0FDWDR5QixFQUFNNStCLEVBQUlYLEtBQUt1RyxJQUFJNUYsSUFBUVgsS0FBSytGLElBQUlwRixFQUFJWCxLQUFLdUcsSUFBSTVGLElBQ2pENCtCLEVBQU0xK0IsRUFBSWIsS0FBS3VHLElBQUkxRixJQUFRYixLQUFLK0YsSUFBSWxGLEVBQUliLEtBQUt1RyxJQUFJMUYsSUFLckQwL0IsY0FBZXBCLEdBSWQsUUFBT0EsRUFBSXA1QixJQUFJcEYsRUFBSVgsS0FBS3VHLElBQUk1RixHQUFLdytCLEVBQUk1NEIsSUFBSTVGLEVBQUlYLEtBQUsrRixJQUFJcEYsR0FDckR3K0IsRUFBSXA1QixJQUFJbEYsRUFBSWIsS0FBS3VHLElBQUkxRixHQUFLcytCLEVBQUk1NEIsSUFBSTFGLEVBQUliLEtBQUsrRixJQUFJbEYsR0FJakQ2L0IsV0FBWW5CLEVBQU85YyxHQUVsQixPQUFPQSxFQUFPdUIsS0FBTXViLEdBQVFuYyxNQUFPcGpCLEtBQUt1RyxJQUFLdkcsS0FBSytGLEtBSW5ENDdCLGdCQUFpQnBDLEdBR2hCLE9BRHFCZ3JHLEdBQVV2bUgsS0FBTXViLEdBQVFuYyxNQUFPcGpCLEtBQUt1RyxJQUFLdkcsS0FBSytGLEtBQy9DdWUsSUFBS2liLEdBQVF6Z0MsU0FJbEMraUMsVUFBVzFDLEdBS1YsT0FIQW4vQixLQUFLdUcsSUFBSVIsSUFBS281QixFQUFJNTRCLEtBQ2xCdkcsS0FBSytGLElBQUlRLElBQUs0NEIsRUFBSXA1QixLQUVYL0YsS0FJUmtnQyxNQUFPZixHQUtOLE9BSEFuL0IsS0FBS3VHLElBQUlBLElBQUs0NEIsRUFBSTU0QixLQUNsQnZHLEtBQUsrRixJQUFJQSxJQUFLbzVCLEVBQUlwNUIsS0FFWC9GLEtBSVJ3SCxVQUFXZ2YsR0FLVixPQUhBeG1CLEtBQUt1RyxJQUFJMGQsSUFBS3VDLEdBQ2R4bUIsS0FBSytGLElBQUlrZSxJQUFLdUMsR0FFUHhtQixLQUlSc21CLE9BQVE2WSxHQUVQLE9BQU9BLEVBQUk1NEIsSUFBSStmLE9BQVF0bUIsS0FBS3VHLE1BQVM0NEIsRUFBSXA1QixJQUFJdWdCLE9BQVF0bUIsS0FBSytGLE1BTTVEeWtJLEdBQUtqckksVUFBVWtySSxRQUFTLEVBbU14QixNQUFNQyxHQUEwQixJQUFJN3ZHLEdBQzlCOHZHLEdBQTRCLElBQUlua0csR0FDaENva0csR0FBZ0MsSUFBSXBrRyxHQXdGMUMsU0FBU3FrRyxHQUFhN3JHLEdBRXJCLE1BQU04ckcsRUFBVyxJQUVNLElBQWxCOXJHLEVBQU9reUUsUUFFWDQ1QixFQUFTdG9JLEtBQU13OEIsR0FJaEIsSUFBTSxJQUFJbCtCLEVBQUksRUFBR0EsRUFBSWsrQixFQUFPbUIsU0FBU3JoQyxPQUFRZ0MsSUFFNUNncUksRUFBU3RvSSxLQUFLMkgsTUFBTzJnSSxFQUFVRCxHQUFhN3JHLEVBQU9tQixTQUFVci9CLEtBSTlELE9BQU9ncUksRUF1c0NSLE1BQU1DLEdBQVUsSUFBSTcrSCxZQUFhLEdBSTNCOCtILElBSGEsSUFBSXIzSCxhQUFjbzNILElBQ2pCLElBQUluL0csWUFBYW0vRyxJQUVsQixJQUFJbi9HLFlBQWEsTUFDOUJxL0csR0FBYyxJQUFJci9HLFlBQWEsS0FFckMsSUFBTSxJQUFJOXFCLEVBQUksRUFBR0EsRUFBSSxNQUFRQSxFQUFJLENBRWhDLE1BQU16QixFQUFJeUIsRUFBSSxJQUlUekIsR0FBTSxJQUVWMnJJLEdBQVlscUksR0FBTSxFQUNsQmtxSSxHQUFnQixJQUFKbHFJLEdBQWMsTUFDMUJtcUksR0FBYW5xSSxHQUFNLEdBQ25CbXFJLEdBQWlCLElBQUpucUksR0FBYyxJQUloQnpCLEdBQU0sSUFFakIyckksR0FBWWxxSSxHQUFNLE9BQWN6QixFQUFJLEdBQ3BDMnJJLEdBQWdCLElBQUpscUksR0FBZ0IsT0FBY3pCLEVBQUksR0FBUyxNQUN2RDRySSxHQUFhbnFJLElBQVF6QixFQUFJLEVBQ3pCNHJJLEdBQWlCLElBQUpucUksSUFBZ0J6QixFQUFJLEdBSXRCQSxHQUFLLElBRWhCMnJJLEdBQVlscUksR0FBUXpCLEVBQUksSUFBUSxHQUNoQzJySSxHQUFnQixJQUFKbHFJLEdBQWtCekIsRUFBSSxJQUFRLEdBQU8sTUFDakQ0ckksR0FBYW5xSSxHQUFNLEdBQ25CbXFJLEdBQWlCLElBQUpucUksR0FBYyxJQUloQnpCLEVBQUksS0FFZjJySSxHQUFZbHFJLEdBQU0sTUFDbEJrcUksR0FBZ0IsSUFBSmxxSSxHQUFjLE1BQzFCbXFJLEdBQWFucUksR0FBTSxHQUNuQm1xSSxHQUFpQixJQUFKbnFJLEdBQWMsS0FNM0JrcUksR0FBWWxxSSxHQUFNLE1BQ2xCa3FJLEdBQWdCLElBQUpscUksR0FBYyxNQUMxQm1xSSxHQUFhbnFJLEdBQU0sR0FDbkJtcUksR0FBaUIsSUFBSm5xSSxHQUFjLElBUTdCLE1BQU1vcUksR0FBaUIsSUFBSXQvRyxZQUFhLE1BQ2xDdS9HLEdBQWlCLElBQUl2L0csWUFBYSxJQUNsQ3cvRyxHQUFlLElBQUl4L0csWUFBYSxJQUV0QyxJQUFNLElBQUk5cUIsRUFBSSxFQUFHQSxFQUFJLE9BQVNBLEVBQUksQ0FFakMsSUFBSUcsRUFBSUgsR0FBSyxHQUNUekIsRUFBSSxFQUdSLEtBQStCLElBQWpCLFFBQUo0QixJQUVUQSxJQUFNLEVBQ041QixHQUFLLFFBSU40QixJQUFLLFFBQ0w1QixHQUFLLFVBRUw2ckksR0FBZ0JwcUksR0FBTUcsRUFBSTVCLEVBSTNCLElBQU0sSUFBSXlCLEVBQUksS0FBTUEsRUFBSSxPQUFTQSxFQUVoQ29xSSxHQUFnQnBxSSxHQUFNLFdBQWlCQSxFQUFJLE1BQVUsSUFJdEQsSUFBTSxJQUFJQSxFQUFJLEVBQUdBLEVBQUksS0FBT0EsRUFFM0JxcUksR0FBZ0JycUksR0FBTUEsR0FBSyxHQUk1QnFxSSxHQUFnQixJQUFPLFdBQ3ZCQSxHQUFnQixJQUFPLFdBQ3ZCLElBQU0sSUFBSXJxSSxFQUFJLEdBQUlBLEVBQUksS0FBT0EsRUFFNUJxcUksR0FBZ0JycUksR0FBTSxZQUFpQkEsRUFBSSxJQUFRLElBSXBEcXFJLEdBQWdCLElBQU8sV0FFdkIsSUFBTSxJQUFJcnFJLEVBQUksRUFBR0EsRUFBSSxLQUFPQSxFQUVoQixLQUFOQSxJQUVKc3FJLEdBQWN0cUksR0FBTSxNQzk1K0N0QixTQUFTdXFJLEtBQ0wsT0FBTyxJQUFJNTlGLEdBRWYsU0FBUzY5RixHQUFVQyxHQUNmLElBQUlqWSxFQUFTLElBQUl3RCxHQUNibDNGLEVBQVcsSUFBSW1sQixHQUFZd21GLEVBQUtubkksTUFBT21uSSxFQUFLbG5JLE9BQVEsR0FDcERndUMsRUFBVyxJQUFJNkosR0FBa0IsQ0FDakM5cEMsSUFBS2toSCxFQUFPVSxLQUFLLFlBQVl4b0gsT0FBTysvSCxFQUFLbDFILEtBQU0sU0FDL0N3L0IsYUFBYSxJQUVqQixPQUFPLElBQUkrTixHQUFLaGtCLEVBQVV5UyxHQ1h2QixTQUFTaFQsR0FBVW1zRyxHQUN0QixNQUFPLENBQ0g3cUksRUFBRzZxSSxFQUFVQyxRQUFPLFNBQVVsZ0UsRUFBSzlwRSxHQUFLLE9BQU9BLEVBQUVkLEVBQUk0cUUsSUFBUSxHQUFLaWdFLEVBQVUxc0ksT0FDNUUrQixFQUFHMnFJLEVBQVVDLFFBQU8sU0FBVWxnRSxFQUFLOXBFLEdBQUssT0FBT0EsRUFBRVosRUFBSTBxRSxJQUFRLEdBQUtpZ0UsRUFBVTFzSSxPQUM1RW9DLEVBQUdzcUksRUFBVUMsUUFBTyxTQUFVbGdFLEVBQUs5cEUsR0FBSyxPQUFPQSxFQUFFUCxFQUFJcXFFLElBQVEsR0FBS2lnRSxFQUFVMXNJLFFBRzdFLFNBQVM0c0ksR0FBUzlzSSxFQUFHQyxHQUN4QixPQUFPZ0IsS0FBSytsQixNQUFNL21CLEVBQUVnQyxFQUFJakMsRUFBRWlDLEVBQUdoQyxFQUFFOEIsRUFBSS9CLEVBQUUrQixHRnluL0N6Q296RyxHQUFNMXJHLE9BQVMsU0FBV3NqSSxFQUFXMTNCLEdBUXBDLE9BTkF0eEcsUUFBUWdOLElBQUssNENBRWJnOEgsRUFBVXBzSSxVQUFZTCxPQUFPbUosT0FBUTByRyxHQUFNeDBHLFdBQzNDb3NJLEVBQVVwc0ksVUFBVW9KLFlBQWNnakksRUFDbENBLEVBQVVwc0ksVUFBVTAwRyxTQUFXQSxFQUV4QjAzQixHQU1SOXdCLEdBQUt0N0csVUFBVXFzSSxXQUFhLFNBQVdudEcsR0FHdEMsT0FEQTk3QixRQUFRdWhCLEtBQU0sbUVBQ1Bsa0IsS0FBS3crQixjQUFlQyxJQXY0QzVCLGNBQXlCdTBFLEdBRXhCcnFHLFlBQWEwTyxFQUFPLEdBQUlpOUYsRUFBWSxHQUFJeGxGLEVBQVMsUUFBVUMsRUFBUyxTQUVuRUQsRUFBUyxJQUFJOUIsR0FBTzhCLEdBQ3BCQyxFQUFTLElBQUkvQixHQUFPK0IsR0FFcEIsTUFBTWhJLEVBQVN1dEYsRUFBWSxFQUNyQm43RSxFQUFPOWhCLEVBQU9pOUYsRUFDZHoxRSxFQUFXeG5CLEVBQU8sRUFFbEIrdEMsRUFBVyxHQUFJbkksRUFBUyxHQUU5QixJQUFNLElBQUluOEMsRUFBSSxFQUFHRSxFQUFJLEVBQUcwQixHQUFNbThCLEVBQVUvOUIsR0FBS3d6RyxFQUFXeHpHLElBQU00QixHQUFLeTJCLEVBQU8sQ0FFekVpc0IsRUFBUzVpRCxNQUFRcThCLEVBQVUsRUFBR244QixFQUFHbThCLEVBQVUsRUFBR244QixHQUM5QzBpRCxFQUFTNWlELEtBQU1FLEVBQUcsR0FBS204QixFQUFVbjhCLEVBQUcsRUFBR204QixHQUV2QyxNQUFNNTRCLEVBQVFuRixJQUFNaW1CLEVBQVMrSCxFQUFTQyxFQUV0QzlvQixFQUFNd2dCLFFBQVN3MkIsRUFBUWo4QyxHQUFLQSxHQUFLLEVBQ2pDaUYsRUFBTXdnQixRQUFTdzJCLEVBQVFqOEMsR0FBS0EsR0FBSyxFQUNqQ2lGLEVBQU13Z0IsUUFBU3cyQixFQUFRajhDLEdBQUtBLEdBQUssRUFDakNpRixFQUFNd2dCLFFBQVN3MkIsRUFBUWo4QyxHQUFLQSxHQUFLLEVBSWxDLE1BQU00K0IsRUFBVyxJQUFJMGUsR0FDckIxZSxFQUFTemxCLGFBQWMsV0FBWSxJQUFJMmpDLEdBQXdCc0gsRUFBVSxJQUN6RXhsQixFQUFTemxCLGFBQWMsUUFBUyxJQUFJMmpDLEdBQXdCYixFQUFRLElBSXBFeHJCLE1BQU9tTyxFQUZVLElBQUlpZ0QsR0FBbUIsQ0FBRWxxQyxjQUFjLEVBQU1nQyxZQUFZLEtBSTFFMzNDLEtBQUs2VyxLQUFPLGVBMjRDSHRYLFVBQVVzc0ksVUFBWSxXQUVoQ2xwSSxRQUFRQyxNQUFPLDZGQXhyRGhCLGNBQTZCb3dHLEdBRTVCcnFHLFlBQWFxMkIsR0FFWixNQUFNcWhELEVBQVF3cUQsR0FBYTdyRyxHQUVyQlksRUFBVyxJQUFJMGUsR0FFZjhHLEVBQVcsR0FDWG5JLEVBQVMsR0FFVG51QixFQUFTLElBQUk5QixHQUFPLEVBQUcsRUFBRyxHQUMxQitCLEVBQVMsSUFBSS9CLEdBQU8sRUFBRyxFQUFHLEdBRWhDLElBQU0sSUFBSWxzQixFQUFJLEVBQUdBLEVBQUl1L0UsRUFBTXZoRixPQUFRZ0MsSUFBTyxDQUV6QyxNQUFNMjhILEVBQU9wOUMsRUFBT3YvRSxHQUVmMjhILEVBQUsvdkYsUUFBVSt2RixFQUFLL3ZGLE9BQU93akUsU0FFL0I5ckQsRUFBUzVpRCxLQUFNLEVBQUcsRUFBRyxHQUNyQjRpRCxFQUFTNWlELEtBQU0sRUFBRyxFQUFHLEdBQ3JCeTZDLEVBQU96NkMsS0FBTXNzQixFQUFPdHJCLEVBQUdzckIsRUFBT2x2QixFQUFHa3ZCLEVBQU9qd0IsR0FDeENvK0MsRUFBT3o2QyxLQUFNdXNCLEVBQU92ckIsRUFBR3VyQixFQUFPbnZCLEVBQUdtdkIsRUFBT2x3QixJQU0xQytnQyxFQUFTemxCLGFBQWMsV0FBWSxJQUFJMmpDLEdBQXdCc0gsRUFBVSxJQUN6RXhsQixFQUFTemxCLGFBQWMsUUFBUyxJQUFJMmpDLEdBQXdCYixFQUFRLElBSXBFeHJCLE1BQU9tTyxFQUZVLElBQUlpZ0QsR0FBbUIsQ0FBRWxxQyxjQUFjLEVBQU1VLFdBQVcsRUFBT0MsWUFBWSxFQUFPcUIsWUFBWSxFQUFPOUIsYUFBYSxLQUluSTcxQyxLQUFLNlcsS0FBTyxpQkFDWjdXLEtBQUs4ckksa0JBQW1CLEVBRXhCOXJJLEtBQUtnOUgsS0FBT2grRixFQUNaaC9CLEtBQUtxZ0YsTUFBUUEsRUFFYnJnRixLQUFLaXJCLE9BQVMrVCxFQUFPOUMsWUFDckJsOEIsS0FBSzZ4QixrQkFBbUIsRUFJekI2ZSxrQkFBbUJDLEdBRWxCLE1BQU0wdkMsRUFBUXJnRixLQUFLcWdGLE1BRWJ6Z0QsRUFBVzUvQixLQUFLNC9CLFNBQ2hCRSxFQUFXRixFQUFTa2YsYUFBYyxZQUV4QzhyRixHQUFnQjVtSCxLQUFNaGtCLEtBQUtnOUgsS0FBSzlnRyxhQUFjclMsU0FFOUMsSUFBTSxJQUFJL29CLEVBQUksRUFBR0UsRUFBSSxFQUFHRixFQUFJdS9FLEVBQU12aEYsT0FBUWdDLElBQU8sQ0FFaEQsTUFBTTI4SCxFQUFPcDlDLEVBQU92L0UsR0FFZjI4SCxFQUFLL3ZGLFFBQVUrdkYsRUFBSy92RixPQUFPd2pFLFNBRS9CeTVCLEdBQVlyaUgsaUJBQWtCc2lILEdBQWlCbk4sRUFBS3ZoRyxhQUNwRHd1RyxHQUFVanRHLHNCQUF1Qmt0RyxJQUNqQzdxRyxFQUFTeWQsT0FBUXY4QyxFQUFHMHBJLEdBQVUvcEksRUFBRytwSSxHQUFVN3BJLEVBQUc2cEksR0FBVXhwSSxHQUV4RHlwSSxHQUFZcmlILGlCQUFrQnNpSCxHQUFpQm5OLEVBQUsvdkYsT0FBT3hSLGFBQzNEd3VHLEdBQVVqdEcsc0JBQXVCa3RHLElBQ2pDN3FHLEVBQVN5ZCxPQUFRdjhDLEVBQUksRUFBRzBwSSxHQUFVL3BJLEVBQUcrcEksR0FBVTdwSSxFQUFHNnBJLEdBQVV4cEksR0FFNURGLEdBQUssR0FNUDQrQixFQUFTa2YsYUFBYyxZQUFhMXVCLGFBQWMsRUFFbERxQixNQUFNaWYsa0JBQW1CQyxLQThtRFpweEMsVUFBVXc0QixPQUFTLFdBRWpDcDFCLFFBQVFDLE1BQU8saUVBaUJoQjh3SCxHQUFPbjBILFVBQVV3c0ksZUFBaUIsU0FBV2owSCxHQUc1QyxPQURBblYsUUFBUXVoQixLQUFNLHdHQXJwUGYsTUFFQ3FMLGtCQUFtQjdNLEdBRWxCLEdBQTRCLG9CQUFoQm5ZLFlBRVgsT0FBTyxJQUFJQSxhQUFjNkYsT0FBUXNTLEdBT2xDLElBQUlwZixFQUFJLEdBRVIsSUFBTSxJQUFJeEMsRUFBSSxFQUFHaTFCLEVBQUtyVCxFQUFNNWpCLE9BQVFnQyxFQUFJaTFCLEVBQUlqMUIsSUFHM0N3QyxHQUFLa0csT0FBT1UsYUFBY3dZLEVBQU81aEIsSUFJbEMsSUFJQyxPQUFPa3JJLG1CQUFvQkMsT0FBUTNvSSxJQUVsQyxNQUFRakUsR0FFVCxPQUFPaUUsR0FNVGlzQixzQkFBdUJ6WCxHQUV0QixNQUFNbFIsRUFBUWtSLEVBQUlqQyxZQUFhLEtBRS9CLE9BQWlCLElBQVpqUCxFQUF1QixLQUVyQmtSLEVBQUloTSxNQUFPLEVBQUdsRixFQUFRLEdBSTlCMm9CLGtCQUFtQnpYLEVBQUtvQyxHQUd2QixNQUFvQixpQkFBUnBDLEdBQTRCLEtBQVJBLEVBQW9CLElBRy9DLGdCQUFnQnhNLEtBQU00TyxJQUFVLE1BQU01TyxLQUFNd00sS0FFaERvQyxFQUFPQSxFQUFLazlELFFBQVMsMEJBQTJCLE9BSzVDLG1CQUFtQjlyRSxLQUFNd00sSUFHekIsZ0JBQWdCeE0sS0FBTXdNLElBR3RCLGFBQWF4TSxLQUFNd00sR0FOcUJBLEVBU3RDb0MsRUFBT3BDLEtBa2xQSWkwSCxlQUFnQmowSCxJQUlwQzQ3RyxHQUFPd1ksU0FBVyxDQUVqQmpvSCxJQUFLLFdBRUp0aEIsUUFBUUMsTUFBTyw0RkFJaEJnVSxJQUFLLFdBRUpqVSxRQUFRQyxNQUFPLDZGQThCakI0bkksR0FBS2pySSxVQUFVd25CLE9BQVMsU0FBV290RixHQUdsQyxPQURBeHhHLFFBQVF1aEIsS0FBTSwyREFDUGxrQixLQUFLcS9CLFVBQVc4MEUsSUFJeEJxMkIsR0FBS2pySSxVQUFVNHNJLE1BQVEsV0FHdEIsT0FEQXhwSSxRQUFRdWhCLEtBQU0sd0RBQ1Bsa0IsS0FBS28vQixXQUlib3JHLEdBQUtqckksVUFBVTZzSSxrQkFBb0IsU0FBV2p0RyxHQUc3QyxPQURBeDhCLFFBQVF1aEIsS0FBTSwwRUFDUGxrQixLQUFLdWdDLGNBQWVwQixJQUk1QnFyRyxHQUFLanJJLFVBQVU4WCxLQUFPLFNBQVc4OEYsR0FHaEMsT0FEQXh4RyxRQUFRdWhCLEtBQU0sdURBQ1Bsa0IsS0FBS3MvQixRQUFTNjBFLElBTXRCcDJFLEdBQUt4K0IsVUFBVXduQixPQUFTLFNBQVdvdEYsR0FHbEMsT0FEQXh4RyxRQUFRdWhCLEtBQU0sMkRBQ1Bsa0IsS0FBS3EvQixVQUFXODBFLElBSXhCcDJFLEdBQUt4K0IsVUFBVTRzSSxNQUFRLFdBR3RCLE9BREF4cEksUUFBUXVoQixLQUFNLHdEQUNQbGtCLEtBQUtvL0IsV0FJYnJCLEdBQUt4K0IsVUFBVTZzSSxrQkFBb0IsU0FBV2p0RyxHQUc3QyxPQURBeDhCLFFBQVF1aEIsS0FBTSwwRUFDUGxrQixLQUFLdWdDLGNBQWVwQixJQUk1QnBCLEdBQUt4K0IsVUFBVThzSSxxQkFBdUIsU0FBVzVyRyxHQUdoRCxPQURBOTlCLFFBQVF1aEIsS0FBTSxnRkFDUGxrQixLQUFLd2dDLGlCQUFrQkMsSUFJL0IxQyxHQUFLeCtCLFVBQVU4WCxLQUFPLFNBQVc4OEYsR0FHaEMsT0FEQXh4RyxRQUFRdWhCLEtBQU0sdURBQ1Bsa0IsS0FBS3MvQixRQUFTNjBFLElBTXRCem9FLEdBQU1uc0MsVUFBVStzSSxVQUFZLFdBRTNCM3BJLFFBQVFDLE1BQU8sbUZBT2hCOC9CLEdBQU9uakMsVUFBVTRzSSxNQUFRLFdBR3hCLE9BREF4cEksUUFBUXVoQixLQUFNLDBEQUNQbGtCLEtBQUtvL0IsV0FNYnF0QixHQUFRbHRELFVBQVVndEksY0FBZ0IsU0FBV3RySSxHQUc1QyxPQURBMEIsUUFBUXVoQixLQUFNLG1GQUNQbGtCLEtBQUs4c0Qsd0JBQXlCN3JELElBZXRDa21CLEVBQVE1bkIsVUFBVWl0SSxxQkFBdUIsU0FBVzlwSCxFQUFPOEQsR0FHMUQsT0FEQTdqQixRQUFRdWhCLEtBQU0sdUZBQ1Bsa0IsS0FBS3ltQixRQUFTL0QsRUFBTzhELElBSTdCVyxFQUFRNW5CLFVBQVVrdEksZ0JBQWtCLFNBQVdodEcsR0FHOUMsT0FEQTk4QixRQUFRdWhCLEtBQU0sa0dBQ1B1YixFQUFPNWEsYUFBYzdrQixPQUk3Qm1uQixFQUFRNW5CLFVBQVVtdEkscUJBQXVCLFdBRXhDL3BJLFFBQVFDLE1BQU8sNkRBSWhCdWtCLEVBQVE1bkIsVUFBVW90SSx1QkFBeUIsU0FBV2htSCxHQUdyRCxPQURBaGtCLFFBQVF1aEIsS0FBTSw0R0FDUHlDLEVBQVU5QixhQUFjN2tCLE9BSWhDbW5CLEVBQVE1bkIsVUFBVXF0SSxvQkFBc0IsV0FFdkNqcUksUUFBUUMsTUFBTyw0REFJaEJ1a0IsRUFBUTVuQixVQUFVc3RJLFdBQWEsU0FBVzVoSCxHQUd6QyxPQURBdG9CLFFBQVF1aEIsS0FBTSxrR0FDUGxrQixLQUFLZ2tCLEtBQU1pSCxHQUFTcEIsVUFNNUIyYyxHQUFRam5DLFVBQVV1dEksZ0JBQWtCLFNBQVc3ckksR0FHOUMsT0FEQTBCLFFBQVF1aEIsS0FBTSwwRUFDUGxrQixLQUFLZ25DLGFBQWMvbEMsSUFJM0J1bEMsR0FBUWpuQyxVQUFVaXRJLHFCQUF1QixTQUFXOXBILEVBQU84RCxHQUcxRCxPQURBN2pCLFFBQVF1aEIsS0FBTSx1RkFDUGxrQixLQUFLeW1CLFFBQVMvRCxFQUFPOEQsSUFJN0JnZ0IsR0FBUWpuQyxVQUFVd3RJLFlBQWMsV0FHL0IsT0FEQXBxSSxRQUFRdWhCLEtBQU0seUdBQ1AsSUFBSTJXLElBQVU4QyxvQkFBcUIzOUIsS0FBTSxJQUlqRHdtQyxHQUFRam5DLFVBQVVvdkMsMEJBQTRCLFNBQVcxdkMsR0FHeEQsT0FEQTBELFFBQVF1aEIsS0FBTSxrR0FDUGxrQixLQUFLaW9DLDJCQUE0QmhwQyxJQUl6Q3VuQyxHQUFRam5DLFVBQVV5dEksZ0JBQWtCLFdBRW5DcnFJLFFBQVF1aEIsS0FBTSx3REFJZnNpQixHQUFRam5DLFVBQVVrdEksZ0JBQWtCLFNBQVdodEcsR0FHOUMsT0FEQTk4QixRQUFRdWhCLEtBQU0sa0dBQ1B1YixFQUFPcE0sYUFBY3J6QixPQUk3QndtQyxHQUFRam5DLFVBQVUwdEksZ0JBQWtCLFNBQVd4dEcsR0FHOUMsT0FEQTk4QixRQUFRdWhCLEtBQU0sa0dBQ1B1YixFQUFPcE0sYUFBY3J6QixPQUk3QndtQyxHQUFRam5DLFVBQVVtdEkscUJBQXVCLFdBRXhDL3BJLFFBQVFDLE1BQU8sNkRBSWhCNGpDLEdBQVFqbkMsVUFBVTJ0SSxXQUFhLFNBQVdqdEksR0FFekMwQyxRQUFRdWhCLEtBQU0sb0dBQ2Rqa0IsRUFBRWs4QixtQkFBb0JuOEIsT0FJdkJ3bUMsR0FBUWpuQyxVQUFVNHRJLFlBQWMsU0FBVzF0RyxHQUcxQyxPQURBOThCLFFBQVF1aEIsS0FBTSw4RkFDUHViLEVBQU9wTSxhQUFjcnpCLE9BSTdCd21DLEdBQVFqbkMsVUFBVWlJLFVBQVksV0FFN0I3RSxRQUFRQyxNQUFPLGtEQUloQjRqQyxHQUFRam5DLFVBQVV1dkMsUUFBVSxXQUUzQm5zQyxRQUFRQyxNQUFPLGdEQUloQjRqQyxHQUFRam5DLFVBQVV3dkMsUUFBVSxXQUUzQnBzQyxRQUFRQyxNQUFPLGdEQUloQjRqQyxHQUFRam5DLFVBQVV5dkMsUUFBVSxXQUUzQnJzQyxRQUFRQyxNQUFPLGdEQUloQjRqQyxHQUFRam5DLFVBQVU2dEksYUFBZSxXQUVoQ3pxSSxRQUFRQyxNQUFPLHFEQUloQjRqQyxHQUFRam5DLFVBQVVvdEksdUJBQXlCLFNBQVdobUgsR0FHckQsT0FEQWhrQixRQUFRdWhCLEtBQU0sNEdBQ1B5QyxFQUFVME0sYUFBY3J6QixPQUloQ3dtQyxHQUFRam5DLFVBQVVxdEksb0JBQXNCLFdBRXZDanFJLFFBQVFDLE1BQU8sNERBSWhCNGpDLEdBQVFqbkMsVUFBVTh0SSxZQUFjLFNBQVdyaUcsRUFBTUMsRUFBT0UsRUFBUUQsRUFBS0UsRUFBTUMsR0FHMUUsT0FEQTFvQyxRQUFRdWhCLEtBQU0sd0hBQ1Bsa0IsS0FBSytxQyxnQkFBaUJDLEVBQU1DLEVBQU9DLEVBQUtDLEVBQVFDLEVBQU1DLElBSTlEN0UsR0FBUWpuQyxVQUFVc3RJLFdBQWEsU0FBVzVoSCxHQUd6QyxPQURBdG9CLFFBQVF1aEIsS0FBTSxrR0FDUGxrQixLQUFLZ2tCLEtBQU1pSCxHQUFTcEIsVUFNNUIyaEMsR0FBTWpzRCxVQUFVK3RJLG1CQUFxQixTQUFXdmhGLEdBRy9DLE9BREFwcEQsUUFBUXVoQixLQUFNLDZFQUNQbGtCLEtBQUtnc0QsZUFBZ0JELElBTTdCOTFCLEdBQVcxMkIsVUFBVWt0SSxnQkFBa0IsU0FBV2h0RyxHQUdqRCxPQURBOThCLFFBQVF1aEIsS0FBTSxtSEFDUHViLEVBQU96RSxnQkFBaUJoN0IsT0FJaENpMkIsR0FBVzEyQixVQUFVZ3VJLFFBQVUsV0FHOUIsT0FEQTVxSSxRQUFRdWhCLEtBQU0sOERBQ1Bsa0IsS0FBSzZwQixVQU1iNFosR0FBSWxrQyxVQUFVNnNJLGtCQUFvQixTQUFXanRHLEdBRzVDLE9BREF4OEIsUUFBUXVoQixLQUFNLHlFQUNQbGtCLEtBQUt1Z0MsY0FBZXBCLElBSTVCc0UsR0FBSWxrQyxVQUFVaXVJLG9CQUFzQixTQUFXNXNHLEdBRzlDLE9BREFqK0IsUUFBUXVoQixLQUFNLDZFQUNQbGtCLEtBQUsyZ0MsZ0JBQWlCQyxJQUk5QjZDLEdBQUlsa0MsVUFBVThzSSxxQkFBdUIsU0FBVzVyRyxHQUcvQyxPQURBOTlCLFFBQVF1aEIsS0FBTSwrRUFDUGxrQixLQUFLd2dDLGlCQUFrQkMsSUFNL0IrUyxHQUFTajBDLFVBQVUrZ0gsS0FBTyxXQUd6QixPQURBMzlHLFFBQVF1aEIsS0FBTSwyREFDUGxrQixLQUFLMjBDLFdBSWJuQixHQUFTajBDLFVBQVVrdUksbUJBQXFCLFNBQVdsdUcsRUFBTzljLEdBR3pELE9BREE5ZixRQUFRdWhCLEtBQU0sOEVBQ1Bsa0IsS0FBS2kwQyxhQUFjMVUsRUFBTzljLElBSWxDK3dCLEdBQVNqMEMsVUFBVW11SSxTQUFXLFNBQVdqckgsR0FHeEMsT0FEQTlmLFFBQVF1aEIsS0FBTSxtRUFDUGxrQixLQUFLNDBDLFlBQWFueUIsSUFJMUIrd0IsR0FBU202RixnQkFBa0IsU0FBV2xySCxHQUdyQyxPQURBOWYsUUFBUXVoQixLQUFNLCtEQUNQbGtCLEtBQUs2MEMsVUFBV3B5QixJQUl4Qit3QixHQUFTajBDLFVBQVVxaEMsTUFBUSxTQUFXbmUsR0FHckMsT0FEQTlmLFFBQVF1aEIsS0FBTSw2REFDUGxrQixLQUFLODBDLFNBQVVyeUIsSUFJdkIrd0IsR0FBU2k2RixtQkFBcUIsU0FBV2x1RyxFQUFPM2dDLEVBQUdDLEVBQUc2QyxFQUFHK2dCLEdBR3hELE9BREE5ZixRQUFRdWhCLEtBQU0sOEVBQ1BzdkIsR0FBU1MsYUFBYzFVLEVBQU8zZ0MsRUFBR0MsRUFBRzZDLEVBQUcrZ0IsSUFJL0Mrd0IsR0FBU3ZXLE9BQVMsU0FBV3IrQixFQUFHQyxFQUFHNkMsRUFBRytnQixHQUdyQyxPQURBOWYsUUFBUXVoQixLQUFNLCtEQUNQc3ZCLEdBQVNxQixVQUFXajJDLEVBQUdDLEVBQUc2QyxFQUFHK2dCLElBTXJDcTVGLEdBQU12OEcsVUFBVXF1SSxpQkFBbUIsU0FBV3Q1QixHQUc3QyxPQURBM3hHLFFBQVF1aEIsS0FBTSxvRkFDUGxrQixLQUFLazhHLGNBQWU1SCxJQUk1QndILEdBQU12OEcsVUFBVXN1SSxRQUFVLFNBQVcvM0gsR0FHcEMsT0FEQW5ULFFBQVF1aEIsS0FBTSw0RUFDUCxJQUFJKzhGLEdBQWlCamhILEtBQU04VixJQUluQ2dtRyxHQUFNdjhHLFVBQVV1dUksYUFBZSxTQUFXaDRILEdBR3pDLE9BREFuVCxRQUFRdWhCLEtBQU0sK0VBQ1AsSUFBSTBpRyxHQUFlNW1ILEtBQU04VixJQU1qQzBOLEVBQVFqa0IsVUFBVXd1SSxjQUFnQixTQUFXcG5ILEVBQVcvZixFQUFPNGYsR0FHOUQsT0FEQTdqQixRQUFRdWhCLEtBQU0sK0VBQ1Bsa0IsS0FBSzBtQixvQkFBcUJDLEVBQVcvZixFQUFPNGYsSUFJcERoRCxFQUFRamtCLFVBQVV5dUksb0JBQXNCLFNBQVcvdEksR0FHbEQsT0FEQTBDLFFBQVF1aEIsS0FBTSxxRkFDUGxrQixLQUFLaW1CLG9CQUFxQmhtQixJQUlsQ3VqQixFQUFRamtCLFVBQVUwdUksZ0JBQWtCLFdBR25DLE9BREF0ckksUUFBUXVoQixLQUFNLDZFQUNQbGtCLEtBQUt5bEIsbUJBTWJvVixHQUFRdDdCLFVBQVUydUksMkJBQTZCLFdBRTlDdnJJLFFBQVFDLE1BQU8sOEdBSWhCaTRCLEdBQVF0N0IsVUFBVTR1SSx1QkFBeUIsV0FFMUN4ckksUUFBUUMsTUFBTyxzR0FJaEJpNEIsR0FBUXQ3QixVQUFVNnVJLHNCQUF3QixTQUFXbnRJLEdBR3BELE9BREEwQixRQUFRdWhCLEtBQU0seUZBQ1Bsa0IsS0FBS3k5QixzQkFBdUJ4OEIsSUFJcEM0NUIsR0FBUXQ3QixVQUFVOHVJLG1CQUFxQixTQUFXcHRJLEdBR2pELE9BREEwQixRQUFRdWhCLEtBQU0sbUZBQ1Bsa0IsS0FBSzA5QixtQkFBb0J6OEIsSUFJakM0NUIsR0FBUXQ3QixVQUFVK3VJLG9CQUFzQixTQUFXMW5JLEVBQU9xa0IsR0FHekQsT0FEQXRvQixRQUFRdWhCLEtBQU0scUZBQ1Bsa0IsS0FBSzI5QixvQkFBcUIxUyxFQUFRcmtCLElBSTFDaTBCLEdBQVF0N0IsVUFBVWd2SSxnQkFBa0IsU0FBV3R0SSxHQUc5QyxPQURBMEIsUUFBUXVoQixLQUFNLHVGQUNQbGtCLEtBQUtxekIsYUFBY3B5QixJQUkzQjQ1QixHQUFRdDdCLFVBQVV3dUksY0FBZ0IsU0FBV3BuSCxFQUFXL2YsRUFBTzRmLEdBRzlELE9BREE3akIsUUFBUXVoQixLQUFNLCtFQUNQbGtCLEtBQUswbUIsb0JBQXFCQyxFQUFXL2YsRUFBTzRmLElBSXBEcVUsR0FBUXQ3QixVQUFVeXVJLG9CQUFzQixTQUFXL3RJLEdBR2xELE9BREEwQyxRQUFRdWhCLEtBQU0scUZBQ1Bsa0IsS0FBS2ltQixvQkFBcUJobUIsSUFJbEM0NkIsR0FBUXQ3QixVQUFVMHVJLGdCQUFrQixXQUduQyxPQURBdHJJLFFBQVF1aEIsS0FBTSw2RUFDUGxrQixLQUFLeWxCLG1CQU1ieU4sR0FBUTN6QixVQUFVd3VJLGNBQWdCLFNBQVdwbkgsRUFBVy9mLEVBQU80ZixHQUc5RCxPQURBN2pCLFFBQVF1aEIsS0FBTSwrRUFDUGxrQixLQUFLMG1CLG9CQUFxQkMsRUFBVy9mLEVBQU80ZixJQUlwRDBNLEdBQVEzekIsVUFBVTB1SSxnQkFBa0IsV0FHbkMsT0FEQXRySSxRQUFRdWhCLEtBQU0sNkVBQ1Bsa0IsS0FBS3lsQixtQkFNYmdvQixHQUFTbHVDLFVBQVVpdkksZUFBaUIsU0FBV240SCxHQUc5QyxPQURBMVQsUUFBUXVoQixLQUFNLDZFQUNQbGtCLEtBQUtpd0MsZ0JBQWlCNTVCLElBSTlCbzNCLEdBQVNsdUMsVUFBVWt2SSxZQUFjLFdBRWhDOXJJLFFBQVF1aEIsS0FBTSw4RUFJZnVwQixHQUFTbHVDLFVBQVVpSSxVQUFZLFNBQVcwbkMsRUFBVXhXLEdBR25ELE9BREEvMUIsUUFBUXVoQixLQUFNLGtHQUNQbGtCLEtBQUtpdkMsZ0JBQWlCdlcsRUFBTXdXLElBSXBDekIsR0FBU2x1QyxVQUFVbXZJLGlCQUFtQixXQUVyQy9ySSxRQUFRQyxNQUFPLG1IQUloQjZxQyxHQUFTbHVDLFVBQVVvdkksWUFBYyxTQUFXMWpILEdBRzNDLE9BREF0b0IsUUFBUXVoQixLQUFNLHVFQUNQbGtCLEtBQUtxekIsYUFBY3BJLElBSTNCL3JCLE9BQU9DLGlCQUFrQnN1QyxHQUFTbHVDLFVBQVcsQ0FFNUNxdkksV0FBWSxDQUNYaDRILElBQUssV0FHSixPQURBalUsUUFBUXVoQixLQUFNLHVEQUNQbGtCLEtBQUs0SCxTQUFTcXdCLE9BR3RCdHJCLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sdURBQ2Rsa0IsS0FBSzRILFNBQVNxd0IsTUFBUWo1QixJQUl4QjZ2SSxjQUFlLENBQ2RqNEgsSUFBSyxXQUVKalUsUUFBUXVoQixLQUFNLGtHQUdmdlgsSUFBSyxXQUVKaEssUUFBUXVoQixLQUFNLHFHQU9qQjAvQixHQUFLcmtELFVBQVV1dkksWUFBYyxXQUU1Qm5zSSxRQUFRQyxNQUFPLDhMQUloQjFELE9BQU9DLGlCQUFrQnlrRCxHQUFLcmtELFVBQVcsQ0FFeEN3dkksU0FBVSxDQUNUbjRILElBQUssV0FHSixPQURBalUsUUFBUUMsTUFBTyxvR0EvcWdEUSxHQW1yZ0R4QitKLElBQUssV0FFSmhLLFFBQVFDLE1BQU8sNExBT2xCNnRHLEdBQVlseEcsVUFBVXl2SSxVQUFZLFdBRWpDcnNJLFFBQVFDLE1BQU8scURBTWhCZ2xELEdBQWtCcm9ELFVBQVUwdkksUUFBVSxTQUFXM21GLEVBQWFKLEdBRTdEdmxELFFBQVF1aEIsS0FBTSxvSEFHSzFFLElBQWQwb0MsSUFBMEJsb0QsS0FBS2tvRCxVQUFZQSxHQUNoRGxvRCxLQUFLcW9ELGVBQWdCQyxJQU10QnBwRCxPQUFPQyxpQkFBa0I0M0gsR0FBTXgzSCxVQUFXLENBQ3pDMnZJLFdBQVksQ0FDWHZpSSxJQUFLLFdBRUpoSyxRQUFRdWhCLEtBQU0sZ0RBSWhCaXJILGdCQUFpQixDQUNoQnhpSSxJQUFLLFNBQVczTixHQUVmMkQsUUFBUXVoQixLQUFNLDREQUNkbGtCLEtBQUswOEQsT0FBTzdnQyxPQUFPZ3NCLElBQU03b0QsSUFJM0Jvd0ksaUJBQWtCLENBQ2pCemlJLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sOERBQ2Rsa0IsS0FBSzA4RCxPQUFPN2dDLE9BQU9tUCxLQUFPaHNDLElBSTVCcXdJLGtCQUFtQixDQUNsQjFpSSxJQUFLLFNBQVczTixHQUVmMkQsUUFBUXVoQixLQUFNLGdFQUNkbGtCLEtBQUswOEQsT0FBTzdnQyxPQUFPb1AsTUFBUWpzQyxJQUk3QnN3SSxnQkFBaUIsQ0FDaEIzaUksSUFBSyxTQUFXM04sR0FFZjJELFFBQVF1aEIsS0FBTSw0REFDZGxrQixLQUFLMDhELE9BQU83Z0MsT0FBT3FQLElBQU1sc0MsSUFJM0J1d0ksbUJBQW9CLENBQ25CNWlJLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sa0VBQ2Rsa0IsS0FBSzA4RCxPQUFPN2dDLE9BQU9zUCxPQUFTbnNDLElBSTlCaThELGlCQUFrQixDQUNqQnR1RCxJQUFLLFNBQVczTixHQUVmMkQsUUFBUXVoQixLQUFNLDhEQUNkbGtCLEtBQUswOEQsT0FBTzdnQyxPQUFPdVAsS0FBT3BzQyxJQUk1Qms4RCxnQkFBaUIsQ0FDaEJ2dUQsSUFBSyxTQUFXM04sR0FFZjJELFFBQVF1aEIsS0FBTSw0REFDZGxrQixLQUFLMDhELE9BQU83Z0MsT0FBT3dQLElBQU1yc0MsSUFJM0J3d0ksb0JBQXFCLENBQ3BCN2lJLElBQUssV0FFSmhLLFFBQVF1aEIsS0FBTSxvSEFJaEJnMkMsV0FBWSxDQUNYdnRELElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0saURBQ2Rsa0IsS0FBSzA4RCxPQUFPMG9CLEtBQU9wbUYsSUFJckJ5d0ksZUFBZ0IsQ0FDZjlpSSxJQUFLLFdBRUpoSyxRQUFRdWhCLEtBQU0sb0RBSWhCd3JILGVBQWdCLENBQ2YvaUksSUFBSyxTQUFXM04sR0FFZjJELFFBQVF1aEIsS0FBTSw4REFDZGxrQixLQUFLMDhELE9BQU80b0IsUUFBUWxoRixNQUFRcEYsSUFJOUIyd0ksZ0JBQWlCLENBQ2hCaGpJLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sZ0VBQ2Rsa0IsS0FBSzA4RCxPQUFPNG9CLFFBQVFqaEYsT0FBU3JGLE1BUWhDRSxPQUFPQyxpQkFBa0JtOUMsR0FBZ0IvOEMsVUFBVyxDQUVuRFQsT0FBUSxDQUNQOFgsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sMkVBQ1Bsa0IsS0FBSzBpQixNQUFNNWpCLFNBSXBCOHdJLFFBQVMsQ0FDUmg1SCxJQUFLLFdBR0osT0FEQWpVLFFBQVF1aEIsS0FBTSw0RUFDUGxrQixLQUFLdzhDLFFBQVV6NkIsR0FHdkJwVixJQUFLLFdBRUpoSyxRQUFRdWhCLEtBQU0sNEVBQ2Rsa0IsS0FBSzI4QyxTQUFVNTZCLE9BT2xCdTZCLEdBQWdCLzhDLFVBQVVzd0ksV0FBYSxTQUFXN3dJLEdBSWpELE9BRkEyRCxRQUFRdWhCLEtBQU0sc0ZBQ2Rsa0IsS0FBSzI4QyxVQUFvQixJQUFWMzlDLEVBQWlCK2lCLEVBQW1CRCxHQUM1QzloQixNQUlSczhDLEdBQWdCLzhDLFVBQVV1d0ksaUJBQW1CLFdBRTVDbnRJLFFBQVFDLE1BQU8saUVBSWhCMDVDLEdBQWdCLzhDLFVBQVV3d0ksU0FBVyxXQUVwQ3B0SSxRQUFRQyxNQUFPLDRIQU1oQjA3QyxHQUFlLytDLFVBQVV5d0ksU0FBVyxTQUFXcHBJLEdBRTlDakUsUUFBUXVoQixLQUFNLHNFQUNkbGtCLEtBQUs2K0MsU0FBVWo0QyxJQUloQjAzQyxHQUFlLytDLFVBQVUwd0ksYUFBZSxTQUFXNTVILEVBQU1zUSxHQUl4RCxPQUZBaGtCLFFBQVF1aEIsS0FBTSw4RUFFTHlDLEdBQWFBLEVBQVUrMkIsbUJBQTJCLzJCLEdBQWFBLEVBQVV5N0IsNkJBUXBFLFVBQVQvckMsR0FFSjFULFFBQVF1aEIsS0FBTSwyRUFDZGxrQixLQUFLNitDLFNBQVVsNEIsR0FFUjNtQixNQUlEQSxLQUFLbWEsYUFBYzlELEVBQU1zUSxJQWYvQmhrQixRQUFRdWhCLEtBQU0sMEVBRVBsa0IsS0FBS21hLGFBQWM5RCxFQUFNLElBQUlpbUMsR0FBaUJ2NEMsVUFBVyxHQUFLQSxVQUFXLE9BaUJsRnU2QyxHQUFlLytDLFVBQVUyd0ksWUFBYyxTQUFXbHJJLEVBQU84d0IsRUFBTyt3RixRQUUxQ3JuRyxJQUFoQnFuRyxHQUVKbGtILFFBQVF1aEIsS0FBTSx3RUFJZnZoQixRQUFRdWhCLEtBQU0sNERBQ2Rsa0IsS0FBS2kvQyxTQUFVajZDLEVBQU84d0IsSUFJdkJ3b0IsR0FBZS8rQyxVQUFVNHdJLGVBQWlCLFdBRXpDeHRJLFFBQVF1aEIsS0FBTSxrRUFDZGxrQixLQUFLbS9DLGVBSU5iLEdBQWUvK0MsVUFBVTZ3SSxlQUFpQixXQUV6Q3p0SSxRQUFRdWhCLEtBQU0sOERBSWZvNkIsR0FBZS8rQyxVQUFVOHdJLGdCQUFrQixTQUFXaDZILEdBSXJELE9BRkExVCxRQUFRdWhCLEtBQU0sb0ZBRVBsa0IsS0FBSysrQyxnQkFBaUIxb0MsSUFJOUJpb0MsR0FBZS8rQyxVQUFVb3ZJLFlBQWMsU0FBVzFqSCxHQUdqRCxPQURBdG9CLFFBQVF1aEIsS0FBTSw2RUFDUGxrQixLQUFLcXpCLGFBQWNwSSxJQUkzQi9yQixPQUFPQyxpQkFBa0JtL0MsR0FBZS8rQyxVQUFXLENBRWxEK3dJLFVBQVcsQ0FDVjE1SCxJQUFLLFdBR0osT0FEQWpVLFFBQVFDLE1BQU8saUVBQ1I1QyxLQUFLeStDLFNBSWQ4eEYsUUFBUyxDQUNSMzVILElBQUssV0FHSixPQURBalUsUUFBUXVoQixLQUFNLCtEQUNQbGtCLEtBQUt5K0MsV0FPZmt3RCxHQUFrQnB2RyxVQUFVc3dJLFdBQWEsU0FBVzd3SSxHQUluRCxPQUZBMkQsUUFBUXVoQixLQUFNLHdGQUNkbGtCLEtBQUsyOEMsVUFBb0IsSUFBVjM5QyxFQUFpQitpQixFQUFtQkQsR0FDNUM5aEIsTUFJUjJ1RyxHQUFrQnB2RyxVQUFVd3dJLFNBQVcsV0FFdENwdEksUUFBUUMsTUFBTyw4SEFNaEJxK0csR0FBZ0IxaEgsVUFBVWl4SSxVQUFZLFdBRXJDN3RJLFFBQVFDLE1BQU8sMERBSWhCcStHLEdBQWdCMWhILFVBQVVreEksYUFBZSxXQUV4Qzl0SSxRQUFRQyxNQUFPLDZEQUloQnErRyxHQUFnQjFoSCxVQUFVNmhILFNBQVcsV0FFcEN6K0csUUFBUUMsTUFBTyx5REFNaEI4ckcsR0FBTW52RyxVQUFVdXpCLFFBQVUsV0FFekJud0IsUUFBUUMsTUFBTyw4Q0FNaEJxbkksR0FBUTFxSSxVQUFVNHlCLFNBQVcsV0FHNUIsT0FEQXh2QixRQUFRdWhCLEtBQU0scUZBQ1Bsa0IsTUFNUmQsT0FBT0MsaUJBQWtCbzJDLEdBQVNoMkMsVUFBVyxDQUU1Q214SSxXQUFZLENBQ1g5NUgsSUFBSyxXQUVKalUsUUFBUXVoQixLQUFNLGtEQUdmdlgsSUFBSyxXQUVKaEssUUFBUXVoQixLQUFNLG1EQUtoQnlzSCxTQUFVLENBQ1QvNUgsSUFBSyxXQUVKalUsUUFBUXVoQixLQUFNLGdEQUdmdlgsSUFBSyxXQUVKaEssUUFBUXVoQixLQUFNLGlEQUtoQjBzSCxRQUFTLENBQ1JoNkgsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sOENBQ1AsSUFBSThJLEtBS2I2akgsUUFBUyxDQUNSajZILElBQUssV0FFSmpVLFFBQVFDLE1BQU8sU0FBVzVDLEtBQUs2VyxLQUFPLHVFQUd2Q2xLLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sU0FBV2xrQixLQUFLNlcsS0FBTyxzRUFDckM3VyxLQUFLbTRDLFlBdHFoRFksSUFzcWhESW41QyxJQUt2QjRzRixZQUFhLENBQ1poMUUsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sU0FBV2xrQixLQUFLNlcsS0FBTyxrRUFDOUI3VyxLQUFLMDJDLGlCQUdiL3BDLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sU0FBV2xrQixLQUFLNlcsS0FBTyxrRUFDckM3VyxLQUFLMDJDLGdCQUFrQjEzQyxJQUt6Qnk4RSxlQUFnQixDQUNmN2tFLElBQUssV0FFSmpVLFFBQVF1aEIsS0FBTSxTQUFXbGtCLEtBQUs2VyxLQUFPLHdDQUd0Q2xLLElBQUssV0FFSmhLLFFBQVF1aEIsS0FBTSxTQUFXbGtCLEtBQUs2VyxLQUFPLDJDQU94QzNYLE9BQU9DLGlCQUFrQnduRCxHQUFlcG5ELFVBQVcsQ0FFbEQybkQsWUFBYSxDQUNadHdDLElBQUssV0FHSixPQURBalUsUUFBUXVoQixLQUFNLGlGQUNQbGtCLEtBQUtpbkQsV0FBV0MsYUFHeEJ2NkMsSUFBSyxTQUFXM04sR0FFZjJELFFBQVF1aEIsS0FBTSxrRkFDZGxrQixLQUFLaW5ELFdBQVdDLFlBQWNsb0QsTUFTakMwbEcsR0FBY25sRyxVQUFVdXhJLFlBQWMsU0FBV3RuRixFQUFjdmpELEVBQU80dUIsRUFBT3UyQixHQUU1RXpvRCxRQUFRdWhCLEtBQU0seUdBQ2Rsa0IsS0FBSzBxRCxnQkFBaUJsQixHQUN0QnhwRCxLQUFLdVUsTUFBT3RPLEVBQU80dUIsRUFBT3UyQixJQUkzQnM1QyxHQUFjbmxHLFVBQVV3eEksUUFBVSxTQUFXcDJHLEdBRTVDaDRCLFFBQVF1aEIsS0FBTSwrREFDZGxrQixLQUFLMnVELGlCQUFrQmgwQixJQUl4QitwRSxHQUFjbmxHLFVBQVV5eEksdUJBQXlCLFdBR2hELE9BREFydUksUUFBUXVoQixLQUFNLDZFQUNQbGtCLEtBQUttcUQsbUJBSWJ1NkMsR0FBY25sRyxVQUFVZ2tFLGlCQUFtQixXQUcxQyxPQURBNWdFLFFBQVF1aEIsS0FBTSxxRkFDUGxrQixLQUFLK3VELGFBQWF3VSxvQkFJMUJtaEMsR0FBY25sRyxVQUFVMHhJLGFBQWUsV0FHdEMsT0FEQXR1SSxRQUFRdWhCLEtBQU0sd0VBQ1Bsa0IsS0FBSyt1RCxhQUFhM1gsV0FJMUJzdEQsR0FBY25sRyxVQUFVMnhJLGFBQWUsV0FHdEMsT0FEQXZ1SSxRQUFRdWhCLEtBQU0sK0RBQ1Bsa0IsS0FBSzY4RCxNQUFNdHdELFNBSW5CbTRGLEdBQWNubEcsVUFBVTR4SSxzQkFBd0IsV0FHL0MsT0FEQXh1SSxRQUFRdWhCLEtBQU0sZ0dBQ1Bsa0IsS0FBS2luRCxXQUFXcndDLElBQUssc0JBSTdCOHRGLEdBQWNubEcsVUFBVTZ4SSwwQkFBNEIsV0FHbkQsT0FEQXp1SSxRQUFRdWhCLEtBQU0seUdBQ1Bsa0IsS0FBS2luRCxXQUFXcndDLElBQUssMkJBSTdCOHRGLEdBQWNubEcsVUFBVTh4SSw0QkFBOEIsV0FHckQsT0FEQTF1SSxRQUFRdWhCLEtBQU0sNkdBQ1Bsa0IsS0FBS2luRCxXQUFXcndDLElBQUssNkJBSTdCOHRGLEdBQWNubEcsVUFBVSt4SSw4QkFBZ0MsV0FHdkQsT0FEQTN1SSxRQUFRdWhCLEtBQU0sb0hBQ1Bsa0IsS0FBS2luRCxXQUFXcndDLElBQUssa0NBSTdCOHRGLEdBQWNubEcsVUFBVWd5SSwrQkFBaUMsV0FHeEQsT0FEQTV1SSxRQUFRdWhCLEtBQU0sc0hBQ1Bsa0IsS0FBS2luRCxXQUFXcndDLElBQUssbUNBSTdCOHRGLEdBQWNubEcsVUFBVWl5SSxvQkFBc0IsV0FHN0MsT0FEQTd1SSxRQUFRdWhCLEtBQU0sNkZBQ1Bsa0IsS0FBS2luRCxXQUFXcndDLElBQUsscUJBSTdCOHRGLEdBQWNubEcsVUFBVTY3RSx1QkFBeUIsV0FHaEQsT0FEQXo0RSxRQUFRdWhCLEtBQU0sdUZBQ1Bsa0IsS0FBSyt1RCxhQUFhc1UsZ0JBSTFCcWhDLEdBQWNubEcsVUFBVWt5SSx3QkFBMEIsV0FHakQsT0FEQTl1SSxRQUFRdWhCLEtBQU0sdUdBQ1Bsa0IsS0FBS2luRCxXQUFXcndDLElBQUssMkJBSTdCOHRGLEdBQWNubEcsVUFBVW15SSxrQkFBb0IsU0FBVy9uQyxHQUV0RGhuRyxRQUFRdWhCLEtBQU0sdUVBQ2Rsa0IsS0FBSzBwRixlQUFnQmlnQixJQUl0QmpGLEdBQWNubEcsVUFBVW95SSxhQUFlLFdBRXRDaHZJLFFBQVF1aEIsS0FBTSwyREFJZndnRixHQUFjbmxHLFVBQVVxeUksYUFBZSxXQUV0Q2p2SSxRQUFRdWhCLEtBQU0sMkRBSWZ3Z0YsR0FBY25sRyxVQUFVc3lJLGNBQWdCLFdBRXZDbHZJLFFBQVF1aEIsS0FBTSw0REFJZndnRixHQUFjbmxHLFVBQVV1eUksZ0JBQWtCLFdBRXpDbnZJLFFBQVF1aEIsS0FBTSw4REFJZndnRixHQUFjbmxHLFVBQVV3eUksZUFBaUIsV0FFeENwdkksUUFBUXVoQixLQUFNLDZEQUlmd2dGLEdBQWNubEcsVUFBVXl5SSxpQkFBbUIsV0FFMUNydkksUUFBUXVoQixLQUFNLCtEQUlmd2dGLEdBQWNubEcsVUFBVTB5SSxXQUFhLFdBRXBDdHZJLFFBQVF1aEIsS0FBTSx5REFJZndnRixHQUFjbmxHLFVBQVVxekUsYUFBZSxXQUV0Q2p3RSxRQUFRdWhCLEtBQU0sMkRBSWZ3Z0YsR0FBY25sRyxVQUFVeXpFLGVBQWlCLFdBRXhDcndFLFFBQVF1aEIsS0FBTSw2REFJZndnRixHQUFjbmxHLFVBQVUyeUkscUJBQXVCLFdBRzlDLE9BREF2dkksUUFBUXVoQixLQUFNLGdGQUNQbGtCLEtBQUtzcEYsd0JBSWJwcUYsT0FBT0MsaUJBQWtCdWxHLEdBQWNubEcsVUFBVyxDQUVqRDI4RSxpQkFBa0IsQ0FDakJ0bEUsSUFBSyxXQUVKLE9BQU81VyxLQUFLb2hGLFVBQVVuNEIsU0FHdkJ0OEMsSUFBSyxTQUFXM04sR0FFZjJELFFBQVF1aEIsS0FBTSxxRUFDZGxrQixLQUFLb2hGLFVBQVVuNEIsUUFBVWpxRCxJQUkzQis1RSxjQUFlLENBQ2RuaUUsSUFBSyxXQUVKLE9BQU81VyxLQUFLb2hGLFVBQVV2cUUsTUFHdkJsSyxJQUFLLFNBQVczTixHQUVmMkQsUUFBUXVoQixLQUFNLCtEQUNkbGtCLEtBQUtvaEYsVUFBVXZxRSxLQUFPN1gsSUFJeEJtekksa0JBQW1CLENBQ2xCdjdILElBQUssV0FFSmpVLFFBQVF1aEIsS0FBTSwrRkFJZnZYLElBQUssV0FFSmhLLFFBQVF1aEIsS0FBTSxnR0FJaEJ3TCxRQUFTLENBQ1I5WSxJQUFLLFdBR0osT0FEQWpVLFFBQVF1aEIsS0FBTSw4RUFDUGxrQixLQUFLaVYsZUFJZG05SCxHQUFJLENBQ0h4N0gsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sb0RBQ1Bsa0IsS0FBS3lxRCxLQUlkNG5GLFdBQVksQ0FDWHo3SCxJQUFLLFdBR0osT0FEQWpVLFFBQVF1aEIsS0FBTSxtSEFDUCxHQUdSdlgsSUFBSyxXQUVKaEssUUFBUXVoQixLQUFNLG9IQUloQm91SCxZQUFhLENBQ1oxN0gsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sa0dBQ1AsR0FHUnZYLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0saUdBQ2Rsa0IsS0FBS3FxRCxnQkFBNkIsSUFBVnJyRCxFQUFtQjBpQixFQUFlRCxJQUk1RDh3SCxzQkFBdUIsQ0FDdEIzN0gsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0saUVBQ1AsR0FHUnZYLElBQUssV0FFSmhLLFFBQVF1aEIsS0FBTSxtRUFJaEJzdUgsWUFBYSxDQUNaNTdILElBQUssV0FHSixPQURBalUsUUFBUXVoQixLQUFNLHVEQUNQLEdBR1J2WCxJQUFLLFdBRUpoSyxRQUFRdWhCLEtBQU0sMkRBTWpCaGxCLE9BQU9DLGlCQUFrQjBuRixHQUFldG5GLFVBQVcsQ0FFbERpdkYsU0FBVSxDQUNUNTNFLElBQUssV0FFSmpVLFFBQVF1aEIsS0FBTSxnR0FJZnZYLElBQUssV0FFSmhLLFFBQVF1aEIsS0FBTSxpR0FJaEJ1dUgsbUJBQW9CLENBQ25CNzdILElBQUssV0FFSmpVLFFBQVF1aEIsS0FBTSwwR0FJZnZYLElBQUssV0FFSmhLLFFBQVF1aEIsS0FBTSwyR0FJaEJ3dUgsa0JBQW1CLENBQ2xCOTdILElBQUssV0FFSmpVLFFBQVF1aEIsS0FBTSx5R0FJZnZYLElBQUssV0FFSmhLLFFBQVF1aEIsS0FBTSw0R0FvQmpCaGxCLE9BQU9DLGlCQUFrQnkxQixHQUFrQnIxQixVQUFXLENBRXJEMnhCLE1BQU8sQ0FDTnRhLElBQUssV0FHSixPQURBalUsUUFBUXVoQixLQUFNLDBEQUNQbGtCLEtBQUtnMUIsUUFBUTlELE9BR3JCdmtCLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sMERBQ2Rsa0IsS0FBS2cxQixRQUFROUQsTUFBUWx5QixJQUl2Qm15QixNQUFPLENBQ052YSxJQUFLLFdBR0osT0FEQWpVLFFBQVF1aEIsS0FBTSwwREFDUGxrQixLQUFLZzFCLFFBQVE3RCxPQUdyQnhrQixJQUFLLFNBQVczTixHQUVmMkQsUUFBUXVoQixLQUFNLDBEQUNkbGtCLEtBQUtnMUIsUUFBUTdELE1BQVFueUIsSUFJdkJveUIsVUFBVyxDQUNWeGEsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sa0VBQ1Bsa0IsS0FBS2cxQixRQUFRNUQsV0FHckJ6a0IsSUFBSyxTQUFXM04sR0FFZjJELFFBQVF1aEIsS0FBTSxrRUFDZGxrQixLQUFLZzFCLFFBQVE1RCxVQUFZcHlCLElBSTNCcXlCLFVBQVcsQ0FDVnphLElBQUssV0FHSixPQURBalUsUUFBUXVoQixLQUFNLGtFQUNQbGtCLEtBQUtnMUIsUUFBUTNELFdBR3JCMWtCLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sa0VBQ2Rsa0IsS0FBS2cxQixRQUFRM0QsVUFBWXJ5QixJQUkzQnV5QixXQUFZLENBQ1gzYSxJQUFLLFdBR0osT0FEQWpVLFFBQVF1aEIsS0FBTSxvRUFDUGxrQixLQUFLZzFCLFFBQVF6RCxZQUdyQjVrQixJQUFLLFNBQVczTixHQUVmMkQsUUFBUXVoQixLQUFNLG9FQUNkbGtCLEtBQUtnMUIsUUFBUXpELFdBQWF2eUIsSUFJNUJ3bkIsT0FBUSxDQUNQNVAsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sNERBQ1Bsa0IsS0FBS2cxQixRQUFReE8sUUFHckI3WixJQUFLLFNBQVczTixHQUVmMkQsUUFBUXVoQixLQUFNLDREQUNkbGtCLEtBQUtnMUIsUUFBUXhPLE9BQVN4bkIsSUFJeEI0eUIsT0FBUSxDQUNQaGIsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sNERBQ1Bsa0IsS0FBS2cxQixRQUFRcEQsUUFHckJqbEIsSUFBSyxTQUFXM04sR0FFZjJELFFBQVF1aEIsS0FBTSw0REFDZGxrQixLQUFLZzFCLFFBQVFwRCxPQUFTNXlCLElBSXhCc3lCLE9BQVEsQ0FDUDFhLElBQUssV0FHSixPQURBalUsUUFBUXVoQixLQUFNLDREQUNQbGtCLEtBQUtnMUIsUUFBUTFELFFBR3JCM2tCLElBQUssU0FBVzNOLEdBRWYyRCxRQUFRdWhCLEtBQU0sNERBQ2Rsa0IsS0FBS2cxQixRQUFRMUQsT0FBU3R5QixJQUl4QjZYLEtBQU0sQ0FDTEQsSUFBSyxXQUdKLE9BREFqVSxRQUFRdWhCLEtBQU0sd0RBQ1Bsa0IsS0FBS2cxQixRQUFRbmUsTUFHckJsSyxJQUFLLFNBQVczTixHQUVmMkQsUUFBUXVoQixLQUFNLHdEQUNkbGtCLEtBQUtnMUIsUUFBUW5lLEtBQU83WCxJQUl0Qjh5QixnQkFBaUIsQ0FDaEJsYixJQUFLLFdBR0osT0FEQWpVLFFBQVF1aEIsS0FBTSw4RUFDUGxrQixLQUFLZzFCLFFBQVFsRCxpQkFHckJubEIsSUFBSyxTQUFXM04sR0FFZjJELFFBQVF1aEIsS0FBTSw4RUFDZGxrQixLQUFLZzFCLFFBQVFsRCxnQkFBa0I5eUIsTUEveE9sQyxjQUFvQnl1QyxHQUVuQjlrQyxZQUFhd1osR0FFWnNQLFFBRUF6eEIsS0FBSzZXLEtBQU8sUUFFWjdXLEtBQUttaUIsU0FBV0EsRUFDaEJuaUIsS0FBSzB2QixRQUFVdk4sRUFBU3VOLFFBRXhCMXZCLEtBQUsyeUksS0FBTzN5SSxLQUFLMHZCLFFBQVFrakgsYUFDekI1eUksS0FBSzJ5SSxLQUFLRSxRQUFTMXdILEVBQVMyd0gsWUFFNUI5eUksS0FBSyt5SSxVQUFXLEVBRWhCL3lJLEtBQUttTSxPQUFTLEtBQ2RuTSxLQUFLZ3pJLE9BQVMsRUFDZGh6SSxLQUFLNGhJLE1BQU8sRUFDWjVoSSxLQUFLaXpJLFVBQVksRUFDakJqekksS0FBS2t6SSxRQUFVLEVBQ2ZsekksS0FBS3dtQixPQUFTLEVBQ2R4bUIsS0FBS293SCxjQUFXNXdHLEVBQ2hCeGYsS0FBS216SSxhQUFlLEVBQ3BCbnpJLEtBQUtvekksV0FBWSxFQUNqQnB6SSxLQUFLcXpJLG9CQUFxQixFQUMxQnJ6SSxLQUFLK3NCLE9BQVMsS0FDZC9zQixLQUFLc3pJLFdBQWEsUUFFbEJ0ekksS0FBS3V6SSxXQUFhLEVBQ2xCdnpJLEtBQUt3ekksVUFBWSxFQUNqQnh6SSxLQUFLeXpJLFlBQWEsRUFFbEJ6ekksS0FBSzB6SSxRQUFVLEdBSWhCQyxZQUVDLE9BQU8zekksS0FBSzJ5SSxLQUliaUIsY0FBZUMsR0FPZCxPQUxBN3pJLEtBQUtxekksb0JBQXFCLEVBQzFCcnpJLEtBQUtzekksV0FBYSxZQUNsQnR6SSxLQUFLK3NCLE9BQVM4bUgsRUFDZDd6SSxLQUFLNnlJLFVBRUU3eUksS0FJUjh6SSxzQkFBdUJDLEdBT3RCLE9BTEEvekksS0FBS3F6SSxvQkFBcUIsRUFDMUJyekksS0FBS3N6SSxXQUFhLFlBQ2xCdHpJLEtBQUsrc0IsT0FBUy9zQixLQUFLMHZCLFFBQVFza0gseUJBQTBCRCxHQUNyRC96SSxLQUFLNnlJLFVBRUU3eUksS0FJUmkwSSxxQkFBc0JDLEdBT3JCLE9BTEFsMEksS0FBS3F6SSxvQkFBcUIsRUFDMUJyekksS0FBS3N6SSxXQUFhLGtCQUNsQnR6SSxLQUFLK3NCLE9BQVMvc0IsS0FBSzB2QixRQUFReWtILHdCQUF5QkQsR0FDcERsMEksS0FBSzZ5SSxVQUVFN3lJLEtBSVJvMEksVUFBVzlhLEdBT1YsT0FMQXQ1SCxLQUFLbU0sT0FBU210SCxFQUNkdDVILEtBQUtzekksV0FBYSxTQUVidHpJLEtBQUsreUksVUFBVy95SSxLQUFLdUYsT0FFbkJ2RixLQUlSdUYsS0FBTTh1SSxFQUFRLEdBRWIsSUFBd0IsSUFBbkJyMEksS0FBS296SSxVQUdULFlBREF6d0ksUUFBUXVoQixLQUFNLDBDQUtmLElBQWlDLElBQTVCbGtCLEtBQUtxekksbUJBR1QsWUFEQTF3SSxRQUFRdWhCLEtBQU0sb0RBS2Zsa0IsS0FBS3V6SSxXQUFhdnpJLEtBQUswdkIsUUFBUS9xQixZQUFjMHZJLEVBRTdDLE1BQU10bkgsRUFBUy9zQixLQUFLMHZCLFFBQVE0a0gscUJBZTVCLE9BZEF2bkgsRUFBTzVnQixPQUFTbk0sS0FBS21NLE9BQ3JCNGdCLEVBQU82MEcsS0FBTzVoSSxLQUFLNGhJLEtBQ25CNzBHLEVBQU9rbUgsVUFBWWp6SSxLQUFLaXpJLFVBQ3hCbG1ILEVBQU9tbUgsUUFBVWx6SSxLQUFLa3pJLFFBQ3RCbm1ILEVBQU93bkgsUUFBVXYwSSxLQUFLdzBJLFFBQVE3akMsS0FBTTN3RyxNQUNwQytzQixFQUFPL25CLE1BQU9oRixLQUFLdXpJLFdBQVl2ekksS0FBS3d6SSxVQUFZeHpJLEtBQUt3bUIsT0FBUXhtQixLQUFLb3dILFVBRWxFcHdILEtBQUtvekksV0FBWSxFQUVqQnB6SSxLQUFLK3NCLE9BQVNBLEVBRWQvc0IsS0FBS3kwSSxVQUFXejBJLEtBQUtnekksUUFDckJoekksS0FBSzAwSSxnQkFBaUIxMEksS0FBS216SSxjQUVwQm56SSxLQUFLNnlJLFVBSWI4QixRQUVDLElBQWlDLElBQTVCMzBJLEtBQUtxekksbUJBNEJWLE9BckJ3QixJQUFuQnJ6SSxLQUFLb3pJLFlBSVRwekksS0FBS3d6SSxXQUFhM3pJLEtBQUtrRyxJQUFLL0YsS0FBSzB2QixRQUFRL3FCLFlBQWMzRSxLQUFLdXpJLFdBQVksR0FBTXZ6SSxLQUFLbXpJLGNBRWhFLElBQWRuekksS0FBSzRoSSxPQUlUNWhJLEtBQUt3ekksVUFBWXh6SSxLQUFLd3pJLFdBQWN4ekksS0FBS293SCxVQUFZcHdILEtBQUttTSxPQUFPaWtILFdBSWxFcHdILEtBQUsrc0IsT0FBT2pvQixPQUNaOUUsS0FBSytzQixPQUFPd25ILFFBQVUsS0FFdEJ2MEksS0FBS296SSxXQUFZLEdBSVhwekksS0ExQk4yQyxRQUFRdWhCLEtBQU0sb0RBOEJoQnBmLE9BRUMsSUFBaUMsSUFBNUI5RSxLQUFLcXpJLG1CQWFWLE9BTkFyekksS0FBS3d6SSxVQUFZLEVBRWpCeHpJLEtBQUsrc0IsT0FBT2pvQixPQUNaOUUsS0FBSytzQixPQUFPd25ILFFBQVUsS0FDdEJ2MEksS0FBS296SSxXQUFZLEVBRVZwekksS0FYTjJDLFFBQVF1aEIsS0FBTSxvREFlaEIydUgsVUFFQyxHQUFLN3lJLEtBQUswekksUUFBUTUwSSxPQUFTLEVBQUksQ0FFOUJrQixLQUFLK3NCLE9BQU84bEgsUUFBUzd5SSxLQUFLMHpJLFFBQVMsSUFFbkMsSUFBTSxJQUFJNXlJLEVBQUksRUFBR1csRUFBSXpCLEtBQUswekksUUFBUTUwSSxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFaERkLEtBQUswekksUUFBUzV5SSxFQUFJLEdBQUkreEksUUFBUzd5SSxLQUFLMHpJLFFBQVM1eUksSUFJOUNkLEtBQUswekksUUFBUzF6SSxLQUFLMHpJLFFBQVE1MEksT0FBUyxHQUFJK3pJLFFBQVM3eUksS0FBSzJ6SSxrQkFJdEQzekksS0FBSytzQixPQUFPOGxILFFBQVM3eUksS0FBSzJ6SSxhQU0zQixPQUZBM3pJLEtBQUt5ekksWUFBYSxFQUVYenpJLEtBSVJzN0YsYUFFQyxHQUFLdDdGLEtBQUswekksUUFBUTUwSSxPQUFTLEVBQUksQ0FFOUJrQixLQUFLK3NCLE9BQU91dUUsV0FBWXQ3RixLQUFLMHpJLFFBQVMsSUFFdEMsSUFBTSxJQUFJNXlJLEVBQUksRUFBR1csRUFBSXpCLEtBQUswekksUUFBUTUwSSxPQUFRZ0MsRUFBSVcsRUFBR1gsSUFFaERkLEtBQUswekksUUFBUzV5SSxFQUFJLEdBQUl3NkYsV0FBWXQ3RixLQUFLMHpJLFFBQVM1eUksSUFJakRkLEtBQUswekksUUFBUzF6SSxLQUFLMHpJLFFBQVE1MEksT0FBUyxHQUFJdzhGLFdBQVl0N0YsS0FBSzJ6SSxrQkFJekQzekksS0FBSytzQixPQUFPdXVFLFdBQVl0N0YsS0FBSzJ6SSxhQU05QixPQUZBM3pJLEtBQUt5ekksWUFBYSxFQUVYenpJLEtBSVI0MEksYUFFQyxPQUFPNTBJLEtBQUswekksUUFJYm1CLFdBQVk3MUksR0FnQlgsT0FkT0EsSUFBUUEsRUFBUSxLQUVFLElBQXBCZ0IsS0FBS3l6SSxZQUVUenpJLEtBQUtzN0YsYUFDTHQ3RixLQUFLMHpJLFFBQVUxMEksRUFBTThNLFFBQ3JCOUwsS0FBSzZ5SSxXQUlMN3lJLEtBQUswekksUUFBVTEwSSxFQUFNOE0sUUFJZjlMLEtBSVJ5MEksVUFBV3oxSSxHQUlWLEdBRkFnQixLQUFLZ3pJLE9BQVNoMEksT0FFY3dnQixJQUF2QnhmLEtBQUsrc0IsT0FBT2ltSCxPQVFqQixPQU53QixJQUFuQmh6SSxLQUFLb3pJLFdBRVRwekksS0FBSytzQixPQUFPaW1ILE9BQU84QixnQkFBaUI5MEksS0FBS2d6SSxPQUFRaHpJLEtBQUswdkIsUUFBUS9xQixZQUFhLEtBSXJFM0UsS0FJUiswSSxZQUVDLE9BQU8vMEksS0FBS2d6SSxPQUliZ0MsWUFFQyxPQUFPaDFJLEtBQUs0MEksYUFBYyxHQUkzQkssVUFBV2g3SCxHQUVWLE9BQU9qYSxLQUFLNjBJLFdBQVk1NkgsRUFBUyxDQUFFQSxHQUFXLElBSS9DeTZILGdCQUFpQjExSSxHQUVoQixJQUFpQyxJQUE1QmdCLEtBQUtxekksbUJBZVYsT0FSQXJ6SSxLQUFLbXpJLGFBQWVuMEksR0FFSSxJQUFuQmdCLEtBQUtvekksV0FFVHB6SSxLQUFLK3NCLE9BQU9vbUgsYUFBYTJCLGdCQUFpQjkwSSxLQUFLbXpJLGFBQWNuekksS0FBSzB2QixRQUFRL3FCLFlBQWEsS0FJakYzRSxLQWJOMkMsUUFBUXVoQixLQUFNLG9EQWlCaEJneEgsa0JBRUMsT0FBT2wxSSxLQUFLbXpJLGFBSWJxQixVQUVDeDBJLEtBQUtvekksV0FBWSxFQUlsQitCLFVBRUMsT0FBaUMsSUFBNUJuMUksS0FBS3F6SSxvQkFFVDF3SSxRQUFRdWhCLEtBQU0scURBQ1AsR0FJRGxrQixLQUFLNGhJLEtBSWJpQixRQUFTN2pJLEdBRVIsSUFBaUMsSUFBNUJnQixLQUFLcXpJLG1CQWVWLE9BUkFyekksS0FBSzRoSSxLQUFPNWlJLEdBRVksSUFBbkJnQixLQUFLb3pJLFlBRVRwekksS0FBSytzQixPQUFPNjBHLEtBQU81aEksS0FBSzRoSSxNQUlsQjVoSSxLQWJOMkMsUUFBUXVoQixLQUFNLG9EQWlCaEJreEgsYUFBY3AySSxHQUliLE9BRkFnQixLQUFLaXpJLFVBQVlqMEksRUFFVmdCLEtBSVJxMUksV0FBWXIySSxHQUlYLE9BRkFnQixLQUFLa3pJLFFBQVVsMEksRUFFUmdCLEtBSVJzMUksWUFFQyxPQUFPdDFJLEtBQUsyeUksS0FBS0EsS0FBSzN6SSxNQUl2QnUySSxVQUFXdjJJLEdBSVYsT0FGQWdCLEtBQUsyeUksS0FBS0EsS0FBS21DLGdCQUFpQjkxSSxFQUFPZ0IsS0FBSzB2QixRQUFRL3FCLFlBQWEsS0FFMUQzRSxPQTA2TkhULFVBQVV5MEgsS0FBTyxTQUFXNUIsR0FFakN6dkgsUUFBUXVoQixLQUFNLDBFQUNkLE1BQU1paEMsRUFBUW5sRCxLQU9kLE9BTm9CLElBQUlpNUgsSUFDWmpGLEtBQU01QixHQUFNLFNBQVdqbUgsR0FFbENnNUMsRUFBTWl2RixVQUFXam9JLE1BR1huTSxNQWNSdXBELEdBQVdocUQsVUFBVWkySSxjQUFnQixTQUFXeHJGLEVBQVVDLEdBR3pELE9BREF0bkQsUUFBUXVoQixLQUFNLHdEQUNQbGtCLEtBQUsrM0IsT0FBUWl5QixFQUFVQyxJQUkvQlYsR0FBV2hxRCxVQUFVZ1YsTUFBUSxTQUFXeTFDLEVBQVUvakQsRUFBTzR1QixFQUFPdTJCLEdBRy9ELE9BREF6b0QsUUFBUXVoQixLQUFNLDREQUNQbGtCLEtBQUt3cEQsYUFBYWoxQyxNQUFPeTFDLEVBQVUvakQsRUFBTzR1QixFQUFPdTJCLElBSXpEOTdCLEdBQVdza0csaUJBQWNwMEcsRUFFekI4UCxHQUFXdW5HLFlBQWMsU0FBVy8rRyxFQUFLa1osRUFBU3NoRyxFQUFRRSxHQUV6RDd2SCxRQUFRdWhCLEtBQU0sd0ZBRWQsTUFBTW92RyxFQUFTLElBQUl3RCxHQUNuQnhELEVBQU9ZLGVBQWdCbDBILEtBQUs0ekgsYUFFNUIsTUFBTTUrRixFQUFVcytGLEVBQU9VLEtBQU1sOEcsRUFBS3c2RyxPQUFROXlHLEVBQVdnekcsR0FJckQsT0FGS3hoRyxJQUFVZ0UsRUFBUWhFLFFBQVVBLEdBRTFCZ0UsR0FJUjFGLEdBQVdtbUgsZ0JBQWtCLFNBQVc3ZSxFQUFNNWxHLEVBQVNzaEcsRUFBUUUsR0FFOUQ3dkgsUUFBUXVoQixLQUFNLGdHQUVkLE1BQU1vdkcsRUFBUyxJQUFJcUQsR0FDbkJyRCxFQUFPWSxlQUFnQmwwSCxLQUFLNHpILGFBRTVCLE1BQU01K0YsRUFBVXMrRixFQUFPVSxLQUFNNEMsRUFBTXRFLE9BQVE5eUcsRUFBV2d6RyxHQUl0RCxPQUZLeGhHLElBQVVnRSxFQUFRaEUsUUFBVUEsR0FFMUJnRSxHQUlSMUYsR0FBV29tSCxzQkFBd0IsV0FFbEMveUksUUFBUUMsTUFBTywwRkFJaEIwc0IsR0FBV3FtSCwwQkFBNEIsV0FFdENoekksUUFBUUMsTUFBTyw4RkFnSW1CLG9CQUF2QnlyRyxvQkFFWEEsbUJBQW1CdHJHLGNBQWUsSUFBSUYsWUFBYSxXQUFZLENBQUV5ckcsT0FBUSxDQUN4RXNuQyxTQWg2aURlLFVBcTZpRE0sb0JBQVhsMkksU0FFTkEsT0FBT20ySSxVQUVYbHpJLFFBQVF1aEIsS0FBTSwyREFJZHhrQixPQUFPbTJJLFVBNzZpRFEsT0dZakIsTUFBTUMsR0FBZSxDQUFFai9ILEtBQU0sVUFDdkJrL0gsR0FBYyxDQUFFbC9ILEtBQU0sU0FDdEJtL0gsR0FBWSxDQUFFbi9ILEtBQU0sT0FFMUIsTUFBTW8vSCxXQUFzQi96SCxFQUUzQnZaLFlBQWFxMkIsRUFBUTZtRSxHQUVwQnAwRSxhQUVvQmpTLElBQWZxbUYsR0FBMkJsakcsUUFBUXVoQixLQUFNLDRFQUN6QzJoRixJQUFlNWlHLFVBQVdOLFFBQVFDLE1BQU8sNEhBRTlDNUMsS0FBS2cvQixPQUFTQSxFQUNkaC9CLEtBQUs2bEcsV0FBYUEsRUFDbEI3bEcsS0FBSzZsRyxXQUFXdDRFLE1BQU0yb0gsWUFBYyxPQUdwQ2wySSxLQUFLaXBELFNBQVUsRUFHZmpwRCxLQUFLeWlCLE9BQVMsSUFBSW9ZLEdBR2xCNzZCLEtBQUttMkksWUFBYyxFQUNuQm4ySSxLQUFLbzJJLFlBQWNybUksRUFBQUEsRUFHbkIvUCxLQUFLcTJJLFFBQVUsRUFDZnIySSxLQUFLczJJLFFBQVV2bUksRUFBQUEsRUFJZi9QLEtBQUt1MkksY0FBZ0IsRUFDckJ2MkksS0FBS3cySSxjQUFnQjMySSxLQUFLb0gsR0FJMUJqSCxLQUFLeTJJLGlCQUFrQixJQUN2QnoySSxLQUFLMDJJLGdCQUFrQjNtSSxFQUFBQSxFQUl2Qi9QLEtBQUsyMkksZUFBZ0IsRUFDckIzMkksS0FBSzQySSxjQUFnQixJQUlyQjUySSxLQUFLNjJJLFlBQWEsRUFDbEI3MkksS0FBSzgySSxVQUFZLEVBR2pCOTJJLEtBQUsrMkksY0FBZSxFQUNwQi8ySSxLQUFLZzNJLFlBQWMsRUFHbkJoM0ksS0FBS2kzSSxXQUFZLEVBQ2pCajNJLEtBQUtrM0ksU0FBVyxFQUNoQmwzSSxLQUFLbTNJLG9CQUFxQixFQUMxQm4zSSxLQUFLbzNJLFlBQWMsRUFJbkJwM0ksS0FBS3EzSSxZQUFhLEVBQ2xCcjNJLEtBQUtzM0ksZ0JBQWtCLEVBR3ZCdDNJLEtBQUsrVixLQUFPLENBQUV3aEksS0FBTSxZQUFhQyxHQUFJLFVBQVdDLE1BQU8sYUFBY0MsT0FBUSxhQUc3RTEzSSxLQUFLMjNJLGFBQWUsQ0FBRUosS0hqRjhCLEVHaUZWSyxPSGpGb0IsRUdpRkNILE1IakZPLEdHb0Z0RXozSSxLQUFLNjNJLFFBQVUsQ0FBRUMsSUhuRkssRUdtRmNDLElIbkZRLEdHc0Y1Qy8zSSxLQUFLZzRJLFFBQVVoNEksS0FBS3lpQixPQUFPc0IsUUFDM0IvakIsS0FBS2k0SSxVQUFZajRJLEtBQUtnL0IsT0FBT2MsU0FBUy9iLFFBQ3RDL2pCLEtBQUtrNEksTUFBUWw0SSxLQUFLZy9CLE9BQU8rb0IsS0FHekIvbkQsS0FBS200SSxxQkFBdUIsS0FNNUJuNEksS0FBS280SSxjQUFnQixXQUVwQixPQUFPQyxFQUFVaDdHLEtBSWxCcjlCLEtBQUtzNEksa0JBQW9CLFdBRXhCLE9BQU9ELEVBQVVydEgsT0FJbEJockIsS0FBS3U0SSxZQUFjLFdBRWxCLE9BQU92NEksS0FBS2cvQixPQUFPYyxTQUFTamEsV0FBWTdsQixLQUFLeWlCLFNBSTlDemlCLEtBQUt3NEksa0JBQW9CLFNBQVczeUMsR0FFbkNBLEVBQVd6ckYsaUJBQWtCLFVBQVdxK0gsR0FDeEN6NEksS0FBS200SSxxQkFBdUJ0eUMsR0FJN0I3bEcsS0FBSzA0SSxVQUFZLFdBRWhCdnpGLEVBQU02eUYsUUFBUWgwSCxLQUFNbWhDLEVBQU0xaUMsUUFDMUIwaUMsRUFBTTh5RixVQUFVajBILEtBQU1taEMsRUFBTW5tQixPQUFPYyxVQUNuQ3FsQixFQUFNK3lGLE1BQVEveUYsRUFBTW5tQixPQUFPK29CLE1BSTVCL25ELEtBQUt1TSxNQUFRLFdBRVo0NEMsRUFBTTFpQyxPQUFPdUIsS0FBTW1oQyxFQUFNNnlGLFNBQ3pCN3lGLEVBQU1ubUIsT0FBT2MsU0FBUzliLEtBQU1taEMsRUFBTTh5RixXQUNsQzl5RixFQUFNbm1CLE9BQU8rb0IsS0FBTzVDLEVBQU0reUYsTUFFMUIveUYsRUFBTW5tQixPQUFPb3BCLHlCQUNiakQsRUFBTXBpRCxjQUFlK3lJLElBRXJCM3dGLEVBQU1wdEIsU0FFTjhrQyxFQUFRODdFLEVBQU1DLE1BS2Y1NEksS0FBSyszQixPQUFTLFdBRWIsTUFBTXZSLEVBQVMsSUFBSXFVLEdBR2JnK0csR0FBTyxJQUFJNWlILElBQWE2QyxtQkFBb0JrRyxFQUFPc0osR0FBSSxJQUFJek4sR0FBUyxFQUFHLEVBQUcsSUFDMUVpK0csRUFBY0QsRUFBSzkwSCxRQUFROEYsU0FFM0JrdkgsRUFBZSxJQUFJbCtHLEdBQ25CbStHLEVBQWlCLElBQUkvaUgsR0FFckJnakgsRUFBUSxFQUFJcDVJLEtBQUtvSCxHQUV2QixPQUFPLFdBRU4sTUFBTTY0QixFQUFXcWxCLEVBQU1ubUIsT0FBT2MsU0FFOUJ0WixFQUFPeEMsS0FBTThiLEdBQVd4YixJQUFLNmdDLEVBQU0xaUMsUUFHbkMrRCxFQUFPd1UsZ0JBQWlCNjlHLEdBR3hCUixFQUFVdnNHLGVBQWdCdGxCLEdBRXJCMitCLEVBQU1reUYsWUFBY3g2RSxJQUFVODdFLEVBQU1DLE1BRXhDTSxFQXNMSyxFQUFJcjVJLEtBQUtvSCxHQUFLLEdBQUssR0FBS2srQyxFQUFNbXlGLGlCQWxML0JueUYsRUFBTXd4RixlQUVWMEIsRUFBVXJ0SCxPQUFTbXVILEVBQWVudUgsTUFBUW02QixFQUFNeXhGLGNBQ2hEeUIsRUFBVWg3RyxLQUFPODdHLEVBQWU5N0csSUFBTThuQixFQUFNeXhGLGdCQUk1Q3lCLEVBQVVydEgsT0FBU211SCxFQUFlbnVILE1BQ2xDcXRILEVBQVVoN0csS0FBTzg3RyxFQUFlOTdHLEtBTWpDLElBQUk5MkIsRUFBTTQrQyxFQUFNc3hGLGdCQUNaMXdJLEVBQU1vL0MsRUFBTXV4RixnQkEyRWhCLE9BekVLem9JLFNBQVUxSCxJQUFTMEgsU0FBVWxJLEtBRTVCUSxHQUFRMUcsS0FBS29ILEdBQUtWLEdBQU8weUksRUFBaUIxeUksRUFBTTFHLEtBQUtvSCxLQUFLVixHQUFPMHlJLEdBRWpFbHpJLEdBQVFsRyxLQUFLb0gsR0FBS2xCLEdBQU9rekksRUFBaUJsekksRUFBTWxHLEtBQUtvSCxLQUFLbEIsR0FBT2t6SSxHQUlyRVosRUFBVXJ0SCxNQUZOemtCLEdBQU9SLEVBRU9sRyxLQUFLa0csSUFBS1EsRUFBSzFHLEtBQUswRyxJQUFLUixFQUFLc3lJLEVBQVVydEgsUUFJdENxdEgsRUFBVXJ0SCxPQUFVemtCLEVBQU1SLEdBQVEsRUFDckRsRyxLQUFLa0csSUFBS1EsRUFBSzh4SSxFQUFVcnRILE9BQ3pCbnJCLEtBQUswRyxJQUFLUixFQUFLc3lJLEVBQVVydEgsUUFPNUJxdEgsRUFBVWg3RyxJQUFNeDlCLEtBQUtrRyxJQUFLby9DLEVBQU1veEYsY0FBZTEySSxLQUFLMEcsSUFBSzQrQyxFQUFNcXhGLGNBQWU2QixFQUFVaDdHLE1BRXhGZzdHLEVBQVVqTyxXQUdWaU8sRUFBVWx5SSxRQUFVNGtCLEVBR3BCc3RILEVBQVVseUksT0FBU3RHLEtBQUtrRyxJQUFLby9DLEVBQU1neEYsWUFBYXQySSxLQUFLMEcsSUFBSzQrQyxFQUFNaXhGLFlBQWFpQyxFQUFVbHlJLFVBSTFELElBQXhCZy9DLEVBQU13eEYsY0FFVnh4RixFQUFNMWlDLE9BQU80QixnQkFBaUIrMEgsRUFBV2owRixFQUFNeXhGLGVBSS9DenhGLEVBQU0xaUMsT0FBT3dCLElBQUttMUgsR0FJbkI1eUgsRUFBTzJXLGlCQUFrQms3RyxHQUd6Qjd4SCxFQUFPd1UsZ0JBQWlCODlHLEdBRXhCaDVHLEVBQVM5YixLQUFNbWhDLEVBQU0xaUMsUUFBU3dCLElBQUt1QyxHQUVuQzIrQixFQUFNbm1CLE9BQU84RSxPQUFRcWhCLEVBQU0xaUMsU0FFRSxJQUF4QjBpQyxFQUFNd3hGLGVBRVZ3QyxFQUFlbnVILE9BQVcsRUFBSW02QixFQUFNeXhGLGNBQ3BDdUMsRUFBZTk3RyxLQUFTLEVBQUk4bkIsRUFBTXl4RixjQUVsQ3dDLEVBQVUxMEgsZUFBZ0IsRUFBSXlnQyxFQUFNeXhGLGlCQUlwQ3VDLEVBQWV4c0ksSUFBSyxFQUFHLEVBQUcsR0FFMUJ5c0ksRUFBVXpzSSxJQUFLLEVBQUcsRUFBRyxJQUl0Qm9lLEVBQVEsS0FNSHN1SCxHQUNKTixFQUFhanpILGtCQUFtQnEvQixFQUFNbm1CLE9BQU9jLFVBQWF1cUcsR0FDMUQsR0FBTSxFQUFJMk8sRUFBZTN6SCxJQUFLOC9CLEVBQU1ubUIsT0FBT3BILGFBQWlCeXlHLEtBRTVEbGxGLEVBQU1waUQsY0FBZSt5SSxJQUVyQmlELEVBQWEvMEgsS0FBTW1oQyxFQUFNbm1CLE9BQU9jLFVBQ2hDazVHLEVBQWVoMUgsS0FBTW1oQyxFQUFNbm1CLE9BQU9wSCxZQUNsQ3loSCxHQUFjLEdBRVAsSUFuSUksR0E2SWRyNUksS0FBSzh5QixRQUFVLFdBRWRxeUIsRUFBTTBnRCxXQUFXdmpGLG9CQUFxQixjQUFlZzNILEdBRXJEbjBGLEVBQU0wZ0QsV0FBV3ZqRixvQkFBcUIsY0FBZWkzSCxHQUNyRHAwRixFQUFNMGdELFdBQVd2akYsb0JBQXFCLGdCQUFpQmszSCxHQUN2RHIwRixFQUFNMGdELFdBQVd2akYsb0JBQXFCLFFBQVNtM0gsR0FFL0N0MEYsRUFBTTBnRCxXQUFXdmpGLG9CQUFxQixjQUFlbzNILEdBQ3JEdjBGLEVBQU0wZ0QsV0FBV3ZqRixvQkFBcUIsWUFBYXEzSCxHQUdmLE9BQS9CeDBGLEVBQU1nekYsc0JBRVZoekYsRUFBTWd6RixxQkFBcUI3MUgsb0JBQXFCLFVBQVdtMkgsSUFZN0QsTUFBTXR6RixFQUFRbmxELEtBRVIyNEksRUFBUSxDQUNiQyxNQUFRLEVBQ1JnQixPQUFRLEVBQ1JDLE1BQU8sRUFDUEMsSUFBSyxFQUNMQyxhQUFjLEVBQ2RDLFVBQVcsRUFDWEMsZ0JBQWlCLEVBQ2pCQyxtQkFBb0IsR0FHckIsSUFBSXI5RSxFQUFRODdFLEVBQU1DLEtBRWxCLE1BQU12TyxFQUFNLEtBR05nTyxFQUFZLElBQUluTyxHQUNoQmlQLEVBQWlCLElBQUlqUCxHQUUzQixJQUFJbi9HLEVBQVEsRUFDWixNQUFNcXVILEVBQVksSUFBSXYrRyxHQUN0QixJQUFJdytHLEdBQWMsRUFFbEIsTUFBTWMsRUFBYyxJQUFJMzJILEVBQ2xCNDJILEVBQVksSUFBSTUySCxFQUNoQjYySCxFQUFjLElBQUk3MkgsRUFFbEI4MkgsRUFBVyxJQUFJOTJILEVBQ2YrMkgsRUFBUyxJQUFJLzJILEVBQ2JnM0gsRUFBVyxJQUFJaDNILEVBRWZpM0gsRUFBYSxJQUFJajNILEVBQ2pCazNILEVBQVcsSUFBSWwzSCxFQUNmbTNILEVBQWEsSUFBSW4zSCxFQUVqQm8zSCxFQUFXLEdBQ1hDLEVBQW1CLEdBUXpCLFNBQVNDLElBRVIsT0FBT2o3SSxLQUFLNlAsSUFBSyxJQUFNeTFDLEVBQU0yeEYsV0FJOUIsU0FBU29DLEVBQVl2ekgsR0FFcEJ3ekgsRUFBZW51SCxPQUFTckYsRUFJekIsU0FBU28xSCxFQUFVcDFILEdBRWxCd3pILEVBQWU5N0csS0FBTzFYLEVBSXZCLE1BQU1xMUgsRUFBVSxXQUVmLE1BQU0vNkksRUFBSSxJQUFJNDZCLEdBRWQsT0FBTyxTQUFrQnFVLEVBQVUrckcsR0FFbENoN0ksRUFBRTA5QixvQkFBcUJzOUcsRUFBYyxHQUNyQ2g3SSxFQUFFeWtCLGdCQUFrQndxQixHQUVwQmtxRyxFQUFVbjFILElBQUtoa0IsSUFURCxHQWVWaTdJLEVBQVEsV0FFYixNQUFNajdJLEVBQUksSUFBSTQ2QixHQUVkLE9BQU8sU0FBZ0JxVSxFQUFVK3JHLElBRUUsSUFBN0I5MUYsRUFBTWd5RixtQkFFVmwzSSxFQUFFMDlCLG9CQUFxQnM5RyxFQUFjLElBSXJDaDdJLEVBQUUwOUIsb0JBQXFCczlHLEVBQWMsR0FDckNoN0ksRUFBRW04QixhQUFjK29CLEVBQU1ubUIsT0FBT3NKLEdBQUlyb0MsSUFJbENBLEVBQUV5a0IsZUFBZ0J3cUIsR0FFbEJrcUcsRUFBVW4xSCxJQUFLaGtCLElBbkJILEdBMEJSazdJLEVBQU0sV0FFWCxNQUFNMzBILEVBQVMsSUFBSXFVLEdBRW5CLE9BQU8sU0FBY3VnSCxFQUFRQyxHQUU1QixNQUFNaHFHLEVBQVU4VCxFQUFNMGdELFdBRXRCLEdBQUsxZ0QsRUFBTW5tQixPQUFPc3FCLG9CQUFzQixDQUd2QyxNQUFNeHBCLEVBQVdxbEIsRUFBTW5tQixPQUFPYyxTQUM5QnRaLEVBQU94QyxLQUFNOGIsR0FBV3hiLElBQUs2Z0MsRUFBTTFpQyxRQUNuQyxJQUFJNjRILEVBQWlCOTBILEVBQU8xbkIsU0FHNUJ3OEksR0FBa0J6N0ksS0FBSzhvRCxJQUFPeEQsRUFBTW5tQixPQUFPNm9CLElBQU0sRUFBTWhvRCxLQUFLb0gsR0FBSyxLQUdqRSt6SSxFQUFTLEVBQUlJLEVBQVNFLEVBQWlCanFHLEVBQVFrcUcsYUFBY3AyRixFQUFNbm1CLE9BQU8vVCxRQUMxRWl3SCxFQUFPLEVBQUlHLEVBQVNDLEVBQWlCanFHLEVBQVFrcUcsYUFBY3AyRixFQUFNbm1CLE9BQU8vVCxhQUU3RGs2QixFQUFNbm1CLE9BQU9rbkMsc0JBR3hCODBFLEVBQVNJLEdBQVdqMkYsRUFBTW5tQixPQUFPaU0sTUFBUWthLEVBQU1ubUIsT0FBT2dNLE1BQVNtYSxFQUFNbm1CLE9BQU8rb0IsS0FBTzFXLEVBQVFtcUcsWUFBYXIyRixFQUFNbm1CLE9BQU8vVCxRQUNySGl3SCxFQUFPRyxHQUFXbDJGLEVBQU1ubUIsT0FBT2tNLElBQU1pYSxFQUFNbm1CLE9BQU9tTSxRQUFXZ2EsRUFBTW5tQixPQUFPK29CLEtBQU8xVyxFQUFRa3FHLGFBQWNwMkYsRUFBTW5tQixPQUFPL1QsVUFLcEh0b0IsUUFBUXVoQixLQUFNLGdGQUNkaWhDLEVBQU04eEYsV0FBWSxJQWhDVCxHQXdDWixTQUFTd0UsRUFBVUMsR0FFYnYyRixFQUFNbm1CLE9BQU9zcUIsb0JBRWpCditCLEdBQVMyd0gsRUFFRXYyRixFQUFNbm1CLE9BQU9rbkMsc0JBRXhCL2dCLEVBQU1ubUIsT0FBTytvQixLQUFPbG9ELEtBQUtrRyxJQUFLby9DLEVBQU1reEYsUUFBU3gySSxLQUFLMEcsSUFBSzQrQyxFQUFNbXhGLFFBQVNueEYsRUFBTW5tQixPQUFPK29CLEtBQU8yekYsSUFDMUZ2MkYsRUFBTW5tQixPQUFPb3BCLHlCQUNiaXhGLEdBQWMsSUFJZDEySSxRQUFRdWhCLEtBQU0sdUZBQ2RpaEMsRUFBTTB4RixZQUFhLEdBTXJCLFNBQVM4RSxFQUFTRCxHQUVadjJGLEVBQU1ubUIsT0FBT3NxQixvQkFFakJ2K0IsR0FBUzJ3SCxFQUVFdjJGLEVBQU1ubUIsT0FBT2tuQyxzQkFFeEIvZ0IsRUFBTW5tQixPQUFPK29CLEtBQU9sb0QsS0FBS2tHLElBQUtvL0MsRUFBTWt4RixRQUFTeDJJLEtBQUswRyxJQUFLNCtDLEVBQU1teEYsUUFBU254RixFQUFNbm1CLE9BQU8rb0IsS0FBTzJ6RixJQUMxRnYyRixFQUFNbm1CLE9BQU9vcEIseUJBQ2JpeEYsR0FBYyxJQUlkMTJJLFFBQVF1aEIsS0FBTSx1RkFDZGloQyxFQUFNMHhGLFlBQWEsR0FVckIsU0FBUytFLEVBQXVCcDVILEdBRS9CMjNILEVBQVl4dEksSUFBSzZWLEVBQU1xNUgsUUFBU3I1SCxFQUFNczVILFNBVXZDLFNBQVNDLEVBQW9CdjVILEdBRTVCODNILEVBQVMzdEksSUFBSzZWLEVBQU1xNUgsUUFBU3I1SCxFQUFNczVILFNBa0hwQyxTQUFTRSxJQUVSLEdBQXlCLElBQXBCcEIsRUFBUzk3SSxPQUVicTdJLEVBQVl4dEksSUFBS2l1SSxFQUFVLEdBQUlxQixNQUFPckIsRUFBVSxHQUFJc0IsV0FFOUMsQ0FFTixNQUFNdjdJLEVBQUksSUFBUWk2SSxFQUFVLEdBQUlxQixNQUFRckIsRUFBVSxHQUFJcUIsT0FDaERwN0ksRUFBSSxJQUFRKzVJLEVBQVUsR0FBSXNCLE1BQVF0QixFQUFVLEdBQUlzQixPQUV0RC9CLEVBQVl4dEksSUFBS2hNLEVBQUdFLElBTXRCLFNBQVNzN0ksSUFFUixHQUF5QixJQUFwQnZCLEVBQVM5N0ksT0FFYnc3SSxFQUFTM3RJLElBQUtpdUksRUFBVSxHQUFJcUIsTUFBT3JCLEVBQVUsR0FBSXNCLFdBRTNDLENBRU4sTUFBTXY3SSxFQUFJLElBQVFpNkksRUFBVSxHQUFJcUIsTUFBUXJCLEVBQVUsR0FBSXFCLE9BQ2hEcDdJLEVBQUksSUFBUSs1SSxFQUFVLEdBQUlzQixNQUFRdEIsRUFBVSxHQUFJc0IsT0FFdEQ1QixFQUFTM3RJLElBQUtoTSxFQUFHRSxJQU1uQixTQUFTdTdJLElBRVIsTUFBTXIySCxFQUFLNjBILEVBQVUsR0FBSXFCLE1BQVFyQixFQUFVLEdBQUlxQixNQUN6Q2oySCxFQUFLNDBILEVBQVUsR0FBSXNCLE1BQVF0QixFQUFVLEdBQUlzQixNQUV6Q2h0RyxFQUFXcnZDLEtBQUsybEIsS0FBTU8sRUFBS0EsRUFBS0MsRUFBS0EsR0FFM0N5MEgsRUFBVzl0SSxJQUFLLEVBQUd1aUMsR0FvQnBCLFNBQVNtdEcsRUFBdUI3NUgsR0FFL0IsR0FBd0IsR0FBbkJvNEgsRUFBUzk3SSxPQUViczdJLEVBQVV6dEksSUFBSzZWLEVBQU15NUgsTUFBT3o1SCxFQUFNMDVILFdBRTVCLENBRU4sTUFBTXA4RyxFQUFXdzhHLEVBQTBCOTVILEdBRXJDN2hCLEVBQUksSUFBUTZoQixFQUFNeTVILE1BQVFuOEcsRUFBU24vQixHQUNuQ0UsRUFBSSxJQUFRMmhCLEVBQU0wNUgsTUFBUXA4RyxFQUFTai9CLEdBRXpDdTVJLEVBQVV6dEksSUFBS2hNLEVBQUdFLEdBSW5CdzVJLEVBQVk5MUgsV0FBWTYxSCxFQUFXRCxHQUFjejFILGVBQWdCeWdDLEVBQU02eEYsYUFFdkUsTUFBTTNsRyxFQUFVOFQsRUFBTTBnRCxXQUV0QnF6QyxFQUFZLEVBQUlyNUksS0FBS29ILEdBQUtvekksRUFBWTE1SSxFQUFJMHdDLEVBQVFrcUcsY0FFbERSLEVBQVUsRUFBSWw3SSxLQUFLb0gsR0FBS296SSxFQUFZeDVJLEVBQUl3d0MsRUFBUWtxRyxjQUVoRHBCLEVBQVluMkgsS0FBTW8ySCxHQUluQixTQUFTbUMsRUFBb0IvNUgsR0FFNUIsR0FBeUIsSUFBcEJvNEgsRUFBUzk3SSxPQUVieTdJLEVBQU81dEksSUFBSzZWLEVBQU15NUgsTUFBT3o1SCxFQUFNMDVILFdBRXpCLENBRU4sTUFBTXA4RyxFQUFXdzhHLEVBQTBCOTVILEdBRXJDN2hCLEVBQUksSUFBUTZoQixFQUFNeTVILE1BQVFuOEcsRUFBU24vQixHQUNuQ0UsRUFBSSxJQUFRMmhCLEVBQU0wNUgsTUFBUXA4RyxFQUFTai9CLEdBRXpDMDVJLEVBQU81dEksSUFBS2hNLEVBQUdFLEdBSWhCMjVJLEVBQVNqMkgsV0FBWWcySCxFQUFRRCxHQUFXNTFILGVBQWdCeWdDLEVBQU0reEYsVUFFOURpRSxFQUFLWCxFQUFTNzVJLEVBQUc2NUksRUFBUzM1SSxHQUUxQnk1SSxFQUFTdDJILEtBQU11MkgsR0FJaEIsU0FBU2lDLEVBQXNCaDZILEdBRTlCLE1BQU1zZCxFQUFXdzhHLEVBQTBCOTVILEdBRXJDdUQsRUFBS3ZELEVBQU15NUgsTUFBUW44RyxFQUFTbi9CLEVBQzVCcWxCLEVBQUt4RCxFQUFNMDVILE1BQVFwOEcsRUFBU2ovQixFQUU1QnF1QyxFQUFXcnZDLEtBQUsybEIsS0FBTU8sRUFBS0EsRUFBS0MsRUFBS0EsR0FFM0MwMEgsRUFBUy90SSxJQUFLLEVBQUd1aUMsR0FFakJ5ckcsRUFBV2h1SSxJQUFLLEVBQUc5TSxLQUFLNlAsSUFBS2dySSxFQUFTNzVJLEVBQUk0NUksRUFBVzU1SSxFQUFHc2tELEVBQU0yeEYsWUFFOUQyRSxFQUFVZCxFQUFXOTVJLEdBRXJCNDVJLEVBQVd6MkgsS0FBTTAySCxHQXdCbEIsU0FBU25CLEVBQWUvMkgsSUFFQSxJQUFsQjJpQyxFQUFNOEQsVUFFYyxJQUFwQjJ4RixFQUFTOTdJLFNBRWJxbUQsRUFBTTBnRCxXQUFXNDJDLGtCQUFtQmo2SCxFQUFNazZILFdBRTFDdjNGLEVBQU0wZ0QsV0FBV3pyRixpQkFBa0IsY0FBZXMvSCxHQUNsRHYwRixFQUFNMGdELFdBQVd6ckYsaUJBQWtCLFlBQWF1L0gsSUF3V2xELFNBQXFCbjNILEdBRXBCbzRILEVBQVNwNEksS0FBTWdnQixHQXBXZm02SCxDQUFZbjZILEdBRWUsVUFBdEJBLEVBQU1vNkgsWUE4TVosU0FBdUJwNkgsR0FJdEIsT0FGQXE2SCxFQUFjcjZILEdBRUxvNEgsRUFBUzk3SSxRQUVqQixLQUFLLEVBRUosT0FBU3FtRCxFQUFNMHlGLFFBQVFDLEtBRXRCLEtIMy9Ca0IsRUc2L0JqQixJQUE0QixJQUF2QjN5RixFQUFNNHhGLGFBQXlCLE9BRXBDaUYsSUFFQW4vRSxFQUFRODdFLEVBQU1vQixhQUVkLE1BRUQsS0hyZ0MwQixFR3VnQ3pCLElBQXlCLElBQXBCNTBGLEVBQU04eEYsVUFBc0IsT0FFakNrRixJQUVBdC9FLEVBQVE4N0UsRUFBTXFCLFVBRWQsTUFFRCxRQUVDbjlFLEVBQVE4N0UsRUFBTUMsS0FJaEIsTUFFRCxLQUFLLEVBRUosT0FBU3p6RixFQUFNMHlGLFFBQVFFLEtBRXRCLEtIM2hDd0MsRUc2aEN2QyxJQUEwQixJQUFyQjV5RixFQUFNMHhGLGFBQTRDLElBQXBCMXhGLEVBQU04eEYsVUFBc0IsT0F0WDlEOXhGLEVBQU0weEYsWUFBYXVGLElBRW5CajNGLEVBQU04eEYsV0FBWWtGLElBd1huQnQvRSxFQUFRODdFLEVBQU1zQixnQkFFZCxNQUVELEtIcmlDeUQsRUd1aUN4RCxJQUEwQixJQUFyQjkwRixFQUFNMHhGLGFBQStDLElBQXZCMXhGLEVBQU00eEYsYUFBeUIsT0F4WGpFNXhGLEVBQU0weEYsWUFBYXVGLElBRW5CajNGLEVBQU00eEYsY0FBZWlGLElBMFh0Qm4vRSxFQUFRODdFLEVBQU11QixtQkFFZCxNQUVELFFBRUNyOUUsRUFBUTg3RSxFQUFNQyxLQUloQixNQUVELFFBRUMvN0UsRUFBUTg3RSxFQUFNQyxLQUlYLzdFLElBQVU4N0UsRUFBTUMsTUFFcEJ6ekYsRUFBTXBpRCxjQUFlZ3pJLElBMVJyQitHLENBQWN0NkgsR0FtRGhCLFNBQXNCQSxHQUVyQixJQUFJdTZILEVBRUosT0FBU3Y2SCxFQUFNdzZILFFBRWQsS0FBSyxFQUVKRCxFQUFjNTNGLEVBQU13eUYsYUFBYUosS0FDakMsTUFFRCxLQUFLLEVBRUp3RixFQUFjNTNGLEVBQU13eUYsYUFBYUMsT0FDakMsTUFFRCxLQUFLLEVBRUptRixFQUFjNTNGLEVBQU13eUYsYUFBYUYsTUFDakMsTUFFRCxRQUVDc0YsR0FBZ0IsRUFJbEIsT0FBU0EsR0FFUixLSHQzQjRELEVHdzNCM0QsSUFBMEIsSUFBckI1M0YsRUFBTTB4RixXQUF1QixRQXpYckMsU0FBK0JyMEgsR0FFOUJpNEgsRUFBVzl0SSxJQUFLNlYsRUFBTXE1SCxRQUFTcjVILEVBQU1zNUgsU0F5WG5DbUIsQ0FBc0J6NkgsR0FFdEJxNkMsRUFBUTg3RSxFQUFNa0IsTUFFZCxNQUVELEtIaDRCa0QsRUdrNEJqRCxHQUFLcjNILEVBQU0wNkgsU0FBVzE2SCxFQUFNMjZILFNBQVczNkgsRUFBTTQ2SCxTQUFXLENBRXZELElBQXlCLElBQXBCajRGLEVBQU04eEYsVUFBc0IsT0FFakM4RSxFQUFvQnY1SCxHQUVwQnE2QyxFQUFRODdFLEVBQU1tQixRQUVSLENBRU4sSUFBNEIsSUFBdkIzMEYsRUFBTTR4RixhQUF5QixPQUVwQzZFLEVBQXVCcDVILEdBRXZCcTZDLEVBQVE4N0UsRUFBTWlCLE9BSWYsTUFFRCxLSHQ1Qm9FLEVHdzVCbkUsR0FBS3AzSCxFQUFNMDZILFNBQVcxNkgsRUFBTTI2SCxTQUFXMzZILEVBQU00NkgsU0FBVyxDQUV2RCxJQUE0QixJQUF2Qmo0RixFQUFNNHhGLGFBQXlCLE9BRXBDNkUsRUFBdUJwNUgsR0FFdkJxNkMsRUFBUTg3RSxFQUFNaUIsV0FFUixDQUVOLElBQXlCLElBQXBCejBGLEVBQU04eEYsVUFBc0IsT0FFakM4RSxFQUFvQnY1SCxHQUVwQnE2QyxFQUFRODdFLEVBQU1tQixJQUlmLE1BRUQsUUFFQ2o5RSxFQUFRODdFLEVBQU1DLEtBSVgvN0UsSUFBVTg3RSxFQUFNQyxNQUVwQnp6RixFQUFNcGlELGNBQWVnekksSUExSXJCc0gsQ0FBYTc2SCxJQU1mLFNBQVNrM0gsRUFBZWwzSCxJQUVBLElBQWxCMmlDLEVBQU04RCxVQUVnQixVQUF0QnptQyxFQUFNbzZILFlBa1JaLFNBQXNCcDZILEdBSXJCLE9BRkFxNkgsRUFBY3I2SCxHQUVMcTZDLEdBRVIsS0FBSzg3RSxFQUFNb0IsYUFFVixJQUE0QixJQUF2QjUwRixFQUFNNHhGLGFBQXlCLE9BRXBDc0YsRUFBdUI3NUgsR0FFdkIyaUMsRUFBTXB0QixTQUVOLE1BRUQsS0FBSzRnSCxFQUFNcUIsVUFFVixJQUF5QixJQUFwQjcwRixFQUFNOHhGLFVBQXNCLE9BRWpDc0YsRUFBb0IvNUgsR0FFcEIyaUMsRUFBTXB0QixTQUVOLE1BRUQsS0FBSzRnSCxFQUFNc0IsZ0JBRVYsSUFBMEIsSUFBckI5MEYsRUFBTTB4RixhQUE0QyxJQUFwQjF4RixFQUFNOHhGLFVBQXNCLFFBbldsRSxTQUFrQ3owSCxHQUU1QjJpQyxFQUFNMHhGLFlBQWEyRixFQUFzQmg2SCxHQUV6QzJpQyxFQUFNOHhGLFdBQVlzRixFQUFvQi81SCxHQWlXekM4NkgsQ0FBeUI5NkgsR0FFekIyaUMsRUFBTXB0QixTQUVOLE1BRUQsS0FBSzRnSCxFQUFNdUIsbUJBRVYsSUFBMEIsSUFBckIvMEYsRUFBTTB4RixhQUErQyxJQUF2QjF4RixFQUFNNHhGLGFBQXlCLFFBcldyRSxTQUFxQ3YwSCxHQUUvQjJpQyxFQUFNMHhGLFlBQWEyRixFQUFzQmg2SCxHQUV6QzJpQyxFQUFNNHhGLGNBQWVzRixFQUF1Qjc1SCxHQW1XL0MrNkgsQ0FBNEIvNkgsR0FFNUIyaUMsRUFBTXB0QixTQUVOLE1BRUQsUUFFQzhrQyxFQUFRODdFLEVBQU1DLE1BaFVmNEUsQ0FBYWg3SCxHQW9JZixTQUFzQkEsR0FFckIsSUFBdUIsSUFBbEIyaUMsRUFBTThELFFBRVgsT0FBUzRULEdBRVIsS0FBSzg3RSxFQUFNaUIsT0FFVixJQUE0QixJQUF2QnowRixFQUFNNHhGLGFBQXlCLFFBdmJ2QyxTQUFnQ3YwSCxHQUUvQjQzSCxFQUFVenRJLElBQUs2VixFQUFNcTVILFFBQVNyNUgsRUFBTXM1SCxTQUVwQ3pCLEVBQVk5MUgsV0FBWTYxSCxFQUFXRCxHQUFjejFILGVBQWdCeWdDLEVBQU02eEYsYUFFdkUsTUFBTTNsRyxFQUFVOFQsRUFBTTBnRCxXQUV0QnF6QyxFQUFZLEVBQUlyNUksS0FBS29ILEdBQUtvekksRUFBWTE1SSxFQUFJMHdDLEVBQVFrcUcsY0FFbERSLEVBQVUsRUFBSWw3SSxLQUFLb0gsR0FBS296SSxFQUFZeDVJLEVBQUl3d0MsRUFBUWtxRyxjQUVoRHBCLEVBQVluMkgsS0FBTW8ySCxHQUVsQmoxRixFQUFNcHRCLFNBMmFKMGxILENBQXVCajdILEdBRXZCLE1BRUQsS0FBS20ySCxFQUFNa0IsTUFFVixJQUEwQixJQUFyQjEwRixFQUFNMHhGLFdBQXVCLFFBN2FyQyxTQUErQnIwSCxHQUU5Qms0SCxFQUFTL3RJLElBQUs2VixFQUFNcTVILFFBQVNyNUgsRUFBTXM1SCxTQUVuQ25CLEVBQVdwMkgsV0FBWW0ySCxFQUFVRCxHQUU1QkUsRUFBVzk1SSxFQUFJLEVBRW5CNDZJLEVBQVVYLEtBRUNILEVBQVc5NUksRUFBSSxHQUUxQjg2SSxFQUFTYixLQUlWTCxFQUFXejJILEtBQU0wMkgsR0FFakJ2MUYsRUFBTXB0QixTQTZaSjJsSCxDQUFzQmw3SCxHQUV0QixNQUVELEtBQUttMkgsRUFBTW1CLElBRVYsSUFBeUIsSUFBcEIzMEYsRUFBTTh4RixVQUFzQixRQS9acEMsU0FBNkJ6MEgsR0FFNUIrM0gsRUFBTzV0SSxJQUFLNlYsRUFBTXE1SCxRQUFTcjVILEVBQU1zNUgsU0FFakN0QixFQUFTajJILFdBQVlnMkgsRUFBUUQsR0FBVzUxSCxlQUFnQnlnQyxFQUFNK3hGLFVBRTlEaUUsRUFBS1gsRUFBUzc1SSxFQUFHNjVJLEVBQVMzNUksR0FFMUJ5NUksRUFBU3QySCxLQUFNdTJILEdBRWZwMUYsRUFBTXB0QixTQXVaSjRsSCxDQUFvQm43SCxJQTFKckJvN0gsQ0FBYXA3SCxJQU1mLFNBQVNtM0gsRUFBYW4zSCxHQUVsQnE3SCxFQUFlcjdILEdBRVUsSUFBcEJvNEgsRUFBUzk3SSxTQUVWcW1ELEVBQU0wZ0QsV0FBV2k0QyxzQkFBdUJ0N0gsRUFBTWs2SCxXQUU5Q3YzRixFQUFNMGdELFdBQVd2akYsb0JBQXFCLGNBQWVvM0gsR0FDckR2MEYsRUFBTTBnRCxXQUFXdmpGLG9CQUFxQixZQUFhcTNILElBSXZEeDBGLEVBQU1waUQsY0FBZWl6SSxJQUVyQm41RSxFQUFRODdFLEVBQU1DLEtBSWxCLFNBQVNZLEVBQWlCaDNILEdBRXpCcTdILEVBQWVyN0gsR0F1SWhCLFNBQVNpM0gsRUFBY2ozSCxJQUVDLElBQWxCMmlDLEVBQU04RCxVQUEwQyxJQUFyQjlELEVBQU0weEYsWUFBd0JoNkUsSUFBVTg3RSxFQUFNQyxPQUU5RXAySCxFQUFNOGxGLGlCQUVObmpELEVBQU1waUQsY0FBZWd6SSxJQWphdEIsU0FBMkJ2ekgsR0FFckJBLEVBQU02NEgsT0FBUyxFQUVuQk0sRUFBU2IsS0FFRXQ0SCxFQUFNNjRILE9BQVMsR0FFMUJJLEVBQVVYLEtBSVgzMUYsRUFBTXB0QixTQXVaTmdtSCxDQUFrQnY3SCxHQUVsQjJpQyxFQUFNcGlELGNBQWVpekksS0FJdEIsU0FBU3lDLEVBQVdqMkgsSUFFSSxJQUFsQjJpQyxFQUFNOEQsVUFBeUMsSUFBcEI5RCxFQUFNOHhGLFdBM1p2QyxTQUF3QnowSCxHQUV2QixJQUFJNE4sR0FBYyxFQUVsQixPQUFTNU4sRUFBTWk4RCxNQUVkLEtBQUt0NUIsRUFBTXB2QyxLQUFLeWhJLEdBQ2YyRCxFQUFLLEVBQUdoMkYsRUFBTWl5RixhQUNkaG5ILEdBQWMsRUFDZCxNQUVELEtBQUsrMEIsRUFBTXB2QyxLQUFLMmhJLE9BQ2Z5RCxFQUFLLEdBQUtoMkYsRUFBTWl5RixhQUNoQmhuSCxHQUFjLEVBQ2QsTUFFRCxLQUFLKzBCLEVBQU1wdkMsS0FBS3doSSxLQUNmNEQsRUFBS2gyRixFQUFNaXlGLFlBQWEsR0FDeEJobkgsR0FBYyxFQUNkLE1BRUQsS0FBSyswQixFQUFNcHZDLEtBQUswaEksTUFDZjBELEdBQU9oMkYsRUFBTWl5RixZQUFhLEdBQzFCaG5ILEdBQWMsRUFLWEEsSUFHSjVOLEVBQU04bEYsaUJBRU5uakQsRUFBTXB0QixVQTRYUGltSCxDQUFleDdILEdBOEloQixTQUFTODJILEVBQWU5MkgsSUFFQSxJQUFsQjJpQyxFQUFNOEQsU0FFWHptQyxFQUFNOGxGLGlCQVVQLFNBQVN1MUMsRUFBZXI3SCxVQUVoQnE0SCxFQUFrQnI0SCxFQUFNazZILFdBRS9CLElBQU0sSUFBSTU3SSxFQUFJLEVBQUdBLEVBQUk4NUksRUFBUzk3SSxPQUFRZ0MsSUFFckMsR0FBSzg1SSxFQUFVOTVJLEdBQUk0N0ksV0FBYWw2SCxFQUFNazZILFVBR3JDLFlBREE5QixFQUFTOXJJLE9BQVFoTyxFQUFHLEdBU3ZCLFNBQVMrN0ksRUFBY3I2SCxHQUV0QixJQUFJc2QsRUFBVys2RyxFQUFrQnI0SCxFQUFNazZILGdCQUVyQmw5SCxJQUFic2dCLElBRUpBLEVBQVcsSUFBSXRjLEVBQ2ZxM0gsRUFBa0JyNEgsRUFBTWs2SCxXQUFjNThHLEdBSXZDQSxFQUFTbnpCLElBQUs2VixFQUFNeTVILE1BQU96NUgsRUFBTTA1SCxPQUlsQyxTQUFTSSxFQUEwQjk1SCxHQUVsQyxNQUFNeTdILEVBQVl6N0gsRUFBTWs2SCxZQUFjOUIsRUFBVSxHQUFJOEIsVUFBYzlCLEVBQVUsR0FBTUEsRUFBVSxHQUU1RixPQUFPQyxFQUFrQm9ELEVBQVF2QixXQU1sQ3YzRixFQUFNMGdELFdBQVd6ckYsaUJBQWtCLGNBQWVrL0gsR0FFbERuMEYsRUFBTTBnRCxXQUFXenJGLGlCQUFrQixjQUFlbS9ILEdBQ2xEcDBGLEVBQU0wZ0QsV0FBV3pyRixpQkFBa0IsZ0JBQWlCby9ILEdBQ3BEcjBGLEVBQU0wZ0QsV0FBV3pyRixpQkFBa0IsUUFBU3EvSCxFQUFjLENBQUV5RSxTQUFTLElBSXJFbCtJLEtBQUsrM0IsVUNoc0NQLElDRFFvbUgsR0RDSkMsR0FBMkIsV0FDM0IsU0FBU0EsRUFBVTMzSSxHQUNmekcsS0FBS2lxRCxNQUFRLElBQUl5a0QsR0FDakIxdUcsS0FBS2lxRCxNQUFNdlksV0FBYSxJQUFJMWtCLEdBQU0sU0FDbEMsSUFBSXF4SCxFQUFLNTNJLEVBQU82M0ksd0JBQXlCbDZJLEVBQVFpNkksRUFBR2o2SSxNQUFPQyxFQUFTZzZJLEVBQUdoNkksT0FDdkVyRSxLQUFLZ3FELFNBQVcsSUFBSTA2QyxHQUFjLENBQUVqK0YsT0FBUUEsSUFDNUN6RyxLQUFLZ3FELFNBQVMzMEIsUUFBUWp4QixFQUFPQyxHQUM3QnJFLEtBQUs2N0IsT0FBUyxJQUFJK3JCLEdBQ2xCNW5ELEtBQUs2N0IsT0FBT2lzQixPQUFTMWpELEVBQVFDLEVBQzdCckUsS0FBSzY3QixPQUFPdXNCLHlCQUNacG9ELEtBQUt1K0ksU0FBVyxJQUFJdEksR0FBY2oySSxLQUFLNjdCLE9BQVFwMUIsR0FNbkQsT0FKQTIzSSxFQUFVNytJLFVBQVVvckQsT0FBUyxXQUN6QjNxRCxLQUFLdStJLFNBQVN4bUgsU0FDZC8zQixLQUFLZ3FELFNBQVNXLE9BQU8zcUQsS0FBS2lxRCxNQUFPanFELEtBQUs2N0IsU0FFbkN1aUgsRUFoQm1CLEdDRjFCSSxJQUNJTCxHQUFnQixTQUFVNzdJLEVBQUd6RCxHQUk3QixPQUhBcy9JLEdBQWdCai9JLE9BQU9vSixnQkFDbEIsQ0FBRUcsVUFBVyxjQUFnQm5KLE9BQVMsU0FBVWdELEVBQUd6RCxHQUFLeUQsRUFBRW1HLFVBQVk1SixJQUN2RSxTQUFVeUQsRUFBR3pELEdBQUssSUFBSyxJQUFJMEUsS0FBSzFFLEVBQU9LLE9BQU9LLFVBQVV5RSxlQUFlcEQsS0FBSy9CLEVBQUcwRSxLQUFJakIsRUFBRWlCLEdBQUsxRSxFQUFFMEUsS0FDekY0NkksR0FBYzc3SSxFQUFHekQsSUFFckIsU0FBVXlELEVBQUd6RCxHQUNoQixHQUFpQixtQkFBTkEsR0FBMEIsT0FBTkEsRUFDM0IsTUFBTSxJQUFJc0MsVUFBVSx1QkFBeUJxSSxPQUFPM0ssR0FBSyxpQ0FFN0QsU0FBUzQvSSxJQUFPeitJLEtBQUsySSxZQUFjckcsRUFEbkM2N0ksR0FBYzc3SSxFQUFHekQsR0FFakJ5RCxFQUFFL0MsVUFBa0IsT0FBTlYsRUFBYUssT0FBT21KLE9BQU94SixJQUFNNC9JLEVBQUdsL0ksVUFBWVYsRUFBRVUsVUFBVyxJQUFJay9JLEtBT25GQyxHQUEwQixTQUFVQyxHQUVwQyxTQUFTRCxFQUFTajRJLEdBQ2QsSUFBSXUvRixFQUFRMjRDLEVBQU8vOUksS0FBS1osS0FBTXlHLElBQVd6RyxLQUd6QyxPQUZBZ21HLEVBQU00NEMsSUFBTSxLQUNaNTRDLEVBQU02NEMsUUFDQzc0QyxFQXFDWCxPQTFDQXc0QyxHQUFVRSxFQUFVQyxHQU9wQkQsRUFBU24vSSxVQUFVdzRCLE9BQVMsU0FBVXFsRyxHQUNsQyxJQUFJd2hCLEVBQU01K0ksS0FBSzQrSSxJQUNmLEdBQUtBLEdBQVF4aEIsRUFBUWhsSCxjQUFyQixDQUdBLElBQUk4a0YsRUFBT2tnQyxFQUFRaGxILGNBQWNoRyxLQUFJLFNBQVU3TyxHQUMzQyxNQUFPLENBQ0g1QyxFQUFTLElBQU40QyxFQUFFNUMsRUFBVSxHQUNmRSxJQUFXLElBQU4wQyxFQUFFMUMsRUFBVSxJQUNqQkssRUFBUyxJQUFOcUMsRUFBRXJDLEVBQVUsT0FHbkI0OUksRUFBbUJ6L0csR0FBVSxDQUM3QjY5RCxFQUFLLEVBQUE2aEQsZUFBQSxlQUNMN2hELEVBQUssRUFBQTZoRCxlQUFBLGtCQUVMQyxFQUFjMy9HLEdBQVUsQ0FDeEI2OUQsRUFBSyxFQUFBNmhELGVBQUEsVUFDTDdoRCxFQUFLLEVBQUE2aEQsZUFBQSxhQUVUSCxFQUFJSyxNQUFNcjNJLFNBQVMxRyxFQUFJckIsS0FBS29ILEdBQUssRUFBSXlrSSxHQUFTb1QsRUFBa0JFLEdBQ2hFSixFQUFJTSxLQUFLdDNJLFNBQVMxRyxHQUFLckIsS0FBS29ILEdBQUssRUFBSXlrSSxHQUFTb1QsRUFBa0I1aEQsRUFBSyxFQUFBNmhELGVBQUEsT0FBd0JILEVBQUlLLE1BQU1yM0ksU0FBUzFHLEVBQ2hIMDlJLEVBQUlPLGFBQWF2M0ksU0FBUzFHLEdBQUssR0FBS3dxSSxHQUFTeHVDLEVBQUssRUFBQTZoRCxlQUFBLGVBQStCN2hELEVBQUssRUFBQTZoRCxlQUFBLGFBQThCSCxFQUFJSyxNQUFNcjNJLFNBQVMxRyxFQUN2STA5SSxFQUFJUSxVQUFVeDNJLFNBQVMxRyxFQUFJckIsS0FBS29ILEdBQUssRUFBSXlrSSxHQUFTeHVDLEVBQUssRUFBQTZoRCxlQUFBLFlBQTRCN2hELEVBQUssRUFBQTZoRCxlQUFBLGFBQThCSCxFQUFJTyxhQUFhdjNJLFNBQVMxRyxFQUFJMDlJLEVBQUlLLE1BQU1yM0ksU0FBUzFHLEVBQ3ZLMDlJLEVBQUlTLGNBQWN6M0ksU0FBUzFHLEVBQUksR0FBS3JCLEtBQUtvSCxHQUFLeWtJLEdBQVN4dUMsRUFBSyxFQUFBNmhELGVBQUEsZ0JBQWdDN2hELEVBQUssRUFBQTZoRCxlQUFBLGNBQStCSCxFQUFJSyxNQUFNcjNJLFNBQVMxRyxFQUNuSjA5SSxFQUFJVSxXQUFXMTNJLFNBQVMxRyxHQUFLLEdBQUtyQixLQUFLb0gsR0FBS3lrSSxHQUFTeHVDLEVBQUssRUFBQTZoRCxlQUFBLGFBQTZCN2hELEVBQUssRUFBQTZoRCxlQUFBLGNBQStCSCxFQUFJUyxjQUFjejNJLFNBQVMxRyxFQUFJMDlJLEVBQUlLLE1BQU1yM0ksU0FBUzFHLEVBQzdLMDlJLEVBQUlXLFFBQVEzM0ksU0FBUzFHLEVBQUlyQixLQUFLb0gsR0FBSyxFQUFJeWtJLEdBQVN4dUMsRUFBSyxFQUFBNmhELGVBQUEsVUFBMEI3aEQsRUFBSyxFQUFBc2lELG9CQUFBLFlBQWtDWixFQUFJSyxNQUFNcjNJLFNBQVMxRyxFQUN6STA5SSxFQUFJYSxTQUFTNzNJLFNBQVMxRyxFQUFJckIsS0FBS29ILEdBQUssRUFBSXlrSSxHQUFTeHVDLEVBQUssRUFBQTZoRCxlQUFBLFdBQTJCN2hELEVBQUssRUFBQXdpRCxxQkFBQSxhQUFvQ2QsRUFBSUssTUFBTXIzSSxTQUFTMUcsRUFDN0lsQixLQUFLMnFELFdBRVQrekYsRUFBU24vSSxVQUFVcy9JLE1BQVEsV0o1Q3hCLElBQ0NJLEVBS0FDLEVBQ0FTLEVBS0FKLEVBQ0FLLEVBS0FILEVBQ0FJLEVBS0FWLEVBQ0FXLEVBS0FWLEVBQ0FXLEVBS0FWLEVBQ0FXLEVBS0FWLEVBQ0FXLEVJRUFqZ0osS0FBSzQrSSxLSjVDTEssRUFBUTNULEdBQVUsQ0FDbEJqMUgsS0FBTSxRQUNOaFMsT0FBUSxPQUNSRCxNQUFPLFNBRVA4NkksRUFBTzdULEtBQ1BzVSxFQUFPclUsR0FBVSxDQUNqQmoxSCxLQUFNLE9BQ05oUyxPQUFRLE9BQ1JELE1BQU8sU0FFUG03SSxFQUFVbFUsS0FDVnVVLEVBQVV0VSxHQUFVLENBQ3BCajFILEtBQU0sV0FDTmpTLE1BQU8sT0FDUEMsT0FBUSxTQUVSbzdJLEVBQVdwVSxLQUNYd1UsRUFBV3ZVLEdBQVUsQ0FDckJqMUgsS0FBTSxZQUNOalMsTUFBTyxPQUNQQyxPQUFRLFNBRVI4NkksRUFBZTlULEtBQ2Z5VSxFQUFnQnhVLEdBQVUsQ0FDMUJqMUgsS0FBTSxrQkFDTmpTLE1BQU8sTUFDUEMsT0FBUSxTQUVSKzZJLEVBQVkvVCxLQUNaMFUsRUFBZ0J6VSxHQUFVLENBQzFCajFILEtBQU0sa0JBQ05qUyxNQUFPLE1BQ1BDLE9BQVEsU0FFUmc3SSxFQUFnQmhVLEtBQ2hCMlUsRUFBaUIxVSxHQUFVLENBQzNCajFILEtBQU0sbUJBQ05qUyxNQUFPLE1BQ1BDLE9BQVEsU0FFUmk3SSxFQUFhalUsS0FDYjRVLEVBQWlCM1UsR0FBVSxDQUMzQmoxSCxLQUFNLG1CQUNOalMsTUFBTyxNQUNQQyxPQUFRLFNBRVo0NkksRUFBTWg3SCxJQUFJaTdILEdBQ1ZBLEVBQUtwL0csU0FBU2ovQixFQUFJLEdBQ2xCcStJLEVBQUtwL0csU0FBUzUrQixFQUFJLEVBQ2xCZytJLEVBQUtqN0gsSUFBSTA3SCxHQUNUQSxFQUFLNy9HLFNBQVNqL0IsRUFBSSxHQUNsQm8rSSxFQUFNaDdILElBQUlzN0gsR0FDVkEsRUFBUXovRyxTQUFTbi9CLEVBQUksR0FDckI0K0ksRUFBUXovRyxTQUFTai9CLEdBQUssR0FDdEIwK0ksRUFBUXovRyxTQUFTNStCLEdBQUssRUFDdEJxK0ksRUFBUXQ3SCxJQUFJMjdILEdBQ1pBLEVBQVE5L0csU0FBU24vQixHQUFLLEVBQ3RCaS9JLEVBQVE5L0csU0FBU2ovQixHQUFLLEVBQ3RCKytJLEVBQVE5L0csU0FBUzUrQixHQUFLLEVBQ3RCKzlJLEVBQU1oN0gsSUFBSXc3SCxHQUNWQSxFQUFTMy9HLFNBQVNuL0IsR0FBSyxHQUN2QjgrSSxFQUFTMy9HLFNBQVNqL0IsR0FBSyxHQUN2QjQrSSxFQUFTMy9HLFNBQVM1K0IsR0FBSyxFQUN2QnUrSSxFQUFTeDdILElBQUk0N0gsR0FDYkEsRUFBUy8vRyxTQUFTbi9CLEVBQUksRUFDdEJrL0ksRUFBUy8vRyxTQUFTai9CLEdBQUssRUFDdkJnL0ksRUFBUy8vRyxTQUFTNStCLEdBQUssRUFDdkIrOUksRUFBTWg3SCxJQUFJazdILEdBQ1ZBLEVBQWFyL0csU0FBU24vQixFQUFJLEdBQzFCdytJLEVBQWFyL0csU0FBU2ovQixFQUFJLEdBQzFCcytJLEVBQWFsN0gsSUFBSTY3SCxHQUNqQkEsRUFBY2hnSCxTQUFTbi9CLEVBQUksR0FDM0JtL0ksRUFBY2hnSCxTQUFTai9CLEVBQUksRUFDM0JpL0ksRUFBY2hnSCxTQUFTNStCLEdBQUssRUFDNUI0K0ksRUFBYzc3SCxJQUFJbTdILEdBQ2xCQSxFQUFVdC9HLFNBQVNuL0IsRUFBSSxFQUN2QnkrSSxFQUFVdC9HLFNBQVNqL0IsRUFBSSxHQUN2QnUrSSxFQUFVdC9HLFNBQVM1K0IsRUFBSSxFQUN2QmsrSSxFQUFVbjdILElBQUk4N0gsR0FDZEEsRUFBY2pnSCxTQUFTbi9CLEVBQUksR0FDM0JvL0ksRUFBY2pnSCxTQUFTai9CLEdBQUssRUFDNUJrL0ksRUFBY2pnSCxTQUFTNStCLEdBQUssRUFDNUIrOUksRUFBTWg3SCxJQUFJbzdILEdBQ1ZBLEVBQWN2L0csU0FBU24vQixHQUFLLEdBQzVCMCtJLEVBQWN2L0csU0FBU2ovQixFQUFJLEdBQzNCdytJLEVBQWNwN0gsSUFBSSs3SCxHQUNsQkEsRUFBZWxnSCxTQUFTbi9CLEdBQUssR0FDN0JxL0ksRUFBZWxnSCxTQUFTai9CLEVBQUksRUFDNUJtL0ksRUFBZWxnSCxTQUFTNStCLEdBQUssRUFDN0I4K0ksRUFBZS83SCxJQUFJcTdILEdBQ25CQSxFQUFXeC9HLFNBQVNuL0IsR0FBSyxFQUN6QjIrSSxFQUFXeC9HLFNBQVNqL0IsRUFBSSxHQUN4QnkrSSxFQUFXeC9HLFNBQVM1K0IsRUFBSSxFQUN4Qm8rSSxFQUFXcjdILElBQUlnOEgsR0FDZkEsRUFBZW5nSCxTQUFTbi9CLEdBQUssR0FDN0JzL0ksRUFBZW5nSCxTQUFTai9CLEdBQUssRUFDN0JvL0ksRUFBZW5nSCxTQUFTNStCLEdBQUssRUFDdEIsQ0FDSGcvSSxPQUFRakIsRUFDUkEsTUFBT0EsRUFDUEMsS0FBTUEsRUFDTlMsS0FBTUEsRUFDTkosUUFBU0EsRUFDVEssUUFBU0EsRUFDVEgsU0FBVUEsRUFDVkksU0FBVUEsRUFDVlYsYUFBY0EsRUFDZFcsY0FBZUEsRUFDZlYsVUFBV0EsRUFDWFcsY0FBZUEsRUFDZlYsY0FBZUEsRUFDZlcsZUFBZ0JBLEVBQ2hCVixXQUFZQSxFQUNaVyxlQUFnQkEsSUlyRWhCamdKLEtBQUtpcUQsTUFBTWhtQyxJQUFJamtCLEtBQUs0K0ksSUFBSXNCLFFBQ3hCbGdKLEtBQUs2N0IsT0FBT2lFLFNBQVM1K0IsRUFBSSxLQUV0Qnc5SSxFQTNDa0IsQ0E0QzNCTixjQzdERStCLEdBQStCLFdBQy9CLFNBQVNBLEVBQWM5N0ksRUFBUUQsUUFDWixJQUFYQyxJQUFxQkEsRUFBUyxVQUNwQixJQUFWRCxJQUFvQkEsRUFBUSxLQUNoQyxJQUFJNGhHLEVBQVFobUcsS0FDWkEsS0FBS3dWLFVBQVksR0FDakIsSUFBSTRxSSxFQUFlbjlJLFNBQVMrUixjQUFjLFNBQzFDaFYsS0FBS2s5RixLQUFPLElBQUksRUFBQW1qRCxLQUFLLENBQ2pCNXFJLFdBQVksU0FBVTI4RyxHQUNsQixNQUFPLGdEQUFnRDVtSCxPQUFPNG1ILE1BR3RFcHlILEtBQUtrOUYsS0FBS3hqRixXQUFXLENBQ2pCekIsZ0JBQWlCLEVBQ2pCbUIsaUJBQWlCLEVBQ2pCQyxvQkFBb0IsRUFDcEJDLG9CQUFvQixFQUNwQkMsdUJBQXdCLEdBQ3hCQyxzQkFBdUIsS0FFM0J4WixLQUFLazlGLEtBQUt2bUYsV0FBVSxTQUFVeW1ILEdBQVcsT0FBT3AzQixFQUFNczZDLGdCQUFnQmxqQixNQUN0RXA5SCxLQUFLNjdCLE9BQVMsSUFBSSxHQUFBOHJCLE9BQU95NEYsRUFBYyxDQUNuQ3g3SSxRQUFTLFdBQWMsT0FBT29oRyxFQUFNOUksS0FBS3ZoRixLQUFLLENBQUV4RCxNQUFPaW9JLEtBQ3ZEaDhJLE1BQU9BLEVBQ1BDLE9BQVFBLElBa0JoQixPQWZBODdJLEVBQWM1Z0osVUFBVXlGLE1BQVEsV0FDNUJoRixLQUFLNjdCLE9BQU83MkIsU0FFaEJtN0ksRUFBYzVnSixVQUFVdUYsS0FBTyxXQUMzQjlFLEtBQUs2N0IsT0FBTy8yQixRQUVoQnE3SSxFQUFjNWdKLFVBQVVnaEosWUFBYyxTQUFVcCtILEdBQzVDbmlCLEtBQUt3VixVQUFVaFQsS0FBSzJmLElBRXhCZytILEVBQWM1Z0osVUFBVWloSixlQUFpQixTQUFVcitILEdBQy9DbmlCLEtBQUt3VixVQUFVMUcsT0FBTzlPLEtBQUt3VixVQUFVN0wsUUFBUXdZLEdBQVcsSUFFNURnK0gsRUFBYzVnSixVQUFVK2dKLGdCQUFrQixTQUFVbGpCLEdBQ2hEcDlILEtBQUt3VixVQUFVNG9GLFNBQVEsU0FBVTl4RSxHQUFNLE9BQU9BLEVBQUc4d0csT0FFOUMraUIsRUExQ3VCLGFDQTlCTSxHQUE0QixXQUM1QixTQUFTQSxFQUFXaDZJLEdBQ2hCekcsS0FBS3lHLE9BQVNBLEVBVWxCLE9BUkFnNkksRUFBV2xoSixVQUFVdzRCLE9BQVMsU0FBVXFsRyxHQUNwQyxJQUFJc2pCLEVBQVkxZ0osS0FBS3lHLE9BQU93TyxXQUFXLE1BQ3ZDeXJJLEVBQVV4ckksVUFBVWtvSCxFQUFRamxILE1BQU8sRUFBRyxFQUFHblksS0FBS3lHLE9BQU9yQyxNQUFPcEUsS0FBS3lHLE9BQU9wQyxRQUN4RXE4SSxFQUFVQyx5QkFBMkIsZUFDckMsS0FBQUMsZ0JBQWVGLEVBQVd0akIsRUFBUWhsSCxjQUFlLEVBQUF5b0ksaUJBQWtCLENBQUU1NkksTUFBTyxVQUFXQyxVQUFXLE1BQ2xHLEtBQUE0NkksZUFBY0osRUFBV3RqQixFQUFRaGxILGNBQWUsQ0FBRW5TLE1BQU8sVUFBV0UsT0FBUSxLQUM1RXU2SSxFQUFVdjVJLFdBRVBzNUksRUFab0IsSUNDeEIsV0FDSCxJQUFJTSxFQUFpQixLQUNqQkMsRUFBZ0IsSUFBSWIsR0FDeEJhLEVBQWNULGFBQVksU0FBVW5qQixHQUFXLE9BQU8yakIsRUFBaUIzakIsS0FDdkU0akIsRUFBY2g4SSxRQUNkLElBQUlpOEksRUFBUyxDQUNULElBQUlSLEdBQVd4OUksU0FBU2krSSxlQUFlLGlCQUV2QyxJQUFJeEMsR0FBU3o3SSxTQUFTaStJLGVBQWUsaUJBRXpDLFNBQVNuUSxJQUNMdHNJLHNCQUFzQnNzSSxHQUNsQmdRLEdBQ0FFLEVBQU83aUQsU0FBUSxTQUFVbjBDLEdBQVMsT0FBT0EsRUFBTWx5QixPQUFPZ3BILE1BRzlEaFEsR0FFSm9RIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3dsLy4vbm9kZV9tb2R1bGVzL0BtZWRpYXBpcGUvY2FtZXJhX3V0aWxzL2NhbWVyYV91dGlscy5qcyIsIndlYnBhY2s6Ly9vd2wvLi9ub2RlX21vZHVsZXMvQG1lZGlhcGlwZS9kcmF3aW5nX3V0aWxzL2RyYXdpbmdfdXRpbHMuanMiLCJ3ZWJwYWNrOi8vb3dsLy4vbm9kZV9tb2R1bGVzL0BtZWRpYXBpcGUvcG9zZS9wb3NlLmpzIiwid2VicGFjazovL293bC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vd2wvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9vd2wvLi9ub2RlX21vZHVsZXMvdGhyZWUvYnVpbGQvdGhyZWUubW9kdWxlLmpzIiwid2VicGFjazovL293bC8uL3NyYy9vd2wtc2NlbmUvb3dsLnRzIiwid2VicGFjazovL293bC8uL3NyYy9jb3JlL21hdGgudHMiLCJ3ZWJwYWNrOi8vb3dsLy4vbm9kZV9tb2R1bGVzL3RocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzLmpzIiwid2VicGFjazovL293bC8uL3NyYy9jb3JlL2Jhc2Utc2NlbmUudHMiLCJ3ZWJwYWNrOi8vb3dsLy4vc3JjL293bC1zY2VuZS9vd2wtc2NlbmUudHMiLCJ3ZWJwYWNrOi8vb3dsLy4vc3JjL2NvcmUvcG9zZS1lc3RpbWF0b3IudHMiLCJ3ZWJwYWNrOi8vb3dsLy4vc3JjL3ZpZGVvLXNjZW5lL3ZpZGVvLXNjZW5lLnRzIiwid2VicGFjazovL293bC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXsvKlxuXG4gQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBuKGEpe3ZhciBiPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGI8YS5sZW5ndGg/e2RvbmU6ITEsdmFsdWU6YVtiKytdfTp7ZG9uZTohMH19fXZhciBxPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGIsZSl7aWYoYT09QXJyYXkucHJvdG90eXBlfHxhPT1PYmplY3QucHJvdG90eXBlKXJldHVybiBhO2FbYl09ZS52YWx1ZTtyZXR1cm4gYX07XG5mdW5jdGlvbiB0KGEpe2E9W1wib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWxUaGlzJiZnbG9iYWxUaGlzLGEsXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93LFwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLFwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWwmJmdsb2JhbF07Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDsrK2Ipe3ZhciBlPWFbYl07aWYoZSYmZS5NYXRoPT1NYXRoKXJldHVybiBlfXRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgZ2xvYmFsIG9iamVjdFwiKTt9dmFyIHU9dCh0aGlzKTtmdW5jdGlvbiB2KGEsYil7aWYoYilhOnt2YXIgZT11O2E9YS5zcGxpdChcIi5cIik7Zm9yKHZhciBmPTA7ZjxhLmxlbmd0aC0xO2YrKyl7dmFyIGg9YVtmXTtpZighKGggaW4gZSkpYnJlYWsgYTtlPWVbaF19YT1hW2EubGVuZ3RoLTFdO2Y9ZVthXTtiPWIoZik7YiE9ZiYmbnVsbCE9YiYmcShlLGEse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpifSl9fVxudihcIlN5bWJvbFwiLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIobCl7aWYodGhpcyBpbnN0YW5jZW9mIGIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvclwiKTtyZXR1cm4gbmV3IGUoZisobHx8XCJcIikrXCJfXCIraCsrLGwpfWZ1bmN0aW9uIGUobCxjKXt0aGlzLmc9bDtxKHRoaXMsXCJkZXNjcmlwdGlvblwiLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Y30pfWlmKGEpcmV0dXJuIGE7ZS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nfTt2YXIgZj1cImpzY29tcF9zeW1ib2xfXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCkrXCJfXCIsaD0wO3JldHVybiBifSk7XG52KFwiU3ltYm9sLml0ZXJhdG9yXCIsZnVuY3Rpb24oYSl7aWYoYSlyZXR1cm4gYTthPVN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKTtmb3IodmFyIGI9XCJBcnJheSBJbnQ4QXJyYXkgVWludDhBcnJheSBVaW50OENsYW1wZWRBcnJheSBJbnQxNkFycmF5IFVpbnQxNkFycmF5IEludDMyQXJyYXkgVWludDMyQXJyYXkgRmxvYXQzMkFycmF5IEZsb2F0NjRBcnJheVwiLnNwbGl0KFwiIFwiKSxlPTA7ZTxiLmxlbmd0aDtlKyspe3ZhciBmPXVbYltlXV07XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGYucHJvdG90eXBlW2FdJiZxKGYucHJvdG90eXBlLGEse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB3KG4odGhpcykpfX0pfXJldHVybiBhfSk7ZnVuY3Rpb24gdyhhKXthPXtuZXh0OmF9O2FbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHgoYSl7dmFyIGI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yJiZhW1N5bWJvbC5pdGVyYXRvcl07cmV0dXJuIGI/Yi5jYWxsKGEpOntuZXh0Om4oYSl9fWZ1bmN0aW9uIHkoKXt0aGlzLmk9ITE7dGhpcy5nPW51bGw7dGhpcy5vPXZvaWQgMDt0aGlzLmo9MTt0aGlzLm09MDt0aGlzLmg9bnVsbH1mdW5jdGlvbiB6KGEpe2lmKGEuaSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTthLmk9ITB9eS5wcm90b3R5cGUubD1mdW5jdGlvbihhKXt0aGlzLm89YX07ZnVuY3Rpb24gQShhLGIpe2EuaD17RjpiLEc6ITB9O2Euaj1hLm19eS5wcm90b3R5cGUucmV0dXJuPWZ1bmN0aW9uKGEpe3RoaXMuaD17cmV0dXJuOmF9O3RoaXMuaj10aGlzLm19O2Z1bmN0aW9uIEIoYSl7dGhpcy5nPW5ldyB5O3RoaXMuaD1hfVxuZnVuY3Rpb24gQyhhLGIpe3ooYS5nKTt2YXIgZT1hLmcuZztpZihlKXJldHVybiBEKGEsXCJyZXR1cm5cImluIGU/ZVtcInJldHVyblwiXTpmdW5jdGlvbihmKXtyZXR1cm57dmFsdWU6Zixkb25lOiEwfX0sYixhLmcucmV0dXJuKTthLmcucmV0dXJuKGIpO3JldHVybiBIKGEpfWZ1bmN0aW9uIEQoYSxiLGUsZil7dHJ5e3ZhciBoPWIuY2FsbChhLmcuZyxlKTtpZighKGggaW5zdGFuY2VvZiBPYmplY3QpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJJdGVyYXRvciByZXN1bHQgXCIraCtcIiBpcyBub3QgYW4gb2JqZWN0XCIpO2lmKCFoLmRvbmUpcmV0dXJuIGEuZy5pPSExLGg7dmFyIGw9aC52YWx1ZX1jYXRjaChjKXtyZXR1cm4gYS5nLmc9bnVsbCxBKGEuZyxjKSxIKGEpfWEuZy5nPW51bGw7Zi5jYWxsKGEuZyxsKTtyZXR1cm4gSChhKX1cbmZ1bmN0aW9uIEgoYSl7Zm9yKDthLmcuajspdHJ5e3ZhciBiPWEuaChhLmcpO2lmKGIpcmV0dXJuIGEuZy5pPSExLHt2YWx1ZTpiLnZhbHVlLGRvbmU6ITF9fWNhdGNoKGUpe2EuZy5vPXZvaWQgMCxBKGEuZyxlKX1hLmcuaT0hMTtpZihhLmcuaCl7Yj1hLmcuaDthLmcuaD1udWxsO2lmKGIuRyl0aHJvdyBiLkY7cmV0dXJue3ZhbHVlOmIucmV0dXJuLGRvbmU6ITB9fXJldHVybnt2YWx1ZTp2b2lkIDAsZG9uZTohMH19XG5mdW5jdGlvbiBJKGEpe3RoaXMubmV4dD1mdW5jdGlvbihiKXt6KGEuZyk7YS5nLmc/Yj1EKGEsYS5nLmcubmV4dCxiLGEuZy5sKTooYS5nLmwoYiksYj1IKGEpKTtyZXR1cm4gYn07dGhpcy50aHJvdz1mdW5jdGlvbihiKXt6KGEuZyk7YS5nLmc/Yj1EKGEsYS5nLmdbXCJ0aHJvd1wiXSxiLGEuZy5sKTooQShhLmcsYiksYj1IKGEpKTtyZXR1cm4gYn07dGhpcy5yZXR1cm49ZnVuY3Rpb24oYil7cmV0dXJuIEMoYSxiKX07dGhpc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9fWZ1bmN0aW9uIEooYSl7ZnVuY3Rpb24gYihmKXtyZXR1cm4gYS5uZXh0KGYpfWZ1bmN0aW9uIGUoZil7cmV0dXJuIGEudGhyb3coZil9cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGYsaCl7ZnVuY3Rpb24gbChjKXtjLmRvbmU/ZihjLnZhbHVlKTpQcm9taXNlLnJlc29sdmUoYy52YWx1ZSkudGhlbihiLGUpLnRoZW4obCxoKX1sKGEubmV4dCgpKX0pfVxudihcIlByb21pc2VcIixmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGMpe3RoaXMuaD0wO3RoaXMuaT12b2lkIDA7dGhpcy5nPVtdO3RoaXMubz0hMTt2YXIgZD10aGlzLmooKTt0cnl7YyhkLnJlc29sdmUsZC5yZWplY3QpfWNhdGNoKGcpe2QucmVqZWN0KGcpfX1mdW5jdGlvbiBlKCl7dGhpcy5nPW51bGx9ZnVuY3Rpb24gZihjKXtyZXR1cm4gYyBpbnN0YW5jZW9mIGI/YzpuZXcgYihmdW5jdGlvbihkKXtkKGMpfSl9aWYoYSlyZXR1cm4gYTtlLnByb3RvdHlwZS5oPWZ1bmN0aW9uKGMpe2lmKG51bGw9PXRoaXMuZyl7dGhpcy5nPVtdO3ZhciBkPXRoaXM7dGhpcy5pKGZ1bmN0aW9uKCl7ZC5sKCl9KX10aGlzLmcucHVzaChjKX07dmFyIGg9dS5zZXRUaW1lb3V0O2UucHJvdG90eXBlLmk9ZnVuY3Rpb24oYyl7aChjLDApfTtlLnByb3RvdHlwZS5sPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLmcmJnRoaXMuZy5sZW5ndGg7KXt2YXIgYz10aGlzLmc7dGhpcy5nPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7KytkKXt2YXIgZz1cbmNbZF07Y1tkXT1udWxsO3RyeXtnKCl9Y2F0Y2goayl7dGhpcy5qKGspfX19dGhpcy5nPW51bGx9O2UucHJvdG90eXBlLmo9ZnVuY3Rpb24oYyl7dGhpcy5pKGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX07Yi5wcm90b3R5cGUuaj1mdW5jdGlvbigpe2Z1bmN0aW9uIGMoayl7cmV0dXJuIGZ1bmN0aW9uKG0pe2d8fChnPSEwLGsuY2FsbChkLG0pKX19dmFyIGQ9dGhpcyxnPSExO3JldHVybntyZXNvbHZlOmModGhpcy5BKSxyZWplY3Q6Yyh0aGlzLmwpfX07Yi5wcm90b3R5cGUuQT1mdW5jdGlvbihjKXtpZihjPT09dGhpcyl0aGlzLmwobmV3IFR5cGVFcnJvcihcIkEgUHJvbWlzZSBjYW5ub3QgcmVzb2x2ZSB0byBpdHNlbGZcIikpO2Vsc2UgaWYoYyBpbnN0YW5jZW9mIGIpdGhpcy5DKGMpO2Vsc2V7YTpzd2l0Y2godHlwZW9mIGMpe2Nhc2UgXCJvYmplY3RcIjp2YXIgZD1udWxsIT1jO2JyZWFrIGE7Y2FzZSBcImZ1bmN0aW9uXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX1kP3RoaXMudihjKTp0aGlzLm0oYyl9fTtcbmIucHJvdG90eXBlLnY9ZnVuY3Rpb24oYyl7dmFyIGQ9dm9pZCAwO3RyeXtkPWMudGhlbn1jYXRjaChnKXt0aGlzLmwoZyk7cmV0dXJufVwiZnVuY3Rpb25cIj09dHlwZW9mIGQ/dGhpcy5EKGQsYyk6dGhpcy5tKGMpfTtiLnByb3RvdHlwZS5sPWZ1bmN0aW9uKGMpe3RoaXMudSgyLGMpfTtiLnByb3RvdHlwZS5tPWZ1bmN0aW9uKGMpe3RoaXMudSgxLGMpfTtiLnByb3RvdHlwZS51PWZ1bmN0aW9uKGMsZCl7aWYoMCE9dGhpcy5oKXRocm93IEVycm9yKFwiQ2Fubm90IHNldHRsZShcIitjK1wiLCBcIitkK1wiKTogUHJvbWlzZSBhbHJlYWR5IHNldHRsZWQgaW4gc3RhdGVcIit0aGlzLmgpO3RoaXMuaD1jO3RoaXMuaT1kOzI9PT10aGlzLmgmJnRoaXMuQigpO3RoaXMuSCgpfTtiLnByb3RvdHlwZS5CPWZ1bmN0aW9uKCl7dmFyIGM9dGhpcztoKGZ1bmN0aW9uKCl7aWYoYy5JKCkpe3ZhciBkPXUuY29uc29sZTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGQmJmQuZXJyb3IoYy5pKX19LDEpfTtiLnByb3RvdHlwZS5JPVxuZnVuY3Rpb24oKXtpZih0aGlzLm8pcmV0dXJuITE7dmFyIGM9dS5DdXN0b21FdmVudCxkPXUuRXZlbnQsZz11LmRpc3BhdGNoRXZlbnQ7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBnKXJldHVybiEwO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjP2M9bmV3IGMoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIix7Y2FuY2VsYWJsZTohMH0pOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkP2M9bmV3IGQoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIix7Y2FuY2VsYWJsZTohMH0pOihjPXUuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKSxjLmluaXRDdXN0b21FdmVudChcInVuaGFuZGxlZHJlamVjdGlvblwiLCExLCEwLGMpKTtjLnByb21pc2U9dGhpcztjLnJlYXNvbj10aGlzLmk7cmV0dXJuIGcoYyl9O2IucHJvdG90eXBlLkg9ZnVuY3Rpb24oKXtpZihudWxsIT10aGlzLmcpe2Zvcih2YXIgYz0wO2M8dGhpcy5nLmxlbmd0aDsrK2MpbC5oKHRoaXMuZ1tjXSk7dGhpcy5nPW51bGx9fTt2YXIgbD1uZXcgZTtiLnByb3RvdHlwZS5DPVxuZnVuY3Rpb24oYyl7dmFyIGQ9dGhpcy5qKCk7Yy5zKGQucmVzb2x2ZSxkLnJlamVjdCl9O2IucHJvdG90eXBlLkQ9ZnVuY3Rpb24oYyxkKXt2YXIgZz10aGlzLmooKTt0cnl7Yy5jYWxsKGQsZy5yZXNvbHZlLGcucmVqZWN0KX1jYXRjaChrKXtnLnJlamVjdChrKX19O2IucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYyxkKXtmdW5jdGlvbiBnKHAscil7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgcD9mdW5jdGlvbihFKXt0cnl7ayhwKEUpKX1jYXRjaChGKXttKEYpfX06cn12YXIgayxtLEc9bmV3IGIoZnVuY3Rpb24ocCxyKXtrPXA7bT1yfSk7dGhpcy5zKGcoYyxrKSxnKGQsbSkpO3JldHVybiBHfTtiLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbihjKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxjKX07Yi5wcm90b3R5cGUucz1mdW5jdGlvbihjLGQpe2Z1bmN0aW9uIGcoKXtzd2l0Y2goay5oKXtjYXNlIDE6YyhrLmkpO2JyZWFrO2Nhc2UgMjpkKGsuaSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVuZXhwZWN0ZWQgc3RhdGU6IFwiK1xuay5oKTt9fXZhciBrPXRoaXM7bnVsbD09dGhpcy5nP2wuaChnKTp0aGlzLmcucHVzaChnKTt0aGlzLm89ITB9O2IucmVzb2x2ZT1mO2IucmVqZWN0PWZ1bmN0aW9uKGMpe3JldHVybiBuZXcgYihmdW5jdGlvbihkLGcpe2coYyl9KX07Yi5yYWNlPWZ1bmN0aW9uKGMpe3JldHVybiBuZXcgYihmdW5jdGlvbihkLGcpe2Zvcih2YXIgaz14KGMpLG09ay5uZXh0KCk7IW0uZG9uZTttPWsubmV4dCgpKWYobS52YWx1ZSkucyhkLGcpfSl9O2IuYWxsPWZ1bmN0aW9uKGMpe3ZhciBkPXgoYyksZz1kLm5leHQoKTtyZXR1cm4gZy5kb25lP2YoW10pOm5ldyBiKGZ1bmN0aW9uKGssbSl7ZnVuY3Rpb24gRyhFKXtyZXR1cm4gZnVuY3Rpb24oRil7cFtFXT1GO3ItLTswPT1yJiZrKHApfX12YXIgcD1bXSxyPTA7ZG8gcC5wdXNoKHZvaWQgMCkscisrLGYoZy52YWx1ZSkucyhHKHAubGVuZ3RoLTEpLG0pLGc9ZC5uZXh0KCk7d2hpbGUoIWcuZG9uZSl9KX07cmV0dXJuIGJ9KTtcbnZhciBLPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5hc3NpZ24/T2JqZWN0LmFzc2lnbjpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBmPWFyZ3VtZW50c1tlXTtpZihmKWZvcih2YXIgaCBpbiBmKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChmLGgpJiYoYVtoXT1mW2hdKX1yZXR1cm4gYX07dihcIk9iamVjdC5hc3NpZ25cIixmdW5jdGlvbihhKXtyZXR1cm4gYXx8S30pO3ZhciBMPXRoaXN8fHNlbGY7dmFyIE09e2ZhY2luZ01vZGU6XCJ1c2VyXCIsd2lkdGg6NjQwLGhlaWdodDo0ODB9O2Z1bmN0aW9uIE4oYSxiKXt0aGlzLnZpZGVvPWE7dGhpcy5pPTA7dGhpcy5oPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxNKSxiKX1OLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiLGUsZixoO3JldHVybiBKKG5ldyBJKG5ldyBCKGZ1bmN0aW9uKGwpe2lmKGEuZyl7Yj1hLmcuZ2V0VHJhY2tzKCk7ZT14KGIpO2ZvcihmPWUubmV4dCgpOyFmLmRvbmU7Zj1lLm5leHQoKSloPWYudmFsdWUsaC5zdG9wKCk7YS5nPXZvaWQgMH1sLmo9MH0pKSl9O1xuTi5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI7cmV0dXJuIEoobmV3IEkobmV3IEIoZnVuY3Rpb24oZSl7bmF2aWdhdG9yLm1lZGlhRGV2aWNlcyYmbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWF8fGFsZXJ0KFwiTm8gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgZXhpc3RzLlwiKTtiPWEuaDtyZXR1cm4gZS5yZXR1cm4obmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe3ZpZGVvOntmYWNpbmdNb2RlOmIuZmFjaW5nTW9kZSx3aWR0aDpiLndpZHRoLGhlaWdodDpiLmhlaWdodH19KS50aGVuKGZ1bmN0aW9uKGYpe08oYSxmKX0pLmNhdGNoKGZ1bmN0aW9uKGYpe3ZhciBoPVwiRmFpbGVkIHRvIGFjcXVpcmUgY2FtZXJhIGZlZWQ6IFwiK2Y7Y29uc29sZS5lcnJvcihoKTthbGVydChoKTt0aHJvdyBmO30pKX0pKSl9O1xuZnVuY3Rpb24gUChhKXt3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7UShhKX0pfWZ1bmN0aW9uIE8oYSxiKXthLmc9YjthLnZpZGVvLnNyY09iamVjdD1iO2EudmlkZW8ub25sb2FkZWRtZXRhZGF0YT1mdW5jdGlvbigpe2EudmlkZW8ucGxheSgpO1AoYSl9fWZ1bmN0aW9uIFEoYSl7dmFyIGI9bnVsbDthLnZpZGVvLnBhdXNlZHx8YS52aWRlby5jdXJyZW50VGltZT09PWEuaXx8KGEuaT1hLnZpZGVvLmN1cnJlbnRUaW1lLGI9YS5oLm9uRnJhbWUoKSk7Yj9iLnRoZW4oZnVuY3Rpb24oKXtQKGEpfSk6UChhKX12YXIgUj1bXCJDYW1lcmFcIl0sUz1MO1JbMF1pbiBTfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgUy5leGVjU2NyaXB0fHxTLmV4ZWNTY3JpcHQoXCJ2YXIgXCIrUlswXSk7XG5mb3IodmFyIFQ7Ui5sZW5ndGgmJihUPVIuc2hpZnQoKSk7KVIubGVuZ3RofHx2b2lkIDA9PT1OP1NbVF0mJlNbVF0hPT1PYmplY3QucHJvdG90eXBlW1RdP1M9U1tUXTpTPVNbVF09e306U1tUXT1OO30pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKXsvKlxuXG4gQ29weXJpZ2h0IFRoZSBDbG9zdXJlIExpYnJhcnkgQXV0aG9ycy5cbiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBoKGEpe3ZhciBjPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGM8YS5sZW5ndGg/e2RvbmU6ITEsdmFsdWU6YVtjKytdfTp7ZG9uZTohMH19fXZhciBsPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGMsYil7aWYoYT09QXJyYXkucHJvdG90eXBlfHxhPT1PYmplY3QucHJvdG90eXBlKXJldHVybiBhO2FbY109Yi52YWx1ZTtyZXR1cm4gYX07XG5mdW5jdGlvbiBtKGEpe2E9W1wib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWxUaGlzJiZnbG9iYWxUaGlzLGEsXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93LFwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLFwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWwmJmdsb2JhbF07Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBiPWFbY107aWYoYiYmYi5NYXRoPT1NYXRoKXJldHVybiBifXRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgZ2xvYmFsIG9iamVjdFwiKTt9dmFyIG49bSh0aGlzKTtmdW5jdGlvbiBwKGEsYyl7aWYoYylhOnt2YXIgYj1uO2E9YS5zcGxpdChcIi5cIik7Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aC0xO2QrKyl7dmFyIGU9YVtkXTtpZighKGUgaW4gYikpYnJlYWsgYTtiPWJbZV19YT1hW2EubGVuZ3RoLTFdO2Q9YlthXTtjPWMoZCk7YyE9ZCYmbnVsbCE9YyYmbChiLGEse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpjfSl9fVxuZnVuY3Rpb24gcShhKXt2YXIgYz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJmFbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gYz9jLmNhbGwoYSk6e25leHQ6aChhKX19dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmFzc2lnbj9PYmplY3QuYXNzaWduOmZ1bmN0aW9uKGEsYyl7Zm9yKHZhciBiPTE7Yjxhcmd1bWVudHMubGVuZ3RoO2IrKyl7dmFyIGQ9YXJndW1lbnRzW2JdO2lmKGQpZm9yKHZhciBlIGluIGQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGQsZSkmJihhW2VdPWRbZV0pfXJldHVybiBhfTtwKFwiT2JqZWN0LmFzc2lnblwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfHxyfSk7XG5wKFwiQXJyYXkucHJvdG90eXBlLmZpbGxcIixmdW5jdGlvbihhKXtyZXR1cm4gYT9hOmZ1bmN0aW9uKGMsYixkKXt2YXIgZT10aGlzLmxlbmd0aHx8MDswPmImJihiPU1hdGgubWF4KDAsZStiKSk7aWYobnVsbD09ZHx8ZD5lKWQ9ZTtkPU51bWJlcihkKTswPmQmJihkPU1hdGgubWF4KDAsZStkKSk7Zm9yKGI9TnVtYmVyKGJ8fDApO2I8ZDtiKyspdGhpc1tiXT1jO3JldHVybiB0aGlzfX0pO2Z1bmN0aW9uIHQoYSl7cmV0dXJuIGE/YTpBcnJheS5wcm90b3R5cGUuZmlsbH1wKFwiSW50OEFycmF5LnByb3RvdHlwZS5maWxsXCIsdCk7cChcIlVpbnQ4QXJyYXkucHJvdG90eXBlLmZpbGxcIix0KTtwKFwiVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlLmZpbGxcIix0KTtwKFwiSW50MTZBcnJheS5wcm90b3R5cGUuZmlsbFwiLHQpO3AoXCJVaW50MTZBcnJheS5wcm90b3R5cGUuZmlsbFwiLHQpO3AoXCJJbnQzMkFycmF5LnByb3RvdHlwZS5maWxsXCIsdCk7XG5wKFwiVWludDMyQXJyYXkucHJvdG90eXBlLmZpbGxcIix0KTtwKFwiRmxvYXQzMkFycmF5LnByb3RvdHlwZS5maWxsXCIsdCk7cChcIkZsb2F0NjRBcnJheS5wcm90b3R5cGUuZmlsbFwiLHQpO3ZhciB1PXRoaXN8fHNlbGY7ZnVuY3Rpb24gdihhLGMpe2E9YS5zcGxpdChcIi5cIik7dmFyIGI9dTthWzBdaW4gYnx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGIuZXhlY1NjcmlwdHx8Yi5leGVjU2NyaXB0KFwidmFyIFwiK2FbMF0pO2Zvcih2YXIgZDthLmxlbmd0aCYmKGQ9YS5zaGlmdCgpKTspYS5sZW5ndGh8fHZvaWQgMD09PWM/YltkXSYmYltkXSE9PU9iamVjdC5wcm90b3R5cGVbZF0/Yj1iW2RdOmI9YltkXT17fTpiW2RdPWN9O3ZhciB3PXtjb2xvcjpcIndoaXRlXCIsbGluZVdpZHRoOjQscmFkaXVzOjYsdmlzaWJpbGl0eU1pbjouNX07ZnVuY3Rpb24geChhKXthPWF8fHt9O3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx3KSx7ZmlsbENvbG9yOmEuY29sb3J9KSxhKX1mdW5jdGlvbiB5KGEsYyl7cmV0dXJuIGEgaW5zdGFuY2VvZiBGdW5jdGlvbj9hKGMpOmF9ZnVuY3Rpb24geihhLGMsYil7cmV0dXJuIE1hdGgubWF4KE1hdGgubWluKGMsYiksTWF0aC5taW4oTWF0aC5tYXgoYyxiKSxhKSl9dihcImNsYW1wXCIseik7XG52KFwiZHJhd0xhbmRtYXJrc1wiLGZ1bmN0aW9uKGEsYyxiKXtpZihjKXtiPXgoYik7YS5zYXZlKCk7dmFyIGQ9YS5jYW52YXMsZT0wO2M9cShjKTtmb3IodmFyIGY9Yy5uZXh0KCk7IWYuZG9uZTtmPWMubmV4dCgpKWlmKGY9Zi52YWx1ZSx2b2lkIDAhPT1mJiYodm9pZCAwPT09Zi52aXNpYmlsaXR5fHxmLnZpc2liaWxpdHk+Yi52aXNpYmlsaXR5TWluKSl7YS5maWxsU3R5bGU9eShiLmZpbGxDb2xvcix7aW5kZXg6ZSxmcm9tOmZ9KTthLnN0cm9rZVN0eWxlPXkoYi5jb2xvcix7aW5kZXg6ZSxmcm9tOmZ9KTthLmxpbmVXaWR0aD15KGIubGluZVdpZHRoLHtpbmRleDplLGZyb206Zn0pO3ZhciBnPW5ldyBQYXRoMkQ7Zy5hcmMoZi54KmQud2lkdGgsZi55KmQuaGVpZ2h0LHkoYi5yYWRpdXMse2luZGV4OmUsZnJvbTpmfSksMCwyKk1hdGguUEkpO2EuZmlsbChnKTthLnN0cm9rZShnKTsrK2V9YS5yZXN0b3JlKCl9fSk7XG52KFwiZHJhd0Nvbm5lY3RvcnNcIixmdW5jdGlvbihhLGMsYixkKXtpZihjJiZiKXtkPXgoZCk7YS5zYXZlKCk7dmFyIGU9YS5jYW52YXMsZj0wO2I9cShiKTtmb3IodmFyIGc9Yi5uZXh0KCk7IWcuZG9uZTtnPWIubmV4dCgpKXt2YXIgaz1nLnZhbHVlO2EuYmVnaW5QYXRoKCk7Zz1jW2tbMF1dO2s9Y1trWzFdXTtnJiZrJiYodm9pZCAwPT09Zy52aXNpYmlsaXR5fHxnLnZpc2liaWxpdHk+ZC52aXNpYmlsaXR5TWluKSYmKHZvaWQgMD09PWsudmlzaWJpbGl0eXx8ay52aXNpYmlsaXR5PmQudmlzaWJpbGl0eU1pbikmJihhLnN0cm9rZVN0eWxlPXkoZC5jb2xvcix7aW5kZXg6Zixmcm9tOmcsdG86a30pLGEubGluZVdpZHRoPXkoZC5saW5lV2lkdGgse2luZGV4OmYsZnJvbTpnLHRvOmt9KSxhLm1vdmVUbyhnLngqZS53aWR0aCxnLnkqZS5oZWlnaHQpLGEubGluZVRvKGsueCplLndpZHRoLGsueSplLmhlaWdodCkpOysrZjthLnN0cm9rZSgpfWEucmVzdG9yZSgpfX0pO1xudihcImRyYXdSZWN0YW5nbGVcIixmdW5jdGlvbihhLGMsYil7Yj14KGIpO2Euc2F2ZSgpO3ZhciBkPWEuY2FudmFzO2EuYmVnaW5QYXRoKCk7YS5saW5lV2lkdGg9eShiLmxpbmVXaWR0aCx7fSk7YS5zdHJva2VTdHlsZT15KGIuY29sb3Ise30pO2EuZmlsbFN0eWxlPXkoYi5maWxsQ29sb3Ise30pO2EudHJhbnNsYXRlKGMueENlbnRlcipkLndpZHRoLGMueUNlbnRlcipkLmhlaWdodCk7YS5yb3RhdGUoYy5yb3RhdGlvbipNYXRoLlBJLzE4MCk7YS5yZWN0KC1jLndpZHRoLzIqZC53aWR0aCwtYy5oZWlnaHQvMipkLmhlaWdodCxjLndpZHRoKmQud2lkdGgsYy5oZWlnaHQqZC5oZWlnaHQpO2EudHJhbnNsYXRlKC1jLnhDZW50ZXIqZC53aWR0aCwtYy55Q2VudGVyKmQuaGVpZ2h0KTthLnN0cm9rZSgpO2EuZmlsbCgpO2EucmVzdG9yZSgpfSk7dihcImxlcnBcIixmdW5jdGlvbihhLGMsYixkLGUpe3JldHVybiB6KGQqKDEtKGEtYykvKGItYykpK2UqKDEtKGItYSkvKGItYykpLGQsZSl9KTt9KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCl7LypcblxuIENvcHlyaWdodCBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuXG4gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiovXG4ndXNlIHN0cmljdCc7dmFyIHg7ZnVuY3Rpb24gYWEoYSl7dmFyIGI9MDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYjxhLmxlbmd0aD97ZG9uZTohMSx2YWx1ZTphW2IrK119Ontkb25lOiEwfX19dmFyIGJhPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGIsYyl7aWYoYT09QXJyYXkucHJvdG90eXBlfHxhPT1PYmplY3QucHJvdG90eXBlKXJldHVybiBhO2FbYl09Yy52YWx1ZTtyZXR1cm4gYX07XG5mdW5jdGlvbiBjYShhKXthPVtcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcyYmZ2xvYmFsVGhpcyxhLFwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyxcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZixcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWxdO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7KytiKXt2YXIgYz1hW2JdO2lmKGMmJmMuTWF0aD09TWF0aClyZXR1cm4gY310aHJvdyBFcnJvcihcIkNhbm5vdCBmaW5kIGdsb2JhbCBvYmplY3RcIik7fXZhciB5PWNhKHRoaXMpO2Z1bmN0aW9uIEIoYSxiKXtpZihiKWE6e3ZhciBjPXk7YT1hLnNwbGl0KFwiLlwiKTtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoLTE7ZCsrKXt2YXIgZT1hW2RdO2lmKCEoZSBpbiBjKSlicmVhayBhO2M9Y1tlXX1hPWFbYS5sZW5ndGgtMV07ZD1jW2FdO2I9YihkKTtiIT1kJiZudWxsIT1iJiZiYShjLGEse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpifSl9fVxuQihcIlN5bWJvbFwiLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoZyl7aWYodGhpcyBpbnN0YW5jZW9mIGIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvclwiKTtyZXR1cm4gbmV3IGMoZCsoZ3x8XCJcIikrXCJfXCIrZSsrLGcpfWZ1bmN0aW9uIGMoZyxmKXt0aGlzLmc9ZztiYSh0aGlzLFwiZGVzY3JpcHRpb25cIix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmZ9KX1pZihhKXJldHVybiBhO2MucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ307dmFyIGQ9XCJqc2NvbXBfc3ltYm9sX1wiKygxRTkqTWF0aC5yYW5kb20oKT4+PjApK1wiX1wiLGU9MDtyZXR1cm4gYn0pO1xuQihcIlN5bWJvbC5pdGVyYXRvclwiLGZ1bmN0aW9uKGEpe2lmKGEpcmV0dXJuIGE7YT1TeW1ib2woXCJTeW1ib2wuaXRlcmF0b3JcIik7Zm9yKHZhciBiPVwiQXJyYXkgSW50OEFycmF5IFVpbnQ4QXJyYXkgVWludDhDbGFtcGVkQXJyYXkgSW50MTZBcnJheSBVaW50MTZBcnJheSBJbnQzMkFycmF5IFVpbnQzMkFycmF5IEZsb2F0MzJBcnJheSBGbG9hdDY0QXJyYXlcIi5zcGxpdChcIiBcIiksYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD15W2JbY11dO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBkLnByb3RvdHlwZVthXSYmYmEoZC5wcm90b3R5cGUsYSx7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGRhKGFhKHRoaXMpKX19KX1yZXR1cm4gYX0pO2Z1bmN0aW9uIGRhKGEpe2E9e25leHQ6YX07YVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3JldHVybiBhfVxuZnVuY3Rpb24gQyhhKXt2YXIgYj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJmFbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gYj9iLmNhbGwoYSk6e25leHQ6YWEoYSl9fWZ1bmN0aW9uIGVhKGEpe2lmKCEoYSBpbnN0YW5jZW9mIEFycmF5KSl7YT1DKGEpO2Zvcih2YXIgYixjPVtdOyEoYj1hLm5leHQoKSkuZG9uZTspYy5wdXNoKGIudmFsdWUpO2E9Y31yZXR1cm4gYX12YXIgZmE9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmNyZWF0ZT9PYmplY3QuY3JlYXRlOmZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9Yi5wcm90b3R5cGU9YTtyZXR1cm4gbmV3IGJ9LGhhO1xuaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LnNldFByb3RvdHlwZU9mKWhhPU9iamVjdC5zZXRQcm90b3R5cGVPZjtlbHNle3ZhciBpYTthOnt2YXIgamE9e2E6ITB9LGthPXt9O3RyeXtrYS5fX3Byb3RvX189amE7aWE9a2EuYTticmVhayBhfWNhdGNoKGEpe31pYT0hMX1oYT1pYT9mdW5jdGlvbihhLGIpe2EuX19wcm90b19fPWI7aWYoYS5fX3Byb3RvX18hPT1iKXRocm93IG5ldyBUeXBlRXJyb3IoYStcIiBpcyBub3QgZXh0ZW5zaWJsZVwiKTtyZXR1cm4gYX06bnVsbH12YXIgbGE9aGE7XG5mdW5jdGlvbiBFKGEsYil7YS5wcm90b3R5cGU9ZmEoYi5wcm90b3R5cGUpO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7aWYobGEpbGEoYSxiKTtlbHNlIGZvcih2YXIgYyBpbiBiKWlmKFwicHJvdG90eXBlXCIhPWMpaWYoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMpe3ZhciBkPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYixjKTtkJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxjLGQpfWVsc2UgYVtjXT1iW2NdO2EuZWE9Yi5wcm90b3R5cGV9ZnVuY3Rpb24gbWEoKXt0aGlzLmw9ITE7dGhpcy5pPW51bGw7dGhpcy5oPXZvaWQgMDt0aGlzLmc9MTt0aGlzLnM9dGhpcy5tPTA7dGhpcy5qPW51bGx9ZnVuY3Rpb24gbmEoYSl7aWYoYS5sKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO2EubD0hMH1tYS5wcm90b3R5cGUubz1mdW5jdGlvbihhKXt0aGlzLmg9YX07XG5mdW5jdGlvbiBvYShhLGIpe2Euaj17VTpiLFY6ITB9O2EuZz1hLm18fGEuc31tYS5wcm90b3R5cGUucmV0dXJuPWZ1bmN0aW9uKGEpe3RoaXMuaj17cmV0dXJuOmF9O3RoaXMuZz10aGlzLnN9O2Z1bmN0aW9uIEYoYSxiLGMpe2EuZz1jO3JldHVybnt2YWx1ZTpifX1mdW5jdGlvbiBwYShhKXt0aGlzLmc9bmV3IG1hO3RoaXMuaD1hfWZ1bmN0aW9uIHFhKGEsYil7bmEoYS5nKTt2YXIgYz1hLmcuaTtpZihjKXJldHVybiByYShhLFwicmV0dXJuXCJpbiBjP2NbXCJyZXR1cm5cIl06ZnVuY3Rpb24oZCl7cmV0dXJue3ZhbHVlOmQsZG9uZTohMH19LGIsYS5nLnJldHVybik7YS5nLnJldHVybihiKTtyZXR1cm4gRyhhKX1cbmZ1bmN0aW9uIHJhKGEsYixjLGQpe3RyeXt2YXIgZT1iLmNhbGwoYS5nLmksYyk7aWYoIShlIGluc3RhbmNlb2YgT2JqZWN0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiSXRlcmF0b3IgcmVzdWx0IFwiK2UrXCIgaXMgbm90IGFuIG9iamVjdFwiKTtpZighZS5kb25lKXJldHVybiBhLmcubD0hMSxlO3ZhciBnPWUudmFsdWV9Y2F0Y2goZil7cmV0dXJuIGEuZy5pPW51bGwsb2EoYS5nLGYpLEcoYSl9YS5nLmk9bnVsbDtkLmNhbGwoYS5nLGcpO3JldHVybiBHKGEpfWZ1bmN0aW9uIEcoYSl7Zm9yKDthLmcuZzspdHJ5e3ZhciBiPWEuaChhLmcpO2lmKGIpcmV0dXJuIGEuZy5sPSExLHt2YWx1ZTpiLnZhbHVlLGRvbmU6ITF9fWNhdGNoKGMpe2EuZy5oPXZvaWQgMCxvYShhLmcsYyl9YS5nLmw9ITE7aWYoYS5nLmope2I9YS5nLmo7YS5nLmo9bnVsbDtpZihiLlYpdGhyb3cgYi5VO3JldHVybnt2YWx1ZTpiLnJldHVybixkb25lOiEwfX1yZXR1cm57dmFsdWU6dm9pZCAwLGRvbmU6ITB9fVxuZnVuY3Rpb24gc2EoYSl7dGhpcy5uZXh0PWZ1bmN0aW9uKGIpe25hKGEuZyk7YS5nLmk/Yj1yYShhLGEuZy5pLm5leHQsYixhLmcubyk6KGEuZy5vKGIpLGI9RyhhKSk7cmV0dXJuIGJ9O3RoaXMudGhyb3c9ZnVuY3Rpb24oYil7bmEoYS5nKTthLmcuaT9iPXJhKGEsYS5nLmlbXCJ0aHJvd1wiXSxiLGEuZy5vKToob2EoYS5nLGIpLGI9RyhhKSk7cmV0dXJuIGJ9O3RoaXMucmV0dXJuPWZ1bmN0aW9uKGIpe3JldHVybiBxYShhLGIpfTt0aGlzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319ZnVuY3Rpb24gdGEoYSl7ZnVuY3Rpb24gYihkKXtyZXR1cm4gYS5uZXh0KGQpfWZ1bmN0aW9uIGMoZCl7cmV0dXJuIGEudGhyb3coZCl9cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGQsZSl7ZnVuY3Rpb24gZyhmKXtmLmRvbmU/ZChmLnZhbHVlKTpQcm9taXNlLnJlc29sdmUoZi52YWx1ZSkudGhlbihiLGMpLnRoZW4oZyxlKX1nKGEubmV4dCgpKX0pfVxuZnVuY3Rpb24gSChhKXtyZXR1cm4gdGEobmV3IHNhKG5ldyBwYShhKSkpfVxuQihcIlByb21pc2VcIixmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGYpe3RoaXMuaD0wO3RoaXMuaT12b2lkIDA7dGhpcy5nPVtdO3RoaXMubz0hMTt2YXIgaz10aGlzLmooKTt0cnl7ZihrLnJlc29sdmUsay5yZWplY3QpfWNhdGNoKGgpe2sucmVqZWN0KGgpfX1mdW5jdGlvbiBjKCl7dGhpcy5nPW51bGx9ZnVuY3Rpb24gZChmKXtyZXR1cm4gZiBpbnN0YW5jZW9mIGI/ZjpuZXcgYihmdW5jdGlvbihrKXtrKGYpfSl9aWYoYSlyZXR1cm4gYTtjLnByb3RvdHlwZS5oPWZ1bmN0aW9uKGYpe2lmKG51bGw9PXRoaXMuZyl7dGhpcy5nPVtdO3ZhciBrPXRoaXM7dGhpcy5pKGZ1bmN0aW9uKCl7ay5sKCl9KX10aGlzLmcucHVzaChmKX07dmFyIGU9eS5zZXRUaW1lb3V0O2MucHJvdG90eXBlLmk9ZnVuY3Rpb24oZil7ZShmLDApfTtjLnByb3RvdHlwZS5sPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLmcmJnRoaXMuZy5sZW5ndGg7KXt2YXIgZj10aGlzLmc7dGhpcy5nPVtdO2Zvcih2YXIgaz0wO2s8Zi5sZW5ndGg7KytrKXt2YXIgaD1cbmZba107ZltrXT1udWxsO3RyeXtoKCl9Y2F0Y2gobCl7dGhpcy5qKGwpfX19dGhpcy5nPW51bGx9O2MucHJvdG90eXBlLmo9ZnVuY3Rpb24oZil7dGhpcy5pKGZ1bmN0aW9uKCl7dGhyb3cgZjt9KX07Yi5wcm90b3R5cGUuaj1mdW5jdGlvbigpe2Z1bmN0aW9uIGYobCl7cmV0dXJuIGZ1bmN0aW9uKG4pe2h8fChoPSEwLGwuY2FsbChrLG4pKX19dmFyIGs9dGhpcyxoPSExO3JldHVybntyZXNvbHZlOmYodGhpcy5DKSxyZWplY3Q6Zih0aGlzLmwpfX07Yi5wcm90b3R5cGUuQz1mdW5jdGlvbihmKXtpZihmPT09dGhpcyl0aGlzLmwobmV3IFR5cGVFcnJvcihcIkEgUHJvbWlzZSBjYW5ub3QgcmVzb2x2ZSB0byBpdHNlbGZcIikpO2Vsc2UgaWYoZiBpbnN0YW5jZW9mIGIpdGhpcy5GKGYpO2Vsc2V7YTpzd2l0Y2godHlwZW9mIGYpe2Nhc2UgXCJvYmplY3RcIjp2YXIgaz1udWxsIT1mO2JyZWFrIGE7Y2FzZSBcImZ1bmN0aW9uXCI6az0hMDticmVhayBhO2RlZmF1bHQ6az0hMX1rP3RoaXMudihmKTp0aGlzLm0oZil9fTtcbmIucHJvdG90eXBlLnY9ZnVuY3Rpb24oZil7dmFyIGs9dm9pZCAwO3RyeXtrPWYudGhlbn1jYXRjaChoKXt0aGlzLmwoaCk7cmV0dXJufVwiZnVuY3Rpb25cIj09dHlwZW9mIGs/dGhpcy5HKGssZik6dGhpcy5tKGYpfTtiLnByb3RvdHlwZS5sPWZ1bmN0aW9uKGYpe3RoaXMucygyLGYpfTtiLnByb3RvdHlwZS5tPWZ1bmN0aW9uKGYpe3RoaXMucygxLGYpfTtiLnByb3RvdHlwZS5zPWZ1bmN0aW9uKGYsayl7aWYoMCE9dGhpcy5oKXRocm93IEVycm9yKFwiQ2Fubm90IHNldHRsZShcIitmK1wiLCBcIitrK1wiKTogUHJvbWlzZSBhbHJlYWR5IHNldHRsZWQgaW4gc3RhdGVcIit0aGlzLmgpO3RoaXMuaD1mO3RoaXMuaT1rOzI9PT10aGlzLmgmJnRoaXMuRCgpO3RoaXMuQSgpfTtiLnByb3RvdHlwZS5EPWZ1bmN0aW9uKCl7dmFyIGY9dGhpcztlKGZ1bmN0aW9uKCl7aWYoZi5CKCkpe3ZhciBrPXkuY29uc29sZTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGsmJmsuZXJyb3IoZi5pKX19LDEpfTtiLnByb3RvdHlwZS5CPVxuZnVuY3Rpb24oKXtpZih0aGlzLm8pcmV0dXJuITE7dmFyIGY9eS5DdXN0b21FdmVudCxrPXkuRXZlbnQsaD15LmRpc3BhdGNoRXZlbnQ7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBoKXJldHVybiEwO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y9bmV3IGYoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIix7Y2FuY2VsYWJsZTohMH0pOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrP2Y9bmV3IGsoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIix7Y2FuY2VsYWJsZTohMH0pOihmPXkuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKSxmLmluaXRDdXN0b21FdmVudChcInVuaGFuZGxlZHJlamVjdGlvblwiLCExLCEwLGYpKTtmLnByb21pc2U9dGhpcztmLnJlYXNvbj10aGlzLmk7cmV0dXJuIGgoZil9O2IucHJvdG90eXBlLkE9ZnVuY3Rpb24oKXtpZihudWxsIT10aGlzLmcpe2Zvcih2YXIgZj0wO2Y8dGhpcy5nLmxlbmd0aDsrK2YpZy5oKHRoaXMuZ1tmXSk7dGhpcy5nPW51bGx9fTt2YXIgZz1uZXcgYztiLnByb3RvdHlwZS5GPVxuZnVuY3Rpb24oZil7dmFyIGs9dGhpcy5qKCk7Zi5KKGsucmVzb2x2ZSxrLnJlamVjdCl9O2IucHJvdG90eXBlLkc9ZnVuY3Rpb24oZixrKXt2YXIgaD10aGlzLmooKTt0cnl7Zi5jYWxsKGssaC5yZXNvbHZlLGgucmVqZWN0KX1jYXRjaChsKXtoLnJlamVjdChsKX19O2IucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oZixrKXtmdW5jdGlvbiBoKHAsbSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgcD9mdW5jdGlvbihxKXt0cnl7bChwKHEpKX1jYXRjaCh0KXtuKHQpfX06bX12YXIgbCxuLHI9bmV3IGIoZnVuY3Rpb24ocCxtKXtsPXA7bj1tfSk7dGhpcy5KKGgoZixsKSxoKGssbikpO3JldHVybiByfTtiLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbihmKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxmKX07Yi5wcm90b3R5cGUuSj1mdW5jdGlvbihmLGspe2Z1bmN0aW9uIGgoKXtzd2l0Y2gobC5oKXtjYXNlIDE6ZihsLmkpO2JyZWFrO2Nhc2UgMjprKGwuaSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVuZXhwZWN0ZWQgc3RhdGU6IFwiK1xubC5oKTt9fXZhciBsPXRoaXM7bnVsbD09dGhpcy5nP2cuaChoKTp0aGlzLmcucHVzaChoKTt0aGlzLm89ITB9O2IucmVzb2x2ZT1kO2IucmVqZWN0PWZ1bmN0aW9uKGYpe3JldHVybiBuZXcgYihmdW5jdGlvbihrLGgpe2goZil9KX07Yi5yYWNlPWZ1bmN0aW9uKGYpe3JldHVybiBuZXcgYihmdW5jdGlvbihrLGgpe2Zvcih2YXIgbD1DKGYpLG49bC5uZXh0KCk7IW4uZG9uZTtuPWwubmV4dCgpKWQobi52YWx1ZSkuSihrLGgpfSl9O2IuYWxsPWZ1bmN0aW9uKGYpe3ZhciBrPUMoZiksaD1rLm5leHQoKTtyZXR1cm4gaC5kb25lP2QoW10pOm5ldyBiKGZ1bmN0aW9uKGwsbil7ZnVuY3Rpb24gcihxKXtyZXR1cm4gZnVuY3Rpb24odCl7cFtxXT10O20tLTswPT1tJiZsKHApfX12YXIgcD1bXSxtPTA7ZG8gcC5wdXNoKHZvaWQgMCksbSsrLGQoaC52YWx1ZSkuSihyKHAubGVuZ3RoLTEpLG4pLGg9ay5uZXh0KCk7d2hpbGUoIWguZG9uZSl9KX07cmV0dXJuIGJ9KTtcbmZ1bmN0aW9uIHVhKGEsYil7YSBpbnN0YW5jZW9mIFN0cmluZyYmKGErPVwiXCIpO3ZhciBjPTAsZD0hMSxlPXtuZXh0OmZ1bmN0aW9uKCl7aWYoIWQmJmM8YS5sZW5ndGgpe3ZhciBnPWMrKztyZXR1cm57dmFsdWU6YihnLGFbZ10pLGRvbmU6ITF9fWQ9ITA7cmV0dXJue2RvbmU6ITAsdmFsdWU6dm9pZCAwfX19O2VbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gZX12YXIgdmE9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmFzc2lnbj9PYmplY3QuYXNzaWduOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyl7dmFyIGQ9YXJndW1lbnRzW2NdO2lmKGQpZm9yKHZhciBlIGluIGQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGQsZSkmJihhW2VdPWRbZV0pfXJldHVybiBhfTtCKFwiT2JqZWN0LmFzc2lnblwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfHx2YX0pO1xuQihcIk9iamVjdC5pc1wiLGZ1bmN0aW9uKGEpe3JldHVybiBhP2E6ZnVuY3Rpb24oYixjKXtyZXR1cm4gYj09PWM/MCE9PWJ8fDEvYj09PTEvYzpiIT09YiYmYyE9PWN9fSk7QihcIkFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1wiLGZ1bmN0aW9uKGEpe3JldHVybiBhP2E6ZnVuY3Rpb24oYixjKXt2YXIgZD10aGlzO2QgaW5zdGFuY2VvZiBTdHJpbmcmJihkPVN0cmluZyhkKSk7dmFyIGU9ZC5sZW5ndGg7Yz1jfHwwO2ZvcigwPmMmJihjPU1hdGgubWF4KGMrZSwwKSk7YzxlO2MrKyl7dmFyIGc9ZFtjXTtpZihnPT09Ynx8T2JqZWN0LmlzKGcsYikpcmV0dXJuITB9cmV0dXJuITF9fSk7XG5CKFwiU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1wiLGZ1bmN0aW9uKGEpe3JldHVybiBhP2E6ZnVuY3Rpb24oYixjKXtpZihudWxsPT10aGlzKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgJ3RoaXMnIHZhbHVlIGZvciBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzIG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkXCIpO2lmKGIgaW5zdGFuY2VvZiBSZWdFeHApdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpcnN0IGFyZ3VtZW50IHRvIFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMgbXVzdCBub3QgYmUgYSByZWd1bGFyIGV4cHJlc3Npb25cIik7cmV0dXJuLTEhPT10aGlzLmluZGV4T2YoYixjfHwwKX19KTtCKFwiQXJyYXkucHJvdG90eXBlLmtleXNcIixmdW5jdGlvbihhKXtyZXR1cm4gYT9hOmZ1bmN0aW9uKCl7cmV0dXJuIHVhKHRoaXMsZnVuY3Rpb24oYil7cmV0dXJuIGJ9KX19KTt2YXIgd2E9dGhpc3x8c2VsZjtcbmZ1bmN0aW9uIEooYSxiKXthPWEuc3BsaXQoXCIuXCIpO3ZhciBjPXdhO2FbMF1pbiBjfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgYy5leGVjU2NyaXB0fHxjLmV4ZWNTY3JpcHQoXCJ2YXIgXCIrYVswXSk7Zm9yKHZhciBkO2EubGVuZ3RoJiYoZD1hLnNoaWZ0KCkpOylhLmxlbmd0aHx8dm9pZCAwPT09Yj9jW2RdJiZjW2RdIT09T2JqZWN0LnByb3RvdHlwZVtkXT9jPWNbZF06Yz1jW2RdPXt9OmNbZF09Yn07ZnVuY3Rpb24geGEoYSl7d2Euc2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSwwKX07ZnVuY3Rpb24gSyhhKXt4YShhKTtyZXR1cm47dGhyb3cgRXJyb3IoXCJpbnZhbGlkIGVycm9yIGxldmVsOiAxXCIpO31mdW5jdGlvbiB5YShhLGIpe0soRXJyb3IoXCJJbnZhbGlkIHdpcmUgdHlwZTogXCIrYStcIiAoYXQgcG9zaXRpb24gXCIrYitcIilcIikpfWZ1bmN0aW9uIHphKCl7SyhFcnJvcihcIkZhaWxlZCB0byByZWFkIHZhcmludCwgZW5jb2RpbmcgaXMgaW52YWxpZC5cIikpfTtmdW5jdGlvbiBBYShhLGIpe2I9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGIpO3JldHVybiBudWxsPT1hP2I6YStifXZhciBCYSxDYT1cInVuZGVmaW5lZFwiIT09dHlwZW9mIFRleHREZWNvZGVyLERhLEVhPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgVGV4dEVuY29kZXI7XG5mdW5jdGlvbiBGYShhKXtpZihFYSlhPShEYXx8KERhPW5ldyBUZXh0RW5jb2RlcikpLmVuY29kZShhKTtlbHNle3ZhciBiPXZvaWQgMDtiPXZvaWQgMD09PWI/ITE6Yjtmb3IodmFyIGM9MCxkPW5ldyBVaW50OEFycmF5KDMqYS5sZW5ndGgpLGU9MDtlPGEubGVuZ3RoO2UrKyl7dmFyIGc9YS5jaGFyQ29kZUF0KGUpO2lmKDEyOD5nKWRbYysrXT1nO2Vsc2V7aWYoMjA0OD5nKWRbYysrXT1nPj42fDE5MjtlbHNle2lmKDU1Mjk2PD1nJiY1NzM0Mz49Zyl7aWYoNTYzMTk+PWcmJmU8YS5sZW5ndGgpe3ZhciBmPWEuY2hhckNvZGVBdCgrK2UpO2lmKDU2MzIwPD1mJiY1NzM0Mz49Zil7Zz0xMDI0KihnLTU1Mjk2KStmLTU2MzIwKzY1NTM2O2RbYysrXT1nPj4xOHwyNDA7ZFtjKytdPWc+PjEyJjYzfDEyODtkW2MrK109Zz4+NiY2M3wxMjg7ZFtjKytdPWcmNjN8MTI4O2NvbnRpbnVlfWVsc2UgZS0tfWlmKGIpdGhyb3cgRXJyb3IoXCJGb3VuZCBhbiB1bnBhaXJlZCBzdXJyb2dhdGVcIik7Zz02NTUzM31kW2MrK109XG5nPj4xMnwyMjQ7ZFtjKytdPWc+PjYmNjN8MTI4fWRbYysrXT1nJjYzfDEyOH19YT1kLnN1YmFycmF5KDAsYyl9cmV0dXJuIGF9O3ZhciBHYT17fSxMPW51bGw7ZnVuY3Rpb24gSGEoYSl7dmFyIGI7dm9pZCAwPT09YiYmKGI9MCk7SWEoKTtiPUdhW2JdO2Zvcih2YXIgYz1BcnJheShNYXRoLmZsb29yKGEubGVuZ3RoLzMpKSxkPWJbNjRdfHxcIlwiLGU9MCxnPTA7ZTxhLmxlbmd0aC0yO2UrPTMpe3ZhciBmPWFbZV0saz1hW2UrMV0saD1hW2UrMl0sbD1iW2Y+PjJdO2Y9YlsoZiYzKTw8NHxrPj40XTtrPWJbKGsmMTUpPDwyfGg+PjZdO2g9YltoJjYzXTtjW2crK109bCtmK2sraH1sPTA7aD1kO3N3aXRjaChhLmxlbmd0aC1lKXtjYXNlIDI6bD1hW2UrMV0saD1iWyhsJjE1KTw8Ml18fGQ7Y2FzZSAxOmE9YVtlXSxjW2ddPWJbYT4+Ml0rYlsoYSYzKTw8NHxsPj40XStoK2R9cmV0dXJuIGMuam9pbihcIlwiKX1cbmZ1bmN0aW9uIEphKGEpe3ZhciBiPWEubGVuZ3RoLGM9MypiLzQ7YyUzP2M9TWF0aC5mbG9vcihjKTotMSE9XCI9LlwiLmluZGV4T2YoYVtiLTFdKSYmKGM9LTEhPVwiPS5cIi5pbmRleE9mKGFbYi0yXSk/Yy0yOmMtMSk7dmFyIGQ9bmV3IFVpbnQ4QXJyYXkoYyksZT0wO0thKGEsZnVuY3Rpb24oZyl7ZFtlKytdPWd9KTtyZXR1cm4gZC5zdWJhcnJheSgwLGUpfVxuZnVuY3Rpb24gS2EoYSxiKXtmdW5jdGlvbiBjKGgpe2Zvcig7ZDxhLmxlbmd0aDspe3ZhciBsPWEuY2hhckF0KGQrKyksbj1MW2xdO2lmKG51bGwhPW4pcmV0dXJuIG47aWYoIS9eW1xcc1xceGEwXSokLy50ZXN0KGwpKXRocm93IEVycm9yKFwiVW5rbm93biBiYXNlNjQgZW5jb2RpbmcgYXQgY2hhcjogXCIrbCk7fXJldHVybiBofUlhKCk7Zm9yKHZhciBkPTA7Oyl7dmFyIGU9YygtMSksZz1jKDApLGY9Yyg2NCksaz1jKDY0KTtpZig2ND09PWsmJi0xPT09ZSlicmVhaztiKGU8PDJ8Zz4+NCk7NjQhPWYmJihiKGc8PDQmMjQwfGY+PjIpLDY0IT1rJiZiKGY8PDYmMTkyfGspKX19XG5mdW5jdGlvbiBJYSgpe2lmKCFMKXtMPXt9O2Zvcih2YXIgYT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCIuc3BsaXQoXCJcIiksYj1bXCIrLz1cIixcIisvXCIsXCItXz1cIixcIi1fLlwiLFwiLV9cIl0sYz0wOzU+YztjKyspe3ZhciBkPWEuY29uY2F0KGJbY10uc3BsaXQoXCJcIikpO0dhW2NdPWQ7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe3ZhciBnPWRbZV07dm9pZCAwPT09TFtnXSYmKExbZ109ZSl9fX19O3ZhciBMYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgVWludDhBcnJheSxNYTtmdW5jdGlvbiBOYShhKXt0aGlzLmc9YTtpZihudWxsIT09YSYmMD09PWEubGVuZ3RoKXRocm93IEVycm9yKFwiQnl0ZVN0cmluZyBzaG91bGQgYmUgY29uc3RydWN0ZWQgd2l0aCBub24tZW1wdHkgdmFsdWVzXCIpO31OYS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7aWYobnVsbD09dGhpcy5nKXZhciBhPVwiXCI7ZWxzZSBhPXRoaXMuZyxhPXRoaXMuZz1udWxsPT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpMYSYmYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/SGEoYSk6bnVsbDtyZXR1cm4gYX07dmFyIE9hPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5zbGljZTtmdW5jdGlvbiBQYShhLGIsYyl7cmV0dXJuIGI9PT1jP01hfHwoTWE9bmV3IFVpbnQ4QXJyYXkoMCkpOk9hP2Euc2xpY2UoYixjKTpuZXcgVWludDhBcnJheShhLnN1YmFycmF5KGIsYykpfXZhciBNPTAsTj0wO1xuZnVuY3Rpb24gUWEoYSl7aWYoYS5jb25zdHJ1Y3Rvcj09PVVpbnQ4QXJyYXkpcmV0dXJuIGE7aWYoYS5jb25zdHJ1Y3Rvcj09PUFycmF5QnVmZmVyKXJldHVybiBuZXcgVWludDhBcnJheShhKTtpZihhLmNvbnN0cnVjdG9yPT09QXJyYXkpcmV0dXJuIG5ldyBVaW50OEFycmF5KGEpO2lmKGEuY29uc3RydWN0b3I9PT1TdHJpbmcpcmV0dXJuIEphKGEpO2lmKGEuY29uc3RydWN0b3I9PT1OYSl7aWYobnVsbD09YS5nKXZhciBiPU1hfHwoTWE9bmV3IFVpbnQ4QXJyYXkoMCkpO2Vsc2V7Yj1VaW50OEFycmF5O3ZhciBjPWEuZztjPW51bGw9PWN8fExhJiZudWxsIT1jJiZjIGluc3RhbmNlb2YgVWludDhBcnJheT9jOlwic3RyaW5nXCI9PT10eXBlb2YgYz9KYShjKTpudWxsO2E9YS5nPWM7Yj1uZXcgYihhKX1yZXR1cm4gYn1pZihhIGluc3RhbmNlb2YgVWludDhBcnJheSlyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYS5idWZmZXIsYS5ieXRlT2Zmc2V0LGEuYnl0ZUxlbmd0aCk7dGhyb3cgRXJyb3IoXCJUeXBlIG5vdCBjb252ZXJ0aWJsZSB0byBhIFVpbnQ4QXJyYXksIGV4cGVjdGVkIGEgVWludDhBcnJheSwgYW4gQXJyYXlCdWZmZXIsIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLCBvciBBcnJheSBvZiBudW1iZXJzXCIpO1xufTtmdW5jdGlvbiBSYShhLGIpe2I9dm9pZCAwPT09Yj97fTpiO2I9dm9pZCAwPT09Yi51PyExOmIudTt0aGlzLmg9bnVsbDt0aGlzLmc9dGhpcy5pPXRoaXMubD0wO3RoaXMuaj0hMTt0aGlzLnU9YjthJiZTYSh0aGlzLGEpfWZ1bmN0aW9uIFNhKGEsYil7YS5oPVFhKGIpO2EubD0wO2EuaT1hLmgubGVuZ3RoO2EuZz1hLmx9UmEucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5nPXRoaXMubH07ZnVuY3Rpb24gTyhhKXthLmc+YS5pJiYoYS5qPSEwLEsoRXJyb3IoXCJUcmllZCB0byByZWFkIHBhc3QgdGhlIGVuZCBvZiB0aGUgZGF0YSBcIithLmcrXCIgPiBcIithLmkpKSl9XG5mdW5jdGlvbiBQKGEpe3ZhciBiPWEuaCxjPWJbYS5nXSxkPWMmMTI3O2lmKDEyOD5jKXJldHVybiBhLmcrPTEsTyhhKSxkO2M9YlthLmcrMV07ZHw9KGMmMTI3KTw8NztpZigxMjg+YylyZXR1cm4gYS5nKz0yLE8oYSksZDtjPWJbYS5nKzJdO2R8PShjJjEyNyk8PDE0O2lmKDEyOD5jKXJldHVybiBhLmcrPTMsTyhhKSxkO2M9YlthLmcrM107ZHw9KGMmMTI3KTw8MjE7aWYoMTI4PmMpcmV0dXJuIGEuZys9NCxPKGEpLGQ7Yz1iW2EuZys0XTtkfD0oYyYxNSk8PDI4O2lmKDEyOD5jKXJldHVybiBhLmcrPTUsTyhhKSxkPj4+MDthLmcrPTU7aWYoMTI4PD1iW2EuZysrXSYmMTI4PD1iW2EuZysrXSYmMTI4PD1iW2EuZysrXSYmMTI4PD1iW2EuZysrXSYmMTI4PD1iW2EuZysrXSlyZXR1cm4gYS5qPSEwLHphKCksZDtPKGEpO3JldHVybiBkfXZhciBUYT1bXTtmdW5jdGlvbiBVYSgpe3RoaXMuZz1uZXcgVWludDhBcnJheSg2NCk7dGhpcy5oPTB9ZnVuY3Rpb24gUShhLGIpe2lmKCEoYS5oKzE8YS5nLmxlbmd0aCkpe3ZhciBjPWEuZzthLmc9bmV3IFVpbnQ4QXJyYXkoTWF0aC5jZWlsKDErMiphLmcubGVuZ3RoKSk7YS5nLnNldChjKX1hLmdbYS5oKytdPWJ9VWEucHJvdG90eXBlLmxlbmd0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmh9O1VhLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmcsYj10aGlzLmg7dGhpcy5oPTA7cmV0dXJuIFBhKGEsMCxiKX07ZnVuY3Rpb24gUihhLGIpe2Zvcig7MTI3PGI7KVEoYSxiJjEyN3wxMjgpLGI+Pj49NztRKGEsYil9O2Z1bmN0aW9uIFZhKGEpe3ZhciBiPXt9LGM9dm9pZCAwPT09Yi5OPyExOmIuTjt0aGlzLm09e3U6dm9pZCAwPT09Yi51PyExOmIudX07dGhpcy5OPWM7Yj10aGlzLm07VGEubGVuZ3RoPyhjPVRhLnBvcCgpLGImJihjLnU9Yi51KSxhJiZTYShjLGEpLGE9Yyk6YT1uZXcgUmEoYSxiKTt0aGlzLmc9YTt0aGlzLmw9dGhpcy5nLmc7dGhpcy5oPXRoaXMuaT0tMTt0aGlzLmo9ITF9VmEucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5nLnJlc2V0KCk7dGhpcy5oPXRoaXMuaT0tMX07ZnVuY3Rpb24gV2EoYSl7dmFyIGI9YS5nOyhiPWIuZz09Yi5pKXx8KGI9YS5qKXx8KGI9YS5nLGI9Yi5qfHwwPmIuZ3x8Yi5nPmIuaSk7aWYoYilyZXR1cm4hMTthLmw9YS5nLmc7dmFyIGM9UChhLmcpO2I9Yz4+PjM7YyY9NztpZighKDA8PWMmJjU+PWMpKXJldHVybiBhLmo9ITAseWEoYyxhLmwpLCExO2EuaT1iO2EuaD1jO3JldHVybiEwfVxuZnVuY3Rpb24gWGEoYSl7c3dpdGNoKGEuaCl7Y2FzZSAwOmlmKDAhPWEuaClYYShhKTtlbHNlIGE6e2E9YS5nO2Zvcih2YXIgYj1hLmcsYz0wOzEwPmM7YysrKXtpZigwPT09KGEuaFtiXSYxMjgpKXthLmc9YisxO08oYSk7YnJlYWsgYX1iKyt9YS5qPSEwO3phKCl9YnJlYWs7Y2FzZSAxOmE9YS5nO2EuZys9ODtPKGEpO2JyZWFrO2Nhc2UgMjoyIT1hLmg/WGEoYSk6KGI9UChhLmcpLGE9YS5nLGEuZys9YixPKGEpKTticmVhaztjYXNlIDU6YT1hLmc7YS5nKz00O08oYSk7YnJlYWs7Y2FzZSAzOmI9YS5pO2Rve2lmKCFXYShhKSl7YS5qPSEwO0soRXJyb3IoXCJVbm1hdGNoZWQgc3RhcnQtZ3JvdXAgdGFnOiBzdHJlYW0gRU9GXCIpKTticmVha31pZig0PT1hLmgpe2EuaSE9YiYmKGEuaj0hMCxLKEVycm9yKFwiVW5tYXRjaGVkIGVuZC1ncm91cCB0YWdcIikpKTticmVha31YYShhKX13aGlsZSgxKTticmVhaztkZWZhdWx0OmEuaj0hMCx5YShhLmgsYS5sKX19XG5mdW5jdGlvbiBZYShhLGIsYyl7YS5OfHwoYT1QYShhLmcuaCxjLGEuZy5nKSwoYz1iLm0pP2MucHVzaChhKTpiLm09W2FdKX12YXIgWmE9W107ZnVuY3Rpb24gJGEoKXt0aGlzLmg9W107dGhpcy5pPTA7dGhpcy5nPW5ldyBVYX1mdW5jdGlvbiBhYihhLGIpezAhPT1iLmxlbmd0aCYmKGEuaC5wdXNoKGIpLGEuaSs9Yi5sZW5ndGgpfWZ1bmN0aW9uIGJiKGEsYixjKXtSKGEuZyw4KmIrMik7UihhLmcsYy5sZW5ndGgpO2FiKGEsYS5nLmVuZCgpKTthYihhLGMpfTt2YXIgY2I9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09PXR5cGVvZiBTeW1ib2woKT9TeW1ib2wodm9pZCAwKTp2b2lkIDA7ZnVuY3Rpb24gZGIoYSxiKXtPYmplY3QuaXNGcm96ZW4oYSl8fChjYj9hW2NiXXw9Yjp2b2lkIDAhPT1hLmc/YS5nfD1iOk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGEse2c6e3ZhbHVlOmIsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6ITF9fSkpfWZ1bmN0aW9uIGViKGEpe2lmKCFhKXJldHVybiAwO3ZhciBiO2NiP2I9YVtjYl06Yj1hLmc7cmV0dXJuIG51bGw9PWI/MDpifWZ1bmN0aW9uIGZiKGEpe2lmKCFBcnJheS5pc0FycmF5KGEpKXJldHVybiBhO2RiKGEsMSk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2IoYSl7aWYoIUFycmF5LmlzQXJyYXkoYSkpdGhyb3cgRXJyb3IoXCJjYW5ub3QgbWFyayBub24tYXJyYXkgYXMgaW1tdXRhYmxlXCIpO2RiKGEsMil9O2Z1bmN0aW9uIGhiKGEpe3JldHVybiBudWxsIT09YSYmXCJvYmplY3RcIj09PXR5cGVvZiBhJiZhLmNvbnN0cnVjdG9yPT09T2JqZWN0fWZ1bmN0aW9uIGliKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcIm51bWJlclwiOnJldHVybiBpc0Zpbml0ZShhKT9hOlN0cmluZyhhKTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIExhJiZudWxsIT1hJiZhIGluc3RhbmNlb2YgVWludDhBcnJheT9IYShhKTphO2RlZmF1bHQ6cmV0dXJuIGF9fTtmdW5jdGlvbiBqYihhLGIpe2lmKG51bGwhPWEpcmV0dXJuIEFycmF5LmlzQXJyYXkoYSl8fGhiKGEpP2tiKGEsYik6YihhKX1mdW5jdGlvbiBrYihhLGIpe2lmKEFycmF5LmlzQXJyYXkoYSkpe2Zvcih2YXIgYz1BcnJheShhLmxlbmd0aCksZD0wO2Q8YS5sZW5ndGg7ZCsrKWNbZF09amIoYVtkXSxiKTtlYihhKSYxJiZmYihjKTtyZXR1cm4gY31jPXt9O2ZvcihkIGluIGEpY1tkXT1qYihhW2RdLGIpO3JldHVybiBjfTt2YXIgbGI7ZnVuY3Rpb24gVChhLGIsYyl7dmFyIGQ9bGI7bGI9bnVsbDthfHwoYT1kKTtkPXRoaXMuY29uc3RydWN0b3IuY2E7YXx8KGE9ZD9bZF06W10pO3RoaXMuaj0oZD8wOi0xKS0odGhpcy5jb25zdHJ1Y3Rvci5hYXx8MCk7dGhpcy5pPW51bGw7dGhpcy5nPWE7YTp7ZD10aGlzLmcubGVuZ3RoO2E9ZC0xO2lmKGQmJihkPXRoaXMuZ1thXSxoYihkKSkpe3RoaXMubD1hLXRoaXMuajt0aGlzLmg9ZDticmVhayBhfXZvaWQgMCE9PWImJi0xPGI/KHRoaXMubD1NYXRoLm1heChiLGErMS10aGlzLmopLHRoaXMuaD1udWxsKTp0aGlzLmw9TnVtYmVyLk1BWF9WQUxVRX1pZihjKWZvcihiPTA7YjxjLmxlbmd0aDtiKyspYT1jW2JdLGE8dGhpcy5sPyhhKz10aGlzLmosKGQ9dGhpcy5nW2FdKT9mYihkKTp0aGlzLmdbYV09bWIpOihuYih0aGlzKSwoZD10aGlzLmhbYV0pP2ZiKGQpOnRoaXMuaFthXT1tYil9dmFyIG1iPU9iamVjdC5mcmVlemUoZmIoW10pKTtcbmZ1bmN0aW9uIG5iKGEpe3ZhciBiPWEubCthLmo7YS5nW2JdfHwoYS5oPWEuZ1tiXT17fSl9ZnVuY3Rpb24gVShhLGIsYyl7cmV0dXJuLTE9PT1iP251bGw6KHZvaWQgMD09PWM/MDpjKXx8Yj49YS5sP2EuaD9hLmhbYl06dm9pZCAwOmEuZ1tiK2Eual19ZnVuY3Rpb24gb2IoYSxiLGMpe2M9dm9pZCAwPT09Yz8hMDpjO3ZhciBkPXZvaWQgMD09PWQ/ITE6ZDt2YXIgZT1VKGEsYixkKTtudWxsPT1lJiYoZT1tYik7ZT09PW1iPyhlPWZiKFtdKSxWKGEsYixlLGQpKTpjJiZBcnJheS5pc0FycmF5KGUpJiZlYihlKSYyJiYoZT1lLnNsaWNlKCksVihhLGIsZSxkKSk7cmV0dXJuIGV9ZnVuY3Rpb24gVyhhLGIsYyl7YT1VKGEsYik7YT1udWxsPT1hP2E6K2E7cmV0dXJuIG51bGw9PWE/dm9pZCAwPT09Yz8wOmM6YX1mdW5jdGlvbiBWKGEsYixjLGQpeyh2b2lkIDA9PT1kPzA6ZCl8fGI+PWEubD8obmIoYSksYS5oW2JdPWMpOmEuZ1tiK2Eual09Y31cbmZ1bmN0aW9uIHBiKGEsYixjKXthLml8fChhLmk9e30pO3ZhciBkPWEuaVtjXTtpZighZCl7dmFyIGU9b2IoYSxjLCExKTtkPVtdO2Zvcih2YXIgZz1BcnJheS5pc0FycmF5KGUpPyEhKGViKGUpJjIpOiExLGY9MDtmPGUubGVuZ3RoO2YrKylkW2ZdPW5ldyBiKGVbZl0pLGcmJmdiKGRbZl0uZyk7ZyYmKGdiKGQpLE9iamVjdC5mcmVlemUoZCkpO2EuaVtjXT1kfXJldHVybiBkfWZ1bmN0aW9uIHFiKGEsYixjLGQsZSl7dmFyIGc9cGIoYSxkLGIpO2M9Yz9jOm5ldyBkO2E9b2IoYSxiKTt2b2lkIDAhPWU/KGcuc3BsaWNlKGUsMCxjKSxhLnNwbGljZShlLDAsWChjKSkpOihnLnB1c2goYyksYS5wdXNoKFgoYykpKX1ULnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1YKHRoaXMpO3JldHVybiBrYihhLGliKX07XG5mdW5jdGlvbiBYKGEpe2lmKGEuaSlmb3IodmFyIGIgaW4gYS5pKXt2YXIgYz1hLmlbYl07aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyljW2RdJiZYKGNbZF0pO2Vsc2UgYyYmWChjKX1yZXR1cm4gYS5nfVQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIFgodGhpcykudG9TdHJpbmcoKX07ZnVuY3Rpb24gcmIoYSxiKXthPVUoYSxiKTtyZXR1cm4gbnVsbD09YT8wOmF9ZnVuY3Rpb24gc2IoYSxiKXthPVUoYSxiKTtyZXR1cm4gbnVsbD09YT9cIlwiOmF9O2Z1bmN0aW9uIHRiKGEsYil7aWYoYT1hLm0pe2FiKGIsYi5nLmVuZCgpKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKylhYihiLGFbY10pfX1mdW5jdGlvbiB1YihhKXt2YXIgYj1hWzBdO3N3aXRjaChhLmxlbmd0aCl7Y2FzZSAyOnZhciBjPWFbMV07cmV0dXJuIGZ1bmN0aW9uKGgsbCxuKXtyZXR1cm4gYihoLGwsbixjKX07Y2FzZSAzOnZhciBkPWFbMV0sZT1hWzJdO3JldHVybiBmdW5jdGlvbihoLGwsbil7cmV0dXJuIGIoaCxsLG4sZCxlKX07Y2FzZSA0OnZhciBnPWFbMV0sZj1hWzJdLGs9YVszXTtyZXR1cm4gZnVuY3Rpb24oaCxsLG4pe3JldHVybiBiKGgsbCxuLGcsZixrKX07ZGVmYXVsdDp0aHJvdyBFcnJvcihcInVuc3VwcG9ydGVkIG51bWJlciBvZiBwYXJhbWV0ZXJzLCBleHBlY3RlZCBbMi00XSwgZ290IFwiK2EubGVuZ3RoKTt9fVxuZnVuY3Rpb24gdmIoYSxiLGMpe2Zvcig7V2EoYikmJjQhPWIuaDspe3ZhciBkPWIuaSxlPWNbZF07aWYoZSl7aWYoQXJyYXkuaXNBcnJheShlKSYmKGU9Y1tkXT11YihlKSksIWUoYixhLGQpKXtkPWI7ZT1hO3ZhciBnPWQubDtYYShkKTtZYShkLGUsZyl9fWVsc2UgZD1iLGU9YSxnPWQubCxYYShkKSxZYShkLGUsZyl9cmV0dXJuIGF9ZnVuY3Rpb24gd2IoYSxiKXt2YXIgYz1uZXcgJGE7YihhLGMpO2E9Yy5pK2MuZy5sZW5ndGgoKTtpZigwPT09YSljPW5ldyBVaW50OEFycmF5KDApO2Vsc2V7YT1uZXcgVWludDhBcnJheShhKTtmb3IodmFyIGQ9Yy5oLGU9ZC5sZW5ndGgsZz1iPTA7ZzxlO2crKyl7dmFyIGY9ZFtnXTswIT09Zi5sZW5ndGgmJihhLnNldChmLGIpLGIrPWYubGVuZ3RoKX1kPWMuZztlPWQuaDswIT09ZSYmKGEuc2V0KGQuZy5zdWJhcnJheSgwLGUpLGIpLGQuaD0wKTtjLmg9W2FdO2M9YX1yZXR1cm4gY31cbmZ1bmN0aW9uIHhiKGEsYixjKXtpZihaYS5sZW5ndGgpe3ZhciBkPVphLnBvcCgpO2EmJihTYShkLmcsYSksZC5pPS0xLGQuaD0tMSk7YT1kfWVsc2UgYT1uZXcgVmEoYSk7dHJ5e3JldHVybiBjKG5ldyBiLGEpfWZpbmFsbHl7Yj1hLmcsYi5oPW51bGwsYi5sPTAsYi5pPTAsYi5nPTAsYi5qPSExLGIudT0hMSxhLmk9LTEsYS5oPS0xLGEuaj0hMSwxMDA+WmEubGVuZ3RoJiZaYS5wdXNoKGEpfX1cbmZ1bmN0aW9uIFkoYSxiLGMpe2I9VShiLGMpO2lmKG51bGwhPWIpe1IoYS5nLDgqYys1KTthPWEuZzt2YXIgZD1iO2Q9KGM9MD5kPzE6MCk/LWQ6ZDswPT09ZD8wPDEvZD9NPU49MDooTj0wLE09MjE0NzQ4MzY0OCk6aXNOYU4oZCk/KE49MCxNPTIxNDc0ODM2NDcpOjMuNDAyODIzNDY2Mzg1Mjg4NkUzODxkPyhOPTAsTT0oYzw8MzF8MjEzOTA5NTA0MCk+Pj4wKToxLjE3NTQ5NDM1MDgyMjI4NzVFLTM4PmQ/KGQ9TWF0aC5yb3VuZChkL01hdGgucG93KDIsLTE0OSkpLE49MCxNPShjPDwzMXxkKT4+PjApOihiPU1hdGguZmxvb3IoTWF0aC5sb2coZCkvTWF0aC5MTjIpLGQqPU1hdGgucG93KDIsLWIpLGQ9TWF0aC5yb3VuZCg4Mzg4NjA4KmQpLDE2Nzc3MjE2PD1kJiYrK2IsTj0wLE09KGM8PDMxfGIrMTI3PDwyM3xkJjgzODg2MDcpPj4+MCk7Yz1NO1EoYSxjPj4+MCYyNTUpO1EoYSxjPj4+OCYyNTUpO1EoYSxjPj4+MTYmMjU1KTtRKGEsYz4+PjI0JjI1NSl9fVxuZnVuY3Rpb24gWihhLGIsYyl7aWYoNSE9PWEuaClyZXR1cm4hMTthPWEuZzt2YXIgZD1hLmhbYS5nXTt2YXIgZT1hLmhbYS5nKzFdO3ZhciBnPWEuaFthLmcrMl0sZj1hLmhbYS5nKzNdO2EuZys9NDtPKGEpO2U9KGQ8PDB8ZTw8OHxnPDwxNnxmPDwyNCk+Pj4wO2E9MiooZT4+MzEpKzE7ZD1lPj4+MjMmMjU1O2UmPTgzODg2MDc7VihiLGMsMjU1PT1kP2U/TmFOOkluZmluaXR5KmE6MD09ZD9hKk1hdGgucG93KDIsLTE0OSkqZTphKk1hdGgucG93KDIsZC0xNTApKihlK01hdGgucG93KDIsMjMpKSk7cmV0dXJuITB9XG5mdW5jdGlvbiB5YihhLGIsYyl7aWYoMCE9PWEuaClyZXR1cm4hMTtmb3IodmFyIGQ9YS5nLGU9MTI4LGc9MCxmPWE9MDs0PmYmJjEyODw9ZTtmKyspZT1kLmhbZC5nKytdLGd8PShlJjEyNyk8PDcqZjsxMjg8PWUmJihlPWQuaFtkLmcrK10sZ3w9KGUmMTI3KTw8MjgsYXw9KGUmMTI3KT4+NCk7aWYoMTI4PD1lKWZvcihmPTA7NT5mJiYxMjg8PWU7ZisrKWU9ZC5oW2QuZysrXSxhfD0oZSYxMjcpPDw3KmYrMztpZigxMjg+ZSl7ZD1nPj4+MDtlPWE+Pj4wO2lmKGE9ZSYyMTQ3NDgzNjQ4KWQ9fmQrMT4+PjAsZT1+ZT4+PjAsMD09ZCYmKGU9ZSsxPj4+MCk7ZD00Mjk0OTY3Mjk2KmUrKGQ+Pj4wKTthPWE/LWQ6ZH1lbHNlIGQuaj0hMCx6YSgpLGE9dm9pZCAwO1YoYixjLGEpO3JldHVybiEwfWZ1bmN0aW9uIHpiKGEsYixjKXtpZigwIT09YS5oKXJldHVybiExO1YoYixjLFAoYS5nKSk7cmV0dXJuITB9XG5mdW5jdGlvbiBBYihhLGIsYyl7aWYoMiE9PWEuaClyZXR1cm4hMTt2YXIgZD1QKGEuZyk7YT1hLmc7dmFyIGU9YS5nO2EuZys9ZDtPKGEpO2E9YS5oO3ZhciBnO2lmKENhKShnPUJhKXx8KGc9QmE9bmV3IFRleHREZWNvZGVyKFwidXRmLThcIix7ZmF0YWw6ITF9KSksZz1nLmRlY29kZShhLnN1YmFycmF5KGUsZStkKSk7ZWxzZXtkPWUrZDtmb3IodmFyIGY9W10saz1udWxsLGgsbCxuO2U8ZDspaD1hW2UrK10sMTI4Pmg/Zi5wdXNoKGgpOjIyND5oP2U+PWQ/Zi5wdXNoKDY1NTMzKToobD1hW2UrK10sMTk0Pmh8fDEyOCE9PShsJjE5Mik/KGUtLSxmLnB1c2goNjU1MzMpKTpmLnB1c2goKGgmMzEpPDw2fGwmNjMpKToyNDA+aD9lPj1kLTE/Zi5wdXNoKDY1NTMzKToobD1hW2UrK10sMTI4IT09KGwmMTkyKXx8MjI0PT09aCYmMTYwPmx8fDIzNz09PWgmJjE2MDw9bHx8MTI4IT09KChnPWFbZSsrXSkmMTkyKT8oZS0tLGYucHVzaCg2NTUzMykpOmYucHVzaCgoaCYxNSk8PDEyfChsJjYzKTw8NnxcbmcmNjMpKToyNDQ+PWg/ZT49ZC0yP2YucHVzaCg2NTUzMyk6KGw9YVtlKytdLDEyOCE9PShsJjE5Mil8fDAhPT0oaDw8MjgpKyhsLTE0NCk+PjMwfHwxMjghPT0oKGc9YVtlKytdKSYxOTIpfHwxMjghPT0oKG49YVtlKytdKSYxOTIpPyhlLS0sZi5wdXNoKDY1NTMzKSk6KGg9KGgmNyk8PDE4fChsJjYzKTw8MTJ8KGcmNjMpPDw2fG4mNjMsaC09NjU1MzYsZi5wdXNoKChoPj4xMCYxMDIzKSs1NTI5NiwoaCYxMDIzKSs1NjMyMCkpKTpmLnB1c2goNjU1MzMpLDgxOTI8PWYubGVuZ3RoJiYoaz1BYShrLGYpLGYubGVuZ3RoPTApO2c9QWEoayxmKX1WKGIsYyxnKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEJiKGEsYixjLGQsZSl7aWYoMiE9PWEuaClyZXR1cm4hMTt2YXIgZz1uZXcgZCxmPWEuZy5pLGs9UChhLmcpLGg9YS5nLmcrazthLmcuaT1oO2UoZyxhKTtlPWgtYS5nLmc7aWYoMCE9PWUpdGhyb3cgRXJyb3IoXCJNZXNzYWdlIHBhcnNpbmcgZW5kZWQgdW5leHBlY3RlZGx5LiBFeHBlY3RlZCB0byByZWFkIFwiKyhrK1wiIGJ5dGVzLCBpbnN0ZWFkIHJlYWQgXCIrKGstZSkrXCIgYnl0ZXMsIGVpdGhlciB0aGUgZGF0YSBlbmRlZCB1bmV4cGVjdGVkbHkgb3IgdGhlIG1lc3NhZ2UgbWlzcmVwb3J0ZWQgaXRzIG93biBsZW5ndGhcIikpO2EuZy5nPWg7YS5nLmk9ZjtxYihiLGMsZyxkLHZvaWQgMCk7cmV0dXJuITB9O2Z1bmN0aW9uIENiKGEpe1QuY2FsbCh0aGlzLGEpfXZhciBEYjtFKENiLFQpO2Z1bmN0aW9uIEViKGEsYil7dmFyIGM9VShhLDEpO2lmKG51bGwhPWMmJm51bGwhPWMpe1IoYi5nLDgpO3ZhciBkPWIuZztpZigwPD1jKVIoZCxjKTtlbHNle2Zvcih2YXIgZT0wOzk+ZTtlKyspUShkLGMmMTI3fDEyOCksYz4+PTc7UShkLDEpfX1ZKGIsYSwyKTtkPVUoYSwzKTtudWxsIT1kJiZiYihiLDMsRmEoZCkpO2Q9VShhLDQpO251bGwhPWQmJmJiKGIsNCxGYShkKSk7dGIoYSxiKX1mdW5jdGlvbiBGYihhLGIpe3JldHVybiB2YihhLGIsRGJ8fChEYj17MTp6YiwyOlosMzpBYiw0OkFifSkpfTtmdW5jdGlvbiBHYihhKXtULmNhbGwodGhpcyxhLC0xLEhiKX12YXIgSWI7RShHYixUKTtHYi5wcm90b3R5cGUuYWRkQ2xhc3NpZmljYXRpb249ZnVuY3Rpb24oYSxiKXtxYih0aGlzLDEsYSxDYixiKTtyZXR1cm4gdGhpc307ZnVuY3Rpb24gSmIoYSxiKXtyZXR1cm4gdmIoYSxiLElifHwoSWI9ezE6W0JiLENiLEZiXX0pKX12YXIgSGI9WzFdO2Z1bmN0aW9uIEtiKGEpe1QuY2FsbCh0aGlzLGEpfXZhciBMYjtFKEtiLFQpO2Z1bmN0aW9uIE1iKGEsYil7WShiLGEsMSk7WShiLGEsMik7WShiLGEsMyk7WShiLGEsNCk7WShiLGEsNSk7dGIoYSxiKX1mdW5jdGlvbiBOYihhLGIpe3JldHVybiB2YihhLGIsTGJ8fChMYj17MTpaLDI6WiwzOlosNDpaLDU6Wn0pKX07ZnVuY3Rpb24gT2IoYSl7VC5jYWxsKHRoaXMsYSwtMSxQYil9dmFyIFFiO0UoT2IsVCk7ZnVuY3Rpb24gUmIoYSxiKXtyZXR1cm4gdmIoYSxiLFFifHwoUWI9ezE6W0JiLEtiLE5iXX0pKX12YXIgUGI9WzFdO2Z1bmN0aW9uIFNiKGEpe1QuY2FsbCh0aGlzLGEpfXZhciBUYjtFKFNiLFQpO2Z1bmN0aW9uIFViKGEsYil7WShiLGEsMSk7WShiLGEsMik7WShiLGEsMyk7WShiLGEsNCk7WShiLGEsNSk7dmFyIGM9VShhLDYpO2lmKG51bGwhPWMmJm51bGwhPWMpe1IoYi5nLDQ4KTt2YXIgZD1iLmcsZT1jO2M9MD5lO2U9TWF0aC5hYnMoZSk7dmFyIGc9ZT4+PjA7ZT1NYXRoLmZsb29yKChlLWcpLzQyOTQ5NjcyOTYpO2U+Pj49MDtjJiYoZT1+ZT4+PjAsZz0ofmc+Pj4wKSsxLDQyOTQ5NjcyOTU8ZyYmKGc9MCxlKyssNDI5NDk2NzI5NTxlJiYoZT0wKSkpO009ZztOPWU7Yz1NO2ZvcihnPU47MDxnfHwxMjc8YzspUShkLGMmMTI3fDEyOCksYz0oYz4+Pjd8Zzw8MjUpPj4+MCxnPj4+PTc7UShkLGMpfXRiKGEsYil9ZnVuY3Rpb24gVmIoYSxiKXtyZXR1cm4gdmIoYSxiLFRifHwoVGI9ezE6WiwyOlosMzpaLDQ6Wiw1OlosNjp5Yn0pKX07ZnVuY3Rpb24gV2IoYSxiLGMpe2M9YS5jcmVhdGVTaGFkZXIoMD09PWM/YS5WRVJURVhfU0hBREVSOmEuRlJBR01FTlRfU0hBREVSKTthLnNoYWRlclNvdXJjZShjLGIpO2EuY29tcGlsZVNoYWRlcihjKTtpZighYS5nZXRTaGFkZXJQYXJhbWV0ZXIoYyxhLkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBjb21waWxlIFdlYkdMIHNoYWRlci5cXG5cXG5cIithLmdldFNoYWRlckluZm9Mb2coYykpO3JldHVybiBjfTtmdW5jdGlvbiBYYihhKXtyZXR1cm4gcGIoYSxDYiwxKS5tYXAoZnVuY3Rpb24oYil7cmV0dXJue2luZGV4OnJiKGIsMSksWDpXKGIsMiksbGFiZWw6bnVsbCE9VShiLDMpP3NiKGIsMyk6dm9pZCAwLGRpc3BsYXlOYW1lOm51bGwhPVUoYiw0KT9zYihiLDQpOnZvaWQgMH19KX07ZnVuY3Rpb24gWWIoYSl7cmV0dXJue3g6VyhhLDEpLHk6VyhhLDIpLHo6VyhhLDMpLHZpc2liaWxpdHk6bnVsbCE9VShhLDQpP1coYSw0KTp2b2lkIDB9fWZ1bmN0aW9uIFpiKGEpe3JldHVybiBwYih4YihhLE9iLFJiKSxLYiwxKS5tYXAoWWIpfTtmdW5jdGlvbiAkYihhLGIpe3RoaXMuaD1hO3RoaXMuZz1iO3RoaXMubD0wfVxuZnVuY3Rpb24gYWMoYSxiLGMpe2JjKGEsYik7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuZy5jYW52YXMudHJhbnNmZXJUb0ltYWdlQml0bWFwKXJldHVybiBQcm9taXNlLnJlc29sdmUoYS5nLmNhbnZhcy50cmFuc2ZlclRvSW1hZ2VCaXRtYXAoKSk7aWYoYylyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGEuZy5jYW52YXMpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjcmVhdGVJbWFnZUJpdG1hcClyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoYS5nLmNhbnZhcyk7dm9pZCAwPT09YS5pJiYoYS5pPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihkKXthLmkuaGVpZ2h0PWEuZy5jYW52YXMuaGVpZ2h0O2EuaS53aWR0aD1hLmcuY2FudmFzLndpZHRoO2EuaS5nZXRDb250ZXh0KFwiMmRcIix7fSkuZHJhd0ltYWdlKGEuZy5jYW52YXMsMCwwLGEuZy5jYW52YXMud2lkdGgsYS5nLmNhbnZhcy5oZWlnaHQpO2QoYS5pKX0pfVxuZnVuY3Rpb24gYmMoYSxiKXt2YXIgYz1hLmc7aWYodm9pZCAwPT09YS5tKXt2YXIgZD1XYihjLFwiXFxuICBhdHRyaWJ1dGUgdmVjMiBhVmVydGV4O1xcbiAgYXR0cmlidXRlIHZlYzIgYVRleDtcXG4gIHZhcnlpbmcgdmVjMiB2VGV4O1xcbiAgdm9pZCBtYWluKHZvaWQpIHtcXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KGFWZXJ0ZXgsIDAuMCwgMS4wKTtcXG4gICAgdlRleCA9IGFUZXg7XFxuICB9XCIsMCksZT1XYihjLFwiXFxuICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4gIHZhcnlpbmcgdmVjMiB2VGV4O1xcbiAgdW5pZm9ybSBzYW1wbGVyMkQgc2FtcGxlcjA7XFxuICB2b2lkIG1haW4oKXtcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHNhbXBsZXIwLCB2VGV4KTtcXG4gIH1cIiwxKSxnPWMuY3JlYXRlUHJvZ3JhbSgpO2MuYXR0YWNoU2hhZGVyKGcsZCk7Yy5hdHRhY2hTaGFkZXIoZyxlKTtjLmxpbmtQcm9ncmFtKGcpO2lmKCFjLmdldFByb2dyYW1QYXJhbWV0ZXIoZyxjLkxJTktfU1RBVFVTKSl0aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBjb21waWxlIFdlYkdMIHByb2dyYW0uXFxuXFxuXCIrXG5jLmdldFByb2dyYW1JbmZvTG9nKGcpKTtkPWEubT1nO2MudXNlUHJvZ3JhbShkKTtlPWMuZ2V0VW5pZm9ybUxvY2F0aW9uKGQsXCJzYW1wbGVyMFwiKTthLmo9e0k6Yy5nZXRBdHRyaWJMb2NhdGlvbihkLFwiYVZlcnRleFwiKSxIOmMuZ2V0QXR0cmliTG9jYXRpb24oZCxcImFUZXhcIiksZGE6ZX07YS5zPWMuY3JlYXRlQnVmZmVyKCk7Yy5iaW5kQnVmZmVyKGMuQVJSQVlfQlVGRkVSLGEucyk7Yy5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhLmouSSk7Yy52ZXJ0ZXhBdHRyaWJQb2ludGVyKGEuai5JLDIsYy5GTE9BVCwhMSwwLDApO2MuYnVmZmVyRGF0YShjLkFSUkFZX0JVRkZFUixuZXcgRmxvYXQzMkFycmF5KFstMSwtMSwtMSwxLDEsMSwxLC0xXSksYy5TVEFUSUNfRFJBVyk7Yy5iaW5kQnVmZmVyKGMuQVJSQVlfQlVGRkVSLG51bGwpO2Eubz1jLmNyZWF0ZUJ1ZmZlcigpO2MuYmluZEJ1ZmZlcihjLkFSUkFZX0JVRkZFUixhLm8pO2MuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYS5qLkgpO2MudmVydGV4QXR0cmliUG9pbnRlcihhLmouSCxcbjIsYy5GTE9BVCwhMSwwLDApO2MuYnVmZmVyRGF0YShjLkFSUkFZX0JVRkZFUixuZXcgRmxvYXQzMkFycmF5KFswLDEsMCwwLDEsMCwxLDFdKSxjLlNUQVRJQ19EUkFXKTtjLmJpbmRCdWZmZXIoYy5BUlJBWV9CVUZGRVIsbnVsbCk7Yy51bmlmb3JtMWkoZSwwKX1kPWEuajtjLnVzZVByb2dyYW0oYS5tKTtjLmNhbnZhcy53aWR0aD1iLndpZHRoO2MuY2FudmFzLmhlaWdodD1iLmhlaWdodDtjLnZpZXdwb3J0KDAsMCxiLndpZHRoLGIuaGVpZ2h0KTtjLmFjdGl2ZVRleHR1cmUoYy5URVhUVVJFMCk7YS5oLmJpbmRUZXh0dXJlMmQoYi5nbE5hbWUpO2MuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoZC5JKTtjLmJpbmRCdWZmZXIoYy5BUlJBWV9CVUZGRVIsYS5zKTtjLnZlcnRleEF0dHJpYlBvaW50ZXIoZC5JLDIsYy5GTE9BVCwhMSwwLDApO2MuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoZC5IKTtjLmJpbmRCdWZmZXIoYy5BUlJBWV9CVUZGRVIsYS5vKTtjLnZlcnRleEF0dHJpYlBvaW50ZXIoZC5ILFxuMixjLkZMT0FULCExLDAsMCk7Yy5iaW5kRnJhbWVidWZmZXIoYy5EUkFXX0ZSQU1FQlVGRkVSP2MuRFJBV19GUkFNRUJVRkZFUjpjLkZSQU1FQlVGRkVSLG51bGwpO2MuY2xlYXJDb2xvcigwLDAsMCwwKTtjLmNsZWFyKGMuQ09MT1JfQlVGRkVSX0JJVCk7Yy5jb2xvck1hc2soITAsITAsITAsITApO2MuZHJhd0FycmF5cyhjLlRSSUFOR0xFX0ZBTiwwLDQpO2MuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGQuSSk7Yy5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoZC5IKTtjLmJpbmRCdWZmZXIoYy5BUlJBWV9CVUZGRVIsbnVsbCk7YS5oLmJpbmRUZXh0dXJlMmQoMCl9ZnVuY3Rpb24gY2MoYSl7dGhpcy5nPWF9O3ZhciBkYz1uZXcgVWludDhBcnJheShbMCw5NywxMTUsMTA5LDEsMCwwLDAsMSw0LDEsOTYsMCwwLDMsMiwxLDAsMTAsOSwxLDcsMCw2NSwwLDI1MywxNSwyNiwxMV0pO2Z1bmN0aW9uIGVjKGEsYil7cmV0dXJuIGIrYX1mdW5jdGlvbiBmYyhhLGIpe3dpbmRvd1thXT1ifWZ1bmN0aW9uIGdjKGEpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7Yi5zZXRBdHRyaWJ1dGUoXCJzcmNcIixhKTtiLnNldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIsXCJhbm9ueW1vdXNcIik7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMpe2IuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbigpe2MoKX0sITEpO2IuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZnVuY3Rpb24oKXtjKCl9LCExKTtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGIpfSl9XG5mdW5jdGlvbiBoYygpe3JldHVybiBIKGZ1bmN0aW9uKGEpe3N3aXRjaChhLmcpe2Nhc2UgMTpyZXR1cm4gYS5tPTIsRihhLFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGRjKSw0KTtjYXNlIDQ6YS5nPTM7YS5tPTA7YnJlYWs7Y2FzZSAyOnJldHVybiBhLm09MCxhLmo9bnVsbCxhLnJldHVybighMSk7Y2FzZSAzOnJldHVybiBhLnJldHVybighMCl9fSl9XG5mdW5jdGlvbiBpYyhhKXt0aGlzLmc9YTt0aGlzLmxpc3RlbmVycz17fTt0aGlzLmo9e307dGhpcy5GPXt9O3RoaXMubT17fTt0aGlzLnM9e307dGhpcy5HPXRoaXMubz10aGlzLlI9ITA7dGhpcy5DPVByb21pc2UucmVzb2x2ZSgpO3RoaXMuUD1cIlwiO3RoaXMuQj17fTt0aGlzLmxvY2F0ZUZpbGU9YSYmYS5sb2NhdGVGaWxlfHxlYztpZihcIm9iamVjdFwiPT09dHlwZW9mIHdpbmRvdyl2YXIgYj13aW5kb3cubG9jYXRpb24ucGF0aG5hbWUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCx3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUudG9TdHJpbmcoKS5sYXN0SW5kZXhPZihcIi9cIikpK1wiL1wiO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBsb2NhdGlvbiliPWxvY2F0aW9uLnBhdGhuYW1lLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsbG9jYXRpb24ucGF0aG5hbWUudG9TdHJpbmcoKS5sYXN0SW5kZXhPZihcIi9cIikpK1wiL1wiO2Vsc2UgdGhyb3cgRXJyb3IoXCJzb2x1dGlvbnMgY2FuIG9ubHkgYmUgbG9hZGVkIG9uIGEgd2ViIHBhZ2Ugb3IgaW4gYSB3ZWIgd29ya2VyXCIpO1xudGhpcy5TPWI7aWYoYS5vcHRpb25zKXtiPUMoT2JqZWN0LmtleXMoYS5vcHRpb25zKSk7Zm9yKHZhciBjPWIubmV4dCgpOyFjLmRvbmU7Yz1iLm5leHQoKSl7Yz1jLnZhbHVlO3ZhciBkPWEub3B0aW9uc1tjXS5kZWZhdWx0O3ZvaWQgMCE9PWQmJih0aGlzLmpbY109XCJmdW5jdGlvblwiPT09dHlwZW9mIGQ/ZCgpOmQpfX19eD1pYy5wcm90b3R5cGU7eC5jbG9zZT1mdW5jdGlvbigpe3RoaXMuaSYmdGhpcy5pLmRlbGV0ZSgpO3JldHVybiBQcm9taXNlLnJlc29sdmUoKX07XG5mdW5jdGlvbiBqYyhhKXt2YXIgYixjLGQsZSxnLGYsayxoLGwsbixyO3JldHVybiBIKGZ1bmN0aW9uKHApe3N3aXRjaChwLmcpe2Nhc2UgMTppZighYS5SKXJldHVybiBwLnJldHVybigpO2I9dm9pZCAwPT09YS5nLmZpbGVzP1tdOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmcuZmlsZXM/YS5nLmZpbGVzKGEuaik6YS5nLmZpbGVzO3JldHVybiBGKHAsaGMoKSwyKTtjYXNlIDI6Yz1wLmg7aWYoXCJvYmplY3RcIj09PXR5cGVvZiB3aW5kb3cpcmV0dXJuIGZjKFwiY3JlYXRlTWVkaWFwaXBlU29sdXRpb25zV2FzbVwiLHtsb2NhdGVGaWxlOmEubG9jYXRlRmlsZX0pLGZjKFwiY3JlYXRlTWVkaWFwaXBlU29sdXRpb25zUGFja2VkQXNzZXRzXCIse2xvY2F0ZUZpbGU6YS5sb2NhdGVGaWxlfSksZj1iLmZpbHRlcihmdW5jdGlvbihtKXtyZXR1cm4gdm9pZCAwIT09bS5kYXRhfSksaz1iLmZpbHRlcihmdW5jdGlvbihtKXtyZXR1cm4gdm9pZCAwPT09bS5kYXRhfSksaD1Qcm9taXNlLmFsbChmLm1hcChmdW5jdGlvbihtKXt2YXIgcT1cbmtjKGEsbS51cmwpO2lmKHZvaWQgMCE9PW0ucGF0aCl7dmFyIHQ9bS5wYXRoO3E9cS50aGVuKGZ1bmN0aW9uKHcpe2Eub3ZlcnJpZGVGaWxlKHQsdyk7cmV0dXJuIFByb21pc2UucmVzb2x2ZSh3KX0pfXJldHVybiBxfSkpLGw9UHJvbWlzZS5hbGwoay5tYXAoZnVuY3Rpb24obSl7cmV0dXJuIHZvaWQgMD09PW0uc2ltZHx8bS5zaW1kJiZjfHwhbS5zaW1kJiYhYz9nYyhhLmxvY2F0ZUZpbGUobS51cmwsYS5TKSk6UHJvbWlzZS5yZXNvbHZlKCl9KSkudGhlbihmdW5jdGlvbigpe3ZhciBtLHEsdDtyZXR1cm4gSChmdW5jdGlvbih3KXtpZigxPT13LmcpcmV0dXJuIG09d2luZG93LmNyZWF0ZU1lZGlhcGlwZVNvbHV0aW9uc1dhc20scT13aW5kb3cuY3JlYXRlTWVkaWFwaXBlU29sdXRpb25zUGFja2VkQXNzZXRzLHQ9YSxGKHcsbShxKSwyKTt0Lmg9dy5oO3cuZz0wfSl9KSxuPWZ1bmN0aW9uKCl7cmV0dXJuIEgoZnVuY3Rpb24obSl7YS5nLmdyYXBoJiZhLmcuZ3JhcGgudXJsP209RihtLFxua2MoYSxhLmcuZ3JhcGgudXJsKSwwKToobS5nPTAsbT12b2lkIDApO3JldHVybiBtfSl9KCksRihwLFByb21pc2UuYWxsKFtsLGgsbl0pLDcpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBpbXBvcnRTY3JpcHRzKXRocm93IEVycm9yKFwic29sdXRpb25zIGNhbiBvbmx5IGJlIGxvYWRlZCBvbiBhIHdlYiBwYWdlIG9yIGluIGEgd2ViIHdvcmtlclwiKTtkPWIuZmlsdGVyKGZ1bmN0aW9uKG0pe3JldHVybiB2b2lkIDA9PT1tLnNpbWR8fG0uc2ltZCYmY3x8IW0uc2ltZCYmIWN9KS5tYXAoZnVuY3Rpb24obSl7cmV0dXJuIGEubG9jYXRlRmlsZShtLnVybCxhLlMpfSk7aW1wb3J0U2NyaXB0cy5hcHBseShudWxsLGVhKGQpKTtlPWE7cmV0dXJuIEYocCxjcmVhdGVNZWRpYXBpcGVTb2x1dGlvbnNXYXNtKE1vZHVsZSksNik7Y2FzZSA2OmUuaD1wLmg7YS5sPW5ldyBPZmZzY3JlZW5DYW52YXMoMSwxKTthLmguY2FudmFzPWEubDtnPWEuaC5HTC5jcmVhdGVDb250ZXh0KGEubCx7YW50aWFsaWFzOiExLFxuYWxwaGE6ITEsYmE6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0PzI6MX0pO2EuaC5HTC5tYWtlQ29udGV4dEN1cnJlbnQoZyk7cC5nPTQ7YnJlYWs7Y2FzZSA3OmEubD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3I9YS5sLmdldENvbnRleHQoXCJ3ZWJnbDJcIix7fSk7aWYoIXImJihyPWEubC5nZXRDb250ZXh0KFwid2ViZ2xcIix7fSksIXIpKXJldHVybiBhbGVydChcIkZhaWxlZCB0byBjcmVhdGUgV2ViR0wgY2FudmFzIGNvbnRleHQgd2hlbiBwYXNzaW5nIHZpZGVvIGZyYW1lLlwiKSxwLnJldHVybigpO2EuRD1yO2EuaC5jYW52YXM9YS5sO2EuaC5jcmVhdGVDb250ZXh0KGEubCwhMCwhMCx7fSk7Y2FzZSA0OmEuaT1uZXcgYS5oLlNvbHV0aW9uV2FzbSxhLlI9ITEscC5nPTB9fSl9XG5mdW5jdGlvbiBsYyhhKXt2YXIgYixjLGQsZSxnLGYsayxoO3JldHVybiBIKGZ1bmN0aW9uKGwpe2lmKDE9PWwuZyl7aWYoYS5nLmdyYXBoJiZhLmcuZ3JhcGgudXJsJiZhLlA9PT1hLmcuZ3JhcGgudXJsKXJldHVybiBsLnJldHVybigpO2Eubz0hMDtpZighYS5nLmdyYXBofHwhYS5nLmdyYXBoLnVybCl7bC5nPTI7cmV0dXJufWEuUD1hLmcuZ3JhcGgudXJsO3JldHVybiBGKGwsa2MoYSxhLmcuZ3JhcGgudXJsKSwzKX0yIT1sLmcmJihiPWwuaCxhLmkubG9hZEdyYXBoKGIpKTtjPUMoT2JqZWN0LmtleXMoYS5CKSk7Zm9yKGQ9Yy5uZXh0KCk7IWQuZG9uZTtkPWMubmV4dCgpKWU9ZC52YWx1ZSxhLmkub3ZlcnJpZGVGaWxlKGUsYS5CW2VdKTthLkI9e307aWYoYS5nLmxpc3RlbmVycylmb3IoZz1DKGEuZy5saXN0ZW5lcnMpLGY9Zy5uZXh0KCk7IWYuZG9uZTtmPWcubmV4dCgpKWs9Zi52YWx1ZSxtYyhhLGspO2g9YS5qO2Euaj17fTthLnNldE9wdGlvbnMoaCk7bC5nPTB9KX1cbngucmVzZXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBIKGZ1bmN0aW9uKGIpe2EuaSYmKGEuaS5yZXNldCgpLGEubT17fSxhLnM9e30pO2IuZz0wfSl9O1xueC5zZXRPcHRpb25zPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztpZihiPWJ8fHRoaXMuZy5vcHRpb25zKXtmb3IodmFyIGQ9W10sZT1bXSxnPXt9LGY9QyhPYmplY3Qua2V5cyhhKSksaz1mLm5leHQoKTshay5kb25lO2c9e0s6Zy5LLEw6Zy5MfSxrPWYubmV4dCgpKXt2YXIgaD1rLnZhbHVlO2ggaW4gdGhpcy5qJiZ0aGlzLmpbaF09PT1hW2hdfHwodGhpcy5qW2hdPWFbaF0saz1iW2hdLHZvaWQgMCE9PWsmJihrLm9uQ2hhbmdlJiYoZy5LPWsub25DaGFuZ2UsZy5MPWFbaF0sZC5wdXNoKGZ1bmN0aW9uKGwpe3JldHVybiBmdW5jdGlvbigpe3ZhciBuO3JldHVybiBIKGZ1bmN0aW9uKHIpe2lmKDE9PXIuZylyZXR1cm4gRihyLGwuSyhsLkwpLDIpO249ci5oOyEwPT09biYmKGMubz0hMCk7ci5nPTB9KX19KGcpKSksay5ncmFwaE9wdGlvblhyZWYmJihoPXt2YWx1ZU51bWJlcjoxPT09ay50eXBlP2FbaF06MCx2YWx1ZUJvb2xlYW46MD09PWsudHlwZT9hW2hdOiExLHZhbHVlU3RyaW5nOjI9PT1cbmsudHlwZT9hW2hdOlwiXCJ9LGs9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30se2NhbGN1bGF0b3JOYW1lOlwiXCIsY2FsY3VsYXRvckluZGV4OjB9KSxrLmdyYXBoT3B0aW9uWHJlZiksaCksZS5wdXNoKGspKSkpfWlmKDAhPT1kLmxlbmd0aHx8MCE9PWUubGVuZ3RoKXRoaXMubz0hMCx0aGlzLkE9KHZvaWQgMD09PXRoaXMuQT9bXTp0aGlzLkEpLmNvbmNhdChlKSx0aGlzLnY9KHZvaWQgMD09PXRoaXMudj9bXTp0aGlzLnYpLmNvbmNhdChkKX19O1xuZnVuY3Rpb24gbmMoYSl7dmFyIGIsYyxkLGUsZyxmLGs7cmV0dXJuIEgoZnVuY3Rpb24oaCl7c3dpdGNoKGguZyl7Y2FzZSAxOmlmKCFhLm8pcmV0dXJuIGgucmV0dXJuKCk7aWYoIWEudil7aC5nPTI7YnJlYWt9Yj1DKGEudik7Yz1iLm5leHQoKTtjYXNlIDM6aWYoYy5kb25lKXtoLmc9NTticmVha31kPWMudmFsdWU7cmV0dXJuIEYoaCxkKCksNCk7Y2FzZSA0OmM9Yi5uZXh0KCk7aC5nPTM7YnJlYWs7Y2FzZSA1OmEudj12b2lkIDA7Y2FzZSAyOmlmKGEuQSl7ZT1uZXcgYS5oLkdyYXBoT3B0aW9uQ2hhbmdlUmVxdWVzdExpc3Q7Zz1DKGEuQSk7Zm9yKGY9Zy5uZXh0KCk7IWYuZG9uZTtmPWcubmV4dCgpKWs9Zi52YWx1ZSxlLnB1c2hfYmFjayhrKTthLmkuY2hhbmdlT3B0aW9ucyhlKTtlLmRlbGV0ZSgpO2EuQT12b2lkIDB9YS5vPSExO2guZz0wfX0pfVxueC5pbml0aWFsaXplPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gSChmdW5jdGlvbihiKXtyZXR1cm4gMT09Yi5nP0YoYixqYyhhKSwyKTozIT1iLmc/RihiLGxjKGEpLDMpOkYoYixuYyhhKSwwKX0pfTtmdW5jdGlvbiBrYyhhLGIpe3ZhciBjLGQ7cmV0dXJuIEgoZnVuY3Rpb24oZSl7aWYoYiBpbiBhLkYpcmV0dXJuIGUucmV0dXJuKGEuRltiXSk7Yz1hLmxvY2F0ZUZpbGUoYixcIlwiKTtkPWZldGNoKGMpLnRoZW4oZnVuY3Rpb24oZyl7cmV0dXJuIGcuYXJyYXlCdWZmZXIoKX0pO2EuRltiXT1kO3JldHVybiBlLnJldHVybihkKX0pfXgub3ZlcnJpZGVGaWxlPWZ1bmN0aW9uKGEsYil7dGhpcy5pP3RoaXMuaS5vdmVycmlkZUZpbGUoYSxiKTp0aGlzLkJbYV09Yn07eC5jbGVhck92ZXJyaWRkZW5GaWxlcz1mdW5jdGlvbigpe3RoaXMuQj17fTt0aGlzLmkmJnRoaXMuaS5jbGVhck92ZXJyaWRkZW5GaWxlcygpfTtcbnguc2VuZD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMsZCxlLGcsZixrLGgsbCxuLHI7cmV0dXJuIEgoZnVuY3Rpb24ocCl7c3dpdGNoKHAuZyl7Y2FzZSAxOmlmKCFjLmcuaW5wdXRzKXJldHVybiBwLnJldHVybigpO2Q9MUUzKih2b2lkIDA9PT1ifHxudWxsPT09Yj9wZXJmb3JtYW5jZS5ub3coKTpiKTtyZXR1cm4gRihwLGMuQywyKTtjYXNlIDI6cmV0dXJuIEYocCxjLmluaXRpYWxpemUoKSwzKTtjYXNlIDM6ZT1uZXcgYy5oLlBhY2tldERhdGFMaXN0O2c9QyhPYmplY3Qua2V5cyhhKSk7Zm9yKGY9Zy5uZXh0KCk7IWYuZG9uZTtmPWcubmV4dCgpKWlmKGs9Zi52YWx1ZSxoPWMuZy5pbnB1dHNba10pe2E6e3ZhciBtPWFba107c3dpdGNoKGgudHlwZSl7Y2FzZSBcInZpZGVvXCI6dmFyIHE9Yy5tW2guc3RyZWFtXTtxfHwocT1uZXcgJGIoYy5oLGMuRCksYy5tW2guc3RyZWFtXT1xKTswPT09cS5sJiYocS5sPXEuaC5jcmVhdGVUZXh0dXJlKCkpO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgSFRNTFZpZGVvRWxlbWVudCYmXG5tIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCl7dmFyIHQ9bS52aWRlb1dpZHRoO3ZhciB3PW0udmlkZW9IZWlnaHR9ZWxzZVwidW5kZWZpbmVkXCIhPT10eXBlb2YgSFRNTEltYWdlRWxlbWVudCYmbSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQ/KHQ9bS5uYXR1cmFsV2lkdGgsdz1tLm5hdHVyYWxIZWlnaHQpOih0PW0ud2lkdGgsdz1tLmhlaWdodCk7dz17Z2xOYW1lOnEubCx3aWR0aDp0LGhlaWdodDp3fTt0PXEuZzt0LmNhbnZhcy53aWR0aD13LndpZHRoO3QuY2FudmFzLmhlaWdodD13LmhlaWdodDt0LmFjdGl2ZVRleHR1cmUodC5URVhUVVJFMCk7cS5oLmJpbmRUZXh0dXJlMmQocS5sKTt0LnRleEltYWdlMkQodC5URVhUVVJFXzJELDAsdC5SR0JBLHQuUkdCQSx0LlVOU0lHTkVEX0JZVEUsbSk7cS5oLmJpbmRUZXh0dXJlMmQoMCk7cT13O2JyZWFrIGE7Y2FzZSBcImRldGVjdGlvbnNcIjpxPWMubVtoLnN0cmVhbV07cXx8KHE9bmV3IGNjKGMuaCksYy5tW2guc3RyZWFtXT1xKTtcbnEuZGF0YXx8KHEuZGF0YT1uZXcgcS5nLkRldGVjdGlvbkxpc3REYXRhKTtxLmRhdGEucmVzZXQobS5sZW5ndGgpO2Zvcih3PTA7dzxtLmxlbmd0aDsrK3cpe3Q9bVt3XTt2YXIgdj1xLmRhdGEsQT12LnNldEJvdW5kaW5nQm94LEk9dzt2YXIgRD10LlQ7dmFyIHU9bmV3IFNiO1YodSwxLEQuWSk7Vih1LDIsRC5aKTtWKHUsMyxELmhlaWdodCk7Vih1LDQsRC53aWR0aCk7Vih1LDUsRC5yb3RhdGlvbik7Vih1LDYsRC5XKTtEPXdiKHUsVWIpO0EuY2FsbCh2LEksRCk7aWYodC5PKWZvcih2PTA7djx0Lk8ubGVuZ3RoOysrdil7dT10Lk9bdl07dmFyIHo9dS52aXNpYmlsaXR5PyEwOiExO0E9cS5kYXRhO0k9QS5hZGROb3JtYWxpemVkTGFuZG1hcms7RD13O3U9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHUpLHt2aXNpYmlsaXR5Ono/dS52aXNpYmlsaXR5OjB9KTt6PW5ldyBLYjtWKHosMSx1LngpO1YoeiwyLHUueSk7Vih6LDMsdS56KTt1LnZpc2liaWxpdHkmJlYoeiw0LHUudmlzaWJpbGl0eSk7XG51PXdiKHosTWIpO0kuY2FsbChBLEQsdSl9aWYodC5NKWZvcih2PTA7djx0Lk0ubGVuZ3RoOysrdilBPXEuZGF0YSxJPUEuYWRkQ2xhc3NpZmljYXRpb24sRD13LHU9dC5NW3ZdLHo9bmV3IENiLFYoeiwyLHUuWCksdS5pbmRleCYmVih6LDEsdS5pbmRleCksdS5sYWJlbCYmVih6LDMsdS5sYWJlbCksdS5kaXNwbGF5TmFtZSYmVih6LDQsdS5kaXNwbGF5TmFtZSksdT13Yih6LEViKSxJLmNhbGwoQSxELHUpfXE9cS5kYXRhO2JyZWFrIGE7ZGVmYXVsdDpxPXt9fX1sPXE7bj1oLnN0cmVhbTtzd2l0Y2goaC50eXBlKXtjYXNlIFwidmlkZW9cIjplLnB1c2hUZXh0dXJlMmQoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGwpLHtzdHJlYW06bix0aW1lc3RhbXA6ZH0pKTticmVhaztjYXNlIFwiZGV0ZWN0aW9uc1wiOnI9bDtyLnN0cmVhbT1uO3IudGltZXN0YW1wPWQ7ZS5wdXNoRGV0ZWN0aW9uTGlzdChyKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiVW5rbm93biBpbnB1dCBjb25maWcgdHlwZTogJ1wiK1xuaC50eXBlK1wiJ1wiKTt9fWMuaS5zZW5kKGUpO3JldHVybiBGKHAsYy5DLDQpO2Nhc2UgNDplLmRlbGV0ZSgpLHAuZz0wfX0pfTtcbmZ1bmN0aW9uIG9jKGEsYixjKXt2YXIgZCxlLGcsZixrLGgsbCxuLHIscCxtLHEsdCx3O3JldHVybiBIKGZ1bmN0aW9uKHYpe3N3aXRjaCh2Lmcpe2Nhc2UgMTppZighYylyZXR1cm4gdi5yZXR1cm4oYik7ZD17fTtlPTA7Zz1DKE9iamVjdC5rZXlzKGMpKTtmb3IoZj1nLm5leHQoKTshZi5kb25lO2Y9Zy5uZXh0KCkpaz1mLnZhbHVlLGg9Y1trXSxcInN0cmluZ1wiIT09dHlwZW9mIGgmJlwidGV4dHVyZVwiPT09aC50eXBlJiZ2b2lkIDAhPT1iW2guc3RyZWFtXSYmKytlOzE8ZSYmKGEuRz0hMSk7bD1DKE9iamVjdC5rZXlzKGMpKTtmPWwubmV4dCgpO2Nhc2UgMjppZihmLmRvbmUpe3YuZz00O2JyZWFrfW49Zi52YWx1ZTtyPWNbbl07aWYoXCJzdHJpbmdcIj09PXR5cGVvZiByKXJldHVybiB0PWQsdz1uLEYodixwYyhhLG4sYltyXSksMTQpO3A9YltyLnN0cmVhbV07aWYoXCJkZXRlY3Rpb25fbGlzdFwiPT09ci50eXBlKXtpZihwKXt2YXIgQT1wLmdldFJlY3RMaXN0KCk7Zm9yKHZhciBJPXAuZ2V0TGFuZG1hcmtzTGlzdCgpLFxuRD1wLmdldENsYXNzaWZpY2F0aW9uc0xpc3QoKSx1PVtdLHo9MDt6PEEuc2l6ZSgpOysreil7dmFyIFM9eGIoQS5nZXQoeiksU2IsVmIpO1M9e1Q6e1k6VyhTLDEpLFo6VyhTLDIpLGhlaWdodDpXKFMsMyksd2lkdGg6VyhTLDQpLHJvdGF0aW9uOlcoUyw1LDApLFc6cmIoUyw2KX0sTzpaYihJLmdldCh6KSksTTpYYih4YihELmdldCh6KSxHYixKYikpfTt1LnB1c2goUyl9QT11fWVsc2UgQT1bXTtkW25dPUE7di5nPTc7YnJlYWt9aWYoXCJwcm90b19saXN0XCI9PT1yLnR5cGUpe2lmKHApe0E9QXJyYXkocC5zaXplKCkpO2ZvcihJPTA7STxwLnNpemUoKTtJKyspQVtJXT1wLmdldChJKTtwLmRlbGV0ZSgpfWVsc2UgQT1bXTtkW25dPUE7di5nPTc7YnJlYWt9aWYodm9pZCAwPT09cCl7di5nPTM7YnJlYWt9aWYoXCJmbG9hdF9saXN0XCI9PT1yLnR5cGUpe2Rbbl09cDt2Lmc9NzticmVha31pZihcInByb3RvXCI9PT1yLnR5cGUpe2Rbbl09cDt2Lmc9NzticmVha31pZihcInRleHR1cmVcIiE9PXIudHlwZSl0aHJvdyBFcnJvcihcIlVua25vd24gb3V0cHV0IGNvbmZpZyB0eXBlOiAnXCIrXG5yLnR5cGUrXCInXCIpO209YS5zW25dO218fChtPW5ldyAkYihhLmgsYS5EKSxhLnNbbl09bSk7cmV0dXJuIEYodixhYyhtLHAsYS5HKSwxMyk7Y2FzZSAxMzpxPXYuaCxkW25dPXE7Y2FzZSA3OnIudHJhbnNmb3JtJiZkW25dJiYoZFtuXT1yLnRyYW5zZm9ybShkW25dKSk7di5nPTM7YnJlYWs7Y2FzZSAxNDp0W3ddPXYuaDtjYXNlIDM6Zj1sLm5leHQoKTt2Lmc9MjticmVhaztjYXNlIDQ6cmV0dXJuIHYucmV0dXJuKGQpfX0pfWZ1bmN0aW9uIHBjKGEsYixjKXt2YXIgZDtyZXR1cm4gSChmdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT09dHlwZW9mIGN8fGMgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxjIGluc3RhbmNlb2YgYS5oLlVpbnQ4QmxvYkxpc3Q/ZS5yZXR1cm4oYyk6YyBpbnN0YW5jZW9mIGEuaC5UZXh0dXJlMmREYXRhT3V0PyhkPWEuc1tiXSxkfHwoZD1uZXcgJGIoYS5oLGEuRCksYS5zW2JdPWQpLGUucmV0dXJuKGFjKGQsYyxhLkcpKSk6ZS5yZXR1cm4odm9pZCAwKX0pfVxuZnVuY3Rpb24gbWMoYSxiKXtmb3IodmFyIGM9Yi5uYW1lfHxcIiRcIixkPVtdLmNvbmNhdChlYShiLndhbnRzKSksZT1uZXcgYS5oLlN0cmluZ0xpc3QsZz1DKGIud2FudHMpLGY9Zy5uZXh0KCk7IWYuZG9uZTtmPWcubmV4dCgpKWUucHVzaF9iYWNrKGYudmFsdWUpO2c9YS5oLlBhY2tldExpc3RlbmVyLmltcGxlbWVudCh7b25SZXN1bHRzOmZ1bmN0aW9uKGspe2Zvcih2YXIgaD17fSxsPTA7bDxiLndhbnRzLmxlbmd0aDsrK2wpaFtkW2xdXT1rLmdldChsKTt2YXIgbj1hLmxpc3RlbmVyc1tjXTtuJiYoYS5DPW9jKGEsaCxiLm91dHMpLnRoZW4oZnVuY3Rpb24ocil7cj1uKHIpO2Zvcih2YXIgcD0wO3A8Yi53YW50cy5sZW5ndGg7KytwKXt2YXIgbT1oW2RbcF1dO1wib2JqZWN0XCI9PT10eXBlb2YgbSYmbS5oYXNPd25Qcm9wZXJ0eSYmbS5oYXNPd25Qcm9wZXJ0eShcImRlbGV0ZVwiKSYmbS5kZWxldGUoKX1yJiYoYS5DPXIpfSkpfX0pO2EuaS5hdHRhY2hNdWx0aUxpc3RlbmVyKGUsZyk7ZS5kZWxldGUoKX1cbngub25SZXN1bHRzPWZ1bmN0aW9uKGEsYil7dGhpcy5saXN0ZW5lcnNbYnx8XCIkXCJdPWF9O0ooXCJTb2x1dGlvblwiLGljKTtKKFwiT3B0aW9uVHlwZVwiLHtCT09MOjAsTlVNQkVSOjEsJDoyLDA6XCJCT09MXCIsMTpcIk5VTUJFUlwiLDI6XCJTVFJJTkdcIn0pO2Z1bmN0aW9uIHFjKGEpe3ZvaWQgMD09PWEmJihhPTApO3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuXCJwb3NlX2xhbmRtYXJrX2Z1bGwudGZsaXRlXCI7Y2FzZSAyOnJldHVyblwicG9zZV9sYW5kbWFya19oZWF2eS50ZmxpdGVcIjtkZWZhdWx0OnJldHVyblwicG9zZV9sYW5kbWFya19saXRlLnRmbGl0ZVwifX1cbmZ1bmN0aW9uIHJjKGEpe3ZhciBiPXRoaXM7YT1hfHx7fTt0aGlzLmc9bmV3IGljKHtsb2NhdGVGaWxlOmEubG9jYXRlRmlsZSxmaWxlczpmdW5jdGlvbihjKXtyZXR1cm5be3VybDpcInBvc2Vfc29sdXRpb25fcGFja2VkX2Fzc2V0c19sb2FkZXIuanNcIn0se3NpbWQ6ITEsdXJsOlwicG9zZV9zb2x1dGlvbl93YXNtX2Jpbi5qc1wifSx7c2ltZDohMCx1cmw6XCJwb3NlX3NvbHV0aW9uX3NpbWRfd2FzbV9iaW4uanNcIn0se2RhdGE6ITAsdXJsOnFjKGMubW9kZWxDb21wbGV4aXR5KX1dfSxncmFwaDp7dXJsOlwicG9zZV93ZWIuYmluYXJ5cGJcIn0sbGlzdGVuZXJzOlt7d2FudHM6W1wicG9zZV9sYW5kbWFya3NcIixcIndvcmxkX2xhbmRtYXJrc1wiLFwic2VnbWVudGF0aW9uX21hc2tcIixcImltYWdlX3RyYW5zZm9ybWVkXCJdLG91dHM6e2ltYWdlOnt0eXBlOlwidGV4dHVyZVwiLHN0cmVhbTpcImltYWdlX3RyYW5zZm9ybWVkXCJ9LHBvc2VMYW5kbWFya3M6e3R5cGU6XCJwcm90b1wiLHN0cmVhbTpcInBvc2VfbGFuZG1hcmtzXCIsXG50cmFuc2Zvcm06WmJ9LHBvc2VXb3JsZExhbmRtYXJrczp7dHlwZTpcInByb3RvXCIsc3RyZWFtOlwid29ybGRfbGFuZG1hcmtzXCIsdHJhbnNmb3JtOlpifSxzZWdtZW50YXRpb25NYXNrOnt0eXBlOlwidGV4dHVyZVwiLHN0cmVhbTpcInNlZ21lbnRhdGlvbl9tYXNrXCJ9fX1dLGlucHV0czp7aW1hZ2U6e3R5cGU6XCJ2aWRlb1wiLHN0cmVhbTpcImlucHV0X2ZyYW1lc19ncHVcIn19LG9wdGlvbnM6e3VzZUNwdUluZmVyZW5jZTp7dHlwZTowLGdyYXBoT3B0aW9uWHJlZjp7Y2FsY3VsYXRvclR5cGU6XCJJbmZlcmVuY2VDYWxjdWxhdG9yXCIsZmllbGROYW1lOlwidXNlX2NwdV9pbmZlcmVuY2VcIn0sZGVmYXVsdDpcImlQYWQgU2ltdWxhdG9yO2lQaG9uZSBTaW11bGF0b3I7aVBvZCBTaW11bGF0b3I7aVBhZDtpUGhvbmU7aVBvZFwiLnNwbGl0KFwiO1wiKS5pbmNsdWRlcyhuYXZpZ2F0b3IucGxhdGZvcm0pfHxuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKFwiTWFjXCIpJiZcIm9udG91Y2hlbmRcImluIGRvY3VtZW50fSxcbnNlbGZpZU1vZGU6e3R5cGU6MCxncmFwaE9wdGlvblhyZWY6e2NhbGN1bGF0b3JUeXBlOlwiR2xTY2FsZXJDYWxjdWxhdG9yXCIsY2FsY3VsYXRvckluZGV4OjEsZmllbGROYW1lOlwiZmxpcF9ob3Jpem9udGFsXCJ9fSxtb2RlbENvbXBsZXhpdHk6e3R5cGU6MSxncmFwaE9wdGlvblhyZWY6e2NhbGN1bGF0b3JUeXBlOlwiQ29uc3RhbnRTaWRlUGFja2V0Q2FsY3VsYXRvclwiLGNhbGN1bGF0b3JOYW1lOlwiQ29uc3RhbnRTaWRlUGFja2V0Q2FsY3VsYXRvck1vZGVsQ29tcGxleGl0eVwiLGZpZWxkTmFtZTpcImludF92YWx1ZVwifSxvbkNoYW5nZTpmdW5jdGlvbihjKXt2YXIgZCxlLGc7cmV0dXJuIEgoZnVuY3Rpb24oZil7aWYoMT09Zi5nKXJldHVybiBkPXFjKGMpLGU9XCJ0aGlyZF9wYXJ0eS9tZWRpYXBpcGUvbW9kdWxlcy9wb3NlX2xhbmRtYXJrL1wiK2QsRihmLGtjKGIuZyxkKSwyKTtnPWYuaDtiLmcub3ZlcnJpZGVGaWxlKGUsZyk7cmV0dXJuIGYucmV0dXJuKCEwKX0pfX0sc21vb3RoTGFuZG1hcmtzOnt0eXBlOjAsXG5ncmFwaE9wdGlvblhyZWY6e2NhbGN1bGF0b3JUeXBlOlwiQ29uc3RhbnRTaWRlUGFja2V0Q2FsY3VsYXRvclwiLGNhbGN1bGF0b3JOYW1lOlwiQ29uc3RhbnRTaWRlUGFja2V0Q2FsY3VsYXRvclNtb290aExhbmRtYXJrc1wiLGZpZWxkTmFtZTpcImJvb2xfdmFsdWVcIn19LGVuYWJsZVNlZ21lbnRhdGlvbjp7dHlwZTowLGdyYXBoT3B0aW9uWHJlZjp7Y2FsY3VsYXRvclR5cGU6XCJDb25zdGFudFNpZGVQYWNrZXRDYWxjdWxhdG9yXCIsY2FsY3VsYXRvck5hbWU6XCJDb25zdGFudFNpZGVQYWNrZXRDYWxjdWxhdG9yRW5hYmxlU2VnbWVudGF0aW9uXCIsZmllbGROYW1lOlwiYm9vbF92YWx1ZVwifX0sc21vb3RoU2VnbWVudGF0aW9uOnt0eXBlOjAsZ3JhcGhPcHRpb25YcmVmOntjYWxjdWxhdG9yVHlwZTpcIkNvbnN0YW50U2lkZVBhY2tldENhbGN1bGF0b3JcIixjYWxjdWxhdG9yTmFtZTpcIkNvbnN0YW50U2lkZVBhY2tldENhbGN1bGF0b3JTbW9vdGhTZWdtZW50YXRpb25cIixmaWVsZE5hbWU6XCJib29sX3ZhbHVlXCJ9fSxcbm1pbkRldGVjdGlvbkNvbmZpZGVuY2U6e3R5cGU6MSxncmFwaE9wdGlvblhyZWY6e2NhbGN1bGF0b3JUeXBlOlwiVGVuc29yc1RvRGV0ZWN0aW9uc0NhbGN1bGF0b3JcIixjYWxjdWxhdG9yTmFtZTpcInBvc2VsYW5kbWFya2dwdV9fcG9zZWRldGVjdGlvbmdwdV9fVGVuc29yc1RvRGV0ZWN0aW9uc0NhbGN1bGF0b3JcIixmaWVsZE5hbWU6XCJtaW5fc2NvcmVfdGhyZXNoXCJ9fSxtaW5UcmFja2luZ0NvbmZpZGVuY2U6e3R5cGU6MSxncmFwaE9wdGlvblhyZWY6e2NhbGN1bGF0b3JUeXBlOlwiVGhyZXNob2xkaW5nQ2FsY3VsYXRvclwiLGNhbGN1bGF0b3JOYW1lOlwicG9zZWxhbmRtYXJrZ3B1X19wb3NlbGFuZG1hcmtieXJvaWdwdV9fdGVuc29yc3RvcG9zZWxhbmRtYXJrc2FuZHNlZ21lbnRhdGlvbl9fVGhyZXNob2xkaW5nQ2FsY3VsYXRvclwiLGZpZWxkTmFtZTpcInRocmVzaG9sZFwifX19fSl9eD1yYy5wcm90b3R5cGU7eC5yZXNldD1mdW5jdGlvbigpe3RoaXMuZy5yZXNldCgpfTtcbnguY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLmcuY2xvc2UoKTtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCl9O3gub25SZXN1bHRzPWZ1bmN0aW9uKGEpe3RoaXMuZy5vblJlc3VsdHMoYSl9O3guaW5pdGlhbGl6ZT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIEgoZnVuY3Rpb24oYil7cmV0dXJuIEYoYixhLmcuaW5pdGlhbGl6ZSgpLDApfSl9O3guc2VuZD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIEgoZnVuY3Rpb24oZCl7cmV0dXJuIEYoZCxjLmcuc2VuZChhLGIpLDApfSl9O3guc2V0T3B0aW9ucz1mdW5jdGlvbihhKXt0aGlzLmcuc2V0T3B0aW9ucyhhKX07SihcIlBvc2VcIixyYyk7XG5KKFwiUE9TRV9DT05ORUNUSU9OU1wiLFtbMCwxXSxbMSwyXSxbMiwzXSxbMyw3XSxbMCw0XSxbNCw1XSxbNSw2XSxbNiw4XSxbOSwxMF0sWzExLDEyXSxbMTEsMTNdLFsxMywxNV0sWzE1LDE3XSxbMTUsMTldLFsxNSwyMV0sWzE3LDE5XSxbMTIsMTRdLFsxNCwxNl0sWzE2LDE4XSxbMTYsMjBdLFsxNiwyMl0sWzE4LDIwXSxbMTEsMjNdLFsxMiwyNF0sWzIzLDI0XSxbMjMsMjVdLFsyNCwyNl0sWzI1LDI3XSxbMjYsMjhdLFsyNywyOV0sWzI4LDMwXSxbMjksMzFdLFszMCwzMl0sWzI3LDMxXSxbMjgsMzJdXSk7XG5KKFwiUE9TRV9MQU5ETUFSS1NcIix7Tk9TRTowLExFRlRfRVlFX0lOTkVSOjEsTEVGVF9FWUU6MixMRUZUX0VZRV9PVVRFUjozLFJJR0hUX0VZRV9JTk5FUjo0LFJJR0hUX0VZRTo1LFJJR0hUX0VZRV9PVVRFUjo2LExFRlRfRUFSOjcsUklHSFRfRUFSOjgsTEVGVF9SSUdIVDo5LFJJR0hUX0xFRlQ6MTAsTEVGVF9TSE9VTERFUjoxMSxSSUdIVF9TSE9VTERFUjoxMixMRUZUX0VMQk9XOjEzLFJJR0hUX0VMQk9XOjE0LExFRlRfV1JJU1Q6MTUsUklHSFRfV1JJU1Q6MTYsTEVGVF9QSU5LWToxNyxSSUdIVF9QSU5LWToxOCxMRUZUX0lOREVYOjE5LFJJR0hUX0lOREVYOjIwLExFRlRfVEhVTUI6MjEsUklHSFRfVEhVTUI6MjIsTEVGVF9ISVA6MjMsUklHSFRfSElQOjI0LExFRlRfS05FRToyNSxSSUdIVF9LTkVFOjI2LExFRlRfQU5LTEU6MjcsUklHSFRfQU5LTEU6MjgsTEVGVF9IRUVMOjI5LFJJR0hUX0hFRUw6MzAsTEVGVF9GT09UX0lOREVYOjMxLFJJR0hUX0ZPT1RfSU5ERVg6MzJ9KTtcbkooXCJQT1NFX0xBTkRNQVJLU19MRUZUXCIse0xFRlRfRVlFX0lOTkVSOjEsTEVGVF9FWUU6MixMRUZUX0VZRV9PVVRFUjozLExFRlRfRUFSOjcsTEVGVF9SSUdIVDo5LExFRlRfU0hPVUxERVI6MTEsTEVGVF9FTEJPVzoxMyxMRUZUX1dSSVNUOjE1LExFRlRfUElOS1k6MTcsTEVGVF9JTkRFWDoxOSxMRUZUX1RIVU1COjIxLExFRlRfSElQOjIzLExFRlRfS05FRToyNSxMRUZUX0FOS0xFOjI3LExFRlRfSEVFTDoyOSxMRUZUX0ZPT1RfSU5ERVg6MzF9KTtcbkooXCJQT1NFX0xBTkRNQVJLU19SSUdIVFwiLHtSSUdIVF9FWUVfSU5ORVI6NCxSSUdIVF9FWUU6NSxSSUdIVF9FWUVfT1VURVI6NixSSUdIVF9FQVI6OCxSSUdIVF9MRUZUOjEwLFJJR0hUX1NIT1VMREVSOjEyLFJJR0hUX0VMQk9XOjE0LFJJR0hUX1dSSVNUOjE2LFJJR0hUX1BJTktZOjE4LFJJR0hUX0lOREVYOjIwLFJJR0hUX1RIVU1COjIyLFJJR0hUX0hJUDoyNCxSSUdIVF9LTkVFOjI2LFJJR0hUX0FOS0xFOjI4LFJJR0hUX0hFRUw6MzAsUklHSFRfRk9PVF9JTkRFWDozMn0pO0ooXCJQT1NFX0xBTkRNQVJLU19ORVVUUkFMXCIse05PU0U6MH0pO0ooXCJWRVJTSU9OXCIsXCIwLjUuMTYzNTk4ODE2MlwiKTt9KS5jYWxsKHRoaXMpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTAtMjAyMiBUaHJlZS5qcyBBdXRob3JzXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4gKi9cbmNvbnN0IFJFVklTSU9OID0gJzEzOSc7XG5jb25zdCBNT1VTRSA9IHsgTEVGVDogMCwgTUlERExFOiAxLCBSSUdIVDogMiwgUk9UQVRFOiAwLCBET0xMWTogMSwgUEFOOiAyIH07XG5jb25zdCBUT1VDSCA9IHsgUk9UQVRFOiAwLCBQQU46IDEsIERPTExZX1BBTjogMiwgRE9MTFlfUk9UQVRFOiAzIH07XG5jb25zdCBDdWxsRmFjZU5vbmUgPSAwO1xuY29uc3QgQ3VsbEZhY2VCYWNrID0gMTtcbmNvbnN0IEN1bGxGYWNlRnJvbnQgPSAyO1xuY29uc3QgQ3VsbEZhY2VGcm9udEJhY2sgPSAzO1xuY29uc3QgQmFzaWNTaGFkb3dNYXAgPSAwO1xuY29uc3QgUENGU2hhZG93TWFwID0gMTtcbmNvbnN0IFBDRlNvZnRTaGFkb3dNYXAgPSAyO1xuY29uc3QgVlNNU2hhZG93TWFwID0gMztcbmNvbnN0IEZyb250U2lkZSA9IDA7XG5jb25zdCBCYWNrU2lkZSA9IDE7XG5jb25zdCBEb3VibGVTaWRlID0gMjtcbmNvbnN0IEZsYXRTaGFkaW5nID0gMTtcbmNvbnN0IFNtb290aFNoYWRpbmcgPSAyO1xuY29uc3QgTm9CbGVuZGluZyA9IDA7XG5jb25zdCBOb3JtYWxCbGVuZGluZyA9IDE7XG5jb25zdCBBZGRpdGl2ZUJsZW5kaW5nID0gMjtcbmNvbnN0IFN1YnRyYWN0aXZlQmxlbmRpbmcgPSAzO1xuY29uc3QgTXVsdGlwbHlCbGVuZGluZyA9IDQ7XG5jb25zdCBDdXN0b21CbGVuZGluZyA9IDU7XG5jb25zdCBBZGRFcXVhdGlvbiA9IDEwMDtcbmNvbnN0IFN1YnRyYWN0RXF1YXRpb24gPSAxMDE7XG5jb25zdCBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiA9IDEwMjtcbmNvbnN0IE1pbkVxdWF0aW9uID0gMTAzO1xuY29uc3QgTWF4RXF1YXRpb24gPSAxMDQ7XG5jb25zdCBaZXJvRmFjdG9yID0gMjAwO1xuY29uc3QgT25lRmFjdG9yID0gMjAxO1xuY29uc3QgU3JjQ29sb3JGYWN0b3IgPSAyMDI7XG5jb25zdCBPbmVNaW51c1NyY0NvbG9yRmFjdG9yID0gMjAzO1xuY29uc3QgU3JjQWxwaGFGYWN0b3IgPSAyMDQ7XG5jb25zdCBPbmVNaW51c1NyY0FscGhhRmFjdG9yID0gMjA1O1xuY29uc3QgRHN0QWxwaGFGYWN0b3IgPSAyMDY7XG5jb25zdCBPbmVNaW51c0RzdEFscGhhRmFjdG9yID0gMjA3O1xuY29uc3QgRHN0Q29sb3JGYWN0b3IgPSAyMDg7XG5jb25zdCBPbmVNaW51c0RzdENvbG9yRmFjdG9yID0gMjA5O1xuY29uc3QgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciA9IDIxMDtcbmNvbnN0IE5ldmVyRGVwdGggPSAwO1xuY29uc3QgQWx3YXlzRGVwdGggPSAxO1xuY29uc3QgTGVzc0RlcHRoID0gMjtcbmNvbnN0IExlc3NFcXVhbERlcHRoID0gMztcbmNvbnN0IEVxdWFsRGVwdGggPSA0O1xuY29uc3QgR3JlYXRlckVxdWFsRGVwdGggPSA1O1xuY29uc3QgR3JlYXRlckRlcHRoID0gNjtcbmNvbnN0IE5vdEVxdWFsRGVwdGggPSA3O1xuY29uc3QgTXVsdGlwbHlPcGVyYXRpb24gPSAwO1xuY29uc3QgTWl4T3BlcmF0aW9uID0gMTtcbmNvbnN0IEFkZE9wZXJhdGlvbiA9IDI7XG5jb25zdCBOb1RvbmVNYXBwaW5nID0gMDtcbmNvbnN0IExpbmVhclRvbmVNYXBwaW5nID0gMTtcbmNvbnN0IFJlaW5oYXJkVG9uZU1hcHBpbmcgPSAyO1xuY29uc3QgQ2luZW9uVG9uZU1hcHBpbmcgPSAzO1xuY29uc3QgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nID0gNDtcbmNvbnN0IEN1c3RvbVRvbmVNYXBwaW5nID0gNTtcblxuY29uc3QgVVZNYXBwaW5nID0gMzAwO1xuY29uc3QgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nID0gMzAxO1xuY29uc3QgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nID0gMzAyO1xuY29uc3QgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDM7XG5jb25zdCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyA9IDMwNDtcbmNvbnN0IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nID0gMzA2O1xuY29uc3QgUmVwZWF0V3JhcHBpbmcgPSAxMDAwO1xuY29uc3QgQ2xhbXBUb0VkZ2VXcmFwcGluZyA9IDEwMDE7XG5jb25zdCBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nID0gMTAwMjtcbmNvbnN0IE5lYXJlc3RGaWx0ZXIgPSAxMDAzO1xuY29uc3QgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0O1xuY29uc3QgTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0O1xuY29uc3QgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciA9IDEwMDU7XG5jb25zdCBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbmNvbnN0IExpbmVhckZpbHRlciA9IDEwMDY7XG5jb25zdCBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyID0gMTAwNztcbmNvbnN0IExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xuY29uc3QgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyID0gMTAwODtcbmNvbnN0IExpbmVhck1pcE1hcExpbmVhckZpbHRlciA9IDEwMDg7XG5jb25zdCBVbnNpZ25lZEJ5dGVUeXBlID0gMTAwOTtcbmNvbnN0IEJ5dGVUeXBlID0gMTAxMDtcbmNvbnN0IFNob3J0VHlwZSA9IDEwMTE7XG5jb25zdCBVbnNpZ25lZFNob3J0VHlwZSA9IDEwMTI7XG5jb25zdCBJbnRUeXBlID0gMTAxMztcbmNvbnN0IFVuc2lnbmVkSW50VHlwZSA9IDEwMTQ7XG5jb25zdCBGbG9hdFR5cGUgPSAxMDE1O1xuY29uc3QgSGFsZkZsb2F0VHlwZSA9IDEwMTY7XG5jb25zdCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgPSAxMDE3O1xuY29uc3QgVW5zaWduZWRTaG9ydDU1NTFUeXBlID0gMTAxODtcbmNvbnN0IFVuc2lnbmVkSW50MjQ4VHlwZSA9IDEwMjA7XG5jb25zdCBBbHBoYUZvcm1hdCA9IDEwMjE7XG5jb25zdCBSR0JGb3JtYXQgPSAxMDIyO1xuY29uc3QgUkdCQUZvcm1hdCA9IDEwMjM7XG5jb25zdCBMdW1pbmFuY2VGb3JtYXQgPSAxMDI0O1xuY29uc3QgTHVtaW5hbmNlQWxwaGFGb3JtYXQgPSAxMDI1O1xuY29uc3QgRGVwdGhGb3JtYXQgPSAxMDI2O1xuY29uc3QgRGVwdGhTdGVuY2lsRm9ybWF0ID0gMTAyNztcbmNvbnN0IFJlZEZvcm1hdCA9IDEwMjg7XG5jb25zdCBSZWRJbnRlZ2VyRm9ybWF0ID0gMTAyOTtcbmNvbnN0IFJHRm9ybWF0ID0gMTAzMDtcbmNvbnN0IFJHSW50ZWdlckZvcm1hdCA9IDEwMzE7XG5jb25zdCBSR0JBSW50ZWdlckZvcm1hdCA9IDEwMzM7XG5cbmNvbnN0IFJHQl9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3NzY7XG5jb25zdCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NztcbmNvbnN0IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCA9IDMzNzc4O1xuY29uc3QgUkdCQV9TM1RDX0RYVDVfRm9ybWF0ID0gMzM3Nzk7XG5jb25zdCBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQwO1xuY29uc3QgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MTtcbmNvbnN0IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQyO1xuY29uc3QgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDM7XG5jb25zdCBSR0JfRVRDMV9Gb3JtYXQgPSAzNjE5NjtcbmNvbnN0IFJHQl9FVEMyX0Zvcm1hdCA9IDM3NDkyO1xuY29uc3QgUkdCQV9FVEMyX0VBQ19Gb3JtYXQgPSAzNzQ5NjtcbmNvbnN0IFJHQkFfQVNUQ180eDRfRm9ybWF0ID0gMzc4MDg7XG5jb25zdCBSR0JBX0FTVENfNXg0X0Zvcm1hdCA9IDM3ODA5O1xuY29uc3QgUkdCQV9BU1RDXzV4NV9Gb3JtYXQgPSAzNzgxMDtcbmNvbnN0IFJHQkFfQVNUQ182eDVfRm9ybWF0ID0gMzc4MTE7XG5jb25zdCBSR0JBX0FTVENfNng2X0Zvcm1hdCA9IDM3ODEyO1xuY29uc3QgUkdCQV9BU1RDXzh4NV9Gb3JtYXQgPSAzNzgxMztcbmNvbnN0IFJHQkFfQVNUQ184eDZfRm9ybWF0ID0gMzc4MTQ7XG5jb25zdCBSR0JBX0FTVENfOHg4X0Zvcm1hdCA9IDM3ODE1O1xuY29uc3QgUkdCQV9BU1RDXzEweDVfRm9ybWF0ID0gMzc4MTY7XG5jb25zdCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgPSAzNzgxNztcbmNvbnN0IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCA9IDM3ODE4O1xuY29uc3QgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCA9IDM3ODE5O1xuY29uc3QgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCA9IDM3ODIwO1xuY29uc3QgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCA9IDM3ODIxO1xuY29uc3QgUkdCQV9CUFRDX0Zvcm1hdCA9IDM2NDkyO1xuY29uc3QgTG9vcE9uY2UgPSAyMjAwO1xuY29uc3QgTG9vcFJlcGVhdCA9IDIyMDE7XG5jb25zdCBMb29wUGluZ1BvbmcgPSAyMjAyO1xuY29uc3QgSW50ZXJwb2xhdGVEaXNjcmV0ZSA9IDIzMDA7XG5jb25zdCBJbnRlcnBvbGF0ZUxpbmVhciA9IDIzMDE7XG5jb25zdCBJbnRlcnBvbGF0ZVNtb290aCA9IDIzMDI7XG5jb25zdCBaZXJvQ3VydmF0dXJlRW5kaW5nID0gMjQwMDtcbmNvbnN0IFplcm9TbG9wZUVuZGluZyA9IDI0MDE7XG5jb25zdCBXcmFwQXJvdW5kRW5kaW5nID0gMjQwMjtcbmNvbnN0IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSA9IDI1MDA7XG5jb25zdCBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZSA9IDI1MDE7XG5jb25zdCBUcmlhbmdsZXNEcmF3TW9kZSA9IDA7XG5jb25zdCBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxO1xuY29uc3QgVHJpYW5nbGVGYW5EcmF3TW9kZSA9IDI7XG5jb25zdCBMaW5lYXJFbmNvZGluZyA9IDMwMDA7XG5jb25zdCBzUkdCRW5jb2RpbmcgPSAzMDAxO1xuY29uc3QgQmFzaWNEZXB0aFBhY2tpbmcgPSAzMjAwO1xuY29uc3QgUkdCQURlcHRoUGFja2luZyA9IDMyMDE7XG5jb25zdCBUYW5nZW50U3BhY2VOb3JtYWxNYXAgPSAwO1xuY29uc3QgT2JqZWN0U3BhY2VOb3JtYWxNYXAgPSAxO1xuXG4vLyBDb2xvciBzcGFjZSBzdHJpbmcgaWRlbnRpZmllcnMsIG1hdGNoaW5nIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgNCBhbmQgV2ViR1BVIG5hbWVzIHdoZXJlIGF2YWlsYWJsZS5cbmNvbnN0IE5vQ29sb3JTcGFjZSA9ICcnO1xuY29uc3QgU1JHQkNvbG9yU3BhY2UgPSAnc3JnYic7XG5jb25zdCBMaW5lYXJTUkdCQ29sb3JTcGFjZSA9ICdzcmdiLWxpbmVhcic7XG5cbmNvbnN0IFplcm9TdGVuY2lsT3AgPSAwO1xuY29uc3QgS2VlcFN0ZW5jaWxPcCA9IDc2ODA7XG5jb25zdCBSZXBsYWNlU3RlbmNpbE9wID0gNzY4MTtcbmNvbnN0IEluY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODI7XG5jb25zdCBEZWNyZW1lbnRTdGVuY2lsT3AgPSA3NjgzO1xuY29uc3QgSW5jcmVtZW50V3JhcFN0ZW5jaWxPcCA9IDM0MDU1O1xuY29uc3QgRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCA9IDM0MDU2O1xuY29uc3QgSW52ZXJ0U3RlbmNpbE9wID0gNTM4NjtcblxuY29uc3QgTmV2ZXJTdGVuY2lsRnVuYyA9IDUxMjtcbmNvbnN0IExlc3NTdGVuY2lsRnVuYyA9IDUxMztcbmNvbnN0IEVxdWFsU3RlbmNpbEZ1bmMgPSA1MTQ7XG5jb25zdCBMZXNzRXF1YWxTdGVuY2lsRnVuYyA9IDUxNTtcbmNvbnN0IEdyZWF0ZXJTdGVuY2lsRnVuYyA9IDUxNjtcbmNvbnN0IE5vdEVxdWFsU3RlbmNpbEZ1bmMgPSA1MTc7XG5jb25zdCBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYyA9IDUxODtcbmNvbnN0IEFsd2F5c1N0ZW5jaWxGdW5jID0gNTE5O1xuXG5jb25zdCBTdGF0aWNEcmF3VXNhZ2UgPSAzNTA0NDtcbmNvbnN0IER5bmFtaWNEcmF3VXNhZ2UgPSAzNTA0ODtcbmNvbnN0IFN0cmVhbURyYXdVc2FnZSA9IDM1MDQwO1xuY29uc3QgU3RhdGljUmVhZFVzYWdlID0gMzUwNDU7XG5jb25zdCBEeW5hbWljUmVhZFVzYWdlID0gMzUwNDk7XG5jb25zdCBTdHJlYW1SZWFkVXNhZ2UgPSAzNTA0MTtcbmNvbnN0IFN0YXRpY0NvcHlVc2FnZSA9IDM1MDQ2O1xuY29uc3QgRHluYW1pY0NvcHlVc2FnZSA9IDM1MDUwO1xuY29uc3QgU3RyZWFtQ29weVVzYWdlID0gMzUwNDI7XG5cbmNvbnN0IEdMU0wxID0gJzEwMCc7XG5jb25zdCBHTFNMMyA9ICczMDAgZXMnO1xuXG5jb25zdCBfU1JHQkFGb3JtYXQgPSAxMDM1OyAvLyBmYWxsYmFjayBmb3IgV2ViR0wgMVxuXG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvZXZlbnRkaXNwYXRjaGVyLmpzL1xuICovXG5cbmNsYXNzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0YWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgdGhpcy5fbGlzdGVuZXJzID0ge307XG5cblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxpc3RlbmVyc1sgdHlwZSBdID0gW107XG5cblx0XHR9XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgPT09IC0gMSApIHtcblxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0ucHVzaCggbGlzdGVuZXIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0aGFzRXZlbnRMaXN0ZW5lciggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXG5cdFx0cmV0dXJuIGxpc3RlbmVyc1sgdHlwZSBdICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSAhPT0gLSAxO1xuXG5cdH1cblxuXHRyZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cdFx0Y29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGluZGV4ID0gbGlzdGVuZXJBcnJheS5pbmRleE9mKCBsaXN0ZW5lciApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0bGlzdGVuZXJBcnJheS5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZGlzcGF0Y2hFdmVudCggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXHRcdGNvbnN0IGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lcnNbIGV2ZW50LnR5cGUgXTtcblxuXHRcdGlmICggbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRldmVudC50YXJnZXQgPSB0aGlzO1xuXG5cdFx0XHQvLyBNYWtlIGEgY29weSwgaW4gY2FzZSBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgd2hpbGUgaXRlcmF0aW5nLlxuXHRcdFx0Y29uc3QgYXJyYXkgPSBsaXN0ZW5lckFycmF5LnNsaWNlKCAwICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXlbIGkgXS5jYWxsKCB0aGlzLCBldmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGV2ZW50LnRhcmdldCA9IG51bGw7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmNvbnN0IF9sdXQgPSBbXTtcblxuZm9yICggbGV0IGkgPSAwOyBpIDwgMjU2OyBpICsrICkge1xuXG5cdF9sdXRbIGkgXSA9ICggaSA8IDE2ID8gJzAnIDogJycgKSArICggaSApLnRvU3RyaW5nKCAxNiApO1xuXG59XG5cbmxldCBfc2VlZCA9IDEyMzQ1Njc7XG5cblxuY29uc3QgREVHMlJBRCA9IE1hdGguUEkgLyAxODA7XG5jb25zdCBSQUQyREVHID0gMTgwIC8gTWF0aC5QSTtcblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxOTYzMTM2IzIxOTYzMTM2XG5mdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XG5cblx0Y29uc3QgZDAgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IGQxID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRjb25zdCBkMiA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgZDMgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IHV1aWQgPSBfbHV0WyBkMCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDggJiAweGZmIF0gKyBfbHV0WyBkMCA+PiAxNiAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDI0ICYgMHhmZiBdICsgJy0nICtcblx0XHRcdF9sdXRbIGQxICYgMHhmZiBdICsgX2x1dFsgZDEgPj4gOCAmIDB4ZmYgXSArICctJyArIF9sdXRbIGQxID4+IDE2ICYgMHgwZiB8IDB4NDAgXSArIF9sdXRbIGQxID4+IDI0ICYgMHhmZiBdICsgJy0nICtcblx0XHRcdF9sdXRbIGQyICYgMHgzZiB8IDB4ODAgXSArIF9sdXRbIGQyID4+IDggJiAweGZmIF0gKyAnLScgKyBfbHV0WyBkMiA+PiAxNiAmIDB4ZmYgXSArIF9sdXRbIGQyID4+IDI0ICYgMHhmZiBdICtcblx0XHRcdF9sdXRbIGQzICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQzID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMjQgJiAweGZmIF07XG5cblx0Ly8gLnRvTG93ZXJDYXNlKCkgaGVyZSBmbGF0dGVucyBjb25jYXRlbmF0ZWQgc3RyaW5ncyB0byBzYXZlIGhlYXAgbWVtb3J5IHNwYWNlLlxuXHRyZXR1cm4gdXVpZC50b0xvd2VyQ2FzZSgpO1xuXG59XG5cbmZ1bmN0aW9uIGNsYW1wKCB2YWx1ZSwgbWluLCBtYXggKSB7XG5cblx0cmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbHVlICkgKTtcblxufVxuXG4vLyBjb21wdXRlIGV1Y2xpZGVhbiBtb2R1bG8gb2YgbSAlIG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vZHVsb19vcGVyYXRpb25cbmZ1bmN0aW9uIGV1Y2xpZGVhbk1vZHVsbyggbiwgbSApIHtcblxuXHRyZXR1cm4gKCAoIG4gJSBtICkgKyBtICkgJSBtO1xuXG59XG5cbi8vIExpbmVhciBtYXBwaW5nIGZyb20gcmFuZ2UgPGExLCBhMj4gdG8gcmFuZ2UgPGIxLCBiMj5cbmZ1bmN0aW9uIG1hcExpbmVhciggeCwgYTEsIGEyLCBiMSwgYjIgKSB7XG5cblx0cmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7XG5cbn1cblxuLy8gaHR0cHM6Ly93d3cuZ2FtZWRldi5uZXQvdHV0b3JpYWxzL3Byb2dyYW1taW5nL2dlbmVyYWwtYW5kLWdhbWVwbGF5LXByb2dyYW1taW5nL2ludmVyc2UtbGVycC1hLXN1cGVyLXVzZWZ1bC15ZXQtb2Z0ZW4tb3Zlcmxvb2tlZC1mdW5jdGlvbi1yNTIzMC9cbmZ1bmN0aW9uIGludmVyc2VMZXJwKCB4LCB5LCB2YWx1ZSApIHtcblxuXHRpZiAoIHggIT09IHkgKSB7XG5cblx0XHRyZXR1cm4gKCB2YWx1ZSAtIHggKSAvICggeSAtIHggKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuIDA7XG5cblx0fVxuXG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpbmVhcl9pbnRlcnBvbGF0aW9uXG5mdW5jdGlvbiBsZXJwKCB4LCB5LCB0ICkge1xuXG5cdHJldHVybiAoIDEgLSB0ICkgKiB4ICsgdCAqIHk7XG5cbn1cblxuLy8gaHR0cDovL3d3dy5yb3J5ZHJpc2NvbGwuY29tLzIwMTYvMDMvMDcvZnJhbWUtcmF0ZS1pbmRlcGVuZGVudC1kYW1waW5nLXVzaW5nLWxlcnAvXG5mdW5jdGlvbiBkYW1wKCB4LCB5LCBsYW1iZGEsIGR0ICkge1xuXG5cdHJldHVybiBsZXJwKCB4LCB5LCAxIC0gTWF0aC5leHAoIC0gbGFtYmRhICogZHQgKSApO1xuXG59XG5cbi8vIGh0dHBzOi8vd3d3LmRlc21vcy5jb20vY2FsY3VsYXRvci92Y3Nqbnl6N3g0XG5mdW5jdGlvbiBwaW5ncG9uZyggeCwgbGVuZ3RoID0gMSApIHtcblxuXHRyZXR1cm4gbGVuZ3RoIC0gTWF0aC5hYnMoIGV1Y2xpZGVhbk1vZHVsbyggeCwgbGVuZ3RoICogMiApIC0gbGVuZ3RoICk7XG5cbn1cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwXG5mdW5jdGlvbiBzbW9vdGhzdGVwKCB4LCBtaW4sIG1heCApIHtcblxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XG5cdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdHJldHVybiB4ICogeCAqICggMyAtIDIgKiB4ICk7XG5cbn1cblxuZnVuY3Rpb24gc21vb3RoZXJzdGVwKCB4LCBtaW4sIG1heCApIHtcblxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XG5cdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdHJldHVybiB4ICogeCAqIHggKiAoIHggKiAoIHggKiA2IC0gMTUgKSArIDEwICk7XG5cbn1cblxuLy8gUmFuZG9tIGludGVnZXIgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuZnVuY3Rpb24gcmFuZEludCggbG93LCBoaWdoICkge1xuXG5cdHJldHVybiBsb3cgKyBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICsgMSApICk7XG5cbn1cblxuLy8gUmFuZG9tIGZsb2F0IGZyb20gPGxvdywgaGlnaD4gaW50ZXJ2YWxcbmZ1bmN0aW9uIHJhbmRGbG9hdCggbG93LCBoaWdoICkge1xuXG5cdHJldHVybiBsb3cgKyBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICk7XG5cbn1cblxuLy8gUmFuZG9tIGZsb2F0IGZyb20gPC1yYW5nZS8yLCByYW5nZS8yPiBpbnRlcnZhbFxuZnVuY3Rpb24gcmFuZEZsb2F0U3ByZWFkKCByYW5nZSApIHtcblxuXHRyZXR1cm4gcmFuZ2UgKiAoIDAuNSAtIE1hdGgucmFuZG9tKCkgKTtcblxufVxuXG4vLyBEZXRlcm1pbmlzdGljIHBzZXVkby1yYW5kb20gZmxvYXQgaW4gdGhlIGludGVydmFsIFsgMCwgMSBdXG5mdW5jdGlvbiBzZWVkZWRSYW5kb20oIHMgKSB7XG5cblx0aWYgKCBzICE9PSB1bmRlZmluZWQgKSBfc2VlZCA9IHM7XG5cblx0Ly8gTXVsYmVycnkzMiBnZW5lcmF0b3JcblxuXHRsZXQgdCA9IF9zZWVkICs9IDB4NkQyQjc5RjU7XG5cblx0dCA9IE1hdGguaW11bCggdCBeIHQgPj4+IDE1LCB0IHwgMSApO1xuXG5cdHQgXj0gdCArIE1hdGguaW11bCggdCBeIHQgPj4+IDcsIHQgfCA2MSApO1xuXG5cdHJldHVybiAoICggdCBeIHQgPj4+IDE0ICkgPj4+IDAgKSAvIDQyOTQ5NjcyOTY7XG5cbn1cblxuZnVuY3Rpb24gZGVnVG9SYWQoIGRlZ3JlZXMgKSB7XG5cblx0cmV0dXJuIGRlZ3JlZXMgKiBERUcyUkFEO1xuXG59XG5cbmZ1bmN0aW9uIHJhZFRvRGVnKCByYWRpYW5zICkge1xuXG5cdHJldHVybiByYWRpYW5zICogUkFEMkRFRztcblxufVxuXG5mdW5jdGlvbiBpc1Bvd2VyT2ZUd28oIHZhbHVlICkge1xuXG5cdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG59XG5cbmZ1bmN0aW9uIGNlaWxQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cbn1cblxuZnVuY3Rpb24gZmxvb3JQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIoIHEsIGEsIGIsIGMsIG9yZGVyICkge1xuXG5cdC8vIEludHJpbnNpYyBQcm9wZXIgRXVsZXIgQW5nbGVzIC0gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1bGVyX2FuZ2xlc1xuXG5cdC8vIHJvdGF0aW9ucyBhcmUgYXBwbGllZCB0byB0aGUgYXhlcyBpbiB0aGUgb3JkZXIgc3BlY2lmaWVkIGJ5ICdvcmRlcidcblx0Ly8gcm90YXRpb24gYnkgYW5nbGUgJ2EnIGlzIGFwcGxpZWQgZmlyc3QsIHRoZW4gYnkgYW5nbGUgJ2InLCB0aGVuIGJ5IGFuZ2xlICdjJ1xuXHQvLyBhbmdsZXMgYXJlIGluIHJhZGlhbnNcblxuXHRjb25zdCBjb3MgPSBNYXRoLmNvcztcblx0Y29uc3Qgc2luID0gTWF0aC5zaW47XG5cblx0Y29uc3QgYzIgPSBjb3MoIGIgLyAyICk7XG5cdGNvbnN0IHMyID0gc2luKCBiIC8gMiApO1xuXG5cdGNvbnN0IGMxMyA9IGNvcyggKCBhICsgYyApIC8gMiApO1xuXHRjb25zdCBzMTMgPSBzaW4oICggYSArIGMgKSAvIDIgKTtcblxuXHRjb25zdCBjMV8zID0gY29zKCAoIGEgLSBjICkgLyAyICk7XG5cdGNvbnN0IHMxXzMgPSBzaW4oICggYSAtIGMgKSAvIDIgKTtcblxuXHRjb25zdCBjM18xID0gY29zKCAoIGMgLSBhICkgLyAyICk7XG5cdGNvbnN0IHMzXzEgPSBzaW4oICggYyAtIGEgKSAvIDIgKTtcblxuXHRzd2l0Y2ggKCBvcmRlciApIHtcblxuXHRcdGNhc2UgJ1hZWCc6XG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogYzFfMywgczIgKiBzMV8zLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdZWlknOlxuXHRcdFx0cS5zZXQoIHMyICogczFfMywgYzIgKiBzMTMsIHMyICogYzFfMywgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWlhaJzpcblx0XHRcdHEuc2V0KCBzMiAqIGMxXzMsIHMyICogczFfMywgYzIgKiBzMTMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ1haWCc6XG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogczNfMSwgczIgKiBjM18xLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdZWFknOlxuXHRcdFx0cS5zZXQoIHMyICogYzNfMSwgYzIgKiBzMTMsIHMyICogczNfMSwgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWllaJzpcblx0XHRcdHEuc2V0KCBzMiAqIHMzXzEsIHMyICogYzNfMSwgYzIgKiBzMTMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRoVXRpbHM6IC5zZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyKCkgZW5jb3VudGVyZWQgYW4gdW5rbm93biBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGRlbm9ybWFsaXplJDEoIHZhbHVlLCBhcnJheSApIHtcblxuXHRzd2l0Y2ggKCBhcnJheS5jb25zdHJ1Y3RvciApIHtcblxuXHRcdGNhc2UgRmxvYXQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cblx0XHRjYXNlIFVpbnQxNkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgLyA2NTUzNS4wO1xuXG5cdFx0Y2FzZSBVaW50OEFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgLyAyNTUuMDtcblxuXHRcdGNhc2UgSW50MTZBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgubWF4KCB2YWx1ZSAvIDMyNzY3LjAsIC0gMS4wICk7XG5cblx0XHRjYXNlIEludDhBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgubWF4KCB2YWx1ZSAvIDEyNy4wLCAtIDEuMCApO1xuXG5cdFx0ZGVmYXVsdDpcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnSW52YWxpZCBjb21wb25lbnQgdHlwZS4nICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZSggdmFsdWUsIGFycmF5ICkge1xuXG5cdHN3aXRjaCAoIGFycmF5LmNvbnN0cnVjdG9yICkge1xuXG5cdFx0Y2FzZSBGbG9hdDMyQXJyYXk6XG5cblx0XHRcdHJldHVybiB2YWx1ZTtcblxuXHRcdGNhc2UgVWludDE2QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDY1NTM1LjAgKTtcblxuXHRcdGNhc2UgVWludDhBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMjU1LjAgKTtcblxuXHRcdGNhc2UgSW50MTZBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMzI3NjcuMCApO1xuXG5cdFx0Y2FzZSBJbnQ4QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDEyNy4wICk7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdJbnZhbGlkIGNvbXBvbmVudCB0eXBlLicgKTtcblxuXHR9XG5cbn1cblxudmFyIE1hdGhVdGlscyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRERUcyUkFEOiBERUcyUkFELFxuXHRSQUQyREVHOiBSQUQyREVHLFxuXHRnZW5lcmF0ZVVVSUQ6IGdlbmVyYXRlVVVJRCxcblx0Y2xhbXA6IGNsYW1wLFxuXHRldWNsaWRlYW5Nb2R1bG86IGV1Y2xpZGVhbk1vZHVsbyxcblx0bWFwTGluZWFyOiBtYXBMaW5lYXIsXG5cdGludmVyc2VMZXJwOiBpbnZlcnNlTGVycCxcblx0bGVycDogbGVycCxcblx0ZGFtcDogZGFtcCxcblx0cGluZ3Bvbmc6IHBpbmdwb25nLFxuXHRzbW9vdGhzdGVwOiBzbW9vdGhzdGVwLFxuXHRzbW9vdGhlcnN0ZXA6IHNtb290aGVyc3RlcCxcblx0cmFuZEludDogcmFuZEludCxcblx0cmFuZEZsb2F0OiByYW5kRmxvYXQsXG5cdHJhbmRGbG9hdFNwcmVhZDogcmFuZEZsb2F0U3ByZWFkLFxuXHRzZWVkZWRSYW5kb206IHNlZWRlZFJhbmRvbSxcblx0ZGVnVG9SYWQ6IGRlZ1RvUmFkLFxuXHRyYWRUb0RlZzogcmFkVG9EZWcsXG5cdGlzUG93ZXJPZlR3bzogaXNQb3dlck9mVHdvLFxuXHRjZWlsUG93ZXJPZlR3bzogY2VpbFBvd2VyT2ZUd28sXG5cdGZsb29yUG93ZXJPZlR3bzogZmxvb3JQb3dlck9mVHdvLFxuXHRzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyOiBzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyLFxuXHRub3JtYWxpemU6IG5vcm1hbGl6ZSxcblx0ZGVub3JtYWxpemU6IGRlbm9ybWFsaXplJDFcbn0pO1xuXG5jbGFzcyBWZWN0b3IyIHtcblxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwICkge1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdH1cblxuXHRnZXQgd2lkdGgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54O1xuXG5cdH1cblxuXHRzZXQgd2lkdGgoIHZhbHVlICkge1xuXG5cdFx0dGhpcy54ID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCBoZWlnaHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy55O1xuXG5cdH1cblxuXHRzZXQgaGVpZ2h0KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMueSA9IHZhbHVlO1xuXG5cdH1cblxuXHRzZXQoIHgsIHkgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFgoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFkoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldENvbXBvbmVudCggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldENvbXBvbmVudCggaW5kZXggKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55ICk7XG5cblx0fVxuXG5cdGNvcHkoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZCggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YiggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54IC09IHYueDtcblx0XHR0aGlzLnkgLT0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCB2ICkge1xuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGl2aWRlKCB2ICkge1xuXG5cdFx0dGhpcy54IC89IHYueDtcblx0XHR0aGlzLnkgLz0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXgzKCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdO1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1pbiggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1heCggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluLngsIE1hdGgubWluKCBtYXgueCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkge1xuXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgbGVuZ3RoICkgKSApO1xuXG5cdH1cblxuXHRmbG9vcigpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNlaWwoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmQoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZFRvWmVybygpIHtcblxuXHRcdHRoaXMueCA9ICggdGhpcy54IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnggKSA6IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG5lZ2F0ZSgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRvdCggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2Lnk7XG5cblx0fVxuXG5cdGNyb3NzKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueSAtIHRoaXMueSAqIHYueDtcblxuXHR9XG5cblx0bGVuZ3RoU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55O1xuXG5cdH1cblxuXHRsZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKTtcblxuXHR9XG5cblx0bWFuaGF0dGFuTGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKTtcblxuXHR9XG5cblx0bm9ybWFsaXplKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9XG5cblx0YW5nbGUoKSB7XG5cblx0XHQvLyBjb21wdXRlcyB0aGUgYW5nbGUgaW4gcmFkaWFucyB3aXRoIHJlc3BlY3QgdG8gdGhlIHBvc2l0aXZlIHgtYXhpc1xuXG5cdFx0Y29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKCAtIHRoaXMueSwgLSB0aGlzLnggKSArIE1hdGguUEk7XG5cblx0XHRyZXR1cm4gYW5nbGU7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSB7XG5cblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2Lnk7XG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuXG5cdH1cblxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKTtcblxuXHR9XG5cblx0c2V0TGVuZ3RoKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fVxuXG5cdGxlcnAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHR0aGlzLnggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy55ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGVBcm91bmQoIGNlbnRlciwgYW5nbGUgKSB7XG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIGFuZ2xlICksIHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblxuXHRcdGNvbnN0IHggPSB0aGlzLnggLSBjZW50ZXIueDtcblx0XHRjb25zdCB5ID0gdGhpcy55IC0gY2VudGVyLnk7XG5cblx0XHR0aGlzLnggPSB4ICogYyAtIHkgKiBzICsgY2VudGVyLng7XG5cdFx0dGhpcy55ID0geCAqIHMgKyB5ICogYyArIGNlbnRlci55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJhbmRvbSgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy55ID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcblxuXHRcdHlpZWxkIHRoaXMueDtcblx0XHR5aWVsZCB0aGlzLnk7XG5cblx0fVxuXG59XG5cblZlY3RvcjIucHJvdG90eXBlLmlzVmVjdG9yMiA9IHRydWU7XG5cbmNsYXNzIE1hdHJpeDMge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy5lbGVtZW50cyA9IFtcblxuXHRcdFx0MSwgMCwgMCxcblx0XHRcdDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAxXG5cblx0XHRdO1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXQoIG4xMSwgbjEyLCBuMTMsIG4yMSwgbjIyLCBuMjMsIG4zMSwgbjMyLCBuMzMgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgMSBdID0gbjIxOyB0ZVsgMiBdID0gbjMxO1xuXHRcdHRlWyAzIF0gPSBuMTI7IHRlWyA0IF0gPSBuMjI7IHRlWyA1IF0gPSBuMzI7XG5cdFx0dGVbIDYgXSA9IG4xMzsgdGVbIDcgXSA9IG4yMzsgdGVbIDggXSA9IG4zMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpZGVudGl0eSgpIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCxcblx0XHRcdDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggbSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbWVbIDAgXTsgdGVbIDEgXSA9IG1lWyAxIF07IHRlWyAyIF0gPSBtZVsgMiBdO1xuXHRcdHRlWyAzIF0gPSBtZVsgMyBdOyB0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07XG5cdFx0dGVbIDYgXSA9IG1lWyA2IF07IHRlWyA3IF0gPSBtZVsgNyBdOyB0ZVsgOCBdID0gbWVbIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHRyYWN0QmFzaXMoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR4QXhpcy5zZXRGcm9tTWF0cml4M0NvbHVtbiggdGhpcywgMCApO1xuXHRcdHlBeGlzLnNldEZyb21NYXRyaXgzQ29sdW1uKCB0aGlzLCAxICk7XG5cdFx0ekF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tTWF0cml4NCggbSApIHtcblxuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRtZVsgMCBdLCBtZVsgNCBdLCBtZVsgOCBdLFxuXHRcdFx0bWVbIDEgXSwgbWVbIDUgXSwgbWVbIDkgXSxcblx0XHRcdG1lWyAyIF0sIG1lWyA2IF0sIG1lWyAxMCBdXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApO1xuXG5cdH1cblxuXHRwcmVtdWx0aXBseSggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTtcblxuXHR9XG5cblx0bXVsdGlwbHlNYXRyaWNlcyggYSwgYiApIHtcblxuXHRcdGNvbnN0IGFlID0gYS5lbGVtZW50cztcblx0XHRjb25zdCBiZSA9IGIuZWxlbWVudHM7XG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgYTExID0gYWVbIDAgXSwgYTEyID0gYWVbIDMgXSwgYTEzID0gYWVbIDYgXTtcblx0XHRjb25zdCBhMjEgPSBhZVsgMSBdLCBhMjIgPSBhZVsgNCBdLCBhMjMgPSBhZVsgNyBdO1xuXHRcdGNvbnN0IGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA1IF0sIGEzMyA9IGFlWyA4IF07XG5cblx0XHRjb25zdCBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgMyBdLCBiMTMgPSBiZVsgNiBdO1xuXHRcdGNvbnN0IGIyMSA9IGJlWyAxIF0sIGIyMiA9IGJlWyA0IF0sIGIyMyA9IGJlWyA3IF07XG5cdFx0Y29uc3QgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDUgXSwgYjMzID0gYmVbIDggXTtcblxuXHRcdHRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzE7XG5cdFx0dGVbIDMgXSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMjtcblx0XHR0ZVsgNiBdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzICogYjMzO1xuXG5cdFx0dGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMTtcblx0XHR0ZVsgNCBdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyO1xuXHRcdHRlWyA3IF0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzM7XG5cblx0XHR0ZVsgMiBdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxO1xuXHRcdHRlWyA1IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzI7XG5cdFx0dGVbIDggXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggcyApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDMgXSAqPSBzOyB0ZVsgNiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNCBdICo9IHM7IHRlWyA3IF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA1IF0gKj0gczsgdGVbIDggXSAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRldGVybWluYW50KCkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgYSA9IHRlWyAwIF0sIGIgPSB0ZVsgMSBdLCBjID0gdGVbIDIgXSxcblx0XHRcdGQgPSB0ZVsgMyBdLCBlID0gdGVbIDQgXSwgZiA9IHRlWyA1IF0sXG5cdFx0XHRnID0gdGVbIDYgXSwgaCA9IHRlWyA3IF0sIGkgPSB0ZVsgOCBdO1xuXG5cdFx0cmV0dXJuIGEgKiBlICogaSAtIGEgKiBmICogaCAtIGIgKiBkICogaSArIGIgKiBmICogZyArIGMgKiBkICogaCAtIGMgKiBlICogZztcblxuXHR9XG5cblx0aW52ZXJ0KCkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLFxuXG5cdFx0XHRuMTEgPSB0ZVsgMCBdLCBuMjEgPSB0ZVsgMSBdLCBuMzEgPSB0ZVsgMiBdLFxuXHRcdFx0bjEyID0gdGVbIDMgXSwgbjIyID0gdGVbIDQgXSwgbjMyID0gdGVbIDUgXSxcblx0XHRcdG4xMyA9IHRlWyA2IF0sIG4yMyA9IHRlWyA3IF0sIG4zMyA9IHRlWyA4IF0sXG5cblx0XHRcdHQxMSA9IG4zMyAqIG4yMiAtIG4zMiAqIG4yMyxcblx0XHRcdHQxMiA9IG4zMiAqIG4xMyAtIG4zMyAqIG4xMixcblx0XHRcdHQxMyA9IG4yMyAqIG4xMiAtIG4yMiAqIG4xMyxcblxuXHRcdFx0ZGV0ID0gbjExICogdDExICsgbjIxICogdDEyICsgbjMxICogdDEzO1xuXG5cdFx0aWYgKCBkZXQgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAgKTtcblxuXHRcdGNvbnN0IGRldEludiA9IDEgLyBkZXQ7XG5cblx0XHR0ZVsgMCBdID0gdDExICogZGV0SW52O1xuXHRcdHRlWyAxIF0gPSAoIG4zMSAqIG4yMyAtIG4zMyAqIG4yMSApICogZGV0SW52O1xuXHRcdHRlWyAyIF0gPSAoIG4zMiAqIG4yMSAtIG4zMSAqIG4yMiApICogZGV0SW52O1xuXG5cdFx0dGVbIDMgXSA9IHQxMiAqIGRldEludjtcblx0XHR0ZVsgNCBdID0gKCBuMzMgKiBuMTEgLSBuMzEgKiBuMTMgKSAqIGRldEludjtcblx0XHR0ZVsgNSBdID0gKCBuMzEgKiBuMTIgLSBuMzIgKiBuMTEgKSAqIGRldEludjtcblxuXHRcdHRlWyA2IF0gPSB0MTMgKiBkZXRJbnY7XG5cdFx0dGVbIDcgXSA9ICggbjIxICogbjEzIC0gbjIzICogbjExICkgKiBkZXRJbnY7XG5cdFx0dGVbIDggXSA9ICggbjIyICogbjExIC0gbjIxICogbjEyICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNwb3NlKCkge1xuXG5cdFx0bGV0IHRtcDtcblx0XHRjb25zdCBtID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRtcCA9IG1bIDEgXTsgbVsgMSBdID0gbVsgMyBdOyBtWyAzIF0gPSB0bXA7XG5cdFx0dG1wID0gbVsgMiBdOyBtWyAyIF0gPSBtWyA2IF07IG1bIDYgXSA9IHRtcDtcblx0XHR0bXAgPSBtWyA1IF07IG1bIDUgXSA9IG1bIDcgXTsgbVsgNyBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldE5vcm1hbE1hdHJpeCggbWF0cml4NCApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXg0KCBtYXRyaXg0ICkuaW52ZXJ0KCkudHJhbnNwb3NlKCk7XG5cblx0fVxuXG5cdHRyYW5zcG9zZUludG9BcnJheSggciApIHtcblxuXHRcdGNvbnN0IG0gPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0clsgMCBdID0gbVsgMCBdO1xuXHRcdHJbIDEgXSA9IG1bIDMgXTtcblx0XHRyWyAyIF0gPSBtWyA2IF07XG5cdFx0clsgMyBdID0gbVsgMSBdO1xuXHRcdHJbIDQgXSA9IG1bIDQgXTtcblx0XHRyWyA1IF0gPSBtWyA3IF07XG5cdFx0clsgNiBdID0gbVsgMiBdO1xuXHRcdHJbIDcgXSA9IG1bIDUgXTtcblx0XHRyWyA4IF0gPSBtWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0VXZUcmFuc2Zvcm0oIHR4LCB0eSwgc3gsIHN5LCByb3RhdGlvbiwgY3gsIGN5ICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCByb3RhdGlvbiApO1xuXHRcdGNvbnN0IHMgPSBNYXRoLnNpbiggcm90YXRpb24gKTtcblxuXHRcdHRoaXMuc2V0KFxuXHRcdFx0c3ggKiBjLCBzeCAqIHMsIC0gc3ggKiAoIGMgKiBjeCArIHMgKiBjeSApICsgY3ggKyB0eCxcblx0XHRcdC0gc3kgKiBzLCBzeSAqIGMsIC0gc3kgKiAoIC0gcyAqIGN4ICsgYyAqIGN5ICkgKyBjeSArIHR5LFxuXHRcdFx0MCwgMCwgMVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2NhbGUoIHN4LCBzeSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gc3g7IHRlWyAzIF0gKj0gc3g7IHRlWyA2IF0gKj0gc3g7XG5cdFx0dGVbIDEgXSAqPSBzeTsgdGVbIDQgXSAqPSBzeTsgdGVbIDcgXSAqPSBzeTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGUoIHRoZXRhICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApO1xuXHRcdGNvbnN0IHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IGExMSA9IHRlWyAwIF0sIGExMiA9IHRlWyAzIF0sIGExMyA9IHRlWyA2IF07XG5cdFx0Y29uc3QgYTIxID0gdGVbIDEgXSwgYTIyID0gdGVbIDQgXSwgYTIzID0gdGVbIDcgXTtcblxuXHRcdHRlWyAwIF0gPSBjICogYTExICsgcyAqIGEyMTtcblx0XHR0ZVsgMyBdID0gYyAqIGExMiArIHMgKiBhMjI7XG5cdFx0dGVbIDYgXSA9IGMgKiBhMTMgKyBzICogYTIzO1xuXG5cdFx0dGVbIDEgXSA9IC0gcyAqIGExMSArIGMgKiBhMjE7XG5cdFx0dGVbIDQgXSA9IC0gcyAqIGExMiArIGMgKiBhMjI7XG5cdFx0dGVbIDcgXSA9IC0gcyAqIGExMyArIGMgKiBhMjM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNsYXRlKCB0eCwgdHkgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICs9IHR4ICogdGVbIDIgXTsgdGVbIDMgXSArPSB0eCAqIHRlWyA1IF07IHRlWyA2IF0gKz0gdHggKiB0ZVsgOCBdO1xuXHRcdHRlWyAxIF0gKz0gdHkgKiB0ZVsgMiBdOyB0ZVsgNCBdICs9IHR5ICogdGVbIDUgXTsgdGVbIDcgXSArPSB0eSAqIHRlWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBtYXRyaXggKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUgPSBtYXRyaXguZWxlbWVudHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZWxlbWVudHNbIGkgXSA9IGFycmF5WyBpICsgb2Zmc2V0IF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRlWyAwIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRlWyAxIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRlWyAyIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGVbIDMgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNCBdID0gdGVbIDQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNSBdID0gdGVbIDUgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyA2IF0gPSB0ZVsgNiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA3IF0gPSB0ZVsgNyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmZyb21BcnJheSggdGhpcy5lbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG5NYXRyaXgzLnByb3RvdHlwZS5pc01hdHJpeDMgPSB0cnVlO1xuXG5mdW5jdGlvbiBhcnJheU5lZWRzVWludDMyKCBhcnJheSApIHtcblxuXHQvLyBhc3N1bWVzIGxhcmdlciB2YWx1ZXMgdXN1YWxseSBvbiBsYXN0XG5cblx0Zm9yICggbGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID49IDA7IC0tIGkgKSB7XG5cblx0XHRpZiAoIGFycmF5WyBpIF0gPiA2NTUzNSApIHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG5cbn1cblxuY29uc3QgVFlQRURfQVJSQVlTID0ge1xuXHRJbnQ4QXJyYXk6IEludDhBcnJheSxcblx0VWludDhBcnJheTogVWludDhBcnJheSxcblx0VWludDhDbGFtcGVkQXJyYXk6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHRJbnQxNkFycmF5OiBJbnQxNkFycmF5LFxuXHRVaW50MTZBcnJheTogVWludDE2QXJyYXksXG5cdEludDMyQXJyYXk6IEludDMyQXJyYXksXG5cdFVpbnQzMkFycmF5OiBVaW50MzJBcnJheSxcblx0RmxvYXQzMkFycmF5OiBGbG9hdDMyQXJyYXksXG5cdEZsb2F0NjRBcnJheTogRmxvYXQ2NEFycmF5XG59O1xuXG5mdW5jdGlvbiBnZXRUeXBlZEFycmF5KCB0eXBlLCBidWZmZXIgKSB7XG5cblx0cmV0dXJuIG5ldyBUWVBFRF9BUlJBWVNbIHR5cGUgXSggYnVmZmVyICk7XG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKCBuYW1lICkge1xuXG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgbmFtZSApO1xuXG59XG5cbmZ1bmN0aW9uIFNSR0JUb0xpbmVhciggYyApIHtcblxuXHRyZXR1cm4gKCBjIDwgMC4wNDA0NSApID8gYyAqIDAuMDc3Mzk5MzgwOCA6IE1hdGgucG93KCBjICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQgKTtcblxufVxuXG5mdW5jdGlvbiBMaW5lYXJUb1NSR0IoIGMgKSB7XG5cblx0cmV0dXJuICggYyA8IDAuMDAzMTMwOCApID8gYyAqIDEyLjkyIDogMS4wNTUgKiAoIE1hdGgucG93KCBjLCAwLjQxNjY2ICkgKSAtIDAuMDU1O1xuXG59XG5cbi8vIEphdmFTY3JpcHQgUkdCLXRvLVJHQiB0cmFuc2Zvcm1zLCBkZWZpbmVkIGFzXG4vLyBGTltJbnB1dENvbG9yU3BhY2VdW091dHB1dENvbG9yU3BhY2VdIGNhbGxiYWNrIGZ1bmN0aW9ucy5cbmNvbnN0IEZOID0ge1xuXHRbIFNSR0JDb2xvclNwYWNlIF06IHsgWyBMaW5lYXJTUkdCQ29sb3JTcGFjZSBdOiBTUkdCVG9MaW5lYXIgfSxcblx0WyBMaW5lYXJTUkdCQ29sb3JTcGFjZSBdOiB7IFsgU1JHQkNvbG9yU3BhY2UgXTogTGluZWFyVG9TUkdCIH0sXG59O1xuXG5jb25zdCBDb2xvck1hbmFnZW1lbnQgPSB7XG5cblx0bGVnYWN5TW9kZTogdHJ1ZSxcblxuXHRnZXQgd29ya2luZ0NvbG9yU3BhY2UoKSB7XG5cblx0XHRyZXR1cm4gTGluZWFyU1JHQkNvbG9yU3BhY2U7XG5cblx0fSxcblxuXHRzZXQgd29ya2luZ0NvbG9yU3BhY2UoIGNvbG9yU3BhY2UgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvck1hbmFnZW1lbnQ6IC53b3JraW5nQ29sb3JTcGFjZSBpcyByZWFkb25seS4nICk7XG5cblx0fSxcblxuXHRjb252ZXJ0OiBmdW5jdGlvbiAoIGNvbG9yLCBzb3VyY2VDb2xvclNwYWNlLCB0YXJnZXRDb2xvclNwYWNlICkge1xuXG5cdFx0aWYgKCB0aGlzLmxlZ2FjeU1vZGUgfHwgc291cmNlQ29sb3JTcGFjZSA9PT0gdGFyZ2V0Q29sb3JTcGFjZSB8fCAhIHNvdXJjZUNvbG9yU3BhY2UgfHwgISB0YXJnZXRDb2xvclNwYWNlICkge1xuXG5cdFx0XHRyZXR1cm4gY29sb3I7XG5cblx0XHR9XG5cblx0XHRpZiAoIEZOWyBzb3VyY2VDb2xvclNwYWNlIF0gJiYgRk5bIHNvdXJjZUNvbG9yU3BhY2UgXVsgdGFyZ2V0Q29sb3JTcGFjZSBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGZuID0gRk5bIHNvdXJjZUNvbG9yU3BhY2UgXVsgdGFyZ2V0Q29sb3JTcGFjZSBdO1xuXG5cdFx0XHRjb2xvci5yID0gZm4oIGNvbG9yLnIgKTtcblx0XHRcdGNvbG9yLmcgPSBmbiggY29sb3IuZyApO1xuXHRcdFx0Y29sb3IuYiA9IGZuKCBjb2xvci5iICk7XG5cblx0XHRcdHJldHVybiBjb2xvcjtcblxuXHRcdH1cblxuXHRcdHRocm93IG5ldyBFcnJvciggJ1Vuc3VwcG9ydGVkIGNvbG9yIHNwYWNlIGNvbnZlcnNpb24uJyApO1xuXG5cdH0sXG5cblx0ZnJvbVdvcmtpbmdDb2xvclNwYWNlOiBmdW5jdGlvbiAoIGNvbG9yLCB0YXJnZXRDb2xvclNwYWNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29udmVydCggY29sb3IsIHRoaXMud29ya2luZ0NvbG9yU3BhY2UsIHRhcmdldENvbG9yU3BhY2UgKTtcblxuXHR9LFxuXG5cdHRvV29ya2luZ0NvbG9yU3BhY2U6IGZ1bmN0aW9uICggY29sb3IsIHNvdXJjZUNvbG9yU3BhY2UgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb252ZXJ0KCBjb2xvciwgc291cmNlQ29sb3JTcGFjZSwgdGhpcy53b3JraW5nQ29sb3JTcGFjZSApO1xuXG5cdH0sXG5cbn07XG5cbmNvbnN0IF9jb2xvcktleXdvcmRzID0geyAnYWxpY2VibHVlJzogMHhGMEY4RkYsICdhbnRpcXVld2hpdGUnOiAweEZBRUJENywgJ2FxdWEnOiAweDAwRkZGRiwgJ2FxdWFtYXJpbmUnOiAweDdGRkZENCwgJ2F6dXJlJzogMHhGMEZGRkYsXG5cdCdiZWlnZSc6IDB4RjVGNURDLCAnYmlzcXVlJzogMHhGRkU0QzQsICdibGFjayc6IDB4MDAwMDAwLCAnYmxhbmNoZWRhbG1vbmQnOiAweEZGRUJDRCwgJ2JsdWUnOiAweDAwMDBGRiwgJ2JsdWV2aW9sZXQnOiAweDhBMkJFMixcblx0J2Jyb3duJzogMHhBNTJBMkEsICdidXJseXdvb2QnOiAweERFQjg4NywgJ2NhZGV0Ymx1ZSc6IDB4NUY5RUEwLCAnY2hhcnRyZXVzZSc6IDB4N0ZGRjAwLCAnY2hvY29sYXRlJzogMHhEMjY5MUUsICdjb3JhbCc6IDB4RkY3RjUwLFxuXHQnY29ybmZsb3dlcmJsdWUnOiAweDY0OTVFRCwgJ2Nvcm5zaWxrJzogMHhGRkY4REMsICdjcmltc29uJzogMHhEQzE0M0MsICdjeWFuJzogMHgwMEZGRkYsICdkYXJrYmx1ZSc6IDB4MDAwMDhCLCAnZGFya2N5YW4nOiAweDAwOEI4Qixcblx0J2Rhcmtnb2xkZW5yb2QnOiAweEI4ODYwQiwgJ2RhcmtncmF5JzogMHhBOUE5QTksICdkYXJrZ3JlZW4nOiAweDAwNjQwMCwgJ2RhcmtncmV5JzogMHhBOUE5QTksICdkYXJra2hha2knOiAweEJEQjc2QiwgJ2RhcmttYWdlbnRhJzogMHg4QjAwOEIsXG5cdCdkYXJrb2xpdmVncmVlbic6IDB4NTU2QjJGLCAnZGFya29yYW5nZSc6IDB4RkY4QzAwLCAnZGFya29yY2hpZCc6IDB4OTkzMkNDLCAnZGFya3JlZCc6IDB4OEIwMDAwLCAnZGFya3NhbG1vbic6IDB4RTk5NjdBLCAnZGFya3NlYWdyZWVuJzogMHg4RkJDOEYsXG5cdCdkYXJrc2xhdGVibHVlJzogMHg0ODNEOEIsICdkYXJrc2xhdGVncmF5JzogMHgyRjRGNEYsICdkYXJrc2xhdGVncmV5JzogMHgyRjRGNEYsICdkYXJrdHVycXVvaXNlJzogMHgwMENFRDEsICdkYXJrdmlvbGV0JzogMHg5NDAwRDMsXG5cdCdkZWVwcGluayc6IDB4RkYxNDkzLCAnZGVlcHNreWJsdWUnOiAweDAwQkZGRiwgJ2RpbWdyYXknOiAweDY5Njk2OSwgJ2RpbWdyZXknOiAweDY5Njk2OSwgJ2RvZGdlcmJsdWUnOiAweDFFOTBGRiwgJ2ZpcmVicmljayc6IDB4QjIyMjIyLFxuXHQnZmxvcmFsd2hpdGUnOiAweEZGRkFGMCwgJ2ZvcmVzdGdyZWVuJzogMHgyMjhCMjIsICdmdWNoc2lhJzogMHhGRjAwRkYsICdnYWluc2Jvcm8nOiAweERDRENEQywgJ2dob3N0d2hpdGUnOiAweEY4RjhGRiwgJ2dvbGQnOiAweEZGRDcwMCxcblx0J2dvbGRlbnJvZCc6IDB4REFBNTIwLCAnZ3JheSc6IDB4ODA4MDgwLCAnZ3JlZW4nOiAweDAwODAwMCwgJ2dyZWVueWVsbG93JzogMHhBREZGMkYsICdncmV5JzogMHg4MDgwODAsICdob25leWRldyc6IDB4RjBGRkYwLCAnaG90cGluayc6IDB4RkY2OUI0LFxuXHQnaW5kaWFucmVkJzogMHhDRDVDNUMsICdpbmRpZ28nOiAweDRCMDA4MiwgJ2l2b3J5JzogMHhGRkZGRjAsICdraGFraSc6IDB4RjBFNjhDLCAnbGF2ZW5kZXInOiAweEU2RTZGQSwgJ2xhdmVuZGVyYmx1c2gnOiAweEZGRjBGNSwgJ2xhd25ncmVlbic6IDB4N0NGQzAwLFxuXHQnbGVtb25jaGlmZm9uJzogMHhGRkZBQ0QsICdsaWdodGJsdWUnOiAweEFERDhFNiwgJ2xpZ2h0Y29yYWwnOiAweEYwODA4MCwgJ2xpZ2h0Y3lhbic6IDB4RTBGRkZGLCAnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnOiAweEZBRkFEMiwgJ2xpZ2h0Z3JheSc6IDB4RDNEM0QzLFxuXHQnbGlnaHRncmVlbic6IDB4OTBFRTkwLCAnbGlnaHRncmV5JzogMHhEM0QzRDMsICdsaWdodHBpbmsnOiAweEZGQjZDMSwgJ2xpZ2h0c2FsbW9uJzogMHhGRkEwN0EsICdsaWdodHNlYWdyZWVuJzogMHgyMEIyQUEsICdsaWdodHNreWJsdWUnOiAweDg3Q0VGQSxcblx0J2xpZ2h0c2xhdGVncmF5JzogMHg3Nzg4OTksICdsaWdodHNsYXRlZ3JleSc6IDB4Nzc4ODk5LCAnbGlnaHRzdGVlbGJsdWUnOiAweEIwQzRERSwgJ2xpZ2h0eWVsbG93JzogMHhGRkZGRTAsICdsaW1lJzogMHgwMEZGMDAsICdsaW1lZ3JlZW4nOiAweDMyQ0QzMixcblx0J2xpbmVuJzogMHhGQUYwRTYsICdtYWdlbnRhJzogMHhGRjAwRkYsICdtYXJvb24nOiAweDgwMDAwMCwgJ21lZGl1bWFxdWFtYXJpbmUnOiAweDY2Q0RBQSwgJ21lZGl1bWJsdWUnOiAweDAwMDBDRCwgJ21lZGl1bW9yY2hpZCc6IDB4QkE1NUQzLFxuXHQnbWVkaXVtcHVycGxlJzogMHg5MzcwREIsICdtZWRpdW1zZWFncmVlbic6IDB4M0NCMzcxLCAnbWVkaXVtc2xhdGVibHVlJzogMHg3QjY4RUUsICdtZWRpdW1zcHJpbmdncmVlbic6IDB4MDBGQTlBLCAnbWVkaXVtdHVycXVvaXNlJzogMHg0OEQxQ0MsXG5cdCdtZWRpdW12aW9sZXRyZWQnOiAweEM3MTU4NSwgJ21pZG5pZ2h0Ymx1ZSc6IDB4MTkxOTcwLCAnbWludGNyZWFtJzogMHhGNUZGRkEsICdtaXN0eXJvc2UnOiAweEZGRTRFMSwgJ21vY2Nhc2luJzogMHhGRkU0QjUsICduYXZham93aGl0ZSc6IDB4RkZERUFELFxuXHQnbmF2eSc6IDB4MDAwMDgwLCAnb2xkbGFjZSc6IDB4RkRGNUU2LCAnb2xpdmUnOiAweDgwODAwMCwgJ29saXZlZHJhYic6IDB4NkI4RTIzLCAnb3JhbmdlJzogMHhGRkE1MDAsICdvcmFuZ2VyZWQnOiAweEZGNDUwMCwgJ29yY2hpZCc6IDB4REE3MEQ2LFxuXHQncGFsZWdvbGRlbnJvZCc6IDB4RUVFOEFBLCAncGFsZWdyZWVuJzogMHg5OEZCOTgsICdwYWxldHVycXVvaXNlJzogMHhBRkVFRUUsICdwYWxldmlvbGV0cmVkJzogMHhEQjcwOTMsICdwYXBheWF3aGlwJzogMHhGRkVGRDUsICdwZWFjaHB1ZmYnOiAweEZGREFCOSxcblx0J3BlcnUnOiAweENEODUzRiwgJ3BpbmsnOiAweEZGQzBDQiwgJ3BsdW0nOiAweEREQTBERCwgJ3Bvd2RlcmJsdWUnOiAweEIwRTBFNiwgJ3B1cnBsZSc6IDB4ODAwMDgwLCAncmViZWNjYXB1cnBsZSc6IDB4NjYzMzk5LCAncmVkJzogMHhGRjAwMDAsICdyb3N5YnJvd24nOiAweEJDOEY4Rixcblx0J3JveWFsYmx1ZSc6IDB4NDE2OUUxLCAnc2FkZGxlYnJvd24nOiAweDhCNDUxMywgJ3NhbG1vbic6IDB4RkE4MDcyLCAnc2FuZHlicm93bic6IDB4RjRBNDYwLCAnc2VhZ3JlZW4nOiAweDJFOEI1NywgJ3NlYXNoZWxsJzogMHhGRkY1RUUsXG5cdCdzaWVubmEnOiAweEEwNTIyRCwgJ3NpbHZlcic6IDB4QzBDMEMwLCAnc2t5Ymx1ZSc6IDB4ODdDRUVCLCAnc2xhdGVibHVlJzogMHg2QTVBQ0QsICdzbGF0ZWdyYXknOiAweDcwODA5MCwgJ3NsYXRlZ3JleSc6IDB4NzA4MDkwLCAnc25vdyc6IDB4RkZGQUZBLFxuXHQnc3ByaW5nZ3JlZW4nOiAweDAwRkY3RiwgJ3N0ZWVsYmx1ZSc6IDB4NDY4MkI0LCAndGFuJzogMHhEMkI0OEMsICd0ZWFsJzogMHgwMDgwODAsICd0aGlzdGxlJzogMHhEOEJGRDgsICd0b21hdG8nOiAweEZGNjM0NywgJ3R1cnF1b2lzZSc6IDB4NDBFMEQwLFxuXHQndmlvbGV0JzogMHhFRTgyRUUsICd3aGVhdCc6IDB4RjVERUIzLCAnd2hpdGUnOiAweEZGRkZGRiwgJ3doaXRlc21va2UnOiAweEY1RjVGNSwgJ3llbGxvdyc6IDB4RkZGRjAwLCAneWVsbG93Z3JlZW4nOiAweDlBQ0QzMiB9O1xuXG5jb25zdCBfcmdiID0geyByOiAwLCBnOiAwLCBiOiAwIH07XG5jb25zdCBfaHNsQSA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuY29uc3QgX2hzbEIgPSB7IGg6IDAsIHM6IDAsIGw6IDAgfTtcblxuZnVuY3Rpb24gaHVlMnJnYiggcCwgcSwgdCApIHtcblxuXHRpZiAoIHQgPCAwICkgdCArPSAxO1xuXHRpZiAoIHQgPiAxICkgdCAtPSAxO1xuXHRpZiAoIHQgPCAxIC8gNiApIHJldHVybiBwICsgKCBxIC0gcCApICogNiAqIHQ7XG5cdGlmICggdCA8IDEgLyAyICkgcmV0dXJuIHE7XG5cdGlmICggdCA8IDIgLyAzICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogKCAyIC8gMyAtIHQgKTtcblx0cmV0dXJuIHA7XG5cbn1cblxuZnVuY3Rpb24gdG9Db21wb25lbnRzKCBzb3VyY2UsIHRhcmdldCApIHtcblxuXHR0YXJnZXQuciA9IHNvdXJjZS5yO1xuXHR0YXJnZXQuZyA9IHNvdXJjZS5nO1xuXHR0YXJnZXQuYiA9IHNvdXJjZS5iO1xuXG5cdHJldHVybiB0YXJnZXQ7XG5cbn1cblxuY2xhc3MgQ29sb3Ige1xuXG5cdGNvbnN0cnVjdG9yKCByLCBnLCBiICkge1xuXG5cdFx0aWYgKCBnID09PSB1bmRlZmluZWQgJiYgYiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyByIGlzIFRIUkVFLkNvbG9yLCBoZXggb3Igc3RyaW5nXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXQoIHIgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnNldFJHQiggciwgZywgYiApO1xuXG5cdH1cblxuXHRzZXQoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHR0aGlzLmNvcHkoIHZhbHVlICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHR0aGlzLnNldEhleCggdmFsdWUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgKSB7XG5cblx0XHRcdHRoaXMuc2V0U3R5bGUoIHZhbHVlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnIgPSBzY2FsYXI7XG5cdFx0dGhpcy5nID0gc2NhbGFyO1xuXHRcdHRoaXMuYiA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRIZXgoIGhleCwgY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0aGV4ID0gTWF0aC5mbG9vciggaGV4ICk7XG5cblx0XHR0aGlzLnIgPSAoIGhleCA+PiAxNiAmIDI1NSApIC8gMjU1O1xuXHRcdHRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmIgPSAoIGhleCAmIDI1NSApIC8gMjU1O1xuXG5cdFx0Q29sb3JNYW5hZ2VtZW50LnRvV29ya2luZ0NvbG9yU3BhY2UoIHRoaXMsIGNvbG9yU3BhY2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRSR0IoIHIsIGcsIGIsIGNvbG9yU3BhY2UgPSBMaW5lYXJTUkdCQ29sb3JTcGFjZSApIHtcblxuXHRcdHRoaXMuciA9IHI7XG5cdFx0dGhpcy5nID0gZztcblx0XHR0aGlzLmIgPSBiO1xuXG5cdFx0Q29sb3JNYW5hZ2VtZW50LnRvV29ya2luZ0NvbG9yU3BhY2UoIHRoaXMsIGNvbG9yU3BhY2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRIU0woIGgsIHMsIGwsIGNvbG9yU3BhY2UgPSBMaW5lYXJTUkdCQ29sb3JTcGFjZSApIHtcblxuXHRcdC8vIGgscyxsIHJhbmdlcyBhcmUgaW4gMC4wIC0gMS4wXG5cdFx0aCA9IGV1Y2xpZGVhbk1vZHVsbyggaCwgMSApO1xuXHRcdHMgPSBjbGFtcCggcywgMCwgMSApO1xuXHRcdGwgPSBjbGFtcCggbCwgMCwgMSApO1xuXG5cdFx0aWYgKCBzID09PSAwICkge1xuXG5cdFx0XHR0aGlzLnIgPSB0aGlzLmcgPSB0aGlzLmIgPSBsO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcCA9IGwgPD0gMC41ID8gbCAqICggMSArIHMgKSA6IGwgKyBzIC0gKCBsICogcyApO1xuXHRcdFx0Y29uc3QgcSA9ICggMiAqIGwgKSAtIHA7XG5cblx0XHRcdHRoaXMuciA9IGh1ZTJyZ2IoIHEsIHAsIGggKyAxIC8gMyApO1xuXHRcdFx0dGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApO1xuXHRcdFx0dGhpcy5iID0gaHVlMnJnYiggcSwgcCwgaCAtIDEgLyAzICk7XG5cblx0XHR9XG5cblx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFN0eWxlKCBzdHlsZSwgY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoIHN0cmluZyApIHtcblxuXHRcdFx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiAnICsgc3R5bGUgKyAnIHdpbGwgYmUgaWdub3JlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0bGV0IG07XG5cblx0XHRpZiAoIG0gPSAvXigoPzpyZ2J8aHNsKWE/KVxcKChbXlxcKV0qKVxcKS8uZXhlYyggc3R5bGUgKSApIHtcblxuXHRcdFx0Ly8gcmdiIC8gaHNsXG5cblx0XHRcdGxldCBjb2xvcjtcblx0XHRcdGNvbnN0IG5hbWUgPSBtWyAxIF07XG5cdFx0XHRjb25zdCBjb21wb25lbnRzID0gbVsgMiBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZ2IoMjU1LDAsMCkgcmdiYSgyNTUsMCwwLDAuNSlcblx0XHRcdFx0XHRcdHRoaXMuciA9IE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMSBdLCAxMCApICkgLyAyNTU7XG5cdFx0XHRcdFx0XHR0aGlzLmcgPSBNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMjU1O1xuXHRcdFx0XHRcdFx0dGhpcy5iID0gTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAzIF0sIDEwICkgKSAvIDI1NTtcblxuXHRcdFx0XHRcdFx0Q29sb3JNYW5hZ2VtZW50LnRvV29ya2luZ0NvbG9yU3BhY2UoIHRoaXMsIGNvbG9yU3BhY2UgKTtcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA0IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL15cXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKig/OixcXHMqKFxcZCpcXC4/XFxkKylcXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHJnYigxMDAlLDAlLDAlKSByZ2JhKDEwMCUsMCUsMCUsMC41KVxuXHRcdFx0XHRcdFx0dGhpcy5yID0gTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAxIF0sIDEwICkgKSAvIDEwMDtcblx0XHRcdFx0XHRcdHRoaXMuZyA9IE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMiBdLCAxMCApICkgLyAxMDA7XG5cdFx0XHRcdFx0XHR0aGlzLmIgPSBNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSApIC8gMTAwO1xuXG5cdFx0XHRcdFx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVBbHBoYSggY29sb3JbIDQgXSApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2hzbCc6XG5cdFx0XHRcdGNhc2UgJ2hzbGEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQqXFwuP1xcZCspXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKig/OixcXHMqKFxcZCpcXC4/XFxkKylcXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGhzbCgxMjAsNTAlLDUwJSkgaHNsYSgxMjAsNTAlLDUwJSwwLjUpXG5cdFx0XHRcdFx0XHRjb25zdCBoID0gcGFyc2VGbG9hdCggY29sb3JbIDEgXSApIC8gMzYwO1xuXHRcdFx0XHRcdFx0Y29uc3QgcyA9IHBhcnNlSW50KCBjb2xvclsgMiBdLCAxMCApIC8gMTAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgbCA9IHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApIC8gMTAwO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVBbHBoYSggY29sb3JbIDQgXSApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRIU0woIGgsIHMsIGwsIGNvbG9yU3BhY2UgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBtID0gL15cXCMoW0EtRmEtZlxcZF0rKSQvLmV4ZWMoIHN0eWxlICkgKSB7XG5cblx0XHRcdC8vIGhleCBjb2xvclxuXG5cdFx0XHRjb25zdCBoZXggPSBtWyAxIF07XG5cdFx0XHRjb25zdCBzaXplID0gaGV4Lmxlbmd0aDtcblxuXHRcdFx0aWYgKCBzaXplID09PSAzICkge1xuXG5cdFx0XHRcdC8vICNmZjBcblx0XHRcdFx0dGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDAgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDIgKSArIGhleC5jaGFyQXQoIDIgKSwgMTYgKSAvIDI1NTtcblxuXHRcdFx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xuXG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBzaXplID09PSA2ICkge1xuXG5cdFx0XHRcdC8vICNmZjAwMDBcblx0XHRcdFx0dGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDIgKSArIGhleC5jaGFyQXQoIDMgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDQgKSArIGhleC5jaGFyQXQoIDUgKSwgMTYgKSAvIDI1NTtcblxuXHRcdFx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xuXG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHN0eWxlICYmIHN0eWxlLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNldENvbG9yTmFtZSggc3R5bGUsIGNvbG9yU3BhY2UgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRDb2xvck5hbWUoIHN0eWxlLCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XG5cblx0XHQvLyBjb2xvciBrZXl3b3Jkc1xuXHRcdGNvbnN0IGhleCA9IF9jb2xvcktleXdvcmRzWyBzdHlsZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRpZiAoIGhleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyByZWRcblx0XHRcdHRoaXMuc2V0SGV4KCBoZXgsIGNvbG9yU3BhY2UgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHVua25vd24gY29sb3Jcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiBVbmtub3duIGNvbG9yICcgKyBzdHlsZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLnIsIHRoaXMuZywgdGhpcy5iICk7XG5cblx0fVxuXG5cdGNvcHkoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3Iucjtcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weVNSR0JUb0xpbmVhciggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLnIgKTtcblx0XHR0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHR0aGlzLmIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5TGluZWFyVG9TUkdCKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IExpbmVhclRvU1JHQiggY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdHRoaXMuYiA9IExpbmVhclRvU1JHQiggY29sb3IuYiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbnZlcnRTUkdCVG9MaW5lYXIoKSB7XG5cblx0XHR0aGlzLmNvcHlTUkdCVG9MaW5lYXIoIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb252ZXJ0TGluZWFyVG9TUkdCKCkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9TUkdCKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0SGV4KCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCB0b0NvbXBvbmVudHMoIHRoaXMsIF9yZ2IgKSwgY29sb3JTcGFjZSApO1xuXG5cdFx0cmV0dXJuIGNsYW1wKCBfcmdiLnIgKiAyNTUsIDAsIDI1NSApIDw8IDE2IF4gY2xhbXAoIF9yZ2IuZyAqIDI1NSwgMCwgMjU1ICkgPDwgOCBeIGNsYW1wKCBfcmdiLmIgKiAyNTUsIDAsIDI1NSApIDw8IDA7XG5cblx0fVxuXG5cdGdldEhleFN0cmluZyggY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0cmV0dXJuICggJzAwMDAwMCcgKyB0aGlzLmdldEhleCggY29sb3JTcGFjZSApLnRvU3RyaW5nKCAxNiApICkuc2xpY2UoIC0gNiApO1xuXG5cdH1cblxuXHRnZXRIU0woIHRhcmdldCwgY29sb3JTcGFjZSA9IExpbmVhclNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblxuXHRcdENvbG9yTWFuYWdlbWVudC5mcm9tV29ya2luZ0NvbG9yU3BhY2UoIHRvQ29tcG9uZW50cyggdGhpcywgX3JnYiApLCBjb2xvclNwYWNlICk7XG5cblx0XHRjb25zdCByID0gX3JnYi5yLCBnID0gX3JnYi5nLCBiID0gX3JnYi5iO1xuXG5cdFx0Y29uc3QgbWF4ID0gTWF0aC5tYXgoIHIsIGcsIGIgKTtcblx0XHRjb25zdCBtaW4gPSBNYXRoLm1pbiggciwgZywgYiApO1xuXG5cdFx0bGV0IGh1ZSwgc2F0dXJhdGlvbjtcblx0XHRjb25zdCBsaWdodG5lc3MgPSAoIG1pbiArIG1heCApIC8gMi4wO1xuXG5cdFx0aWYgKCBtaW4gPT09IG1heCApIHtcblxuXHRcdFx0aHVlID0gMDtcblx0XHRcdHNhdHVyYXRpb24gPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgZGVsdGEgPSBtYXggLSBtaW47XG5cblx0XHRcdHNhdHVyYXRpb24gPSBsaWdodG5lc3MgPD0gMC41ID8gZGVsdGEgLyAoIG1heCArIG1pbiApIDogZGVsdGEgLyAoIDIgLSBtYXggLSBtaW4gKTtcblxuXHRcdFx0c3dpdGNoICggbWF4ICkge1xuXG5cdFx0XHRcdGNhc2UgcjogaHVlID0gKCBnIC0gYiApIC8gZGVsdGEgKyAoIGcgPCBiID8gNiA6IDAgKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgZzogaHVlID0gKCBiIC0gciApIC8gZGVsdGEgKyAyOyBicmVhaztcblx0XHRcdFx0Y2FzZSBiOiBodWUgPSAoIHIgLSBnICkgLyBkZWx0YSArIDQ7IGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGh1ZSAvPSA2O1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmggPSBodWU7XG5cdFx0dGFyZ2V0LnMgPSBzYXR1cmF0aW9uO1xuXHRcdHRhcmdldC5sID0gbGlnaHRuZXNzO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0Z2V0UkdCKCB0YXJnZXQsIGNvbG9yU3BhY2UgPSBMaW5lYXJTUkdCQ29sb3JTcGFjZSApIHtcblxuXHRcdENvbG9yTWFuYWdlbWVudC5mcm9tV29ya2luZ0NvbG9yU3BhY2UoIHRvQ29tcG9uZW50cyggdGhpcywgX3JnYiApLCBjb2xvclNwYWNlICk7XG5cblx0XHR0YXJnZXQuciA9IF9yZ2Iucjtcblx0XHR0YXJnZXQuZyA9IF9yZ2IuZztcblx0XHR0YXJnZXQuYiA9IF9yZ2IuYjtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGdldFN0eWxlKCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCB0b0NvbXBvbmVudHMoIHRoaXMsIF9yZ2IgKSwgY29sb3JTcGFjZSApO1xuXG5cdFx0aWYgKCBjb2xvclNwYWNlICE9PSBTUkdCQ29sb3JTcGFjZSApIHtcblxuXHRcdFx0Ly8gUmVxdWlyZXMgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCA0IChodHRwczovL3d3dy53My5vcmcvVFIvY3NzLWNvbG9yLTQvKS5cblx0XHRcdHJldHVybiBgY29sb3IoJHsgY29sb3JTcGFjZSB9ICR7IF9yZ2IuciB9ICR7IF9yZ2IuZyB9ICR7IF9yZ2IuYiB9KWA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYHJnYigkeyggX3JnYi5yICogMjU1ICkgfCAwfSwkeyggX3JnYi5nICogMjU1ICkgfCAwfSwkeyggX3JnYi5iICogMjU1ICkgfCAwfSlgO1xuXG5cdH1cblxuXHRvZmZzZXRIU0woIGgsIHMsIGwgKSB7XG5cblx0XHR0aGlzLmdldEhTTCggX2hzbEEgKTtcblxuXHRcdF9oc2xBLmggKz0gaDsgX2hzbEEucyArPSBzOyBfaHNsQS5sICs9IGw7XG5cblx0XHR0aGlzLnNldEhTTCggX2hzbEEuaCwgX2hzbEEucywgX2hzbEEubCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZCggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgKz0gY29sb3Iucjtcblx0XHR0aGlzLmcgKz0gY29sb3IuZztcblx0XHR0aGlzLmIgKz0gY29sb3IuYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRDb2xvcnMoIGNvbG9yMSwgY29sb3IyICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3IxLnIgKyBjb2xvcjIucjtcblx0XHR0aGlzLmcgPSBjb2xvcjEuZyArIGNvbG9yMi5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yMS5iICsgY29sb3IyLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy5yICs9IHM7XG5cdFx0dGhpcy5nICs9IHM7XG5cdFx0dGhpcy5iICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IE1hdGgubWF4KCAwLCB0aGlzLnIgLSBjb2xvci5yICk7XG5cdFx0dGhpcy5nID0gTWF0aC5tYXgoIDAsIHRoaXMuZyAtIGNvbG9yLmcgKTtcblx0XHR0aGlzLmIgPSBNYXRoLm1heCggMCwgdGhpcy5iIC0gY29sb3IuYiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCBjb2xvciApIHtcblxuXHRcdHRoaXMuciAqPSBjb2xvci5yO1xuXHRcdHRoaXMuZyAqPSBjb2xvci5nO1xuXHRcdHRoaXMuYiAqPSBjb2xvci5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5U2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy5yICo9IHM7XG5cdFx0dGhpcy5nICo9IHM7XG5cdFx0dGhpcy5iICo9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bGVycCggY29sb3IsIGFscGhhICkge1xuXG5cdFx0dGhpcy5yICs9ICggY29sb3IuciAtIHRoaXMuciApICogYWxwaGE7XG5cdFx0dGhpcy5nICs9ICggY29sb3IuZyAtIHRoaXMuZyApICogYWxwaGE7XG5cdFx0dGhpcy5iICs9ICggY29sb3IuYiAtIHRoaXMuYiApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bGVycENvbG9ycyggY29sb3IxLCBjb2xvcjIsIGFscGhhICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3IxLnIgKyAoIGNvbG9yMi5yIC0gY29sb3IxLnIgKSAqIGFscGhhO1xuXHRcdHRoaXMuZyA9IGNvbG9yMS5nICsgKCBjb2xvcjIuZyAtIGNvbG9yMS5nICkgKiBhbHBoYTtcblx0XHR0aGlzLmIgPSBjb2xvcjEuYiArICggY29sb3IyLmIgLSBjb2xvcjEuYiApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bGVycEhTTCggY29sb3IsIGFscGhhICkge1xuXG5cdFx0dGhpcy5nZXRIU0woIF9oc2xBICk7XG5cdFx0Y29sb3IuZ2V0SFNMKCBfaHNsQiApO1xuXG5cdFx0Y29uc3QgaCA9IGxlcnAoIF9oc2xBLmgsIF9oc2xCLmgsIGFscGhhICk7XG5cdFx0Y29uc3QgcyA9IGxlcnAoIF9oc2xBLnMsIF9oc2xCLnMsIGFscGhhICk7XG5cdFx0Y29uc3QgbCA9IGxlcnAoIF9oc2xBLmwsIF9oc2xCLmwsIGFscGhhICk7XG5cblx0XHR0aGlzLnNldEhTTCggaCwgcywgbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggYyApIHtcblxuXHRcdHJldHVybiAoIGMuciA9PT0gdGhpcy5yICkgJiYgKCBjLmcgPT09IHRoaXMuZyApICYmICggYy5iID09PSB0aGlzLmIgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMuciA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLmcgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMuYiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMucjtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5nO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLmI7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLnIgPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLmcgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLmIgPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblxuXHRcdGlmICggYXR0cmlidXRlLm5vcm1hbGl6ZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdC8vIGFzc3VtaW5nIFVpbnQ4QXJyYXlcblxuXHRcdFx0dGhpcy5yIC89IDI1NTtcblx0XHRcdHRoaXMuZyAvPSAyNTU7XG5cdFx0XHR0aGlzLmIgLz0gMjU1O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdHJldHVybiB0aGlzLmdldEhleCgpO1xuXG5cdH1cblxufVxuXG5Db2xvci5OQU1FUyA9IF9jb2xvcktleXdvcmRzO1xuXG5Db2xvci5wcm90b3R5cGUuaXNDb2xvciA9IHRydWU7XG5Db2xvci5wcm90b3R5cGUuciA9IDE7XG5Db2xvci5wcm90b3R5cGUuZyA9IDE7XG5Db2xvci5wcm90b3R5cGUuYiA9IDE7XG5cbmxldCBfY2FudmFzO1xuXG5jbGFzcyBJbWFnZVV0aWxzIHtcblxuXHRzdGF0aWMgZ2V0RGF0YVVSTCggaW1hZ2UgKSB7XG5cblx0XHRpZiAoIC9eZGF0YTovaS50ZXN0KCBpbWFnZS5zcmMgKSApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLnNyYztcblxuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ID09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRyZXR1cm4gaW1hZ2Uuc3JjO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGNhbnZhcztcblxuXHRcdGlmICggaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHtcblxuXHRcdFx0Y2FudmFzID0gaW1hZ2U7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIF9jYW52YXMgPSBjcmVhdGVFbGVtZW50TlMoICdjYW52YXMnICk7XG5cblx0XHRcdF9jYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcblx0XHRcdF9jYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuXG5cdFx0XHRjb25zdCBjb250ZXh0ID0gX2NhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cblx0XHRcdGlmICggaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZURhdGEgKSB7XG5cblx0XHRcdFx0Y29udGV4dC5wdXRJbWFnZURhdGEoIGltYWdlLCAwLCAwICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FudmFzID0gX2NhbnZhcztcblxuXHRcdH1cblxuXHRcdGlmICggY2FudmFzLndpZHRoID4gMjA0OCB8fCBjYW52YXMuaGVpZ2h0ID4gMjA0OCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VVdGlscy5nZXREYXRhVVJMOiBJbWFnZSBjb252ZXJ0ZWQgdG8ganBnIGZvciBwZXJmb3JtYW5jZSByZWFzb25zJywgaW1hZ2UgKTtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoICdpbWFnZS9qcGVnJywgMC42ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gY2FudmFzLnRvRGF0YVVSTCggJ2ltYWdlL3BuZycgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIHNSR0JUb0xpbmVhciggaW1hZ2UgKSB7XG5cblx0XHRpZiAoICggdHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHx8XG5cdFx0XHQoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHx8XG5cdFx0XHQoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApICkge1xuXG5cdFx0XHRjb25zdCBjYW52YXMgPSBjcmVhdGVFbGVtZW50TlMoICdjYW52YXMnICk7XG5cblx0XHRcdGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuXHRcdFx0Y2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcblxuXHRcdFx0Y29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0Y29uc3QgaW1hZ2VEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblx0XHRcdGNvbnN0IGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0ZGF0YVsgaSBdID0gU1JHQlRvTGluZWFyKCBkYXRhWyBpIF0gLyAyNTUgKSAqIDI1NTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb250ZXh0LnB1dEltYWdlRGF0YSggaW1hZ2VEYXRhLCAwLCAwICk7XG5cblx0XHRcdHJldHVybiBjYW52YXM7XG5cblx0XHR9IGVsc2UgaWYgKCBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRjb25zdCBkYXRhID0gaW1hZ2UuZGF0YS5zbGljZSggMCApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGRhdGEgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSApIHtcblxuXHRcdFx0XHRcdGRhdGFbIGkgXSA9IE1hdGguZmxvb3IoIFNSR0JUb0xpbmVhciggZGF0YVsgaSBdIC8gMjU1ICkgKiAyNTUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gYXNzdW1pbmcgZmxvYXRcblxuXHRcdFx0XHRcdGRhdGFbIGkgXSA9IFNSR0JUb0xpbmVhciggZGF0YVsgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcblx0XHRcdFx0aGVpZ2h0OiBpbWFnZS5oZWlnaHRcblx0XHRcdH07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLnNSR0JUb0xpbmVhcigpOiBVbnN1cHBvcnRlZCBpbWFnZSB0eXBlLiBObyBjb2xvciBzcGFjZSBjb252ZXJzaW9uIGFwcGxpZWQuJyApO1xuXHRcdFx0cmV0dXJuIGltYWdlO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jbGFzcyBTb3VyY2Uge1xuXG5cdGNvbnN0cnVjdG9yKCBkYXRhID0gbnVsbCApIHtcblxuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcblxuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0fVxuXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgJiYgbWV0YS5pbWFnZXNbIHRoaXMudXVpZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBtZXRhLmltYWdlc1sgdGhpcy51dWlkIF07XG5cblx0XHR9XG5cblx0XHRjb25zdCBvdXRwdXQgPSB7XG5cdFx0XHR1dWlkOiB0aGlzLnV1aWQsXG5cdFx0XHR1cmw6ICcnXG5cdFx0fTtcblxuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG5cblx0XHRpZiAoIGRhdGEgIT09IG51bGwgKSB7XG5cblx0XHRcdGxldCB1cmw7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXG5cdFx0XHRcdC8vIGN1YmUgdGV4dHVyZVxuXG5cdFx0XHRcdHVybCA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGRhdGEubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggZGF0YVsgaSBdLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdHVybC5wdXNoKCBzZXJpYWxpemVJbWFnZSggZGF0YVsgaSBdLmltYWdlICkgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHVybC5wdXNoKCBzZXJpYWxpemVJbWFnZSggZGF0YVsgaSBdICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gdGV4dHVyZVxuXG5cdFx0XHRcdHVybCA9IHNlcmlhbGl6ZUltYWdlKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0cHV0LnVybCA9IHVybDtcblxuXHRcdH1cblxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdG1ldGEuaW1hZ2VzWyB0aGlzLnV1aWQgXSA9IG91dHB1dDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUltYWdlKCBpbWFnZSApIHtcblxuXHRpZiAoICggdHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHx8XG5cdFx0KCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fFxuXHRcdCggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkgKSB7XG5cblx0XHQvLyBkZWZhdWx0IGltYWdlc1xuXG5cdFx0cmV0dXJuIEltYWdlVXRpbHMuZ2V0RGF0YVVSTCggaW1hZ2UgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHQvLyBpbWFnZXMgb2YgRGF0YVRleHR1cmVcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGltYWdlLmRhdGEgKSxcblx0XHRcdFx0d2lkdGg6IGltYWdlLndpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodCxcblx0XHRcdFx0dHlwZTogaW1hZ2UuZGF0YS5jb25zdHJ1Y3Rvci5uYW1lXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVGV4dHVyZTogVW5hYmxlIHRvIHNlcmlhbGl6ZSBUZXh0dXJlLicgKTtcblx0XHRcdHJldHVybiB7fTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuU291cmNlLnByb3RvdHlwZS5pc1NvdXJjZSA9IHRydWU7XG5cbmxldCB0ZXh0dXJlSWQgPSAwO1xuXG5jbGFzcyBUZXh0dXJlIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuXHRjb25zdHJ1Y3RvciggaW1hZ2UgPSBUZXh0dXJlLkRFRkFVTFRfSU1BR0UsIG1hcHBpbmcgPSBUZXh0dXJlLkRFRkFVTFRfTUFQUElORywgd3JhcFMgPSBDbGFtcFRvRWRnZVdyYXBwaW5nLCB3cmFwVCA9IENsYW1wVG9FZGdlV3JhcHBpbmcsIG1hZ0ZpbHRlciA9IExpbmVhckZpbHRlciwgbWluRmlsdGVyID0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLCBmb3JtYXQgPSBSR0JBRm9ybWF0LCB0eXBlID0gVW5zaWduZWRCeXRlVHlwZSwgYW5pc290cm9weSA9IDEsIGVuY29kaW5nID0gTGluZWFyRW5jb2RpbmcgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiB0ZXh0dXJlSWQgKysgfSApO1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblxuXHRcdHRoaXMuc291cmNlID0gbmV3IFNvdXJjZSggaW1hZ2UgKTtcblx0XHR0aGlzLm1pcG1hcHMgPSBbXTtcblxuXHRcdHRoaXMubWFwcGluZyA9IG1hcHBpbmc7XG5cblx0XHR0aGlzLndyYXBTID0gd3JhcFM7XG5cdFx0dGhpcy53cmFwVCA9IHdyYXBUO1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXI7XG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXI7XG5cblx0XHR0aGlzLmFuaXNvdHJvcHkgPSBhbmlzb3Ryb3B5O1xuXG5cdFx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdFx0dGhpcy5pbnRlcm5hbEZvcm1hdCA9IG51bGw7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblxuXHRcdHRoaXMub2Zmc2V0ID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcblx0XHR0aGlzLnJlcGVhdCA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cdFx0dGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xuXHRcdHRoaXMucm90YXRpb24gPSAwO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XG5cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHRydWU7XG5cdFx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gZmFsc2U7XG5cdFx0dGhpcy5mbGlwWSA9IHRydWU7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSA0O1x0Ly8gdmFsaWQgdmFsdWVzOiAxLCAyLCA0LCA4IChzZWUgaHR0cDovL3d3dy5raHJvbm9zLm9yZy9vcGVuZ2xlcy9zZGsvZG9jcy9tYW4veGh0bWwvZ2xQaXhlbFN0b3JlaS54bWwpXG5cblx0XHQvLyBWYWx1ZXMgb2YgZW5jb2RpbmcgIT09IFRIUkVFLkxpbmVhckVuY29kaW5nIG9ubHkgc3VwcG9ydGVkIG9uIG1hcCwgZW52TWFwIGFuZCBlbWlzc2l2ZU1hcC5cblx0XHQvL1xuXHRcdC8vIEFsc28gY2hhbmdpbmcgdGhlIGVuY29kaW5nIGFmdGVyIGFscmVhZHkgdXNlZCBieSBhIE1hdGVyaWFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgbWFrZSB0aGUgTWF0ZXJpYWxcblx0XHQvLyB1cGRhdGUuIFlvdSBuZWVkIHRvIGV4cGxpY2l0bHkgY2FsbCBNYXRlcmlhbC5uZWVkc1VwZGF0ZSB0byB0cmlnZ2VyIGl0IHRvIHJlY29tcGlsZS5cblx0XHR0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG5cblx0XHR0aGlzLnVzZXJEYXRhID0ge307XG5cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXHRcdHRoaXMub25VcGRhdGUgPSBudWxsO1xuXG5cdFx0dGhpcy5pc1JlbmRlclRhcmdldFRleHR1cmUgPSBmYWxzZTsgLy8gaW5kaWNhdGVzIHdoZXRoZXIgYSB0ZXh0dXJlIGJlbG9uZ3MgdG8gYSByZW5kZXIgdGFyZ2V0IG9yIG5vdFxuXHRcdHRoaXMubmVlZHNQTVJFTVVwZGF0ZSA9IGZhbHNlOyAvLyBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIHRleHR1cmUgc2hvdWxkIGJlIHByb2Nlc3NlZCBieSBQTVJFTUdlbmVyYXRvciBvciBub3QgKG9ubHkgcmVsZXZhbnQgZm9yIHJlbmRlciB0YXJnZXQgdGV4dHVyZXMpXG5cblx0fVxuXG5cdGdldCBpbWFnZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnNvdXJjZS5kYXRhO1xuXG5cdH1cblxuXHRzZXQgaW1hZ2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5zb3VyY2UuZGF0YSA9IHZhbHVlO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXgoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5zZXRVdlRyYW5zZm9ybSggdGhpcy5vZmZzZXQueCwgdGhpcy5vZmZzZXQueSwgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSwgdGhpcy5yb3RhdGlvbiwgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLnNvdXJjZSA9IHNvdXJjZS5zb3VyY2U7XG5cdFx0dGhpcy5taXBtYXBzID0gc291cmNlLm1pcG1hcHMuc2xpY2UoIDAgKTtcblxuXHRcdHRoaXMubWFwcGluZyA9IHNvdXJjZS5tYXBwaW5nO1xuXG5cdFx0dGhpcy53cmFwUyA9IHNvdXJjZS53cmFwUztcblx0XHR0aGlzLndyYXBUID0gc291cmNlLndyYXBUO1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBzb3VyY2UubWFnRmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gc291cmNlLm1pbkZpbHRlcjtcblxuXHRcdHRoaXMuYW5pc290cm9weSA9IHNvdXJjZS5hbmlzb3Ryb3B5O1xuXG5cdFx0dGhpcy5mb3JtYXQgPSBzb3VyY2UuZm9ybWF0O1xuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBzb3VyY2UuaW50ZXJuYWxGb3JtYXQ7XG5cdFx0dGhpcy50eXBlID0gc291cmNlLnR5cGU7XG5cblx0XHR0aGlzLm9mZnNldC5jb3B5KCBzb3VyY2Uub2Zmc2V0ICk7XG5cdFx0dGhpcy5yZXBlYXQuY29weSggc291cmNlLnJlcGVhdCApO1xuXHRcdHRoaXMuY2VudGVyLmNvcHkoIHNvdXJjZS5jZW50ZXIgKTtcblx0XHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBzb3VyY2UuZ2VuZXJhdGVNaXBtYXBzO1xuXHRcdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHNvdXJjZS5wcmVtdWx0aXBseUFscGhhO1xuXHRcdHRoaXMuZmxpcFkgPSBzb3VyY2UuZmxpcFk7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSBzb3VyY2UudW5wYWNrQWxpZ25tZW50O1xuXHRcdHRoaXMuZW5jb2RpbmcgPSBzb3VyY2UuZW5jb2Rpbmc7XG5cblx0XHR0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgJiYgbWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge1xuXG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdUZXh0dXJlJyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnVGV4dHVyZS50b0pTT04nXG5cdFx0XHR9LFxuXG5cdFx0XHR1dWlkOiB0aGlzLnV1aWQsXG5cdFx0XHRuYW1lOiB0aGlzLm5hbWUsXG5cblx0XHRcdGltYWdlOiB0aGlzLnNvdXJjZS50b0pTT04oIG1ldGEgKS51dWlkLFxuXG5cdFx0XHRtYXBwaW5nOiB0aGlzLm1hcHBpbmcsXG5cblx0XHRcdHJlcGVhdDogWyB0aGlzLnJlcGVhdC54LCB0aGlzLnJlcGVhdC55IF0sXG5cdFx0XHRvZmZzZXQ6IFsgdGhpcy5vZmZzZXQueCwgdGhpcy5vZmZzZXQueSBdLFxuXHRcdFx0Y2VudGVyOiBbIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgXSxcblx0XHRcdHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uLFxuXG5cdFx0XHR3cmFwOiBbIHRoaXMud3JhcFMsIHRoaXMud3JhcFQgXSxcblxuXHRcdFx0Zm9ybWF0OiB0aGlzLmZvcm1hdCxcblx0XHRcdHR5cGU6IHRoaXMudHlwZSxcblx0XHRcdGVuY29kaW5nOiB0aGlzLmVuY29kaW5nLFxuXG5cdFx0XHRtaW5GaWx0ZXI6IHRoaXMubWluRmlsdGVyLFxuXHRcdFx0bWFnRmlsdGVyOiB0aGlzLm1hZ0ZpbHRlcixcblx0XHRcdGFuaXNvdHJvcHk6IHRoaXMuYW5pc290cm9weSxcblxuXHRcdFx0ZmxpcFk6IHRoaXMuZmxpcFksXG5cblx0XHRcdHByZW11bHRpcGx5QWxwaGE6IHRoaXMucHJlbXVsdGlwbHlBbHBoYSxcblx0XHRcdHVucGFja0FsaWdubWVudDogdGhpcy51bnBhY2tBbGlnbm1lbnRcblxuXHRcdH07XG5cblx0XHRpZiAoIEpTT04uc3RyaW5naWZ5KCB0aGlzLnVzZXJEYXRhICkgIT09ICd7fScgKSBvdXRwdXQudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0aWYgKCAhIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0bWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG5cdHRyYW5zZm9ybVV2KCB1diApIHtcblxuXHRcdGlmICggdGhpcy5tYXBwaW5nICE9PSBVVk1hcHBpbmcgKSByZXR1cm4gdXY7XG5cblx0XHR1di5hcHBseU1hdHJpeDMoIHRoaXMubWF0cml4ICk7XG5cblx0XHRpZiAoIHV2LnggPCAwIHx8IHV2LnggPiAxICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLndyYXBTICkge1xuXG5cdFx0XHRcdGNhc2UgUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di54ID0gdXYueCA8IDAgPyAwIDogMTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di54ICkgJSAyICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdHV2LnggPSBNYXRoLmNlaWwoIHV2LnggKSAtIHV2Lng7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2LnkgPCAwIHx8IHV2LnkgPiAxICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLndyYXBUICkge1xuXG5cdFx0XHRcdGNhc2UgUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di55ID0gdXYueSAtIE1hdGguZmxvb3IoIHV2LnkgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di55ID0gdXYueSA8IDAgPyAwIDogMTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di55ICkgJSAyICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdHV2LnkgPSBNYXRoLmNlaWwoIHV2LnkgKSAtIHV2Lnk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1di55ID0gdXYueSAtIE1hdGguZmxvb3IoIHV2LnkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmxpcFkgKSB7XG5cblx0XHRcdHV2LnkgPSAxIC0gdXYueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1djtcblxuXHR9XG5cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblx0XHRcdHRoaXMuc291cmNlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuVGV4dHVyZS5ERUZBVUxUX0lNQUdFID0gbnVsbDtcblRleHR1cmUuREVGQVVMVF9NQVBQSU5HID0gVVZNYXBwaW5nO1xuXG5UZXh0dXJlLnByb3RvdHlwZS5pc1RleHR1cmUgPSB0cnVlO1xuXG5jbGFzcyBWZWN0b3I0IHtcblxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblx0XHR0aGlzLncgPSB3O1xuXG5cdH1cblxuXHRnZXQgd2lkdGgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy56O1xuXG5cdH1cblxuXHRzZXQgd2lkdGgoIHZhbHVlICkge1xuXG5cdFx0dGhpcy56ID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCBoZWlnaHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy53O1xuXG5cdH1cblxuXHRzZXQgaGVpZ2h0KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMudyA9IHZhbHVlO1xuXG5cdH1cblxuXHRzZXQoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblx0XHR0aGlzLnogPSBzY2FsYXI7XG5cdFx0dGhpcy53ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFgoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFkoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFooIHogKSB7XG5cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFcoIHcgKSB7XG5cblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldENvbXBvbmVudCggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMzogdGhpcy53ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRDb21wb25lbnQoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGNhc2UgMzogcmV0dXJuIHRoaXMudztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncgKTtcblxuXHR9XG5cblx0Y29weSggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXHRcdHRoaXMudyA9ICggdi53ICE9PSB1bmRlZmluZWQgKSA/IHYudyA6IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cdFx0dGhpcy56ICs9IHYuejtcblx0XHR0aGlzLncgKz0gdi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXHRcdHRoaXMudyArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXHRcdHRoaXMueiA9IGEueiArIGIuejtcblx0XHR0aGlzLncgPSBhLncgKyBiLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGVkVmVjdG9yKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XG5cdFx0dGhpcy53ICs9IHYudyAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cdFx0dGhpcy56IC09IHYuejtcblx0XHR0aGlzLncgLT0gdi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXHRcdHRoaXMueiAtPSBzO1xuXHRcdHRoaXMudyAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXHRcdHRoaXMueiA9IGEueiAtIGIuejtcblx0XHR0aGlzLncgPSBhLncgLSBiLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cdFx0dGhpcy56ICo9IHYuejtcblx0XHR0aGlzLncgKj0gdi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcblx0XHR0aGlzLncgKj0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbSApIHtcblxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLnosIHcgPSB0aGlzLnc7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICogdztcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdICogdztcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSAqIHc7XG5cdFx0dGhpcy53ID0gZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKiB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0c2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvcXVhdGVybmlvblRvQW5nbGUvaW5kZXguaHRtXG5cblx0XHQvLyBxIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy53ID0gMiAqIE1hdGguYWNvcyggcS53ICk7XG5cblx0XHRjb25zdCBzID0gTWF0aC5zcXJ0KCAxIC0gcS53ICogcS53ICk7XG5cblx0XHRpZiAoIHMgPCAwLjAwMDEgKSB7XG5cblx0XHRcdHRoaXMueCA9IDE7XG5cdFx0XHR0aGlzLnkgPSAwO1xuXHRcdFx0dGhpcy56ID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMueCA9IHEueCAvIHM7XG5cdFx0XHR0aGlzLnkgPSBxLnkgLyBzO1xuXHRcdFx0dGhpcy56ID0gcS56IC8gcztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXgoIG0gKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9BbmdsZS9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHRsZXQgYW5nbGUsIHgsIHksIHo7IC8vIHZhcmlhYmxlcyBmb3IgcmVzdWx0XG5cdFx0Y29uc3QgZXBzaWxvbiA9IDAuMDEsXHRcdC8vIG1hcmdpbiB0byBhbGxvdyBmb3Igcm91bmRpbmcgZXJyb3JzXG5cdFx0XHRlcHNpbG9uMiA9IDAuMSxcdFx0Ly8gbWFyZ2luIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gMCBhbmQgMTgwIGRlZ3JlZXNcblxuXHRcdFx0dGUgPSBtLmVsZW1lbnRzLFxuXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxuXHRcdFx0bTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXSxcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdO1xuXG5cdFx0aWYgKCAoIE1hdGguYWJzKCBtMTIgLSBtMjEgKSA8IGVwc2lsb24gKSAmJlxuXHRcdCAgICAgKCBNYXRoLmFicyggbTEzIC0gbTMxICkgPCBlcHNpbG9uICkgJiZcblx0XHQgICAgICggTWF0aC5hYnMoIG0yMyAtIG0zMiApIDwgZXBzaWxvbiApICkge1xuXG5cdFx0XHQvLyBzaW5ndWxhcml0eSBmb3VuZFxuXHRcdFx0Ly8gZmlyc3QgY2hlY2sgZm9yIGlkZW50aXR5IG1hdHJpeCB3aGljaCBtdXN0IGhhdmUgKzEgZm9yIGFsbCB0ZXJtc1xuXHRcdFx0Ly8gaW4gbGVhZGluZyBkaWFnb25hbCBhbmQgemVybyBpbiBvdGhlciB0ZXJtc1xuXG5cdFx0XHRpZiAoICggTWF0aC5hYnMoIG0xMiArIG0yMSApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMTMgKyBtMzEgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTIzICsgbTMyICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0xMSArIG0yMiArIG0zMyAtIDMgKSA8IGVwc2lsb24yICkgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBzaW5ndWxhcml0eSBpcyBpZGVudGl0eSBtYXRyaXggc28gYW5nbGUgPSAwXG5cblx0XHRcdFx0dGhpcy5zZXQoIDEsIDAsIDAsIDAgKTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpczsgLy8gemVybyBhbmdsZSwgYXJiaXRyYXJ5IGF4aXNcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBvdGhlcndpc2UgdGhpcyBzaW5ndWxhcml0eSBpcyBhbmdsZSA9IDE4MFxuXG5cdFx0XHRhbmdsZSA9IE1hdGguUEk7XG5cblx0XHRcdGNvbnN0IHh4ID0gKCBtMTEgKyAxICkgLyAyO1xuXHRcdFx0Y29uc3QgeXkgPSAoIG0yMiArIDEgKSAvIDI7XG5cdFx0XHRjb25zdCB6eiA9ICggbTMzICsgMSApIC8gMjtcblx0XHRcdGNvbnN0IHh5ID0gKCBtMTIgKyBtMjEgKSAvIDQ7XG5cdFx0XHRjb25zdCB4eiA9ICggbTEzICsgbTMxICkgLyA0O1xuXHRcdFx0Y29uc3QgeXogPSAoIG0yMyArIG0zMiApIC8gNDtcblxuXHRcdFx0aWYgKCAoIHh4ID4geXkgKSAmJiAoIHh4ID4genogKSApIHtcblxuXHRcdFx0XHQvLyBtMTEgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxuXG5cdFx0XHRcdGlmICggeHggPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDA7XG5cdFx0XHRcdFx0eSA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eCA9IE1hdGguc3FydCggeHggKTtcblx0XHRcdFx0XHR5ID0geHkgLyB4O1xuXHRcdFx0XHRcdHogPSB4eiAvIHg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB5eSA+IHp6ICkge1xuXG5cdFx0XHRcdC8vIG0yMiBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtXG5cblx0XHRcdFx0aWYgKCB5eSA8IGVwc2lsb24gKSB7XG5cblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eSA9IDA7XG5cdFx0XHRcdFx0eiA9IDAuNzA3MTA2NzgxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR5ID0gTWF0aC5zcXJ0KCB5eSApO1xuXHRcdFx0XHRcdHggPSB4eSAvIHk7XG5cdFx0XHRcdFx0eiA9IHl6IC8geTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gbTMzIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm0gc28gYmFzZSByZXN1bHQgb24gdGhpc1xuXG5cdFx0XHRcdGlmICggenogPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHkgPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR6ID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eiA9IE1hdGguc3FydCggenogKTtcblx0XHRcdFx0XHR4ID0geHogLyB6O1xuXHRcdFx0XHRcdHkgPSB5eiAvIHo7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0KCB4LCB5LCB6LCBhbmdsZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpczsgLy8gcmV0dXJuIDE4MCBkZWcgcm90YXRpb25cblxuXHRcdH1cblxuXHRcdC8vIGFzIHdlIGhhdmUgcmVhY2hlZCBoZXJlIHRoZXJlIGFyZSBubyBzaW5ndWxhcml0aWVzIHNvIHdlIGNhbiBoYW5kbGUgbm9ybWFsbHlcblxuXHRcdGxldCBzID0gTWF0aC5zcXJ0KCAoIG0zMiAtIG0yMyApICogKCBtMzIgLSBtMjMgKSArXG5cdFx0XHQoIG0xMyAtIG0zMSApICogKCBtMTMgLSBtMzEgKSArXG5cdFx0XHQoIG0yMSAtIG0xMiApICogKCBtMjEgLSBtMTIgKSApOyAvLyB1c2VkIHRvIG5vcm1hbGl6ZVxuXG5cdFx0aWYgKCBNYXRoLmFicyggcyApIDwgMC4wMDEgKSBzID0gMTtcblxuXHRcdC8vIHByZXZlbnQgZGl2aWRlIGJ5IHplcm8sIHNob3VsZCBub3QgaGFwcGVuIGlmIG1hdHJpeCBpcyBvcnRob2dvbmFsIGFuZCBzaG91bGQgYmVcblx0XHQvLyBjYXVnaHQgYnkgc2luZ3VsYXJpdHkgdGVzdCBhYm92ZSwgYnV0IEkndmUgbGVmdCBpdCBpbiBqdXN0IGluIGNhc2VcblxuXHRcdHRoaXMueCA9ICggbTMyIC0gbTIzICkgLyBzO1xuXHRcdHRoaXMueSA9ICggbTEzIC0gbTMxICkgLyBzO1xuXHRcdHRoaXMueiA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdHRoaXMudyA9IE1hdGguYWNvcyggKCBtMTEgKyBtMjIgKyBtMzMgLSAxICkgLyAyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5taW4oIHRoaXMudywgdi53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5tYXgoIHRoaXMudywgdi53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW4ueiwgTWF0aC5taW4oIG1heC56LCB0aGlzLnogKSApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCBtaW4udywgTWF0aC5taW4oIG1heC53LCB0aGlzLncgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnogKSApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMudyApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkge1xuXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgbGVuZ3RoICkgKSApO1xuXG5cdH1cblxuXHRmbG9vcigpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9IE1hdGguZmxvb3IoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNlaWwoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5jZWlsKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLmNlaWwoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdW5kKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5yb3VuZCggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5yb3VuZCggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmRUb1plcm8oKSB7XG5cblx0XHR0aGlzLnggPSAoIHRoaXMueCA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy54ICkgOiBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSAoIHRoaXMueSA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy55ICkgOiBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSAoIHRoaXMueiA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy56ICkgOiBNYXRoLmZsb29yKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSAoIHRoaXMudyA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy53ICkgOiBNYXRoLmZsb29yKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRuZWdhdGUoKSB7XG5cblx0XHR0aGlzLnggPSAtIHRoaXMueDtcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcblx0XHR0aGlzLnogPSAtIHRoaXMuejtcblx0XHR0aGlzLncgPSAtIHRoaXMudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkb3QoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56ICsgdGhpcy53ICogdi53O1xuXG5cdH1cblxuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLnc7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudyApO1xuXG5cdH1cblxuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApICsgTWF0aC5hYnMoIHRoaXMueiApICsgTWF0aC5hYnMoIHRoaXMudyApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH1cblxuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cdFx0dGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTtcblx0XHR0aGlzLncgKz0gKCB2LncgLSB0aGlzLncgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogPSB2MS56ICsgKCB2Mi56IC0gdjEueiApICogYWxwaGE7XG5cdFx0dGhpcy53ID0gdjEudyArICggdjIudyAtIHYxLncgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICYmICggdi53ID09PSB0aGlzLncgKSApO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy56ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblx0XHR0aGlzLncgPSBhcnJheVsgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLnc7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblx0XHR0aGlzLncgPSBhdHRyaWJ1dGUuZ2V0VyggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb20oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueSA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy56ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLncgPSBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblx0XHR5aWVsZCB0aGlzLno7XG5cdFx0eWllbGQgdGhpcy53O1xuXG5cdH1cblxufVxuXG5WZWN0b3I0LnByb3RvdHlwZS5pc1ZlY3RvcjQgPSB0cnVlO1xuXG4vKlxuIEluIG9wdGlvbnMsIHdlIGNhbiBzcGVjaWZ5OlxuICogVGV4dHVyZSBwYXJhbWV0ZXJzIGZvciBhbiBhdXRvLWdlbmVyYXRlZCB0YXJnZXQgdGV4dHVyZVxuICogZGVwdGhCdWZmZXIvc3RlbmNpbEJ1ZmZlcjogQm9vbGVhbnMgdG8gaW5kaWNhdGUgaWYgd2Ugc2hvdWxkIGdlbmVyYXRlIHRoZXNlIGJ1ZmZlcnNcbiovXG5jbGFzcyBXZWJHTFJlbmRlclRhcmdldCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0Y29uc3RydWN0b3IoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgPSB7fSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0dGhpcy5kZXB0aCA9IDE7XG5cblx0XHR0aGlzLnNjaXNzb3IgPSBuZXcgVmVjdG9yNCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXHRcdHRoaXMuc2Npc3NvclRlc3QgPSBmYWxzZTtcblxuXHRcdHRoaXMudmlld3BvcnQgPSBuZXcgVmVjdG9yNCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0Y29uc3QgaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsIGRlcHRoOiAxIH07XG5cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZSggaW1hZ2UsIG9wdGlvbnMubWFwcGluZywgb3B0aW9ucy53cmFwUywgb3B0aW9ucy53cmFwVCwgb3B0aW9ucy5tYWdGaWx0ZXIsIG9wdGlvbnMubWluRmlsdGVyLCBvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy50eXBlLCBvcHRpb25zLmFuaXNvdHJvcHksIG9wdGlvbnMuZW5jb2RpbmcgKTtcblx0XHR0aGlzLnRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdHRoaXMudGV4dHVyZS5mbGlwWSA9IGZhbHNlO1xuXHRcdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHMgOiBmYWxzZTtcblx0XHR0aGlzLnRleHR1cmUuaW50ZXJuYWxGb3JtYXQgPSBvcHRpb25zLmludGVybmFsRm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmludGVybmFsRm9ybWF0IDogbnVsbDtcblx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gb3B0aW9ucy5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWluRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXG5cdFx0dGhpcy5kZXB0aEJ1ZmZlciA9IG9wdGlvbnMuZGVwdGhCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGhCdWZmZXIgOiB0cnVlO1xuXHRcdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zdGVuY2lsQnVmZmVyIDogZmFsc2U7XG5cblx0XHR0aGlzLmRlcHRoVGV4dHVyZSA9IG9wdGlvbnMuZGVwdGhUZXh0dXJlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoVGV4dHVyZSA6IG51bGw7XG5cblx0XHR0aGlzLnNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc2FtcGxlcyA6IDA7XG5cblx0fVxuXG5cdHNldFNpemUoIHdpZHRoLCBoZWlnaHQsIGRlcHRoID0gMSApIHtcblxuXHRcdGlmICggdGhpcy53aWR0aCAhPT0gd2lkdGggfHwgdGhpcy5oZWlnaHQgIT09IGhlaWdodCB8fCB0aGlzLmRlcHRoICE9PSBkZXB0aCApIHtcblxuXHRcdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHR0aGlzLmRlcHRoID0gZGVwdGg7XG5cblx0XHRcdHRoaXMudGV4dHVyZS5pbWFnZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0dGhpcy50ZXh0dXJlLmltYWdlLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdHRoaXMudGV4dHVyZS5pbWFnZS5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cdFx0dGhpcy5kZXB0aCA9IHNvdXJjZS5kZXB0aDtcblxuXHRcdHRoaXMudmlld3BvcnQuY29weSggc291cmNlLnZpZXdwb3J0ICk7XG5cblx0XHR0aGlzLnRleHR1cmUgPSBzb3VyY2UudGV4dHVyZS5jbG9uZSgpO1xuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0Ly8gZW5zdXJlIGltYWdlIG9iamVjdCBpcyBub3Qgc2hhcmVkLCBzZWUgIzIwMzI4XG5cblx0XHR0aGlzLnRleHR1cmUuaW1hZ2UgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnRleHR1cmUuaW1hZ2UgKTtcblxuXHRcdHRoaXMuZGVwdGhCdWZmZXIgPSBzb3VyY2UuZGVwdGhCdWZmZXI7XG5cdFx0dGhpcy5zdGVuY2lsQnVmZmVyID0gc291cmNlLnN0ZW5jaWxCdWZmZXI7XG5cblx0XHRpZiAoIHNvdXJjZS5kZXB0aFRleHR1cmUgIT09IG51bGwgKSB0aGlzLmRlcHRoVGV4dHVyZSA9IHNvdXJjZS5kZXB0aFRleHR1cmUuY2xvbmUoKTtcblxuXHRcdHRoaXMuc2FtcGxlcyA9IHNvdXJjZS5zYW1wbGVzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn1cblxuV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlLmlzV2ViR0xSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5jbGFzcyBEYXRhQXJyYXlUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIGRhdGEgPSBudWxsLCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSApIHtcblxuXHRcdHN1cGVyKCBudWxsICk7XG5cblx0XHR0aGlzLmltYWdlID0geyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9O1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHRcdHRoaXMud3JhcFIgPSBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xuXG5cdH1cblxufVxuXG5EYXRhQXJyYXlUZXh0dXJlLnByb3RvdHlwZS5pc0RhdGFBcnJheVRleHR1cmUgPSB0cnVlO1xuXG5jbGFzcyBXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApIHtcblxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR0aGlzLmRlcHRoID0gZGVwdGg7XG5cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggbnVsbCwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcblxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG5XZWJHTEFycmF5UmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5pc1dlYkdMQXJyYXlSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5jbGFzcyBEYXRhM0RUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIGRhdGEgPSBudWxsLCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSApIHtcblxuXHRcdC8vIFdlJ3JlIGdvaW5nIHRvIGFkZCAuc2V0WFhYKCkgbWV0aG9kcyBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIGxhdGVyLlxuXHRcdC8vIFVzZXJzIGNhbiBzdGlsbCBzZXQgaW4gRGF0YVRleHR1cmUzRCBkaXJlY3RseS5cblx0XHQvL1xuXHRcdC8vXHRjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGFUZXh0dXJlM0QoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XG5cdFx0Ly8gXHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSAxNjtcblx0XHQvL1xuXHRcdC8vIFNlZSAjMTQ4MzlcblxuXHRcdHN1cGVyKCBudWxsICk7XG5cblx0XHR0aGlzLmltYWdlID0geyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9O1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHRcdHRoaXMud3JhcFIgPSBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xuXG5cdH1cblxufVxuXG5EYXRhM0RUZXh0dXJlLnByb3RvdHlwZS5pc0RhdGEzRFRleHR1cmUgPSB0cnVlO1xuXG5jbGFzcyBXZWJHTDNEUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApIHtcblxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR0aGlzLmRlcHRoID0gZGVwdGg7XG5cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgRGF0YTNEVGV4dHVyZSggbnVsbCwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcblxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG5XZWJHTDNEUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5pc1dlYkdMM0RSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5jbGFzcyBXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyBleHRlbmRzIFdlYkdMUmVuZGVyVGFyZ2V0IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgY291bnQsIG9wdGlvbnMgPSB7fSApIHtcblxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy50ZXh0dXJlO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy50ZXh0dXJlWyBpIF0gPSB0ZXh0dXJlLmNsb25lKCk7XG5cdFx0XHR0aGlzLnRleHR1cmVbIGkgXS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXRTaXplKCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCA9IDEgKSB7XG5cblx0XHRpZiAoIHRoaXMud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9PSBoZWlnaHQgfHwgdGhpcy5kZXB0aCAhPT0gZGVwdGggKSB7XG5cblx0XHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy50ZXh0dXJlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMudGV4dHVyZVsgaSBdLmltYWdlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdHRoaXMudGV4dHVyZVsgaSBdLmltYWdlLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdFx0dGhpcy50ZXh0dXJlWyBpIF0uaW1hZ2UuZGVwdGggPSBkZXB0aDtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuZGlzcG9zZSgpO1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cdFx0dGhpcy5kZXB0aCA9IHNvdXJjZS5kZXB0aDtcblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCApO1xuXHRcdHRoaXMuc2Npc3Nvci5zZXQoIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICk7XG5cblx0XHR0aGlzLmRlcHRoQnVmZmVyID0gc291cmNlLmRlcHRoQnVmZmVyO1xuXHRcdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IHNvdXJjZS5zdGVuY2lsQnVmZmVyO1xuXHRcdHRoaXMuZGVwdGhUZXh0dXJlID0gc291cmNlLmRlcHRoVGV4dHVyZTtcblxuXHRcdHRoaXMudGV4dHVyZS5sZW5ndGggPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHNvdXJjZS50ZXh0dXJlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRleHR1cmVbIGkgXSA9IHNvdXJjZS50ZXh0dXJlWyBpIF0uY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5XZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cy5wcm90b3R5cGUuaXNXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyA9IHRydWU7XG5cbmNsYXNzIFF1YXRlcm5pb24ge1xuXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwLCB3ID0gMSApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX3cgPSB3O1xuXG5cdH1cblxuXHRzdGF0aWMgc2xlcnAoIHFhLCBxYiwgcW0sIHQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiBTdGF0aWMgLnNsZXJwKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIHFtLnNsZXJwUXVhdGVybmlvbnMoIHFhLCBxYiwgdCApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBxbS5zbGVycFF1YXRlcm5pb25zKCBxYSwgcWIsIHQgKTtcblxuXHR9XG5cblx0c3RhdGljIHNsZXJwRmxhdCggZHN0LCBkc3RPZmZzZXQsIHNyYzAsIHNyY09mZnNldDAsIHNyYzEsIHNyY09mZnNldDEsIHQgKSB7XG5cblx0XHQvLyBmdXp6LWZyZWUsIGFycmF5LWJhc2VkIFF1YXRlcm5pb24gU0xFUlAgb3BlcmF0aW9uXG5cblx0XHRsZXQgeDAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMCBdLFxuXHRcdFx0eTAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMSBdLFxuXHRcdFx0ejAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMiBdLFxuXHRcdFx0dzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdO1xuXG5cdFx0Y29uc3QgeDEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMCBdLFxuXHRcdFx0eTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdLFxuXHRcdFx0ejEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMiBdLFxuXHRcdFx0dzEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMyBdO1xuXG5cdFx0aWYgKCB0ID09PSAwICkge1xuXG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDAgXSA9IHgwO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MDtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejA7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcwO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDAgXSA9IHgxO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MTtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejE7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcxO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB3MCAhPT0gdzEgfHwgeDAgIT09IHgxIHx8IHkwICE9PSB5MSB8fCB6MCAhPT0gejEgKSB7XG5cblx0XHRcdGxldCBzID0gMSAtIHQ7XG5cdFx0XHRjb25zdCBjb3MgPSB4MCAqIHgxICsgeTAgKiB5MSArIHowICogejEgKyB3MCAqIHcxLFxuXHRcdFx0XHRkaXIgPSAoIGNvcyA+PSAwID8gMSA6IC0gMSApLFxuXHRcdFx0XHRzcXJTaW4gPSAxIC0gY29zICogY29zO1xuXG5cdFx0XHQvLyBTa2lwIHRoZSBTbGVycCBmb3IgdGlueSBzdGVwcyB0byBhdm9pZCBudW1lcmljIHByb2JsZW1zOlxuXHRcdFx0aWYgKCBzcXJTaW4gPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRjb25zdCBzaW4gPSBNYXRoLnNxcnQoIHNxclNpbiApLFxuXHRcdFx0XHRcdGxlbiA9IE1hdGguYXRhbjIoIHNpbiwgY29zICogZGlyICk7XG5cblx0XHRcdFx0cyA9IE1hdGguc2luKCBzICogbGVuICkgLyBzaW47XG5cdFx0XHRcdHQgPSBNYXRoLnNpbiggdCAqIGxlbiApIC8gc2luO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHREaXIgPSB0ICogZGlyO1xuXG5cdFx0XHR4MCA9IHgwICogcyArIHgxICogdERpcjtcblx0XHRcdHkwID0geTAgKiBzICsgeTEgKiB0RGlyO1xuXHRcdFx0ejAgPSB6MCAqIHMgKyB6MSAqIHREaXI7XG5cdFx0XHR3MCA9IHcwICogcyArIHcxICogdERpcjtcblxuXHRcdFx0Ly8gTm9ybWFsaXplIGluIGNhc2Ugd2UganVzdCBkaWQgYSBsZXJwOlxuXHRcdFx0aWYgKCBzID09PSAxIC0gdCApIHtcblxuXHRcdFx0XHRjb25zdCBmID0gMSAvIE1hdGguc3FydCggeDAgKiB4MCArIHkwICogeTAgKyB6MCAqIHowICsgdzAgKiB3MCApO1xuXG5cdFx0XHRcdHgwICo9IGY7XG5cdFx0XHRcdHkwICo9IGY7XG5cdFx0XHRcdHowICo9IGY7XG5cdFx0XHRcdHcwICo9IGY7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGRzdFsgZHN0T2Zmc2V0IF0gPSB4MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDtcblxuXHR9XG5cblx0c3RhdGljIG11bHRpcGx5UXVhdGVybmlvbnNGbGF0KCBkc3QsIGRzdE9mZnNldCwgc3JjMCwgc3JjT2Zmc2V0MCwgc3JjMSwgc3JjT2Zmc2V0MSApIHtcblxuXHRcdGNvbnN0IHgwID0gc3JjMFsgc3JjT2Zmc2V0MCBdO1xuXHRcdGNvbnN0IHkwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDEgXTtcblx0XHRjb25zdCB6MCA9IHNyYzBbIHNyY09mZnNldDAgKyAyIF07XG5cdFx0Y29uc3QgdzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdO1xuXG5cdFx0Y29uc3QgeDEgPSBzcmMxWyBzcmNPZmZzZXQxIF07XG5cdFx0Y29uc3QgeTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdO1xuXHRcdGNvbnN0IHoxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDIgXTtcblx0XHRjb25zdCB3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07XG5cblx0XHRkc3RbIGRzdE9mZnNldCBdID0geDAgKiB3MSArIHcwICogeDEgKyB5MCAqIHoxIC0gejAgKiB5MTtcblx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwICogdzEgKyB3MCAqIHkxICsgejAgKiB4MSAtIHgwICogejE7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MCAqIHcxICsgdzAgKiB6MSArIHgwICogeTEgLSB5MCAqIHgxO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzAgKiB3MSAtIHgwICogeDEgLSB5MCAqIHkxIC0gejAgKiB6MTtcblxuXHRcdHJldHVybiBkc3Q7XG5cblx0fVxuXG5cdGdldCB4KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0fVxuXG5cdHNldCB4KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ggPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCB5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3k7XG5cblx0fVxuXG5cdHNldCB5KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCB6KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3o7XG5cblx0fVxuXG5cdHNldCB6KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ogPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCB3KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3c7XG5cblx0fVxuXG5cdHNldCB3KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3cgPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdHNldCggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX3cgPSB3O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl93ICk7XG5cblx0fVxuXG5cdGNvcHkoIHF1YXRlcm5pb24gKSB7XG5cblx0XHR0aGlzLl94ID0gcXVhdGVybmlvbi54O1xuXHRcdHRoaXMuX3kgPSBxdWF0ZXJuaW9uLnk7XG5cdFx0dGhpcy5feiA9IHF1YXRlcm5pb24uejtcblx0XHR0aGlzLl93ID0gcXVhdGVybmlvbi53O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21FdWxlciggZXVsZXIsIHVwZGF0ZSApIHtcblxuXHRcdGlmICggISAoIGV1bGVyICYmIGV1bGVyLmlzRXVsZXIgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIG5vdyBleHBlY3RzIGFuIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuJyApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgeCA9IGV1bGVyLl94LCB5ID0gZXVsZXIuX3ksIHogPSBldWxlci5feiwgb3JkZXIgPSBldWxlci5fb3JkZXI7XG5cblx0XHQvLyBodHRwOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvXG5cdFx0Ly8gXHQyMDY5Ni1mdW5jdGlvbi10by1jb252ZXJ0LWJldHdlZW4tZGNtLWV1bGVyLWFuZ2xlcy1xdWF0ZXJuaW9ucy1hbmQtZXVsZXItdmVjdG9ycy9cblx0XHQvL1x0Y29udGVudC9TcGluQ2FsYy5tXG5cblx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcztcblx0XHRjb25zdCBzaW4gPSBNYXRoLnNpbjtcblxuXHRcdGNvbnN0IGMxID0gY29zKCB4IC8gMiApO1xuXHRcdGNvbnN0IGMyID0gY29zKCB5IC8gMiApO1xuXHRcdGNvbnN0IGMzID0gY29zKCB6IC8gMiApO1xuXG5cdFx0Y29uc3QgczEgPSBzaW4oIHggLyAyICk7XG5cdFx0Y29uc3QgczIgPSBzaW4oIHkgLyAyICk7XG5cdFx0Y29uc3QgczMgPSBzaW4oIHogLyAyICk7XG5cblx0XHRzd2l0Y2ggKCBvcmRlciApIHtcblxuXHRcdFx0Y2FzZSAnWFlaJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1lYWic6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdaWFknOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWllYJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1laWCc6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdYWlknOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIGVuY291bnRlcmVkIGFuIHVua25vd24gb3JkZXI6ICcgKyBvcmRlciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1cGRhdGUgIT09IGZhbHNlICkgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuXHRcdGNvbnN0IGhhbGZBbmdsZSA9IGFuZ2xlIC8gMiwgcyA9IE1hdGguc2luKCBoYWxmQW5nbGUgKTtcblxuXHRcdHRoaXMuX3ggPSBheGlzLnggKiBzO1xuXHRcdHRoaXMuX3kgPSBheGlzLnkgKiBzO1xuXHRcdHRoaXMuX3ogPSBheGlzLnogKiBzO1xuXHRcdHRoaXMuX3cgPSBNYXRoLmNvcyggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHRjb25zdCB0ZSA9IG0uZWxlbWVudHMsXG5cblx0XHRcdG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF0sXG5cdFx0XHRtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdLFxuXHRcdFx0bTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF0sXG5cblx0XHRcdHRyYWNlID0gbTExICsgbTIyICsgbTMzO1xuXG5cdFx0aWYgKCB0cmFjZSA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAwLjUgLyBNYXRoLnNxcnQoIHRyYWNlICsgMS4wICk7XG5cblx0XHRcdHRoaXMuX3cgPSAwLjI1IC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0zMiAtIG0yMyApICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMyAtIG0zMSApICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMSAtIG0xMiApICogcztcblxuXHRcdH0gZWxzZSBpZiAoIG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0xMSAtIG0yMiAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cblx0XHR9IGVsc2UgaWYgKCBtMjIgPiBtMzMgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0yMiAtIG0xMSAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMzMgLSBtMTEgLSBtMjIgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTEzICsgbTMxICkgLyBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTIzICsgbTMyICkgLyBzO1xuXHRcdFx0dGhpcy5feiA9IDAuMjUgKiBzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Vbml0VmVjdG9ycyggdkZyb20sIHZUbyApIHtcblxuXHRcdC8vIGFzc3VtZXMgZGlyZWN0aW9uIHZlY3RvcnMgdkZyb20gYW5kIHZUbyBhcmUgbm9ybWFsaXplZFxuXG5cdFx0bGV0IHIgPSB2RnJvbS5kb3QoIHZUbyApICsgMTtcblxuXHRcdGlmICggciA8IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHQvLyB2RnJvbSBhbmQgdlRvIHBvaW50IGluIG9wcG9zaXRlIGRpcmVjdGlvbnNcblxuXHRcdFx0ciA9IDA7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIHZGcm9tLnggKSA+IE1hdGguYWJzKCB2RnJvbS56ICkgKSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IC0gdkZyb20ueTtcblx0XHRcdFx0dGhpcy5feSA9IHZGcm9tLng7XG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xuXHRcdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdFx0dGhpcy5feSA9IC0gdkZyb20uejtcblx0XHRcdFx0dGhpcy5feiA9IHZGcm9tLnk7XG5cdFx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBjcm9zc1ZlY3RvcnMoIHZGcm9tLCB2VG8gKTsgLy8gaW5saW5lZCB0byBhdm9pZCBjeWNsaWMgZGVwZW5kZW5jeSBvbiBWZWN0b3IzXG5cblx0XHRcdHRoaXMuX3ggPSB2RnJvbS55ICogdlRvLnogLSB2RnJvbS56ICogdlRvLnk7XG5cdFx0XHR0aGlzLl95ID0gdkZyb20ueiAqIHZUby54IC0gdkZyb20ueCAqIHZUby56O1xuXHRcdFx0dGhpcy5feiA9IHZGcm9tLnggKiB2VG8ueSAtIHZGcm9tLnkgKiB2VG8ueDtcblx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdGFuZ2xlVG8oIHEgKSB7XG5cblx0XHRyZXR1cm4gMiAqIE1hdGguYWNvcyggTWF0aC5hYnMoIGNsYW1wKCB0aGlzLmRvdCggcSApLCAtIDEsIDEgKSApICk7XG5cblx0fVxuXG5cdHJvdGF0ZVRvd2FyZHMoIHEsIHN0ZXAgKSB7XG5cblx0XHRjb25zdCBhbmdsZSA9IHRoaXMuYW5nbGVUbyggcSApO1xuXG5cdFx0aWYgKCBhbmdsZSA9PT0gMCApIHJldHVybiB0aGlzO1xuXG5cdFx0Y29uc3QgdCA9IE1hdGgubWluKCAxLCBzdGVwIC8gYW5nbGUgKTtcblxuXHRcdHRoaXMuc2xlcnAoIHEsIHQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpZGVudGl0eSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMSApO1xuXG5cdH1cblxuXHRpbnZlcnQoKSB7XG5cblx0XHQvLyBxdWF0ZXJuaW9uIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdFx0cmV0dXJuIHRoaXMuY29uanVnYXRlKCk7XG5cblx0fVxuXG5cdGNvbmp1Z2F0ZSgpIHtcblxuXHRcdHRoaXMuX3ggKj0gLSAxO1xuXHRcdHRoaXMuX3kgKj0gLSAxO1xuXHRcdHRoaXMuX3ogKj0gLSAxO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRvdCggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLl94ICogdi5feCArIHRoaXMuX3kgKiB2Ll95ICsgdGhpcy5feiAqIHYuX3ogKyB0aGlzLl93ICogdi5fdztcblxuXHR9XG5cblx0bGVuZ3RoU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3c7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93ICk7XG5cblx0fVxuXG5cdG5vcm1hbGl6ZSgpIHtcblxuXHRcdGxldCBsID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdGlmICggbCA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHR0aGlzLl95ID0gMDtcblx0XHRcdHRoaXMuX3ogPSAwO1xuXHRcdFx0dGhpcy5fdyA9IDE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsID0gMSAvIGw7XG5cblx0XHRcdHRoaXMuX3ggPSB0aGlzLl94ICogbDtcblx0XHRcdHRoaXMuX3kgPSB0aGlzLl95ICogbDtcblx0XHRcdHRoaXMuX3ogPSB0aGlzLl96ICogbDtcblx0XHRcdHRoaXMuX3cgPSB0aGlzLl93ICogbDtcblxuXHRcdH1cblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggcSwgcCApIHtcblxuXHRcdGlmICggcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVF1YXRlcm5pb25zKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCBxLCBwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCB0aGlzLCBxICk7XG5cblx0fVxuXG5cdHByZW11bHRpcGx5KCBxICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgdGhpcyApO1xuXG5cdH1cblxuXHRtdWx0aXBseVF1YXRlcm5pb25zKCBhLCBiICkge1xuXG5cdFx0Ly8gZnJvbSBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL2NvZGUvaW5kZXguaHRtXG5cblx0XHRjb25zdCBxYXggPSBhLl94LCBxYXkgPSBhLl95LCBxYXogPSBhLl96LCBxYXcgPSBhLl93O1xuXHRcdGNvbnN0IHFieCA9IGIuX3gsIHFieSA9IGIuX3ksIHFieiA9IGIuX3osIHFidyA9IGIuX3c7XG5cblx0XHR0aGlzLl94ID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5O1xuXHRcdHRoaXMuX3kgPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7XG5cdFx0dGhpcy5feiA9IHFheiAqIHFidyArIHFhdyAqIHFieiArIHFheCAqIHFieSAtIHFheSAqIHFieDtcblx0XHR0aGlzLl93ID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNsZXJwKCBxYiwgdCApIHtcblxuXHRcdGlmICggdCA9PT0gMCApIHJldHVybiB0aGlzO1xuXHRcdGlmICggdCA9PT0gMSApIHJldHVybiB0aGlzLmNvcHkoIHFiICk7XG5cblx0XHRjb25zdCB4ID0gdGhpcy5feCwgeSA9IHRoaXMuX3ksIHogPSB0aGlzLl96LCB3ID0gdGhpcy5fdztcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXG5cblx0XHRsZXQgY29zSGFsZlRoZXRhID0gdyAqIHFiLl93ICsgeCAqIHFiLl94ICsgeSAqIHFiLl95ICsgeiAqIHFiLl96O1xuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPCAwICkge1xuXG5cdFx0XHR0aGlzLl93ID0gLSBxYi5fdztcblx0XHRcdHRoaXMuX3ggPSAtIHFiLl94O1xuXHRcdFx0dGhpcy5feSA9IC0gcWIuX3k7XG5cdFx0XHR0aGlzLl96ID0gLSBxYi5fejtcblxuXHRcdFx0Y29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvcHkoIHFiICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNvc0hhbGZUaGV0YSA+PSAxLjAgKSB7XG5cblx0XHRcdHRoaXMuX3cgPSB3O1xuXHRcdFx0dGhpcy5feCA9IHg7XG5cdFx0XHR0aGlzLl95ID0geTtcblx0XHRcdHRoaXMuX3ogPSB6O1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IHNxclNpbkhhbGZUaGV0YSA9IDEuMCAtIGNvc0hhbGZUaGV0YSAqIGNvc0hhbGZUaGV0YTtcblxuXHRcdGlmICggc3FyU2luSGFsZlRoZXRhIDw9IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRjb25zdCBzID0gMSAtIHQ7XG5cdFx0XHR0aGlzLl93ID0gcyAqIHcgKyB0ICogdGhpcy5fdztcblx0XHRcdHRoaXMuX3ggPSBzICogeCArIHQgKiB0aGlzLl94O1xuXHRcdFx0dGhpcy5feSA9IHMgKiB5ICsgdCAqIHRoaXMuX3k7XG5cdFx0XHR0aGlzLl96ID0gcyAqIHogKyB0ICogdGhpcy5fejtcblxuXHRcdFx0dGhpcy5ub3JtYWxpemUoKTtcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoIHNxclNpbkhhbGZUaGV0YSApO1xuXHRcdGNvbnN0IGhhbGZUaGV0YSA9IE1hdGguYXRhbjIoIHNpbkhhbGZUaGV0YSwgY29zSGFsZlRoZXRhICk7XG5cdFx0Y29uc3QgcmF0aW9BID0gTWF0aC5zaW4oICggMSAtIHQgKSAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhLFxuXHRcdFx0cmF0aW9CID0gTWF0aC5zaW4oIHQgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YTtcblxuXHRcdHRoaXMuX3cgPSAoIHcgKiByYXRpb0EgKyB0aGlzLl93ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feCA9ICggeCAqIHJhdGlvQSArIHRoaXMuX3ggKiByYXRpb0IgKTtcblx0XHR0aGlzLl95ID0gKCB5ICogcmF0aW9BICsgdGhpcy5feSAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3ogPSAoIHogKiByYXRpb0EgKyB0aGlzLl96ICogcmF0aW9CICk7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2xlcnBRdWF0ZXJuaW9ucyggcWEsIHFiLCB0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weSggcWEgKS5zbGVycCggcWIsIHQgKTtcblxuXHR9XG5cblx0cmFuZG9tKCkge1xuXG5cdFx0Ly8gRGVyaXZlZCBmcm9tIGh0dHA6Ly9wbGFubmluZy5jcy51aXVjLmVkdS9ub2RlMTk4Lmh0bWxcblx0XHQvLyBOb3RlLCB0aGlzIHNvdXJjZSB1c2VzIHcsIHgsIHksIHogb3JkZXJpbmcsXG5cdFx0Ly8gc28gd2Ugc3dhcCB0aGUgb3JkZXIgYmVsb3cuXG5cblx0XHRjb25zdCB1MSA9IE1hdGgucmFuZG9tKCk7XG5cdFx0Y29uc3Qgc3FydDF1MSA9IE1hdGguc3FydCggMSAtIHUxICk7XG5cdFx0Y29uc3Qgc3FydHUxID0gTWF0aC5zcXJ0KCB1MSApO1xuXG5cdFx0Y29uc3QgdTIgPSAyICogTWF0aC5QSSAqIE1hdGgucmFuZG9tKCk7XG5cblx0XHRjb25zdCB1MyA9IDIgKiBNYXRoLlBJICogTWF0aC5yYW5kb20oKTtcblxuXHRcdHJldHVybiB0aGlzLnNldChcblx0XHRcdHNxcnQxdTEgKiBNYXRoLmNvcyggdTIgKSxcblx0XHRcdHNxcnR1MSAqIE1hdGguc2luKCB1MyApLFxuXHRcdFx0c3FydHUxICogTWF0aC5jb3MoIHUzICksXG5cdFx0XHRzcXJ0MXUxICogTWF0aC5zaW4oIHUyICksXG5cdFx0KTtcblxuXHR9XG5cblx0ZXF1YWxzKCBxdWF0ZXJuaW9uICkge1xuXG5cdFx0cmV0dXJuICggcXVhdGVybmlvbi5feCA9PT0gdGhpcy5feCApICYmICggcXVhdGVybmlvbi5feSA9PT0gdGhpcy5feSApICYmICggcXVhdGVybmlvbi5feiA9PT0gdGhpcy5feiApICYmICggcXVhdGVybmlvbi5fdyA9PT0gdGhpcy5fdyApO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLl95ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLl96ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblx0XHR0aGlzLl93ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5feDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5feTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5fejtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy5fdztcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCApIHtcblxuXHRcdHRoaXMuX3ggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLl95ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy5feiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApO1xuXHRcdHRoaXMuX3cgPSBhdHRyaWJ1dGUuZ2V0VyggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRfb25DaGFuZ2UoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdF9vbkNoYW5nZUNhbGxiYWNrKCkge31cblxufVxuXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5pc1F1YXRlcm5pb24gPSB0cnVlO1xuXG5jbGFzcyBWZWN0b3IzIHtcblxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXG5cdH1cblxuXHRzZXQoIHgsIHksIHogKSB7XG5cblx0XHRpZiAoIHogPT09IHVuZGVmaW5lZCApIHogPSB0aGlzLno7IC8vIHNwcml0ZS5zY2FsZS5zZXQoeCx5KVxuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXHRcdHRoaXMueiA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYKCB4ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRZKCB5ICkge1xuXG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRaKCB6ICkge1xuXG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldENvbXBvbmVudCggaW5kZXggKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xuXHRcdFx0Y2FzZSAyOiByZXR1cm4gdGhpcy56O1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55LCB0aGlzLnogKTtcblxuXHR9XG5cblx0Y29weSggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZCggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXHRcdHRoaXMueiArPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cdFx0dGhpcy56ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICsgYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXHRcdHRoaXMueiArPSB2LnogKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YiggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54IC09IHYueDtcblx0XHR0aGlzLnkgLT0gdi55O1xuXHRcdHRoaXMueiAtPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cdFx0dGhpcy56IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5VmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cdFx0dGhpcy56ICo9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xuXHRcdHRoaXMueiAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICogYi54O1xuXHRcdHRoaXMueSA9IGEueSAqIGIueTtcblx0XHR0aGlzLnogPSBhLnogKiBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlFdWxlciggZXVsZXIgKSB7XG5cblx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuYXBwbHlFdWxlcigpIG5vdyBleHBlY3RzIGFuIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiQ0LnNldEZyb21FdWxlciggZXVsZXIgKSApO1xuXG5cdH1cblxuXHRhcHBseUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uJDQuc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSApO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDMoIG0gKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDggXSAqIHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDMoIG0gKS5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdGNvbnN0IHcgPSAxIC8gKCBlWyAzIF0gKiB4ICsgZVsgNyBdICogeSArIGVbIDExIF0gKiB6ICsgZVsgMTUgXSApO1xuXG5cdFx0dGhpcy54ID0gKCBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICkgKiB3O1xuXHRcdHRoaXMueSA9ICggZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSApICogdztcblx0XHR0aGlzLnogPSAoIGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHogKyBlWyAxNCBdICkgKiB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5UXVhdGVybmlvbiggcSApIHtcblxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0Y29uc3QgcXggPSBxLngsIHF5ID0gcS55LCBxeiA9IHEueiwgcXcgPSBxLnc7XG5cblx0XHQvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvclxuXG5cdFx0Y29uc3QgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XG5cdFx0Y29uc3QgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XG5cdFx0Y29uc3QgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG5cdFx0Y29uc3QgaXcgPSAtIHF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcblxuXHRcdC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcblxuXHRcdHRoaXMueCA9IGl4ICogcXcgKyBpdyAqIC0gcXggKyBpeSAqIC0gcXogLSBpeiAqIC0gcXk7XG5cdFx0dGhpcy55ID0gaXkgKiBxdyArIGl3ICogLSBxeSArIGl6ICogLSBxeCAtIGl4ICogLSBxejtcblx0XHR0aGlzLnogPSBpeiAqIHF3ICsgaXcgKiAtIHF6ICsgaXggKiAtIHF5IC0gaXkgKiAtIHF4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHByb2plY3QoIGNhbWVyYSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHR9XG5cblx0dW5wcm9qZWN0KCBjYW1lcmEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0fVxuXG5cdHRyYW5zZm9ybURpcmVjdGlvbiggbSApIHtcblxuXHRcdC8vIGlucHV0OiBUSFJFRS5NYXRyaXg0IGFmZmluZSBtYXRyaXhcblx0XHQvLyB2ZWN0b3IgaW50ZXJwcmV0ZWQgYXMgYSBkaXJlY3Rpb25cblxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHo7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6O1xuXHRcdHRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHo7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0ZGl2aWRlKCB2ICkge1xuXG5cdFx0dGhpcy54IC89IHYueDtcblx0XHR0aGlzLnkgLz0gdi55O1xuXHRcdHRoaXMueiAvPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGl2aWRlU2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH1cblxuXHRtaW4oIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1pbiggdGhpcy56LCB2LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYXgoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggdGhpcy56LCB2LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcCggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pbi56LCBNYXRoLm1pbiggbWF4LnosIHRoaXMueiApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXBTY2FsYXIoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueiApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkge1xuXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgbGVuZ3RoICkgKSApO1xuXG5cdH1cblxuXHRmbG9vcigpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNlaWwoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5jZWlsKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZCgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgucm91bmQoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdW5kVG9aZXJvKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gKCB0aGlzLnogPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueiApIDogTWF0aC5mbG9vciggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bmVnYXRlKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZG90KCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYuejtcblxuXHR9XG5cblx0Ly8gVE9ETyBsZW5ndGhTcXVhcmVkP1xuXG5cdGxlbmd0aFNxKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMuejtcblxuXHR9XG5cblx0bGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICk7XG5cblx0fVxuXG5cdG1hbmhhdHRhbkxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICk7XG5cblx0fVxuXG5cdG5vcm1hbGl6ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fVxuXG5cdHNldExlbmd0aCggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH1cblxuXHRsZXJwKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogKz0gKCB2LnogLSB0aGlzLnogKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogPSB2MS56ICsgKCB2Mi56IC0gdjEueiApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y3Jvc3MoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmNyb3NzKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuY3Jvc3NWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5jcm9zc1ZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmNyb3NzVmVjdG9ycyggdGhpcywgdiApO1xuXG5cdH1cblxuXHRjcm9zc1ZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHRjb25zdCBheCA9IGEueCwgYXkgPSBhLnksIGF6ID0gYS56O1xuXHRcdGNvbnN0IGJ4ID0gYi54LCBieSA9IGIueSwgYnogPSBiLno7XG5cblx0XHR0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTtcblx0XHR0aGlzLnkgPSBheiAqIGJ4IC0gYXggKiBiejtcblx0XHR0aGlzLnogPSBheCAqIGJ5IC0gYXkgKiBieDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRwcm9qZWN0T25WZWN0b3IoIHYgKSB7XG5cblx0XHRjb25zdCBkZW5vbWluYXRvciA9IHYubGVuZ3RoU3EoKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdGNvbnN0IHNjYWxhciA9IHYuZG90KCB0aGlzICkgLyBkZW5vbWluYXRvcjtcblxuXHRcdHJldHVybiB0aGlzLmNvcHkoIHYgKS5tdWx0aXBseVNjYWxhciggc2NhbGFyICk7XG5cblx0fVxuXG5cdHByb2plY3RPblBsYW5lKCBwbGFuZU5vcm1hbCApIHtcblxuXHRcdF92ZWN0b3IkYy5jb3B5KCB0aGlzICkucHJvamVjdE9uVmVjdG9yKCBwbGFuZU5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViKCBfdmVjdG9yJGMgKTtcblxuXHR9XG5cblx0cmVmbGVjdCggbm9ybWFsICkge1xuXG5cdFx0Ly8gcmVmbGVjdCBpbmNpZGVudCB2ZWN0b3Igb2ZmIHBsYW5lIG9ydGhvZ29uYWwgdG8gbm9ybWFsXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdFx0cmV0dXJuIHRoaXMuc3ViKCBfdmVjdG9yJGMuY29weSggbm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIDIgKiB0aGlzLmRvdCggbm9ybWFsICkgKSApO1xuXG5cdH1cblxuXHRhbmdsZVRvKCB2ICkge1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiBNYXRoLlBJIC8gMjtcblxuXHRcdGNvbnN0IHRoZXRhID0gdGhpcy5kb3QoIHYgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0Ly8gY2xhbXAsIHRvIGhhbmRsZSBudW1lcmljYWwgcHJvYmxlbXNcblxuXHRcdHJldHVybiBNYXRoLmFjb3MoIGNsYW1wKCB0aGV0YSwgLSAxLCAxICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUbyggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvU3F1YXJlZCggdiApIHtcblxuXHRcdGNvbnN0IGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueSwgZHogPSB0aGlzLnogLSB2Lno7XG5cblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6O1xuXG5cdH1cblxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKSArIE1hdGguYWJzKCB0aGlzLnogLSB2LnogKTtcblxuXHR9XG5cblx0c2V0RnJvbVNwaGVyaWNhbCggcyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21TcGhlcmljYWxDb29yZHMoIHMucmFkaXVzLCBzLnBoaSwgcy50aGV0YSApO1xuXG5cdH1cblxuXHRzZXRGcm9tU3BoZXJpY2FsQ29vcmRzKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7XG5cblx0XHRjb25zdCBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbiggcGhpICkgKiByYWRpdXM7XG5cblx0XHR0aGlzLnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNvcyggcGhpICkgKiByYWRpdXM7XG5cdFx0dGhpcy56ID0gc2luUGhpUmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUN5bGluZHJpY2FsKCBjICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKCBjLnJhZGl1cywgYy50aGV0YSwgYy55ICk7XG5cblx0fVxuXG5cdHNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMueCA9IHJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApO1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtICkge1xuXG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAxMiBdO1xuXHRcdHRoaXMueSA9IGVbIDEzIF07XG5cdFx0dGhpcy56ID0gZVsgMTQgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tTWF0cml4U2NhbGUoIG0gKSB7XG5cblx0XHRjb25zdCBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN5ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc3ogPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTtcblxuXHRcdHRoaXMueCA9IHN4O1xuXHRcdHRoaXMueSA9IHN5O1xuXHRcdHRoaXMueiA9IHN6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXhDb2x1bW4oIG0sIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUFycmF5KCBtLmVsZW1lbnRzLCBpbmRleCAqIDQgKTtcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeDNDb2x1bW4oIG0sIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUFycmF5KCBtLmVsZW1lbnRzLCBpbmRleCAqIDMgKTtcblxuXHR9XG5cblx0c2V0RnJvbUV1bGVyKCBlICkge1xuXG5cdFx0dGhpcy54ID0gZS5feDtcblx0XHR0aGlzLnkgPSBlLl95O1xuXHRcdHRoaXMueiA9IGUuX3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCB2ICkge1xuXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSAmJiAoIHYueiA9PT0gdGhpcy56ICkgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb20oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueSA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy56ID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb21EaXJlY3Rpb24oKSB7XG5cblx0XHQvLyBEZXJpdmVkIGZyb20gaHR0cHM6Ly9tYXRod29ybGQud29sZnJhbS5jb20vU3BoZXJlUG9pbnRQaWNraW5nLmh0bWxcblxuXHRcdGNvbnN0IHUgPSAoIE1hdGgucmFuZG9tKCkgLSAwLjUgKSAqIDI7XG5cdFx0Y29uc3QgdCA9IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMjtcblx0XHRjb25zdCBmID0gTWF0aC5zcXJ0KCAxIC0gdSAqKiAyICk7XG5cblx0XHR0aGlzLnggPSBmICogTWF0aC5jb3MoIHQgKTtcblx0XHR0aGlzLnkgPSBmICogTWF0aC5zaW4oIHQgKTtcblx0XHR0aGlzLnogPSB1O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblx0XHR5aWVsZCB0aGlzLno7XG5cblx0fVxuXG59XG5cblZlY3RvcjMucHJvdG90eXBlLmlzVmVjdG9yMyA9IHRydWU7XG5cbmNvbnN0IF92ZWN0b3IkYyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9xdWF0ZXJuaW9uJDQgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5cbmNsYXNzIEJveDMge1xuXG5cdGNvbnN0cnVjdG9yKCBtaW4gPSBuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApLCBtYXggPSBuZXcgVmVjdG9yMyggLSBJbmZpbml0eSwgLSBJbmZpbml0eSwgLSBJbmZpbml0eSApICkge1xuXG5cdFx0dGhpcy5taW4gPSBtaW47XG5cdFx0dGhpcy5tYXggPSBtYXg7XG5cblx0fVxuXG5cdHNldCggbWluLCBtYXggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBtaW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBtYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tQXJyYXkoIGFycmF5ICkge1xuXG5cdFx0bGV0IG1pblggPSArIEluZmluaXR5O1xuXHRcdGxldCBtaW5ZID0gKyBJbmZpbml0eTtcblx0XHRsZXQgbWluWiA9ICsgSW5maW5pdHk7XG5cblx0XHRsZXQgbWF4WCA9IC0gSW5maW5pdHk7XG5cdFx0bGV0IG1heFkgPSAtIEluZmluaXR5O1xuXHRcdGxldCBtYXhaID0gLSBJbmZpbml0eTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0Y29uc3QgeCA9IGFycmF5WyBpIF07XG5cdFx0XHRjb25zdCB5ID0gYXJyYXlbIGkgKyAxIF07XG5cdFx0XHRjb25zdCB6ID0gYXJyYXlbIGkgKyAyIF07XG5cblx0XHRcdGlmICggeCA8IG1pblggKSBtaW5YID0geDtcblx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdGlmICggeiA8IG1pblogKSBtaW5aID0gejtcblxuXHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0aWYgKCB5ID4gbWF4WSApIG1heFkgPSB5O1xuXHRcdFx0aWYgKCB6ID4gbWF4WiApIG1heFogPSB6O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5taW4uc2V0KCBtaW5YLCBtaW5ZLCBtaW5aICk7XG5cdFx0dGhpcy5tYXguc2V0KCBtYXhYLCBtYXhZLCBtYXhaICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0bGV0IG1pblggPSArIEluZmluaXR5O1xuXHRcdGxldCBtaW5ZID0gKyBJbmZpbml0eTtcblx0XHRsZXQgbWluWiA9ICsgSW5maW5pdHk7XG5cblx0XHRsZXQgbWF4WCA9IC0gSW5maW5pdHk7XG5cdFx0bGV0IG1heFkgPSAtIEluZmluaXR5O1xuXHRcdGxldCBtYXhaID0gLSBJbmZpbml0eTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHggPSBhdHRyaWJ1dGUuZ2V0WCggaSApO1xuXHRcdFx0Y29uc3QgeSA9IGF0dHJpYnV0ZS5nZXRZKCBpICk7XG5cdFx0XHRjb25zdCB6ID0gYXR0cmlidXRlLmdldFooIGkgKTtcblxuXHRcdFx0aWYgKCB4IDwgbWluWCApIG1pblggPSB4O1xuXHRcdFx0aWYgKCB5IDwgbWluWSApIG1pblkgPSB5O1xuXHRcdFx0aWYgKCB6IDwgbWluWiApIG1pblogPSB6O1xuXG5cdFx0XHRpZiAoIHggPiBtYXhYICkgbWF4WCA9IHg7XG5cdFx0XHRpZiAoIHkgPiBtYXhZICkgbWF4WSA9IHk7XG5cdFx0XHRpZiAoIHogPiBtYXhaICkgbWF4WiA9IHo7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1pbi5zZXQoIG1pblgsIG1pblksIG1pblogKTtcblx0XHR0aGlzLm1heC5zZXQoIG1heFgsIG1heFksIG1heFogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBwb2ludHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21DZW50ZXJBbmRTaXplKCBjZW50ZXIsIHNpemUgKSB7XG5cblx0XHRjb25zdCBoYWxmU2l6ZSA9IF92ZWN0b3IkYi5jb3B5KCBzaXplICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGNlbnRlciApLmFkZCggaGFsZlNpemUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tT2JqZWN0KCBvYmplY3QsIHByZWNpc2UgPSBmYWxzZSApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRyZXR1cm4gdGhpcy5leHBhbmRCeU9iamVjdCggb2JqZWN0LCBwcmVjaXNlICk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXguY29weSggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VFbXB0eSgpIHtcblxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gdGhpcy5taW4ueiA9ICsgSW5maW5pdHk7XG5cdFx0dGhpcy5tYXgueCA9IHRoaXMubWF4LnkgPSB0aGlzLm1heC56ID0gLSBJbmZpbml0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpc0VtcHR5KCkge1xuXG5cdFx0Ly8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXNcblxuXHRcdHJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApIHx8ICggdGhpcy5tYXgueiA8IHRoaXMubWluLnogKTtcblxuXHR9XG5cblx0Z2V0Q2VudGVyKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5taW4sIHRoaXMubWF4ICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH1cblxuXHRnZXRTaXplKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fVxuXG5cdGV4cGFuZEJ5UG9pbnQoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeVZlY3RvciggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4cGFuZEJ5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeU9iamVjdCggb2JqZWN0LCBwcmVjaXNlID0gZmFsc2UgKSB7XG5cblx0XHQvLyBDb21wdXRlcyB0aGUgd29ybGQtYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCBvZiBhbiBvYmplY3QgKGluY2x1ZGluZyBpdHMgY2hpbGRyZW4pLFxuXHRcdC8vIGFjY291bnRpbmcgZm9yIGJvdGggdGhlIG9iamVjdCdzLCBhbmQgY2hpbGRyZW4ncywgd29ybGQgdHJhbnNmb3Jtc1xuXG5cdFx0b2JqZWN0LnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgZmFsc2UgKTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0aWYgKCBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHByZWNpc2UgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcyAhPSB1bmRlZmluZWQgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9zaXRpb24uY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0X3ZlY3RvciRiLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpICkuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblx0XHRcdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkYiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdF9ib3gkMy5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ0JveCApO1xuXHRcdFx0XHRfYm94JDMuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR0aGlzLnVuaW9uKCBfYm94JDMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5T2JqZWN0KCBjaGlsZHJlblsgaSBdLCBwcmVjaXNlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gcG9pbnQueCA8IHRoaXMubWluLnggfHwgcG9pbnQueCA+IHRoaXMubWF4LnggfHxcblx0XHRcdHBvaW50LnkgPCB0aGlzLm1pbi55IHx8IHBvaW50LnkgPiB0aGlzLm1heC55IHx8XG5cdFx0XHRwb2ludC56IDwgdGhpcy5taW4ueiB8fCBwb2ludC56ID4gdGhpcy5tYXgueiA/IGZhbHNlIDogdHJ1ZTtcblxuXHR9XG5cblx0Y29udGFpbnNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiB0aGlzLm1pbi54IDw9IGJveC5taW4ueCAmJiBib3gubWF4LnggPD0gdGhpcy5tYXgueCAmJlxuXHRcdFx0dGhpcy5taW4ueSA8PSBib3gubWluLnkgJiYgYm94Lm1heC55IDw9IHRoaXMubWF4LnkgJiZcblx0XHRcdHRoaXMubWluLnogPD0gYm94Lm1pbi56ICYmIGJveC5tYXgueiA8PSB0aGlzLm1heC56O1xuXG5cdH1cblxuXHRnZXRQYXJhbWV0ZXIoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHQvLyBUaGlzIGNhbiBwb3RlbnRpYWxseSBoYXZlIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIGJveFxuXHRcdC8vIGhhcyBhIHNpemUgZGltZW5zaW9uIG9mIDAuXG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldChcblx0XHRcdCggcG9pbnQueCAtIHRoaXMubWluLnggKSAvICggdGhpcy5tYXgueCAtIHRoaXMubWluLnggKSxcblx0XHRcdCggcG9pbnQueSAtIHRoaXMubWluLnkgKSAvICggdGhpcy5tYXgueSAtIHRoaXMubWluLnkgKSxcblx0XHRcdCggcG9pbnQueiAtIHRoaXMubWluLnogKSAvICggdGhpcy5tYXgueiAtIHRoaXMubWluLnogKVxuXHRcdCk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdC8vIHVzaW5nIDYgc3BsaXR0aW5nIHBsYW5lcyB0byBydWxlIG91dCBpbnRlcnNlY3Rpb25zLlxuXHRcdHJldHVybiBib3gubWF4LnggPCB0aGlzLm1pbi54IHx8IGJveC5taW4ueCA+IHRoaXMubWF4LnggfHxcblx0XHRcdGJveC5tYXgueSA8IHRoaXMubWluLnkgfHwgYm94Lm1pbi55ID4gdGhpcy5tYXgueSB8fFxuXHRcdFx0Ym94Lm1heC56IDwgdGhpcy5taW4ueiB8fCBib3gubWluLnogPiB0aGlzLm1heC56ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHQvLyBGaW5kIHRoZSBwb2ludCBvbiB0aGUgQUFCQiBjbG9zZXN0IHRvIHRoZSBzcGhlcmUgY2VudGVyLlxuXHRcdHRoaXMuY2xhbXBQb2ludCggc3BoZXJlLmNlbnRlciwgX3ZlY3RvciRiICk7XG5cblx0XHQvLyBJZiB0aGF0IHBvaW50IGlzIGluc2lkZSB0aGUgc3BoZXJlLCB0aGUgQUFCQiBhbmQgc3BoZXJlIGludGVyc2VjdC5cblx0XHRyZXR1cm4gX3ZlY3RvciRiLmRpc3RhbmNlVG9TcXVhcmVkKCBzcGhlcmUuY2VudGVyICkgPD0gKCBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cyApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzUGxhbmUoIHBsYW5lICkge1xuXG5cdFx0Ly8gV2UgY29tcHV0ZSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkb3QgcHJvZHVjdCB2YWx1ZXMuIElmIHRob3NlIHZhbHVlc1xuXHRcdC8vIGFyZSBvbiB0aGUgc2FtZSBzaWRlIChiYWNrIG9yIGZyb250KSBvZiB0aGUgcGxhbmUsIHRoZW4gdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuXG5cdFx0bGV0IG1pbiwgbWF4O1xuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueCA+IDAgKSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnkgPiAwICkge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5tYXgueTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueiA+IDAgKSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5tYXguejtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gKCBtaW4gPD0gLSBwbGFuZS5jb25zdGFudCAmJiBtYXggPj0gLSBwbGFuZS5jb25zdGFudCApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzVHJpYW5nbGUoIHRyaWFuZ2xlICkge1xuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29tcHV0ZSBib3ggY2VudGVyIGFuZCBleHRlbnRzXG5cdFx0dGhpcy5nZXRDZW50ZXIoIF9jZW50ZXIgKTtcblx0XHRfZXh0ZW50cy5zdWJWZWN0b3JzKCB0aGlzLm1heCwgX2NlbnRlciApO1xuXG5cdFx0Ly8gdHJhbnNsYXRlIHRyaWFuZ2xlIHRvIGFhYmIgb3JpZ2luXG5cdFx0X3YwJDIuc3ViVmVjdG9ycyggdHJpYW5nbGUuYSwgX2NlbnRlciApO1xuXHRcdF92MSQ3LnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmIsIF9jZW50ZXIgKTtcblx0XHRfdjIkMy5zdWJWZWN0b3JzKCB0cmlhbmdsZS5jLCBfY2VudGVyICk7XG5cblx0XHQvLyBjb21wdXRlIGVkZ2UgdmVjdG9ycyBmb3IgdHJpYW5nbGVcblx0XHRfZjAuc3ViVmVjdG9ycyggX3YxJDcsIF92MCQyICk7XG5cdFx0X2YxLnN1YlZlY3RvcnMoIF92MiQzLCBfdjEkNyApO1xuXHRcdF9mMi5zdWJWZWN0b3JzKCBfdjAkMiwgX3YyJDMgKTtcblxuXHRcdC8vIHRlc3QgYWdhaW5zdCBheGVzIHRoYXQgYXJlIGdpdmVuIGJ5IGNyb3NzIHByb2R1Y3QgY29tYmluYXRpb25zIG9mIHRoZSBlZGdlcyBvZiB0aGUgdHJpYW5nbGUgYW5kIHRoZSBlZGdlcyBvZiB0aGUgYWFiYlxuXHRcdC8vIG1ha2UgYW4gYXhpcyB0ZXN0aW5nIG9mIGVhY2ggb2YgdGhlIDMgc2lkZXMgb2YgdGhlIGFhYmIgYWdhaW5zdCBlYWNoIG9mIHRoZSAzIHNpZGVzIG9mIHRoZSB0cmlhbmdsZSA9IDkgYXhpcyBvZiBzZXBhcmF0aW9uXG5cdFx0Ly8gYXhpc19paiA9IHVfaSB4IGZfaiAodTAsIHUxLCB1MiA9IGZhY2Ugbm9ybWFscyBvZiBhYWJiID0geCx5LHogYXhlcyB2ZWN0b3JzIHNpbmNlIGFhYmIgaXMgYXhpcyBhbGlnbmVkKVxuXHRcdGxldCBheGVzID0gW1xuXHRcdFx0MCwgLSBfZjAueiwgX2YwLnksIDAsIC0gX2YxLnosIF9mMS55LCAwLCAtIF9mMi56LCBfZjIueSxcblx0XHRcdF9mMC56LCAwLCAtIF9mMC54LCBfZjEueiwgMCwgLSBfZjEueCwgX2YyLnosIDAsIC0gX2YyLngsXG5cdFx0XHQtIF9mMC55LCBfZjAueCwgMCwgLSBfZjEueSwgX2YxLngsIDAsIC0gX2YyLnksIF9mMi54LCAwXG5cdFx0XTtcblx0XHRpZiAoICEgc2F0Rm9yQXhlcyggYXhlcywgX3YwJDIsIF92MSQ3LCBfdjIkMywgX2V4dGVudHMgKSApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdGVzdCAzIGZhY2Ugbm9ybWFscyBmcm9tIHRoZSBhYWJiXG5cdFx0YXhlcyA9IFsgMSwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMSBdO1xuXHRcdGlmICggISBzYXRGb3JBeGVzKCBheGVzLCBfdjAkMiwgX3YxJDcsIF92MiQzLCBfZXh0ZW50cyApICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBmaW5hbGx5IHRlc3RpbmcgdGhlIGZhY2Ugbm9ybWFsIG9mIHRoZSB0cmlhbmdsZVxuXHRcdC8vIHVzZSBhbHJlYWR5IGV4aXN0aW5nIHRyaWFuZ2xlIGVkZ2UgdmVjdG9ycyBoZXJlXG5cdFx0X3RyaWFuZ2xlTm9ybWFsLmNyb3NzVmVjdG9ycyggX2YwLCBfZjEgKTtcblx0XHRheGVzID0gWyBfdHJpYW5nbGVOb3JtYWwueCwgX3RyaWFuZ2xlTm9ybWFsLnksIF90cmlhbmdsZU5vcm1hbC56IF07XG5cblx0XHRyZXR1cm4gc2F0Rm9yQXhlcyggYXhlcywgX3YwJDIsIF92MSQ3LCBfdjIkMywgX2V4dGVudHMgKTtcblxuXHR9XG5cblx0Y2xhbXBQb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRjb25zdCBjbGFtcGVkUG9pbnQgPSBfdmVjdG9yJGIuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cblx0XHRyZXR1cm4gY2xhbXBlZFBvaW50LnN1YiggcG9pbnQgKS5sZW5ndGgoKTtcblxuXHR9XG5cblx0Z2V0Qm91bmRpbmdTcGhlcmUoIHRhcmdldCApIHtcblxuXHRcdHRoaXMuZ2V0Q2VudGVyKCB0YXJnZXQuY2VudGVyICk7XG5cblx0XHR0YXJnZXQucmFkaXVzID0gdGhpcy5nZXRTaXplKCBfdmVjdG9yJGIgKS5sZW5ndGgoKSAqIDAuNTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGludGVyc2VjdCggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWF4KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWluKCBib3gubWF4ICk7XG5cblx0XHQvLyBlbnN1cmUgdGhhdCBpZiB0aGVyZSBpcyBubyBvdmVybGFwLCB0aGUgcmVzdWx0IGlzIGZ1bGx5IGVtcHR5LCBub3Qgc2xpZ2h0bHkgZW1wdHkgd2l0aCBub24taW5mLytpbmYgdmFsdWVzIHRoYXQgd2lsbCBjYXVzZSBzdWJzZXF1ZW5jZSBpbnRlcnNlY3RzIHRvIGVycm9uZW91c2x5IHJldHVybiB2YWxpZCB2YWx1ZXMuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dW5pb24oIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1heCggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xuXG5cdFx0Ly8gdHJhbnNmb3JtIG9mIGVtcHR5IGJveCBpcyBhbiBlbXB0eSBib3guXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gTk9URTogSSBhbSB1c2luZyBhIGJpbmFyeSBwYXR0ZXJuIHRvIHNwZWNpZnkgYWxsIDJeMyBjb21iaW5hdGlvbnMgYmVsb3dcblx0XHRfcG9pbnRzWyAwIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDAwXG5cdFx0X3BvaW50c1sgMSBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMVxuXHRcdF9wb2ludHNbIDIgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMTBcblx0XHRfcG9pbnRzWyAzIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDExXG5cdFx0X3BvaW50c1sgNCBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDEwMFxuXHRcdF9wb2ludHNbIDUgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMDFcblx0XHRfcG9pbnRzWyA2IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTEwXG5cdFx0X3BvaW50c1sgNyBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMVxuXG5cdFx0dGhpcy5zZXRGcm9tUG9pbnRzKCBfcG9pbnRzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGQoIG9mZnNldCApO1xuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHMoIHRoaXMubWluICkgJiYgYm94Lm1heC5lcXVhbHMoIHRoaXMubWF4ICk7XG5cblx0fVxuXG59XG5cbkJveDMucHJvdG90eXBlLmlzQm94MyA9IHRydWU7XG5cbmNvbnN0IF9wb2ludHMgPSBbXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpXG5dO1xuXG5jb25zdCBfdmVjdG9yJGIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9ib3gkMyA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcblxuLy8gdHJpYW5nbGUgY2VudGVyZWQgdmVydGljZXNcblxuY29uc3QgX3YwJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjEkNyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MiQzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnNcblxuY29uc3QgX2YwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2YyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfY2VudGVyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2V4dGVudHMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdHJpYW5nbGVOb3JtYWwgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdGVzdEF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmZ1bmN0aW9uIHNhdEZvckF4ZXMoIGF4ZXMsIHYwLCB2MSwgdjIsIGV4dGVudHMgKSB7XG5cblx0Zm9yICggbGV0IGkgPSAwLCBqID0gYXhlcy5sZW5ndGggLSAzOyBpIDw9IGo7IGkgKz0gMyApIHtcblxuXHRcdF90ZXN0QXhpcy5mcm9tQXJyYXkoIGF4ZXMsIGkgKTtcblx0XHQvLyBwcm9qZWN0IHRoZSBhYWJiIG9udG8gdGhlIHNlcGFyYXRpbmcgYXhpc1xuXHRcdGNvbnN0IHIgPSBleHRlbnRzLnggKiBNYXRoLmFicyggX3Rlc3RBeGlzLnggKSArIGV4dGVudHMueSAqIE1hdGguYWJzKCBfdGVzdEF4aXMueSApICsgZXh0ZW50cy56ICogTWF0aC5hYnMoIF90ZXN0QXhpcy56ICk7XG5cdFx0Ly8gcHJvamVjdCBhbGwgMyB2ZXJ0aWNlcyBvZiB0aGUgdHJpYW5nbGUgb250byB0aGUgc2VwYXJhdGluZyBheGlzXG5cdFx0Y29uc3QgcDAgPSB2MC5kb3QoIF90ZXN0QXhpcyApO1xuXHRcdGNvbnN0IHAxID0gdjEuZG90KCBfdGVzdEF4aXMgKTtcblx0XHRjb25zdCBwMiA9IHYyLmRvdCggX3Rlc3RBeGlzICk7XG5cdFx0Ly8gYWN0dWFsIHRlc3QsIGJhc2ljYWxseSBzZWUgaWYgZWl0aGVyIG9mIHRoZSBtb3N0IGV4dHJlbWUgb2YgdGhlIHRyaWFuZ2xlIHBvaW50cyBpbnRlcnNlY3RzIHJcblx0XHRpZiAoIE1hdGgubWF4KCAtIE1hdGgubWF4KCBwMCwgcDEsIHAyICksIE1hdGgubWluKCBwMCwgcDEsIHAyICkgKSA+IHIgKSB7XG5cblx0XHRcdC8vIHBvaW50cyBvZiB0aGUgcHJvamVjdGVkIHRyaWFuZ2xlIGFyZSBvdXRzaWRlIHRoZSBwcm9qZWN0ZWQgaGFsZi1sZW5ndGggb2YgdGhlIGFhYmJcblx0XHRcdC8vIHRoZSBheGlzIGlzIHNlcGFyYXRpbmcgYW5kIHdlIGNhbiBleGl0XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbmNvbnN0IF9ib3gkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcbmNvbnN0IF92MSQ2ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3RvRmFydGhlc3RQb2ludCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF90b1BvaW50ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBTcGhlcmUge1xuXG5cdGNvbnN0cnVjdG9yKCBjZW50ZXIgPSBuZXcgVmVjdG9yMygpLCByYWRpdXMgPSAtIDEgKSB7XG5cblx0XHR0aGlzLmNlbnRlciA9IGNlbnRlcjtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHR9XG5cblx0c2V0KCBjZW50ZXIsIHJhZGl1cyApIHtcblxuXHRcdHRoaXMuY2VudGVyLmNvcHkoIGNlbnRlciApO1xuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Qb2ludHMoIHBvaW50cywgb3B0aW9uYWxDZW50ZXIgKSB7XG5cblx0XHRjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcblxuXHRcdGlmICggb3B0aW9uYWxDZW50ZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y2VudGVyLmNvcHkoIG9wdGlvbmFsQ2VudGVyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfYm94JDIuc2V0RnJvbVBvaW50cyggcG9pbnRzICkuZ2V0Q2VudGVyKCBjZW50ZXIgKTtcblxuXHRcdH1cblxuXHRcdGxldCBtYXhSYWRpdXNTcSA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludHNbIGkgXSApICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggbWF4UmFkaXVzU3EgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBzcGhlcmUgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBzcGhlcmUuY2VudGVyICk7XG5cdFx0dGhpcy5yYWRpdXMgPSBzcGhlcmUucmFkaXVzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGlzRW1wdHkoKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLnJhZGl1cyA8IDAgKTtcblxuXHR9XG5cblx0bWFrZUVtcHR5KCkge1xuXG5cdFx0dGhpcy5jZW50ZXIuc2V0KCAwLCAwLCAwICk7XG5cdFx0dGhpcy5yYWRpdXMgPSAtIDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuICggcG9pbnQuZGlzdGFuY2VUbyggdGhpcy5jZW50ZXIgKSAtIHRoaXMucmFkaXVzICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdGNvbnN0IHJhZGl1c1N1bSA9IHRoaXMucmFkaXVzICsgc3BoZXJlLnJhZGl1cztcblxuXHRcdHJldHVybiBzcGhlcmUuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmNlbnRlciApIDw9ICggcmFkaXVzU3VtICogcmFkaXVzU3VtICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiBib3guaW50ZXJzZWN0c1NwaGVyZSggdGhpcyApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzUGxhbmUoIHBsYW5lICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMuY2VudGVyICkgKSA8PSB0aGlzLnJhZGl1cztcblxuXHR9XG5cblx0Y2xhbXBQb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGNvbnN0IGRlbHRhTGVuZ3RoU3EgPSB0aGlzLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHRcdHRhcmdldC5jb3B5KCBwb2ludCApO1xuXG5cdFx0aWYgKCBkZWx0YUxlbmd0aFNxID4gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKSB7XG5cblx0XHRcdHRhcmdldC5zdWIoIHRoaXMuY2VudGVyICkubm9ybWFsaXplKCk7XG5cdFx0XHR0YXJnZXQubXVsdGlwbHlTY2FsYXIoIHRoaXMucmFkaXVzICkuYWRkKCB0aGlzLmNlbnRlciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0Z2V0Qm91bmRpbmdCb3goIHRhcmdldCApIHtcblxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdC8vIEVtcHR5IHNwaGVyZSBwcm9kdWNlcyBlbXB0eSBib3VuZGluZyBib3hcblx0XHRcdHRhcmdldC5tYWtlRW1wdHkoKTtcblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuc2V0KCB0aGlzLmNlbnRlciwgdGhpcy5jZW50ZXIgKTtcblx0XHR0YXJnZXQuZXhwYW5kQnlTY2FsYXIoIHRoaXMucmFkaXVzICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuY2VudGVyLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cdFx0dGhpcy5yYWRpdXMgPSB0aGlzLnJhZGl1cyAqIG1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZSggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuYWRkKCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeVBvaW50KCBwb2ludCApIHtcblxuXHRcdC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2p1ai9NYXRoR2VvTGliL2Jsb2IvMjk0MGI5OWI5OWNmZTU3NWRkNDUxMDNlZjIwZjQwMTlkZWUxNWI1NC9zcmMvR2VvbWV0cnkvU3BoZXJlLmNwcCNMNjQ5LUw2NzFcblxuXHRcdF90b1BvaW50LnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLmNlbnRlciApO1xuXG5cdFx0Y29uc3QgbGVuZ3RoU3EgPSBfdG9Qb2ludC5sZW5ndGhTcSgpO1xuXG5cdFx0aWYgKCBsZW5ndGhTcSA+ICggdGhpcy5yYWRpdXMgKiB0aGlzLnJhZGl1cyApICkge1xuXG5cdFx0XHRjb25zdCBsZW5ndGggPSBNYXRoLnNxcnQoIGxlbmd0aFNxICk7XG5cdFx0XHRjb25zdCBtaXNzaW5nUmFkaXVzSGFsZiA9ICggbGVuZ3RoIC0gdGhpcy5yYWRpdXMgKSAqIDAuNTtcblxuXHRcdFx0Ly8gTnVkZ2UgdGhpcyBzcGhlcmUgdG93YXJkcyB0aGUgdGFyZ2V0IHBvaW50LiBBZGQgaGFsZiB0aGUgbWlzc2luZyBkaXN0YW5jZSB0byByYWRpdXMsXG5cdFx0XHQvLyBhbmQgdGhlIG90aGVyIGhhbGYgdG8gcG9zaXRpb24uIFRoaXMgZ2l2ZXMgYSB0aWdodGVyIGVuY2xvc3VyZSwgaW5zdGVhZCBvZiBpZlxuXHRcdFx0Ly8gdGhlIHdob2xlIG1pc3NpbmcgZGlzdGFuY2Ugd2VyZSBqdXN0IGFkZGVkIHRvIHJhZGl1cy5cblxuXHRcdFx0dGhpcy5jZW50ZXIuYWRkKCBfdG9Qb2ludC5tdWx0aXBseVNjYWxhciggbWlzc2luZ1JhZGl1c0hhbGYgLyBsZW5ndGggKSApO1xuXHRcdFx0dGhpcy5yYWRpdXMgKz0gbWlzc2luZ1JhZGl1c0hhbGY7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dW5pb24oIHNwaGVyZSApIHtcblxuXHRcdC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2p1ai9NYXRoR2VvTGliL2Jsb2IvMjk0MGI5OWI5OWNmZTU3NWRkNDUxMDNlZjIwZjQwMTlkZWUxNWI1NC9zcmMvR2VvbWV0cnkvU3BoZXJlLmNwcCNMNzU5LUw3NjlcblxuXHRcdC8vIFRvIGVuY2xvc2UgYW5vdGhlciBzcGhlcmUgaW50byB0aGlzIHNwaGVyZSwgd2Ugb25seSBuZWVkIHRvIGVuY2xvc2UgdHdvIHBvaW50czpcblx0XHQvLyAxKSBFbmNsb3NlIHRoZSBmYXJ0aGVzdCBwb2ludCBvbiB0aGUgb3RoZXIgc3BoZXJlIGludG8gdGhpcyBzcGhlcmUuXG5cdFx0Ly8gMikgRW5jbG9zZSB0aGUgb3Bwb3NpdGUgcG9pbnQgb2YgdGhlIGZhcnRoZXN0IHBvaW50IGludG8gdGhpcyBzcGhlcmUuXG5cblx0XHQgaWYgKCB0aGlzLmNlbnRlci5lcXVhbHMoIHNwaGVyZS5jZW50ZXIgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0IF90b0ZhcnRoZXN0UG9pbnQuc2V0KCAwLCAwLCAxICkubXVsdGlwbHlTY2FsYXIoIHNwaGVyZS5yYWRpdXMgKTtcblxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3RvRmFydGhlc3RQb2ludC5zdWJWZWN0b3JzKCBzcGhlcmUuY2VudGVyLCB0aGlzLmNlbnRlciApLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBzcGhlcmUucmFkaXVzICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92MSQ2LmNvcHkoIHNwaGVyZS5jZW50ZXIgKS5hZGQoIF90b0ZhcnRoZXN0UG9pbnQgKSApO1xuXHRcdHRoaXMuZXhwYW5kQnlQb2ludCggX3YxJDYuY29weSggc3BoZXJlLmNlbnRlciApLnN1YiggX3RvRmFydGhlc3RQb2ludCApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmNlbnRlci5lcXVhbHMoIHRoaXMuY2VudGVyICkgJiYgKCBzcGhlcmUucmFkaXVzID09PSB0aGlzLnJhZGl1cyApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3ZlY3RvciRhID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3NlZ0NlbnRlciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9zZWdEaXIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZGlmZiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX2VkZ2UxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2VkZ2UyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX25vcm1hbCQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBSYXkge1xuXG5cdGNvbnN0cnVjdG9yKCBvcmlnaW4gPSBuZXcgVmVjdG9yMygpLCBkaXJlY3Rpb24gPSBuZXcgVmVjdG9yMyggMCwgMCwgLSAxICkgKSB7XG5cblx0XHR0aGlzLm9yaWdpbiA9IG9yaWdpbjtcblx0XHR0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcblxuXHR9XG5cblx0c2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHRcdHRoaXMub3JpZ2luLmNvcHkoIG9yaWdpbiApO1xuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIGRpcmVjdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHJheSApIHtcblxuXHRcdHRoaXMub3JpZ2luLmNvcHkoIHJheS5vcmlnaW4gKTtcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCByYXkuZGlyZWN0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXQoIHQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHR9XG5cblx0bG9va0F0KCB2ICkge1xuXG5cdFx0dGhpcy5kaXJlY3Rpb24uY29weSggdiApLnN1YiggdGhpcy5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyZWNhc3QoIHQgKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5jb3B5KCB0aGlzLmF0KCB0LCBfdmVjdG9yJGEgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHR0YXJnZXQuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMub3JpZ2luICk7XG5cblx0XHRjb25zdCBkaXJlY3Rpb25EaXN0YW5jZSA9IHRhcmdldC5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0XHRpZiAoIGRpcmVjdGlvbkRpc3RhbmNlIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLmRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCBkaXJlY3Rpb25EaXN0YW5jZSApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0Y29uc3QgZGlyZWN0aW9uRGlzdGFuY2UgPSBfdmVjdG9yJGEuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMub3JpZ2luICkuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0Ly8gcG9pbnQgYmVoaW5kIHRoZSByYXlcblxuXHRcdGlmICggZGlyZWN0aW9uRGlzdGFuY2UgPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW4uZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0XHR9XG5cblx0XHRfdmVjdG9yJGEuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggZGlyZWN0aW9uRGlzdGFuY2UgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0XHRyZXR1cm4gX3ZlY3RvciRhLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVNxVG9TZWdtZW50KCB2MCwgdjEsIG9wdGlvbmFsUG9pbnRPblJheSwgb3B0aW9uYWxQb2ludE9uU2VnbWVudCApIHtcblxuXHRcdC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Btam9uaWFrL0dlb21ldHJpY1Rvb2xzL2Jsb2IvbWFzdGVyL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlRGlzdFJheVNlZ21lbnQuaFxuXHRcdC8vIEl0IHJldHVybnMgdGhlIG1pbiBkaXN0YW5jZSBiZXR3ZWVuIHRoZSByYXkgYW5kIHRoZSBzZWdtZW50XG5cdFx0Ly8gZGVmaW5lZCBieSB2MCBhbmQgdjFcblx0XHQvLyBJdCBjYW4gYWxzbyBzZXQgdHdvIG9wdGlvbmFsIHRhcmdldHMgOlxuXHRcdC8vIC0gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHJheVxuXHRcdC8vIC0gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHNlZ21lbnRcblxuXHRcdF9zZWdDZW50ZXIuY29weSggdjAgKS5hZGQoIHYxICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXHRcdF9zZWdEaXIuY29weSggdjEgKS5zdWIoIHYwICkubm9ybWFsaXplKCk7XG5cdFx0X2RpZmYuY29weSggdGhpcy5vcmlnaW4gKS5zdWIoIF9zZWdDZW50ZXIgKTtcblxuXHRcdGNvbnN0IHNlZ0V4dGVudCA9IHYwLmRpc3RhbmNlVG8oIHYxICkgKiAwLjU7XG5cdFx0Y29uc3QgYTAxID0gLSB0aGlzLmRpcmVjdGlvbi5kb3QoIF9zZWdEaXIgKTtcblx0XHRjb25zdCBiMCA9IF9kaWZmLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblx0XHRjb25zdCBiMSA9IC0gX2RpZmYuZG90KCBfc2VnRGlyICk7XG5cdFx0Y29uc3QgYyA9IF9kaWZmLmxlbmd0aFNxKCk7XG5cdFx0Y29uc3QgZGV0ID0gTWF0aC5hYnMoIDEgLSBhMDEgKiBhMDEgKTtcblx0XHRsZXQgczAsIHMxLCBzcXJEaXN0LCBleHREZXQ7XG5cblx0XHRpZiAoIGRldCA+IDAgKSB7XG5cblx0XHRcdC8vIFRoZSByYXkgYW5kIHNlZ21lbnQgYXJlIG5vdCBwYXJhbGxlbC5cblxuXHRcdFx0czAgPSBhMDEgKiBiMSAtIGIwO1xuXHRcdFx0czEgPSBhMDEgKiBiMCAtIGIxO1xuXHRcdFx0ZXh0RGV0ID0gc2VnRXh0ZW50ICogZGV0O1xuXG5cdFx0XHRpZiAoIHMwID49IDAgKSB7XG5cblx0XHRcdFx0aWYgKCBzMSA+PSAtIGV4dERldCApIHtcblxuXHRcdFx0XHRcdGlmICggczEgPD0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gMFxuXHRcdFx0XHRcdFx0Ly8gTWluaW11bSBhdCBpbnRlcmlvciBwb2ludHMgb2YgcmF5IGFuZCBzZWdtZW50LlxuXG5cdFx0XHRcdFx0XHRjb25zdCBpbnZEZXQgPSAxIC8gZGV0O1xuXHRcdFx0XHRcdFx0czAgKj0gaW52RGV0O1xuXHRcdFx0XHRcdFx0czEgKj0gaW52RGV0O1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IHMwICogKCBzMCArIGEwMSAqIHMxICsgMiAqIGIwICkgKyBzMSAqICggYTAxICogczAgKyBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIHJlZ2lvbiAxXG5cblx0XHRcdFx0XHRcdHMxID0gc2VnRXh0ZW50O1xuXHRcdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDVcblxuXHRcdFx0XHRcdHMxID0gLSBzZWdFeHRlbnQ7XG5cdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApO1xuXHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggczEgPD0gLSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHQvLyByZWdpb24gNFxuXG5cdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIC0gYTAxICogc2VnRXh0ZW50ICsgYjAgKSApO1xuXHRcdFx0XHRcdHMxID0gKCBzMCA+IDAgKSA/IC0gc2VnRXh0ZW50IDogTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTtcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHMxIDw9IGV4dERldCApIHtcblxuXHRcdFx0XHRcdC8vIHJlZ2lvbiAzXG5cblx0XHRcdFx0XHRzMCA9IDA7XG5cdFx0XHRcdFx0czEgPSBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdHNxckRpc3QgPSBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHJlZ2lvbiAyXG5cblx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogc2VnRXh0ZW50ICsgYjAgKSApO1xuXHRcdFx0XHRcdHMxID0gKCBzMCA+IDAgKSA/IHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XG5cdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFJheSBhbmQgc2VnbWVudCBhcmUgcGFyYWxsZWwuXG5cblx0XHRcdHMxID0gKCBhMDEgPiAwICkgPyAtIHNlZ0V4dGVudCA6IHNlZ0V4dGVudDtcblx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbmFsUG9pbnRPblJheSApIHtcblxuXHRcdFx0b3B0aW9uYWxQb2ludE9uUmF5LmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIHMwICkuYWRkKCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkge1xuXG5cdFx0XHRvcHRpb25hbFBvaW50T25TZWdtZW50LmNvcHkoIF9zZWdEaXIgKS5tdWx0aXBseVNjYWxhciggczEgKS5hZGQoIF9zZWdDZW50ZXIgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzcXJEaXN0O1xuXG5cdH1cblxuXHRpbnRlcnNlY3RTcGhlcmUoIHNwaGVyZSwgdGFyZ2V0ICkge1xuXG5cdFx0X3ZlY3RvciRhLnN1YlZlY3RvcnMoIHNwaGVyZS5jZW50ZXIsIHRoaXMub3JpZ2luICk7XG5cdFx0Y29uc3QgdGNhID0gX3ZlY3RvciRhLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblx0XHRjb25zdCBkMiA9IF92ZWN0b3IkYS5kb3QoIF92ZWN0b3IkYSApIC0gdGNhICogdGNhO1xuXHRcdGNvbnN0IHJhZGl1czIgPSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cztcblxuXHRcdGlmICggZDIgPiByYWRpdXMyICkgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCB0aGMgPSBNYXRoLnNxcnQoIHJhZGl1czIgLSBkMiApO1xuXG5cdFx0Ly8gdDAgPSBmaXJzdCBpbnRlcnNlY3QgcG9pbnQgLSBlbnRyYW5jZSBvbiBmcm9udCBvZiBzcGhlcmVcblx0XHRjb25zdCB0MCA9IHRjYSAtIHRoYztcblxuXHRcdC8vIHQxID0gc2Vjb25kIGludGVyc2VjdCBwb2ludCAtIGV4aXQgcG9pbnQgb24gYmFjayBvZiBzcGhlcmVcblx0XHRjb25zdCB0MSA9IHRjYSArIHRoYztcblxuXHRcdC8vIHRlc3QgdG8gc2VlIGlmIGJvdGggdDAgYW5kIHQxIGFyZSBiZWhpbmQgdGhlIHJheSAtIGlmIHNvLCByZXR1cm4gbnVsbFxuXHRcdGlmICggdDAgPCAwICYmIHQxIDwgMCApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gdGVzdCB0byBzZWUgaWYgdDAgaXMgYmVoaW5kIHRoZSByYXk6XG5cdFx0Ly8gaWYgaXQgaXMsIHRoZSByYXkgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHNvIHJldHVybiB0aGUgc2Vjb25kIGV4aXQgcG9pbnQgc2NhbGVkIGJ5IHQxLFxuXHRcdC8vIGluIG9yZGVyIHRvIGFsd2F5cyByZXR1cm4gYW4gaW50ZXJzZWN0IHBvaW50IHRoYXQgaXMgaW4gZnJvbnQgb2YgdGhlIHJheS5cblx0XHRpZiAoIHQwIDwgMCApIHJldHVybiB0aGlzLmF0KCB0MSwgdGFyZ2V0ICk7XG5cblx0XHQvLyBlbHNlIHQwIGlzIGluIGZyb250IG9mIHRoZSByYXksIHNvIHJldHVybiB0aGUgZmlyc3QgY29sbGlzaW9uIHBvaW50IHNjYWxlZCBieSB0MFxuXHRcdHJldHVybiB0aGlzLmF0KCB0MCwgdGFyZ2V0ICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmRpc3RhbmNlU3FUb1BvaW50KCBzcGhlcmUuY2VudGVyICkgPD0gKCBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cyApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvUGxhbmUoIHBsYW5lICkge1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0Ly8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpblxuXHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMub3JpZ2luICkgPT09IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTnVsbCBpcyBwcmVmZXJhYmxlIHRvIHVuZGVmaW5lZCBzaW5jZSB1bmRlZmluZWQgbWVhbnMuLi4uIGl0IGlzIHVuZGVmaW5lZFxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHQgPSAtICggdGhpcy5vcmlnaW4uZG90KCBwbGFuZS5ub3JtYWwgKSArIHBsYW5lLmNvbnN0YW50ICkgLyBkZW5vbWluYXRvcjtcblxuXHRcdC8vIFJldHVybiBpZiB0aGUgcmF5IG5ldmVyIGludGVyc2VjdHMgdGhlIHBsYW5lXG5cblx0XHRyZXR1cm4gdCA+PSAwID8gdCA6IG51bGw7XG5cblx0fVxuXG5cdGludGVyc2VjdFBsYW5lKCBwbGFuZSwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdCA9IHRoaXMuZGlzdGFuY2VUb1BsYW5lKCBwbGFuZSApO1xuXG5cdFx0aWYgKCB0ID09PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmF0KCB0LCB0YXJnZXQgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApIHtcblxuXHRcdC8vIGNoZWNrIGlmIHRoZSByYXkgbGllcyBvbiB0aGUgcGxhbmUgZmlyc3RcblxuXHRcdGNvbnN0IGRpc3RUb1BvaW50ID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0aWYgKCBkaXN0VG9Qb2ludCA9PT0gMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBkZW5vbWluYXRvciA9IHBsYW5lLm5vcm1hbC5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0XHRpZiAoIGRlbm9taW5hdG9yICogZGlzdFRvUG9pbnQgPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdC8vIHJheSBvcmlnaW4gaXMgYmVoaW5kIHRoZSBwbGFuZSAoYW5kIGlzIHBvaW50aW5nIGJlaGluZCBpdClcblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0aW50ZXJzZWN0Qm94KCBib3gsIHRhcmdldCApIHtcblxuXHRcdGxldCB0bWluLCB0bWF4LCB0eW1pbiwgdHltYXgsIHR6bWluLCB0em1heDtcblxuXHRcdGNvbnN0IGludmRpcnggPSAxIC8gdGhpcy5kaXJlY3Rpb24ueCxcblx0XHRcdGludmRpcnkgPSAxIC8gdGhpcy5kaXJlY3Rpb24ueSxcblx0XHRcdGludmRpcnogPSAxIC8gdGhpcy5kaXJlY3Rpb24uejtcblxuXHRcdGNvbnN0IG9yaWdpbiA9IHRoaXMub3JpZ2luO1xuXG5cdFx0aWYgKCBpbnZkaXJ4ID49IDAgKSB7XG5cblx0XHRcdHRtaW4gPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXHRcdFx0dG1heCA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0bWluID0gKCBib3gubWF4LnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblx0XHRcdHRtYXggPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpbnZkaXJ5ID49IDAgKSB7XG5cblx0XHRcdHR5bWluID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblx0XHRcdHR5bWF4ID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR5bWluID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblx0XHRcdHR5bWF4ID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHltYXggKSB8fCAoIHR5bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyBUaGVzZSBsaW5lcyBhbHNvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0bWluIG9yIHRtYXggaXMgTmFOXG5cdFx0Ly8gKHJlc3VsdCBvZiAwICogSW5maW5pdHkpLiB4ICE9PSB4IHJldHVybnMgdHJ1ZSBpZiB4IGlzIE5hTlxuXG5cdFx0aWYgKCB0eW1pbiA+IHRtaW4gfHwgdG1pbiAhPT0gdG1pbiApIHRtaW4gPSB0eW1pbjtcblxuXHRcdGlmICggdHltYXggPCB0bWF4IHx8IHRtYXggIT09IHRtYXggKSB0bWF4ID0gdHltYXg7XG5cblx0XHRpZiAoIGludmRpcnogPj0gMCApIHtcblxuXHRcdFx0dHptaW4gPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXHRcdFx0dHptYXggPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dHptaW4gPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXHRcdFx0dHptYXggPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIHRtaW4gPiB0em1heCApIHx8ICggdHptaW4gPiB0bWF4ICkgKSByZXR1cm4gbnVsbDtcblxuXHRcdGlmICggdHptaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4gKSB0bWluID0gdHptaW47XG5cblx0XHRpZiAoIHR6bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4ICkgdG1heCA9IHR6bWF4O1xuXG5cdFx0Ly9yZXR1cm4gcG9pbnQgY2xvc2VzdCB0byB0aGUgcmF5IChwb3NpdGl2ZSBzaWRlKVxuXG5cdFx0aWYgKCB0bWF4IDwgMCApIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHRtaW4gPj0gMCA/IHRtaW4gOiB0bWF4LCB0YXJnZXQgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0Qm94KCBib3gsIF92ZWN0b3IkYSApICE9PSBudWxsO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RUcmlhbmdsZSggYSwgYiwgYywgYmFja2ZhY2VDdWxsaW5nLCB0YXJnZXQgKSB7XG5cblx0XHQvLyBDb21wdXRlIHRoZSBvZmZzZXQgb3JpZ2luLCBlZGdlcywgYW5kIG5vcm1hbC5cblxuXHRcdC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Btam9uaWFrL0dlb21ldHJpY1Rvb2xzL2Jsb2IvbWFzdGVyL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlSW50clJheTNUcmlhbmdsZTMuaFxuXG5cdFx0X2VkZ2UxLnN1YlZlY3RvcnMoIGIsIGEgKTtcblx0XHRfZWRnZTIuc3ViVmVjdG9ycyggYywgYSApO1xuXHRcdF9ub3JtYWwkMS5jcm9zc1ZlY3RvcnMoIF9lZGdlMSwgX2VkZ2UyICk7XG5cblx0XHQvLyBTb2x2ZSBRICsgdCpEID0gYjEqRTEgKyBiMipFMiAoUSA9IGtEaWZmLCBEID0gcmF5IGRpcmVjdGlvbixcblx0XHQvLyBFMSA9IGtFZGdlMSwgRTIgPSBrRWRnZTIsIE4gPSBDcm9zcyhFMSxFMikpIGJ5XG5cdFx0Ly8gICB8RG90KEQsTil8KmIxID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoUSxFMikpXG5cdFx0Ly8gICB8RG90KEQsTil8KmIyID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoRTEsUSkpXG5cdFx0Ly8gICB8RG90KEQsTil8KnQgPSAtc2lnbihEb3QoRCxOKSkqRG90KFEsTilcblx0XHRsZXQgRGROID0gdGhpcy5kaXJlY3Rpb24uZG90KCBfbm9ybWFsJDEgKTtcblx0XHRsZXQgc2lnbjtcblxuXHRcdGlmICggRGROID4gMCApIHtcblxuXHRcdFx0aWYgKCBiYWNrZmFjZUN1bGxpbmcgKSByZXR1cm4gbnVsbDtcblx0XHRcdHNpZ24gPSAxO1xuXG5cdFx0fSBlbHNlIGlmICggRGROIDwgMCApIHtcblxuXHRcdFx0c2lnbiA9IC0gMTtcblx0XHRcdERkTiA9IC0gRGROO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRfZGlmZi5zdWJWZWN0b3JzKCB0aGlzLm9yaWdpbiwgYSApO1xuXHRcdGNvbnN0IERkUXhFMiA9IHNpZ24gKiB0aGlzLmRpcmVjdGlvbi5kb3QoIF9lZGdlMi5jcm9zc1ZlY3RvcnMoIF9kaWZmLCBfZWRnZTIgKSApO1xuXG5cdFx0Ly8gYjEgPCAwLCBubyBpbnRlcnNlY3Rpb25cblx0XHRpZiAoIERkUXhFMiA8IDAgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgRGRFMXhRID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdCggX2VkZ2UxLmNyb3NzKCBfZGlmZiApICk7XG5cblx0XHQvLyBiMiA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggRGRFMXhRIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBiMStiMiA+IDEsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggRGRReEUyICsgRGRFMXhRID4gRGROICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdC8vIExpbmUgaW50ZXJzZWN0cyB0cmlhbmdsZSwgY2hlY2sgaWYgcmF5IGRvZXMuXG5cdFx0Y29uc3QgUWROID0gLSBzaWduICogX2RpZmYuZG90KCBfbm9ybWFsJDEgKTtcblxuXHRcdC8vIHQgPCAwLCBubyBpbnRlcnNlY3Rpb25cblx0XHRpZiAoIFFkTiA8IDAgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Ly8gUmF5IGludGVyc2VjdHMgdHJpYW5nbGUuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIFFkTiAvIERkTiwgdGFyZ2V0ICk7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbWF0cml4NCApIHtcblxuXHRcdHRoaXMub3JpZ2luLmFwcGx5TWF0cml4NCggbWF0cml4NCApO1xuXHRcdHRoaXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4NCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggcmF5ICkge1xuXG5cdFx0cmV0dXJuIHJheS5vcmlnaW4uZXF1YWxzKCB0aGlzLm9yaWdpbiApICYmIHJheS5kaXJlY3Rpb24uZXF1YWxzKCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgTWF0cml4NCB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLmVsZW1lbnRzID0gW1xuXG5cdFx0XHQxLCAwLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHRdO1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXQoIG4xMSwgbjEyLCBuMTMsIG4xNCwgbjIxLCBuMjIsIG4yMywgbjI0LCBuMzEsIG4zMiwgbjMzLCBuMzQsIG40MSwgbjQyLCBuNDMsIG40NCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyA0IF0gPSBuMTI7IHRlWyA4IF0gPSBuMTM7IHRlWyAxMiBdID0gbjE0O1xuXHRcdHRlWyAxIF0gPSBuMjE7IHRlWyA1IF0gPSBuMjI7IHRlWyA5IF0gPSBuMjM7IHRlWyAxMyBdID0gbjI0O1xuXHRcdHRlWyAyIF0gPSBuMzE7IHRlWyA2IF0gPSBuMzI7IHRlWyAxMCBdID0gbjMzOyB0ZVsgMTQgXSA9IG4zNDtcblx0XHR0ZVsgMyBdID0gbjQxOyB0ZVsgNyBdID0gbjQyOyB0ZVsgMTEgXSA9IG40MzsgdGVbIDE1IF0gPSBuNDQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aWRlbnRpdHkoKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIDEsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgTWF0cml4NCgpLmZyb21BcnJheSggdGhpcy5lbGVtZW50cyApO1xuXG5cdH1cblxuXHRjb3B5KCBtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07IHRlWyAzIF0gPSBtZVsgMyBdO1xuXHRcdHRlWyA0IF0gPSBtZVsgNCBdOyB0ZVsgNSBdID0gbWVbIDUgXTsgdGVbIDYgXSA9IG1lWyA2IF07IHRlWyA3IF0gPSBtZVsgNyBdO1xuXHRcdHRlWyA4IF0gPSBtZVsgOCBdOyB0ZVsgOSBdID0gbWVbIDkgXTsgdGVbIDEwIF0gPSBtZVsgMTAgXTsgdGVbIDExIF0gPSBtZVsgMTEgXTtcblx0XHR0ZVsgMTIgXSA9IG1lWyAxMiBdOyB0ZVsgMTMgXSA9IG1lWyAxMyBdOyB0ZVsgMTQgXSA9IG1lWyAxNCBdOyB0ZVsgMTUgXSA9IG1lWyAxNSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHlQb3NpdGlvbiggbSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cywgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDEyIF0gPSBtZVsgMTIgXTtcblx0XHR0ZVsgMTMgXSA9IG1lWyAxMyBdO1xuXHRcdHRlWyAxNCBdID0gbWVbIDE0IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeDMoIG0gKSB7XG5cblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0bWVbIDAgXSwgbWVbIDMgXSwgbWVbIDYgXSwgMCxcblx0XHRcdG1lWyAxIF0sIG1lWyA0IF0sIG1lWyA3IF0sIDAsXG5cdFx0XHRtZVsgMiBdLCBtZVsgNSBdLCBtZVsgOCBdLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHRyYWN0QmFzaXMoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR4QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAwICk7XG5cdFx0eUF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMSApO1xuXHRcdHpBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlQmFzaXMoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR0aGlzLnNldChcblx0XHRcdHhBeGlzLngsIHlBeGlzLngsIHpBeGlzLngsIDAsXG5cdFx0XHR4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLFxuXHRcdFx0eEF4aXMueiwgeUF4aXMueiwgekF4aXMueiwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4dHJhY3RSb3RhdGlvbiggbSApIHtcblxuXHRcdC8vIHRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgcmVmbGVjdGlvbiBtYXRyaWNlc1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdGNvbnN0IHNjYWxlWCA9IDEgLyBfdjEkNS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAwICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc2NhbGVZID0gMSAvIF92MSQ1LnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDEgKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzY2FsZVogPSAxIC8gX3YxJDUuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDEgXSA9IG1lWyAxIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDIgXSA9IG1lWyAyIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDMgXSA9IDA7XG5cblx0XHR0ZVsgNCBdID0gbWVbIDQgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNSBdID0gbWVbIDUgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNiBdID0gbWVbIDYgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNyBdID0gMDtcblxuXHRcdHRlWyA4IF0gPSBtZVsgOCBdICogc2NhbGVaO1xuXHRcdHRlWyA5IF0gPSBtZVsgOSBdICogc2NhbGVaO1xuXHRcdHRlWyAxMCBdID0gbWVbIDEwIF0gKiBzY2FsZVo7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMTQgXSA9IDA7XG5cdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvbkZyb21FdWxlciggZXVsZXIgKSB7XG5cblx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCkgbm93IGV4cGVjdHMgYSBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IHggPSBldWxlci54LCB5ID0gZXVsZXIueSwgeiA9IGV1bGVyLno7XG5cdFx0Y29uc3QgYSA9IE1hdGguY29zKCB4ICksIGIgPSBNYXRoLnNpbiggeCApO1xuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggeSApLCBkID0gTWF0aC5zaW4oIHkgKTtcblx0XHRjb25zdCBlID0gTWF0aC5jb3MoIHogKSwgZiA9IE1hdGguc2luKCB6ICk7XG5cblx0XHRpZiAoIGV1bGVyLm9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0Y29uc3QgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IC0gYyAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZDtcblxuXHRcdFx0dGVbIDEgXSA9IGFmICsgYmUgKiBkO1xuXHRcdFx0dGVbIDUgXSA9IGFlIC0gYmYgKiBkO1xuXHRcdFx0dGVbIDkgXSA9IC0gYiAqIGM7XG5cblx0XHRcdHRlWyAyIF0gPSBiZiAtIGFlICogZDtcblx0XHRcdHRlWyA2IF0gPSBiZSArIGFmICogZDtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1lYWicgKSB7XG5cblx0XHRcdGNvbnN0IGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSArIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSBkZSAqIGIgLSBjZjtcblx0XHRcdHRlWyA4IF0gPSBhICogZDtcblxuXHRcdFx0dGVbIDEgXSA9IGEgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IC0gYjtcblxuXHRcdFx0dGVbIDIgXSA9IGNmICogYiAtIGRlO1xuXHRcdFx0dGVbIDYgXSA9IGRmICsgY2UgKiBiO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWlhZJyApIHtcblxuXHRcdFx0Y29uc3QgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGNlIC0gZGYgKiBiO1xuXHRcdFx0dGVbIDQgXSA9IC0gYSAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZGUgKyBjZiAqIGI7XG5cblx0XHRcdHRlWyAxIF0gPSBjZiArIGRlICogYjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBkZiAtIGNlICogYjtcblxuXHRcdFx0dGVbIDIgXSA9IC0gYSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYjtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pZWCcgKSB7XG5cblx0XHRcdGNvbnN0IGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSBiZSAqIGQgLSBhZjtcblx0XHRcdHRlWyA4IF0gPSBhZSAqIGQgKyBiZjtcblxuXHRcdFx0dGVbIDEgXSA9IGMgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGJmICogZCArIGFlO1xuXHRcdFx0dGVbIDkgXSA9IGFmICogZCAtIGJlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBjO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVpYJyApIHtcblxuXHRcdFx0Y29uc3QgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IGJkIC0gYWMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGJjICogZiArIGFkO1xuXG5cdFx0XHR0ZVsgMSBdID0gZjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkICogZTtcblx0XHRcdHRlWyA2IF0gPSBhZCAqIGYgKyBiYztcblx0XHRcdHRlWyAxMCBdID0gYWMgLSBiZCAqIGY7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1haWScgKSB7XG5cblx0XHRcdGNvbnN0IGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGY7XG5cdFx0XHR0ZVsgOCBdID0gZCAqIGU7XG5cblx0XHRcdHRlWyAxIF0gPSBhYyAqIGYgKyBiZDtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBhZCAqIGYgLSBiYztcblxuXHRcdFx0dGVbIDIgXSA9IGJjICogZiAtIGFkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBlO1xuXHRcdFx0dGVbIDEwIF0gPSBiZCAqIGYgKyBhYztcblxuXHRcdH1cblxuXHRcdC8vIGJvdHRvbSByb3dcblx0XHR0ZVsgMyBdID0gMDtcblx0XHR0ZVsgNyBdID0gMDtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHQvLyBsYXN0IGNvbHVtblxuXHRcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDE0IF0gPSAwO1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApIHtcblxuXHRcdHJldHVybiB0aGlzLmNvbXBvc2UoIF96ZXJvLCBxLCBfb25lICk7XG5cblx0fVxuXG5cdGxvb2tBdCggZXllLCB0YXJnZXQsIHVwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0X3ouc3ViVmVjdG9ycyggZXllLCB0YXJnZXQgKTtcblxuXHRcdGlmICggX3oubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gZXllIGFuZCB0YXJnZXQgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uXG5cblx0XHRcdF96LnogPSAxO1xuXG5cdFx0fVxuXG5cdFx0X3oubm9ybWFsaXplKCk7XG5cdFx0X3guY3Jvc3NWZWN0b3JzKCB1cCwgX3ogKTtcblxuXHRcdGlmICggX3gubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG5cblx0XHRcdGlmICggTWF0aC5hYnMoIHVwLnogKSA9PT0gMSApIHtcblxuXHRcdFx0XHRfei54ICs9IDAuMDAwMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfei56ICs9IDAuMDAwMTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfei5ub3JtYWxpemUoKTtcblx0XHRcdF94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7XG5cblx0XHR9XG5cblx0XHRfeC5ub3JtYWxpemUoKTtcblx0XHRfeS5jcm9zc1ZlY3RvcnMoIF96LCBfeCApO1xuXG5cdFx0dGVbIDAgXSA9IF94Lng7IHRlWyA0IF0gPSBfeS54OyB0ZVsgOCBdID0gX3oueDtcblx0XHR0ZVsgMSBdID0gX3gueTsgdGVbIDUgXSA9IF95Lnk7IHRlWyA5IF0gPSBfei55O1xuXHRcdHRlWyAyIF0gPSBfeC56OyB0ZVsgNiBdID0gX3kuejsgdGVbIDEwIF0gPSBfei56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCBtLCBuICkge1xuXG5cdFx0aWYgKCBuICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIG4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIHRoaXMsIG0gKTtcblxuXHR9XG5cblx0cHJlbXVsdGlwbHkoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCB0aGlzICk7XG5cblx0fVxuXG5cdG11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSB7XG5cblx0XHRjb25zdCBhZSA9IGEuZWxlbWVudHM7XG5cdFx0Y29uc3QgYmUgPSBiLmVsZW1lbnRzO1xuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IGExMSA9IGFlWyAwIF0sIGExMiA9IGFlWyA0IF0sIGExMyA9IGFlWyA4IF0sIGExNCA9IGFlWyAxMiBdO1xuXHRcdGNvbnN0IGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA1IF0sIGEyMyA9IGFlWyA5IF0sIGEyNCA9IGFlWyAxMyBdO1xuXHRcdGNvbnN0IGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA2IF0sIGEzMyA9IGFlWyAxMCBdLCBhMzQgPSBhZVsgMTQgXTtcblx0XHRjb25zdCBhNDEgPSBhZVsgMyBdLCBhNDIgPSBhZVsgNyBdLCBhNDMgPSBhZVsgMTEgXSwgYTQ0ID0gYWVbIDE1IF07XG5cblx0XHRjb25zdCBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgNCBdLCBiMTMgPSBiZVsgOCBdLCBiMTQgPSBiZVsgMTIgXTtcblx0XHRjb25zdCBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNSBdLCBiMjMgPSBiZVsgOSBdLCBiMjQgPSBiZVsgMTMgXTtcblx0XHRjb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNiBdLCBiMzMgPSBiZVsgMTAgXSwgYjM0ID0gYmVbIDE0IF07XG5cdFx0Y29uc3QgYjQxID0gYmVbIDMgXSwgYjQyID0gYmVbIDcgXSwgYjQzID0gYmVbIDExIF0sIGI0NCA9IGJlWyAxNSBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMSArIGExNCAqIGI0MTtcblx0XHR0ZVsgNCBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyICsgYTE0ICogYjQyO1xuXHRcdHRlWyA4IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDM7XG5cdFx0dGVbIDEyIF0gPSBhMTEgKiBiMTQgKyBhMTIgKiBiMjQgKyBhMTMgKiBiMzQgKyBhMTQgKiBiNDQ7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxICsgYTI0ICogYjQxO1xuXHRcdHRlWyA1IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzIgKyBhMjQgKiBiNDI7XG5cdFx0dGVbIDkgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMyArIGEyNCAqIGI0Mztcblx0XHR0ZVsgMTMgXSA9IGEyMSAqIGIxNCArIGEyMiAqIGIyNCArIGEyMyAqIGIzNCArIGEyNCAqIGI0NDtcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzEgKyBhMzQgKiBiNDE7XG5cdFx0dGVbIDYgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMiArIGEzNCAqIGI0Mjtcblx0XHR0ZVsgMTAgXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0Mztcblx0XHR0ZVsgMTQgXSA9IGEzMSAqIGIxNCArIGEzMiAqIGIyNCArIGEzMyAqIGIzNCArIGEzNCAqIGI0NDtcblxuXHRcdHRlWyAzIF0gPSBhNDEgKiBiMTEgKyBhNDIgKiBiMjEgKyBhNDMgKiBiMzEgKyBhNDQgKiBiNDE7XG5cdFx0dGVbIDcgXSA9IGE0MSAqIGIxMiArIGE0MiAqIGIyMiArIGE0MyAqIGIzMiArIGE0NCAqIGI0Mjtcblx0XHR0ZVsgMTEgXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0Mztcblx0XHR0ZVsgMTUgXSA9IGE0MSAqIGIxNCArIGE0MiAqIGIyNCArIGE0MyAqIGIzNCArIGE0NCAqIGI0NDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggcyApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgOCBdICo9IHM7IHRlWyAxMiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNSBdICo9IHM7IHRlWyA5IF0gKj0gczsgdGVbIDEzIF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA2IF0gKj0gczsgdGVbIDEwIF0gKj0gczsgdGVbIDE0IF0gKj0gcztcblx0XHR0ZVsgMyBdICo9IHM7IHRlWyA3IF0gKj0gczsgdGVbIDExIF0gKj0gczsgdGVbIDE1IF0gKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkZXRlcm1pbmFudCgpIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IG4xMSA9IHRlWyAwIF0sIG4xMiA9IHRlWyA0IF0sIG4xMyA9IHRlWyA4IF0sIG4xNCA9IHRlWyAxMiBdO1xuXHRcdGNvbnN0IG4yMSA9IHRlWyAxIF0sIG4yMiA9IHRlWyA1IF0sIG4yMyA9IHRlWyA5IF0sIG4yNCA9IHRlWyAxMyBdO1xuXHRcdGNvbnN0IG4zMSA9IHRlWyAyIF0sIG4zMiA9IHRlWyA2IF0sIG4zMyA9IHRlWyAxMCBdLCBuMzQgPSB0ZVsgMTQgXTtcblx0XHRjb25zdCBuNDEgPSB0ZVsgMyBdLCBuNDIgPSB0ZVsgNyBdLCBuNDMgPSB0ZVsgMTEgXSwgbjQ0ID0gdGVbIDE1IF07XG5cblx0XHQvL1RPRE86IG1ha2UgdGhpcyBtb3JlIGVmZmljaWVudFxuXHRcdC8vKCBiYXNlZCBvbiBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL21hdHJpeC9mdW5jdGlvbnMvaW52ZXJzZS9mb3VyRC9pbmRleC5odG0gKVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdG40MSAqIChcblx0XHRcdFx0KyBuMTQgKiBuMjMgKiBuMzJcblx0XHRcdFx0IC0gbjEzICogbjI0ICogbjMyXG5cdFx0XHRcdCAtIG4xNCAqIG4yMiAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xMiAqIG4yMyAqIG4zNFxuXHRcdFx0KSArXG5cdFx0XHRuNDIgKiAoXG5cdFx0XHRcdCsgbjExICogbjIzICogbjM0XG5cdFx0XHRcdCAtIG4xMSAqIG4yNCAqIG4zM1xuXHRcdFx0XHQgKyBuMTQgKiBuMjEgKiBuMzNcblx0XHRcdFx0IC0gbjEzICogbjIxICogbjM0XG5cdFx0XHRcdCArIG4xMyAqIG4yNCAqIG4zMVxuXHRcdFx0XHQgLSBuMTQgKiBuMjMgKiBuMzFcblx0XHRcdCkgK1xuXHRcdFx0bjQzICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTEgKiBuMjIgKiBuMzRcblx0XHRcdFx0IC0gbjE0ICogbjIxICogbjMyXG5cdFx0XHRcdCArIG4xMiAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTQgKiBuMjIgKiBuMzFcblx0XHRcdFx0IC0gbjEyICogbjI0ICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40NCAqIChcblx0XHRcdFx0LSBuMTMgKiBuMjIgKiBuMzFcblx0XHRcdFx0IC0gbjExICogbjIzICogbjMyXG5cdFx0XHRcdCArIG4xMSAqIG4yMiAqIG4zM1xuXHRcdFx0XHQgKyBuMTMgKiBuMjEgKiBuMzJcblx0XHRcdFx0IC0gbjEyICogbjIxICogbjMzXG5cdFx0XHRcdCArIG4xMiAqIG4yMyAqIG4zMVxuXHRcdFx0KVxuXG5cdFx0KTtcblxuXHR9XG5cblx0dHJhbnNwb3NlKCkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGxldCB0bXA7XG5cblx0XHR0bXAgPSB0ZVsgMSBdOyB0ZVsgMSBdID0gdGVbIDQgXTsgdGVbIDQgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgMiBdOyB0ZVsgMiBdID0gdGVbIDggXTsgdGVbIDggXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgNiBdOyB0ZVsgNiBdID0gdGVbIDkgXTsgdGVbIDkgXSA9IHRtcDtcblxuXHRcdHRtcCA9IHRlWyAzIF07IHRlWyAzIF0gPSB0ZVsgMTIgXTsgdGVbIDEyIF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDcgXTsgdGVbIDcgXSA9IHRlWyAxMyBdOyB0ZVsgMTMgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgMTEgXTsgdGVbIDExIF0gPSB0ZVsgMTQgXTsgdGVbIDE0IF0gPSB0bXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0UG9zaXRpb24oIHgsIHksIHogKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHR0ZVsgMTIgXSA9IHgueDtcblx0XHRcdHRlWyAxMyBdID0geC55O1xuXHRcdFx0dGVbIDE0IF0gPSB4Lno7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0ZVsgMTIgXSA9IHg7XG5cdFx0XHR0ZVsgMTMgXSA9IHk7XG5cdFx0XHR0ZVsgMTQgXSA9IHo7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aW52ZXJ0KCkge1xuXG5cdFx0Ly8gYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLFxuXG5cdFx0XHRuMTEgPSB0ZVsgMCBdLCBuMjEgPSB0ZVsgMSBdLCBuMzEgPSB0ZVsgMiBdLCBuNDEgPSB0ZVsgMyBdLFxuXHRcdFx0bjEyID0gdGVbIDQgXSwgbjIyID0gdGVbIDUgXSwgbjMyID0gdGVbIDYgXSwgbjQyID0gdGVbIDcgXSxcblx0XHRcdG4xMyA9IHRlWyA4IF0sIG4yMyA9IHRlWyA5IF0sIG4zMyA9IHRlWyAxMCBdLCBuNDMgPSB0ZVsgMTEgXSxcblx0XHRcdG4xNCA9IHRlWyAxMiBdLCBuMjQgPSB0ZVsgMTMgXSwgbjM0ID0gdGVbIDE0IF0sIG40NCA9IHRlWyAxNSBdLFxuXG5cdFx0XHR0MTEgPSBuMjMgKiBuMzQgKiBuNDIgLSBuMjQgKiBuMzMgKiBuNDIgKyBuMjQgKiBuMzIgKiBuNDMgLSBuMjIgKiBuMzQgKiBuNDMgLSBuMjMgKiBuMzIgKiBuNDQgKyBuMjIgKiBuMzMgKiBuNDQsXG5cdFx0XHR0MTIgPSBuMTQgKiBuMzMgKiBuNDIgLSBuMTMgKiBuMzQgKiBuNDIgLSBuMTQgKiBuMzIgKiBuNDMgKyBuMTIgKiBuMzQgKiBuNDMgKyBuMTMgKiBuMzIgKiBuNDQgLSBuMTIgKiBuMzMgKiBuNDQsXG5cdFx0XHR0MTMgPSBuMTMgKiBuMjQgKiBuNDIgLSBuMTQgKiBuMjMgKiBuNDIgKyBuMTQgKiBuMjIgKiBuNDMgLSBuMTIgKiBuMjQgKiBuNDMgLSBuMTMgKiBuMjIgKiBuNDQgKyBuMTIgKiBuMjMgKiBuNDQsXG5cdFx0XHR0MTQgPSBuMTQgKiBuMjMgKiBuMzIgLSBuMTMgKiBuMjQgKiBuMzIgLSBuMTQgKiBuMjIgKiBuMzMgKyBuMTIgKiBuMjQgKiBuMzMgKyBuMTMgKiBuMjIgKiBuMzQgLSBuMTIgKiBuMjMgKiBuMzQ7XG5cblx0XHRjb25zdCBkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTMgKyBuNDEgKiB0MTQ7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCApO1xuXG5cdFx0Y29uc3QgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjI0ICogbjMzICogbjQxIC0gbjIzICogbjM0ICogbjQxIC0gbjI0ICogbjMxICogbjQzICsgbjIxICogbjM0ICogbjQzICsgbjIzICogbjMxICogbjQ0IC0gbjIxICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjIyICogbjM0ICogbjQxIC0gbjI0ICogbjMyICogbjQxICsgbjI0ICogbjMxICogbjQyIC0gbjIxICogbjM0ICogbjQyIC0gbjIyICogbjMxICogbjQ0ICsgbjIxICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgNCBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA2IF0gPSAoIG4xNCAqIG4zMiAqIG40MSAtIG4xMiAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMSAqIG40MiArIG4xMSAqIG4zNCAqIG40MiArIG4xMiAqIG4zMSAqIG40NCAtIG4xMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDggXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgOSBdID0gKCBuMTQgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjEgKiBuNDMgKyBuMTEgKiBuMjQgKiBuNDMgKyBuMTMgKiBuMjEgKiBuNDQgLSBuMTEgKiBuMjMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTAgXSA9ICggbjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7XG5cdFx0dGVbIDEzIF0gPSAoIG4xMyAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMyAqIG4zMSArIG4xNCAqIG4yMSAqIG4zMyAtIG4xMSAqIG4yNCAqIG4zMyAtIG4xMyAqIG4yMSAqIG4zNCArIG4xMSAqIG4yMyAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNCBdID0gKCBuMTQgKiBuMjIgKiBuMzEgLSBuMTIgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjEgKiBuMzIgKyBuMTEgKiBuMjQgKiBuMzIgKyBuMTIgKiBuMjEgKiBuMzQgLSBuMTEgKiBuMjIgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2NhbGUoIHYgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgeCA9IHYueCwgeSA9IHYueSwgeiA9IHYuejtcblxuXHRcdHRlWyAwIF0gKj0geDsgdGVbIDQgXSAqPSB5OyB0ZVsgOCBdICo9IHo7XG5cdFx0dGVbIDEgXSAqPSB4OyB0ZVsgNSBdICo9IHk7IHRlWyA5IF0gKj0gejtcblx0XHR0ZVsgMiBdICo9IHg7IHRlWyA2IF0gKj0geTsgdGVbIDEwIF0gKj0gejtcblx0XHR0ZVsgMyBdICo9IHg7IHRlWyA3IF0gKj0geTsgdGVbIDExIF0gKj0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRNYXhTY2FsZU9uQXhpcygpIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IHNjYWxlWFNxID0gdGVbIDAgXSAqIHRlWyAwIF0gKyB0ZVsgMSBdICogdGVbIDEgXSArIHRlWyAyIF0gKiB0ZVsgMiBdO1xuXHRcdGNvbnN0IHNjYWxlWVNxID0gdGVbIDQgXSAqIHRlWyA0IF0gKyB0ZVsgNSBdICogdGVbIDUgXSArIHRlWyA2IF0gKiB0ZVsgNiBdO1xuXHRcdGNvbnN0IHNjYWxlWlNxID0gdGVbIDggXSAqIHRlWyA4IF0gKyB0ZVsgOSBdICogdGVbIDkgXSArIHRlWyAxMCBdICogdGVbIDEwIF07XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLm1heCggc2NhbGVYU3EsIHNjYWxlWVNxLCBzY2FsZVpTcSApICk7XG5cblx0fVxuXG5cdG1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCB4LFxuXHRcdFx0MCwgMSwgMCwgeSxcblx0XHRcdDAsIDAsIDEsIHosXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvblgoIHRoZXRhICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIGMsIC0gcywgMCxcblx0XHRcdDAsIHMsIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvblkoIHRoZXRhICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0IGMsIDAsIHMsIDAsXG5cdFx0XHQgMCwgMSwgMCwgMCxcblx0XHRcdC0gcywgMCwgYywgMCxcblx0XHRcdCAwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvblooIHRoZXRhICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0YywgLSBzLCAwLCAwLFxuXHRcdFx0cywgYywgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvbkF4aXMoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gQmFzZWQgb24gaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIGFuZ2xlICk7XG5cdFx0Y29uc3QgcyA9IE1hdGguc2luKCBhbmdsZSApO1xuXHRcdGNvbnN0IHQgPSAxIC0gYztcblx0XHRjb25zdCB4ID0gYXhpcy54LCB5ID0gYXhpcy55LCB6ID0gYXhpcy56O1xuXHRcdGNvbnN0IHR4ID0gdCAqIHgsIHR5ID0gdCAqIHk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0dHggKiB4ICsgYywgdHggKiB5IC0gcyAqIHosIHR4ICogeiArIHMgKiB5LCAwLFxuXHRcdFx0dHggKiB5ICsgcyAqIHosIHR5ICogeSArIGMsIHR5ICogeiAtIHMgKiB4LCAwLFxuXHRcdFx0dHggKiB6IC0gcyAqIHksIHR5ICogeiArIHMgKiB4LCB0ICogeiAqIHogKyBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlU2NhbGUoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0eCwgMCwgMCwgMCxcblx0XHRcdDAsIHksIDAsIDAsXG5cdFx0XHQwLCAwLCB6LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlU2hlYXIoIHh5LCB4eiwgeXgsIHl6LCB6eCwgenkgKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgeXgsIHp4LCAwLFxuXHRcdFx0eHksIDEsIHp5LCAwLFxuXHRcdFx0eHosIHl6LCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCB4ID0gcXVhdGVybmlvbi5feCwgeSA9IHF1YXRlcm5pb24uX3ksIHogPSBxdWF0ZXJuaW9uLl96LCB3ID0gcXVhdGVybmlvbi5fdztcblx0XHRjb25zdCB4MiA9IHggKyB4LFx0eTIgPSB5ICsgeSwgejIgPSB6ICsgejtcblx0XHRjb25zdCB4eCA9IHggKiB4MiwgeHkgPSB4ICogeTIsIHh6ID0geCAqIHoyO1xuXHRcdGNvbnN0IHl5ID0geSAqIHkyLCB5eiA9IHkgKiB6MiwgenogPSB6ICogejI7XG5cdFx0Y29uc3Qgd3ggPSB3ICogeDIsIHd5ID0gdyAqIHkyLCB3eiA9IHcgKiB6MjtcblxuXHRcdGNvbnN0IHN4ID0gc2NhbGUueCwgc3kgPSBzY2FsZS55LCBzeiA9IHNjYWxlLno7XG5cblx0XHR0ZVsgMCBdID0gKCAxIC0gKCB5eSArIHp6ICkgKSAqIHN4O1xuXHRcdHRlWyAxIF0gPSAoIHh5ICsgd3ogKSAqIHN4O1xuXHRcdHRlWyAyIF0gPSAoIHh6IC0gd3kgKSAqIHN4O1xuXHRcdHRlWyAzIF0gPSAwO1xuXG5cdFx0dGVbIDQgXSA9ICggeHkgLSB3eiApICogc3k7XG5cdFx0dGVbIDUgXSA9ICggMSAtICggeHggKyB6eiApICkgKiBzeTtcblx0XHR0ZVsgNiBdID0gKCB5eiArIHd4ICkgKiBzeTtcblx0XHR0ZVsgNyBdID0gMDtcblxuXHRcdHRlWyA4IF0gPSAoIHh6ICsgd3kgKSAqIHN6O1xuXHRcdHRlWyA5IF0gPSAoIHl6IC0gd3ggKSAqIHN6O1xuXHRcdHRlWyAxMCBdID0gKCAxIC0gKCB4eCArIHl5ICkgKSAqIHN6O1xuXHRcdHRlWyAxMSBdID0gMDtcblxuXHRcdHRlWyAxMiBdID0gcG9zaXRpb24ueDtcblx0XHR0ZVsgMTMgXSA9IHBvc2l0aW9uLnk7XG5cdFx0dGVbIDE0IF0gPSBwb3NpdGlvbi56O1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkZWNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGxldCBzeCA9IF92MSQ1LnNldCggdGVbIDAgXSwgdGVbIDEgXSwgdGVbIDIgXSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN5ID0gX3YxJDUuc2V0KCB0ZVsgNCBdLCB0ZVsgNSBdLCB0ZVsgNiBdICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc3ogPSBfdjEkNS5zZXQoIHRlWyA4IF0sIHRlWyA5IF0sIHRlWyAxMCBdICkubGVuZ3RoKCk7XG5cblx0XHQvLyBpZiBkZXRlcm1pbmUgaXMgbmVnYXRpdmUsIHdlIG5lZWQgdG8gaW52ZXJ0IG9uZSBzY2FsZVxuXHRcdGNvbnN0IGRldCA9IHRoaXMuZGV0ZXJtaW5hbnQoKTtcblx0XHRpZiAoIGRldCA8IDAgKSBzeCA9IC0gc3g7XG5cblx0XHRwb3NpdGlvbi54ID0gdGVbIDEyIF07XG5cdFx0cG9zaXRpb24ueSA9IHRlWyAxMyBdO1xuXHRcdHBvc2l0aW9uLnogPSB0ZVsgMTQgXTtcblxuXHRcdC8vIHNjYWxlIHRoZSByb3RhdGlvbiBwYXJ0XG5cdFx0X20xJDIuY29weSggdGhpcyApO1xuXG5cdFx0Y29uc3QgaW52U1ggPSAxIC8gc3g7XG5cdFx0Y29uc3QgaW52U1kgPSAxIC8gc3k7XG5cdFx0Y29uc3QgaW52U1ogPSAxIC8gc3o7XG5cblx0XHRfbTEkMi5lbGVtZW50c1sgMCBdICo9IGludlNYO1xuXHRcdF9tMSQyLmVsZW1lbnRzWyAxIF0gKj0gaW52U1g7XG5cdFx0X20xJDIuZWxlbWVudHNbIDIgXSAqPSBpbnZTWDtcblxuXHRcdF9tMSQyLmVsZW1lbnRzWyA0IF0gKj0gaW52U1k7XG5cdFx0X20xJDIuZWxlbWVudHNbIDUgXSAqPSBpbnZTWTtcblx0XHRfbTEkMi5lbGVtZW50c1sgNiBdICo9IGludlNZO1xuXG5cdFx0X20xJDIuZWxlbWVudHNbIDggXSAqPSBpbnZTWjtcblx0XHRfbTEkMi5lbGVtZW50c1sgOSBdICo9IGludlNaO1xuXHRcdF9tMSQyLmVsZW1lbnRzWyAxMCBdICo9IGludlNaO1xuXG5cdFx0cXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSQyICk7XG5cblx0XHRzY2FsZS54ID0gc3g7XG5cdFx0c2NhbGUueSA9IHN5O1xuXHRcdHNjYWxlLnogPSBzejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUGVyc3BlY3RpdmUoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICkge1xuXG5cdFx0aWYgKCBmYXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm1ha2VQZXJzcGVjdGl2ZSgpIGhhcyBiZWVuIHJlZGVmaW5lZCBhbmQgaGFzIGEgbmV3IHNpZ25hdHVyZS4gUGxlYXNlIGNoZWNrIHRoZSBkb2NzLicgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCB4ID0gMiAqIG5lYXIgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdGNvbnN0IHkgPSAyICogbmVhciAvICggdG9wIC0gYm90dG9tICk7XG5cblx0XHRjb25zdCBhID0gKCByaWdodCArIGxlZnQgKSAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0Y29uc3QgYiA9ICggdG9wICsgYm90dG9tICkgLyAoIHRvcCAtIGJvdHRvbSApO1xuXHRcdGNvbnN0IGMgPSAtICggZmFyICsgbmVhciApIC8gKCBmYXIgLSBuZWFyICk7XG5cdFx0Y29uc3QgZCA9IC0gMiAqIGZhciAqIG5lYXIgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdHRlWyAwIF0gPSB4O1x0dGVbIDQgXSA9IDA7XHR0ZVsgOCBdID0gYTtcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSB5O1x0dGVbIDkgXSA9IGI7XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gYztcdHRlWyAxNCBdID0gZDtcblx0XHR0ZVsgMyBdID0gMDtcdHRlWyA3IF0gPSAwO1x0dGVbIDExIF0gPSAtIDE7XHR0ZVsgMTUgXSA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZU9ydGhvZ3JhcGhpYyggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgdyA9IDEuMCAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0Y29uc3QgaCA9IDEuMCAvICggdG9wIC0gYm90dG9tICk7XG5cdFx0Y29uc3QgcCA9IDEuMCAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0Y29uc3QgeCA9ICggcmlnaHQgKyBsZWZ0ICkgKiB3O1xuXHRcdGNvbnN0IHkgPSAoIHRvcCArIGJvdHRvbSApICogaDtcblx0XHRjb25zdCB6ID0gKCBmYXIgKyBuZWFyICkgKiBwO1xuXG5cdFx0dGVbIDAgXSA9IDIgKiB3O1x0dGVbIDQgXSA9IDA7XHR0ZVsgOCBdID0gMDtcdHRlWyAxMiBdID0gLSB4O1xuXHRcdHRlWyAxIF0gPSAwO1x0dGVbIDUgXSA9IDIgKiBoO1x0dGVbIDkgXSA9IDA7XHR0ZVsgMTMgXSA9IC0geTtcblx0XHR0ZVsgMiBdID0gMDtcdHRlWyA2IF0gPSAwO1x0dGVbIDEwIF0gPSAtIDIgKiBwO1x0dGVbIDE0IF0gPSAtIHo7XG5cdFx0dGVbIDMgXSA9IDA7XHR0ZVsgNyBdID0gMDtcdHRlWyAxMSBdID0gMDtcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIG1hdHJpeCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0ZVsgMSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0ZVsgMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDQgXSA9IHRlWyA0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgOCBdID0gdGVbIDggXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgOSBdID0gdGVbIDkgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTAgXSA9IHRlWyAxMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMSBdID0gdGVbIDExIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgMTIgXSA9IHRlWyAxMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMyBdID0gdGVbIDEzIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDE0IF0gPSB0ZVsgMTQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTUgXSA9IHRlWyAxNSBdO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxufVxuXG5NYXRyaXg0LnByb3RvdHlwZS5pc01hdHJpeDQgPSB0cnVlO1xuXG5jb25zdCBfdjEkNSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9tMSQyID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3plcm8gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCAwLCAwICk7XG5jb25zdCBfb25lID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xuY29uc3QgX3ggPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfeSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF96ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfbWF0cml4JDEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcXVhdGVybmlvbiQzID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xuXG5jbGFzcyBFdWxlciB7XG5cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAsIG9yZGVyID0gRXVsZXIuRGVmYXVsdE9yZGVyICkge1xuXG5cdFx0dGhpcy5feCA9IHg7XG5cdFx0dGhpcy5feSA9IHk7XG5cdFx0dGhpcy5feiA9IHo7XG5cdFx0dGhpcy5fb3JkZXIgPSBvcmRlcjtcblxuXHR9XG5cblx0Z2V0IHgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feDtcblxuXHR9XG5cblx0c2V0IHgoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5feCA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0Z2V0IHkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHR9XG5cblx0c2V0IHkoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5feSA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0Z2V0IHooKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fejtcblxuXHR9XG5cblx0c2V0IHooIHZhbHVlICkge1xuXG5cdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0Z2V0IG9yZGVyKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX29yZGVyO1xuXG5cdH1cblxuXHRzZXQgb3JkZXIoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5fb3JkZXIgPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdHNldCggeCwgeSwgeiwgb3JkZXIgPSB0aGlzLl9vcmRlciApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX29yZGVyID0gb3JkZXI7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX29yZGVyICk7XG5cblx0fVxuXG5cdGNvcHkoIGV1bGVyICkge1xuXG5cdFx0dGhpcy5feCA9IGV1bGVyLl94O1xuXHRcdHRoaXMuX3kgPSBldWxlci5feTtcblx0XHR0aGlzLl96ID0gZXVsZXIuX3o7XG5cdFx0dGhpcy5fb3JkZXIgPSBldWxlci5fb3JkZXI7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtLCBvcmRlciA9IHRoaXMuX29yZGVyLCB1cGRhdGUgPSB0cnVlICkge1xuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdGNvbnN0IHRlID0gbS5lbGVtZW50cztcblx0XHRjb25zdCBtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdO1xuXHRcdGNvbnN0IG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF07XG5cdFx0Y29uc3QgbTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF07XG5cblx0XHRzd2l0Y2ggKCBvcmRlciApIHtcblxuXHRcdFx0Y2FzZSAnWFlaJzpcblxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hc2luKCBjbGFtcCggbTEzLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0xMyApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTtcblx0XHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0xMSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMjIgKTtcblx0XHRcdFx0XHR0aGlzLl96ID0gMDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1lYWic6XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXNpbiggLSBjbGFtcCggbTIzLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0yMyApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTIyICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdaWFknOlxuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIGNsYW1wKCBtMzIsIC0gMSwgMSApICk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggbTMyICkgPCAwLjk5OTk5OTkgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0zMyApO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTIyICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3kgPSAwO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0xMSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWllYJzpcblxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMzEsIC0gMSwgMSApICk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggbTMxICkgPCAwLjk5OTk5OTkgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMzMgKTtcblx0XHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMTEgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMjIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1laWCc6XG5cblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXNpbiggY2xhbXAoIG0yMSwgLSAxLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMjEgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTIyICk7XG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIC0gbTMxLCBtMTEgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTMzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdYWlknOlxuXG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0xMiwgLSAxLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMTIgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0yMiApO1xuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0xMSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0zMyApO1xuXHRcdFx0XHRcdHRoaXMuX3kgPSAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5FdWxlcjogLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGVuY291bnRlcmVkIGFuIHVua25vd24gb3JkZXI6ICcgKyBvcmRlciApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb3JkZXIgPSBvcmRlcjtcblxuXHRcdGlmICggdXBkYXRlID09PSB0cnVlICkgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21RdWF0ZXJuaW9uKCBxLCBvcmRlciwgdXBkYXRlICkge1xuXG5cdFx0X21hdHJpeCQxLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tYXRyaXgkMSwgb3JkZXIsIHVwZGF0ZSApO1xuXG5cdH1cblxuXHRzZXRGcm9tVmVjdG9yMyggdiwgb3JkZXIgPSB0aGlzLl9vcmRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldCggdi54LCB2LnksIHYueiwgb3JkZXIgKTtcblxuXHR9XG5cblx0cmVvcmRlciggbmV3T3JkZXIgKSB7XG5cblx0XHQvLyBXQVJOSU5HOiB0aGlzIGRpc2NhcmRzIHJldm9sdXRpb24gaW5mb3JtYXRpb24gLWJob3VzdG9uXG5cblx0XHRfcXVhdGVybmlvbiQzLnNldEZyb21FdWxlciggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uJDMsIG5ld09yZGVyICk7XG5cblx0fVxuXG5cdGVxdWFscyggZXVsZXIgKSB7XG5cblx0XHRyZXR1cm4gKCBldWxlci5feCA9PT0gdGhpcy5feCApICYmICggZXVsZXIuX3kgPT09IHRoaXMuX3kgKSAmJiAoIGV1bGVyLl96ID09PSB0aGlzLl96ICkgJiYgKCBldWxlci5fb3JkZXIgPT09IHRoaXMuX29yZGVyICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXkgKSB7XG5cblx0XHR0aGlzLl94ID0gYXJyYXlbIDAgXTtcblx0XHR0aGlzLl95ID0gYXJyYXlbIDEgXTtcblx0XHR0aGlzLl96ID0gYXJyYXlbIDIgXTtcblx0XHRpZiAoIGFycmF5WyAzIF0gIT09IHVuZGVmaW5lZCApIHRoaXMuX29yZGVyID0gYXJyYXlbIDMgXTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5feDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5feTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5fejtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy5fb3JkZXI7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdF9vbkNoYW5nZSggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0X29uQ2hhbmdlQ2FsbGJhY2soKSB7fVxuXG59XG5cbkV1bGVyLnByb3RvdHlwZS5pc0V1bGVyID0gdHJ1ZTtcblxuRXVsZXIuRGVmYXVsdE9yZGVyID0gJ1hZWic7XG5FdWxlci5Sb3RhdGlvbk9yZGVycyA9IFsgJ1hZWicsICdZWlgnLCAnWlhZJywgJ1haWScsICdZWFonLCAnWllYJyBdO1xuXG5jbGFzcyBMYXllcnMge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy5tYXNrID0gMSB8IDA7XG5cblx0fVxuXG5cdHNldCggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayA9ICggMSA8PCBjaGFubmVsIHwgMCApID4+PiAwO1xuXG5cdH1cblxuXHRlbmFibGUoIGNoYW5uZWwgKSB7XG5cblx0XHR0aGlzLm1hc2sgfD0gMSA8PCBjaGFubmVsIHwgMDtcblxuXHR9XG5cblx0ZW5hYmxlQWxsKCkge1xuXG5cdFx0dGhpcy5tYXNrID0gMHhmZmZmZmZmZiB8IDA7XG5cblx0fVxuXG5cdHRvZ2dsZSggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayBePSAxIDw8IGNoYW5uZWwgfCAwO1xuXG5cdH1cblxuXHRkaXNhYmxlKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrICY9IH4gKCAxIDw8IGNoYW5uZWwgfCAwICk7XG5cblx0fVxuXG5cdGRpc2FibGVBbGwoKSB7XG5cblx0XHR0aGlzLm1hc2sgPSAwO1xuXG5cdH1cblxuXHR0ZXN0KCBsYXllcnMgKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLm1hc2sgJiBsYXllcnMubWFzayApICE9PSAwO1xuXG5cdH1cblxuXHRpc0VuYWJsZWQoIGNoYW5uZWwgKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLm1hc2sgJiAoIDEgPDwgY2hhbm5lbCB8IDAgKSApICE9PSAwO1xuXG5cdH1cblxufVxuXG5sZXQgX29iamVjdDNESWQgPSAwO1xuXG5jb25zdCBfdjEkNCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9xMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcbmNvbnN0IF9tMSQxID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3RhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX3Bvc2l0aW9uJDMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfc2NhbGUkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9xdWF0ZXJuaW9uJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5cbmNvbnN0IF94QXhpcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDAsIDAgKTtcbmNvbnN0IF95QXhpcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcbmNvbnN0IF96QXhpcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIDAsIDEgKTtcblxuY29uc3QgX2FkZGVkRXZlbnQgPSB7IHR5cGU6ICdhZGRlZCcgfTtcbmNvbnN0IF9yZW1vdmVkRXZlbnQgPSB7IHR5cGU6ICdyZW1vdmVkJyB9O1xuXG5jbGFzcyBPYmplY3QzRCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfb2JqZWN0M0RJZCArKyB9ICk7XG5cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXHRcdHRoaXMudHlwZSA9ICdPYmplY3QzRCc7XG5cblx0XHR0aGlzLnBhcmVudCA9IG51bGw7XG5cdFx0dGhpcy5jaGlsZHJlbiA9IFtdO1xuXG5cdFx0dGhpcy51cCA9IE9iamVjdDNELkRlZmF1bHRVcC5jbG9uZSgpO1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHJvdGF0aW9uID0gbmV3IEV1bGVyKCk7XG5cdFx0Y29uc3QgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdFx0Y29uc3Qgc2NhbGUgPSBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xuXG5cdFx0ZnVuY3Rpb24gb25Sb3RhdGlvbkNoYW5nZSgpIHtcblxuXHRcdFx0cXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIHJvdGF0aW9uLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25RdWF0ZXJuaW9uQ2hhbmdlKCkge1xuXG5cdFx0XHRyb3RhdGlvbi5zZXRGcm9tUXVhdGVybmlvbiggcXVhdGVybmlvbiwgdW5kZWZpbmVkLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0cm90YXRpb24uX29uQ2hhbmdlKCBvblJvdGF0aW9uQ2hhbmdlICk7XG5cdFx0cXVhdGVybmlvbi5fb25DaGFuZ2UoIG9uUXVhdGVybmlvbkNoYW5nZSApO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIHRoaXMsIHtcblx0XHRcdHBvc2l0aW9uOiB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHBvc2l0aW9uXG5cdFx0XHR9LFxuXHRcdFx0cm90YXRpb246IHtcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogcm90YXRpb25cblx0XHRcdH0sXG5cdFx0XHRxdWF0ZXJuaW9uOiB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHF1YXRlcm5pb25cblx0XHRcdH0sXG5cdFx0XHRzY2FsZToge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBzY2FsZVxuXHRcdFx0fSxcblx0XHRcdG1vZGVsVmlld01hdHJpeDoge1xuXHRcdFx0XHR2YWx1ZTogbmV3IE1hdHJpeDQoKVxuXHRcdFx0fSxcblx0XHRcdG5vcm1hbE1hdHJpeDoge1xuXHRcdFx0XHR2YWx1ZTogbmV3IE1hdHJpeDMoKVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IE9iamVjdDNELkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlO1xuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdHRoaXMuY2FzdFNoYWRvdyA9IGZhbHNlO1xuXHRcdHRoaXMucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcblx0XHR0aGlzLnJlbmRlck9yZGVyID0gMDtcblxuXHRcdHRoaXMuYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG5cdH1cblxuXHRvbkJlZm9yZVJlbmRlciggLyogcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKi8gKSB7fVxuXG5cdG9uQWZ0ZXJSZW5kZXIoIC8qIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICovICkge31cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMubWF0cml4LnByZW11bHRpcGx5KCBtYXRyaXggKTtcblxuXHRcdHRoaXMubWF0cml4LmRlY29tcG9zZSggdGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlICk7XG5cblx0fVxuXG5cdGFwcGx5UXVhdGVybmlvbiggcSApIHtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBhc3N1bWVzIGF4aXMgaXMgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0fVxuXG5cdHNldFJvdGF0aW9uRnJvbUV1bGVyKCBldWxlciApIHtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIGV1bGVyLCB0cnVlICk7XG5cblx0fVxuXG5cdHNldFJvdGF0aW9uRnJvbU1hdHJpeCggbSApIHtcblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICk7XG5cblx0fVxuXG5cdHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHQvLyBhc3N1bWVzIHEgaXMgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHEgKTtcblxuXHR9XG5cblx0cm90YXRlT25BeGlzKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBvYmplY3Qgb24gYXhpcyBpbiBvYmplY3Qgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0X3ExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24ubXVsdGlwbHkoIF9xMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdGF0ZU9uV29ybGRBeGlzKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBvYmplY3Qgb24gYXhpcyBpbiB3b3JsZCBzcGFjZVxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cdFx0Ly8gbWV0aG9kIGFzc3VtZXMgbm8gcm90YXRlZCBwYXJlbnRcblxuXHRcdF9xMS5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApO1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBfcTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGVYKCBhbmdsZSApIHtcblxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggX3hBeGlzLCBhbmdsZSApO1xuXG5cdH1cblxuXHRyb3RhdGVZKCBhbmdsZSApIHtcblxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggX3lBeGlzLCBhbmdsZSApO1xuXG5cdH1cblxuXHRyb3RhdGVaKCBhbmdsZSApIHtcblxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggX3pBeGlzLCBhbmdsZSApO1xuXG5cdH1cblxuXHR0cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkge1xuXG5cdFx0Ly8gdHJhbnNsYXRlIG9iamVjdCBieSBkaXN0YW5jZSBhbG9uZyBheGlzIGluIG9iamVjdCBzcGFjZVxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHRfdjEkNC5jb3B5KCBheGlzICkuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzLnF1YXRlcm5pb24gKTtcblxuXHRcdHRoaXMucG9zaXRpb24uYWRkKCBfdjEkNC5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZVgoIGRpc3RhbmNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBfeEF4aXMsIGRpc3RhbmNlICk7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZVkoIGRpc3RhbmNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBfeUF4aXMsIGRpc3RhbmNlICk7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZVooIGRpc3RhbmNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBfekF4aXMsIGRpc3RhbmNlICk7XG5cblx0fVxuXG5cdGxvY2FsVG9Xb3JsZCggdmVjdG9yICkge1xuXG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHR9XG5cblx0d29ybGRUb0xvY2FsKCB2ZWN0b3IgKSB7XG5cblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggX20xJDEuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpICk7XG5cblx0fVxuXG5cdGxvb2tBdCggeCwgeSwgeiApIHtcblxuXHRcdC8vIFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgb2JqZWN0cyBoYXZpbmcgbm9uLXVuaWZvcm1seS1zY2FsZWQgcGFyZW50KHMpXG5cblx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHRfdGFyZ2V0LmNvcHkoIHggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF90YXJnZXQuc2V0KCB4LCB5LCB6ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRfcG9zaXRpb24kMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdGlmICggdGhpcy5pc0NhbWVyYSB8fCB0aGlzLmlzTGlnaHQgKSB7XG5cblx0XHRcdF9tMSQxLmxvb2tBdCggX3Bvc2l0aW9uJDMsIF90YXJnZXQsIHRoaXMudXAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9tMSQxLmxvb2tBdCggX3RhcmdldCwgX3Bvc2l0aW9uJDMsIHRoaXMudXAgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSQxICk7XG5cblx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0X20xJDEuZXh0cmFjdFJvdGF0aW9uKCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdF9xMS5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSQxICk7XG5cdFx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIF9xMS5pbnZlcnQoKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRhZGQoIG9iamVjdCApIHtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5hZGQoIGFyZ3VtZW50c1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdCA9PT0gdGhpcyApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhblxcJ3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiBpdHNlbGYuJywgb2JqZWN0ICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0ICYmIG9iamVjdC5pc09iamVjdDNEICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5wYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0b2JqZWN0LnBhcmVudC5yZW1vdmUoIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG9iamVjdC5wYXJlbnQgPSB0aGlzO1xuXHRcdFx0dGhpcy5jaGlsZHJlbi5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIF9hZGRlZEV2ZW50ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3Qgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk9iamVjdDNELicsIG9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJlbW92ZSggb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLnJlbW92ZSggYXJndW1lbnRzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKCBvYmplY3QgKTtcblxuXHRcdGlmICggaW5kZXggIT09IC0gMSApIHtcblxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IG51bGw7XG5cdFx0XHR0aGlzLmNoaWxkcmVuLnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIF9yZW1vdmVkRXZlbnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyZW1vdmVGcm9tUGFyZW50KCkge1xuXG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cblx0XHRpZiAoIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0cGFyZW50LnJlbW92ZSggdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsZWFyKCkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdCA9IHRoaXMuY2hpbGRyZW5bIGkgXTtcblxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IG51bGw7XG5cblx0XHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KCBfcmVtb3ZlZEV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNoaWxkcmVuLmxlbmd0aCA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXG5cdH1cblxuXHRhdHRhY2goIG9iamVjdCApIHtcblxuXHRcdC8vIGFkZHMgb2JqZWN0IGFzIGEgY2hpbGQgb2YgdGhpcywgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIG9iamVjdCdzIHdvcmxkIHRyYW5zZm9ybVxuXG5cdFx0Ly8gTm90ZTogVGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCBzY2VuZSBncmFwaHMgaGF2aW5nIG5vbi11bmlmb3JtbHktc2NhbGVkIG5vZGVzKHMpXG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0X20xJDEuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdFx0aWYgKCBvYmplY3QucGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRvYmplY3QucGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0XHRfbTEkMS5tdWx0aXBseSggb2JqZWN0LnBhcmVudC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0fVxuXG5cdFx0b2JqZWN0LmFwcGx5TWF0cml4NCggX20xJDEgKTtcblxuXHRcdHRoaXMuYWRkKCBvYmplY3QgKTtcblxuXHRcdG9iamVjdC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIHRydWUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRPYmplY3RCeUlkKCBpZCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICdpZCcsIGlkICk7XG5cblx0fVxuXG5cdGdldE9iamVjdEJ5TmFtZSggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICduYW1lJywgbmFtZSApO1xuXG5cdH1cblxuXHRnZXRPYmplY3RCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpc1sgbmFtZSBdID09PSB2YWx1ZSApIHJldHVybiB0aGlzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bIGkgXTtcblx0XHRcdGNvbnN0IG9iamVjdCA9IGNoaWxkLmdldE9iamVjdEJ5UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cblx0XHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG9iamVjdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9XG5cblx0Z2V0V29ybGRQb3NpdGlvbiggdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdHJldHVybiB0YXJnZXQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fVxuXG5cdGdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24kMywgdGFyZ2V0LCBfc2NhbGUkMiApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0Z2V0V29ybGRTY2FsZSggdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24kMywgX3F1YXRlcm5pb24kMiwgdGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHRnZXRXb3JsZERpcmVjdGlvbiggdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdGNvbnN0IGUgPSB0aGlzLm1hdHJpeFdvcmxkLmVsZW1lbnRzO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIGVbIDggXSwgZVsgOSBdLCBlWyAxMCBdICkubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdHJheWNhc3QoIC8qIHJheWNhc3RlciwgaW50ZXJzZWN0cyAqLyApIHt9XG5cblx0dHJhdmVyc2UoIGNhbGxiYWNrICkge1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNoaWxkcmVuWyBpIF0udHJhdmVyc2UoIGNhbGxiYWNrICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRyYXZlcnNlVmlzaWJsZSggY2FsbGJhY2sgKSB7XG5cblx0XHRpZiAoIHRoaXMudmlzaWJsZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRjYWxsYmFjayggdGhpcyApO1xuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS50cmF2ZXJzZVZpc2libGUoIGNhbGxiYWNrICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApIHtcblxuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdGNhbGxiYWNrKCBwYXJlbnQgKTtcblxuXHRcdFx0cGFyZW50LnRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXgoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5jb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlIHx8IGZvcmNlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weSggdGhpcy5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRmb3JjZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgY2hpbGRyZW5cblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNoaWxkcmVuWyBpIF0udXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZVdvcmxkTWF0cml4KCB1cGRhdGVQYXJlbnRzLCB1cGRhdGVDaGlsZHJlbiApIHtcblxuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCB1cGRhdGVQYXJlbnRzID09PSB0cnVlICYmIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0cGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBjaGlsZHJlblxuXG5cdFx0aWYgKCB1cGRhdGVDaGlsZHJlbiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNoaWxkcmVuWyBpIF0udXBkYXRlV29ybGRNYXRyaXgoIGZhbHNlLCB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Ly8gbWV0YSBpcyBhIHN0cmluZyB3aGVuIGNhbGxlZCBmcm9tIEpTT04uc3RyaW5naWZ5XG5cdFx0Y29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRjb25zdCBvdXRwdXQgPSB7fTtcblxuXHRcdC8vIG1ldGEgaXMgYSBoYXNoIHVzZWQgdG8gY29sbGVjdCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMuXG5cdFx0Ly8gbm90IHByb3ZpZGluZyBpdCBpbXBsaWVzIHRoYXQgdGhpcyBpcyB0aGUgcm9vdCBvYmplY3Rcblx0XHQvLyBiZWluZyBzZXJpYWxpemVkLlxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHQvLyBpbml0aWFsaXplIG1ldGEgb2JqXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHRnZW9tZXRyaWVzOiB7fSxcblx0XHRcdFx0bWF0ZXJpYWxzOiB7fSxcblx0XHRcdFx0dGV4dHVyZXM6IHt9LFxuXHRcdFx0XHRpbWFnZXM6IHt9LFxuXHRcdFx0XHRzaGFwZXM6IHt9LFxuXHRcdFx0XHRza2VsZXRvbnM6IHt9LFxuXHRcdFx0XHRhbmltYXRpb25zOiB7fSxcblx0XHRcdFx0bm9kZXM6IHt9XG5cdFx0XHR9O1xuXG5cdFx0XHRvdXRwdXQubWV0YWRhdGEgPSB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ09iamVjdCcsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ09iamVjdDNELnRvSlNPTidcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHQvLyBzdGFuZGFyZCBPYmplY3QzRCBzZXJpYWxpemF0aW9uXG5cblx0XHRjb25zdCBvYmplY3QgPSB7fTtcblxuXHRcdG9iamVjdC51dWlkID0gdGhpcy51dWlkO1xuXHRcdG9iamVjdC50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgb2JqZWN0Lm5hbWUgPSB0aGlzLm5hbWU7XG5cdFx0aWYgKCB0aGlzLmNhc3RTaGFkb3cgPT09IHRydWUgKSBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnJlY2VpdmVTaGFkb3cgPT09IHRydWUgKSBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgb2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMuZnJ1c3R1bUN1bGxlZCA9PT0gZmFsc2UgKSBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlO1xuXHRcdGlmICggdGhpcy5yZW5kZXJPcmRlciAhPT0gMCApIG9iamVjdC5yZW5kZXJPcmRlciA9IHRoaXMucmVuZGVyT3JkZXI7XG5cdFx0aWYgKCBKU09OLnN0cmluZ2lmeSggdGhpcy51c2VyRGF0YSApICE9PSAne30nICkgb2JqZWN0LnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdG9iamVjdC5sYXllcnMgPSB0aGlzLmxheWVycy5tYXNrO1xuXHRcdG9iamVjdC5tYXRyaXggPSB0aGlzLm1hdHJpeC50b0FycmF5KCk7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9PT0gZmFsc2UgKSBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0Ly8gb2JqZWN0IHNwZWNpZmljIHByb3BlcnRpZXNcblxuXHRcdGlmICggdGhpcy5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdG9iamVjdC50eXBlID0gJ0luc3RhbmNlZE1lc2gnO1xuXHRcdFx0b2JqZWN0LmNvdW50ID0gdGhpcy5jb3VudDtcblx0XHRcdG9iamVjdC5pbnN0YW5jZU1hdHJpeCA9IHRoaXMuaW5zdGFuY2VNYXRyaXgudG9KU09OKCk7XG5cdFx0XHRpZiAoIHRoaXMuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIG9iamVjdC5pbnN0YW5jZUNvbG9yID0gdGhpcy5pbnN0YW5jZUNvbG9yLnRvSlNPTigpO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIHNlcmlhbGl6ZSggbGlicmFyeSwgZWxlbWVudCApIHtcblxuXHRcdFx0aWYgKCBsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID0gZWxlbWVudC50b0pTT04oIG1ldGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbWVudC51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzU2NlbmUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5iYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5iYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IHRoaXMuYmFja2dyb3VuZC50b0pTT04oKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB0aGlzLmJhY2tncm91bmQuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LmJhY2tncm91bmQgPSB0aGlzLmJhY2tncm91bmQudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aGlzLmVudmlyb25tZW50ICYmIHRoaXMuZW52aXJvbm1lbnQuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRcdG9iamVjdC5lbnZpcm9ubWVudCA9IHRoaXMuZW52aXJvbm1lbnQudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5pc01lc2ggfHwgdGhpcy5pc0xpbmUgfHwgdGhpcy5pc1BvaW50cyApIHtcblxuXHRcdFx0b2JqZWN0Lmdlb21ldHJ5ID0gc2VyaWFsaXplKCBtZXRhLmdlb21ldHJpZXMsIHRoaXMuZ2VvbWV0cnkgKTtcblxuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHRoaXMuZ2VvbWV0cnkucGFyYW1ldGVycztcblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgJiYgcGFyYW1ldGVycy5zaGFwZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFwZXMgPSBwYXJhbWV0ZXJzLnNoYXBlcztcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRcdG9iamVjdC5iaW5kTW9kZSA9IHRoaXMuYmluZE1vZGU7XG5cdFx0XHRvYmplY3QuYmluZE1hdHJpeCA9IHRoaXMuYmluZE1hdHJpeC50b0FycmF5KCk7XG5cblx0XHRcdGlmICggdGhpcy5za2VsZXRvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5za2VsZXRvbnMsIHRoaXMuc2tlbGV0b24gKTtcblxuXHRcdFx0XHRvYmplY3Quc2tlbGV0b24gPSB0aGlzLnNrZWxldG9uLnV1aWQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5tYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHRoaXMubWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRjb25zdCB1dWlkcyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMubWF0ZXJpYWwubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHV1aWRzLnB1c2goIHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWxbIGkgXSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHV1aWRzO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRvYmplY3QuY2hpbGRyZW4gPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmNoaWxkcmVuLnB1c2goIHRoaXMuY2hpbGRyZW5bIGkgXS50b0pTT04oIG1ldGEgKS5vYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggdGhpcy5hbmltYXRpb25zLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdG9iamVjdC5hbmltYXRpb25zID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuYW5pbWF0aW9ucy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb25zWyBpIF07XG5cblx0XHRcdFx0b2JqZWN0LmFuaW1hdGlvbnMucHVzaCggc2VyaWFsaXplKCBtZXRhLmFuaW1hdGlvbnMsIGFuaW1hdGlvbiApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRjb25zdCBnZW9tZXRyaWVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5nZW9tZXRyaWVzICk7XG5cdFx0XHRjb25zdCBtYXRlcmlhbHMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLm1hdGVyaWFscyApO1xuXHRcdFx0Y29uc3QgdGV4dHVyZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnRleHR1cmVzICk7XG5cdFx0XHRjb25zdCBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApO1xuXHRcdFx0Y29uc3Qgc2hhcGVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5zaGFwZXMgKTtcblx0XHRcdGNvbnN0IHNrZWxldG9ucyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuc2tlbGV0b25zICk7XG5cdFx0XHRjb25zdCBhbmltYXRpb25zID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5hbmltYXRpb25zICk7XG5cdFx0XHRjb25zdCBub2RlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEubm9kZXMgKTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyaWVzLmxlbmd0aCA+IDAgKSBvdXRwdXQuZ2VvbWV0cmllcyA9IGdlb21ldHJpZXM7XG5cdFx0XHRpZiAoIG1hdGVyaWFscy5sZW5ndGggPiAwICkgb3V0cHV0Lm1hdGVyaWFscyA9IG1hdGVyaWFscztcblx0XHRcdGlmICggdGV4dHVyZXMubGVuZ3RoID4gMCApIG91dHB1dC50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIG91dHB1dC5pbWFnZXMgPSBpbWFnZXM7XG5cdFx0XHRpZiAoIHNoYXBlcy5sZW5ndGggPiAwICkgb3V0cHV0LnNoYXBlcyA9IHNoYXBlcztcblx0XHRcdGlmICggc2tlbGV0b25zLmxlbmd0aCA+IDAgKSBvdXRwdXQuc2tlbGV0b25zID0gc2tlbGV0b25zO1xuXHRcdFx0aWYgKCBhbmltYXRpb25zLmxlbmd0aCA+IDAgKSBvdXRwdXQuYW5pbWF0aW9ucyA9IGFuaW1hdGlvbnM7XG5cdFx0XHRpZiAoIG5vZGVzLmxlbmd0aCA+IDAgKSBvdXRwdXQubm9kZXMgPSBub2RlcztcblxuXHRcdH1cblxuXHRcdG91dHB1dC5vYmplY3QgPSBvYmplY3Q7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdFx0Ly8gZXh0cmFjdCBkYXRhIGZyb20gdGhlIGNhY2hlIGhhc2hcblx0XHQvLyByZW1vdmUgbWV0YWRhdGEgb24gZWFjaCBpdGVtXG5cdFx0Ly8gYW5kIHJldHVybiBhcyBhcnJheVxuXHRcdGZ1bmN0aW9uIGV4dHJhY3RGcm9tQ2FjaGUoIGNhY2hlICkge1xuXG5cdFx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0gY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5tZXRhZGF0YTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjbG9uZSggcmVjdXJzaXZlICkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcywgcmVjdXJzaXZlICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlID0gdHJ1ZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0dGhpcy51cC5jb3B5KCBzb3VyY2UudXAgKTtcblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggc291cmNlLnBvc2l0aW9uICk7XG5cdFx0dGhpcy5yb3RhdGlvbi5vcmRlciA9IHNvdXJjZS5yb3RhdGlvbi5vcmRlcjtcblx0XHR0aGlzLnF1YXRlcm5pb24uY29weSggc291cmNlLnF1YXRlcm5pb24gKTtcblx0XHR0aGlzLnNjYWxlLmNvcHkoIHNvdXJjZS5zY2FsZSApO1xuXG5cdFx0dGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApO1xuXHRcdHRoaXMubWF0cml4V29ybGQuY29weSggc291cmNlLm1hdHJpeFdvcmxkICk7XG5cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBzb3VyY2UubWF0cml4V29ybGROZWVkc1VwZGF0ZTtcblxuXHRcdHRoaXMubGF5ZXJzLm1hc2sgPSBzb3VyY2UubGF5ZXJzLm1hc2s7XG5cdFx0dGhpcy52aXNpYmxlID0gc291cmNlLnZpc2libGU7XG5cblx0XHR0aGlzLmNhc3RTaGFkb3cgPSBzb3VyY2UuY2FzdFNoYWRvdztcblx0XHR0aGlzLnJlY2VpdmVTaGFkb3cgPSBzb3VyY2UucmVjZWl2ZVNoYWRvdztcblxuXHRcdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHNvdXJjZS5mcnVzdHVtQ3VsbGVkO1xuXHRcdHRoaXMucmVuZGVyT3JkZXIgPSBzb3VyY2UucmVuZGVyT3JkZXI7XG5cblx0XHR0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7XG5cblx0XHRpZiAoIHJlY3Vyc2l2ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgc291cmNlLmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjaGlsZCA9IHNvdXJjZS5jaGlsZHJlblsgaSBdO1xuXHRcdFx0XHR0aGlzLmFkZCggY2hpbGQuY2xvbmUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuT2JqZWN0M0QuRGVmYXVsdFVwID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcbk9iamVjdDNELkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcblxuT2JqZWN0M0QucHJvdG90eXBlLmlzT2JqZWN0M0QgPSB0cnVlO1xuXG5jb25zdCBfdjAkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MSQzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YyJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjMkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX3ZhYiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92YWMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmJjID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZhcCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92YnAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmNwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBUcmlhbmdsZSB7XG5cblx0Y29uc3RydWN0b3IoIGEgPSBuZXcgVmVjdG9yMygpLCBiID0gbmV3IFZlY3RvcjMoKSwgYyA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHR0aGlzLmEgPSBhO1xuXHRcdHRoaXMuYiA9IGI7XG5cdFx0dGhpcy5jID0gYztcblxuXHR9XG5cblx0c3RhdGljIGdldE5vcm1hbCggYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdFx0dGFyZ2V0LnN1YlZlY3RvcnMoIGMsIGIgKTtcblx0XHRfdjAkMS5zdWJWZWN0b3JzKCBhLCBiICk7XG5cdFx0dGFyZ2V0LmNyb3NzKCBfdjAkMSApO1xuXG5cdFx0Y29uc3QgdGFyZ2V0TGVuZ3RoU3EgPSB0YXJnZXQubGVuZ3RoU3EoKTtcblx0XHRpZiAoIHRhcmdldExlbmd0aFNxID4gMCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5tdWx0aXBseVNjYWxhciggMSAvIE1hdGguc3FydCggdGFyZ2V0TGVuZ3RoU3EgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIDAsIDAsIDAgKTtcblxuXHR9XG5cblx0Ly8gc3RhdGljL2luc3RhbmNlIG1ldGhvZCB0byBjYWxjdWxhdGUgYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXNcblx0Ly8gYmFzZWQgb246IGh0dHA6Ly93d3cuYmxhY2twYXduLmNvbS90ZXh0cy9wb2ludGlucG9seS9kZWZhdWx0Lmh0bWxcblx0c3RhdGljIGdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdF92MCQxLnN1YlZlY3RvcnMoIGMsIGEgKTtcblx0XHRfdjEkMy5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0X3YyJDIuc3ViVmVjdG9ycyggcG9pbnQsIGEgKTtcblxuXHRcdGNvbnN0IGRvdDAwID0gX3YwJDEuZG90KCBfdjAkMSApO1xuXHRcdGNvbnN0IGRvdDAxID0gX3YwJDEuZG90KCBfdjEkMyApO1xuXHRcdGNvbnN0IGRvdDAyID0gX3YwJDEuZG90KCBfdjIkMiApO1xuXHRcdGNvbnN0IGRvdDExID0gX3YxJDMuZG90KCBfdjEkMyApO1xuXHRcdGNvbnN0IGRvdDEyID0gX3YxJDMuZG90KCBfdjIkMiApO1xuXG5cdFx0Y29uc3QgZGVub20gPSAoIGRvdDAwICogZG90MTEgLSBkb3QwMSAqIGRvdDAxICk7XG5cblx0XHQvLyBjb2xsaW5lYXIgb3Igc2luZ3VsYXIgdHJpYW5nbGVcblx0XHRpZiAoIGRlbm9tID09PSAwICkge1xuXG5cdFx0XHQvLyBhcmJpdHJhcnkgbG9jYXRpb24gb3V0c2lkZSBvZiB0cmlhbmdsZT9cblx0XHRcdC8vIG5vdCBzdXJlIGlmIHRoaXMgaXMgdGhlIGJlc3QgaWRlYSwgbWF5YmUgc2hvdWxkIGJlIHJldHVybmluZyB1bmRlZmluZWRcblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCAtIDIsIC0gMSwgLSAxICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbnZEZW5vbSA9IDEgLyBkZW5vbTtcblx0XHRjb25zdCB1ID0gKCBkb3QxMSAqIGRvdDAyIC0gZG90MDEgKiBkb3QxMiApICogaW52RGVub207XG5cdFx0Y29uc3QgdiA9ICggZG90MDAgKiBkb3QxMiAtIGRvdDAxICogZG90MDIgKSAqIGludkRlbm9tO1xuXG5cdFx0Ly8gYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgbXVzdCBhbHdheXMgc3VtIHRvIDFcblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggMSAtIHUgLSB2LCB2LCB1ICk7XG5cblx0fVxuXG5cdHN0YXRpYyBjb250YWluc1BvaW50KCBwb2ludCwgYSwgYiwgYyApIHtcblxuXHRcdHRoaXMuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgX3YzJDEgKTtcblxuXHRcdHJldHVybiAoIF92MyQxLnggPj0gMCApICYmICggX3YzJDEueSA+PSAwICkgJiYgKCAoIF92MyQxLnggKyBfdjMkMS55ICkgPD0gMSApO1xuXG5cdH1cblxuXHRzdGF0aWMgZ2V0VVYoIHBvaW50LCBwMSwgcDIsIHAzLCB1djEsIHV2MiwgdXYzLCB0YXJnZXQgKSB7XG5cblx0XHR0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIHAxLCBwMiwgcDMsIF92MyQxICk7XG5cblx0XHR0YXJnZXQuc2V0KCAwLCAwICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggdXYxLCBfdjMkMS54ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggdXYyLCBfdjMkMS55ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggdXYzLCBfdjMkMS56ICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHRzdGF0aWMgaXNGcm9udEZhY2luZyggYSwgYiwgYywgZGlyZWN0aW9uICkge1xuXG5cdFx0X3YwJDEuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdF92MSQzLnN1YlZlY3RvcnMoIGEsIGIgKTtcblxuXHRcdC8vIHN0cmljdGx5IGZyb250IGZhY2luZ1xuXHRcdHJldHVybiAoIF92MCQxLmNyb3NzKCBfdjEkMyApLmRvdCggZGlyZWN0aW9uICkgPCAwICkgPyB0cnVlIDogZmFsc2U7XG5cblx0fVxuXG5cdHNldCggYSwgYiwgYyApIHtcblxuXHRcdHRoaXMuYS5jb3B5KCBhICk7XG5cdFx0dGhpcy5iLmNvcHkoIGIgKTtcblx0XHR0aGlzLmMuY29weSggYyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Qb2ludHNBbmRJbmRpY2VzKCBwb2ludHMsIGkwLCBpMSwgaTIgKSB7XG5cblx0XHR0aGlzLmEuY29weSggcG9pbnRzWyBpMCBdICk7XG5cdFx0dGhpcy5iLmNvcHkoIHBvaW50c1sgaTEgXSApO1xuXHRcdHRoaXMuYy5jb3B5KCBwb2ludHNbIGkyIF0gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tQXR0cmlidXRlQW5kSW5kaWNlcyggYXR0cmlidXRlLCBpMCwgaTEsIGkyICkge1xuXG5cdFx0dGhpcy5hLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaTAgKTtcblx0XHR0aGlzLmIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpMSApO1xuXHRcdHRoaXMuYy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdGNvcHkoIHRyaWFuZ2xlICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHRyaWFuZ2xlLmEgKTtcblx0XHR0aGlzLmIuY29weSggdHJpYW5nbGUuYiApO1xuXHRcdHRoaXMuYy5jb3B5KCB0cmlhbmdsZS5jICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0QXJlYSgpIHtcblxuXHRcdF92MCQxLnN1YlZlY3RvcnMoIHRoaXMuYywgdGhpcy5iICk7XG5cdFx0X3YxJDMuc3ViVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKTtcblxuXHRcdHJldHVybiBfdjAkMS5jcm9zcyggX3YxJDMgKS5sZW5ndGgoKSAqIDAuNTtcblxuXHR9XG5cblx0Z2V0TWlkcG9pbnQoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKS5hZGQoIHRoaXMuYyApLm11bHRpcGx5U2NhbGFyKCAxIC8gMyApO1xuXG5cdH1cblxuXHRnZXROb3JtYWwoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXROb3JtYWwoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCApO1xuXG5cdH1cblxuXHRnZXRQbGFuZSggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXRGcm9tQ29wbGFuYXJQb2ludHMoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTtcblxuXHR9XG5cblx0Z2V0QmFyeWNvb3JkKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCApO1xuXG5cdH1cblxuXHRnZXRVViggcG9pbnQsIHV2MSwgdXYyLCB1djMsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRVViggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHV2MSwgdXYyLCB1djMsIHRhcmdldCApO1xuXG5cdH1cblxuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5jb250YWluc1BvaW50KCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYyApO1xuXG5cdH1cblxuXHRpc0Zyb250RmFjaW5nKCBkaXJlY3Rpb24gKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuaXNGcm9udEZhY2luZyggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgZGlyZWN0aW9uICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiBib3guaW50ZXJzZWN0c1RyaWFuZ2xlKCB0aGlzICk7XG5cblx0fVxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQoIHAsIHRhcmdldCApIHtcblxuXHRcdGNvbnN0IGEgPSB0aGlzLmEsIGIgPSB0aGlzLmIsIGMgPSB0aGlzLmM7XG5cdFx0bGV0IHYsIHc7XG5cblx0XHQvLyBhbGdvcml0aG0gdGhhbmtzIHRvIFJlYWwtVGltZSBDb2xsaXNpb24gRGV0ZWN0aW9uIGJ5IENocmlzdGVyIEVyaWNzb24sXG5cdFx0Ly8gcHVibGlzaGVkIGJ5IE1vcmdhbiBLYXVmbWFubiBQdWJsaXNoZXJzLCAoYykgMjAwNSBFbHNldmllciBJbmMuLFxuXHRcdC8vIHVuZGVyIHRoZSBhY2NvbXBhbnlpbmcgbGljZW5zZTsgc2VlIGNoYXB0ZXIgNS4xLjUgZm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uLlxuXHRcdC8vIGJhc2ljYWxseSwgd2UncmUgZGlzdGluZ3Vpc2hpbmcgd2hpY2ggb2YgdGhlIHZvcm9ub2kgcmVnaW9ucyBvZiB0aGUgdHJpYW5nbGVcblx0XHQvLyB0aGUgcG9pbnQgbGllcyBpbiB3aXRoIHRoZSBtaW5pbXVtIGFtb3VudCBvZiByZWR1bmRhbnQgY29tcHV0YXRpb24uXG5cblx0XHRfdmFiLnN1YlZlY3RvcnMoIGIsIGEgKTtcblx0XHRfdmFjLnN1YlZlY3RvcnMoIGMsIGEgKTtcblx0XHRfdmFwLnN1YlZlY3RvcnMoIHAsIGEgKTtcblx0XHRjb25zdCBkMSA9IF92YWIuZG90KCBfdmFwICk7XG5cdFx0Y29uc3QgZDIgPSBfdmFjLmRvdCggX3ZhcCApO1xuXHRcdGlmICggZDEgPD0gMCAmJiBkMiA8PSAwICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEE7IGJhcnljZW50cmljIGNvb3JkcyAoMSwgMCwgMClcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApO1xuXG5cdFx0fVxuXG5cdFx0X3ZicC5zdWJWZWN0b3JzKCBwLCBiICk7XG5cdFx0Y29uc3QgZDMgPSBfdmFiLmRvdCggX3ZicCApO1xuXHRcdGNvbnN0IGQ0ID0gX3ZhYy5kb3QoIF92YnAgKTtcblx0XHRpZiAoIGQzID49IDAgJiYgZDQgPD0gZDMgKSB7XG5cblx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQjsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLCAwKVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBiICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2YyA9IGQxICogZDQgLSBkMyAqIGQyO1xuXHRcdGlmICggdmMgPD0gMCAmJiBkMSA+PSAwICYmIGQzIDw9IDAgKSB7XG5cblx0XHRcdHYgPSBkMSAvICggZDEgLSBkMyApO1xuXHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQUI7IGJhcnljZW50cmljIGNvb3JkcyAoMS12LCB2LCAwKVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFiLCB2ICk7XG5cblx0XHR9XG5cblx0XHRfdmNwLnN1YlZlY3RvcnMoIHAsIGMgKTtcblx0XHRjb25zdCBkNSA9IF92YWIuZG90KCBfdmNwICk7XG5cdFx0Y29uc3QgZDYgPSBfdmFjLmRvdCggX3ZjcCApO1xuXHRcdGlmICggZDYgPj0gMCAmJiBkNSA8PSBkNiApIHtcblxuXHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBDOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDAsIDAsIDEpXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGMgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHZiID0gZDUgKiBkMiAtIGQxICogZDY7XG5cdFx0aWYgKCB2YiA8PSAwICYmIGQyID49IDAgJiYgZDYgPD0gMCApIHtcblxuXHRcdFx0dyA9IGQyIC8gKCBkMiAtIGQ2ICk7XG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBBQzsgYmFyeWNlbnRyaWMgY29vcmRzICgxLXcsIDAsIHcpXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWMsIHcgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHZhID0gZDMgKiBkNiAtIGQ1ICogZDQ7XG5cdFx0aWYgKCB2YSA8PSAwICYmICggZDQgLSBkMyApID49IDAgJiYgKCBkNSAtIGQ2ICkgPj0gMCApIHtcblxuXHRcdFx0X3ZiYy5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0XHR3ID0gKCBkNCAtIGQzICkgLyAoICggZDQgLSBkMyApICsgKCBkNSAtIGQ2ICkgKTtcblx0XHRcdC8vIGVkZ2UgcmVnaW9uIG9mIEJDOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDAsIDEtdywgdylcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYiApLmFkZFNjYWxlZFZlY3RvciggX3ZiYywgdyApOyAvLyBlZGdlIHJlZ2lvbiBvZiBCQ1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZSByZWdpb25cblx0XHRjb25zdCBkZW5vbSA9IDEgLyAoIHZhICsgdmIgKyB2YyApO1xuXHRcdC8vIHUgPSB2YSAqIGRlbm9tXG5cdFx0diA9IHZiICogZGVub207XG5cdFx0dyA9IHZjICogZGVub207XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWIsIHYgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWMsIHcgKTtcblxuXHR9XG5cblx0ZXF1YWxzKCB0cmlhbmdsZSApIHtcblxuXHRcdHJldHVybiB0cmlhbmdsZS5hLmVxdWFscyggdGhpcy5hICkgJiYgdHJpYW5nbGUuYi5lcXVhbHMoIHRoaXMuYiApICYmIHRyaWFuZ2xlLmMuZXF1YWxzKCB0aGlzLmMgKTtcblxuXHR9XG5cbn1cblxubGV0IG1hdGVyaWFsSWQgPSAwO1xuXG5jbGFzcyBNYXRlcmlhbCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBtYXRlcmlhbElkICsrIH0gKTtcblxuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cdFx0dGhpcy50eXBlID0gJ01hdGVyaWFsJztcblxuXHRcdHRoaXMuZm9nID0gdHJ1ZTtcblxuXHRcdHRoaXMuYmxlbmRpbmcgPSBOb3JtYWxCbGVuZGluZztcblx0XHR0aGlzLnNpZGUgPSBGcm9udFNpZGU7XG5cdFx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBmYWxzZTtcblxuXHRcdHRoaXMub3BhY2l0eSA9IDE7XG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5ibGVuZFNyYyA9IFNyY0FscGhhRmFjdG9yO1xuXHRcdHRoaXMuYmxlbmREc3QgPSBPbmVNaW51c1NyY0FscGhhRmFjdG9yO1xuXHRcdHRoaXMuYmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uO1xuXHRcdHRoaXMuYmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdFx0dGhpcy5ibGVuZERzdEFscGhhID0gbnVsbDtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cblx0XHR0aGlzLmRlcHRoRnVuYyA9IExlc3NFcXVhbERlcHRoO1xuXHRcdHRoaXMuZGVwdGhUZXN0ID0gdHJ1ZTtcblx0XHR0aGlzLmRlcHRoV3JpdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gMHhmZjtcblx0XHR0aGlzLnN0ZW5jaWxGdW5jID0gQWx3YXlzU3RlbmNpbEZ1bmM7XG5cdFx0dGhpcy5zdGVuY2lsUmVmID0gMDtcblx0XHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IDB4ZmY7XG5cdFx0dGhpcy5zdGVuY2lsRmFpbCA9IEtlZXBTdGVuY2lsT3A7XG5cdFx0dGhpcy5zdGVuY2lsWkZhaWwgPSBLZWVwU3RlbmNpbE9wO1xuXHRcdHRoaXMuc3RlbmNpbFpQYXNzID0gS2VlcFN0ZW5jaWxPcDtcblx0XHR0aGlzLnN0ZW5jaWxXcml0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IG51bGw7XG5cdFx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gZmFsc2U7XG5cdFx0dGhpcy5jbGlwU2hhZG93cyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zaGFkb3dTaWRlID0gbnVsbDtcblxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHRydWU7XG5cblx0XHR0aGlzLnByZWNpc2lvbiA9IG51bGw7IC8vIG92ZXJyaWRlIHRoZSByZW5kZXJlcidzIGRlZmF1bHQgcHJlY2lzaW9uIGZvciB0aGlzIG1hdGVyaWFsXG5cblx0XHR0aGlzLnBvbHlnb25PZmZzZXQgPSBmYWxzZTtcblx0XHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAwO1xuXHRcdHRoaXMucG9seWdvbk9mZnNldFVuaXRzID0gMDtcblxuXHRcdHRoaXMuZGl0aGVyaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLmFscGhhVG9Db3ZlcmFnZSA9IGZhbHNlO1xuXHRcdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG5cblx0XHR0aGlzLnZpc2libGUgPSB0cnVlO1xuXG5cdFx0dGhpcy50b25lTWFwcGVkID0gdHJ1ZTtcblxuXHRcdHRoaXMudXNlckRhdGEgPSB7fTtcblxuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0XHR0aGlzLl9hbHBoYVRlc3QgPSAwO1xuXG5cdH1cblxuXHRnZXQgYWxwaGFUZXN0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2FscGhhVGVzdDtcblxuXHR9XG5cblx0c2V0IGFscGhhVGVzdCggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2FscGhhVGVzdCA+IDAgIT09IHZhbHVlID4gMCApIHtcblxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fYWxwaGFUZXN0ID0gdmFsdWU7XG5cblx0fVxuXG5cdG9uQnVpbGQoIC8qIHNoYWRlcm9iamVjdCwgcmVuZGVyZXIgKi8gKSB7fVxuXG5cdG9uQmVmb3JlUmVuZGVyKCAvKiByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG9iamVjdCwgZ3JvdXAgKi8gKSB7fVxuXG5cdG9uQmVmb3JlQ29tcGlsZSggLyogc2hhZGVyb2JqZWN0LCByZW5kZXJlciAqLyApIHt9XG5cblx0Y3VzdG9tUHJvZ3JhbUNhY2hlS2V5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMub25CZWZvcmVDb21waWxlLnRvU3RyaW5nKCk7XG5cblx0fVxuXG5cdHNldFZhbHVlcyggdmFsdWVzICkge1xuXG5cdFx0aWYgKCB2YWx1ZXMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiB2YWx1ZXMgKSB7XG5cblx0XHRcdGNvbnN0IG5ld1ZhbHVlID0gdmFsdWVzWyBrZXkgXTtcblxuXHRcdFx0aWYgKCBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiBcXCcnICsga2V5ICsgJ1xcJyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLicgKTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgaWYgc2hhZGluZyBpcyBzZXQgaW4gdGhlIGNvbnN0cnVjdG9yXG5cdFx0XHRpZiAoIGtleSA9PT0gJ3NoYWRpbmcnICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0XHR0aGlzLmZsYXRTaGFkaW5nID0gKCBuZXdWYWx1ZSA9PT0gRmxhdFNoYWRpbmcgKSA/IHRydWUgOiBmYWxzZTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY3VycmVudFZhbHVlID0gdGhpc1sga2V5IF07XG5cblx0XHRcdGlmICggY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IFxcJycgKyBrZXkgKyAnXFwnIGlzIG5vdCBhIHByb3BlcnR5IG9mIHRoaXMgbWF0ZXJpYWwuJyApO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUuaXNDb2xvciApIHtcblxuXHRcdFx0XHRjdXJyZW50VmFsdWUuc2V0KCBuZXdWYWx1ZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCAoIGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUuaXNWZWN0b3IzICkgJiYgKCBuZXdWYWx1ZSAmJiBuZXdWYWx1ZS5pc1ZlY3RvcjMgKSApIHtcblxuXHRcdFx0XHRjdXJyZW50VmFsdWUuY29weSggbmV3VmFsdWUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzWyBrZXkgXSA9IG5ld1ZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdG1ldGEgPSB7XG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdNYXRlcmlhbCcsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ01hdGVyaWFsLnRvSlNPTidcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gc3RhbmRhcmQgTWF0ZXJpYWwgc2VyaWFsaXphdGlvblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBkYXRhLm5hbWUgPSB0aGlzLm5hbWU7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgJiYgdGhpcy5jb2xvci5pc0NvbG9yICkgZGF0YS5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7XG5cblx0XHRpZiAoIHRoaXMucm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnJvdWdobmVzcyA9IHRoaXMucm91Z2huZXNzO1xuXHRcdGlmICggdGhpcy5tZXRhbG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEubWV0YWxuZXNzID0gdGhpcy5tZXRhbG5lc3M7XG5cblx0XHRpZiAoIHRoaXMuc2hlZW4gIT09IHVuZGVmaW5lZCApIGRhdGEuc2hlZW4gPSB0aGlzLnNoZWVuO1xuXHRcdGlmICggdGhpcy5zaGVlbkNvbG9yICYmIHRoaXMuc2hlZW5Db2xvci5pc0NvbG9yICkgZGF0YS5zaGVlbkNvbG9yID0gdGhpcy5zaGVlbkNvbG9yLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5zaGVlblJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaGVlblJvdWdobmVzcyA9IHRoaXMuc2hlZW5Sb3VnaG5lc3M7XG5cdFx0aWYgKCB0aGlzLmVtaXNzaXZlICYmIHRoaXMuZW1pc3NpdmUuaXNDb2xvciApIGRhdGEuZW1pc3NpdmUgPSB0aGlzLmVtaXNzaXZlLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAmJiB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSAxICkgZGF0YS5lbWlzc2l2ZUludGVuc2l0eSA9IHRoaXMuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHRpZiAoIHRoaXMuc3BlY3VsYXIgJiYgdGhpcy5zcGVjdWxhci5pc0NvbG9yICkgZGF0YS5zcGVjdWxhciA9IHRoaXMuc3BlY3VsYXIuZ2V0SGV4KCk7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFySW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBkYXRhLnNwZWN1bGFySW50ZW5zaXR5ID0gdGhpcy5zcGVjdWxhckludGVuc2l0eTtcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJDb2xvciAmJiB0aGlzLnNwZWN1bGFyQ29sb3IuaXNDb2xvciApIGRhdGEuc3BlY3VsYXJDb2xvciA9IHRoaXMuc3BlY3VsYXJDb2xvci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoaW5pbmVzcyA9IHRoaXMuc2hpbmluZXNzO1xuXHRcdGlmICggdGhpcy5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIGRhdGEuY2xlYXJjb2F0ID0gdGhpcy5jbGVhcmNvYXQ7XG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3MgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzcztcblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXRNYXAgJiYgdGhpcy5jbGVhcmNvYXRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmNsZWFyY29hdE1hcCA9IHRoaXMuY2xlYXJjb2F0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwICYmIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcCAmJiB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsTWFwID0gdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSB0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLnRvQXJyYXkoKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5tYXAgJiYgdGhpcy5tYXAuaXNUZXh0dXJlICkgZGF0YS5tYXAgPSB0aGlzLm1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5tYXRjYXAgJiYgdGhpcy5tYXRjYXAuaXNUZXh0dXJlICkgZGF0YS5tYXRjYXAgPSB0aGlzLm1hdGNhcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5hbHBoYU1hcCAmJiB0aGlzLmFscGhhTWFwLmlzVGV4dHVyZSApIGRhdGEuYWxwaGFNYXAgPSB0aGlzLmFscGhhTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMubGlnaHRNYXAgJiYgdGhpcy5saWdodE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEubGlnaHRNYXAgPSB0aGlzLmxpZ2h0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLmxpZ2h0TWFwSW50ZW5zaXR5ID0gdGhpcy5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hb01hcCAmJiB0aGlzLmFvTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5hb01hcCA9IHRoaXMuYW9NYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuYW9NYXBJbnRlbnNpdHkgPSB0aGlzLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJ1bXBNYXAgJiYgdGhpcy5idW1wTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5idW1wTWFwID0gdGhpcy5idW1wTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLmJ1bXBTY2FsZSA9IHRoaXMuYnVtcFNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbE1hcCAmJiB0aGlzLm5vcm1hbE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEubm9ybWFsTWFwID0gdGhpcy5ub3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEubm9ybWFsTWFwVHlwZSA9IHRoaXMubm9ybWFsTWFwVHlwZTtcblx0XHRcdGRhdGEubm9ybWFsU2NhbGUgPSB0aGlzLm5vcm1hbFNjYWxlLnRvQXJyYXkoKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5kaXNwbGFjZW1lbnRNYXAgJiYgdGhpcy5kaXNwbGFjZW1lbnRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudE1hcCA9IHRoaXMuZGlzcGxhY2VtZW50TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudFNjYWxlID0gdGhpcy5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50QmlhcyA9IHRoaXMuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5yb3VnaG5lc3NNYXAgJiYgdGhpcy5yb3VnaG5lc3NNYXAuaXNUZXh0dXJlICkgZGF0YS5yb3VnaG5lc3NNYXAgPSB0aGlzLnJvdWdobmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5tZXRhbG5lc3NNYXAgJiYgdGhpcy5tZXRhbG5lc3NNYXAuaXNUZXh0dXJlICkgZGF0YS5tZXRhbG5lc3NNYXAgPSB0aGlzLm1ldGFsbmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0aWYgKCB0aGlzLmVtaXNzaXZlTWFwICYmIHRoaXMuZW1pc3NpdmVNYXAuaXNUZXh0dXJlICkgZGF0YS5lbWlzc2l2ZU1hcCA9IHRoaXMuZW1pc3NpdmVNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJNYXAgJiYgdGhpcy5zcGVjdWxhck1hcC5pc1RleHR1cmUgKSBkYXRhLnNwZWN1bGFyTWFwID0gdGhpcy5zcGVjdWxhck1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5zcGVjdWxhckludGVuc2l0eU1hcCAmJiB0aGlzLnNwZWN1bGFySW50ZW5zaXR5TWFwLmlzVGV4dHVyZSApIGRhdGEuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSB0aGlzLnNwZWN1bGFySW50ZW5zaXR5TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyQ29sb3JNYXAgJiYgdGhpcy5zcGVjdWxhckNvbG9yTWFwLmlzVGV4dHVyZSApIGRhdGEuc3BlY3VsYXJDb2xvck1hcCA9IHRoaXMuc3BlY3VsYXJDb2xvck1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0aWYgKCB0aGlzLmVudk1hcCAmJiB0aGlzLmVudk1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZW52TWFwID0gdGhpcy5lbnZNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdFx0aWYgKCB0aGlzLmNvbWJpbmUgIT09IHVuZGVmaW5lZCApIGRhdGEuY29tYmluZSA9IHRoaXMuY29tYmluZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5lbnZNYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIGRhdGEuZW52TWFwSW50ZW5zaXR5ID0gdGhpcy5lbnZNYXBJbnRlbnNpdHk7XG5cdFx0aWYgKCB0aGlzLnJlZmxlY3Rpdml0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5yZWZsZWN0aXZpdHkgPSB0aGlzLnJlZmxlY3Rpdml0eTtcblx0XHRpZiAoIHRoaXMucmVmcmFjdGlvblJhdGlvICE9PSB1bmRlZmluZWQgKSBkYXRhLnJlZnJhY3Rpb25SYXRpbyA9IHRoaXMucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0aWYgKCB0aGlzLmdyYWRpZW50TWFwICYmIHRoaXMuZ3JhZGllbnRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmdyYWRpZW50TWFwID0gdGhpcy5ncmFkaWVudE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnRyYW5zbWlzc2lvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS50cmFuc21pc3Npb24gPSB0aGlzLnRyYW5zbWlzc2lvbjtcblx0XHRpZiAoIHRoaXMudHJhbnNtaXNzaW9uTWFwICYmIHRoaXMudHJhbnNtaXNzaW9uTWFwLmlzVGV4dHVyZSApIGRhdGEudHJhbnNtaXNzaW9uTWFwID0gdGhpcy50cmFuc21pc3Npb25NYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMudGhpY2tuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnRoaWNrbmVzcyA9IHRoaXMudGhpY2tuZXNzO1xuXHRcdGlmICggdGhpcy50aGlja25lc3NNYXAgJiYgdGhpcy50aGlja25lc3NNYXAuaXNUZXh0dXJlICkgZGF0YS50aGlja25lc3NNYXAgPSB0aGlzLnRoaWNrbmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSBkYXRhLmF0dGVudWF0aW9uRGlzdGFuY2UgPSB0aGlzLmF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdFx0aWYgKCB0aGlzLmF0dGVudWF0aW9uQ29sb3IgIT09IHVuZGVmaW5lZCApIGRhdGEuYXR0ZW51YXRpb25Db2xvciA9IHRoaXMuYXR0ZW51YXRpb25Db2xvci5nZXRIZXgoKTtcblxuXHRcdGlmICggdGhpcy5zaXplICE9PSB1bmRlZmluZWQgKSBkYXRhLnNpemUgPSB0aGlzLnNpemU7XG5cdFx0aWYgKCB0aGlzLnNoYWRvd1NpZGUgIT09IG51bGwgKSBkYXRhLnNoYWRvd1NpZGUgPSB0aGlzLnNoYWRvd1NpZGU7XG5cdFx0aWYgKCB0aGlzLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplQXR0ZW51YXRpb24gPSB0aGlzLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdGlmICggdGhpcy5ibGVuZGluZyAhPT0gTm9ybWFsQmxlbmRpbmcgKSBkYXRhLmJsZW5kaW5nID0gdGhpcy5ibGVuZGluZztcblx0XHRpZiAoIHRoaXMuc2lkZSAhPT0gRnJvbnRTaWRlICkgZGF0YS5zaWRlID0gdGhpcy5zaWRlO1xuXHRcdGlmICggdGhpcy52ZXJ0ZXhDb2xvcnMgKSBkYXRhLnZlcnRleENvbG9ycyA9IHRydWU7XG5cblx0XHRpZiAoIHRoaXMub3BhY2l0eSA8IDEgKSBkYXRhLm9wYWNpdHkgPSB0aGlzLm9wYWNpdHk7XG5cdFx0aWYgKCB0aGlzLnRyYW5zcGFyZW50ID09PSB0cnVlICkgZGF0YS50cmFuc3BhcmVudCA9IHRoaXMudHJhbnNwYXJlbnQ7XG5cblx0XHRkYXRhLmRlcHRoRnVuYyA9IHRoaXMuZGVwdGhGdW5jO1xuXHRcdGRhdGEuZGVwdGhUZXN0ID0gdGhpcy5kZXB0aFRlc3Q7XG5cdFx0ZGF0YS5kZXB0aFdyaXRlID0gdGhpcy5kZXB0aFdyaXRlO1xuXHRcdGRhdGEuY29sb3JXcml0ZSA9IHRoaXMuY29sb3JXcml0ZTtcblxuXHRcdGRhdGEuc3RlbmNpbFdyaXRlID0gdGhpcy5zdGVuY2lsV3JpdGU7XG5cdFx0ZGF0YS5zdGVuY2lsV3JpdGVNYXNrID0gdGhpcy5zdGVuY2lsV3JpdGVNYXNrO1xuXHRcdGRhdGEuc3RlbmNpbEZ1bmMgPSB0aGlzLnN0ZW5jaWxGdW5jO1xuXHRcdGRhdGEuc3RlbmNpbFJlZiA9IHRoaXMuc3RlbmNpbFJlZjtcblx0XHRkYXRhLnN0ZW5jaWxGdW5jTWFzayA9IHRoaXMuc3RlbmNpbEZ1bmNNYXNrO1xuXHRcdGRhdGEuc3RlbmNpbEZhaWwgPSB0aGlzLnN0ZW5jaWxGYWlsO1xuXHRcdGRhdGEuc3RlbmNpbFpGYWlsID0gdGhpcy5zdGVuY2lsWkZhaWw7XG5cdFx0ZGF0YS5zdGVuY2lsWlBhc3MgPSB0aGlzLnN0ZW5jaWxaUGFzcztcblxuXHRcdC8vIHJvdGF0aW9uIChTcHJpdGVNYXRlcmlhbClcblx0XHRpZiAoIHRoaXMucm90YXRpb24gIT09IHVuZGVmaW5lZCAmJiB0aGlzLnJvdGF0aW9uICE9PSAwICkgZGF0YS5yb3RhdGlvbiA9IHRoaXMucm90YXRpb247XG5cblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldCA9PT0gdHJ1ZSApIGRhdGEucG9seWdvbk9mZnNldCA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRGYWN0b3IgPSB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gMCApIGRhdGEucG9seWdvbk9mZnNldFVuaXRzID0gdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIHRoaXMubGluZXdpZHRoICE9PSB1bmRlZmluZWQgJiYgdGhpcy5saW5ld2lkdGggIT09IDEgKSBkYXRhLmxpbmV3aWR0aCA9IHRoaXMubGluZXdpZHRoO1xuXHRcdGlmICggdGhpcy5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5kYXNoU2l6ZSA9IHRoaXMuZGFzaFNpemU7XG5cdFx0aWYgKCB0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTtcblx0XHRpZiAoIHRoaXMuc2NhbGUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG5cdFx0aWYgKCB0aGlzLmRpdGhlcmluZyA9PT0gdHJ1ZSApIGRhdGEuZGl0aGVyaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5hbHBoYVRlc3QgPiAwICkgZGF0YS5hbHBoYVRlc3QgPSB0aGlzLmFscGhhVGVzdDtcblx0XHRpZiAoIHRoaXMuYWxwaGFUb0NvdmVyYWdlID09PSB0cnVlICkgZGF0YS5hbHBoYVRvQ292ZXJhZ2UgPSB0aGlzLmFscGhhVG9Db3ZlcmFnZTtcblx0XHRpZiAoIHRoaXMucHJlbXVsdGlwbGllZEFscGhhID09PSB0cnVlICkgZGF0YS5wcmVtdWx0aXBsaWVkQWxwaGEgPSB0aGlzLnByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdGlmICggdGhpcy53aXJlZnJhbWUgPT09IHRydWUgKSBkYXRhLndpcmVmcmFtZSA9IHRoaXMud2lyZWZyYW1lO1xuXHRcdGlmICggdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPiAxICkgZGF0YS53aXJlZnJhbWVMaW5ld2lkdGggPSB0aGlzLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWNhcCAhPT0gJ3JvdW5kJyApIGRhdGEud2lyZWZyYW1lTGluZWNhcCA9IHRoaXMud2lyZWZyYW1lTGluZWNhcDtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWpvaW4gIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVqb2luID0gdGhpcy53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdGlmICggdGhpcy5mbGF0U2hhZGluZyA9PT0gdHJ1ZSApIGRhdGEuZmxhdFNoYWRpbmcgPSB0aGlzLmZsYXRTaGFkaW5nO1xuXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgZGF0YS52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRpZiAoIHRoaXMudG9uZU1hcHBlZCA9PT0gZmFsc2UgKSBkYXRhLnRvbmVNYXBwZWQgPSBmYWxzZTtcblxuXHRcdGlmICggSlNPTi5zdHJpbmdpZnkoIHRoaXMudXNlckRhdGEgKSAhPT0gJ3t9JyApIGRhdGEudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0Ly8gVE9ETzogQ29waWVkIGZyb20gT2JqZWN0M0QudG9KU09OXG5cblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWVzID0gW107XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0gY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5tZXRhZGF0YTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0Y29uc3QgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgZGF0YS50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIGRhdGEuaW1hZ2VzID0gaW1hZ2VzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHRoaXMuYmxlbmRpbmcgPSBzb3VyY2UuYmxlbmRpbmc7XG5cdFx0dGhpcy5zaWRlID0gc291cmNlLnNpZGU7XG5cdFx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBzb3VyY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0dGhpcy5vcGFjaXR5ID0gc291cmNlLm9wYWNpdHk7XG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHNvdXJjZS50cmFuc3BhcmVudDtcblxuXHRcdHRoaXMuYmxlbmRTcmMgPSBzb3VyY2UuYmxlbmRTcmM7XG5cdFx0dGhpcy5ibGVuZERzdCA9IHNvdXJjZS5ibGVuZERzdDtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb24gPSBzb3VyY2UuYmxlbmRFcXVhdGlvbjtcblx0XHR0aGlzLmJsZW5kU3JjQWxwaGEgPSBzb3VyY2UuYmxlbmRTcmNBbHBoYTtcblx0XHR0aGlzLmJsZW5kRHN0QWxwaGEgPSBzb3VyY2UuYmxlbmREc3RBbHBoYTtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uQWxwaGE7XG5cblx0XHR0aGlzLmRlcHRoRnVuYyA9IHNvdXJjZS5kZXB0aEZ1bmM7XG5cdFx0dGhpcy5kZXB0aFRlc3QgPSBzb3VyY2UuZGVwdGhUZXN0O1xuXHRcdHRoaXMuZGVwdGhXcml0ZSA9IHNvdXJjZS5kZXB0aFdyaXRlO1xuXG5cdFx0dGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gc291cmNlLnN0ZW5jaWxXcml0ZU1hc2s7XG5cdFx0dGhpcy5zdGVuY2lsRnVuYyA9IHNvdXJjZS5zdGVuY2lsRnVuYztcblx0XHR0aGlzLnN0ZW5jaWxSZWYgPSBzb3VyY2Uuc3RlbmNpbFJlZjtcblx0XHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IHNvdXJjZS5zdGVuY2lsRnVuY01hc2s7XG5cdFx0dGhpcy5zdGVuY2lsRmFpbCA9IHNvdXJjZS5zdGVuY2lsRmFpbDtcblx0XHR0aGlzLnN0ZW5jaWxaRmFpbCA9IHNvdXJjZS5zdGVuY2lsWkZhaWw7XG5cdFx0dGhpcy5zdGVuY2lsWlBhc3MgPSBzb3VyY2Uuc3RlbmNpbFpQYXNzO1xuXHRcdHRoaXMuc3RlbmNpbFdyaXRlID0gc291cmNlLnN0ZW5jaWxXcml0ZTtcblxuXHRcdGNvbnN0IHNyY1BsYW5lcyA9IHNvdXJjZS5jbGlwcGluZ1BsYW5lcztcblx0XHRsZXQgZHN0UGxhbmVzID0gbnVsbDtcblxuXHRcdGlmICggc3JjUGxhbmVzICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBuID0gc3JjUGxhbmVzLmxlbmd0aDtcblx0XHRcdGRzdFBsYW5lcyA9IG5ldyBBcnJheSggbiApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0ZHN0UGxhbmVzWyBpIF0gPSBzcmNQbGFuZXNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gZHN0UGxhbmVzO1xuXHRcdHRoaXMuY2xpcEludGVyc2VjdGlvbiA9IHNvdXJjZS5jbGlwSW50ZXJzZWN0aW9uO1xuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBzb3VyY2UuY2xpcFNoYWRvd3M7XG5cblx0XHR0aGlzLnNoYWRvd1NpZGUgPSBzb3VyY2Uuc2hhZG93U2lkZTtcblxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHNvdXJjZS5jb2xvcldyaXRlO1xuXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBzb3VyY2UucHJlY2lzaW9uO1xuXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gc291cmNlLnBvbHlnb25PZmZzZXQ7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gc291cmNlLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBzb3VyY2UucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0dGhpcy5kaXRoZXJpbmcgPSBzb3VyY2UuZGl0aGVyaW5nO1xuXG5cdFx0dGhpcy5hbHBoYVRlc3QgPSBzb3VyY2UuYWxwaGFUZXN0O1xuXHRcdHRoaXMuYWxwaGFUb0NvdmVyYWdlID0gc291cmNlLmFscGhhVG9Db3ZlcmFnZTtcblx0XHR0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IHNvdXJjZS5wcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHR0aGlzLnZpc2libGUgPSBzb3VyY2UudmlzaWJsZTtcblxuXHRcdHRoaXMudG9uZU1hcHBlZCA9IHNvdXJjZS50b25lTWFwcGVkO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBzb3VyY2UudXNlckRhdGEgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG59XG5cbk1hdGVyaWFsLnByb3RvdHlwZS5pc01hdGVyaWFsID0gdHJ1ZTtcblxuTWF0ZXJpYWwuZnJvbVR5cGUgPSBmdW5jdGlvbiAoIC8qdHlwZSovICkge1xuXG5cdC8vIFRPRE86IEJlaGF2aW9yIGFkZGVkIGluIE1hdGVyaWFscy5qc1xuXG5cdHJldHVybiBudWxsO1xuXG59O1xuXG5jbGFzcyBNZXNoQmFzaWNNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaEJhc2ljTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZW1pc3NpdmVcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZW52TWFwID0gbnVsbDtcblx0XHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHRcdHRoaXMuY29tYmluZSA9IHNvdXJjZS5jb21iaW5lO1xuXHRcdHRoaXMucmVmbGVjdGl2aXR5ID0gc291cmNlLnJlZmxlY3Rpdml0eTtcblx0XHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaEJhc2ljTWF0ZXJpYWwgPSB0cnVlO1xuXG5jb25zdCBfdmVjdG9yJDkgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmVjdG9yMiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG5jbGFzcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0dGhpcy5hcnJheSA9IGFycmF5O1xuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIGl0ZW1TaXplIDogMDtcblx0XHR0aGlzLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkID09PSB0cnVlO1xuXG5cdFx0dGhpcy51c2FnZSA9IFN0YXRpY0RyYXdVc2FnZTtcblx0XHR0aGlzLnVwZGF0ZVJhbmdlID0geyBvZmZzZXQ6IDAsIGNvdW50OiAtIDEgfTtcblxuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0fVxuXG5cdG9uVXBsb2FkQ2FsbGJhY2soKSB7fVxuXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxuXHRzZXRVc2FnZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnVzYWdlID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBzb3VyY2UuaXRlbVNpemU7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLm5vcm1hbGl6ZWQgPSBzb3VyY2Uubm9ybWFsaXplZDtcblxuXHRcdHRoaXMudXNhZ2UgPSBzb3VyY2UudXNhZ2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weUF0KCBpbmRleDEsIGF0dHJpYnV0ZSwgaW5kZXgyICkge1xuXG5cdFx0aW5kZXgxICo9IHRoaXMuaXRlbVNpemU7XG5cdFx0aW5kZXgyICo9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuaXRlbVNpemU7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5QXJyYXkoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIGFycmF5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weUNvbG9yc0FycmF5KCBjb2xvcnMgKSB7XG5cblx0XHRjb25zdCBhcnJheSA9IHRoaXMuYXJyYXk7XG5cdFx0bGV0IG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjb2xvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0bGV0IGNvbG9yID0gY29sb3JzWyBpIF07XG5cblx0XHRcdGlmICggY29sb3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weUNvbG9yc0FycmF5KCk6IGNvbG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0Y29sb3IgPSBuZXcgQ29sb3IoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSBjb2xvci5yO1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gY29sb3IuZztcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IGNvbG9yLmI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weVZlY3RvcjJzQXJyYXkoIHZlY3RvcnMgKSB7XG5cblx0XHRjb25zdCBhcnJheSA9IHRoaXMuYXJyYXk7XG5cdFx0bGV0IG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGxldCB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07XG5cblx0XHRcdGlmICggdmVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Iyc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdHZlY3RvciA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5VmVjdG9yM3NBcnJheSggdmVjdG9ycyApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gdGhpcy5hcnJheTtcblx0XHRsZXQgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHZlY3RvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0bGV0IHZlY3RvciA9IHZlY3RvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0dmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueDtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci55O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weVZlY3RvcjRzQXJyYXkoIHZlY3RvcnMgKSB7XG5cblx0XHRjb25zdCBhcnJheSA9IHRoaXMuYXJyYXk7XG5cdFx0bGV0IG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGxldCB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07XG5cblx0XHRcdGlmICggdmVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3I0c0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdHZlY3RvciA9IG5ldyBWZWN0b3I0KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci56O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnc7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlNYXRyaXgzKCBtICkge1xuXG5cdFx0aWYgKCB0aGlzLml0ZW1TaXplID09PSAyICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRfdmVjdG9yMiQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblx0XHRcdFx0X3ZlY3RvcjIkMS5hcHBseU1hdHJpeDMoIG0gKTtcblxuXHRcdFx0XHR0aGlzLnNldFhZKCBpLCBfdmVjdG9yMiQxLngsIF92ZWN0b3IyJDEueSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLml0ZW1TaXplID09PSAzICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRfdmVjdG9yJDkuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApO1xuXHRcdFx0XHRfdmVjdG9yJDkuYXBwbHlNYXRyaXgzKCBtICk7XG5cblx0XHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkOS54LCBfdmVjdG9yJDkueSwgX3ZlY3RvciQ5LnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yJDkuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApO1xuXG5cdFx0XHRfdmVjdG9yJDkuYXBwbHlNYXRyaXg0KCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQ5LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ5LmFwcGx5Tm9ybWFsTWF0cml4KCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNmb3JtRGlyZWN0aW9uKCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkOS5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cblx0XHRcdF92ZWN0b3IkOS50cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkOS54LCBfdmVjdG9yJDkueSwgX3ZlY3RvciQ5LnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXQoIHZhbHVlLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIHZhbHVlLCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRYKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgXTtcblxuXHR9XG5cblx0c2V0WCggaW5kZXgsIHggKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgXSA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0WSggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMSBdO1xuXG5cdH1cblxuXHRzZXRZKCBpbmRleCwgeSApIHtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0WiggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMiBdO1xuXG5cdH1cblxuXHRzZXRaKCBpbmRleCwgeiApIHtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0VyggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdO1xuXG5cdH1cblxuXHRzZXRXKCBpbmRleCwgdyApIHtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXSA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WFkoIGluZGV4LCB4LCB5ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WFlaKCBpbmRleCwgeCwgeSwgeiApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYWVpXKCBpbmRleCwgeCwgeSwgeiwgdyApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDMgXSA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0b25VcGxvYWQoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuYXJyYXksIHRoaXMuaXRlbVNpemUgKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB7XG5cdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcblx0XHRcdHR5cGU6IHRoaXMuYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdGFycmF5OiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggdGhpcy5hcnJheSApLFxuXHRcdFx0bm9ybWFsaXplZDogdGhpcy5ub3JtYWxpemVkXG5cdFx0fTtcblxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblx0XHRpZiAoIHRoaXMudXNhZ2UgIT09IFN0YXRpY0RyYXdVc2FnZSApIGRhdGEudXNhZ2UgPSB0aGlzLnVzYWdlO1xuXHRcdGlmICggdGhpcy51cGRhdGVSYW5nZS5vZmZzZXQgIT09IDAgfHwgdGhpcy51cGRhdGVSYW5nZS5jb3VudCAhPT0gLSAxICkgZGF0YS51cGRhdGVSYW5nZSA9IHRoaXMudXBkYXRlUmFuZ2U7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5pc0J1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cbi8vXG5cbmNsYXNzIEludDhCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IEludDhBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVWludDhCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IFVpbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgVWludDhDbGFtcGVkQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIEludDE2QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBJbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IFVpbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgSW50MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVWludDMyQnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBVaW50MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgVWludDE2QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbkZsb2F0MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmlzRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cbmNsYXNzIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IEZsb2F0MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgRmxvYXQ2NEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG5sZXQgX2lkJDEgPSAwO1xuXG5jb25zdCBfbTEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfb2JqID0gLypAX19QVVJFX18qLyBuZXcgT2JqZWN0M0QoKTtcbmNvbnN0IF9vZmZzZXQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfYm94JDEgPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5jb25zdCBfYm94TW9ycGhUYXJnZXRzID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xuY29uc3QgX3ZlY3RvciQ4ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBCdWZmZXJHZW9tZXRyeSBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfaWQkMSArKyB9ICk7XG5cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXHRcdHRoaXMudHlwZSA9ICdCdWZmZXJHZW9tZXRyeSc7XG5cblx0XHR0aGlzLmluZGV4ID0gbnVsbDtcblx0XHR0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcblxuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdFx0dGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogSW5maW5pdHkgfTtcblxuXHRcdHRoaXMudXNlckRhdGEgPSB7fTtcblxuXHR9XG5cblx0Z2V0SW5kZXgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbmRleDtcblxuXHR9XG5cblx0c2V0SW5kZXgoIGluZGV4ICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbmRleCApICkge1xuXG5cdFx0XHR0aGlzLmluZGV4ID0gbmV3ICggYXJyYXlOZWVkc1VpbnQzMiggaW5kZXggKSA/IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSA6IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSApKCBpbmRleCwgMSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5pbmRleCA9IGluZGV4O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldEF0dHJpYnV0ZSggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHR9XG5cblx0c2V0QXR0cmlidXRlKCBuYW1lLCBhdHRyaWJ1dGUgKSB7XG5cblx0XHR0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSA9IGF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkZWxldGVBdHRyaWJ1dGUoIG5hbWUgKSB7XG5cblx0XHRkZWxldGUgdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aGFzQXR0cmlidXRlKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlc1sgbmFtZSBdICE9PSB1bmRlZmluZWQ7XG5cblx0fVxuXG5cdGFkZEdyb3VwKCBzdGFydCwgY291bnQsIG1hdGVyaWFsSW5kZXggPSAwICkge1xuXG5cdFx0dGhpcy5ncm91cHMucHVzaCgge1xuXG5cdFx0XHRzdGFydDogc3RhcnQsXG5cdFx0XHRjb3VudDogY291bnQsXG5cdFx0XHRtYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4XG5cblx0XHR9ICk7XG5cblx0fVxuXG5cdGNsZWFyR3JvdXBzKCkge1xuXG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblxuXHR9XG5cblx0c2V0RHJhd1JhbmdlKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHR0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHN0YXJ0O1xuXHRcdHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gY291bnQ7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBvc2l0aW9uLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRcdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG5vcm1hbCA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRpZiAoIG5vcm1hbCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7XG5cblx0XHRcdG5vcm1hbC5hcHBseU5vcm1hbE1hdHJpeCggbm9ybWFsTWF0cml4ICk7XG5cblx0XHRcdG5vcm1hbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0YW5nZW50ID0gdGhpcy5hdHRyaWJ1dGVzLnRhbmdlbnQ7XG5cblx0XHRpZiAoIHRhbmdlbnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGFuZ2VudC50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeCApO1xuXG5cdFx0XHR0YW5nZW50Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHRfbTEubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGVYKCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeC1heGlzXG5cblx0XHRfbTEubWFrZVJvdGF0aW9uWCggYW5nbGUgKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGVZKCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeS1heGlzXG5cblx0XHRfbTEubWFrZVJvdGF0aW9uWSggYW5nbGUgKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGVaKCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgei1heGlzXG5cblx0XHRfbTEubWFrZVJvdGF0aW9uWiggYW5nbGUgKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2xhdGUoIHgsIHksIHogKSB7XG5cblx0XHQvLyB0cmFuc2xhdGUgZ2VvbWV0cnlcblxuXHRcdF9tMS5tYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzY2FsZSggeCwgeSwgeiApIHtcblxuXHRcdC8vIHNjYWxlIGdlb21ldHJ5XG5cblx0XHRfbTEubWFrZVNjYWxlKCB4LCB5LCB6ICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bG9va0F0KCB2ZWN0b3IgKSB7XG5cblx0XHRfb2JqLmxvb2tBdCggdmVjdG9yICk7XG5cblx0XHRfb2JqLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9vYmoubWF0cml4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2VudGVyKCkge1xuXG5cdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdHRoaXMuYm91bmRpbmdCb3guZ2V0Q2VudGVyKCBfb2Zmc2V0ICkubmVnYXRlKCk7XG5cblx0XHR0aGlzLnRyYW5zbGF0ZSggX29mZnNldC54LCBfb2Zmc2V0LnksIF9vZmZzZXQueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Qb2ludHMoIHBvaW50cyApIHtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcG9pbnQgPSBwb2ludHNbIGkgXTtcblx0XHRcdHBvc2l0aW9uLnB1c2goIHBvaW50LngsIHBvaW50LnksIHBvaW50LnogfHwgMCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgMyApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29tcHV0ZUJvdW5kaW5nQm94KCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbmV3IEJveDMoKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRpZiAoIHBvc2l0aW9uICYmIHBvc2l0aW9uLmlzR0xCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTogR0xCdWZmZXJBdHRyaWJ1dGUgcmVxdWlyZXMgYSBtYW51YWwgYm91bmRpbmcgYm94LiBBbHRlcm5hdGl2ZWx5IHNldCBcIm1lc2guZnJ1c3R1bUN1bGxlZFwiIHRvIFwiZmFsc2VcIi4nLCB0aGlzICk7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3guc2V0KFxuXHRcdFx0XHRuZXcgVmVjdG9yMyggLSBJbmZpbml0eSwgLSBJbmZpbml0eSwgLSBJbmZpbml0eSApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTtcblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07XG5cdFx0XHRcdFx0X2JveCQxLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IkOC5hZGRWZWN0b3JzKCB0aGlzLmJvdW5kaW5nQm94Lm1pbiwgX2JveCQxLm1pbiApO1xuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yJDggKTtcblxuXHRcdFx0XHRcdFx0X3ZlY3RvciQ4LmFkZFZlY3RvcnMoIHRoaXMuYm91bmRpbmdCb3gubWF4LCBfYm94JDEubWF4ICk7XG5cdFx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkOCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfYm94JDEubWluICk7XG5cdFx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoIF9ib3gkMS5tYXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3gubWFrZUVtcHR5KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi54ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnkgKSB8fCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueiApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk6IENvbXB1dGVkIG1pbi9tYXggaGF2ZSBOYU4gdmFsdWVzLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gPSB0aGlzLm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdGlmICggcG9zaXRpb24gJiYgcG9zaXRpb24uaXNHTEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBHTEJ1ZmZlckF0dHJpYnV0ZSByZXF1aXJlcyBhIG1hbnVhbCBib3VuZGluZyBzcGhlcmUuIEFsdGVybmF0aXZlbHkgc2V0IFwibWVzaC5mcnVzdHVtQ3VsbGVkXCIgdG8gXCJmYWxzZVwiLicsIHRoaXMgKTtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5zZXQoIG5ldyBWZWN0b3IzKCksIEluZmluaXR5ICk7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggcG9zaXRpb24gKSB7XG5cblx0XHRcdC8vIGZpcnN0LCBmaW5kIHRoZSBjZW50ZXIgb2YgdGhlIGJvdW5kaW5nIHNwaGVyZVxuXG5cdFx0XHRjb25zdCBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjtcblxuXHRcdFx0X2JveCQxLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggYXR0cmlidXRlcyBpZiBwcmVzZW50XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xuXHRcdFx0XHRcdF9ib3hNb3JwaFRhcmdldHMuc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcblxuXHRcdFx0XHRcdFx0X3ZlY3RvciQ4LmFkZFZlY3RvcnMoIF9ib3gkMS5taW4sIF9ib3hNb3JwaFRhcmdldHMubWluICk7XG5cdFx0XHRcdFx0XHRfYm94JDEuZXhwYW5kQnlQb2ludCggX3ZlY3RvciQ4ICk7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IkOC5hZGRWZWN0b3JzKCBfYm94JDEubWF4LCBfYm94TW9ycGhUYXJnZXRzLm1heCApO1xuXHRcdFx0XHRcdFx0X2JveCQxLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkOCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0X2JveCQxLmV4cGFuZEJ5UG9pbnQoIF9ib3hNb3JwaFRhcmdldHMubWluICk7XG5cdFx0XHRcdFx0XHRfYm94JDEuZXhwYW5kQnlQb2ludCggX2JveE1vcnBoVGFyZ2V0cy5tYXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0X2JveCQxLmdldENlbnRlciggY2VudGVyICk7XG5cblx0XHRcdC8vIHNlY29uZCwgdHJ5IHRvIGZpbmQgYSBib3VuZGluZ1NwaGVyZSB3aXRoIGEgcmFkaXVzIHNtYWxsZXIgdGhhbiB0aGVcblx0XHRcdC8vIGJvdW5kaW5nU3BoZXJlIG9mIHRoZSBib3VuZGluZ0JveDogc3FydCgzKSBzbWFsbGVyIGluIHRoZSBiZXN0IGNhc2VcblxuXHRcdFx0bGV0IG1heFJhZGl1c1NxID0gMDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHBvc2l0aW9uLmNvdW50OyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0X3ZlY3RvciQ4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpICk7XG5cblx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggX3ZlY3RvciQ4ICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudFxuXG5cdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb25bIGkgXTtcblx0XHRcdFx0XHRjb25zdCBtb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIGpsID0gbW9ycGhBdHRyaWJ1dGUuY291bnQ7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0X3ZlY3RvciQ4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlLCBqICk7XG5cblx0XHRcdFx0XHRcdGlmICggbW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XG5cblx0XHRcdFx0XHRcdFx0X29mZnNldC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaiApO1xuXHRcdFx0XHRcdFx0XHRfdmVjdG9yJDguYWRkKCBfb2Zmc2V0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggX3ZlY3RvciQ4ICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRcdGlmICggaXNOYU4oIHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzICkgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBDb21wdXRlZCByYWRpdXMgaXMgTmFOLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjb21wdXRlVGFuZ2VudHMoKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cudGVyYXRob24uY29tL2NvZGUvdGFuZ2VudC5odG1sXG5cdFx0Ly8gKHBlciB2ZXJ0ZXggdGFuZ2VudHMpXG5cblx0XHRpZiAoIGluZGV4ID09PSBudWxsIHx8XG5cdFx0XHQgYXR0cmlidXRlcy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHQgYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0IGF0dHJpYnV0ZXMudXYgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgZmFpbGVkLiBNaXNzaW5nIHJlcXVpcmVkIGF0dHJpYnV0ZXMgKGluZGV4LCBwb3NpdGlvbiwgbm9ybWFsIG9yIHV2KScgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGluZGljZXMgPSBpbmRleC5hcnJheTtcblx0XHRjb25zdCBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBhdHRyaWJ1dGVzLm5vcm1hbC5hcnJheTtcblx0XHRjb25zdCB1dnMgPSBhdHRyaWJ1dGVzLnV2LmFycmF5O1xuXG5cdFx0Y29uc3QgblZlcnRpY2VzID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7XG5cblx0XHRpZiAoIHRoaXMuaGFzQXR0cmlidXRlKCAndGFuZ2VudCcgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndGFuZ2VudCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIDQgKiBuVmVydGljZXMgKSwgNCApICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0YW5nZW50cyA9IHRoaXMuZ2V0QXR0cmlidXRlKCAndGFuZ2VudCcgKS5hcnJheTtcblxuXHRcdGNvbnN0IHRhbjEgPSBbXSwgdGFuMiA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgblZlcnRpY2VzOyBpICsrICkge1xuXG5cdFx0XHR0YW4xWyBpIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dGFuMlsgaSBdID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHZBID0gbmV3IFZlY3RvcjMoKSxcblx0XHRcdHZCID0gbmV3IFZlY3RvcjMoKSxcblx0XHRcdHZDID0gbmV3IFZlY3RvcjMoKSxcblxuXHRcdFx0dXZBID0gbmV3IFZlY3RvcjIoKSxcblx0XHRcdHV2QiA9IG5ldyBWZWN0b3IyKCksXG5cdFx0XHR1dkMgPSBuZXcgVmVjdG9yMigpLFxuXG5cdFx0XHRzZGlyID0gbmV3IFZlY3RvcjMoKSxcblx0XHRcdHRkaXIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlVHJpYW5nbGUoIGEsIGIsIGMgKSB7XG5cblx0XHRcdHZBLmZyb21BcnJheSggcG9zaXRpb25zLCBhICogMyApO1xuXHRcdFx0dkIuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGIgKiAzICk7XG5cdFx0XHR2Qy5mcm9tQXJyYXkoIHBvc2l0aW9ucywgYyAqIDMgKTtcblxuXHRcdFx0dXZBLmZyb21BcnJheSggdXZzLCBhICogMiApO1xuXHRcdFx0dXZCLmZyb21BcnJheSggdXZzLCBiICogMiApO1xuXHRcdFx0dXZDLmZyb21BcnJheSggdXZzLCBjICogMiApO1xuXG5cdFx0XHR2Qi5zdWIoIHZBICk7XG5cdFx0XHR2Qy5zdWIoIHZBICk7XG5cblx0XHRcdHV2Qi5zdWIoIHV2QSApO1xuXHRcdFx0dXZDLnN1YiggdXZBICk7XG5cblx0XHRcdGNvbnN0IHIgPSAxLjAgLyAoIHV2Qi54ICogdXZDLnkgLSB1dkMueCAqIHV2Qi55ICk7XG5cblx0XHRcdC8vIHNpbGVudGx5IGlnbm9yZSBkZWdlbmVyYXRlIHV2IHRyaWFuZ2xlcyBoYXZpbmcgY29pbmNpZGVudCBvciBjb2xpbmVhciB2ZXJ0aWNlc1xuXG5cdFx0XHRpZiAoICEgaXNGaW5pdGUoIHIgKSApIHJldHVybjtcblxuXHRcdFx0c2Rpci5jb3B5KCB2QiApLm11bHRpcGx5U2NhbGFyKCB1dkMueSApLmFkZFNjYWxlZFZlY3RvciggdkMsIC0gdXZCLnkgKS5tdWx0aXBseVNjYWxhciggciApO1xuXHRcdFx0dGRpci5jb3B5KCB2QyApLm11bHRpcGx5U2NhbGFyKCB1dkIueCApLmFkZFNjYWxlZFZlY3RvciggdkIsIC0gdXZDLnggKS5tdWx0aXBseVNjYWxhciggciApO1xuXG5cdFx0XHR0YW4xWyBhIF0uYWRkKCBzZGlyICk7XG5cdFx0XHR0YW4xWyBiIF0uYWRkKCBzZGlyICk7XG5cdFx0XHR0YW4xWyBjIF0uYWRkKCBzZGlyICk7XG5cblx0XHRcdHRhbjJbIGEgXS5hZGQoIHRkaXIgKTtcblx0XHRcdHRhbjJbIGIgXS5hZGQoIHRkaXIgKTtcblx0XHRcdHRhbjJbIGMgXS5hZGQoIHRkaXIgKTtcblxuXHRcdH1cblxuXHRcdGxldCBncm91cHMgPSB0aGlzLmdyb3VwcztcblxuXHRcdGlmICggZ3JvdXBzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Z3JvdXBzID0gWyB7XG5cdFx0XHRcdHN0YXJ0OiAwLFxuXHRcdFx0XHRjb3VudDogaW5kaWNlcy5sZW5ndGhcblx0XHRcdH0gXTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdGNvbnN0IHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRjb25zdCBjb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdGhhbmRsZVRyaWFuZ2xlKFxuXHRcdFx0XHRcdGluZGljZXNbIGogKyAwIF0sXG5cdFx0XHRcdFx0aW5kaWNlc1sgaiArIDEgXSxcblx0XHRcdFx0XHRpbmRpY2VzWyBqICsgMiBdXG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IHRtcCA9IG5ldyBWZWN0b3IzKCksIHRtcDIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG4gPSBuZXcgVmVjdG9yMygpLCBuMiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVWZXJ0ZXgoIHYgKSB7XG5cblx0XHRcdG4uZnJvbUFycmF5KCBub3JtYWxzLCB2ICogMyApO1xuXHRcdFx0bjIuY29weSggbiApO1xuXG5cdFx0XHRjb25zdCB0ID0gdGFuMVsgdiBdO1xuXG5cdFx0XHQvLyBHcmFtLVNjaG1pZHQgb3J0aG9nb25hbGl6ZVxuXG5cdFx0XHR0bXAuY29weSggdCApO1xuXHRcdFx0dG1wLnN1Yiggbi5tdWx0aXBseVNjYWxhciggbi5kb3QoIHQgKSApICkubm9ybWFsaXplKCk7XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBoYW5kZWRuZXNzXG5cblx0XHRcdHRtcDIuY3Jvc3NWZWN0b3JzKCBuMiwgdCApO1xuXHRcdFx0Y29uc3QgdGVzdCA9IHRtcDIuZG90KCB0YW4yWyB2IF0gKTtcblx0XHRcdGNvbnN0IHcgPSAoIHRlc3QgPCAwLjAgKSA/IC0gMS4wIDogMS4wO1xuXG5cdFx0XHR0YW5nZW50c1sgdiAqIDQgXSA9IHRtcC54O1xuXHRcdFx0dGFuZ2VudHNbIHYgKiA0ICsgMSBdID0gdG1wLnk7XG5cdFx0XHR0YW5nZW50c1sgdiAqIDQgKyAyIF0gPSB0bXAuejtcblx0XHRcdHRhbmdlbnRzWyB2ICogNCArIDMgXSA9IHc7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IGdyb3VwLnN0YXJ0O1xuXHRcdFx0Y29uc3QgY291bnQgPSBncm91cC5jb3VudDtcblxuXHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMyApIHtcblxuXHRcdFx0XHRoYW5kbGVWZXJ0ZXgoIGluZGljZXNbIGogKyAwIF0gKTtcblx0XHRcdFx0aGFuZGxlVmVydGV4KCBpbmRpY2VzWyBqICsgMSBdICk7XG5cdFx0XHRcdGhhbmRsZVZlcnRleCggaW5kaWNlc1sgaiArIDIgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCkge1xuXG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmluZGV4O1xuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblxuXHRcdGlmICggcG9zaXRpb25BdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGV0IG5vcm1hbEF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCAnbm9ybWFsJyApO1xuXG5cdFx0XHRpZiAoIG5vcm1hbEF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZSA9IG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9uQXR0cmlidXRlLmNvdW50ICogMyApLCAzICk7XG5cdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbm9ybWFsQXR0cmlidXRlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gcmVzZXQgZXhpc3Rpbmcgbm9ybWFscyB0byB6ZXJvXG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG5vcm1hbEF0dHJpYnV0ZS5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggaSwgMCwgMCwgMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBwQSA9IG5ldyBWZWN0b3IzKCksIHBCID0gbmV3IFZlY3RvcjMoKSwgcEMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgbkEgPSBuZXcgVmVjdG9yMygpLCBuQiA9IG5ldyBWZWN0b3IzKCksIG5DID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBpbmRleGVkIGVsZW1lbnRzXG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGluZGV4LmNvdW50OyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZBID0gaW5kZXguZ2V0WCggaSArIDAgKTtcblx0XHRcdFx0XHRjb25zdCB2QiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0Y29uc3QgdkMgPSBpbmRleC5nZXRYKCBpICsgMiApO1xuXG5cdFx0XHRcdFx0cEEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIHZBICk7XG5cdFx0XHRcdFx0cEIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIHZCICk7XG5cdFx0XHRcdFx0cEMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIHZDICk7XG5cblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcblx0XHRcdFx0XHRhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTtcblx0XHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHRcdG5BLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEF0dHJpYnV0ZSwgdkEgKTtcblx0XHRcdFx0XHRuQi5mcm9tQnVmZmVyQXR0cmlidXRlKCBub3JtYWxBdHRyaWJ1dGUsIHZCICk7XG5cdFx0XHRcdFx0bkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2QyApO1xuXG5cdFx0XHRcdFx0bkEuYWRkKCBjYiApO1xuXHRcdFx0XHRcdG5CLmFkZCggY2IgKTtcblx0XHRcdFx0XHRuQy5hZGQoIGNiICk7XG5cblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCB2QSwgbkEueCwgbkEueSwgbkEueiApO1xuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIHZCLCBuQi54LCBuQi55LCBuQi56ICk7XG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggdkMsIG5DLngsIG5DLnksIG5DLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gbm9uLWluZGV4ZWQgZWxlbWVudHMgKHVuY29ubmVjdGVkIHRyaWFuZ2xlIHNvdXApXG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdHBBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMCApO1xuXHRcdFx0XHRcdHBCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApO1xuXHRcdFx0XHRcdHBDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMiApO1xuXG5cdFx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7XG5cdFx0XHRcdFx0YWIuc3ViVmVjdG9ycyggcEEsIHBCICk7XG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpICsgMCwgY2IueCwgY2IueSwgY2IueiApO1xuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIGkgKyAxLCBjYi54LCBjYi55LCBjYi56ICk7XG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggaSArIDIsIGNiLngsIGNiLnksIGNiLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVOb3JtYWxzKCk7XG5cblx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdG1lcmdlKCBnZW9tZXRyeSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCAhICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogZ2VvbWV0cnkgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5LicsIGdlb21ldHJ5ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRvZmZzZXQgPSAwO1xuXG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdCdUSFJFRS5CdWZmZXJHZW9tZXRyeS5tZXJnZSgpOiBPdmVyd3JpdGluZyBvcmlnaW5hbCBnZW9tZXRyeSwgc3RhcnRpbmcgYXQgb2Zmc2V0PTAuICdcblx0XHRcdFx0KyAnVXNlIEJ1ZmZlckdlb21ldHJ5VXRpbHMubWVyZ2VCdWZmZXJHZW9tZXRyaWVzKCkgZm9yIGxvc3NsZXNzIG1lcmdlLidcblx0XHRcdCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUxID0gYXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVBcnJheTEgPSBhdHRyaWJ1dGUxLmFycmF5O1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUyID0gZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVBcnJheTIgPSBhdHRyaWJ1dGUyLmFycmF5O1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVPZmZzZXQgPSBhdHRyaWJ1dGUyLml0ZW1TaXplICogb2Zmc2V0O1xuXHRcdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5taW4oIGF0dHJpYnV0ZUFycmF5Mi5sZW5ndGgsIGF0dHJpYnV0ZUFycmF5MS5sZW5ndGggLSBhdHRyaWJ1dGVPZmZzZXQgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gYXR0cmlidXRlT2Zmc2V0OyBpIDwgbGVuZ3RoOyBpICsrLCBqICsrICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZUFycmF5MVsgaiBdID0gYXR0cmlidXRlQXJyYXkyWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRub3JtYWxpemVOb3JtYWxzKCkge1xuXG5cdFx0Y29uc3Qgbm9ybWFscyA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbm9ybWFscy5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yJDguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgaSApO1xuXG5cdFx0XHRfdmVjdG9yJDgubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMuc2V0WFlaKCBpLCBfdmVjdG9yJDgueCwgX3ZlY3RvciQ4LnksIF92ZWN0b3IkOC56ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRvTm9uSW5kZXhlZCgpIHtcblxuXHRcdGZ1bmN0aW9uIGNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kaWNlcyApIHtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0XHRjb25zdCBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcblx0XHRcdGNvbnN0IG5vcm1hbGl6ZWQgPSBhdHRyaWJ1dGUubm9ybWFsaXplZDtcblxuXHRcdFx0Y29uc3QgYXJyYXkyID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKCBpbmRpY2VzLmxlbmd0aCAqIGl0ZW1TaXplICk7XG5cblx0XHRcdGxldCBpbmRleCA9IDAsIGluZGV4MiA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdFx0aW5kZXggPSBpbmRpY2VzWyBpIF0gKiBhdHRyaWJ1dGUuZGF0YS5zdHJpZGUgKyBhdHRyaWJ1dGUub2Zmc2V0O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpbmRleCA9IGluZGljZXNbIGkgXSAqIGl0ZW1TaXplO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBpdGVtU2l6ZTsgaiArKyApIHtcblxuXHRcdFx0XHRcdGFycmF5MlsgaW5kZXgyICsrIF0gPSBhcnJheVsgaW5kZXggKysgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5MiwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LnRvTm9uSW5kZXhlZCgpOiBCdWZmZXJHZW9tZXRyeSBpcyBhbHJlYWR5IG5vbi1pbmRleGVkLicgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHRjb25zdCBpbmRpY2VzID0gdGhpcy5pbmRleC5hcnJheTtcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gYXR0cmlidXRlc1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGNvbnN0IG5ld0F0dHJpYnV0ZSA9IGNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kaWNlcyApO1xuXG5cdFx0XHRnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCBuYW1lLCBuZXdBdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoQXJyYXkgPSBbXTtcblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVbIGkgXTtcblxuXHRcdFx0XHRjb25zdCBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTtcblxuXHRcdFx0XHRtb3JwaEFycmF5LnB1c2goIG5ld0F0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5Mi5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IG1vcnBoQXJyYXk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeTIubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHRjb25zdCBncm91cHMgPSB0aGlzLmdyb3VwcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0Z2VvbWV0cnkyLmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyeTI7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdCdWZmZXJHZW9tZXRyeScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ0J1ZmZlckdlb21ldHJ5LnRvSlNPTidcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gc3RhbmRhcmQgQnVmZmVyR2VvbWV0cnkgc2VyaWFsaXphdGlvblxuXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblx0XHRpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBkYXRhLm5hbWUgPSB0aGlzLm5hbWU7XG5cdFx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy51c2VyRGF0YSApLmxlbmd0aCA+IDAgKSBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdGlmICggdGhpcy5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRcdGlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIGRhdGFbIGtleSBdID0gcGFyYW1ldGVyc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cblx0XHR9XG5cblx0XHQvLyBmb3Igc2ltcGxpY2l0eSB0aGUgY29kZSBhc3N1bWVzIGF0dHJpYnV0ZXMgYXJlIG5vdCBzaGFyZWQgYWNyb3NzIGdlb21ldHJpZXMsIHNlZSAjMTU4MTFcblxuXHRcdGRhdGEuZGF0YSA9IHsgYXR0cmlidXRlczoge30gfTtcblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5pbmRleCA9IHtcblx0XHRcdFx0dHlwZTogaW5kZXguYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdFx0YXJyYXk6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBpbmRleC5hcnJheSApXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0ZGF0YS5kYXRhLmF0dHJpYnV0ZXNbIGtleSBdID0gYXR0cmlidXRlLnRvSlNPTiggZGF0YS5kYXRhICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSB7fTtcblx0XHRsZXQgaGFzTW9ycGhBdHRyaWJ1dGVzID0gZmFsc2U7XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gdGhpcy5tb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZUFycmF5ID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXNbIGtleSBdO1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYXR0cmlidXRlQXJyYXkubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlQXJyYXlbIGkgXTtcblxuXHRcdFx0XHRhcnJheS5wdXNoKCBhdHRyaWJ1dGUudG9KU09OKCBkYXRhLmRhdGEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXJyYXkubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRtb3JwaEF0dHJpYnV0ZXNbIGtleSBdID0gYXJyYXk7XG5cblx0XHRcdFx0aGFzTW9ycGhBdHRyaWJ1dGVzID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBoYXNNb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5tb3JwaEF0dHJpYnV0ZXMgPSBtb3JwaEF0dHJpYnV0ZXM7XG5cdFx0XHRkYXRhLmRhdGEubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG5cblx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRkYXRhLmRhdGEuZ3JvdXBzID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIGdyb3VwcyApICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBib3VuZGluZ1NwaGVyZSA9IHRoaXMuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRkYXRhLmRhdGEuYm91bmRpbmdTcGhlcmUgPSB7XG5cdFx0XHRcdGNlbnRlcjogYm91bmRpbmdTcGhlcmUuY2VudGVyLnRvQXJyYXkoKSxcblx0XHRcdFx0cmFkaXVzOiBib3VuZGluZ1NwaGVyZS5yYWRpdXNcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHQgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHQvLyByZXNldFxuXG5cdFx0dGhpcy5pbmRleCA9IG51bGw7XG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXMgPSB7fTtcblx0XHR0aGlzLmdyb3VwcyA9IFtdO1xuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdFx0Ly8gdXNlZCBmb3Igc3RvcmluZyBjbG9uZWQsIHNoYXJlZCBkYXRhXG5cblx0XHRjb25zdCBkYXRhID0ge307XG5cblx0XHQvLyBuYW1lXG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdC8vIGluZGV4XG5cblx0XHRjb25zdCBpbmRleCA9IHNvdXJjZS5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuc2V0SW5kZXgoIGluZGV4LmNsb25lKCBkYXRhICkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSBzb3VyY2UuYXR0cmlidXRlcztcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIG5hbWUsIGF0dHJpYnV0ZS5jbG9uZSggZGF0YSApICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCBhdHRyaWJ1dGVzXG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sgbmFtZSBdOyAvLyBtb3JwaEF0dHJpYnV0ZTogYXJyYXkgb2YgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZXNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhcnJheS5wdXNoKCBtb3JwaEF0dHJpYnV0ZVsgaSBdLmNsb25lKCBkYXRhICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vcnBoQXR0cmlidXRlc1sgbmFtZSBdID0gYXJyYXk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gc291cmNlLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHRjb25zdCBncm91cHMgPSBzb3VyY2UuZ3JvdXBzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHR0aGlzLmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdH1cblxuXHRcdC8vIGJvdW5kaW5nIGJveFxuXG5cdFx0Y29uc3QgYm91bmRpbmdCb3ggPSBzb3VyY2UuYm91bmRpbmdCb3g7XG5cblx0XHRpZiAoIGJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3guY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIGJvdW5kaW5nIHNwaGVyZVxuXG5cdFx0Y29uc3QgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIGRyYXcgcmFuZ2VcblxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc291cmNlLmRyYXdSYW5nZS5zdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IHNvdXJjZS5kcmF3UmFuZ2UuY291bnQ7XG5cblx0XHQvLyB1c2VyIGRhdGFcblxuXHRcdHRoaXMudXNlckRhdGEgPSBzb3VyY2UudXNlckRhdGE7XG5cblx0XHQvLyBnZW9tZXRyeSBnZW5lcmF0b3IgcGFyYW1ldGVyc1xuXG5cdFx0aWYgKCBzb3VyY2UucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkgdGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufVxuXG5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuaXNCdWZmZXJHZW9tZXRyeSA9IHRydWU7XG5cbmNvbnN0IF9pbnZlcnNlTWF0cml4JDIgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcmF5JDIgPSAvKkBfX1BVUkVfXyovIG5ldyBSYXkoKTtcbmNvbnN0IF9zcGhlcmUkMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwaGVyZSgpO1xuXG5jb25zdCBfdkEkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92QiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZDJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF90ZW1wQSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF90ZW1wQiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF90ZW1wQyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX21vcnBoQSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9tb3JwaEIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbW9ycGhDID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfdXZBJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdXZCJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdXZDJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5cbmNvbnN0IF9pbnRlcnNlY3Rpb25Qb2ludCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBNZXNoIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoJztcblxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0XHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdGlmICggc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IHNvdXJjZS5tb3JwaFRhcmdldEluZmx1ZW5jZXMuc2xpY2UoKTtcblxuXHRcdH1cblxuXHRcdGlmICggc291cmNlLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1hdGVyaWFsID0gc291cmNlLm1hdGVyaWFsO1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSBzb3VyY2UuZ2VvbWV0cnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dXBkYXRlTW9ycGhUYXJnZXRzKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cdFx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xuXG5cdFx0XHRpZiAoIGtleXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sga2V5c1sgMCBdIF07XG5cblx0XHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBbXTtcblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHt9O1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBuYW1lID0gbW9ycGhBdHRyaWJ1dGVbIG0gXS5uYW1lIHx8IFN0cmluZyggbSApO1xuXG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0cyA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cztcblxuXHRcdFx0aWYgKCBtb3JwaFRhcmdldHMgIT09IHVuZGVmaW5lZCAmJiBtb3JwaFRhcmdldHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWVzaC51cGRhdGVNb3JwaFRhcmdldHMoKSBubyBsb25nZXIgc3VwcG9ydHMgVEhSRUUuR2VvbWV0cnkuIFVzZSBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXHRcdGNvbnN0IG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblxuXHRcdGlmICggbWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0X3NwaGVyZSQzLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0X3NwaGVyZSQzLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDMgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvL1xuXG5cdFx0X2ludmVyc2VNYXRyaXgkMi5jb3B5KCBtYXRyaXhXb3JsZCApLmludmVydCgpO1xuXHRcdF9yYXkkMi5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBfaW52ZXJzZU1hdHJpeCQyICk7XG5cblx0XHQvLyBDaGVjayBib3VuZGluZ0JveCBiZWZvcmUgY29udGludWluZ1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBfcmF5JDIuaW50ZXJzZWN0c0JveCggZ2VvbWV0cnkuYm91bmRpbmdCb3ggKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHR9XG5cblx0XHRsZXQgaW50ZXJzZWN0aW9uO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0Y29uc3QgbW9ycGhQb3NpdGlvbiA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cdFx0XHRjb25zdCB1diA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXY7XG5cdFx0XHRjb25zdCB1djIgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2Mjtcblx0XHRcdGNvbnN0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3Vwcztcblx0XHRcdGNvbnN0IGRyYXdSYW5nZSA9IGdlb21ldHJ5LmRyYXdSYW5nZTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBpbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggZ3JvdXAuc3RhcnQsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKSApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IGVuZDsgaiA8IGpsOyBqICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgYSA9IGluZGV4LmdldFgoIGogKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGogKyAxICk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGMgPSBpbmRleC5nZXRYKCBqICsgMiApO1xuXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIGdyb3VwTWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSQyLCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgbW9ycGhUYXJnZXRzUmVsYXRpdmUsIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBqIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gaW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2UubWF0ZXJpYWxJbmRleCA9IGdyb3VwLm1hdGVyaWFsSW5kZXg7XG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBpbCA9IGVuZDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBpICk7XG5cdFx0XHRcdFx0XHRjb25zdCBiID0gaW5kZXguZ2V0WCggaSArIDEgKTtcblx0XHRcdFx0XHRcdGNvbnN0IGMgPSBpbmRleC5nZXRYKCBpICsgMiApO1xuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCBfcmF5JDIsIHBvc2l0aW9uLCBtb3JwaFBvc2l0aW9uLCBtb3JwaFRhcmdldHNSZWxhdGl2ZSwgdXYsIHV2MiwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaSAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggZ3JvdXAuc3RhcnQsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIHBvc2l0aW9uLmNvdW50LCBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKSApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IGVuZDsgaiA8IGpsOyBqICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgYSA9IGo7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGIgPSBqICsgMTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgYyA9IGogKyAyO1xuXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIGdyb3VwTWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSQyLCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgbW9ycGhUYXJnZXRzUmVsYXRpdmUsIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBqIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4O1xuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbi5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBhID0gaTtcblx0XHRcdFx0XHRcdGNvbnN0IGIgPSBpICsgMTtcblx0XHRcdFx0XHRcdGNvbnN0IGMgPSBpICsgMjtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSQyLCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgbW9ycGhUYXJnZXRzUmVsYXRpdmUsIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NZXNoLnJheWNhc3QoKSBubyBsb25nZXIgc3VwcG9ydHMgVEhSRUUuR2VvbWV0cnkuIFVzZSBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuTWVzaC5wcm90b3R5cGUuaXNNZXNoID0gdHJ1ZTtcblxuZnVuY3Rpb24gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwQSwgcEIsIHBDLCBwb2ludCApIHtcblxuXHRsZXQgaW50ZXJzZWN0O1xuXG5cdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7XG5cblx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHBDLCBwQiwgcEEsIHRydWUsIHBvaW50ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGludGVyc2VjdCA9IHJheS5pbnRlcnNlY3RUcmlhbmdsZSggcEEsIHBCLCBwQywgbWF0ZXJpYWwuc2lkZSAhPT0gRG91YmxlU2lkZSwgcG9pbnQgKTtcblxuXHR9XG5cblx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblxuXHRfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jb3B5KCBwb2ludCApO1xuXHRfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdGNvbnN0IGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggX2ludGVyc2VjdGlvblBvaW50V29ybGQgKTtcblxuXHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgcmV0dXJuIG51bGw7XG5cblx0cmV0dXJuIHtcblx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0cG9pbnQ6IF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkLmNsb25lKCksXG5cdFx0b2JqZWN0OiBvYmplY3Rcblx0fTtcblxufVxuXG5mdW5jdGlvbiBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIG1vcnBoVGFyZ2V0c1JlbGF0aXZlLCB1diwgdXYyLCBhLCBiLCBjICkge1xuXG5cdF92QSQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBhICk7XG5cdF92QiQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBiICk7XG5cdF92QyQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBjICk7XG5cblx0Y29uc3QgbW9ycGhJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRpZiAoIG1vcnBoUG9zaXRpb24gJiYgbW9ycGhJbmZsdWVuY2VzICkge1xuXG5cdFx0X21vcnBoQS5zZXQoIDAsIDAsIDAgKTtcblx0XHRfbW9ycGhCLnNldCggMCwgMCwgMCApO1xuXHRcdF9tb3JwaEMuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgaW5mbHVlbmNlID0gbW9ycGhJbmZsdWVuY2VzWyBpIF07XG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoUG9zaXRpb25bIGkgXTtcblxuXHRcdFx0aWYgKCBpbmZsdWVuY2UgPT09IDAgKSBjb250aW51ZTtcblxuXHRcdFx0X3RlbXBBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlLCBhICk7XG5cdFx0XHRfdGVtcEIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGIgKTtcblx0XHRcdF90ZW1wQy5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgYyApO1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRcdF9tb3JwaEEuYWRkU2NhbGVkVmVjdG9yKCBfdGVtcEEsIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRfbW9ycGhCLmFkZFNjYWxlZFZlY3RvciggX3RlbXBCLCBpbmZsdWVuY2UgKTtcblx0XHRcdFx0X21vcnBoQy5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQywgaW5mbHVlbmNlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X21vcnBoQS5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQS5zdWIoIF92QSQxICksIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRfbW9ycGhCLmFkZFNjYWxlZFZlY3RvciggX3RlbXBCLnN1YiggX3ZCJDEgKSwgaW5mbHVlbmNlICk7XG5cdFx0XHRcdF9tb3JwaEMuYWRkU2NhbGVkVmVjdG9yKCBfdGVtcEMuc3ViKCBfdkMkMSApLCBpbmZsdWVuY2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0X3ZBJDEuYWRkKCBfbW9ycGhBICk7XG5cdFx0X3ZCJDEuYWRkKCBfbW9ycGhCICk7XG5cdFx0X3ZDJDEuYWRkKCBfbW9ycGhDICk7XG5cblx0fVxuXG5cdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRvYmplY3QuYm9uZVRyYW5zZm9ybSggYSwgX3ZBJDEgKTtcblx0XHRvYmplY3QuYm9uZVRyYW5zZm9ybSggYiwgX3ZCJDEgKTtcblx0XHRvYmplY3QuYm9uZVRyYW5zZm9ybSggYywgX3ZDJDEgKTtcblxuXHR9XG5cblx0Y29uc3QgaW50ZXJzZWN0aW9uID0gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBfdkEkMSwgX3ZCJDEsIF92QyQxLCBfaW50ZXJzZWN0aW9uUG9pbnQgKTtcblxuXHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdGlmICggdXYgKSB7XG5cblx0XHRcdF91dkEkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCB1diwgYSApO1xuXHRcdFx0X3V2QiQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBiICk7XG5cdFx0XHRfdXZDJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYsIGMgKTtcblxuXHRcdFx0aW50ZXJzZWN0aW9uLnV2ID0gVHJpYW5nbGUuZ2V0VVYoIF9pbnRlcnNlY3Rpb25Qb2ludCwgX3ZBJDEsIF92QiQxLCBfdkMkMSwgX3V2QSQxLCBfdXZCJDEsIF91dkMkMSwgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1djIgKSB7XG5cblx0XHRcdF91dkEkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCB1djIsIGEgKTtcblx0XHRcdF91dkIkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCB1djIsIGIgKTtcblx0XHRcdF91dkMkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCB1djIsIGMgKTtcblxuXHRcdFx0aW50ZXJzZWN0aW9uLnV2MiA9IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSQxLCBfdkIkMSwgX3ZDJDEsIF91dkEkMSwgX3V2QiQxLCBfdXZDJDEsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGZhY2UgPSB7XG5cdFx0XHRhOiBhLFxuXHRcdFx0YjogYixcblx0XHRcdGM6IGMsXG5cdFx0XHRub3JtYWw6IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRtYXRlcmlhbEluZGV4OiAwXG5cdFx0fTtcblxuXHRcdFRyaWFuZ2xlLmdldE5vcm1hbCggX3ZBJDEsIF92QiQxLCBfdkMkMSwgZmFjZS5ub3JtYWwgKTtcblxuXHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcblxuXHR9XG5cblx0cmV0dXJuIGludGVyc2VjdGlvbjtcblxufVxuXG5jbGFzcyBCb3hHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEsIHdpZHRoU2VnbWVudHMgPSAxLCBoZWlnaHRTZWdtZW50cyA9IDEsIGRlcHRoU2VnbWVudHMgPSAxICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdCb3hHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdGRlcHRoOiBkZXB0aCxcblx0XHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRkZXB0aFNlZ21lbnRzOiBkZXB0aFNlZ21lbnRzXG5cdFx0fTtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdC8vIHNlZ21lbnRzXG5cblx0XHR3aWR0aFNlZ21lbnRzID0gTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApO1xuXHRcdGhlaWdodFNlZ21lbnRzID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKTtcblx0XHRkZXB0aFNlZ21lbnRzID0gTWF0aC5mbG9vciggZGVwdGhTZWdtZW50cyApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0bGV0IG51bWJlck9mVmVydGljZXMgPSAwO1xuXHRcdGxldCBncm91cFN0YXJ0ID0gMDtcblxuXHRcdC8vIGJ1aWxkIGVhY2ggc2lkZSBvZiB0aGUgYm94IGdlb21ldHJ5XG5cblx0XHRidWlsZFBsYW5lKCAneicsICd5JywgJ3gnLCAtIDEsIC0gMSwgZGVwdGgsIGhlaWdodCwgd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAwICk7IC8vIHB4XG5cdFx0YnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCAtIHdpZHRoLCBkZXB0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgMSApOyAvLyBueFxuXHRcdGJ1aWxkUGxhbmUoICd4JywgJ3onLCAneScsIDEsIDEsIHdpZHRoLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzLCAyICk7IC8vIHB5XG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneicsICd5JywgMSwgLSAxLCB3aWR0aCwgZGVwdGgsIC0gaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzLCAzICk7IC8vIG55XG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDQgKTsgLy8gcHpcblx0XHRidWlsZFBsYW5lKCAneCcsICd5JywgJ3onLCAtIDEsIC0gMSwgd2lkdGgsIGhlaWdodCwgLSBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDUgKTsgLy8gbnpcblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdFx0ZnVuY3Rpb24gYnVpbGRQbGFuZSggdSwgdiwgdywgdWRpciwgdmRpciwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdyaWRYLCBncmlkWSwgbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdFx0Y29uc3Qgc2VnbWVudFdpZHRoID0gd2lkdGggLyBncmlkWDtcblx0XHRcdGNvbnN0IHNlZ21lbnRIZWlnaHQgPSBoZWlnaHQgLyBncmlkWTtcblxuXHRcdFx0Y29uc3Qgd2lkdGhIYWxmID0gd2lkdGggLyAyO1xuXHRcdFx0Y29uc3QgaGVpZ2h0SGFsZiA9IGhlaWdodCAvIDI7XG5cdFx0XHRjb25zdCBkZXB0aEhhbGYgPSBkZXB0aCAvIDI7XG5cblx0XHRcdGNvbnN0IGdyaWRYMSA9IGdyaWRYICsgMTtcblx0XHRcdGNvbnN0IGdyaWRZMSA9IGdyaWRZICsgMTtcblxuXHRcdFx0bGV0IHZlcnRleENvdW50ZXIgPSAwO1xuXHRcdFx0bGV0IGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0XHRjb25zdCB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB5ID0gaXkgKiBzZWdtZW50SGVpZ2h0IC0gaGVpZ2h0SGFsZjtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB4ID0gaXggKiBzZWdtZW50V2lkdGggLSB3aWR0aEhhbGY7XG5cblx0XHRcdFx0XHQvLyBzZXQgdmFsdWVzIHRvIGNvcnJlY3QgdmVjdG9yIGNvbXBvbmVudFxuXG5cdFx0XHRcdFx0dmVjdG9yWyB1IF0gPSB4ICogdWRpcjtcblx0XHRcdFx0XHR2ZWN0b3JbIHYgXSA9IHkgKiB2ZGlyO1xuXHRcdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGhIYWxmO1xuXG5cdFx0XHRcdFx0Ly8gbm93IGFwcGx5IHZlY3RvciB0byB2ZXJ0ZXggYnVmZmVyXG5cblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7XG5cblx0XHRcdFx0XHQvLyBzZXQgdmFsdWVzIHRvIGNvcnJlY3QgdmVjdG9yIGNvbXBvbmVudFxuXG5cdFx0XHRcdFx0dmVjdG9yWyB1IF0gPSAwO1xuXHRcdFx0XHRcdHZlY3RvclsgdiBdID0gMDtcblx0XHRcdFx0XHR2ZWN0b3JbIHcgXSA9IGRlcHRoID4gMCA/IDEgOiAtIDE7XG5cblx0XHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcblxuXHRcdFx0XHRcdG5vcm1hbHMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdFx0Ly8gdXZzXG5cblx0XHRcdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0XHRcdHV2cy5wdXNoKCAxIC0gKCBpeSAvIGdyaWRZICkgKTtcblxuXHRcdFx0XHRcdC8vIGNvdW50ZXJzXG5cblx0XHRcdFx0XHR2ZXJ0ZXhDb3VudGVyICs9IDE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluZGljZXNcblxuXHRcdFx0Ly8gMS4geW91IG5lZWQgdGhyZWUgaW5kaWNlcyB0byBkcmF3IGEgc2luZ2xlIGZhY2Vcblx0XHRcdC8vIDIuIGEgc2luZ2xlIHNlZ21lbnQgY29uc2lzdHMgb2YgdHdvIGZhY2VzXG5cdFx0XHQvLyAzLiBzbyB3ZSBuZWVkIHRvIGdlbmVyYXRlIHNpeCAoMiozKSBpbmRpY2VzIHBlciBzZWdtZW50XG5cblx0XHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYSA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqIGl5O1xuXHRcdFx0XHRcdGNvbnN0IGIgPSBudW1iZXJPZlZlcnRpY2VzICsgaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0XHRcdGNvbnN0IGMgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdFx0Y29uc3QgZCA9IG51bWJlck9mVmVydGljZXMgKyAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7XG5cblx0XHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdFx0XHQvLyBpbmNyZWFzZSBjb3VudGVyXG5cblx0XHRcdFx0XHRncm91cENvdW50ICs9IDY7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCBtYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0XHRcdC8vIHVwZGF0ZSB0b3RhbCBudW1iZXIgb2YgdmVydGljZXNcblxuXHRcdFx0bnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IEJveEdlb21ldHJ5KCBkYXRhLndpZHRoLCBkYXRhLmhlaWdodCwgZGF0YS5kZXB0aCwgZGF0YS53aWR0aFNlZ21lbnRzLCBkYXRhLmhlaWdodFNlZ21lbnRzLCBkYXRhLmRlcHRoU2VnbWVudHMgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBVbmlmb3JtIFV0aWxpdGllc1xuICovXG5cbmZ1bmN0aW9uIGNsb25lVW5pZm9ybXMoIHNyYyApIHtcblxuXHRjb25zdCBkc3QgPSB7fTtcblxuXHRmb3IgKCBjb25zdCB1IGluIHNyYyApIHtcblxuXHRcdGRzdFsgdSBdID0ge307XG5cblx0XHRmb3IgKCBjb25zdCBwIGluIHNyY1sgdSBdICkge1xuXG5cdFx0XHRjb25zdCBwcm9wZXJ0eSA9IHNyY1sgdSBdWyBwIF07XG5cblx0XHRcdGlmICggcHJvcGVydHkgJiYgKCBwcm9wZXJ0eS5pc0NvbG9yIHx8XG5cdFx0XHRcdHByb3BlcnR5LmlzTWF0cml4MyB8fCBwcm9wZXJ0eS5pc01hdHJpeDQgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNWZWN0b3IyIHx8IHByb3BlcnR5LmlzVmVjdG9yMyB8fCBwcm9wZXJ0eS5pc1ZlY3RvcjQgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNUZXh0dXJlIHx8IHByb3BlcnR5LmlzUXVhdGVybmlvbiApICkge1xuXG5cdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eS5jbG9uZSgpO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCBwcm9wZXJ0eSApICkge1xuXG5cdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eS5zbGljZSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZHN0O1xuXG59XG5cbmZ1bmN0aW9uIG1lcmdlVW5pZm9ybXMoIHVuaWZvcm1zICkge1xuXG5cdGNvbnN0IG1lcmdlZCA9IHt9O1xuXG5cdGZvciAoIGxldCB1ID0gMDsgdSA8IHVuaWZvcm1zLmxlbmd0aDsgdSArKyApIHtcblxuXHRcdGNvbnN0IHRtcCA9IGNsb25lVW5pZm9ybXMoIHVuaWZvcm1zWyB1IF0gKTtcblxuXHRcdGZvciAoIGNvbnN0IHAgaW4gdG1wICkge1xuXG5cdFx0XHRtZXJnZWRbIHAgXSA9IHRtcFsgcCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gbWVyZ2VkO1xuXG59XG5cbi8vIExlZ2FjeVxuXG5jb25zdCBVbmlmb3Jtc1V0aWxzID0geyBjbG9uZTogY2xvbmVVbmlmb3JtcywgbWVyZ2U6IG1lcmdlVW5pZm9ybXMgfTtcblxudmFyIGRlZmF1bHRfdmVydGV4ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn1cIjtcblxudmFyIGRlZmF1bHRfZnJhZ21lbnQgPSBcInZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG59XCI7XG5cbmNsYXNzIFNoYWRlck1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFkZXJNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7fTtcblx0XHR0aGlzLnVuaWZvcm1zID0ge307XG5cblx0XHR0aGlzLnZlcnRleFNoYWRlciA9IGRlZmF1bHRfdmVydGV4O1xuXHRcdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBkZWZhdWx0X2ZyYWdtZW50O1xuXG5cdFx0dGhpcy5saW5ld2lkdGggPSAxO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0XHR0aGlzLmZvZyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHNjZW5lIGZvZ1xuXHRcdHRoaXMubGlnaHRzID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgbGlnaHRzXG5cdFx0dGhpcy5jbGlwcGluZyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHVzZXItZGVmaW5lZCBjbGlwcGluZyBwbGFuZXNcblxuXHRcdHRoaXMuZXh0ZW5zaW9ucyA9IHtcblx0XHRcdGRlcml2YXRpdmVzOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBkZXJpdmF0aXZlc1xuXHRcdFx0ZnJhZ0RlcHRoOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBmcmFnbWVudCBkZXB0aCB2YWx1ZXNcblx0XHRcdGRyYXdCdWZmZXJzOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBkcmF3IGJ1ZmZlcnNcblx0XHRcdHNoYWRlclRleHR1cmVMT0Q6IGZhbHNlIC8vIHNldCB0byB1c2Ugc2hhZGVyIHRleHR1cmUgTE9EXG5cdFx0fTtcblxuXHRcdC8vIFdoZW4gcmVuZGVyZWQgZ2VvbWV0cnkgZG9lc24ndCBpbmNsdWRlIHRoZXNlIGF0dHJpYnV0ZXMgYnV0IHRoZSBtYXRlcmlhbCBkb2VzLFxuXHRcdC8vIHVzZSB0aGVzZSBkZWZhdWx0IHZhbHVlcyBpbiBXZWJHTC4gVGhpcyBhdm9pZHMgZXJyb3JzIHdoZW4gYnVmZmVyIGRhdGEgaXMgbWlzc2luZy5cblx0XHR0aGlzLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSB7XG5cdFx0XHQnY29sb3InOiBbIDEsIDEsIDEgXSxcblx0XHRcdCd1dic6IFsgMCwgMCBdLFxuXHRcdFx0J3V2Mic6IFsgMCwgMCBdXG5cdFx0fTtcblxuXHRcdHRoaXMuaW5kZXgwQXR0cmlidXRlTmFtZSA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5nbHNsVmVyc2lvbiA9IG51bGw7XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzLmF0dHJpYnV0ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IGF0dHJpYnV0ZXMgc2hvdWxkIG5vdyBiZSBkZWZpbmVkIGluIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5mcmFnbWVudFNoYWRlciA9IHNvdXJjZS5mcmFnbWVudFNoYWRlcjtcblx0XHR0aGlzLnZlcnRleFNoYWRlciA9IHNvdXJjZS52ZXJ0ZXhTaGFkZXI7XG5cblx0XHR0aGlzLnVuaWZvcm1zID0gY2xvbmVVbmlmb3Jtcyggc291cmNlLnVuaWZvcm1zICk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLmRlZmluZXMgKTtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cblx0XHR0aGlzLmxpZ2h0cyA9IHNvdXJjZS5saWdodHM7XG5cdFx0dGhpcy5jbGlwcGluZyA9IHNvdXJjZS5jbGlwcGluZztcblxuXHRcdHRoaXMuZXh0ZW5zaW9ucyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UuZXh0ZW5zaW9ucyApO1xuXG5cdFx0dGhpcy5nbHNsVmVyc2lvbiA9IHNvdXJjZS5nbHNsVmVyc2lvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLmdsc2xWZXJzaW9uID0gdGhpcy5nbHNsVmVyc2lvbjtcblx0XHRkYXRhLnVuaWZvcm1zID0ge307XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIHRoaXMudW5pZm9ybXMgKSB7XG5cblx0XHRcdGNvbnN0IHVuaWZvcm0gPSB0aGlzLnVuaWZvcm1zWyBuYW1lIF07XG5cdFx0XHRjb25zdCB2YWx1ZSA9IHVuaWZvcm0udmFsdWU7XG5cblx0XHRcdGlmICggdmFsdWUgJiYgdmFsdWUuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0XHR0eXBlOiAndCcsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvSlNPTiggbWV0YSApLnV1aWRcblx0XHRcdFx0fTtcblxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNDb2xvciApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ2MnLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZS5nZXRIZXgoKVxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjIgKSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHR5cGU6ICd2MicsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjMgKSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHR5cGU6ICd2MycsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHR5cGU6ICd2NCcsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc01hdHJpeDMgKSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHR5cGU6ICdtMycsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc01hdHJpeDQgKSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHR5cGU6ICdtNCcsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBub3RlOiB0aGUgYXJyYXkgdmFyaWFudHMgdjJ2LCB2M3YsIHY0diwgbTR2IGFuZCB0diBhcmUgbm90IHN1cHBvcnRlZCBzbyBmYXJcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy5kZWZpbmVzICkubGVuZ3RoID4gMCApIGRhdGEuZGVmaW5lcyA9IHRoaXMuZGVmaW5lcztcblxuXHRcdGRhdGEudmVydGV4U2hhZGVyID0gdGhpcy52ZXJ0ZXhTaGFkZXI7XG5cdFx0ZGF0YS5mcmFnbWVudFNoYWRlciA9IHRoaXMuZnJhZ21lbnRTaGFkZXI7XG5cblx0XHRjb25zdCBleHRlbnNpb25zID0ge307XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gdGhpcy5leHRlbnNpb25zICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuZXh0ZW5zaW9uc1sga2V5IF0gPT09IHRydWUgKSBleHRlbnNpb25zWyBrZXkgXSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCBleHRlbnNpb25zICkubGVuZ3RoID4gMCApIGRhdGEuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmlzU2hhZGVyTWF0ZXJpYWwgPSB0cnVlO1xuXG5jbGFzcyBDYW1lcmEgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0NhbWVyYSc7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBzb3VyY2UubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXguY29weSggc291cmNlLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFdvcmxkRGlyZWN0aW9uKCB0YXJnZXQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0Y29uc3QgZSA9IHRoaXMubWF0cml4V29ybGQuZWxlbWVudHM7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggLSBlWyA4IF0sIC0gZVsgOSBdLCAtIGVbIDEwIF0gKS5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCB0aGlzLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0fVxuXG5cdHVwZGF0ZVdvcmxkTWF0cml4KCB1cGRhdGVQYXJlbnRzLCB1cGRhdGVDaGlsZHJlbiApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZVdvcmxkTWF0cml4KCB1cGRhdGVQYXJlbnRzLCB1cGRhdGVDaGlsZHJlbiApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuQ2FtZXJhLnByb3RvdHlwZS5pc0NhbWVyYSA9IHRydWU7XG5cbmNsYXNzIFBlcnNwZWN0aXZlQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhIHtcblxuXHRjb25zdHJ1Y3RvciggZm92ID0gNTAsIGFzcGVjdCA9IDEsIG5lYXIgPSAwLjEsIGZhciA9IDIwMDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BlcnNwZWN0aXZlQ2FtZXJhJztcblxuXHRcdHRoaXMuZm92ID0gZm92O1xuXHRcdHRoaXMuem9vbSA9IDE7XG5cblx0XHR0aGlzLm5lYXIgPSBuZWFyO1xuXHRcdHRoaXMuZmFyID0gZmFyO1xuXHRcdHRoaXMuZm9jdXMgPSAxMDtcblxuXHRcdHRoaXMuYXNwZWN0ID0gYXNwZWN0O1xuXHRcdHRoaXMudmlldyA9IG51bGw7XG5cblx0XHR0aGlzLmZpbG1HYXVnZSA9IDM1O1x0Ly8gd2lkdGggb2YgdGhlIGZpbG0gKGRlZmF1bHQgaW4gbWlsbGltZXRlcnMpXG5cdFx0dGhpcy5maWxtT2Zmc2V0ID0gMDtcdC8vIGhvcml6b250YWwgZmlsbSBvZmZzZXQgKHNhbWUgdW5pdCBhcyBnYXVnZSlcblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLmZvdiA9IHNvdXJjZS5mb3Y7XG5cdFx0dGhpcy56b29tID0gc291cmNlLnpvb207XG5cblx0XHR0aGlzLm5lYXIgPSBzb3VyY2UubmVhcjtcblx0XHR0aGlzLmZhciA9IHNvdXJjZS5mYXI7XG5cdFx0dGhpcy5mb2N1cyA9IHNvdXJjZS5mb2N1cztcblxuXHRcdHRoaXMuYXNwZWN0ID0gc291cmNlLmFzcGVjdDtcblx0XHR0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTtcblxuXHRcdHRoaXMuZmlsbUdhdWdlID0gc291cmNlLmZpbG1HYXVnZTtcblx0XHR0aGlzLmZpbG1PZmZzZXQgPSBzb3VyY2UuZmlsbU9mZnNldDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgRk9WIGJ5IGZvY2FsIGxlbmd0aCBpbiByZXNwZWN0IHRvIHRoZSBjdXJyZW50IC5maWxtR2F1Z2UuXG5cdCAqXG5cdCAqIFRoZSBkZWZhdWx0IGZpbG0gZ2F1Z2UgaXMgMzUsIHNvIHRoYXQgdGhlIGZvY2FsIGxlbmd0aCBjYW4gYmUgc3BlY2lmaWVkIGZvclxuXHQgKiBhIDM1bW0gKGZ1bGwgZnJhbWUpIGNhbWVyYS5cblx0ICpcblx0ICogVmFsdWVzIGZvciBmb2NhbCBsZW5ndGggYW5kIGZpbG0gZ2F1Z2UgbXVzdCBoYXZlIHRoZSBzYW1lIHVuaXQuXG5cdCAqL1xuXHRzZXRGb2NhbExlbmd0aCggZm9jYWxMZW5ndGggKSB7XG5cblx0XHQvKiogc2VlIHtAbGluayBodHRwOi8vd3d3LmJvYmF0a2lucy5jb20vcGhvdG9ncmFwaHkvdGVjaG5pY2FsL2ZpZWxkX29mX3ZpZXcuaHRtbH0gKi9cblx0XHRjb25zdCB2RXh0ZW50U2xvcGUgPSAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIGZvY2FsTGVuZ3RoO1xuXG5cdFx0dGhpcy5mb3YgPSBSQUQyREVHICogMiAqIE1hdGguYXRhbiggdkV4dGVudFNsb3BlICk7XG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGVzIHRoZSBmb2NhbCBsZW5ndGggZnJvbSB0aGUgY3VycmVudCAuZm92IGFuZCAuZmlsbUdhdWdlLlxuXHQgKi9cblx0Z2V0Rm9jYWxMZW5ndGgoKSB7XG5cblx0XHRjb25zdCB2RXh0ZW50U2xvcGUgPSBNYXRoLnRhbiggREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICk7XG5cblx0XHRyZXR1cm4gMC41ICogdGhpcy5nZXRGaWxtSGVpZ2h0KCkgLyB2RXh0ZW50U2xvcGU7XG5cblx0fVxuXG5cdGdldEVmZmVjdGl2ZUZPVigpIHtcblxuXHRcdHJldHVybiBSQUQyREVHICogMiAqIE1hdGguYXRhbihcblx0XHRcdE1hdGgudGFuKCBERUcyUkFEICogMC41ICogdGhpcy5mb3YgKSAvIHRoaXMuem9vbSApO1xuXG5cdH1cblxuXHRnZXRGaWxtV2lkdGgoKSB7XG5cblx0XHQvLyBmaWxtIG5vdCBjb21wbGV0ZWx5IGNvdmVyZWQgaW4gcG9ydHJhaXQgZm9ybWF0IChhc3BlY3QgPCAxKVxuXHRcdHJldHVybiB0aGlzLmZpbG1HYXVnZSAqIE1hdGgubWluKCB0aGlzLmFzcGVjdCwgMSApO1xuXG5cdH1cblxuXHRnZXRGaWxtSGVpZ2h0KCkge1xuXG5cdFx0Ly8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIGxhbmRzY2FwZSBmb3JtYXQgKGFzcGVjdCA+IDEpXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlIC8gTWF0aC5tYXgoIHRoaXMuYXNwZWN0LCAxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGFuIG9mZnNldCBpbiBhIGxhcmdlciBmcnVzdHVtLiBUaGlzIGlzIHVzZWZ1bCBmb3IgbXVsdGktd2luZG93IG9yXG5cdCAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuXG5cdCAqXG5cdCAqIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSAzeDIgbW9uaXRvcnMgYW5kIGVhY2ggbW9uaXRvciBpcyAxOTIweDEwODAgYW5kXG5cdCAqIHRoZSBtb25pdG9ycyBhcmUgaW4gZ3JpZCBsaWtlIHRoaXNcblx0ICpcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqICAgfCBBIHwgQiB8IEMgfFxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICogICB8IEQgfCBFIHwgRiB8XG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKlxuXHQgKiB0aGVuIGZvciBlYWNoIG1vbml0b3IgeW91IHdvdWxkIGNhbGwgaXQgbGlrZSB0aGlzXG5cdCAqXG5cdCAqICAgY29uc3QgdyA9IDE5MjA7XG5cdCAqICAgY29uc3QgaCA9IDEwODA7XG5cdCAqICAgY29uc3QgZnVsbFdpZHRoID0gdyAqIDM7XG5cdCAqICAgY29uc3QgZnVsbEhlaWdodCA9IGggKiAyO1xuXHQgKlxuXHQgKiAgIC0tQS0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAwLCB3LCBoICk7XG5cdCAqICAgLS1CLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDAsIHcsIGggKTtcblx0ICogICAtLUMtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMCwgdywgaCApO1xuXHQgKiAgIC0tRC0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAxLCB3LCBoICk7XG5cdCAqICAgLS1FLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMSwgaCAqIDEsIHcsIGggKTtcblx0ICogICAtLUYtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMSwgdywgaCApO1xuXHQgKlxuXHQgKiAgIE5vdGUgdGhlcmUgaXMgbm8gcmVhc29uIG1vbml0b3JzIGhhdmUgdG8gYmUgdGhlIHNhbWUgc2l6ZSBvciBpbiBhIGdyaWQuXG5cdCAqL1xuXHRzZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHR0aGlzLmFzcGVjdCA9IGZ1bGxXaWR0aCAvIGZ1bGxIZWlnaHQ7XG5cblx0XHRpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3ID0ge1xuXHRcdFx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdFx0XHRmdWxsV2lkdGg6IDEsXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXG5cdFx0XHRcdG9mZnNldFg6IDAsXG5cdFx0XHRcdG9mZnNldFk6IDAsXG5cdFx0XHRcdHdpZHRoOiAxLFxuXHRcdFx0XHRoZWlnaHQ6IDFcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDtcblx0XHR0aGlzLnZpZXcuZnVsbEhlaWdodCA9IGZ1bGxIZWlnaHQ7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xuXHRcdHRoaXMudmlldy5vZmZzZXRZID0geTtcblx0XHR0aGlzLnZpZXcud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fVxuXG5cdGNsZWFyVmlld09mZnNldCgpIHtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fVxuXG5cdHVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKSB7XG5cblx0XHRjb25zdCBuZWFyID0gdGhpcy5uZWFyO1xuXHRcdGxldCB0b3AgPSBuZWFyICogTWF0aC50YW4oIERFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tO1xuXHRcdGxldCBoZWlnaHQgPSAyICogdG9wO1xuXHRcdGxldCB3aWR0aCA9IHRoaXMuYXNwZWN0ICogaGVpZ2h0O1xuXHRcdGxldCBsZWZ0ID0gLSAwLjUgKiB3aWR0aDtcblx0XHRjb25zdCB2aWV3ID0gdGhpcy52aWV3O1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgJiYgdGhpcy52aWV3LmVuYWJsZWQgKSB7XG5cblx0XHRcdGNvbnN0IGZ1bGxXaWR0aCA9IHZpZXcuZnVsbFdpZHRoLFxuXHRcdFx0XHRmdWxsSGVpZ2h0ID0gdmlldy5mdWxsSGVpZ2h0O1xuXG5cdFx0XHRsZWZ0ICs9IHZpZXcub2Zmc2V0WCAqIHdpZHRoIC8gZnVsbFdpZHRoO1xuXHRcdFx0dG9wIC09IHZpZXcub2Zmc2V0WSAqIGhlaWdodCAvIGZ1bGxIZWlnaHQ7XG5cdFx0XHR3aWR0aCAqPSB2aWV3LndpZHRoIC8gZnVsbFdpZHRoO1xuXHRcdFx0aGVpZ2h0ICo9IHZpZXcuaGVpZ2h0IC8gZnVsbEhlaWdodDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHNrZXcgPSB0aGlzLmZpbG1PZmZzZXQ7XG5cdFx0aWYgKCBza2V3ICE9PSAwICkgbGVmdCArPSBuZWFyICogc2tldyAvIHRoaXMuZ2V0RmlsbVdpZHRoKCk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCBsZWZ0ICsgd2lkdGgsIHRvcCwgdG9wIC0gaGVpZ2h0LCBuZWFyLCB0aGlzLmZhciApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLnByb2plY3Rpb25NYXRyaXggKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3QuZm92ID0gdGhpcy5mb3Y7XG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcblxuXHRcdGRhdGEub2JqZWN0Lm5lYXIgPSB0aGlzLm5lYXI7XG5cdFx0ZGF0YS5vYmplY3QuZmFyID0gdGhpcy5mYXI7XG5cdFx0ZGF0YS5vYmplY3QuZm9jdXMgPSB0aGlzLmZvY3VzO1xuXG5cdFx0ZGF0YS5vYmplY3QuYXNwZWN0ID0gdGhpcy5hc3BlY3Q7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIGRhdGEub2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy52aWV3ICk7XG5cblx0XHRkYXRhLm9iamVjdC5maWxtR2F1Z2UgPSB0aGlzLmZpbG1HYXVnZTtcblx0XHRkYXRhLm9iamVjdC5maWxtT2Zmc2V0ID0gdGhpcy5maWxtT2Zmc2V0O1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cblBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS5pc1BlcnNwZWN0aXZlQ2FtZXJhID0gdHJ1ZTtcblxuY29uc3QgZm92ID0gOTAsIGFzcGVjdCA9IDE7XG5cbmNsYXNzIEN1YmVDYW1lcmEgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoIG5lYXIsIGZhciwgcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDdWJlQ2FtZXJhJztcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICE9PSB0cnVlICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQ3ViZUNhbWVyYTogVGhlIGNvbnN0cnVjdG9yIG5vdyBleHBlY3RzIGFuIGluc3RhbmNlIG9mIFdlYkdMQ3ViZVJlbmRlclRhcmdldCBhcyB0aGlyZCBwYXJhbWV0ZXIuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cblx0XHRjb25zdCBjYW1lcmFQWCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRcdGNhbWVyYVBYLmxheWVycyA9IHRoaXMubGF5ZXJzO1xuXHRcdGNhbWVyYVBYLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdFx0Y2FtZXJhUFgubG9va0F0KCBuZXcgVmVjdG9yMyggMSwgMCwgMCApICk7XG5cdFx0dGhpcy5hZGQoIGNhbWVyYVBYICk7XG5cblx0XHRjb25zdCBjYW1lcmFOWCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRcdGNhbWVyYU5YLmxheWVycyA9IHRoaXMubGF5ZXJzO1xuXHRcdGNhbWVyYU5YLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdFx0Y2FtZXJhTlgubG9va0F0KCBuZXcgVmVjdG9yMyggLSAxLCAwLCAwICkgKTtcblx0XHR0aGlzLmFkZCggY2FtZXJhTlggKTtcblxuXHRcdGNvbnN0IGNhbWVyYVBZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhUFkubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0Y2FtZXJhUFkudXAuc2V0KCAwLCAwLCAxICk7XG5cdFx0Y2FtZXJhUFkubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgMSwgMCApICk7XG5cdFx0dGhpcy5hZGQoIGNhbWVyYVBZICk7XG5cblx0XHRjb25zdCBjYW1lcmFOWSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRcdGNhbWVyYU5ZLmxheWVycyA9IHRoaXMubGF5ZXJzO1xuXHRcdGNhbWVyYU5ZLnVwLnNldCggMCwgMCwgLSAxICk7XG5cdFx0Y2FtZXJhTlkubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgLSAxLCAwICkgKTtcblx0XHR0aGlzLmFkZCggY2FtZXJhTlkgKTtcblxuXHRcdGNvbnN0IGNhbWVyYVBaID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhUFoubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0Y2FtZXJhUFoudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0XHRjYW1lcmFQWi5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAwLCAxICkgKTtcblx0XHR0aGlzLmFkZCggY2FtZXJhUFogKTtcblxuXHRcdGNvbnN0IGNhbWVyYU5aID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhTloubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0Y2FtZXJhTloudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0XHRjYW1lcmFOWi5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKSApO1xuXHRcdHRoaXMuYWRkKCBjYW1lcmFOWiApO1xuXG5cdH1cblxuXHR1cGRhdGUoIHJlbmRlcmVyLCBzY2VuZSApIHtcblxuXHRcdGlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldDtcblxuXHRcdGNvbnN0IFsgY2FtZXJhUFgsIGNhbWVyYU5YLCBjYW1lcmFQWSwgY2FtZXJhTlksIGNhbWVyYVBaLCBjYW1lcmFOWiBdID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHRcdGNvbnN0IGN1cnJlbnRPdXRwdXRFbmNvZGluZyA9IHJlbmRlcmVyLm91dHB1dEVuY29kaW5nO1xuXHRcdGNvbnN0IGN1cnJlbnRUb25lTWFwcGluZyA9IHJlbmRlcmVyLnRvbmVNYXBwaW5nO1xuXHRcdGNvbnN0IGN1cnJlbnRYckVuYWJsZWQgPSByZW5kZXJlci54ci5lbmFibGVkO1xuXG5cdFx0cmVuZGVyZXIub3V0cHV0RW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZztcblx0XHRyZW5kZXJlci50b25lTWFwcGluZyA9IE5vVG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgZ2VuZXJhdGVNaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBYICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMSApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5YICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMiApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBZICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMyApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5ZICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgNCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBaICk7XG5cblx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBnZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgNSApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5aICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJlbmRlcmVyLm91dHB1dEVuY29kaW5nID0gY3VycmVudE91dHB1dEVuY29kaW5nO1xuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gY3VycmVudFRvbmVNYXBwaW5nO1xuXHRcdHJlbmRlcmVyLnhyLmVuYWJsZWQgPSBjdXJyZW50WHJFbmFibGVkO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbmNsYXNzIEN1YmVUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHtcblxuXHRcdGltYWdlcyA9IGltYWdlcyAhPT0gdW5kZWZpbmVkID8gaW1hZ2VzIDogW107XG5cdFx0bWFwcGluZyA9IG1hcHBpbmcgIT09IHVuZGVmaW5lZCA/IG1hcHBpbmcgOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7XG5cblx0XHRzdXBlciggaW1hZ2VzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICk7XG5cblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0fVxuXG5cdGdldCBpbWFnZXMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbWFnZTtcblxuXHR9XG5cblx0c2V0IGltYWdlcyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmltYWdlID0gdmFsdWU7XG5cblx0fVxuXG59XG5cbkN1YmVUZXh0dXJlLnByb3RvdHlwZS5pc0N1YmVUZXh0dXJlID0gdHJ1ZTtcblxuY2xhc3MgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdGNvbnN0cnVjdG9yKCBzaXplLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlciggc2l6ZSwgc2l6ZSwgb3B0aW9ucyApO1xuXG5cdFx0Y29uc3QgaW1hZ2UgPSB7IHdpZHRoOiBzaXplLCBoZWlnaHQ6IHNpemUsIGRlcHRoOiAxIH07XG5cdFx0Y29uc3QgaW1hZ2VzID0gWyBpbWFnZSwgaW1hZ2UsIGltYWdlLCBpbWFnZSwgaW1hZ2UsIGltYWdlIF07XG5cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoIGltYWdlcywgb3B0aW9ucy5tYXBwaW5nLCBvcHRpb25zLndyYXBTLCBvcHRpb25zLndyYXBULCBvcHRpb25zLm1hZ0ZpbHRlciwgb3B0aW9ucy5taW5GaWx0ZXIsIG9wdGlvbnMuZm9ybWF0LCBvcHRpb25zLnR5cGUsIG9wdGlvbnMuYW5pc290cm9weSwgb3B0aW9ucy5lbmNvZGluZyApO1xuXG5cdFx0Ly8gQnkgY29udmVudGlvbiAtLSBsaWtlbHkgYmFzZWQgb24gdGhlIFJlbmRlck1hbiBzcGVjIGZyb20gdGhlIDE5OTAncyAtLSBjdWJlIG1hcHMgYXJlIHNwZWNpZmllZCBieSBXZWJHTCAoYW5kIHRocmVlLmpzKVxuXHRcdC8vIGluIGEgY29vcmRpbmF0ZSBzeXN0ZW0gaW4gd2hpY2ggcG9zaXRpdmUteCBpcyB0byB0aGUgcmlnaHQgd2hlbiBsb29raW5nIHVwIHRoZSBwb3NpdGl2ZS16IGF4aXMgLS0gaW4gb3RoZXIgd29yZHMsXG5cdFx0Ly8gaW4gYSBsZWZ0LWhhbmRlZCBjb29yZGluYXRlIHN5c3RlbS4gQnkgY29udGludWluZyB0aGlzIGNvbnZlbnRpb24sIHByZWV4aXN0aW5nIGN1YmUgbWFwcyBjb250aW51ZWQgdG8gcmVuZGVyIGNvcnJlY3RseS5cblxuXHRcdC8vIHRocmVlLmpzIHVzZXMgYSByaWdodC1oYW5kZWQgY29vcmRpbmF0ZSBzeXN0ZW0uIFNvIGVudmlyb25tZW50IG1hcHMgdXNlZCBpbiB0aHJlZS5qcyBhcHBlYXIgdG8gaGF2ZSBweCBhbmQgbnggc3dhcHBlZFxuXHRcdC8vIGFuZCB0aGUgZmxhZyBpc1JlbmRlclRhcmdldFRleHR1cmUgY29udHJvbHMgdGhpcyBjb252ZXJzaW9uLiBUaGUgZmxpcCBpcyBub3QgcmVxdWlyZWQgd2hlbiB1c2luZyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQudGV4dHVyZVxuXHRcdC8vIGFzIGEgY3ViZSB0ZXh0dXJlICh0aGlzIGlzIGRldGVjdGVkIHdoZW4gaXNSZW5kZXJUYXJnZXRUZXh0dXJlIGlzIHNldCB0byB0cnVlIGZvciBjdWJlIHRleHR1cmVzKS5cblxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyA6IGZhbHNlO1xuXHRcdHRoaXMudGV4dHVyZS5taW5GaWx0ZXIgPSBvcHRpb25zLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cblx0fVxuXG5cdGZyb21FcXVpcmVjdGFuZ3VsYXJUZXh0dXJlKCByZW5kZXJlciwgdGV4dHVyZSApIHtcblxuXHRcdHRoaXMudGV4dHVyZS50eXBlID0gdGV4dHVyZS50eXBlO1xuXHRcdHRoaXMudGV4dHVyZS5lbmNvZGluZyA9IHRleHR1cmUuZW5jb2Rpbmc7XG5cblx0XHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IHRleHR1cmUubWluRmlsdGVyO1xuXHRcdHRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSB0ZXh0dXJlLm1hZ0ZpbHRlcjtcblxuXHRcdGNvbnN0IHNoYWRlciA9IHtcblxuXHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0dEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR9LFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcblxuXHRcdFx0XHR2ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0KCBkaXIsIDAuMCApICkueHl6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHRcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XG5cblx0XHRcdFx0XHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHRcdFx0XHRcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cblxuXHRcdFx0XHR9XG5cdFx0XHRgLFxuXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogLyogZ2xzbCAqL2BcblxuXHRcdFx0XHR1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XG5cblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcblxuXHRcdFx0XHQjaW5jbHVkZSA8Y29tbW9uPlxuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHRcdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRcdHZlYzIgc2FtcGxlVVYgPSBlcXVpcmVjdFV2KCBkaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1xuXG5cdFx0XHRcdH1cblx0XHRcdGBcblx0XHR9O1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQm94R2VvbWV0cnkoIDUsIDUsIDUgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRcdG5hbWU6ICdDdWJlbWFwRnJvbUVxdWlyZWN0JyxcblxuXHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIHNoYWRlci51bmlmb3JtcyApLFxuXHRcdFx0dmVydGV4U2hhZGVyOiBzaGFkZXIudmVydGV4U2hhZGVyLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlcixcblx0XHRcdHNpZGU6IEJhY2tTaWRlLFxuXHRcdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmdcblxuXHRcdH0gKTtcblxuXHRcdG1hdGVyaWFsLnVuaWZvcm1zLnRFcXVpcmVjdC52YWx1ZSA9IHRleHR1cmU7XG5cblx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0Y29uc3QgY3VycmVudE1pbkZpbHRlciA9IHRleHR1cmUubWluRmlsdGVyO1xuXG5cdFx0Ly8gQXZvaWQgYmx1cnJlZCBwb2xlc1xuXHRcdGlmICggdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApIHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0Y29uc3QgY2FtZXJhID0gbmV3IEN1YmVDYW1lcmEoIDEsIDEwLCB0aGlzICk7XG5cdFx0Y2FtZXJhLnVwZGF0ZSggcmVuZGVyZXIsIG1lc2ggKTtcblxuXHRcdHRleHR1cmUubWluRmlsdGVyID0gY3VycmVudE1pbkZpbHRlcjtcblxuXHRcdG1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdG1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsZWFyKCByZW5kZXJlciwgY29sb3IsIGRlcHRoLCBzdGVuY2lsICkge1xuXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLCBpICk7XG5cblx0XHRcdHJlbmRlcmVyLmNsZWFyKCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKTtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdH1cblxufVxuXG5XZWJHTEN1YmVSZW5kZXJUYXJnZXQucHJvdG90eXBlLmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcblxuY29uc3QgX3ZlY3RvcjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmVjdG9yMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9ub3JtYWxNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCk7XG5cbmNsYXNzIFBsYW5lIHtcblxuXHRjb25zdHJ1Y3Rvciggbm9ybWFsID0gbmV3IFZlY3RvcjMoIDEsIDAsIDAgKSwgY29uc3RhbnQgPSAwICkge1xuXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5ub3JtYWwgPSBub3JtYWw7XG5cdFx0dGhpcy5jb25zdGFudCA9IGNvbnN0YW50O1xuXG5cdH1cblxuXHRzZXQoIG5vcm1hbCwgY29uc3RhbnQgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gY29uc3RhbnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Q29tcG9uZW50cyggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMubm9ybWFsLnNldCggeCwgeSwgeiApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KCBub3JtYWwsIHBvaW50ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IC0gcG9pbnQuZG90KCB0aGlzLm5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Db3BsYW5hclBvaW50cyggYSwgYiwgYyApIHtcblxuXHRcdGNvbnN0IG5vcm1hbCA9IF92ZWN0b3IxLnN1YlZlY3RvcnMoIGMsIGIgKS5jcm9zcyggX3ZlY3RvcjIuc3ViVmVjdG9ycyggYSwgYiApICkubm9ybWFsaXplKCk7XG5cblx0XHQvLyBROiBzaG91bGQgYW4gZXJyb3IgYmUgdGhyb3duIGlmIG5vcm1hbCBpcyB6ZXJvIChlLmcuIGRlZ2VuZXJhdGUgcGxhbmUpP1xuXG5cdFx0dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggbm9ybWFsLCBhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggcGxhbmUgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBwbGFuZS5ub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gcGxhbmUuY29uc3RhbnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bm9ybWFsaXplKCkge1xuXG5cdFx0Ly8gTm90ZTogd2lsbCBsZWFkIHRvIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIHBsYW5lIGlzIGludmFsaWQuXG5cblx0XHRjb25zdCBpbnZlcnNlTm9ybWFsTGVuZ3RoID0gMS4wIC8gdGhpcy5ub3JtYWwubGVuZ3RoKCk7XG5cdFx0dGhpcy5ub3JtYWwubXVsdGlwbHlTY2FsYXIoIGludmVyc2VOb3JtYWxMZW5ndGggKTtcblx0XHR0aGlzLmNvbnN0YW50ICo9IGludmVyc2VOb3JtYWxMZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bmVnYXRlKCkge1xuXG5cdFx0dGhpcy5jb25zdGFudCAqPSAtIDE7XG5cdFx0dGhpcy5ub3JtYWwubmVnYXRlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbC5kb3QoIHBvaW50ICkgKyB0aGlzLmNvbnN0YW50O1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSAtIHNwaGVyZS5yYWRpdXM7XG5cblx0fVxuXG5cdHByb2plY3RQb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5ub3JtYWwgKS5tdWx0aXBseVNjYWxhciggLSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSApLmFkZCggcG9pbnQgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0TGluZSggbGluZSwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgZGlyZWN0aW9uID0gbGluZS5kZWx0YSggX3ZlY3RvcjEgKTtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gdGhpcy5ub3JtYWwuZG90KCBkaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSB7XG5cblx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cblx0XHRcdGlmICggdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKSA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGxpbmUuc3RhcnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBVbnN1cmUgaWYgdGhpcyBpcyB0aGUgY29ycmVjdCBtZXRob2QgdG8gaGFuZGxlIHRoaXMgY2FzZS5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdCA9IC0gKCBsaW5lLnN0YXJ0LmRvdCggdGhpcy5ub3JtYWwgKSArIHRoaXMuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0aWYgKCB0IDwgMCB8fCB0ID4gMSApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCBsaW5lLnN0YXJ0ICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNMaW5lKCBsaW5lICkge1xuXG5cdFx0Ly8gTm90ZTogdGhpcyB0ZXN0cyBpZiBhIGxpbmUgaW50ZXJzZWN0cyB0aGUgcGxhbmUsIG5vdCB3aGV0aGVyIGl0IChvciBpdHMgZW5kLXBvaW50cykgYXJlIGNvcGxhbmFyIHdpdGggaXQuXG5cblx0XHRjb25zdCBzdGFydFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5zdGFydCApO1xuXHRcdGNvbnN0IGVuZFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiAoIHN0YXJ0U2lnbiA8IDAgJiYgZW5kU2lnbiA+IDAgKSB8fCAoIGVuZFNpZ24gPCAwICYmIHN0YXJ0U2lnbiA+IDAgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29wbGFuYXJQb2ludCggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAtIHRoaXMuY29uc3RhbnQgKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtYXRyaXgsIG9wdGlvbmFsTm9ybWFsTWF0cml4ICkge1xuXG5cdFx0Y29uc3Qgbm9ybWFsTWF0cml4ID0gb3B0aW9uYWxOb3JtYWxNYXRyaXggfHwgX25vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0Y29uc3QgcmVmZXJlbmNlUG9pbnQgPSB0aGlzLmNvcGxhbmFyUG9pbnQoIF92ZWN0b3IxICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdGNvbnN0IG5vcm1hbCA9IHRoaXMubm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHR0aGlzLmNvbnN0YW50ID0gLSByZWZlcmVuY2VQb2ludC5kb3QoIG5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZSggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5jb25zdGFudCAtPSBvZmZzZXQuZG90KCB0aGlzLm5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggcGxhbmUgKSB7XG5cblx0XHRyZXR1cm4gcGxhbmUubm9ybWFsLmVxdWFscyggdGhpcy5ub3JtYWwgKSAmJiAoIHBsYW5lLmNvbnN0YW50ID09PSB0aGlzLmNvbnN0YW50ICk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5QbGFuZS5wcm90b3R5cGUuaXNQbGFuZSA9IHRydWU7XG5cbmNvbnN0IF9zcGhlcmUkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwaGVyZSgpO1xuY29uc3QgX3ZlY3RvciQ3ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBGcnVzdHVtIHtcblxuXHRjb25zdHJ1Y3RvciggcDAgPSBuZXcgUGxhbmUoKSwgcDEgPSBuZXcgUGxhbmUoKSwgcDIgPSBuZXcgUGxhbmUoKSwgcDMgPSBuZXcgUGxhbmUoKSwgcDQgPSBuZXcgUGxhbmUoKSwgcDUgPSBuZXcgUGxhbmUoKSApIHtcblxuXHRcdHRoaXMucGxhbmVzID0gWyBwMCwgcDEsIHAyLCBwMywgcDQsIHA1IF07XG5cblx0fVxuXG5cdHNldCggcDAsIHAxLCBwMiwgcDMsIHA0LCBwNSApIHtcblxuXHRcdGNvbnN0IHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXG5cdFx0cGxhbmVzWyAwIF0uY29weSggcDAgKTtcblx0XHRwbGFuZXNbIDEgXS5jb3B5KCBwMSApO1xuXHRcdHBsYW5lc1sgMiBdLmNvcHkoIHAyICk7XG5cdFx0cGxhbmVzWyAzIF0uY29weSggcDMgKTtcblx0XHRwbGFuZXNbIDQgXS5jb3B5KCBwNCApO1xuXHRcdHBsYW5lc1sgNSBdLmNvcHkoIHA1ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggZnJ1c3R1bSApIHtcblxuXHRcdGNvbnN0IHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0cGxhbmVzWyBpIF0uY29weSggZnJ1c3R1bS5wbGFuZXNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBtICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lMCA9IG1lWyAwIF0sIG1lMSA9IG1lWyAxIF0sIG1lMiA9IG1lWyAyIF0sIG1lMyA9IG1lWyAzIF07XG5cdFx0Y29uc3QgbWU0ID0gbWVbIDQgXSwgbWU1ID0gbWVbIDUgXSwgbWU2ID0gbWVbIDYgXSwgbWU3ID0gbWVbIDcgXTtcblx0XHRjb25zdCBtZTggPSBtZVsgOCBdLCBtZTkgPSBtZVsgOSBdLCBtZTEwID0gbWVbIDEwIF0sIG1lMTEgPSBtZVsgMTEgXTtcblx0XHRjb25zdCBtZTEyID0gbWVbIDEyIF0sIG1lMTMgPSBtZVsgMTMgXSwgbWUxNCA9IG1lWyAxNCBdLCBtZTE1ID0gbWVbIDE1IF07XG5cblx0XHRwbGFuZXNbIDAgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTAsIG1lNyAtIG1lNCwgbWUxMSAtIG1lOCwgbWUxNSAtIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDEgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTAsIG1lNyArIG1lNCwgbWUxMSArIG1lOCwgbWUxNSArIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDIgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTEsIG1lNyArIG1lNSwgbWUxMSArIG1lOSwgbWUxNSArIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDMgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTEsIG1lNyAtIG1lNSwgbWUxMSAtIG1lOSwgbWUxNSAtIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDQgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTIsIG1lNyAtIG1lNiwgbWUxMSAtIG1lMTAsIG1lMTUgLSBtZTE0ICkubm9ybWFsaXplKCk7XG5cdFx0cGxhbmVzWyA1IF0uc2V0Q29tcG9uZW50cyggbWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwLCBtZTE1ICsgbWUxNCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGludGVyc2VjdHNPYmplY3QoIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0X3NwaGVyZSQyLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICkuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUkMiApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzU3ByaXRlKCBzcHJpdGUgKSB7XG5cblx0XHRfc3BoZXJlJDIuY2VudGVyLnNldCggMCwgMCwgMCApO1xuXHRcdF9zcGhlcmUkMi5yYWRpdXMgPSAwLjcwNzEwNjc4MTE4NjU0NzY7XG5cdFx0X3NwaGVyZSQyLmFwcGx5TWF0cml4NCggc3ByaXRlLm1hdHJpeFdvcmxkICk7XG5cblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDIgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cdFx0Y29uc3QgY2VudGVyID0gc3BoZXJlLmNlbnRlcjtcblx0XHRjb25zdCBuZWdSYWRpdXMgPSAtIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IHBsYW5lc1sgaSBdLmRpc3RhbmNlVG9Qb2ludCggY2VudGVyICk7XG5cblx0XHRcdGlmICggZGlzdGFuY2UgPCBuZWdSYWRpdXMgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwbGFuZSA9IHBsYW5lc1sgaSBdO1xuXG5cdFx0XHQvLyBjb3JuZXIgYXQgbWF4IGRpc3RhbmNlXG5cblx0XHRcdF92ZWN0b3IkNy54ID0gcGxhbmUubm9ybWFsLnggPiAwID8gYm94Lm1heC54IDogYm94Lm1pbi54O1xuXHRcdFx0X3ZlY3RvciQ3LnkgPSBwbGFuZS5ub3JtYWwueSA+IDAgPyBib3gubWF4LnkgOiBib3gubWluLnk7XG5cdFx0XHRfdmVjdG9yJDcueiA9IHBsYW5lLm5vcm1hbC56ID4gMCA/IGJveC5tYXgueiA6IGJveC5taW4uejtcblxuXHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIF92ZWN0b3IkNyApIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcblxuXHRcdGNvbnN0IHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgPCAwICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBXZWJHTEFuaW1hdGlvbigpIHtcblxuXHRsZXQgY29udGV4dCA9IG51bGw7XG5cdGxldCBpc0FuaW1hdGluZyA9IGZhbHNlO1xuXHRsZXQgYW5pbWF0aW9uTG9vcCA9IG51bGw7XG5cdGxldCByZXF1ZXN0SWQgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0YW5pbWF0aW9uTG9vcCggdGltZSwgZnJhbWUgKTtcblxuXHRcdHJlcXVlc3RJZCA9IGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRzdGFydDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIGlzQW5pbWF0aW5nID09PSB0cnVlICkgcmV0dXJuO1xuXHRcdFx0aWYgKCBhbmltYXRpb25Mb29wID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRyZXF1ZXN0SWQgPSBjb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZSggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IHRydWU7XG5cblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb250ZXh0LmNhbmNlbEFuaW1hdGlvbkZyYW1lKCByZXF1ZXN0SWQgKTtcblxuXHRcdFx0aXNBbmltYXRpbmcgPSBmYWxzZTtcblxuXHRcdH0sXG5cblx0XHRzZXRBbmltYXRpb25Mb29wOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0XHRhbmltYXRpb25Mb29wID0gY2FsbGJhY2s7XG5cblx0XHR9LFxuXG5cdFx0c2V0Q29udGV4dDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29udGV4dCA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xBdHRyaWJ1dGVzKCBnbCwgY2FwYWJpbGl0aWVzICkge1xuXG5cdGNvbnN0IGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdGNvbnN0IGJ1ZmZlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciggYXR0cmlidXRlLCBidWZmZXJUeXBlICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0Y29uc3QgdXNhZ2UgPSBhdHRyaWJ1dGUudXNhZ2U7XG5cblx0XHRjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGJ1ZmZlclR5cGUsIGJ1ZmZlciApO1xuXHRcdGdsLmJ1ZmZlckRhdGEoIGJ1ZmZlclR5cGUsIGFycmF5LCB1c2FnZSApO1xuXG5cdFx0YXR0cmlidXRlLm9uVXBsb2FkQ2FsbGJhY2soKTtcblxuXHRcdGxldCB0eXBlO1xuXG5cdFx0aWYgKCBhcnJheSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjY7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5ICkge1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5pc0Zsb2F0MTZCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0XHRcdHR5cGUgPSA1MTMxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTEF0dHJpYnV0ZXM6IFVzYWdlIG9mIEZsb2F0MTZCdWZmZXJBdHRyaWJ1dGUgcmVxdWlyZXMgV2ViR0wyLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dHlwZSA9IDUxMjM7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjI7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNTtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjA7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTIxO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTEF0dHJpYnV0ZXM6IFVuc3VwcG9ydGVkIGJ1ZmZlciBkYXRhIGZvcm1hdDogJyArIGFycmF5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YnVmZmVyOiBidWZmZXIsXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0Ynl0ZXNQZXJFbGVtZW50OiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdHZlcnNpb246IGF0dHJpYnV0ZS52ZXJzaW9uXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQnVmZmVyKCBidWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdGNvbnN0IHVwZGF0ZVJhbmdlID0gYXR0cmlidXRlLnVwZGF0ZVJhbmdlO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7XG5cblx0XHRpZiAoIHVwZGF0ZVJhbmdlLmNvdW50ID09PSAtIDEgKSB7XG5cblx0XHRcdC8vIE5vdCB1c2luZyB1cGRhdGUgcmFuZ2VzXG5cblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIDAsIGFycmF5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGlzV2ViR0wyICkge1xuXG5cdFx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIHVwZGF0ZVJhbmdlLm9mZnNldCAqIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0XHRcdGFycmF5LCB1cGRhdGVSYW5nZS5vZmZzZXQsIHVwZGF0ZVJhbmdlLmNvdW50ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgdXBkYXRlUmFuZ2Uub2Zmc2V0ICogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdFx0YXJyYXkuc3ViYXJyYXkoIHVwZGF0ZVJhbmdlLm9mZnNldCwgdXBkYXRlUmFuZ2Uub2Zmc2V0ICsgdXBkYXRlUmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZVJhbmdlLmNvdW50ID0gLSAxOyAvLyByZXNldCByYW5nZVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGdldCggYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0cmV0dXJuIGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRjb25zdCBkYXRhID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBkYXRhICkge1xuXG5cdFx0XHRnbC5kZWxldGVCdWZmZXIoIGRhdGEuYnVmZmVyICk7XG5cblx0XHRcdGJ1ZmZlcnMuZGVsZXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0dMQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRjb25zdCBjYWNoZWQgPSBidWZmZXJzLmdldCggYXR0cmlidXRlICk7XG5cblx0XHRcdGlmICggISBjYWNoZWQgfHwgY2FjaGVkLnZlcnNpb24gPCBhdHRyaWJ1dGUudmVyc2lvbiApIHtcblxuXHRcdFx0XHRidWZmZXJzLnNldCggYXR0cmlidXRlLCB7XG5cdFx0XHRcdFx0YnVmZmVyOiBhdHRyaWJ1dGUuYnVmZmVyLFxuXHRcdFx0XHRcdHR5cGU6IGF0dHJpYnV0ZS50eXBlLFxuXHRcdFx0XHRcdGJ5dGVzUGVyRWxlbWVudDogYXR0cmlidXRlLmVsZW1lbnRTaXplLFxuXHRcdFx0XHRcdHZlcnNpb246IGF0dHJpYnV0ZS52ZXJzaW9uXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRjb25zdCBkYXRhID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJ1ZmZlcnMuc2V0KCBhdHRyaWJ1dGUsIGNyZWF0ZUJ1ZmZlciggYXR0cmlidXRlLCBidWZmZXJUeXBlICkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGRhdGEudmVyc2lvbiA8IGF0dHJpYnV0ZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGRhdGVCdWZmZXIoIGRhdGEuYnVmZmVyLCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKTtcblxuXHRcdFx0ZGF0YS52ZXJzaW9uID0gYXR0cmlidXRlLnZlcnNpb247XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGdldCxcblx0XHRyZW1vdmU6IHJlbW92ZSxcblx0XHR1cGRhdGU6IHVwZGF0ZVxuXG5cdH07XG5cbn1cblxuY2xhc3MgUGxhbmVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSAnUGxhbmVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHNcblx0XHR9O1xuXG5cdFx0Y29uc3Qgd2lkdGhfaGFsZiA9IHdpZHRoIC8gMjtcblx0XHRjb25zdCBoZWlnaHRfaGFsZiA9IGhlaWdodCAvIDI7XG5cblx0XHRjb25zdCBncmlkWCA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKTtcblx0XHRjb25zdCBncmlkWSA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICk7XG5cblx0XHRjb25zdCBncmlkWDEgPSBncmlkWCArIDE7XG5cdFx0Y29uc3QgZ3JpZFkxID0gZ3JpZFkgKyAxO1xuXG5cdFx0Y29uc3Qgc2VnbWVudF93aWR0aCA9IHdpZHRoIC8gZ3JpZFg7XG5cdFx0Y29uc3Qgc2VnbWVudF9oZWlnaHQgPSBoZWlnaHQgLyBncmlkWTtcblxuXHRcdC8vXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGdyaWRZMTsgaXkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHkgPSBpeSAqIHNlZ21lbnRfaGVpZ2h0IC0gaGVpZ2h0X2hhbGY7XG5cblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcblxuXHRcdFx0XHRjb25zdCB4ID0gaXggKiBzZWdtZW50X3dpZHRoIC0gd2lkdGhfaGFsZjtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAtIHksIDAgKTtcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblxuXHRcdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0XHR1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaXggPSAwOyBpeCA8IGdyaWRYOyBpeCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gaXggKyBncmlkWDEgKiBpeTtcblx0XHRcdFx0Y29uc3QgYiA9IGl4ICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdFx0Y29uc3QgYyA9ICggaXggKyAxICkgKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0XHRjb25zdCBkID0gKCBpeCArIDEgKSArIGdyaWRYMSAqIGl5O1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBQbGFuZUdlb21ldHJ5KCBkYXRhLndpZHRoLCBkYXRhLmhlaWdodCwgZGF0YS53aWR0aFNlZ21lbnRzLCBkYXRhLmhlaWdodFNlZ21lbnRzICk7XG5cblx0fVxuXG59XG5cbnZhciBhbHBoYW1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdGRpZmZ1c2VDb2xvci5hICo9IHRleHR1cmUyRCggYWxwaGFNYXAsIHZVdiApLmc7XFxuI2VuZGlmXCI7XG5cbnZhciBhbHBoYW1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBhbHBoYXRlc3RfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFURVNUXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IGFscGhhVGVzdCApIGRpc2NhcmQ7XFxuI2VuZGlmXCI7XG5cbnZhciBhbHBoYXRlc3RfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQVRFU1RcXG5cXHR1bmlmb3JtIGZsb2F0IGFscGhhVGVzdDtcXG4jZW5kaWZcIjtcblxudmFyIGFvbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FPTUFQXFxuXFx0ZmxvYXQgYW1iaWVudE9jY2x1c2lvbiA9ICggdGV4dHVyZTJEKCBhb01hcCwgdlV2MiApLnIgLSAxLjAgKSAqIGFvTWFwSW50ZW5zaXR5ICsgMS4wO1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBhbWJpZW50T2NjbHVzaW9uO1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggU1RBTkRBUkQgKVxcblxcdFxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICo9IGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggZG90TlYsIGFtYmllbnRPY2NsdXNpb24sIG1hdGVyaWFsLnJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgYW9tYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCI7XG5cbnZhciBiZWdpbl92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWQgPSB2ZWMzKCBwb3NpdGlvbiApO1wiO1xuXG52YXIgYmVnaW5ub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xcbiNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdHZlYzMgb2JqZWN0VGFuZ2VudCA9IHZlYzMoIHRhbmdlbnQueHl6ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBic2RmcyA9IFwidmVjMyBCUkRGX0xhbWJlcnQoIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogZGlmZnVzZUNvbG9yO1xcbn1cXG52ZWMzIEZfU2NobGljayggY29uc3QgaW4gdmVjMyBmMCwgY29uc3QgaW4gZmxvYXQgZjkwLCBjb25zdCBpbiBmbG9hdCBkb3RWSCApIHtcXG5cXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtIDUuNTU0NzMgKiBkb3RWSCAtIDYuOTgzMTYgKSAqIGRvdFZIICk7XFxuXFx0cmV0dXJuIGYwICogKCAxLjAgLSBmcmVzbmVsICkgKyAoIGY5MCAqIGZyZXNuZWwgKTtcXG59XFxuZmxvYXQgVl9HR1hfU21pdGhDb3JyZWxhdGVkKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkwsIGNvbnN0IGluIGZsb2F0IGRvdE5WICkge1xcblxcdGZsb2F0IGEyID0gcG93MiggYWxwaGEgKTtcXG5cXHRmbG9hdCBndiA9IGRvdE5MICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROViApICk7XFxuXFx0ZmxvYXQgZ2wgPSBkb3ROViAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xcblxcdHJldHVybiAwLjUgLyBtYXgoIGd2ICsgZ2wsIEVQU0lMT04gKTtcXG59XFxuZmxvYXQgRF9HR1goIGNvbnN0IGluIGZsb2F0IGFscGhhLCBjb25zdCBpbiBmbG9hdCBkb3ROSCApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZGVub20gPSBwb3cyKCBkb3ROSCApICogKCBhMiAtIDEuMCApICsgMS4wO1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogYTIgLyBwb3cyKCBkZW5vbSApO1xcbn1cXG52ZWMzIEJSREZfR0dYKCBjb25zdCBpbiB2ZWMzIGxpZ2h0RGlyLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIGYwLCBjb25zdCBpbiBmbG9hdCBmOTAsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGxpZ2h0RGlyICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdFZIID0gc2F0dXJhdGUoIGRvdCggdmlld0RpciwgaGFsZkRpciApICk7XFxuXFx0dmVjMyBGID0gRl9TY2hsaWNrKCBmMCwgZjkwLCBkb3RWSCApO1xcblxcdGZsb2F0IFYgPSBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGFscGhhLCBkb3ROTCwgZG90TlYgKTtcXG5cXHRmbG9hdCBEID0gRF9HR1goIGFscGhhLCBkb3ROSCApO1xcblxcdHJldHVybiBGICogKCBWICogRCApO1xcbn1cXG52ZWMyIExUQ19VdiggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0laRSA9IDY0LjA7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NDQUxFID0gKCBMVVRfU0laRSAtIDEuMCApIC8gTFVUX1NJWkU7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX0JJQVMgPSAwLjUgLyBMVVRfU0laRTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIE4sIFYgKSApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKCByb3VnaG5lc3MsIHNxcnQoIDEuMCAtIGRvdE5WICkgKTtcXG5cXHR1diA9IHV2ICogTFVUX1NDQUxFICsgTFVUX0JJQVM7XFxuXFx0cmV0dXJuIHV2O1xcbn1cXG5mbG9hdCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgZiApIHtcXG5cXHRmbG9hdCBsID0gbGVuZ3RoKCBmICk7XFxuXFx0cmV0dXJuIG1heCggKCBsICogbCArIGYueiApIC8gKCBsICsgMS4wICksIDAuMCApO1xcbn1cXG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcXG5cXHRmbG9hdCB4ID0gZG90KCB2MSwgdjIgKTtcXG5cXHRmbG9hdCB5ID0gYWJzKCB4ICk7XFxuXFx0ZmxvYXQgYSA9IDAuODU0Mzk4NSArICggMC40OTY1MTU1ICsgMC4wMTQ1MjA2ICogeSApICogeTtcXG5cXHRmbG9hdCBiID0gMy40MTc1OTQwICsgKCA0LjE2MTY3MjQgKyB5ICkgKiB5O1xcblxcdGZsb2F0IHYgPSBhIC8gYjtcXG5cXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICggeCA+IDAuMCApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCBtYXgoIDEuMCAtIHggKiB4LCAxZS03ICkgKSAtIHY7XFxuXFx0cmV0dXJuIGNyb3NzKCB2MSwgdjIgKSAqIHRoZXRhX3NpbnRoZXRhO1xcbn1cXG52ZWMzIExUQ19FdmFsdWF0ZSggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIHZlYzMgUCwgY29uc3QgaW4gbWF0MyBtSW52LCBjb25zdCBpbiB2ZWMzIHJlY3RDb29yZHNbIDQgXSApIHtcXG5cXHR2ZWMzIHYxID0gcmVjdENvb3Jkc1sgMSBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgdjIgPSByZWN0Q29vcmRzWyAzIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcXG5cXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdHZlYzMgVDEsIFQyO1xcblxcdFQxID0gbm9ybWFsaXplKCBWIC0gTiAqIGRvdCggViwgTiApICk7XFxuXFx0VDIgPSAtIGNyb3NzKCBOLCBUMSApO1xcblxcdG1hdDMgbWF0ID0gbUludiAqIHRyYW5zcG9zZU1hdDMoIG1hdDMoIFQxLCBUMiwgTiApICk7XFxuXFx0dmVjMyBjb29yZHNbIDQgXTtcXG5cXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMSBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAxIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDIgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMCBdID0gbm9ybWFsaXplKCBjb29yZHNbIDAgXSApO1xcblxcdGNvb3Jkc1sgMSBdID0gbm9ybWFsaXplKCBjb29yZHNbIDEgXSApO1xcblxcdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xcblxcdGNvb3Jkc1sgMyBdID0gbm9ybWFsaXplKCBjb29yZHNbIDMgXSApO1xcblxcdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDAgXSwgY29vcmRzWyAxIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAxIF0sIGNvb3Jkc1sgMiBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDMgXSwgY29vcmRzWyAwIF0gKTtcXG5cXHRmbG9hdCByZXN1bHQgPSBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIHZlY3RvckZvcm1GYWN0b3IgKTtcXG5cXHRyZXR1cm4gdmVjMyggcmVzdWx0ICk7XFxufVxcbmZsb2F0IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKSB7XFxuXFx0cmV0dXJuIDAuMjU7XFxufVxcbmZsb2F0IERfQmxpbm5QaG9uZyggY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzLCBjb25zdCBpbiBmbG9hdCBkb3ROSCApIHtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqICggc2hpbmluZXNzICogMC41ICsgMS4wICkgKiBwb3coIGRvdE5ILCBzaGluaW5lc3MgKTtcXG59XFxudmVjMyBCUkRGX0JsaW5uUGhvbmcoIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzICkge1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdFZIID0gc2F0dXJhdGUoIGRvdCggdmlld0RpciwgaGFsZkRpciApICk7XFxuXFx0dmVjMyBGID0gRl9TY2hsaWNrKCBzcGVjdWxhckNvbG9yLCAxLjAsIGRvdFZIICk7XFxuXFx0ZmxvYXQgRyA9IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKTtcXG5cXHRmbG9hdCBEID0gRF9CbGlublBob25nKCBzaGluaW5lc3MsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XFxufVxcbiNpZiBkZWZpbmVkKCBVU0VfU0hFRU4gKVxcbmZsb2F0IERfQ2hhcmxpZSggZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBkb3ROSCApIHtcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdGZsb2F0IGludkFscGhhID0gMS4wIC8gYWxwaGE7XFxuXFx0ZmxvYXQgY29zMmggPSBkb3ROSCAqIGRvdE5IO1xcblxcdGZsb2F0IHNpbjJoID0gbWF4KCAxLjAgLSBjb3MyaCwgMC4wMDc4MTI1ICk7XFxuXFx0cmV0dXJuICggMi4wICsgaW52QWxwaGEgKSAqIHBvdyggc2luMmgsIGludkFscGhhICogMC41ICkgLyAoIDIuMCAqIFBJICk7XFxufVxcbmZsb2F0IFZfTmV1YmVsdCggZmxvYXQgZG90TlYsIGZsb2F0IGRvdE5MICkge1xcblxcdHJldHVybiBzYXR1cmF0ZSggMS4wIC8gKCA0LjAgKiAoIGRvdE5MICsgZG90TlYgLSBkb3ROTCAqIGRvdE5WICkgKSApO1xcbn1cXG52ZWMzIEJSREZfU2hlZW4oIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIHZlYzMgc2hlZW5Db2xvciwgY29uc3QgaW4gZmxvYXQgc2hlZW5Sb3VnaG5lc3MgKSB7XFxuXFx0dmVjMyBoYWxmRGlyID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgbGlnaHREaXIgKSApO1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCB2aWV3RGlyICkgKTtcXG5cXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XFxuXFx0ZmxvYXQgRCA9IERfQ2hhcmxpZSggc2hlZW5Sb3VnaG5lc3MsIGRvdE5IICk7XFxuXFx0ZmxvYXQgViA9IFZfTmV1YmVsdCggZG90TlYsIGRvdE5MICk7XFxuXFx0cmV0dXJuIHNoZWVuQ29sb3IgKiAoIEQgKiBWICk7XFxufVxcbiNlbmRpZlwiO1xuXG52YXIgYnVtcG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0JVTVBNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBidW1wTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYnVtcFNjYWxlO1xcblxcdHZlYzIgZEhkeHlfZndkKCkge1xcblxcdFxcdHZlYzIgZFNUZHggPSBkRmR4KCB2VXYgKTtcXG5cXHRcXHR2ZWMyIGRTVGR5ID0gZEZkeSggdlV2ICk7XFxuXFx0XFx0ZmxvYXQgSGxsID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKS54O1xcblxcdFxcdGZsb2F0IGRCeCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHggKS54IC0gSGxsO1xcblxcdFxcdGZsb2F0IGRCeSA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHkgKS54IC0gSGxsO1xcblxcdFxcdHJldHVybiB2ZWMyKCBkQngsIGRCeSApO1xcblxcdH1cXG5cXHR2ZWMzIHBlcnR1cmJOb3JtYWxBcmIoIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIGRIZHh5LCBmbG9hdCBmYWNlRGlyZWN0aW9uICkge1xcblxcdFxcdHZlYzMgdlNpZ21hWCA9IHZlYzMoIGRGZHgoIHN1cmZfcG9zLnggKSwgZEZkeCggc3VyZl9wb3MueSApLCBkRmR4KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZTaWdtYVkgPSB2ZWMzKCBkRmR5KCBzdXJmX3Bvcy54ICksIGRGZHkoIHN1cmZfcG9zLnkgKSwgZEZkeSggc3VyZl9wb3MueiApICk7XFxuXFx0XFx0dmVjMyB2TiA9IHN1cmZfbm9ybTtcXG5cXHRcXHR2ZWMzIFIxID0gY3Jvc3MoIHZTaWdtYVksIHZOICk7XFxuXFx0XFx0dmVjMyBSMiA9IGNyb3NzKCB2TiwgdlNpZ21hWCApO1xcblxcdFxcdGZsb2F0IGZEZXQgPSBkb3QoIHZTaWdtYVgsIFIxICkgKiBmYWNlRGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgdkdyYWQgPSBzaWduKCBmRGV0ICkgKiAoIGRIZHh5LnggKiBSMSArIGRIZHh5LnkgKiBSMiApO1xcblxcdFxcdHJldHVybiBub3JtYWxpemUoIGFicyggZkRldCApICogc3VyZl9ub3JtIC0gdkdyYWQgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQgPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZlYzQgcGxhbmU7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0aWYgKCBkb3QoIHZDbGlwUG9zaXRpb24sIHBsYW5lLnh5eiApID4gcGxhbmUudyApIGRpc2NhcmQ7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2lmIFVOSU9OX0NMSVBQSU5HX1BMQU5FUyA8IE5VTV9DTElQUElOR19QTEFORVNcXG5cXHRcXHRib29sIGNsaXBwZWQgPSB0cnVlO1xcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSA8IE5VTV9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XFxuXFx0XFx0XFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xcblxcdFxcdFxcdGNsaXBwZWQgPSAoIGRvdCggdkNsaXBQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgJiYgY2xpcHBlZDtcXG5cXHRcXHR9XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHRcXHRpZiAoIGNsaXBwZWQgKSBkaXNjYXJkO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZhcnlpbmcgdmVjMyB2Q2xpcFBvc2l0aW9uO1xcblxcdHVuaWZvcm0gdmVjNCBjbGlwcGluZ1BsYW5lc1sgTlVNX0NMSVBQSU5HX1BMQU5FUyBdO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4ID0gXCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcXG5cXHR2YXJ5aW5nIHZlYzMgdkNsaXBQb3NpdGlvbjtcXG4jZW5kaWZcIjtcblxudmFyIGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXggPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZDbGlwUG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxcblxcdGRpZmZ1c2VDb2xvciAqPSB2Q29sb3I7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SIClcXG5cXHRkaWZmdXNlQ29sb3IucmdiICo9IHZDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIGNvbG9yX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxcblxcdHZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SIClcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfcGFyc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxcblxcdHZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0lOU1RBTkNJTkdfQ09MT1IgKVxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl92ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxcblxcdHZDb2xvciA9IHZlYzQoIDEuMCApO1xcbiNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApIHx8IGRlZmluZWQoIFVTRV9JTlNUQU5DSU5HX0NPTE9SIClcXG5cXHR2Q29sb3IgPSB2ZWMzKCAxLjAgKTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NPTE9SXFxuXFx0dkNvbG9yICo9IGNvbG9yO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSU5TVEFOQ0lOR19DT0xPUlxcblxcdHZDb2xvci54eXogKj0gaW5zdGFuY2VDb2xvci54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBjb21tb24gPSBcIiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1ODk3OTNcXG4jZGVmaW5lIFBJMiA2LjI4MzE4NTMwNzE3OTU4NlxcbiNkZWZpbmUgUElfSEFMRiAxLjU3MDc5NjMyNjc5NDg5NjZcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxODM3OTA3XFxuI2RlZmluZSBSRUNJUFJPQ0FMX1BJMiAwLjE1OTE1NDk0MzA5MTg5NTM1XFxuI2RlZmluZSBFUFNJTE9OIDFlLTZcXG4jaWZuZGVmIHNhdHVyYXRlXFxuI2RlZmluZSBzYXR1cmF0ZSggYSApIGNsYW1wKCBhLCAwLjAsIDEuMCApXFxuI2VuZGlmXFxuI2RlZmluZSB3aGl0ZUNvbXBsZW1lbnQoIGEgKSAoIDEuMCAtIHNhdHVyYXRlKCBhICkgKVxcbmZsb2F0IHBvdzIoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4Kng7IH1cXG5mbG9hdCBwb3czKCBjb25zdCBpbiBmbG9hdCB4ICkgeyByZXR1cm4geCp4Kng7IH1cXG5mbG9hdCBwb3c0KCBjb25zdCBpbiBmbG9hdCB4ICkgeyBmbG9hdCB4MiA9IHgqeDsgcmV0dXJuIHgyKngyOyB9XFxuZmxvYXQgbWF4MyggY29uc3QgaW4gdmVjMyB2ICkgeyByZXR1cm4gbWF4KCBtYXgoIHYueCwgdi55ICksIHYueiApOyB9XFxuZmxvYXQgYXZlcmFnZSggY29uc3QgaW4gdmVjMyBjb2xvciApIHsgcmV0dXJuIGRvdCggY29sb3IsIHZlYzMoIDAuMzMzMyApICk7IH1cXG5oaWdocCBmbG9hdCByYW5kKCBjb25zdCBpbiB2ZWMyIHV2ICkge1xcblxcdGNvbnN0IGhpZ2hwIGZsb2F0IGEgPSAxMi45ODk4LCBiID0gNzguMjMzLCBjID0gNDM3NTguNTQ1MztcXG5cXHRoaWdocCBmbG9hdCBkdCA9IGRvdCggdXYueHksIHZlYzIoIGEsYiApICksIHNuID0gbW9kKCBkdCwgUEkgKTtcXG5cXHRyZXR1cm4gZnJhY3QoIHNpbiggc24gKSAqIGMgKTtcXG59XFxuI2lmZGVmIEhJR0hfUFJFQ0lTSU9OXFxuXFx0ZmxvYXQgcHJlY2lzaW9uU2FmZUxlbmd0aCggdmVjMyB2ICkgeyByZXR1cm4gbGVuZ3RoKCB2ICk7IH1cXG4jZWxzZVxcblxcdGZsb2F0IHByZWNpc2lvblNhZmVMZW5ndGgoIHZlYzMgdiApIHtcXG5cXHRcXHRmbG9hdCBtYXhDb21wb25lbnQgPSBtYXgzKCBhYnMoIHYgKSApO1xcblxcdFxcdHJldHVybiBsZW5ndGgoIHYgLyBtYXhDb21wb25lbnQgKSAqIG1heENvbXBvbmVudDtcXG5cXHR9XFxuI2VuZGlmXFxuc3RydWN0IEluY2lkZW50TGlnaHQge1xcblxcdHZlYzMgY29sb3I7XFxuXFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0Ym9vbCB2aXNpYmxlO1xcbn07XFxuc3RydWN0IFJlZmxlY3RlZExpZ2h0IHtcXG5cXHR2ZWMzIGRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyBkaXJlY3RTcGVjdWxhcjtcXG5cXHR2ZWMzIGluZGlyZWN0RGlmZnVzZTtcXG5cXHR2ZWMzIGluZGlyZWN0U3BlY3VsYXI7XFxufTtcXG5zdHJ1Y3QgR2VvbWV0cmljQ29udGV4dCB7XFxuXFx0dmVjMyBwb3NpdGlvbjtcXG5cXHR2ZWMzIG5vcm1hbDtcXG5cXHR2ZWMzIHZpZXdEaXI7XFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHR2ZWMzIGNsZWFyY29hdE5vcm1hbDtcXG4jZW5kaWZcXG59O1xcbnZlYzMgdHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0KCBkaXIsIDAuMCApICkueHl6ICk7XFxufVxcbnZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggdmVjNCggZGlyLCAwLjAgKSAqIG1hdHJpeCApLnh5eiApO1xcbn1cXG5tYXQzIHRyYW5zcG9zZU1hdDMoIGNvbnN0IGluIG1hdDMgbSApIHtcXG5cXHRtYXQzIHRtcDtcXG5cXHR0bXBbIDAgXSA9IHZlYzMoIG1bIDAgXS54LCBtWyAxIF0ueCwgbVsgMiBdLnggKTtcXG5cXHR0bXBbIDEgXSA9IHZlYzMoIG1bIDAgXS55LCBtWyAxIF0ueSwgbVsgMiBdLnkgKTtcXG5cXHR0bXBbIDIgXSA9IHZlYzMoIG1bIDAgXS56LCBtWyAxIF0ueiwgbVsgMiBdLnogKTtcXG5cXHRyZXR1cm4gdG1wO1xcbn1cXG5mbG9hdCBsaW5lYXJUb1JlbGF0aXZlTHVtaW5hbmNlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkge1xcblxcdHZlYzMgd2VpZ2h0cyA9IHZlYzMoIDAuMjEyNiwgMC43MTUyLCAwLjA3MjIgKTtcXG5cXHRyZXR1cm4gZG90KCB3ZWlnaHRzLCBjb2xvci5yZ2IgKTtcXG59XFxuYm9vbCBpc1BlcnNwZWN0aXZlTWF0cml4KCBtYXQ0IG0gKSB7XFxuXFx0cmV0dXJuIG1bIDIgXVsgMyBdID09IC0gMS4wO1xcbn1cXG52ZWMyIGVxdWlyZWN0VXYoIGluIHZlYzMgZGlyICkge1xcblxcdGZsb2F0IHUgPSBhdGFuKCBkaXIueiwgZGlyLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdGZsb2F0IHYgPSBhc2luKCBjbGFtcCggZGlyLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRyZXR1cm4gdmVjMiggdSwgdiApO1xcbn1cIjtcblxudmFyIGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudCA9IFwiI2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcXG5cXHQjZGVmaW5lIGN1YmVVVl9taW5NaXBMZXZlbCA0LjBcXG5cXHQjZGVmaW5lIGN1YmVVVl9taW5UaWxlU2l6ZSAxNi4wXFxuXFx0ZmxvYXQgZ2V0RmFjZSggdmVjMyBkaXJlY3Rpb24gKSB7XFxuXFx0XFx0dmVjMyBhYnNEaXJlY3Rpb24gPSBhYnMoIGRpcmVjdGlvbiApO1xcblxcdFxcdGZsb2F0IGZhY2UgPSAtIDEuMDtcXG5cXHRcXHRpZiAoIGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnogKSB7XFxuXFx0XFx0XFx0aWYgKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi55IClcXG5cXHRcXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnggPiAwLjAgPyAwLjAgOiAzLjA7XFxuXFx0XFx0XFx0ZWxzZVxcblxcdFxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEuMCA6IDQuMDtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGlmICggYWJzRGlyZWN0aW9uLnogPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi56ID4gMC4wID8gMi4wIDogNS4wO1xcblxcdFxcdFxcdGVsc2VcXG5cXHRcXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxLjAgOiA0LjA7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiBmYWNlO1xcblxcdH1cXG5cXHR2ZWMyIGdldFVWKCB2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgZmFjZSApIHtcXG5cXHRcXHR2ZWMyIHV2O1xcblxcdFxcdGlmICggZmFjZSA9PSAwLjAgKSB7XFxuXFx0XFx0XFx0dXYgPSB2ZWMyKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnggKTtcXG5cXHRcXHR9IGVsc2UgaWYgKCBmYWNlID09IDEuMCApIHtcXG5cXHRcXHRcXHR1diA9IHZlYzIoIC0gZGlyZWN0aW9uLngsIC0gZGlyZWN0aW9uLnogKSAvIGFicyggZGlyZWN0aW9uLnkgKTtcXG5cXHRcXHR9IGVsc2UgaWYgKCBmYWNlID09IDIuMCApIHtcXG5cXHRcXHRcXHR1diA9IHZlYzIoIC0gZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55ICkgLyBhYnMoIGRpcmVjdGlvbi56ICk7XFxuXFx0XFx0fSBlbHNlIGlmICggZmFjZSA9PSAzLjAgKSB7XFxuXFx0XFx0XFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueCApO1xcblxcdFxcdH0gZWxzZSBpZiAoIGZhY2UgPT0gNC4wICkge1xcblxcdFxcdFxcdHV2ID0gdmVjMiggLSBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnogKSAvIGFicyggZGlyZWN0aW9uLnkgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHV2ID0gdmVjMiggZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55ICkgLyBhYnMoIGRpcmVjdGlvbi56ICk7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiAwLjUgKiAoIHV2ICsgMS4wICk7XFxuXFx0fVxcblxcdHZlYzMgYmlsaW5lYXJDdWJlVVYoIHNhbXBsZXIyRCBlbnZNYXAsIHZlYzMgZGlyZWN0aW9uLCBmbG9hdCBtaXBJbnQgKSB7XFxuXFx0XFx0ZmxvYXQgZmFjZSA9IGdldEZhY2UoIGRpcmVjdGlvbiApO1xcblxcdFxcdGZsb2F0IGZpbHRlckludCA9IG1heCggY3ViZVVWX21pbk1pcExldmVsIC0gbWlwSW50LCAwLjAgKTtcXG5cXHRcXHRtaXBJbnQgPSBtYXgoIG1pcEludCwgY3ViZVVWX21pbk1pcExldmVsICk7XFxuXFx0XFx0ZmxvYXQgZmFjZVNpemUgPSBleHAyKCBtaXBJbnQgKTtcXG5cXHRcXHR2ZWMyIHV2ID0gZ2V0VVYoIGRpcmVjdGlvbiwgZmFjZSApICogKCBmYWNlU2l6ZSAtIDEuMCApICsgMC41O1xcblxcdFxcdGlmICggZmFjZSA+IDIuMCApIHtcXG5cXHRcXHRcXHR1di55ICs9IGZhY2VTaXplO1xcblxcdFxcdFxcdGZhY2UgLT0gMy4wO1xcblxcdFxcdH1cXG5cXHRcXHR1di54ICs9IGZhY2UgKiBmYWNlU2l6ZTtcXG5cXHRcXHR1di54ICs9IGZpbHRlckludCAqIDMuMCAqIGN1YmVVVl9taW5UaWxlU2l6ZTtcXG5cXHRcXHR1di55ICs9IDQuMCAqICggZXhwMiggQ1VCRVVWX01BWF9NSVAgKSAtIGZhY2VTaXplICk7XFxuXFx0XFx0dXYueCAqPSBDVUJFVVZfVEVYRUxfV0lEVEg7XFxuXFx0XFx0dXYueSAqPSBDVUJFVVZfVEVYRUxfSEVJR0hUO1xcblxcdFxcdCNpZmRlZiB0ZXh0dXJlMkRHcmFkRVhUXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyREdyYWRFWFQoIGVudk1hcCwgdXYsIHZlYzIoIDAuMCApLCB2ZWMyKCAwLjAgKSApLnJnYjtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkQoIGVudk1hcCwgdXYgKS5yZ2I7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNkZWZpbmUgcjAgMS4wXFxuXFx0I2RlZmluZSB2MCAwLjMzOVxcblxcdCNkZWZpbmUgbTAgLSAyLjBcXG5cXHQjZGVmaW5lIHIxIDAuOFxcblxcdCNkZWZpbmUgdjEgMC4yNzZcXG5cXHQjZGVmaW5lIG0xIC0gMS4wXFxuXFx0I2RlZmluZSByNCAwLjRcXG5cXHQjZGVmaW5lIHY0IDAuMDQ2XFxuXFx0I2RlZmluZSBtNCAyLjBcXG5cXHQjZGVmaW5lIHI1IDAuMzA1XFxuXFx0I2RlZmluZSB2NSAwLjAxNlxcblxcdCNkZWZpbmUgbTUgMy4wXFxuXFx0I2RlZmluZSByNiAwLjIxXFxuXFx0I2RlZmluZSB2NiAwLjAwMzhcXG5cXHQjZGVmaW5lIG02IDQuMFxcblxcdGZsb2F0IHJvdWdobmVzc1RvTWlwKCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0XFx0ZmxvYXQgbWlwID0gMC4wO1xcblxcdFxcdGlmICggcm91Z2huZXNzID49IHIxICkge1xcblxcdFxcdFxcdG1pcCA9ICggcjAgLSByb3VnaG5lc3MgKSAqICggbTEgLSBtMCApIC8gKCByMCAtIHIxICkgKyBtMDtcXG5cXHRcXHR9IGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gcjQgKSB7XFxuXFx0XFx0XFx0bWlwID0gKCByMSAtIHJvdWdobmVzcyApICogKCBtNCAtIG0xICkgLyAoIHIxIC0gcjQgKSArIG0xO1xcblxcdFxcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSByNSApIHtcXG5cXHRcXHRcXHRtaXAgPSAoIHI0IC0gcm91Z2huZXNzICkgKiAoIG01IC0gbTQgKSAvICggcjQgLSByNSApICsgbTQ7XFxuXFx0XFx0fSBlbHNlIGlmICggcm91Z2huZXNzID49IHI2ICkge1xcblxcdFxcdFxcdG1pcCA9ICggcjUgLSByb3VnaG5lc3MgKSAqICggbTYgLSBtNSApIC8gKCByNSAtIHI2ICkgKyBtNTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdG1pcCA9IC0gMi4wICogbG9nMiggMS4xNiAqIHJvdWdobmVzcyApO1xcdFxcdH1cXG5cXHRcXHRyZXR1cm4gbWlwO1xcblxcdH1cXG5cXHR2ZWM0IHRleHR1cmVDdWJlVVYoIHNhbXBsZXIyRCBlbnZNYXAsIHZlYzMgc2FtcGxlRGlyLCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0XFx0ZmxvYXQgbWlwID0gY2xhbXAoIHJvdWdobmVzc1RvTWlwKCByb3VnaG5lc3MgKSwgbTAsIENVQkVVVl9NQVhfTUlQICk7XFxuXFx0XFx0ZmxvYXQgbWlwRiA9IGZyYWN0KCBtaXAgKTtcXG5cXHRcXHRmbG9hdCBtaXBJbnQgPSBmbG9vciggbWlwICk7XFxuXFx0XFx0dmVjMyBjb2xvcjAgPSBiaWxpbmVhckN1YmVVViggZW52TWFwLCBzYW1wbGVEaXIsIG1pcEludCApO1xcblxcdFxcdGlmICggbWlwRiA9PSAwLjAgKSB7XFxuXFx0XFx0XFx0cmV0dXJuIHZlYzQoIGNvbG9yMCwgMS4wICk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHR2ZWMzIGNvbG9yMSA9IGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpciwgbWlwSW50ICsgMS4wICk7XFxuXFx0XFx0XFx0cmV0dXJuIHZlYzQoIG1peCggY29sb3IwLCBjb2xvcjEsIG1pcEYgKSwgMS4wICk7XFxuXFx0XFx0fVxcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGRlZmF1bHRub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIHRyYW5zZm9ybWVkTm9ybWFsID0gb2JqZWN0Tm9ybWFsO1xcbiNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xcblxcdG1hdDMgbSA9IG1hdDMoIGluc3RhbmNlTWF0cml4ICk7XFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgLz0gdmVjMyggZG90KCBtWyAwIF0sIG1bIDAgXSApLCBkb3QoIG1bIDEgXSwgbVsgMSBdICksIGRvdCggbVsgMiBdLCBtWyAyIF0gKSApO1xcblxcdHRyYW5zZm9ybWVkTm9ybWFsID0gbSAqIHRyYW5zZm9ybWVkTm9ybWFsO1xcbiNlbmRpZlxcbnRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsTWF0cml4ICogdHJhbnNmb3JtZWROb3JtYWw7XFxuI2lmZGVmIEZMSVBfU0lERURcXG5cXHR0cmFuc2Zvcm1lZE5vcm1hbCA9IC0gdHJhbnNmb3JtZWROb3JtYWw7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0dmVjMyB0cmFuc2Zvcm1lZFRhbmdlbnQgPSAoIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIG9iamVjdFRhbmdlbnQsIDAuMCApICkueHl6O1xcblxcdCNpZmRlZiBGTElQX1NJREVEXFxuXFx0XFx0dHJhbnNmb3JtZWRUYW5nZW50ID0gLSB0cmFuc2Zvcm1lZFRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlzcGxhY2VtZW50TWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50U2NhbGU7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRCaWFzO1xcbiNlbmRpZlwiO1xuXG52YXIgZGlzcGxhY2VtZW50bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHR0cmFuc2Zvcm1lZCArPSBub3JtYWxpemUoIG9iamVjdE5vcm1hbCApICogKCB0ZXh0dXJlMkQoIGRpc3BsYWNlbWVudE1hcCwgdlV2ICkueCAqIGRpc3BsYWNlbWVudFNjYWxlICsgZGlzcGxhY2VtZW50QmlhcyApO1xcbiNlbmRpZlwiO1xuXG52YXIgZW1pc3NpdmVtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR2ZWM0IGVtaXNzaXZlQ29sb3IgPSB0ZXh0dXJlMkQoIGVtaXNzaXZlTWFwLCB2VXYgKTtcXG5cXHR0b3RhbEVtaXNzaXZlUmFkaWFuY2UgKj0gZW1pc3NpdmVDb2xvci5yZ2I7XFxuI2VuZGlmXCI7XG5cbnZhciBlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZW1pc3NpdmVNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBlbmNvZGluZ3NfZnJhZ21lbnQgPSBcImdsX0ZyYWdDb2xvciA9IGxpbmVhclRvT3V0cHV0VGV4ZWwoIGdsX0ZyYWdDb2xvciApO1wiO1xuXG52YXIgZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQgPSBcInZlYzQgTGluZWFyVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZhbHVlO1xcbn1cXG52ZWM0IExpbmVhclRvc1JHQiggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiwgdmVjMyggMC40MTY2NiApICkgKiAxLjA1NSAtIHZlYzMoIDAuMDU1ICksIHZhbHVlLnJnYiAqIDEyLjkyLCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzMoIDAuMDAzMTMwOCApICkgKSApLCB2YWx1ZS5hICk7XFxufVwiO1xuXG52YXIgZW52bWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvRnJhZztcXG5cXHRcXHRpZiAoIGlzT3J0aG9ncmFwaGljICkge1xcblxcdFxcdFxcdGNhbWVyYVRvRnJhZyA9IG5vcm1hbGl6ZSggdmVjMyggLSB2aWV3TWF0cml4WyAwIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAxIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAyIF1bIDIgXSApICk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRjYW1lcmFUb0ZyYWcgPSBub3JtYWxpemUoIHZXb3JsZFBvc2l0aW9uIC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR9XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggY2FtZXJhVG9GcmFnLCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggY2FtZXJhVG9GcmFnLCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSB2UmVmbGVjdDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCB2ZWMzKCBmbGlwRW52TWFwICogcmVmbGVjdFZlYy54LCByZWZsZWN0VmVjLnl6ICkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCByZWZsZWN0VmVjLCAwLjAgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB2ZWM0KCAwLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgb3V0Z29pbmdMaWdodCAqIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9CTEVORElOR19NSVggKVxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9CTEVORElOR19BREQgKVxcblxcdFxcdG91dGdvaW5nTGlnaHQgKz0gZW52Q29sb3IueHl6ICogc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHR1bmlmb3JtIGZsb2F0IGVudk1hcEludGVuc2l0eTtcXG5cXHR1bmlmb3JtIGZsb2F0IGZsaXBFbnZNYXA7XFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXJDdWJlIGVudk1hcDtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcXG5cXHQjZW5kaWZcXG5cXHRcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0I2RlZmluZSBFTlZfV09STERQT1NcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WX1dPUkxEUE9TXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcdCNlbHNlXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHQjZGVmaW5lIEVOVl9XT1JMRFBPU1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHRcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyBjYW1lcmFUb1ZlcnRleDtcXG5cXHRcXHRpZiAoIGlzT3J0aG9ncmFwaGljICkge1xcblxcdFxcdFxcdGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB2ZWMzKCAtIHZpZXdNYXRyaXhbIDAgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDEgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDIgXVsgMiBdICkgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB3b3JsZFBvc2l0aW9uLnh5eiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFx0XFx0fVxcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZSZWZsZWN0ID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGZvZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dkZvZ0RlcHRoID0gLSBtdlBvc2l0aW9uLno7XFxuI2VuZGlmXCI7XG5cbnZhciBmb2dfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dmFyeWluZyBmbG9hdCB2Rm9nRGVwdGg7XFxuI2VuZGlmXCI7XG5cbnZhciBmb2dfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gMS4wIC0gZXhwKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogdkZvZ0RlcHRoICogdkZvZ0RlcHRoICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSBzbW9vdGhzdGVwKCBmb2dOZWFyLCBmb2dGYXIsIHZGb2dEZXB0aCApO1xcblxcdCNlbmRpZlxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBtaXgoIGdsX0ZyYWdDb2xvci5yZ2IsIGZvZ0NvbG9yLCBmb2dGYWN0b3IgKTtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdHVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGb2dEZXB0aDtcXG5cXHQjaWZkZWYgRk9HX0VYUDJcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0RlbnNpdHk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ05lYXI7XFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dGYXI7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0dSQURJRU5UTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZ3JhZGllbnRNYXA7XFxuI2VuZGlmXFxudmVjMyBnZXRHcmFkaWVudElycmFkaWFuY2UoIHZlYzMgbm9ybWFsLCB2ZWMzIGxpZ2h0RGlyZWN0aW9uICkge1xcblxcdGZsb2F0IGRvdE5MID0gZG90KCBub3JtYWwsIGxpZ2h0RGlyZWN0aW9uICk7XFxuXFx0dmVjMiBjb29yZCA9IHZlYzIoIGRvdE5MICogMC41ICsgMC41LCAwLjAgKTtcXG5cXHQjaWZkZWYgVVNFX0dSQURJRU5UTUFQXFxuXFx0XFx0cmV0dXJuIHZlYzMoIHRleHR1cmUyRCggZ3JhZGllbnRNYXAsIGNvb3JkICkuciApO1xcblxcdCNlbHNlXFxuXFx0XFx0cmV0dXJuICggY29vcmQueCA8IDAuNyApID8gdmVjMyggMC43ICkgOiB2ZWMzKCAxLjAgKTtcXG5cXHQjZW5kaWZcXG59XCI7XG5cbnZhciBsaWdodG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHZlYzQgbGlnaHRNYXBUZXhlbCA9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKTtcXG5cXHR2ZWMzIGxpZ2h0TWFwSXJyYWRpYW5jZSA9IGxpZ2h0TWFwVGV4ZWwucmdiICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGxpZ2h0TWFwSXJyYWRpYW5jZTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2xhbWJlcnRfdmVydGV4ID0gXCJ2ZWMzIGRpZmZ1c2UgPSB2ZWMzKCAxLjAgKTtcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gbXZQb3NpdGlvbi54eXo7XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSAoIGlzT3J0aG9ncmFwaGljICkgPyB2ZWMzKCAwLCAwLCAxICkgOiBub3JtYWxpemUoIC1tdlBvc2l0aW9uLnh5eiApO1xcbkdlb21ldHJpY0NvbnRleHQgYmFja0dlb21ldHJ5O1xcbmJhY2tHZW9tZXRyeS5wb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcbmJhY2tHZW9tZXRyeS5ub3JtYWwgPSAtZ2VvbWV0cnkubm9ybWFsO1xcbmJhY2tHZW9tZXRyeS52aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG52TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xcbnZJbmRpcmVjdEZyb250ID0gdmVjMyggMC4wICk7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZMaWdodEJhY2sgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2SW5kaXJlY3RCYWNrID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG5mbG9hdCBkb3ROTDtcXG52ZWMzIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG52SW5kaXJlY3RGcm9udCArPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcbnZJbmRpcmVjdEZyb250ICs9IGdldExpZ2h0UHJvYmVJcnJhZGlhbmNlKCBsaWdodFByb2JlLCBnZW9tZXRyeS5ub3JtYWwgKTtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dkluZGlyZWN0QmFjayArPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdHZJbmRpcmVjdEJhY2sgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGJhY2tHZW9tZXRyeS5ub3JtYWwgKTtcXG4jZW5kaWZcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRQb2ludExpZ2h0SW5mbyggcG9pbnRMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC0gZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0U3BvdExpZ2h0SW5mbyggc3BvdExpZ2h0c1sgaSBdLCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHRkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2UgPSBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLSBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0RGlyZWN0aW9uYWxMaWdodEluZm8oIGRpcmVjdGlvbmFsTGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdFxcdHZMaWdodEZyb250ICs9IHNhdHVyYXRlKCBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IHNhdHVyYXRlKCAtIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZJbmRpcmVjdEZyb250ICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkubm9ybWFsICk7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZJbmRpcmVjdEJhY2sgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBiYWNrR2VvbWV0cnkubm9ybWFsICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfcGFyc19iZWdpbiA9IFwidW5pZm9ybSBib29sIHJlY2VpdmVTaGFkb3c7XFxudW5pZm9ybSB2ZWMzIGFtYmllbnRMaWdodENvbG9yO1xcbnVuaWZvcm0gdmVjMyBsaWdodFByb2JlWyA5IF07XFxudmVjMyBzaEdldElycmFkaWFuY2VBdCggaW4gdmVjMyBub3JtYWwsIGluIHZlYzMgc2hDb2VmZmljaWVudHNbIDkgXSApIHtcXG5cXHRmbG9hdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xcblxcdHZlYzMgcmVzdWx0ID0gc2hDb2VmZmljaWVudHNbIDAgXSAqIDAuODg2MjI3O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMSBdICogMi4wICogMC41MTE2NjQgKiB5O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMiBdICogMi4wICogMC41MTE2NjQgKiB6O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMyBdICogMi4wICogMC41MTE2NjQgKiB4O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNCBdICogMi4wICogMC40MjkwNDMgKiB4ICogeTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDUgXSAqIDIuMCAqIDAuNDI5MDQzICogeSAqIHo7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA2IF0gKiAoIDAuNzQzMTI1ICogeiAqIHogLSAwLjI0NzcwOCApO1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNyBdICogMi4wICogMC40MjkwNDMgKiB4ICogejtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDggXSAqIDAuNDI5MDQzICogKCB4ICogeCAtIHkgKiB5ICk7XFxuXFx0cmV0dXJuIHJlc3VsdDtcXG59XFxudmVjMyBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBsaWdodFByb2JlWyA5IF0sIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBzaEdldElycmFkaWFuY2VBdCggd29ybGROb3JtYWwsIGxpZ2h0UHJvYmUgKTtcXG5cXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG59XFxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdHJldHVybiBpcnJhZGlhbmNlO1xcbn1cXG5mbG9hdCBnZXREaXN0YW5jZUF0dGVudWF0aW9uKCBjb25zdCBpbiBmbG9hdCBsaWdodERpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBjdXRvZmZEaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgZGVjYXlFeHBvbmVudCApIHtcXG5cXHQjaWYgZGVmaW5lZCAoIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMgKVxcblxcdFxcdGZsb2F0IGRpc3RhbmNlRmFsbG9mZiA9IDEuMCAvIG1heCggcG93KCBsaWdodERpc3RhbmNlLCBkZWNheUV4cG9uZW50ICksIDAuMDEgKTtcXG5cXHRcXHRpZiAoIGN1dG9mZkRpc3RhbmNlID4gMC4wICkge1xcblxcdFxcdFxcdGRpc3RhbmNlRmFsbG9mZiAqPSBwb3cyKCBzYXR1cmF0ZSggMS4wIC0gcG93NCggbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICkgKSApO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gZGlzdGFuY2VGYWxsb2ZmO1xcblxcdCNlbHNlXFxuXFx0XFx0aWYgKCBjdXRvZmZEaXN0YW5jZSA+IDAuMCAmJiBkZWNheUV4cG9uZW50ID4gMC4wICkge1xcblxcdFxcdFxcdHJldHVybiBwb3coIHNhdHVyYXRlKCAtIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSArIDEuMCApLCBkZWNheUV4cG9uZW50ICk7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiAxLjA7XFxuXFx0I2VuZGlmXFxufVxcbmZsb2F0IGdldFNwb3RBdHRlbnVhdGlvbiggY29uc3QgaW4gZmxvYXQgY29uZUNvc2luZSwgY29uc3QgaW4gZmxvYXQgcGVudW1icmFDb3NpbmUsIGNvbnN0IGluIGZsb2F0IGFuZ2xlQ29zaW5lICkge1xcblxcdHJldHVybiBzbW9vdGhzdGVwKCBjb25lQ29zaW5lLCBwZW51bWJyYUNvc2luZSwgYW5nbGVDb3NpbmUgKTtcXG59XFxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0IHtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdH07XFxuXFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHRzWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0RGlyZWN0aW9uYWxMaWdodEluZm8oIGNvbnN0IGluIERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XFxuXFx0XFx0bGlnaHQuY29sb3IgPSBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yO1xcblxcdFxcdGxpZ2h0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uO1xcblxcdFxcdGxpZ2h0LnZpc2libGUgPSB0cnVlO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgUG9pbnRMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdH07XFxuXFx0dW5pZm9ybSBQb2ludExpZ2h0IHBvaW50TGlnaHRzWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0dm9pZCBnZXRQb2ludExpZ2h0SW5mbyggY29uc3QgaW4gUG9pbnRMaWdodCBwb2ludExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBvdXQgSW5jaWRlbnRMaWdodCBsaWdodCApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBwb2ludExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0bGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xcblxcdFxcdGxpZ2h0LmNvbG9yID0gcG9pbnRMaWdodC5jb2xvcjtcXG5cXHRcXHRsaWdodC5jb2xvciAqPSBnZXREaXN0YW5jZUF0dGVudWF0aW9uKCBsaWdodERpc3RhbmNlLCBwb2ludExpZ2h0LmRpc3RhbmNlLCBwb2ludExpZ2h0LmRlY2F5ICk7XFxuXFx0XFx0bGlnaHQudmlzaWJsZSA9ICggbGlnaHQuY29sb3IgIT0gdmVjMyggMC4wICkgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgU3BvdExpZ2h0IHtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2U7XFxuXFx0XFx0ZmxvYXQgZGVjYXk7XFxuXFx0XFx0ZmxvYXQgY29uZUNvcztcXG5cXHRcXHRmbG9hdCBwZW51bWJyYUNvcztcXG5cXHR9O1xcblxcdHVuaWZvcm0gU3BvdExpZ2h0IHNwb3RMaWdodHNbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0U3BvdExpZ2h0SW5mbyggY29uc3QgaW4gU3BvdExpZ2h0IHNwb3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gc3BvdExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0bGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGxpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGZsb2F0IHNwb3RBdHRlbnVhdGlvbiA9IGdldFNwb3RBdHRlbnVhdGlvbiggc3BvdExpZ2h0LmNvbmVDb3MsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgYW5nbGVDb3MgKTtcXG5cXHRcXHRpZiAoIHNwb3RBdHRlbnVhdGlvbiA+IDAuMCApIHtcXG5cXHRcXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0XFx0bGlnaHQuY29sb3IgPSBzcG90TGlnaHQuY29sb3IgKiBzcG90QXR0ZW51YXRpb247XFxuXFx0XFx0XFx0bGlnaHQuY29sb3IgKj0gZ2V0RGlzdGFuY2VBdHRlbnVhdGlvbiggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRcXHRsaWdodC52aXNpYmxlID0gKCBsaWdodC5jb2xvciAhPSB2ZWMzKCAwLjAgKSApO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0bGlnaHQuY29sb3IgPSB2ZWMzKCAwLjAgKTtcXG5cXHRcXHRcXHRsaWdodC52aXNpYmxlID0gZmFsc2U7XFxuXFx0XFx0fVxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFJlY3RBcmVhTGlnaHQge1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGhhbGZXaWR0aDtcXG5cXHRcXHR2ZWMzIGhhbGZIZWlnaHQ7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsdGNfMTtcXHR1bmlmb3JtIHNhbXBsZXIyRCBsdGNfMjtcXG5cXHR1bmlmb3JtIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodHNbIE5VTV9SRUNUX0FSRUFfTElHSFRTIF07XFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgSGVtaXNwaGVyZUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIHNreUNvbG9yO1xcblxcdFxcdHZlYzMgZ3JvdW5kQ29sb3I7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIEhlbWlzcGhlcmVMaWdodCBoZW1pc3BoZXJlTGlnaHRzWyBOVU1fSEVNSV9MSUdIVFMgXTtcXG5cXHR2ZWMzIGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIEhlbWlzcGhlcmVMaWdodCBoZW1pTGlnaHQsIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBub3JtYWwsIGhlbWlMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdE5MICsgMC41O1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IG1peCggaGVtaUxpZ2h0Lmdyb3VuZENvbG9yLCBoZW1pTGlnaHQuc2t5Q29sb3IsIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFx0XFx0cmV0dXJuIGlycmFkaWFuY2U7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQIClcXG5cXHR2ZWMzIGdldElCTElycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdFxcdCNpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgd29ybGROb3JtYWwsIDEuMCApO1xcblxcdFxcdFxcdHJldHVybiBQSSAqIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB2ZWMzKCAwLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuXFx0dmVjMyBnZXRJQkxSYWRpYW5jZSggY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdFxcdCNpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCAtIHZpZXdEaXIsIG5vcm1hbCApO1xcblxcdFxcdFxcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIG1peCggcmVmbGVjdFZlYywgbm9ybWFsLCByb3VnaG5lc3MgKiByb3VnaG5lc3MpICk7XFxuXFx0XFx0XFx0cmVmbGVjdFZlYyA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHJlZmxlY3RWZWMsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCByZWZsZWN0VmVjLCByb3VnaG5lc3MgKTtcXG5cXHRcXHRcXHRyZXR1cm4gZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c190b29uX2ZyYWdtZW50ID0gXCJUb29uTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcIjtcblxudmFyIGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbnN0cnVjdCBUb29uTWF0ZXJpYWwge1xcblxcdHZlYzMgZGlmZnVzZUNvbG9yO1xcbn07XFxudm9pZCBSRV9EaXJlY3RfVG9vbiggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gVG9vbk1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRHcmFkaWVudElycmFkaWFuY2UoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9Ub29uKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFRvb25NYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9Ub29uXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfVG9vblxcbiNkZWZpbmUgTWF0ZXJpYWxfTGlnaHRQcm9iZUxPRCggbWF0ZXJpYWwgKVxcdCgwKVwiO1xuXG52YXIgbGlnaHRzX3Bob25nX2ZyYWdtZW50ID0gXCJCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5tYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gc3BlY3VsYXI7XFxubWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgPSBzaGluaW5lc3M7XFxubWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aCA9IHNwZWN1bGFyU3RyZW5ndGg7XCI7XG5cbnZhciBsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCA9IFwidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuc3RydWN0IEJsaW5uUGhvbmdNYXRlcmlhbCB7XFxuXFx0dmVjMyBkaWZmdXNlQ29sb3I7XFxuXFx0dmVjMyBzcGVjdWxhckNvbG9yO1xcblxcdGZsb2F0IHNwZWN1bGFyU2hpbmluZXNzO1xcblxcdGZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XFxufTtcXG52b2lkIFJFX0RpcmVjdF9CbGlublBob25nKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9CbGlublBob25nKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmcoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X0JsaW5uUGhvbmdcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nXFxuI2RlZmluZSBNYXRlcmlhbF9MaWdodFByb2JlTE9EKCBtYXRlcmlhbCApXFx0KDApXCI7XG5cbnZhciBsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQgPSBcIlBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYiAqICggMS4wIC0gbWV0YWxuZXNzRmFjdG9yICk7XFxudmVjMyBkeHkgPSBtYXgoIGFicyggZEZkeCggZ2VvbWV0cnlOb3JtYWwgKSApLCBhYnMoIGRGZHkoIGdlb21ldHJ5Tm9ybWFsICkgKSApO1xcbmZsb2F0IGdlb21ldHJ5Um91Z2huZXNzID0gbWF4KCBtYXgoIGR4eS54LCBkeHkueSApLCBkeHkueiApO1xcbm1hdGVyaWFsLnJvdWdobmVzcyA9IG1heCggcm91Z2huZXNzRmFjdG9yLCAwLjA1MjUgKTttYXRlcmlhbC5yb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XFxubWF0ZXJpYWwucm91Z2huZXNzID0gbWluKCBtYXRlcmlhbC5yb3VnaG5lc3MsIDEuMCApO1xcbiNpZmRlZiBJT1JcXG5cXHQjaWZkZWYgU1BFQ1VMQVJcXG5cXHRcXHRmbG9hdCBzcGVjdWxhckludGVuc2l0eUZhY3RvciA9IHNwZWN1bGFySW50ZW5zaXR5O1xcblxcdFxcdHZlYzMgc3BlY3VsYXJDb2xvckZhY3RvciA9IHNwZWN1bGFyQ29sb3I7XFxuXFx0XFx0I2lmZGVmIFVTRV9TUEVDVUxBUklOVEVOU0lUWU1BUFxcblxcdFxcdFxcdHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yICo9IHRleHR1cmUyRCggc3BlY3VsYXJJbnRlbnNpdHlNYXAsIHZVdiApLmE7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0I2lmZGVmIFVTRV9TUEVDVUxBUkNPTE9STUFQXFxuXFx0XFx0XFx0c3BlY3VsYXJDb2xvckZhY3RvciAqPSB0ZXh0dXJlMkQoIHNwZWN1bGFyQ29sb3JNYXAsIHZVdiApLnJnYjtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRtYXRlcmlhbC5zcGVjdWxhckY5MCA9IG1peCggc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IsIDEuMCwgbWV0YWxuZXNzRmFjdG9yICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBzcGVjdWxhckludGVuc2l0eUZhY3RvciA9IDEuMDtcXG5cXHRcXHR2ZWMzIHNwZWN1bGFyQ29sb3JGYWN0b3IgPSB2ZWMzKCAxLjAgKTtcXG5cXHRcXHRtYXRlcmlhbC5zcGVjdWxhckY5MCA9IDEuMDtcXG5cXHQjZW5kaWZcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCBtaW4oIHBvdzIoICggaW9yIC0gMS4wICkgLyAoIGlvciArIDEuMCApICkgKiBzcGVjdWxhckNvbG9yRmFjdG9yLCB2ZWMzKCAxLjAgKSApICogc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IsIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xcbiNlbHNlXFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggdmVjMyggMC4wNCApLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckY5MCA9IDEuMDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdG1hdGVyaWFsLmNsZWFyY29hdCA9IGNsZWFyY29hdDtcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBjbGVhcmNvYXRSb3VnaG5lc3M7XFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0RjAgPSB2ZWMzKCAwLjA0ICk7XFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0RjkwID0gMS4wO1xcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXFxuXFx0XFx0bWF0ZXJpYWwuY2xlYXJjb2F0ICo9IHRleHR1cmUyRCggY2xlYXJjb2F0TWFwLCB2VXYgKS54O1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUFxcblxcdFxcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyAqPSB0ZXh0dXJlMkQoIGNsZWFyY29hdFJvdWdobmVzc01hcCwgdlV2ICkueTtcXG5cXHQjZW5kaWZcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXQgPSBzYXR1cmF0ZSggbWF0ZXJpYWwuY2xlYXJjb2F0ICk7XFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gbWF4KCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIDAuMDUyNSApO1xcblxcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyArPSBnZW9tZXRyeVJvdWdobmVzcztcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBtaW4oIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcywgMS4wICk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTlxcblxcdG1hdGVyaWFsLnNoZWVuQ29sb3IgPSBzaGVlbkNvbG9yO1xcblxcdCNpZmRlZiBVU0VfU0hFRU5DT0xPUk1BUFxcblxcdFxcdG1hdGVyaWFsLnNoZWVuQ29sb3IgKj0gdGV4dHVyZTJEKCBzaGVlbkNvbG9yTWFwLCB2VXYgKS5yZ2I7XFxuXFx0I2VuZGlmXFxuXFx0bWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgPSBjbGFtcCggc2hlZW5Sb3VnaG5lc3MsIDAuMDcsIDEuMCApO1xcblxcdCNpZmRlZiBVU0VfU0hFRU5ST1VHSE5FU1NNQVBcXG5cXHRcXHRtYXRlcmlhbC5zaGVlblJvdWdobmVzcyAqPSB0ZXh0dXJlMkQoIHNoZWVuUm91Z2huZXNzTWFwLCB2VXYgKS5hO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcInN0cnVjdCBQaHlzaWNhbE1hdGVyaWFsIHtcXG5cXHR2ZWMzIGRpZmZ1c2VDb2xvcjtcXG5cXHRmbG9hdCByb3VnaG5lc3M7XFxuXFx0dmVjMyBzcGVjdWxhckNvbG9yO1xcblxcdGZsb2F0IHNwZWN1bGFyRjkwO1xcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0XFx0ZmxvYXQgY2xlYXJjb2F0O1xcblxcdFxcdGZsb2F0IGNsZWFyY29hdFJvdWdobmVzcztcXG5cXHRcXHR2ZWMzIGNsZWFyY29hdEYwO1xcblxcdFxcdGZsb2F0IGNsZWFyY29hdEY5MDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1NIRUVOXFxuXFx0XFx0dmVjMyBzaGVlbkNvbG9yO1xcblxcdFxcdGZsb2F0IHNoZWVuUm91Z2huZXNzO1xcblxcdCNlbmRpZlxcbn07XFxudmVjMyBjbGVhcmNvYXRTcGVjdWxhciA9IHZlYzMoIDAuMCApO1xcbnZlYzMgc2hlZW5TcGVjdWxhciA9IHZlYzMoIDAuMCApO1xcbmZsb2F0IElCTFNoZWVuQlJERiggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzKSB7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdGZsb2F0IHIyID0gcm91Z2huZXNzICogcm91Z2huZXNzO1xcblxcdGZsb2F0IGEgPSByb3VnaG5lc3MgPCAwLjI1ID8gLTMzOS4yICogcjIgKyAxNjEuNCAqIHJvdWdobmVzcyAtIDI1LjkgOiAtOC40OCAqIHIyICsgMTQuMyAqIHJvdWdobmVzcyAtIDkuOTU7XFxuXFx0ZmxvYXQgYiA9IHJvdWdobmVzcyA8IDAuMjUgPyA0NC4wICogcjIgLSAyMy43ICogcm91Z2huZXNzICsgMy4yNiA6IDEuOTcgKiByMiAtIDMuMjcgKiByb3VnaG5lc3MgKyAwLjcyO1xcblxcdGZsb2F0IERHID0gZXhwKCBhICogZG90TlYgKyBiICkgKyAoIHJvdWdobmVzcyA8IDAuMjUgPyAwLjAgOiAwLjEgKiAoIHJvdWdobmVzcyAtIDAuMjUgKSApO1xcblxcdHJldHVybiBzYXR1cmF0ZSggREcgKiBSRUNJUFJPQ0FMX1BJICk7XFxufVxcbnZlYzIgREZHQXBwcm94KCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdGNvbnN0IHZlYzQgYzAgPSB2ZWM0KCAtIDEsIC0gMC4wMjc1LCAtIDAuNTcyLCAwLjAyMiApO1xcblxcdGNvbnN0IHZlYzQgYzEgPSB2ZWM0KCAxLCAwLjA0MjUsIDEuMDQsIC0gMC4wNCApO1xcblxcdHZlYzQgciA9IHJvdWdobmVzcyAqIGMwICsgYzE7XFxuXFx0ZmxvYXQgYTAwNCA9IG1pbiggci54ICogci54LCBleHAyKCAtIDkuMjggKiBkb3ROViApICkgKiByLnggKyByLnk7XFxuXFx0dmVjMiBmYWIgPSB2ZWMyKCAtIDEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xcblxcdHJldHVybiBmYWI7XFxufVxcbnZlYzMgRW52aXJvbm1lbnRCUkRGKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNwZWN1bGFyRjkwLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0dmVjMiBmYWIgPSBERkdBcHByb3goIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XFxuXFx0cmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBmYWIueCArIHNwZWN1bGFyRjkwICogZmFiLnk7XFxufVxcbnZvaWQgY29tcHV0ZU11bHRpc2NhdHRlcmluZyggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzcGVjdWxhckY5MCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBpbm91dCB2ZWMzIHNpbmdsZVNjYXR0ZXIsIGlub3V0IHZlYzMgbXVsdGlTY2F0dGVyICkge1xcblxcdHZlYzIgZmFiID0gREZHQXBwcm94KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xcblxcdHZlYzMgRnNzRXNzID0gc3BlY3VsYXJDb2xvciAqIGZhYi54ICsgc3BlY3VsYXJGOTAgKiBmYWIueTtcXG5cXHRmbG9hdCBFc3MgPSBmYWIueCArIGZhYi55O1xcblxcdGZsb2F0IEVtcyA9IDEuMCAtIEVzcztcXG5cXHR2ZWMzIEZhdmcgPSBzcGVjdWxhckNvbG9yICsgKCAxLjAgLSBzcGVjdWxhckNvbG9yICkgKiAwLjA0NzYxOTtcXHR2ZWMzIEZtcyA9IEZzc0VzcyAqIEZhdmcgLyAoIDEuMCAtIEVtcyAqIEZhdmcgKTtcXG5cXHRzaW5nbGVTY2F0dGVyICs9IEZzc0VzcztcXG5cXHRtdWx0aVNjYXR0ZXIgKz0gRm1zICogRW1zO1xcbn1cXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXFxuXFx0dm9pZCBSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWwoIGNvbnN0IGluIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBub3JtYWwgPSBnZW9tZXRyeS5ub3JtYWw7XFxuXFx0XFx0dmVjMyB2aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uID0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0dmVjMyBsaWdodFBvcyA9IHJlY3RBcmVhTGlnaHQucG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGggPSByZWN0QXJlYUxpZ2h0LmhhbGZXaWR0aDtcXG5cXHRcXHR2ZWMzIGhhbGZIZWlnaHQgPSByZWN0QXJlYUxpZ2h0LmhhbGZIZWlnaHQ7XFxuXFx0XFx0dmVjMyBsaWdodENvbG9yID0gcmVjdEFyZWFMaWdodC5jb2xvcjtcXG5cXHRcXHRmbG9hdCByb3VnaG5lc3MgPSBtYXRlcmlhbC5yb3VnaG5lc3M7XFxuXFx0XFx0dmVjMyByZWN0Q29vcmRzWyA0IF07XFxuXFx0XFx0cmVjdENvb3Jkc1sgMCBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1xcdFxcdHJlY3RDb29yZHNbIDEgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXG5cXHRcXHRyZWN0Q29vcmRzWyAyIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCArIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMyBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHZlYzIgdXYgPSBMVENfVXYoIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XFxuXFx0XFx0dmVjNCB0MSA9IHRleHR1cmUyRCggbHRjXzEsIHV2ICk7XFxuXFx0XFx0dmVjNCB0MiA9IHRleHR1cmUyRCggbHRjXzIsIHV2ICk7XFxuXFx0XFx0bWF0MyBtSW52ID0gbWF0MyhcXG5cXHRcXHRcXHR2ZWMzKCB0MS54LCAwLCB0MS55ICksXFxuXFx0XFx0XFx0dmVjMyggICAgMCwgMSwgICAgMCApLFxcblxcdFxcdFxcdHZlYzMoIHQxLnosIDAsIHQxLncgKVxcblxcdFxcdCk7XFxuXFx0XFx0dmVjMyBmcmVzbmVsID0gKCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICogdDIueCArICggdmVjMyggMS4wICkgLSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICkgKiB0Mi55ICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gbGlnaHRDb2xvciAqIGZyZXNuZWwgKiBMVENfRXZhbHVhdGUoIG5vcm1hbCwgdmlld0RpciwgcG9zaXRpb24sIG1JbnYsIHJlY3RDb29yZHMgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGxpZ2h0Q29sb3IgKiBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKiBMVENfRXZhbHVhdGUoIG5vcm1hbCwgdmlld0RpciwgcG9zaXRpb24sIG1hdDMoIDEuMCApLCByZWN0Q29vcmRzICk7XFxuXFx0fVxcbiNlbmRpZlxcbnZvaWQgUkVfRGlyZWN0X1BoeXNpY2FsKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0XFx0ZmxvYXQgZG90TkxjYyA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRcXHR2ZWMzIGNjSXJyYWRpYW5jZSA9IGRvdE5MY2MgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHRjbGVhcmNvYXRTcGVjdWxhciArPSBjY0lycmFkaWFuY2UgKiBCUkRGX0dHWCggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfU0hFRU5cXG5cXHRcXHRzaGVlblNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX1NoZWVuKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc2hlZW5Db2xvciwgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9HR1goIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCwgbWF0ZXJpYWwucm91Z2huZXNzICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWwoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWwoIGNvbnN0IGluIHZlYzMgcmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBjbGVhcmNvYXRSYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQpIHtcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdFxcdGNsZWFyY29hdFNwZWN1bGFyICs9IGNsZWFyY29hdFJhZGlhbmNlICogRW52aXJvbm1lbnRCUkRGKCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIsIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfU0hFRU5cXG5cXHRcXHRzaGVlblNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBtYXRlcmlhbC5zaGVlbkNvbG9yICogSUJMU2hlZW5CUkRGKCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIsIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuXFx0dmVjMyBzaW5nbGVTY2F0dGVyaW5nID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBtdWx0aVNjYXR0ZXJpbmcgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZSA9IGlycmFkaWFuY2UgKiBSRUNJUFJPQ0FMX1BJO1xcblxcdGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmcoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIG1hdGVyaWFsLnJvdWdobmVzcywgc2luZ2xlU2NhdHRlcmluZywgbXVsdGlTY2F0dGVyaW5nICk7XFxuXFx0dmVjMyBkaWZmdXNlID0gbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogKCAxLjAgLSAoIHNpbmdsZVNjYXR0ZXJpbmcgKyBtdWx0aVNjYXR0ZXJpbmcgKSApO1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gcmFkaWFuY2UgKiBzaW5nbGVTY2F0dGVyaW5nO1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gbXVsdGlTY2F0dGVyaW5nICogY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlO1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBkaWZmdXNlICogY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlO1xcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfRGlyZWN0X1JlY3RBcmVhXFx0XFx0UkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0U3BlY3VsYXJcXHRcXHRSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsXFxuZmxvYXQgY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBjb25zdCBpbiBmbG9hdCBkb3ROViwgY29uc3QgaW4gZmxvYXQgYW1iaWVudE9jY2x1c2lvbiwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdHJldHVybiBzYXR1cmF0ZSggcG93KCBkb3ROViArIGFtYmllbnRPY2NsdXNpb24sIGV4cDIoIC0gMTYuMCAqIHJvdWdobmVzcyAtIDEuMCApICkgLSAxLjAgKyBhbWJpZW50T2NjbHVzaW9uICk7XFxufVwiO1xuXG52YXIgbGlnaHRzX2ZyYWdtZW50X2JlZ2luID0gXCJcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gLSB2Vmlld1Bvc2l0aW9uO1xcbmdlb21ldHJ5Lm5vcm1hbCA9IG5vcm1hbDtcXG5nZW9tZXRyeS52aWV3RGlyID0gKCBpc09ydGhvZ3JhcGhpYyApID8gdmVjMyggMCwgMCwgMSApIDogbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwgPSBjbGVhcmNvYXROb3JtYWw7XFxuI2VuZGlmXFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG4jaWYgKCBOVU1fUE9JTlRfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0UG9pbnRMaWdodCBwb2ludExpZ2h0O1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0UG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93O1xcblxcdCNlbmRpZlxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldFBvaW50TGlnaHRJbmZvKCBwb2ludExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIClcXG5cXHRcXHRwb2ludExpZ2h0U2hhZG93ID0gcG9pbnRMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBkaXJlY3RMaWdodC52aXNpYmxlLCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93QmlhcywgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmICggTlVNX1NQT1RfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0U3BvdExpZ2h0IHNwb3RMaWdodDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0U3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodFNoYWRvdztcXG5cXHQjZW5kaWZcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXRTcG90TGlnaHRJbmZvKCBzcG90TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBVTlJPTExFRF9MT09QX0lOREVYIDwgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyApXFxuXFx0XFx0c3BvdExpZ2h0U2hhZG93ID0gc3BvdExpZ2h0U2hhZG93c1sgaSBdO1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzIoIGRpcmVjdExpZ2h0LnZpc2libGUsIHJlY2VpdmVTaGFkb3cgKSApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHRTaGFkb3cuc2hhZG93Qmlhcywgc3BvdExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdlNwb3RTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiAoIE5VTV9ESVJfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodFNoYWRvdztcXG5cXHQjZW5kaWZcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0RGlyZWN0aW9uYWxMaWdodEluZm8oIGRpcmVjdGlvbmFsTGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBVTlJPTExFRF9MT09QX0lOREVYIDwgTlVNX0RJUl9MSUdIVF9TSEFET1dTIClcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0U2hhZG93ID0gZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBkaXJlY3RMaWdodC52aXNpYmxlLCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHRTaGFkb3cuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiAoIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdF9SZWN0QXJlYSApXFxuXFx0UmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUkVDVF9BUkVBX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRyZWN0QXJlYUxpZ2h0ID0gcmVjdEFyZWFMaWdodHNbIGkgXTtcXG5cXHRcXHRSRV9EaXJlY3RfUmVjdEFyZWEoIHJlY3RBcmVhTGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHR2ZWMzIGlibElycmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdGlycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGdlb21ldHJ5Lm5vcm1hbCApO1xcblxcdCNpZiAoIE5VTV9IRU1JX0xJR0hUUyA+IDAgKVxcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fSEVNSV9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0XFx0aXJyYWRpYW5jZSArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGdlb21ldHJ5Lm5vcm1hbCApO1xcblxcdFxcdH1cXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHR2ZWMzIHJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBjbGVhcmNvYXRSYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2ZyYWdtZW50X21hcHMgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdCNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRcXHR2ZWM0IGxpZ2h0TWFwVGV4ZWwgPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICk7XFxuXFx0XFx0dmVjMyBsaWdodE1hcElycmFkaWFuY2UgPSBsaWdodE1hcFRleGVsLnJnYiAqIGxpZ2h0TWFwSW50ZW5zaXR5O1xcblxcdFxcdGlycmFkaWFuY2UgKz0gbGlnaHRNYXBJcnJhZGlhbmNlO1xcblxcdCNlbmRpZlxcblxcdCNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggU1RBTkRBUkQgKSAmJiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRpYmxJcnJhZGlhbmNlICs9IGdldElCTElycmFkaWFuY2UoIGdlb21ldHJ5Lm5vcm1hbCApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0cmFkaWFuY2UgKz0gZ2V0SUJMUmFkaWFuY2UoIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwucm91Z2huZXNzICk7XFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRcXHRjbGVhcmNvYXRSYWRpYW5jZSArPSBnZXRJQkxSYWRpYW5jZSggZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9lbmQgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdFJFX0luZGlyZWN0RGlmZnVzZSggaXJyYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHRSRV9JbmRpcmVjdFNwZWN1bGFyKCByYWRpYW5jZSwgaWJsSXJyYWRpYW5jZSwgY2xlYXJjb2F0UmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGICkgJiYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGX0VYVCApXFxuXFx0Z2xfRnJhZ0RlcHRoRVhUID0gdklzUGVyc3BlY3RpdmUgPT0gMC4wID8gZ2xfRnJhZ0Nvb3JkLnogOiBsb2cyKCB2RnJhZ0RlcHRoICkgKiBsb2dEZXB0aEJ1ZkZDICogMC41O1xcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRiApICYmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRl9FWFQgKVxcblxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0dmFyeWluZyBmbG9hdCB2SXNQZXJzcGVjdGl2ZTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0XFx0dmFyeWluZyBmbG9hdCB2SXNQZXJzcGVjdGl2ZTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0dkZyYWdEZXB0aCA9IDEuMCArIGdsX1Bvc2l0aW9uLnc7XFxuXFx0XFx0dklzUGVyc3BlY3RpdmUgPSBmbG9hdCggaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKSApIHtcXG5cXHRcXHRcXHRnbF9Qb3NpdGlvbi56ID0gbG9nMiggbWF4KCBFUFNJTE9OLCBnbF9Qb3NpdGlvbi53ICsgMS4wICkgKSAqIGxvZ0RlcHRoQnVmRkMgLSAxLjA7XFxuXFx0XFx0XFx0Z2xfUG9zaXRpb24ueiAqPSBnbF9Qb3NpdGlvbi53O1xcblxcdFxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR2ZWM0IHNhbXBsZWREaWZmdXNlQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlV2ICk7XFxuXFx0I2lmZGVmIERFQ09ERV9WSURFT19URVhUVVJFXFxuXFx0XFx0c2FtcGxlZERpZmZ1c2VDb2xvciA9IHZlYzQoIG1peCggcG93KCBzYW1wbGVkRGlmZnVzZUNvbG9yLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCBzYW1wbGVkRGlmZnVzZUNvbG9yLnJnYiAqIDAuMDc3Mzk5MzgwOCwgdmVjMyggbGVzc1RoYW5FcXVhbCggc2FtcGxlZERpZmZ1c2VDb2xvci5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgc2FtcGxlZERpZmZ1c2VDb2xvci53ICk7XFxuXFx0I2VuZGlmXFxuXFx0ZGlmZnVzZUNvbG9yICo9IHNhbXBsZWREaWZmdXNlQ29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtYXBfcGFydGljbGVfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQIClcXG5cXHR2ZWMyIHV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIGdsX1BvaW50Q29vcmQueCwgMS4wIC0gZ2xfUG9pbnRDb29yZC55LCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX01BUFxcblxcdGRpZmZ1c2VDb2xvciAqPSB0ZXh0dXJlMkQoIG1hcCwgdXYgKTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0ZGlmZnVzZUNvbG9yLmEgKj0gdGV4dHVyZTJEKCBhbHBoYU1hcCwgdXYgKS5nO1xcbiNlbmRpZlwiO1xuXG52YXIgbWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQIClcXG5cXHR1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgbWV0YWxuZXNzbWFwX2ZyYWdtZW50ID0gXCJmbG9hdCBtZXRhbG5lc3NGYWN0b3IgPSBtZXRhbG5lc3M7XFxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR2ZWM0IHRleGVsTWV0YWxuZXNzID0gdGV4dHVyZTJEKCBtZXRhbG5lc3NNYXAsIHZVdiApO1xcblxcdG1ldGFsbmVzc0ZhY3RvciAqPSB0ZXhlbE1ldGFsbmVzcy5iO1xcbiNlbmRpZlwiO1xuXG52YXIgbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWV0YWxuZXNzTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGhjb2xvcl92ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfTU9SUEhDT0xPUlMgKSAmJiBkZWZpbmVkKCBNT1JQSFRBUkdFVFNfVEVYVFVSRSApXFxuXFx0dkNvbG9yICo9IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNT1JQSFRBUkdFVFNfQ09VTlQ7IGkgKysgKSB7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0XFx0XFx0aWYgKCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhPSAwLjAgKSB2Q29sb3IgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAyICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXTtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBVU0VfQ09MT1IgKVxcblxcdFxcdFxcdGlmICggbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gIT0gMC4wICkgdkNvbG9yICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMiApLnJnYiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIG1vcnBobm9ybWFsX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHRvYmplY3ROb3JtYWwgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xcblxcdCNpZmRlZiBNT1JQSFRBUkdFVFNfVEVYVFVSRVxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcXG5cXHRcXHRcXHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIG9iamVjdE5vcm1hbCArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDEgKS54eXogKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXTtcXG5cXHRcXHR9XFxuXFx0I2Vsc2VcXG5cXHRcXHRvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwwICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0XFx0b2JqZWN0Tm9ybWFsICs9IG1vcnBoTm9ybWFsMSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdFxcdG9iamVjdE5vcm1hbCArPSBtb3JwaE5vcm1hbDIgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcXG5cXHRcXHRvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwzICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcXG5cXHQjaWZkZWYgTU9SUEhUQVJHRVRTX1RFWFRVUkVcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgTU9SUEhUQVJHRVRTX0NPVU5UIF07XFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkRBcnJheSBtb3JwaFRhcmdldHNUZXh0dXJlO1xcblxcdFxcdHVuaWZvcm0gaXZlYzIgbW9ycGhUYXJnZXRzVGV4dHVyZVNpemU7XFxuXFx0XFx0dmVjNCBnZXRNb3JwaCggY29uc3QgaW4gaW50IHZlcnRleEluZGV4LCBjb25zdCBpbiBpbnQgbW9ycGhUYXJnZXRJbmRleCwgY29uc3QgaW4gaW50IG9mZnNldCApIHtcXG5cXHRcXHRcXHRpbnQgdGV4ZWxJbmRleCA9IHZlcnRleEluZGV4ICogTU9SUEhUQVJHRVRTX1RFWFRVUkVfU1RSSURFICsgb2Zmc2V0O1xcblxcdFxcdFxcdGludCB5ID0gdGV4ZWxJbmRleCAvIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XFxuXFx0XFx0XFx0aW50IHggPSB0ZXhlbEluZGV4IC0geSAqIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XFxuXFx0XFx0XFx0aXZlYzMgbW9ycGhVViA9IGl2ZWMzKCB4LCB5LCBtb3JwaFRhcmdldEluZGV4ICk7XFxuXFx0XFx0XFx0cmV0dXJuIHRleGVsRmV0Y2goIG1vcnBoVGFyZ2V0c1RleHR1cmUsIG1vcnBoVVYsIDAgKTtcXG5cXHRcXHR9XFxuXFx0I2Vsc2VcXG5cXHRcXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHRcXHRcXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgOCBdO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG1vcnBodGFyZ2V0X3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHR0cmFuc2Zvcm1lZCAqPSBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XFxuXFx0I2lmZGVmIE1PUlBIVEFSR0VUU19URVhUVVJFXFxuXFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTU9SUEhUQVJHRVRTX0NPVU5UOyBpICsrICkge1xcblxcdFxcdFxcdGlmICggbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gIT0gMC4wICkgdHJhbnNmb3JtZWQgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAwICkueHl6ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF07XFxuXFx0XFx0fVxcblxcdCNlbHNlXFxuXFx0XFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQwICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0XFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQxICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XFxuXFx0XFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQyICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0XFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQzICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFx0XFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0XFx0XFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ0ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFx0XFx0XFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ1ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA1IF07XFxuXFx0XFx0XFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ2ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA2IF07XFxuXFx0XFx0XFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ3ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA3IF07XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBub3JtYWxfZnJhZ21lbnRfYmVnaW4gPSBcImZsb2F0IGZhY2VEaXJlY3Rpb24gPSBnbF9Gcm9udEZhY2luZyA/IDEuMCA6IC0gMS4wO1xcbiNpZmRlZiBGTEFUX1NIQURFRFxcblxcdHZlYzMgZmR4ID0gdmVjMyggZEZkeCggdlZpZXdQb3NpdGlvbi54ICksIGRGZHgoIHZWaWV3UG9zaXRpb24ueSApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnogKSApO1xcblxcdHZlYzMgZmR5ID0gdmVjMyggZEZkeSggdlZpZXdQb3NpdGlvbi54ICksIGRGZHkoIHZWaWV3UG9zaXRpb24ueSApLCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnogKSApO1xcblxcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCBjcm9zcyggZmR4LCBmZHkgKSApO1xcbiNlbHNlXFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIHZOb3JtYWwgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0bm9ybWFsID0gbm9ybWFsICogZmFjZURpcmVjdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2ZWMzIHRhbmdlbnQgPSBub3JtYWxpemUoIHZUYW5nZW50ICk7XFxuXFx0XFx0dmVjMyBiaXRhbmdlbnQgPSBub3JtYWxpemUoIHZCaXRhbmdlbnQgKTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dGFuZ2VudCA9IHRhbmdlbnQgKiBmYWNlRGlyZWN0aW9uO1xcblxcdFxcdFxcdGJpdGFuZ2VudCA9IGJpdGFuZ2VudCAqIGZhY2VEaXJlY3Rpb247XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0I2lmIGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApXFxuXFx0XFx0XFx0bWF0MyB2VEJOID0gbWF0MyggdGFuZ2VudCwgYml0YW5nZW50LCBub3JtYWwgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG52ZWMzIGdlb21ldHJ5Tm9ybWFsID0gbm9ybWFsO1wiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBPQkpFQ1RTUEFDRV9OT1JNQUxNQVBcXG5cXHRub3JtYWwgPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdCNpZmRlZiBGTElQX1NJREVEXFxuXFx0XFx0bm9ybWFsID0gLSBub3JtYWw7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqIGZhY2VEaXJlY3Rpb247XFxuXFx0I2VuZGlmXFxuXFx0bm9ybWFsID0gbm9ybWFsaXplKCBub3JtYWxNYXRyaXggKiBub3JtYWwgKTtcXG4jZWxpZiBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQIClcXG5cXHR2ZWMzIG1hcE4gPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdG1hcE4ueHkgKj0gbm9ybWFsU2NhbGU7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0bm9ybWFsID0gbm9ybWFsaXplKCB2VEJOICogbWFwTiApO1xcblxcdCNlbHNlXFxuXFx0XFx0bm9ybWFsID0gcGVydHVyYk5vcm1hbDJBcmIoIC0gdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBtYXBOLCBmYWNlRGlyZWN0aW9uICk7XFxuXFx0I2VuZGlmXFxuI2VsaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKVxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWxBcmIoIC0gdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBkSGR4eV9md2QoKSwgZmFjZURpcmVjdGlvbiApO1xcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsX3BhcnNfZnJhZ21lbnQgPSBcIiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBub3JtYWxfcGFyc192ZXJ0ZXggPSBcIiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBub3JtYWxfdmVydGV4ID0gXCIjaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWRUYW5nZW50ICk7XFxuXFx0XFx0dkJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG5vcm1hbE1hcDtcXG5cXHR1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XFxuI2VuZGlmXFxuI2lmZGVmIE9CSkVDVFNQQUNFX05PUk1BTE1BUFxcblxcdHVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XFxuI2VuZGlmXFxuI2lmICEgZGVmaW5lZCAoIFVTRV9UQU5HRU5UICkgJiYgKCBkZWZpbmVkICggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQgKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApIClcXG5cXHR2ZWMzIHBlcnR1cmJOb3JtYWwyQXJiKCB2ZWMzIGV5ZV9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMzIG1hcE4sIGZsb2F0IGZhY2VEaXJlY3Rpb24gKSB7XFxuXFx0XFx0dmVjMyBxMCA9IHZlYzMoIGRGZHgoIGV5ZV9wb3MueCApLCBkRmR4KCBleWVfcG9zLnkgKSwgZEZkeCggZXllX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHExID0gdmVjMyggZEZkeSggZXllX3Bvcy54ICksIGRGZHkoIGV5ZV9wb3MueSApLCBkRmR5KCBleWVfcG9zLnogKSApO1xcblxcdFxcdHZlYzIgc3QwID0gZEZkeCggdlV2LnN0ICk7XFxuXFx0XFx0dmVjMiBzdDEgPSBkRmR5KCB2VXYuc3QgKTtcXG5cXHRcXHR2ZWMzIE4gPSBzdXJmX25vcm07XFxuXFx0XFx0dmVjMyBxMXBlcnAgPSBjcm9zcyggcTEsIE4gKTtcXG5cXHRcXHR2ZWMzIHEwcGVycCA9IGNyb3NzKCBOLCBxMCApO1xcblxcdFxcdHZlYzMgVCA9IHExcGVycCAqIHN0MC54ICsgcTBwZXJwICogc3QxLng7XFxuXFx0XFx0dmVjMyBCID0gcTFwZXJwICogc3QwLnkgKyBxMHBlcnAgKiBzdDEueTtcXG5cXHRcXHRmbG9hdCBkZXQgPSBtYXgoIGRvdCggVCwgVCApLCBkb3QoIEIsIEIgKSApO1xcblxcdFxcdGZsb2F0IHNjYWxlID0gKCBkZXQgPT0gMC4wICkgPyAwLjAgOiBmYWNlRGlyZWN0aW9uICogaW52ZXJzZXNxcnQoIGRldCApO1xcblxcdFxcdHJldHVybiBub3JtYWxpemUoIFQgKiAoIG1hcE4ueCAqIHNjYWxlICkgKyBCICogKCBtYXBOLnkgKiBzY2FsZSApICsgTiAqIG1hcE4ueiApO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4gPSBcIiNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0dmVjMyBjbGVhcmNvYXROb3JtYWwgPSBnZW9tZXRyeU5vcm1hbDtcXG4jZW5kaWZcIjtcblxudmFyIGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcyA9IFwiI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXFxuXFx0dmVjMyBjbGVhcmNvYXRNYXBOID0gdGV4dHVyZTJEKCBjbGVhcmNvYXROb3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRjbGVhcmNvYXRNYXBOLnh5ICo9IGNsZWFyY29hdE5vcm1hbFNjYWxlO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdGNsZWFyY29hdE5vcm1hbCA9IG5vcm1hbGl6ZSggdlRCTiAqIGNsZWFyY29hdE1hcE4gKTtcXG5cXHQjZWxzZVxcblxcdFxcdGNsZWFyY29hdE5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtIHZWaWV3UG9zaXRpb24sIGNsZWFyY29hdE5vcm1hbCwgY2xlYXJjb2F0TWFwTiwgZmFjZURpcmVjdGlvbiApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0TWFwO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGNsZWFyY29hdFJvdWdobmVzc01hcDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBjbGVhcmNvYXROb3JtYWxNYXA7XFxuXFx0dW5pZm9ybSB2ZWMyIGNsZWFyY29hdE5vcm1hbFNjYWxlO1xcbiNlbmRpZlwiO1xuXG52YXIgb3V0cHV0X2ZyYWdtZW50ID0gXCIjaWZkZWYgT1BBUVVFXFxuZGlmZnVzZUNvbG9yLmEgPSAxLjA7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cXG5kaWZmdXNlQ29sb3IuYSAqPSB0cmFuc21pc3Npb25BbHBoYSArIDAuMTtcXG4jZW5kaWZcXG5nbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1wiO1xuXG52YXIgcGFja2luZyA9IFwidmVjMyBwYWNrTm9ybWFsVG9SR0IoIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdHJldHVybiBub3JtYWxpemUoIG5vcm1hbCApICogMC41ICsgMC41O1xcbn1cXG52ZWMzIHVucGFja1JHQlRvTm9ybWFsKCBjb25zdCBpbiB2ZWMzIHJnYiApIHtcXG5cXHRyZXR1cm4gMi4wICogcmdiLnh5eiAtIDEuMDtcXG59XFxuY29uc3QgZmxvYXQgUGFja1Vwc2NhbGUgPSAyNTYuIC8gMjU1Ljtjb25zdCBmbG9hdCBVbnBhY2tEb3duc2NhbGUgPSAyNTUuIC8gMjU2LjtcXG5jb25zdCB2ZWMzIFBhY2tGYWN0b3JzID0gdmVjMyggMjU2LiAqIDI1Ni4gKiAyNTYuLCAyNTYuICogMjU2LiwgMjU2LiApO1xcbmNvbnN0IHZlYzQgVW5wYWNrRmFjdG9ycyA9IFVucGFja0Rvd25zY2FsZSAvIHZlYzQoIFBhY2tGYWN0b3JzLCAxLiApO1xcbmNvbnN0IGZsb2F0IFNoaWZ0UmlnaHQ4ID0gMS4gLyAyNTYuO1xcbnZlYzQgcGFja0RlcHRoVG9SR0JBKCBjb25zdCBpbiBmbG9hdCB2ICkge1xcblxcdHZlYzQgciA9IHZlYzQoIGZyYWN0KCB2ICogUGFja0ZhY3RvcnMgKSwgdiApO1xcblxcdHIueXp3IC09IHIueHl6ICogU2hpZnRSaWdodDg7XFx0cmV0dXJuIHIgKiBQYWNrVXBzY2FsZTtcXG59XFxuZmxvYXQgdW5wYWNrUkdCQVRvRGVwdGgoIGNvbnN0IGluIHZlYzQgdiApIHtcXG5cXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzICk7XFxufVxcbnZlYzQgcGFjazJIYWxmVG9SR0JBKCB2ZWMyIHYgKSB7XFxuXFx0dmVjNCByID0gdmVjNCggdi54LCBmcmFjdCggdi54ICogMjU1LjAgKSwgdi55LCBmcmFjdCggdi55ICogMjU1LjAgKSApO1xcblxcdHJldHVybiB2ZWM0KCByLnggLSByLnkgLyAyNTUuMCwgci55LCByLnogLSByLncgLyAyNTUuMCwgci53ICk7XFxufVxcbnZlYzIgdW5wYWNrUkdCQVRvMkhhbGYoIHZlYzQgdiApIHtcXG5cXHRyZXR1cm4gdmVjMiggdi54ICsgKCB2LnkgLyAyNTUuMCApLCB2LnogKyAoIHYudyAvIDI1NS4wICkgKTtcXG59XFxuZmxvYXQgdmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIHZpZXdaICsgbmVhciApIC8gKCBuZWFyIC0gZmFyICk7XFxufVxcbmZsb2F0IG9ydGhvZ3JhcGhpY0RlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgbGluZWFyQ2xpcFosIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gbGluZWFyQ2xpcFogKiAoIG5lYXIgLSBmYXIgKSAtIG5lYXI7XFxufVxcbmZsb2F0IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoICggbmVhciArIHZpZXdaICkgKiBmYXIgKSAvICggKCBmYXIgLSBuZWFyICkgKiB2aWV3WiApO1xcbn1cXG5mbG9hdCBwZXJzcGVjdGl2ZURlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgaW52Q2xpcFosIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCBuZWFyICogZmFyICkgLyAoICggZmFyIC0gbmVhciApICogaW52Q2xpcFogLSBmYXIgKTtcXG59XCI7XG5cbnZhciBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50ID0gXCIjaWZkZWYgUFJFTVVMVElQTElFRF9BTFBIQVxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgKj0gZ2xfRnJhZ0NvbG9yLmE7XFxuI2VuZGlmXCI7XG5cbnZhciBwcm9qZWN0X3ZlcnRleCA9IFwidmVjNCBtdlBvc2l0aW9uID0gdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbiNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xcblxcdG12UG9zaXRpb24gPSBpbnN0YW5jZU1hdHJpeCAqIG12UG9zaXRpb247XFxuI2VuZGlmXFxubXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIG12UG9zaXRpb247XFxuZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIjtcblxudmFyIGRpdGhlcmluZ19mcmFnbWVudCA9IFwiI2lmZGVmIERJVEhFUklOR1xcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBkaXRoZXJpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcXG4jZW5kaWZcIjtcblxudmFyIGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgRElUSEVSSU5HXFxuXFx0dmVjMyBkaXRoZXJpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0XFx0ZmxvYXQgZ3JpZF9wb3NpdGlvbiA9IHJhbmQoIGdsX0ZyYWdDb29yZC54eSApO1xcblxcdFxcdHZlYzMgZGl0aGVyX3NoaWZ0X1JHQiA9IHZlYzMoIDAuMjUgLyAyNTUuMCwgLTAuMjUgLyAyNTUuMCwgMC4yNSAvIDI1NS4wICk7XFxuXFx0XFx0ZGl0aGVyX3NoaWZ0X1JHQiA9IG1peCggMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgLTIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIGdyaWRfcG9zaXRpb24gKTtcXG5cXHRcXHRyZXR1cm4gY29sb3IgKyBkaXRoZXJfc2hpZnRfUkdCO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIHJvdWdobmVzc21hcF9mcmFnbWVudCA9IFwiZmxvYXQgcm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzO1xcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dmVjNCB0ZXhlbFJvdWdobmVzcyA9IHRleHR1cmUyRCggcm91Z2huZXNzTWFwLCB2VXYgKTtcXG5cXHRyb3VnaG5lc3NGYWN0b3IgKj0gdGV4ZWxSb3VnaG5lc3MuZztcXG4jZW5kaWZcIjtcblxudmFyIHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHJvdWdobmVzc01hcDtcXG4jZW5kaWZcIjtcblxudmFyIHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlyZWN0aW9uYWxTaGFkb3dNYXBbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IERpcmVjdGlvbmFsTGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBzcG90U2hhZG93TWFwWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZTcG90U2hhZG93Q29vcmRbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHRzdHJ1Y3QgU3BvdExpZ2h0U2hhZG93IHtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gU3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodFNoYWRvd3NbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgcG9pbnRTaGFkb3dNYXBbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHN0cnVjdCBQb2ludExpZ2h0U2hhZG93IHtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gUG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93c1sgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHRmbG9hdCB0ZXh0dXJlMkRDb21wYXJlKCBzYW1wbGVyMkQgZGVwdGhzLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xcblxcdFxcdHJldHVybiBzdGVwKCBjb21wYXJlLCB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBkZXB0aHMsIHV2ICkgKSApO1xcblxcdH1cXG5cXHR2ZWMyIHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diApIHtcXG5cXHRcXHRyZXR1cm4gdW5wYWNrUkdCQVRvMkhhbGYoIHRleHR1cmUyRCggc2hhZG93LCB1diApICk7XFxuXFx0fVxcblxcdGZsb2F0IFZTTVNoYWRvdyAoc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApe1xcblxcdFxcdGZsb2F0IG9jY2x1c2lvbiA9IDEuMDtcXG5cXHRcXHR2ZWMyIGRpc3RyaWJ1dGlvbiA9IHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2hhZG93LCB1diApO1xcblxcdFxcdGZsb2F0IGhhcmRfc2hhZG93ID0gc3RlcCggY29tcGFyZSAsIGRpc3RyaWJ1dGlvbi54ICk7XFxuXFx0XFx0aWYgKGhhcmRfc2hhZG93ICE9IDEuMCApIHtcXG5cXHRcXHRcXHRmbG9hdCBkaXN0YW5jZSA9IGNvbXBhcmUgLSBkaXN0cmlidXRpb24ueCA7XFxuXFx0XFx0XFx0ZmxvYXQgdmFyaWFuY2UgPSBtYXgoIDAuMDAwMDAsIGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKTtcXG5cXHRcXHRcXHRmbG9hdCBzb2Z0bmVzc19wcm9iYWJpbGl0eSA9IHZhcmlhbmNlIC8gKHZhcmlhbmNlICsgZGlzdGFuY2UgKiBkaXN0YW5jZSApO1xcdFxcdFxcdHNvZnRuZXNzX3Byb2JhYmlsaXR5ID0gY2xhbXAoICggc29mdG5lc3NfcHJvYmFiaWxpdHkgLSAwLjMgKSAvICggMC45NSAtIDAuMyApLCAwLjAsIDEuMCApO1xcdFxcdFxcdG9jY2x1c2lvbiA9IGNsYW1wKCBtYXgoIGhhcmRfc2hhZG93LCBzb2Z0bmVzc19wcm9iYWJpbGl0eSApLCAwLjAsIDEuMCApO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gb2NjbHVzaW9uO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkICkge1xcblxcdFxcdGZsb2F0IHNoYWRvdyA9IDEuMDtcXG5cXHRcXHRzaGFkb3dDb29yZC54eXogLz0gc2hhZG93Q29vcmQudztcXG5cXHRcXHRzaGFkb3dDb29yZC56ICs9IHNoYWRvd0JpYXM7XFxuXFx0XFx0YnZlYzQgaW5GcnVzdHVtVmVjID0gYnZlYzQgKCBzaGFkb3dDb29yZC54ID49IDAuMCwgc2hhZG93Q29vcmQueCA8PSAxLjAsIHNoYWRvd0Nvb3JkLnkgPj0gMC4wLCBzaGFkb3dDb29yZC55IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgaW5GcnVzdHVtID0gYWxsKCBpbkZydXN0dW1WZWMgKTtcXG5cXHRcXHRidmVjMiBmcnVzdHVtVGVzdFZlYyA9IGJ2ZWMyKCBpbkZydXN0dW0sIHNoYWRvd0Nvb3JkLnogPD0gMS4wICk7XFxuXFx0XFx0Ym9vbCBmcnVzdHVtVGVzdCA9IGFsbCggZnJ1c3R1bVRlc3RWZWMgKTtcXG5cXHRcXHRpZiAoIGZydXN0dW1UZXN0ICkge1xcblxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4MCA9IC0gdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeDEgPSArIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MSA9ICsgdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgyID0gZHgwIC8gMi4wO1xcblxcdFxcdFxcdGZsb2F0IGR5MiA9IGR5MCAvIDIuMDtcXG5cXHRcXHRcXHRmbG9hdCBkeDMgPSBkeDEgLyAyLjA7XFxuXFx0XFx0XFx0ZmxvYXQgZHkzID0gZHkxIC8gMi4wO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDIsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MSApLCBzaGFkb3dDb29yZC56IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyAxNy4wICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4ID0gdGV4ZWxTaXplLng7XFxuXFx0XFx0XFx0ZmxvYXQgZHkgPSB0ZXhlbFNpemUueTtcXG5cXHRcXHRcXHR2ZWMyIHV2ID0gc2hhZG93Q29vcmQueHk7XFxuXFx0XFx0XFx0dmVjMiBmID0gZnJhY3QoIHV2ICogc2hhZG93TWFwU2l6ZSArIDAuNSApO1xcblxcdFxcdFxcdHV2IC09IGYgKiB0ZXhlbFNpemU7XFxuXFx0XFx0XFx0c2hhZG93ID0gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYsIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMC4wLCBkeSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB0ZXhlbFNpemUsIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0bWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApLCBcXG5cXHRcXHRcXHRcXHRcXHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdCBmLnggKSArXFxuXFx0XFx0XFx0XFx0bWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCBkeSApLCBzaGFkb3dDb29yZC56ICksIFxcblxcdFxcdFxcdFxcdFxcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMi4wICogZHgsIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgZi54ICkgK1xcblxcdFxcdFxcdFxcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDAuMCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSwgXFxuXFx0XFx0XFx0XFx0XFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAwLjAsIDIuMCAqIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgZi55ICkgK1xcblxcdFxcdFxcdFxcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAtZHkgKSwgc2hhZG93Q29vcmQueiApLCBcXG5cXHRcXHRcXHRcXHRcXHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueSApICtcXG5cXHRcXHRcXHRcXHRtaXgoIG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSwgXFxuXFx0XFx0XFx0XFx0XFx0XFx0ICB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMi4wICogZHgsIC1keSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0XFx0ICBmLnggKSxcXG5cXHRcXHRcXHRcXHRcXHQgbWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksIFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0XFx0ICBmLnggKSxcXG5cXHRcXHRcXHRcXHRcXHQgZi55IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9WU00gKVxcblxcdFxcdFxcdHNoYWRvdyA9IFZTTVNoYWRvdyggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0c2hhZG93ID0gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gc2hhZG93O1xcblxcdH1cXG5cXHR2ZWMyIGN1YmVUb1VWKCB2ZWMzIHYsIGZsb2F0IHRleGVsU2l6ZVkgKSB7XFxuXFx0XFx0dmVjMyBhYnNWID0gYWJzKCB2ICk7XFxuXFx0XFx0ZmxvYXQgc2NhbGVUb0N1YmUgPSAxLjAgLyBtYXgoIGFic1YueCwgbWF4KCBhYnNWLnksIGFic1YueiApICk7XFxuXFx0XFx0YWJzViAqPSBzY2FsZVRvQ3ViZTtcXG5cXHRcXHR2ICo9IHNjYWxlVG9DdWJlICogKCAxLjAgLSAyLjAgKiB0ZXhlbFNpemVZICk7XFxuXFx0XFx0dmVjMiBwbGFuYXIgPSB2Lnh5O1xcblxcdFxcdGZsb2F0IGFsbW9zdEFUZXhlbCA9IDEuNSAqIHRleGVsU2l6ZVk7XFxuXFx0XFx0ZmxvYXQgYWxtb3N0T25lID0gMS4wIC0gYWxtb3N0QVRleGVsO1xcblxcdFxcdGlmICggYWJzVi56ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRpZiAoIHYueiA+IDAuMCApXFxuXFx0XFx0XFx0XFx0cGxhbmFyLnggPSA0LjAgLSB2Lng7XFxuXFx0XFx0fSBlbHNlIGlmICggYWJzVi54ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRmbG9hdCBzaWduWCA9IHNpZ24oIHYueCApO1xcblxcdFxcdFxcdHBsYW5hci54ID0gdi56ICogc2lnblggKyAyLjAgKiBzaWduWDtcXG5cXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnkgPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGZsb2F0IHNpZ25ZID0gc2lnbiggdi55ICk7XFxuXFx0XFx0XFx0cGxhbmFyLnggPSB2LnggKyAyLjAgKiBzaWduWSArIDIuMDtcXG5cXHRcXHRcXHRwbGFuYXIueSA9IHYueiAqIHNpZ25ZIC0gMi4wO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gdmVjMiggMC4xMjUsIDAuMjUgKSAqIHBsYW5hciArIHZlYzIoIDAuMzc1LCAwLjc1ICk7XFxuXFx0fVxcblxcdGZsb2F0IGdldFBvaW50U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCwgZmxvYXQgc2hhZG93Q2FtZXJhTmVhciwgZmxvYXQgc2hhZG93Q2FtZXJhRmFyICkge1xcblxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyAoIHNoYWRvd01hcFNpemUgKiB2ZWMyKCA0LjAsIDIuMCApICk7XFxuXFx0XFx0dmVjMyBsaWdodFRvUG9zaXRpb24gPSBzaGFkb3dDb29yZC54eXo7XFxuXFx0XFx0ZmxvYXQgZHAgPSAoIGxlbmd0aCggbGlnaHRUb1Bvc2l0aW9uICkgLSBzaGFkb3dDYW1lcmFOZWFyICkgLyAoIHNoYWRvd0NhbWVyYUZhciAtIHNoYWRvd0NhbWVyYU5lYXIgKTtcXHRcXHRkcCArPSBzaGFkb3dCaWFzO1xcblxcdFxcdHZlYzMgYmQzRCA9IG5vcm1hbGl6ZSggbGlnaHRUb1Bvc2l0aW9uICk7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUICkgfHwgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfVlNNIClcXG5cXHRcXHRcXHR2ZWMyIG9mZnNldCA9IHZlYzIoIC0gMSwgMSApICogc2hhZG93UmFkaXVzICogdGV4ZWxTaXplLnk7XFxuXFx0XFx0XFx0cmV0dXJuIChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh4eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHgsIHRleGVsU2l6ZS55ICksIGRwIClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIHNoYWRvd21hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0fTtcXG5cXHRcXHR1bmlmb3JtIERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBzcG90U2hhZG93TWF0cml4WyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZTcG90U2hhZG93Q29vcmRbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHRzdHJ1Y3QgU3BvdExpZ2h0U2hhZG93IHtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gU3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodFNoYWRvd3NbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IHBvaW50U2hhZG93TWF0cml4WyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHRzdHJ1Y3QgUG9pbnRMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Q2FtZXJhTmVhcjtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFGYXI7XFxuXFx0XFx0fTtcXG5cXHRcXHR1bmlmb3JtIFBvaW50TGlnaHRTaGFkb3cgcG9pbnRMaWdodFNoYWRvd3NbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwIHx8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwIHx8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHZlYzMgc2hhZG93V29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdHZlYzQgc2hhZG93V29ybGRQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0c2hhZG93V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24gKyB2ZWM0KCBzaGFkb3dXb3JsZE5vcm1hbCAqIGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF0uc2hhZG93Tm9ybWFsQmlhcywgMCApO1xcblxcdFxcdHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gPSBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgaSBdICogc2hhZG93V29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRzaGFkb3dXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbiArIHZlYzQoIHNoYWRvd1dvcmxkTm9ybWFsICogc3BvdExpZ2h0U2hhZG93c1sgaSBdLnNoYWRvd05vcm1hbEJpYXMsIDAgKTtcXG5cXHRcXHR2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gPSBzcG90U2hhZG93TWF0cml4WyBpIF0gKiBzaGFkb3dXb3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0c2hhZG93V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24gKyB2ZWM0KCBzaGFkb3dXb3JsZE5vcm1hbCAqIHBvaW50TGlnaHRTaGFkb3dzWyBpIF0uc2hhZG93Tm9ybWFsQmlhcywgMCApO1xcblxcdFxcdHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0gPSBwb2ludFNoYWRvd01hdHJpeFsgaSBdICogc2hhZG93V29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIHNoYWRvd21hc2tfcGFyc19mcmFnbWVudCA9IFwiZmxvYXQgZ2V0U2hhZG93TWFzaygpIHtcXG5cXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0I2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0U2hhZG93c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSByZWNlaXZlU2hhZG93ID8gZ2V0U2hhZG93KCBkaXJlY3Rpb25hbFNoYWRvd01hcFsgaSBdLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd01hcFNpemUsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRTcG90TGlnaHRTaGFkb3cgc3BvdExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRQb2ludExpZ2h0U2hhZG93IHBvaW50TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0U2hhZG93c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSByZWNlaXZlU2hhZG93ID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcblxcdCNlbmRpZlxcblxcdHJldHVybiBzaGFkb3c7XFxufVwiO1xuXG52YXIgc2tpbmJhc2VfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0bWF0NCBib25lTWF0WCA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC54ICk7XFxuXFx0bWF0NCBib25lTWF0WSA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC55ICk7XFxuXFx0bWF0NCBib25lTWF0WiA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC56ICk7XFxuXFx0bWF0NCBib25lTWF0VyA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC53ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubmluZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcXG5cXHQjaWZkZWYgQk9ORV9URVhUVVJFXFxuXFx0XFx0dW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgYm9uZVRleHR1cmU7XFxuXFx0XFx0dW5pZm9ybSBpbnQgYm9uZVRleHR1cmVTaXplO1xcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRcXHRmbG9hdCBqID0gaSAqIDQuMDtcXG5cXHRcXHRcXHRmbG9hdCB4ID0gbW9kKCBqLCBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCB5ID0gZmxvb3IoIGogLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeCA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeSA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHR5ID0gZHkgKiAoIHkgKyAwLjUgKTtcXG5cXHRcXHRcXHR2ZWM0IHYxID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAwLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MiA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMS41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjMgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDIuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHY0ID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAzLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gbWF0NCggdjEsIHYyLCB2MywgdjQgKTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIG1hdDQgYm9uZU1hdHJpY2VzWyBNQVhfQk9ORVMgXTtcXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gYm9uZU1hdHJpY2VzWyBpbnQoaSkgXTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBza2lubmluZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHR2ZWM0IHNraW5WZXJ0ZXggPSBiaW5kTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcblxcdHZlYzQgc2tpbm5lZCA9IHZlYzQoIDAuMCApO1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogc2tpbldlaWdodC54O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFkgKiBza2luVmVydGV4ICogc2tpbldlaWdodC55O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFogKiBza2luVmVydGV4ICogc2tpbldlaWdodC56O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogc2tpbldlaWdodC53O1xcblxcdHRyYW5zZm9ybWVkID0gKCBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5uZWQgKS54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubm9ybWFsX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgc2tpbk1hdHJpeCA9IG1hdDQoIDAuMCApO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC54ICogYm9uZU1hdFg7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnkgKiBib25lTWF0WTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueiAqIGJvbmVNYXRaO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC53ICogYm9uZU1hdFc7XFxuXFx0c2tpbk1hdHJpeCA9IGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbk1hdHJpeCAqIGJpbmRNYXRyaXg7XFxuXFx0b2JqZWN0Tm9ybWFsID0gdmVjNCggc2tpbk1hdHJpeCAqIHZlYzQoIG9iamVjdE5vcm1hbCwgMC4wICkgKS54eXo7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0b2JqZWN0VGFuZ2VudCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3RUYW5nZW50LCAwLjAgKSApLnh5ejtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIHNwZWN1bGFybWFwX2ZyYWdtZW50ID0gXCJmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xcbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2VXYgKTtcXG5cXHRzcGVjdWxhclN0cmVuZ3RoID0gdGV4ZWxTcGVjdWxhci5yO1xcbiNlbHNlXFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IDEuMDtcXG4jZW5kaWZcIjtcblxudmFyIHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBzcGVjdWxhck1hcDtcXG4jZW5kaWZcIjtcblxudmFyIHRvbmVtYXBwaW5nX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVE9ORV9NQVBQSU5HIClcXG5cXHRnbF9GcmFnQ29sb3IucmdiID0gdG9uZU1hcHBpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcXG4jZW5kaWZcIjtcblxudmFyIHRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQgPSBcIiNpZm5kZWYgc2F0dXJhdGVcXG4jZGVmaW5lIHNhdHVyYXRlKCBhICkgY2xhbXAoIGEsIDAuMCwgMS4wIClcXG4jZW5kaWZcXG51bmlmb3JtIGZsb2F0IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxudmVjMyBMaW5lYXJUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRyZXR1cm4gdG9uZU1hcHBpbmdFeHBvc3VyZSAqIGNvbG9yO1xcbn1cXG52ZWMzIFJlaW5oYXJkVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIGNvbG9yIC8gKCB2ZWMzKCAxLjAgKSArIGNvbG9yICkgKTtcXG59XFxudmVjMyBPcHRpbWl6ZWRDaW5lb25Ub25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdGNvbG9yID0gbWF4KCB2ZWMzKCAwLjAgKSwgY29sb3IgLSAwLjAwNCApO1xcblxcdHJldHVybiBwb3coICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMC41ICkgKSAvICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMS43ICkgKyAwLjA2ICksIHZlYzMoIDIuMiApICk7XFxufVxcbnZlYzMgUlJUQW5kT0RURml0KCB2ZWMzIHYgKSB7XFxuXFx0dmVjMyBhID0gdiAqICggdiArIDAuMDI0NTc4NiApIC0gMC4wMDAwOTA1Mzc7XFxuXFx0dmVjMyBiID0gdiAqICggMC45ODM3MjkgKiB2ICsgMC40MzI5NTEwICkgKyAwLjIzODA4MTtcXG5cXHRyZXR1cm4gYSAvIGI7XFxufVxcbnZlYzMgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbnN0IG1hdDMgQUNFU0lucHV0TWF0ID0gbWF0MyhcXG5cXHRcXHR2ZWMzKCAwLjU5NzE5LCAwLjA3NjAwLCAwLjAyODQwICksXFx0XFx0dmVjMyggMC4zNTQ1OCwgMC45MDgzNCwgMC4xMzM4MyApLFxcblxcdFxcdHZlYzMoIDAuMDQ4MjMsIDAuMDE1NjYsIDAuODM3NzcgKVxcblxcdCk7XFxuXFx0Y29uc3QgbWF0MyBBQ0VTT3V0cHV0TWF0ID0gbWF0MyhcXG5cXHRcXHR2ZWMzKCAgMS42MDQ3NSwgLTAuMTAyMDgsIC0wLjAwMzI3ICksXFx0XFx0dmVjMyggLTAuNTMxMDgsICAxLjEwODEzLCAtMC4wNzI3NiApLFxcblxcdFxcdHZlYzMoIC0wLjA3MzY3LCAtMC4wMDYwNSwgIDEuMDc2MDIgKVxcblxcdCk7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZSAvIDAuNjtcXG5cXHRjb2xvciA9IEFDRVNJbnB1dE1hdCAqIGNvbG9yO1xcblxcdGNvbG9yID0gUlJUQW5kT0RURml0KCBjb2xvciApO1xcblxcdGNvbG9yID0gQUNFU091dHB1dE1hdCAqIGNvbG9yO1xcblxcdHJldHVybiBzYXR1cmF0ZSggY29sb3IgKTtcXG59XFxudmVjMyBDdXN0b21Ub25lTWFwcGluZyggdmVjMyBjb2xvciApIHsgcmV0dXJuIGNvbG9yOyB9XCI7XG5cbnZhciB0cmFuc21pc3Npb25fZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXFxuXFx0ZmxvYXQgdHJhbnNtaXNzaW9uQWxwaGEgPSAxLjA7XFxuXFx0ZmxvYXQgdHJhbnNtaXNzaW9uRmFjdG9yID0gdHJhbnNtaXNzaW9uO1xcblxcdGZsb2F0IHRoaWNrbmVzc0ZhY3RvciA9IHRoaWNrbmVzcztcXG5cXHQjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxcblxcdFxcdHRyYW5zbWlzc2lvbkZhY3RvciAqPSB0ZXh0dXJlMkQoIHRyYW5zbWlzc2lvbk1hcCwgdlV2ICkucjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1RISUNLTkVTU01BUFxcblxcdFxcdHRoaWNrbmVzc0ZhY3RvciAqPSB0ZXh0dXJlMkQoIHRoaWNrbmVzc01hcCwgdlV2ICkuZztcXG5cXHQjZW5kaWZcXG5cXHR2ZWMzIHBvcyA9IHZXb3JsZFBvc2l0aW9uO1xcblxcdHZlYzMgdiA9IG5vcm1hbGl6ZSggY2FtZXJhUG9zaXRpb24gLSBwb3MgKTtcXG5cXHR2ZWMzIG4gPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHR2ZWM0IHRyYW5zbWlzc2lvbiA9IGdldElCTFZvbHVtZVJlZnJhY3Rpb24oXFxuXFx0XFx0biwgdiwgcm91Z2huZXNzRmFjdG9yLCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLFxcblxcdFxcdHBvcywgbW9kZWxNYXRyaXgsIHZpZXdNYXRyaXgsIHByb2plY3Rpb25NYXRyaXgsIGlvciwgdGhpY2tuZXNzRmFjdG9yLFxcblxcdFxcdGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKTtcXG5cXHR0b3RhbERpZmZ1c2UgPSBtaXgoIHRvdGFsRGlmZnVzZSwgdHJhbnNtaXNzaW9uLnJnYiwgdHJhbnNtaXNzaW9uRmFjdG9yICk7XFxuXFx0dHJhbnNtaXNzaW9uQWxwaGEgPSBtaXgoIHRyYW5zbWlzc2lvbkFscGhhLCB0cmFuc21pc3Npb24uYSwgdHJhbnNtaXNzaW9uRmFjdG9yICk7XFxuI2VuZGlmXCI7XG5cbnZhciB0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cXG5cXHR1bmlmb3JtIGZsb2F0IHRyYW5zbWlzc2lvbjtcXG5cXHR1bmlmb3JtIGZsb2F0IHRoaWNrbmVzcztcXG5cXHR1bmlmb3JtIGZsb2F0IGF0dGVudWF0aW9uRGlzdGFuY2U7XFxuXFx0dW5pZm9ybSB2ZWMzIGF0dGVudWF0aW9uQ29sb3I7XFxuXFx0I2lmZGVmIFVTRV9UUkFOU01JU1NJT05NQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCB0cmFuc21pc3Npb25NYXA7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9USElDS05FU1NNQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCB0aGlja25lc3NNYXA7XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSB2ZWMyIHRyYW5zbWlzc2lvblNhbXBsZXJTaXplO1xcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHRyYW5zbWlzc2lvblNhbXBsZXJNYXA7XFxuXFx0dW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcblxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHR2ZWMzIGdldFZvbHVtZVRyYW5zbWlzc2lvblJheSggY29uc3QgaW4gdmVjMyBuLCBjb25zdCBpbiB2ZWMzIHYsIGNvbnN0IGluIGZsb2F0IHRoaWNrbmVzcywgY29uc3QgaW4gZmxvYXQgaW9yLCBjb25zdCBpbiBtYXQ0IG1vZGVsTWF0cml4ICkge1xcblxcdFxcdHZlYzMgcmVmcmFjdGlvblZlY3RvciA9IHJlZnJhY3QoIC0gdiwgbm9ybWFsaXplKCBuICksIDEuMCAvIGlvciApO1xcblxcdFxcdHZlYzMgbW9kZWxTY2FsZTtcXG5cXHRcXHRtb2RlbFNjYWxlLnggPSBsZW5ndGgoIHZlYzMoIG1vZGVsTWF0cml4WyAwIF0ueHl6ICkgKTtcXG5cXHRcXHRtb2RlbFNjYWxlLnkgPSBsZW5ndGgoIHZlYzMoIG1vZGVsTWF0cml4WyAxIF0ueHl6ICkgKTtcXG5cXHRcXHRtb2RlbFNjYWxlLnogPSBsZW5ndGgoIHZlYzMoIG1vZGVsTWF0cml4WyAyIF0ueHl6ICkgKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCByZWZyYWN0aW9uVmVjdG9yICkgKiB0aGlja25lc3MgKiBtb2RlbFNjYWxlO1xcblxcdH1cXG5cXHRmbG9hdCBhcHBseUlvclRvUm91Z2huZXNzKCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGZsb2F0IGlvciApIHtcXG5cXHRcXHRyZXR1cm4gcm91Z2huZXNzICogY2xhbXAoIGlvciAqIDIuMCAtIDIuMCwgMC4wLCAxLjAgKTtcXG5cXHR9XFxuXFx0dmVjNCBnZXRUcmFuc21pc3Npb25TYW1wbGUoIGNvbnN0IGluIHZlYzIgZnJhZ0Nvb3JkLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGZsb2F0IGlvciApIHtcXG5cXHRcXHRmbG9hdCBmcmFtZWJ1ZmZlckxvZCA9IGxvZzIoIHRyYW5zbWlzc2lvblNhbXBsZXJTaXplLnggKSAqIGFwcGx5SW9yVG9Sb3VnaG5lc3MoIHJvdWdobmVzcywgaW9yICk7XFxuXFx0XFx0I2lmZGVmIHRleHR1cmUyRExvZEVYVFxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkRMb2RFWFQoIHRyYW5zbWlzc2lvblNhbXBsZXJNYXAsIGZyYWdDb29yZC54eSwgZnJhbWVidWZmZXJMb2QgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkQoIHRyYW5zbWlzc2lvblNhbXBsZXJNYXAsIGZyYWdDb29yZC54eSwgZnJhbWVidWZmZXJMb2QgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuXFx0dmVjMyBhcHBseVZvbHVtZUF0dGVudWF0aW9uKCBjb25zdCBpbiB2ZWMzIHJhZGlhbmNlLCBjb25zdCBpbiBmbG9hdCB0cmFuc21pc3Npb25EaXN0YW5jZSwgY29uc3QgaW4gdmVjMyBhdHRlbnVhdGlvbkNvbG9yLCBjb25zdCBpbiBmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlICkge1xcblxcdFxcdGlmICggYXR0ZW51YXRpb25EaXN0YW5jZSA9PSAwLjAgKSB7XFxuXFx0XFx0XFx0cmV0dXJuIHJhZGlhbmNlO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0dmVjMyBhdHRlbnVhdGlvbkNvZWZmaWNpZW50ID0gLWxvZyggYXR0ZW51YXRpb25Db2xvciApIC8gYXR0ZW51YXRpb25EaXN0YW5jZTtcXG5cXHRcXHRcXHR2ZWMzIHRyYW5zbWl0dGFuY2UgPSBleHAoIC0gYXR0ZW51YXRpb25Db2VmZmljaWVudCAqIHRyYW5zbWlzc2lvbkRpc3RhbmNlICk7XFx0XFx0XFx0cmV0dXJuIHRyYW5zbWl0dGFuY2UgKiByYWRpYW5jZTtcXG5cXHRcXHR9XFxuXFx0fVxcblxcdHZlYzQgZ2V0SUJMVm9sdW1lUmVmcmFjdGlvbiggY29uc3QgaW4gdmVjMyBuLCBjb25zdCBpbiB2ZWMzIHYsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IsXFxuXFx0XFx0Y29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzcGVjdWxhckY5MCwgY29uc3QgaW4gdmVjMyBwb3NpdGlvbiwgY29uc3QgaW4gbWF0NCBtb2RlbE1hdHJpeCxcXG5cXHRcXHRjb25zdCBpbiBtYXQ0IHZpZXdNYXRyaXgsIGNvbnN0IGluIG1hdDQgcHJvak1hdHJpeCwgY29uc3QgaW4gZmxvYXQgaW9yLCBjb25zdCBpbiBmbG9hdCB0aGlja25lc3MsXFxuXFx0XFx0Y29uc3QgaW4gdmVjMyBhdHRlbnVhdGlvbkNvbG9yLCBjb25zdCBpbiBmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlICkge1xcblxcdFxcdHZlYzMgdHJhbnNtaXNzaW9uUmF5ID0gZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBuLCB2LCB0aGlja25lc3MsIGlvciwgbW9kZWxNYXRyaXggKTtcXG5cXHRcXHR2ZWMzIHJlZnJhY3RlZFJheUV4aXQgPSBwb3NpdGlvbiArIHRyYW5zbWlzc2lvblJheTtcXG5cXHRcXHR2ZWM0IG5kY1BvcyA9IHByb2pNYXRyaXggKiB2aWV3TWF0cml4ICogdmVjNCggcmVmcmFjdGVkUmF5RXhpdCwgMS4wICk7XFxuXFx0XFx0dmVjMiByZWZyYWN0aW9uQ29vcmRzID0gbmRjUG9zLnh5IC8gbmRjUG9zLnc7XFxuXFx0XFx0cmVmcmFjdGlvbkNvb3JkcyArPSAxLjA7XFxuXFx0XFx0cmVmcmFjdGlvbkNvb3JkcyAvPSAyLjA7XFxuXFx0XFx0dmVjNCB0cmFuc21pdHRlZExpZ2h0ID0gZ2V0VHJhbnNtaXNzaW9uU2FtcGxlKCByZWZyYWN0aW9uQ29vcmRzLCByb3VnaG5lc3MsIGlvciApO1xcblxcdFxcdHZlYzMgYXR0ZW51YXRlZENvbG9yID0gYXBwbHlWb2x1bWVBdHRlbnVhdGlvbiggdHJhbnNtaXR0ZWRMaWdodC5yZ2IsIGxlbmd0aCggdHJhbnNtaXNzaW9uUmF5ICksIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKTtcXG5cXHRcXHR2ZWMzIEYgPSBFbnZpcm9ubWVudEJSREYoIG4sIHYsIHNwZWN1bGFyQ29sb3IsIHNwZWN1bGFyRjkwLCByb3VnaG5lc3MgKTtcXG5cXHRcXHRyZXR1cm4gdmVjNCggKCAxLjAgLSBGICkgKiBhdHRlbnVhdGVkQ29sb3IgKiBkaWZmdXNlQ29sb3IsIHRyYW5zbWl0dGVkTGlnaHQuYSApO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIHV2X3BhcnNfZnJhZ21lbnQgPSBcIiNpZiAoIGRlZmluZWQoIFVTRV9VViApICYmICEgZGVmaW5lZCggVVZTX1ZFUlRFWF9PTkxZICkgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuI2VuZGlmXCI7XG5cbnZhciB1dl9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9VVlxcblxcdCNpZmRlZiBVVlNfVkVSVEVYX09OTFlcXG5cXHRcXHR2ZWMyIHZVdjtcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbiNlbmRpZlwiO1xuXG52YXIgdXZfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1VWXFxuXFx0dlV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcXG4jZW5kaWZcIjtcblxudmFyIHV2Ml9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2MjtcXG4jZW5kaWZcIjtcblxudmFyIHV2Ml9wYXJzX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXFxuXFx0YXR0cmlidXRlIHZlYzIgdXYyO1xcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcblxcdHVuaWZvcm0gbWF0MyB1djJUcmFuc2Zvcm07XFxuI2VuZGlmXCI7XG5cbnZhciB1djJfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2VXYyID0gKCB1djJUcmFuc2Zvcm0gKiB2ZWMzKCB1djIsIDEgKSApLnh5O1xcbiNlbmRpZlwiO1xuXG52YXIgd29ybGRwb3NfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIERJU1RBTkNFICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKSB8fCBkZWZpbmVkICggVVNFX1RSQU5TTUlTU0lPTiApXFxuXFx0dmVjNCB3b3JsZFBvc2l0aW9uID0gdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcblxcdCNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xcblxcdFxcdHdvcmxkUG9zaXRpb24gPSBpbnN0YW5jZU1hdHJpeCAqIHdvcmxkUG9zaXRpb247XFxuXFx0I2VuZGlmXFxuXFx0d29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogd29ybGRQb3NpdGlvbjtcXG4jZW5kaWZcIjtcblxuY29uc3QgdmVydGV4JGcgPSBcInZhcnlpbmcgdmVjMiB2VXY7XFxudW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbnZvaWQgbWFpbigpIHtcXG5cXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24ueHksIDEuMCwgMS4wICk7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRnID0gXCJ1bmlmb3JtIHNhbXBsZXIyRCB0MkQ7XFxudmFyeWluZyB2ZWMyIHZVdjtcXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCB0MkQsIHZVdiApO1xcblxcdCNpZmRlZiBERUNPREVfVklERU9fVEVYVFVSRVxcblxcdFxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG1peCggcG93KCBnbF9GcmFnQ29sb3IucmdiICogMC45NDc4NjcyOTg2ICsgdmVjMyggMC4wNTIxMzI3MDE0ICksIHZlYzMoIDIuNCApICksIGdsX0ZyYWdDb2xvci5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIGdsX0ZyYWdDb2xvci5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgZ2xfRnJhZ0NvbG9yLncgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCRmID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRmID0gXCIjaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzMgdlJlZmxlY3QgPSB2V29ybGREaXJlY3Rpb247XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSBlbnZDb2xvcjtcXG5cXHRnbF9GcmFnQ29sb3IuYSAqPSBvcGFjaXR5O1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGUgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52YXJ5aW5nIHZlYzIgdkhpZ2hQcmVjaXNpb25aVztcXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2SGlnaFByZWNpc2lvblpXID0gZ2xfUG9zaXRpb24uenc7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRlID0gXCIjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudmFyeWluZyB2ZWMyIHZIaWdoUHJlY2lzaW9uWlc7XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAxLjAgKTtcXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0ZGlmZnVzZUNvbG9yLmEgPSBvcGFjaXR5O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdGZsb2F0IGZyYWdDb29yZFogPSAwLjUgKiB2SGlnaFByZWNpc2lvblpXWzBdIC8gdkhpZ2hQcmVjaXNpb25aV1sxXSArIDAuNTtcXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggdmVjMyggMS4wIC0gZnJhZ0Nvb3JkWiApLCBvcGFjaXR5ICk7XFxuXFx0I2VsaWYgREVQVEhfUEFDS0lORyA9PSAzMjAxXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBmcmFnQ29vcmRaICk7XFxuXFx0I2VuZGlmXFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkZCA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkZCA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnVuaWZvcm0gdmVjMyByZWZlcmVuY2VQb3NpdGlvbjtcXG51bmlmb3JtIGZsb2F0IG5lYXJEaXN0YW5jZTtcXG51bmlmb3JtIGZsb2F0IGZhckRpc3RhbmNlO1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbiAoKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0ZmxvYXQgZGlzdCA9IGxlbmd0aCggdldvcmxkUG9zaXRpb24gLSByZWZlcmVuY2VQb3NpdGlvbiApO1xcblxcdGRpc3QgPSAoIGRpc3QgLSBuZWFyRGlzdGFuY2UgKSAvICggZmFyRGlzdGFuY2UgLSBuZWFyRGlzdGFuY2UgKTtcXG5cXHRkaXN0ID0gc2F0dXJhdGUoIGRpc3QgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGRpc3QgKTtcXG59XCI7XG5cbmNvbnN0IHZlcnRleCRjID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRjID0gXCJ1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XFxudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2ZWMzIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggdldvcmxkRGlyZWN0aW9uICk7XFxuXFx0dmVjMiBzYW1wbGVVViA9IGVxdWlyZWN0VXYoIGRpcmVjdGlvbiApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGIgPSBcInVuaWZvcm0gZmxvYXQgc2NhbGU7XFxuYXR0cmlidXRlIGZsb2F0IGxpbmVEaXN0YW5jZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdHZMaW5lRGlzdGFuY2UgPSBzY2FsZSAqIGxpbmVEaXN0YW5jZTtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRiID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcXG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xcblxcdFxcdGRpc2NhcmQ7XFxuXFx0fVxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGEgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxcblxcdCNpZiBkZWZpbmVkICggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQgKCBVU0VfU0tJTk5JTkcgKVxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGEgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0dmVjNCBsaWdodE1hcFRleGVsID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBsaWdodE1hcFRleGVsLnJnYiAqIGxpZ2h0TWFwSW50ZW5zaXR5ICogUkVDSVBST0NBTF9QSTtcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSB2ZWMzKCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkOSA9IFwiI2RlZmluZSBMQU1CRVJUXFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbnZhcnlpbmcgdmVjMyB2SW5kaXJlY3RGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuXFx0dmFyeWluZyB2ZWMzIHZJbmRpcmVjdEJhY2s7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2xhbWJlcnRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkOSA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG52YXJ5aW5nIHZlYzMgdkxpZ2h0RnJvbnQ7XFxudmFyeWluZyB2ZWMzIHZJbmRpcmVjdEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG5cXHR2YXJ5aW5nIHZlYzMgdkluZGlyZWN0QmFjaztcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFza19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSAoIGdsX0Zyb250RmFjaW5nICkgPyB2SW5kaXJlY3RGcm9udCA6IHZJbmRpcmVjdEJhY2s7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdkluZGlyZWN0RnJvbnQ7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGxpZ2h0bWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBCUkRGX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9ICggZ2xfRnJvbnRGYWNpbmcgKSA/IHZMaWdodEZyb250IDogdkxpZ2h0QmFjaztcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSB2TGlnaHRGcm9udDtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICo9IEJSREZfTGFtYmVydCggZGlmZnVzZUNvbG9yLnJnYiApICogZ2V0U2hhZG93TWFzaygpO1xcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkOCA9IFwiI2RlZmluZSBNQVRDQVBcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkOCA9IFwiI2RlZmluZSBNQVRDQVBcXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBzYW1wbGVyMkQgbWF0Y2FwO1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdHZlYzMgdmlld0RpciA9IG5vcm1hbGl6ZSggdlZpZXdQb3NpdGlvbiApO1xcblxcdHZlYzMgeCA9IG5vcm1hbGl6ZSggdmVjMyggdmlld0Rpci56LCAwLjAsIC0gdmlld0Rpci54ICkgKTtcXG5cXHR2ZWMzIHkgPSBjcm9zcyggdmlld0RpciwgeCApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKCBkb3QoIHgsIG5vcm1hbCApLCBkb3QoIHksIG5vcm1hbCApICkgKiAwLjQ5NSArIDAuNTtcXG5cXHQjaWZkZWYgVVNFX01BVENBUFxcblxcdFxcdHZlYzQgbWF0Y2FwQ29sb3IgPSB0ZXh0dXJlMkQoIG1hdGNhcCwgdXYgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzQgbWF0Y2FwQ29sb3IgPSB2ZWM0KCB2ZWMzKCBtaXgoIDAuMiwgMC44LCB1di55ICkgKSwgMS4wICk7XFxuXFx0I2VuZGlmXFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYiAqIG1hdGNhcENvbG9yLnJnYjtcXG5cXHQjaW5jbHVkZSA8b3V0cHV0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ3ID0gXCIjZGVmaW5lIE5PUk1BTFxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNyA9IFwiI2RlZmluZSBOT1JNQUxcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrTm9ybWFsVG9SR0IoIG5vcm1hbCApLCBvcGFjaXR5ICk7XFxuXFx0I2lmZGVmIE9QQVFVRVxcblxcdFxcdGdsX0ZyYWdDb2xvci5hID0gMS4wO1xcblxcdCNlbmRpZlxcbn1cIjtcblxuY29uc3QgdmVydGV4JDYgPSBcIiNkZWZpbmUgUEhPTkdcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQ2ID0gXCIjZGVmaW5lIFBIT05HXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gdmVjMyBzcGVjdWxhcjtcXG51bmlmb3JtIGZsb2F0IHNoaW5pbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfcGhvbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8b3V0cHV0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ1ID0gXCIjZGVmaW5lIFNUQU5EQVJEXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cXG5cXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxcblxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxuI2VuZGlmXFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQ1ID0gXCIjZGVmaW5lIFNUQU5EQVJEXFxuI2lmZGVmIFBIWVNJQ0FMXFxuXFx0I2RlZmluZSBJT1JcXG5cXHQjZGVmaW5lIFNQRUNVTEFSXFxuI2VuZGlmXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgcm91Z2huZXNzO1xcbnVuaWZvcm0gZmxvYXQgbWV0YWxuZXNzO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZkZWYgSU9SXFxuXFx0dW5pZm9ybSBmbG9hdCBpb3I7XFxuI2VuZGlmXFxuI2lmZGVmIFNQRUNVTEFSXFxuXFx0dW5pZm9ybSBmbG9hdCBzcGVjdWxhckludGVuc2l0eTtcXG5cXHR1bmlmb3JtIHZlYzMgc3BlY3VsYXJDb2xvcjtcXG5cXHQjaWZkZWYgVVNFX1NQRUNVTEFSSU5URU5TSVRZTUFQXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJJbnRlbnNpdHlNYXA7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9TUEVDVUxBUkNPTE9STUFQXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJDb2xvck1hcDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdHVuaWZvcm0gZmxvYXQgY2xlYXJjb2F0O1xcblxcdHVuaWZvcm0gZmxvYXQgY2xlYXJjb2F0Um91Z2huZXNzO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU0hFRU5cXG5cXHR1bmlmb3JtIHZlYzMgc2hlZW5Db2xvcjtcXG5cXHR1bmlmb3JtIGZsb2F0IHNoZWVuUm91Z2huZXNzO1xcblxcdCNpZmRlZiBVU0VfU0hFRU5DT0xPUk1BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNoZWVuQ29sb3JNYXA7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9TSEVFTlJPVUdITkVTU01BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNoZWVuUm91Z2huZXNzTWFwO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGVhcmNvYXRfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1ldGFsbmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIHRvdGFsRGlmZnVzZSA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyB0b3RhbFNwZWN1bGFyID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyO1xcblxcdCNpbmNsdWRlIDx0cmFuc21pc3Npb25fZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdG90YWxEaWZmdXNlICsgdG90YWxTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaWZkZWYgVVNFX1NIRUVOXFxuXFx0XFx0ZmxvYXQgc2hlZW5FbmVyZ3lDb21wID0gMS4wIC0gMC4xNTcgKiBtYXgzKCBtYXRlcmlhbC5zaGVlbkNvbG9yICk7XFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG91dGdvaW5nTGlnaHQgKiBzaGVlbkVuZXJneUNvbXAgKyBzaGVlblNwZWN1bGFyO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0XFx0ZmxvYXQgZG90TlZjYyA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0XFx0dmVjMyBGY2MgPSBGX1NjaGxpY2soIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIGRvdE5WY2MgKTtcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqICggMS4wIC0gbWF0ZXJpYWwuY2xlYXJjb2F0ICogRmNjICkgKyBjbGVhcmNvYXRTcGVjdWxhciAqIG1hdGVyaWFsLmNsZWFyY29hdDtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8b3V0cHV0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ0ID0gXCIjZGVmaW5lIFRPT05cXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNCA9IFwiI2RlZmluZSBUT09OXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Z3JhZGllbnRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3Rvb25fZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkMyA9IFwidW5pZm9ybSBmbG9hdCBzaXplO1xcbnVuaWZvcm0gZmxvYXQgc2NhbGU7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9pbnRTaXplID0gc2l6ZTtcXG5cXHQjaWZkZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9IGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKTtcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBnbF9Qb2ludFNpemUgKj0gKCBzY2FsZSAvIC0gbXZQb3NpdGlvbi56ICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkMyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX3BhcnRpY2xlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdCNpbmNsdWRlIDxvdXRwdXRfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQyID0gXCIjaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkMiA9IFwidW5pZm9ybSB2ZWMzIGNvbG9yO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFza19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciwgb3BhY2l0eSAqICggMS4wIC0gZ2V0U2hhZG93TWFzaygpICkgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JDEgPSBcInVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxudW5pZm9ybSB2ZWMyIGNlbnRlcjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xcblxcdHZlYzIgc2NhbGU7XFxuXFx0c2NhbGUueCA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDAgXS54LCBtb2RlbE1hdHJpeFsgMCBdLnksIG1vZGVsTWF0cml4WyAwIF0ueiApICk7XFxuXFx0c2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54LCBtb2RlbE1hdHJpeFsgMSBdLnksIG1vZGVsTWF0cml4WyAxIF0ueiApICk7XFxuXFx0I2lmbmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Ym9vbCBpc1BlcnNwZWN0aXZlID0gaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApO1xcblxcdFxcdGlmICggaXNQZXJzcGVjdGl2ZSApIHNjYWxlICo9IC0gbXZQb3NpdGlvbi56O1xcblxcdCNlbmRpZlxcblxcdHZlYzIgYWxpZ25lZFBvc2l0aW9uID0gKCBwb3NpdGlvbi54eSAtICggY2VudGVyIC0gdmVjMiggMC41ICkgKSApICogc2NhbGU7XFxuXFx0dmVjMiByb3RhdGVkUG9zaXRpb247XFxuXFx0cm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG5cXHRtdlBvc2l0aW9uLnh5ICs9IHJvdGF0ZWRQb3NpdGlvbjtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQxID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgU2hhZGVyQ2h1bmsgPSB7XG5cdGFscGhhbWFwX2ZyYWdtZW50OiBhbHBoYW1hcF9mcmFnbWVudCxcblx0YWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCxcblx0YWxwaGF0ZXN0X2ZyYWdtZW50OiBhbHBoYXRlc3RfZnJhZ21lbnQsXG5cdGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50OiBhbHBoYXRlc3RfcGFyc19mcmFnbWVudCxcblx0YW9tYXBfZnJhZ21lbnQ6IGFvbWFwX2ZyYWdtZW50LFxuXHRhb21hcF9wYXJzX2ZyYWdtZW50OiBhb21hcF9wYXJzX2ZyYWdtZW50LFxuXHRiZWdpbl92ZXJ0ZXg6IGJlZ2luX3ZlcnRleCxcblx0YmVnaW5ub3JtYWxfdmVydGV4OiBiZWdpbm5vcm1hbF92ZXJ0ZXgsXG5cdGJzZGZzOiBic2Rmcyxcblx0YnVtcG1hcF9wYXJzX2ZyYWdtZW50OiBidW1wbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudDogY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudDogY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQsXG5cdGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleDogY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4LFxuXHRjbGlwcGluZ19wbGFuZXNfdmVydGV4OiBjbGlwcGluZ19wbGFuZXNfdmVydGV4LFxuXHRjb2xvcl9mcmFnbWVudDogY29sb3JfZnJhZ21lbnQsXG5cdGNvbG9yX3BhcnNfZnJhZ21lbnQ6IGNvbG9yX3BhcnNfZnJhZ21lbnQsXG5cdGNvbG9yX3BhcnNfdmVydGV4OiBjb2xvcl9wYXJzX3ZlcnRleCxcblx0Y29sb3JfdmVydGV4OiBjb2xvcl92ZXJ0ZXgsXG5cdGNvbW1vbjogY29tbW9uLFxuXHRjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ6IGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudCxcblx0ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg6IGRlZmF1bHRub3JtYWxfdmVydGV4LFxuXHRkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg6IGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCxcblx0ZGlzcGxhY2VtZW50bWFwX3ZlcnRleDogZGlzcGxhY2VtZW50bWFwX3ZlcnRleCxcblx0ZW1pc3NpdmVtYXBfZnJhZ21lbnQ6IGVtaXNzaXZlbWFwX2ZyYWdtZW50LFxuXHRlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50LFxuXHRlbmNvZGluZ3NfZnJhZ21lbnQ6IGVuY29kaW5nc19mcmFnbWVudCxcblx0ZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQ6IGVuY29kaW5nc19wYXJzX2ZyYWdtZW50LFxuXHRlbnZtYXBfZnJhZ21lbnQ6IGVudm1hcF9mcmFnbWVudCxcblx0ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3BhcnNfdmVydGV4OiBlbnZtYXBfcGFyc192ZXJ0ZXgsXG5cdGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3ZlcnRleDogZW52bWFwX3ZlcnRleCxcblx0Zm9nX3ZlcnRleDogZm9nX3ZlcnRleCxcblx0Zm9nX3BhcnNfdmVydGV4OiBmb2dfcGFyc192ZXJ0ZXgsXG5cdGZvZ19mcmFnbWVudDogZm9nX2ZyYWdtZW50LFxuXHRmb2dfcGFyc19mcmFnbWVudDogZm9nX3BhcnNfZnJhZ21lbnQsXG5cdGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ6IGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX2ZyYWdtZW50OiBsaWdodG1hcF9mcmFnbWVudCxcblx0bGlnaHRtYXBfcGFyc19mcmFnbWVudDogbGlnaHRtYXBfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX2xhbWJlcnRfdmVydGV4OiBsaWdodHNfbGFtYmVydF92ZXJ0ZXgsXG5cdGxpZ2h0c19wYXJzX2JlZ2luOiBsaWdodHNfcGFyc19iZWdpbixcblx0bGlnaHRzX3Rvb25fZnJhZ21lbnQ6IGxpZ2h0c190b29uX2ZyYWdtZW50LFxuXHRsaWdodHNfdG9vbl9wYXJzX2ZyYWdtZW50OiBsaWdodHNfdG9vbl9wYXJzX2ZyYWdtZW50LFxuXHRsaWdodHNfcGhvbmdfZnJhZ21lbnQ6IGxpZ2h0c19waG9uZ19mcmFnbWVudCxcblx0bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50LFxuXHRsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ6IGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCxcblx0bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50LFxuXHRsaWdodHNfZnJhZ21lbnRfYmVnaW46IGxpZ2h0c19mcmFnbWVudF9iZWdpbixcblx0bGlnaHRzX2ZyYWdtZW50X21hcHM6IGxpZ2h0c19mcmFnbWVudF9tYXBzLFxuXHRsaWdodHNfZnJhZ21lbnRfZW5kOiBsaWdodHNfZnJhZ21lbnRfZW5kLFxuXHRsb2dkZXB0aGJ1Zl9mcmFnbWVudDogbG9nZGVwdGhidWZfZnJhZ21lbnQsXG5cdGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ6IGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXG5cdGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4OiBsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcblx0bG9nZGVwdGhidWZfdmVydGV4OiBsb2dkZXB0aGJ1Zl92ZXJ0ZXgsXG5cdG1hcF9mcmFnbWVudDogbWFwX2ZyYWdtZW50LFxuXHRtYXBfcGFyc19mcmFnbWVudDogbWFwX3BhcnNfZnJhZ21lbnQsXG5cdG1hcF9wYXJ0aWNsZV9mcmFnbWVudDogbWFwX3BhcnRpY2xlX2ZyYWdtZW50LFxuXHRtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudDogbWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQsXG5cdG1ldGFsbmVzc21hcF9mcmFnbWVudDogbWV0YWxuZXNzbWFwX2ZyYWdtZW50LFxuXHRtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudDogbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdG1vcnBoY29sb3JfdmVydGV4OiBtb3JwaGNvbG9yX3ZlcnRleCxcblx0bW9ycGhub3JtYWxfdmVydGV4OiBtb3JwaG5vcm1hbF92ZXJ0ZXgsXG5cdG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4OiBtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxcblx0bW9ycGh0YXJnZXRfdmVydGV4OiBtb3JwaHRhcmdldF92ZXJ0ZXgsXG5cdG5vcm1hbF9mcmFnbWVudF9iZWdpbjogbm9ybWFsX2ZyYWdtZW50X2JlZ2luLFxuXHRub3JtYWxfZnJhZ21lbnRfbWFwczogbm9ybWFsX2ZyYWdtZW50X21hcHMsXG5cdG5vcm1hbF9wYXJzX2ZyYWdtZW50OiBub3JtYWxfcGFyc19mcmFnbWVudCxcblx0bm9ybWFsX3BhcnNfdmVydGV4OiBub3JtYWxfcGFyc192ZXJ0ZXgsXG5cdG5vcm1hbF92ZXJ0ZXg6IG5vcm1hbF92ZXJ0ZXgsXG5cdG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50OiBub3JtYWxtYXBfcGFyc19mcmFnbWVudCxcblx0Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbjogY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbixcblx0Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzOiBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHMsXG5cdGNsZWFyY29hdF9wYXJzX2ZyYWdtZW50OiBjbGVhcmNvYXRfcGFyc19mcmFnbWVudCxcblx0b3V0cHV0X2ZyYWdtZW50OiBvdXRwdXRfZnJhZ21lbnQsXG5cdHBhY2tpbmc6IHBhY2tpbmcsXG5cdHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ6IHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQsXG5cdHByb2plY3RfdmVydGV4OiBwcm9qZWN0X3ZlcnRleCxcblx0ZGl0aGVyaW5nX2ZyYWdtZW50OiBkaXRoZXJpbmdfZnJhZ21lbnQsXG5cdGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50OiBkaXRoZXJpbmdfcGFyc19mcmFnbWVudCxcblx0cm91Z2huZXNzbWFwX2ZyYWdtZW50OiByb3VnaG5lc3NtYXBfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50OiByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ6IHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50LFxuXHRzaGFkb3dtYXBfcGFyc192ZXJ0ZXg6IHNoYWRvd21hcF9wYXJzX3ZlcnRleCxcblx0c2hhZG93bWFwX3ZlcnRleDogc2hhZG93bWFwX3ZlcnRleCxcblx0c2hhZG93bWFza19wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQsXG5cdHNraW5iYXNlX3ZlcnRleDogc2tpbmJhc2VfdmVydGV4LFxuXHRza2lubmluZ19wYXJzX3ZlcnRleDogc2tpbm5pbmdfcGFyc192ZXJ0ZXgsXG5cdHNraW5uaW5nX3ZlcnRleDogc2tpbm5pbmdfdmVydGV4LFxuXHRza2lubm9ybWFsX3ZlcnRleDogc2tpbm5vcm1hbF92ZXJ0ZXgsXG5cdHNwZWN1bGFybWFwX2ZyYWdtZW50OiBzcGVjdWxhcm1hcF9mcmFnbWVudCxcblx0c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudDogc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfZnJhZ21lbnQ6IHRvbmVtYXBwaW5nX2ZyYWdtZW50LFxuXHR0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50OiB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50LFxuXHR0cmFuc21pc3Npb25fZnJhZ21lbnQ6IHRyYW5zbWlzc2lvbl9mcmFnbWVudCxcblx0dHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQ6IHRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50LFxuXHR1dl9wYXJzX2ZyYWdtZW50OiB1dl9wYXJzX2ZyYWdtZW50LFxuXHR1dl9wYXJzX3ZlcnRleDogdXZfcGFyc192ZXJ0ZXgsXG5cdHV2X3ZlcnRleDogdXZfdmVydGV4LFxuXHR1djJfcGFyc19mcmFnbWVudDogdXYyX3BhcnNfZnJhZ21lbnQsXG5cdHV2Ml9wYXJzX3ZlcnRleDogdXYyX3BhcnNfdmVydGV4LFxuXHR1djJfdmVydGV4OiB1djJfdmVydGV4LFxuXHR3b3JsZHBvc192ZXJ0ZXg6IHdvcmxkcG9zX3ZlcnRleCxcblxuXHRiYWNrZ3JvdW5kX3ZlcnQ6IHZlcnRleCRnLFxuXHRiYWNrZ3JvdW5kX2ZyYWc6IGZyYWdtZW50JGcsXG5cdGN1YmVfdmVydDogdmVydGV4JGYsXG5cdGN1YmVfZnJhZzogZnJhZ21lbnQkZixcblx0ZGVwdGhfdmVydDogdmVydGV4JGUsXG5cdGRlcHRoX2ZyYWc6IGZyYWdtZW50JGUsXG5cdGRpc3RhbmNlUkdCQV92ZXJ0OiB2ZXJ0ZXgkZCxcblx0ZGlzdGFuY2VSR0JBX2ZyYWc6IGZyYWdtZW50JGQsXG5cdGVxdWlyZWN0X3ZlcnQ6IHZlcnRleCRjLFxuXHRlcXVpcmVjdF9mcmFnOiBmcmFnbWVudCRjLFxuXHRsaW5lZGFzaGVkX3ZlcnQ6IHZlcnRleCRiLFxuXHRsaW5lZGFzaGVkX2ZyYWc6IGZyYWdtZW50JGIsXG5cdG1lc2hiYXNpY192ZXJ0OiB2ZXJ0ZXgkYSxcblx0bWVzaGJhc2ljX2ZyYWc6IGZyYWdtZW50JGEsXG5cdG1lc2hsYW1iZXJ0X3ZlcnQ6IHZlcnRleCQ5LFxuXHRtZXNobGFtYmVydF9mcmFnOiBmcmFnbWVudCQ5LFxuXHRtZXNobWF0Y2FwX3ZlcnQ6IHZlcnRleCQ4LFxuXHRtZXNobWF0Y2FwX2ZyYWc6IGZyYWdtZW50JDgsXG5cdG1lc2hub3JtYWxfdmVydDogdmVydGV4JDcsXG5cdG1lc2hub3JtYWxfZnJhZzogZnJhZ21lbnQkNyxcblx0bWVzaHBob25nX3ZlcnQ6IHZlcnRleCQ2LFxuXHRtZXNocGhvbmdfZnJhZzogZnJhZ21lbnQkNixcblx0bWVzaHBoeXNpY2FsX3ZlcnQ6IHZlcnRleCQ1LFxuXHRtZXNocGh5c2ljYWxfZnJhZzogZnJhZ21lbnQkNSxcblx0bWVzaHRvb25fdmVydDogdmVydGV4JDQsXG5cdG1lc2h0b29uX2ZyYWc6IGZyYWdtZW50JDQsXG5cdHBvaW50c192ZXJ0OiB2ZXJ0ZXgkMyxcblx0cG9pbnRzX2ZyYWc6IGZyYWdtZW50JDMsXG5cdHNoYWRvd192ZXJ0OiB2ZXJ0ZXgkMixcblx0c2hhZG93X2ZyYWc6IGZyYWdtZW50JDIsXG5cdHNwcml0ZV92ZXJ0OiB2ZXJ0ZXgkMSxcblx0c3ByaXRlX2ZyYWc6IGZyYWdtZW50JDFcbn07XG5cbi8qKlxuICogVW5pZm9ybXMgbGlicmFyeSBmb3Igc2hhcmVkIHdlYmdsIHNoYWRlcnNcbiAqL1xuXG5jb25zdCBVbmlmb3Jtc0xpYiA9IHtcblxuXHRjb21tb246IHtcblxuXHRcdGRpZmZ1c2U6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhmZmZmZmYgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0dXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfSxcblx0XHR1djJUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfSxcblxuXHRcdGFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YWxwaGFUZXN0OiB7IHZhbHVlOiAwIH1cblxuXHR9LFxuXG5cdHNwZWN1bGFybWFwOiB7XG5cblx0XHRzcGVjdWxhck1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXG5cdH0sXG5cblx0ZW52bWFwOiB7XG5cblx0XHRlbnZNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRmbGlwRW52TWFwOiB7IHZhbHVlOiAtIDEgfSxcblx0XHRyZWZsZWN0aXZpdHk6IHsgdmFsdWU6IDEuMCB9LCAvLyBiYXNpYywgbGFtYmVydCwgcGhvbmdcblx0XHRpb3I6IHsgdmFsdWU6IDEuNSB9LCAvLyBwaHlzaWNhbFxuXHRcdHJlZnJhY3Rpb25SYXRpbzogeyB2YWx1ZTogMC45OCB9IC8vIGJhc2ljLCBsYW1iZXJ0LCBwaG9uZ1xuXG5cdH0sXG5cblx0YW9tYXA6IHtcblxuXHRcdGFvTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YW9NYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bGlnaHRtYXA6IHtcblxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0ZW1pc3NpdmVtYXA6IHtcblxuXHRcdGVtaXNzaXZlTWFwOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdGJ1bXBtYXA6IHtcblxuXHRcdGJ1bXBNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRidW1wU2NhbGU6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bm9ybWFsbWFwOiB7XG5cblx0XHRub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRub3JtYWxTY2FsZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDEsIDEgKSB9XG5cblx0fSxcblxuXHRkaXNwbGFjZW1lbnRtYXA6IHtcblxuXHRcdGRpc3BsYWNlbWVudE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0ZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRyb3VnaG5lc3NtYXA6IHtcblxuXHRcdHJvdWdobmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRtZXRhbG5lc3NtYXA6IHtcblxuXHRcdG1ldGFsbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRncmFkaWVudG1hcDoge1xuXG5cdFx0Z3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Zm9nOiB7XG5cblx0XHRmb2dEZW5zaXR5OiB7IHZhbHVlOiAwLjAwMDI1IH0sXG5cdFx0Zm9nTmVhcjogeyB2YWx1ZTogMSB9LFxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxuXHRcdGZvZ0NvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfVxuXG5cdH0sXG5cblx0bGlnaHRzOiB7XG5cblx0XHRhbWJpZW50TGlnaHRDb2xvcjogeyB2YWx1ZTogW10gfSxcblxuXHRcdGxpZ2h0UHJvYmU6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRkaXJlY3Rpb25hbExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGRpcmVjdGlvbjoge30sXG5cdFx0XHRjb2xvcjoge31cblx0XHR9IH0sXG5cblx0XHRkaXJlY3Rpb25hbExpZ2h0U2hhZG93czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93Tm9ybWFsQmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge31cblx0XHR9IH0sXG5cblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcblxuXHRcdHNwb3RMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRjb2xvcjoge30sXG5cdFx0XHRwb3NpdGlvbjoge30sXG5cdFx0XHRkaXJlY3Rpb246IHt9LFxuXHRcdFx0ZGlzdGFuY2U6IHt9LFxuXHRcdFx0Y29uZUNvczoge30sXG5cdFx0XHRwZW51bWJyYUNvczoge30sXG5cdFx0XHRkZWNheToge31cblx0XHR9IH0sXG5cblx0XHRzcG90TGlnaHRTaGFkb3dzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiB7fSxcblx0XHRcdHNoYWRvd1JhZGl1czoge30sXG5cdFx0XHRzaGFkb3dNYXBTaXplOiB7fVxuXHRcdH0gfSxcblxuXHRcdHNwb3RTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0c3BvdFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcblxuXHRcdHBvaW50TGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0ZGVjYXk6IHt9LFxuXHRcdFx0ZGlzdGFuY2U6IHt9XG5cdFx0fSB9LFxuXG5cdFx0cG9pbnRMaWdodFNoYWRvd3M6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRzaGFkb3dCaWFzOiB7fSxcblx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9LFxuXHRcdFx0c2hhZG93Q2FtZXJhTmVhcjoge30sXG5cdFx0XHRzaGFkb3dDYW1lcmFGYXI6IHt9XG5cdFx0fSB9LFxuXG5cdFx0cG9pbnRTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0cG9pbnRTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRoZW1pc3BoZXJlTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdHNreUNvbG9yOiB7fSxcblx0XHRcdGdyb3VuZENvbG9yOiB7fVxuXHRcdH0gfSxcblxuXHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IEJSREYgZGF0YSBuZWVkcyB0byBiZSBtb3ZlZCBmcm9tIGV4YW1wbGUgdG8gbWFpbiBzcmNcblx0XHRyZWN0QXJlYUxpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdHdpZHRoOiB7fSxcblx0XHRcdGhlaWdodDoge31cblx0XHR9IH0sXG5cblx0XHRsdGNfMTogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGx0Y18yOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdHBvaW50czoge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweGZmZmZmZiApIH0sXG5cdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0c2l6ZTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0c2NhbGU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YWxwaGFUZXN0OiB7IHZhbHVlOiAwIH0sXG5cdFx0dXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfVxuXG5cdH0sXG5cblx0c3ByaXRlOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblx0XHRjZW50ZXI6IHsgdmFsdWU6IG5ldyBWZWN0b3IyKCAwLjUsIDAuNSApIH0sXG5cdFx0cm90YXRpb246IHsgdmFsdWU6IDAuMCB9LFxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YWxwaGFUZXN0OiB7IHZhbHVlOiAwIH0sXG5cdFx0dXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfVxuXG5cdH1cblxufTtcblxuY29uc3QgU2hhZGVyTGliID0ge1xuXG5cdGJhc2ljOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNoYmFzaWNfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX2ZyYWdcblxuXHR9LFxuXG5cdGxhbWJlcnQ6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF9mcmFnXG5cblx0fSxcblxuXHRwaG9uZzoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdFx0XHRzcGVjdWxhcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweDExMTExMSApIH0sXG5cdFx0XHRcdHNoaW5pbmVzczogeyB2YWx1ZTogMzAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBob25nX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ19mcmFnXG5cblx0fSxcblxuXHRzdGFuZGFyZDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5yb3VnaG5lc3NtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5tZXRhbG5lc3NtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdFx0cm91Z2huZXNzOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRcdFx0bWV0YWxuZXNzOiB7IHZhbHVlOiAwLjAgfSxcblx0XHRcdFx0ZW52TWFwSW50ZW5zaXR5OiB7IHZhbHVlOiAxIH0gLy8gdGVtcG9yYXJ5XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWdcblxuXHR9LFxuXG5cdHRvb246IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZ3JhZGllbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHRvb25fdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHRvb25fZnJhZ1xuXG5cdH0sXG5cblx0bWF0Y2FwOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0bWF0Y2FwOiB7IHZhbHVlOiBudWxsIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG1hdGNhcF9mcmFnXG5cblx0fSxcblxuXHRwb2ludHM6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5wb2ludHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfZnJhZ1xuXG5cdH0sXG5cblx0ZGFzaGVkOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0e1xuXHRcdFx0XHRzY2FsZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHRkYXNoU2l6ZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHR0b3RhbFNpemU6IHsgdmFsdWU6IDIgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubGluZWRhc2hlZF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX2ZyYWdcblxuXHR9LFxuXG5cdGRlcHRoOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF9mcmFnXG5cblx0fSxcblxuXHRub3JtYWw6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG5vcm1hbF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobm9ybWFsX2ZyYWdcblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLnNwcml0ZSxcblx0XHRcdFVuaWZvcm1zTGliLmZvZ1xuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc3ByaXRlX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV9mcmFnXG5cblx0fSxcblxuXHRiYWNrZ3JvdW5kOiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdHQyRDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZF9mcmFnXG5cblx0fSxcblx0LyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvL1x0Q3ViZSBtYXAgc2hhZGVyXG5cdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Y3ViZToge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdHtcblx0XHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmN1YmVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV9mcmFnXG5cblx0fSxcblxuXHRlcXVpcmVjdDoge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHRFcXVpcmVjdDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X2ZyYWdcblxuXHR9LFxuXG5cdGRpc3RhbmNlUkdCQToge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdHtcblx0XHRcdFx0cmVmZXJlbmNlUG9zaXRpb246IHsgdmFsdWU6IG5ldyBWZWN0b3IzKCkgfSxcblx0XHRcdFx0bmVhckRpc3RhbmNlOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdGZhckRpc3RhbmNlOiB7IHZhbHVlOiAxMDAwIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfZnJhZ1xuXG5cdH0sXG5cblx0c2hhZG93OiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0e1xuXHRcdFx0XHRjb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwICkgfSxcblx0XHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cblx0XHRcdH0sXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5zaGFkb3dfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X2ZyYWdcblxuXHR9XG5cbn07XG5cblNoYWRlckxpYi5waHlzaWNhbCA9IHtcblxuXHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFNoYWRlckxpYi5zdGFuZGFyZC51bmlmb3Jtcyxcblx0XHR7XG5cdFx0XHRjbGVhcmNvYXQ6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGNsZWFyY29hdE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0Y2xlYXJjb2F0Um91Z2huZXNzOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGNsZWFyY29hdE5vcm1hbFNjYWxlOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMSwgMSApIH0sXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHNoZWVuOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRzaGVlbkNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdHNoZWVuQ29sb3JNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHNoZWVuUm91Z2huZXNzOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRzaGVlblJvdWdobmVzc01hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0dHJhbnNtaXNzaW9uOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHR0cmFuc21pc3Npb25NYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRyYW5zbWlzc2lvblNhbXBsZXJTaXplOiB7IHZhbHVlOiBuZXcgVmVjdG9yMigpIH0sXG5cdFx0XHR0cmFuc21pc3Npb25TYW1wbGVyTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0aGlja25lc3M6IHsgdmFsdWU6IDAgfSxcblx0XHRcdHRoaWNrbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0YXR0ZW51YXRpb25EaXN0YW5jZTogeyB2YWx1ZTogMCB9LFxuXHRcdFx0YXR0ZW51YXRpb25Db2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRzcGVjdWxhckludGVuc2l0eTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHlNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHNwZWN1bGFyQ29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciggMSwgMSwgMSApIH0sXG5cdFx0XHRzcGVjdWxhckNvbG9yTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0fVxuXHRdICksXG5cblx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfdmVydCxcblx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF9mcmFnXG5cbn07XG5cbmZ1bmN0aW9uIFdlYkdMQmFja2dyb3VuZCggcmVuZGVyZXIsIGN1YmVtYXBzLCBzdGF0ZSwgb2JqZWN0cywgYWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRjb25zdCBjbGVhckNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHRsZXQgY2xlYXJBbHBoYSA9IGFscGhhID09PSB0cnVlID8gMCA6IDE7XG5cblx0bGV0IHBsYW5lTWVzaDtcblx0bGV0IGJveE1lc2g7XG5cblx0bGV0IGN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IDA7XG5cdGxldCBjdXJyZW50VG9uZW1hcHBpbmcgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIHJlbmRlciggcmVuZGVyTGlzdCwgc2NlbmUgKSB7XG5cblx0XHRsZXQgZm9yY2VDbGVhciA9IGZhbHNlO1xuXHRcdGxldCBiYWNrZ3JvdW5kID0gc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSA/IHNjZW5lLmJhY2tncm91bmQgOiBudWxsO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRiYWNrZ3JvdW5kID0gY3ViZW1hcHMuZ2V0KCBiYWNrZ3JvdW5kICk7XG5cblx0XHR9XG5cblx0XHQvLyBJZ25vcmUgYmFja2dyb3VuZCBpbiBBUlxuXHRcdC8vIFRPRE86IFJlY29uc2lkZXIgdGhpcy5cblxuXHRcdGNvbnN0IHhyID0gcmVuZGVyZXIueHI7XG5cdFx0Y29uc3Qgc2Vzc2lvbiA9IHhyLmdldFNlc3Npb24gJiYgeHIuZ2V0U2Vzc2lvbigpO1xuXG5cdFx0aWYgKCBzZXNzaW9uICYmIHNlc3Npb24uZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhZGRpdGl2ZScgKSB7XG5cblx0XHRcdGJhY2tncm91bmQgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kID09PSBudWxsICkge1xuXG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRcdHNldENsZWFyKCBiYWNrZ3JvdW5kLCAxICk7XG5cdFx0XHRmb3JjZUNsZWFyID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVuZGVyZXIuYXV0b0NsZWFyIHx8IGZvcmNlQ2xlYXIgKSB7XG5cblx0XHRcdHJlbmRlcmVyLmNsZWFyKCByZW5kZXJlci5hdXRvQ2xlYXJDb2xvciwgcmVuZGVyZXIuYXV0b0NsZWFyRGVwdGgsIHJlbmRlcmVyLmF1dG9DbGVhclN0ZW5jaWwgKTtcblxuXHRcdH1cblxuXHRcdGlmICggYmFja2dyb3VuZCAmJiAoIGJhY2tncm91bmQuaXNDdWJlVGV4dHVyZSB8fCBiYWNrZ3JvdW5kLm1hcHBpbmcgPT09IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nICkgKSB7XG5cblx0XHRcdGlmICggYm94TWVzaCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGJveE1lc2ggPSBuZXcgTWVzaChcblx0XHRcdFx0XHRuZXcgQm94R2VvbWV0cnkoIDEsIDEsIDEgKSxcblx0XHRcdFx0XHRuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblx0XHRcdFx0XHRcdG5hbWU6ICdCYWNrZ3JvdW5kQ3ViZU1hdGVyaWFsJyxcblx0XHRcdFx0XHRcdHVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBTaGFkZXJMaWIuY3ViZS51bmlmb3JtcyApLFxuXHRcdFx0XHRcdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJMaWIuY3ViZS52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyTGliLmN1YmUuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRcdFx0XHRzaWRlOiBCYWNrU2lkZSxcblx0XHRcdFx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0XHRcdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGZvZzogZmFsc2Vcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRib3hNZXNoLmdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICd1dicgKTtcblxuXHRcdFx0XHRib3hNZXNoLm9uQmVmb3JlUmVuZGVyID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weVBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIGVuYWJsZSBjb2RlIGluamVjdGlvbiBmb3Igbm9uLWJ1aWx0LWluIG1hdGVyaWFsXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggYm94TWVzaC5tYXRlcmlhbCwgJ2Vudk1hcCcsIHtcblxuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5lbnZNYXAudmFsdWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKCBib3hNZXNoICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBiYWNrZ3JvdW5kO1xuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgJiYgYmFja2dyb3VuZC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtIDEgOiAxO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kIHx8XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiAhPT0gYmFja2dyb3VuZC52ZXJzaW9uIHx8XG5cdFx0XHRcdGN1cnJlbnRUb25lbWFwcGluZyAhPT0gcmVuZGVyZXIudG9uZU1hcHBpbmcgKSB7XG5cblx0XHRcdFx0Ym94TWVzaC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSBiYWNrZ3JvdW5kLnZlcnNpb247XG5cdFx0XHRcdGN1cnJlbnRUb25lbWFwcGluZyA9IHJlbmRlcmVyLnRvbmVNYXBwaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHB1c2ggdG8gdGhlIHByZS1zb3J0ZWQgb3BhcXVlIHJlbmRlciBsaXN0XG5cdFx0XHRyZW5kZXJMaXN0LnVuc2hpZnQoIGJveE1lc2gsIGJveE1lc2guZ2VvbWV0cnksIGJveE1lc2gubWF0ZXJpYWwsIDAsIDAsIG51bGwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGlmICggcGxhbmVNZXNoID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cGxhbmVNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IFBsYW5lR2VvbWV0cnkoIDIsIDIgKSxcblx0XHRcdFx0XHRuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblx0XHRcdFx0XHRcdG5hbWU6ICdCYWNrZ3JvdW5kTWF0ZXJpYWwnLFxuXHRcdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIFNoYWRlckxpYi5iYWNrZ3JvdW5kLnVuaWZvcm1zICksXG5cdFx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZC5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0XHRcdHNpZGU6IEZyb250U2lkZSxcblx0XHRcdFx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0XHRcdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGZvZzogZmFsc2Vcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRwbGFuZU1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAnbm9ybWFsJyApO1xuXG5cdFx0XHRcdC8vIGVuYWJsZSBjb2RlIGluamVjdGlvbiBmb3Igbm9uLWJ1aWx0LWluIG1hdGVyaWFsXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggcGxhbmVNZXNoLm1hdGVyaWFsLCAnbWFwJywge1xuXG5cdFx0XHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnQyRC52YWx1ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0b2JqZWN0cy51cGRhdGUoIHBsYW5lTWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy50MkQudmFsdWUgPSBiYWNrZ3JvdW5kO1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCBiYWNrZ3JvdW5kLm1hdHJpeCApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kIHx8XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiAhPT0gYmFja2dyb3VuZC52ZXJzaW9uIHx8XG5cdFx0XHRcdGN1cnJlbnRUb25lbWFwcGluZyAhPT0gcmVuZGVyZXIudG9uZU1hcHBpbmcgKSB7XG5cblx0XHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IGJhY2tncm91bmQudmVyc2lvbjtcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cblx0XHRcdH1cblxuXG5cdFx0XHQvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdFxuXHRcdFx0cmVuZGVyTGlzdC51bnNoaWZ0KCBwbGFuZU1lc2gsIHBsYW5lTWVzaC5nZW9tZXRyeSwgcGxhbmVNZXNoLm1hdGVyaWFsLCAwLCAwLCBudWxsICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldENsZWFyKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iLCBhbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjbGVhckNvbG9yO1xuXG5cdFx0fSxcblx0XHRzZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoIGNvbG9yLCBhbHBoYSA9IDEgKSB7XG5cblx0XHRcdGNsZWFyQ29sb3Iuc2V0KCBjb2xvciApO1xuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0Z2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2xlYXJBbHBoYTtcblxuXHRcdH0sXG5cdFx0c2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCBhbHBoYSApIHtcblxuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0cmVuZGVyOiByZW5kZXJcblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMQmluZGluZ1N0YXRlcyggZ2wsIGV4dGVuc2lvbnMsIGF0dHJpYnV0ZXMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRjb25zdCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDkyMSApO1xuXG5cdGNvbnN0IGV4dGVuc2lvbiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/IG51bGwgOiBleHRlbnNpb25zLmdldCggJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JyApO1xuXHRjb25zdCB2YW9BdmFpbGFibGUgPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgfHwgZXh0ZW5zaW9uICE9PSBudWxsO1xuXG5cdGNvbnN0IGJpbmRpbmdTdGF0ZXMgPSB7fTtcblxuXHRjb25zdCBkZWZhdWx0U3RhdGUgPSBjcmVhdGVCaW5kaW5nU3RhdGUoIG51bGwgKTtcblx0bGV0IGN1cnJlbnRTdGF0ZSA9IGRlZmF1bHRTdGF0ZTtcblx0bGV0IGZvcmNlVXBkYXRlID0gZmFsc2U7XG5cblx0ZnVuY3Rpb24gc2V0dXAoIG9iamVjdCwgbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5LCBpbmRleCApIHtcblxuXHRcdGxldCB1cGRhdGVCdWZmZXJzID0gZmFsc2U7XG5cblx0XHRpZiAoIHZhb0F2YWlsYWJsZSApIHtcblxuXHRcdFx0Y29uc3Qgc3RhdGUgPSBnZXRCaW5kaW5nU3RhdGUoIGdlb21ldHJ5LCBwcm9ncmFtLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRTdGF0ZSAhPT0gc3RhdGUgKSB7XG5cblx0XHRcdFx0Y3VycmVudFN0YXRlID0gc3RhdGU7XG5cdFx0XHRcdGJpbmRWZXJ0ZXhBcnJheU9iamVjdCggY3VycmVudFN0YXRlLm9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlcnMgPSBuZWVkc1VwZGF0ZSggZ2VvbWV0cnksIGluZGV4ICk7XG5cblx0XHRcdGlmICggdXBkYXRlQnVmZmVycyApIHNhdmVDYWNoZSggZ2VvbWV0cnksIGluZGV4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCB3aXJlZnJhbWUgPSAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5nZW9tZXRyeSAhPT0gZ2VvbWV0cnkuaWQgfHxcblx0XHRcdFx0Y3VycmVudFN0YXRlLnByb2dyYW0gIT09IHByb2dyYW0uaWQgfHxcblx0XHRcdFx0Y3VycmVudFN0YXRlLndpcmVmcmFtZSAhPT0gd2lyZWZyYW1lICkge1xuXG5cdFx0XHRcdGN1cnJlbnRTdGF0ZS5nZW9tZXRyeSA9IGdlb21ldHJ5LmlkO1xuXHRcdFx0XHRjdXJyZW50U3RhdGUucHJvZ3JhbSA9IHByb2dyYW0uaWQ7XG5cdFx0XHRcdGN1cnJlbnRTdGF0ZS53aXJlZnJhbWUgPSB3aXJlZnJhbWU7XG5cblx0XHRcdFx0dXBkYXRlQnVmZmVycyA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dXBkYXRlQnVmZmVycyA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggaW5kZXgsIDM0OTYzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHVwZGF0ZUJ1ZmZlcnMgfHwgZm9yY2VVcGRhdGUgKSB7XG5cblx0XHRcdGZvcmNlVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdHNldHVwVmVydGV4QXR0cmlidXRlcyggb2JqZWN0LCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnkgKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRnbC5iaW5kQnVmZmVyKCAzNDk2MywgYXR0cmlidXRlcy5nZXQoIGluZGV4ICkuYnVmZmVyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlVmVydGV4QXJyYXlPYmplY3QoKSB7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHJldHVybiBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xuXG5cdFx0cmV0dXJuIGV4dGVuc2lvbi5jcmVhdGVWZXJ0ZXhBcnJheU9FUygpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBiaW5kVmVydGV4QXJyYXlPYmplY3QoIHZhbyApIHtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkgcmV0dXJuIGdsLmJpbmRWZXJ0ZXhBcnJheSggdmFvICk7XG5cblx0XHRyZXR1cm4gZXh0ZW5zaW9uLmJpbmRWZXJ0ZXhBcnJheU9FUyggdmFvICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlbGV0ZVZlcnRleEFycmF5T2JqZWN0KCB2YW8gKSB7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHJldHVybiBnbC5kZWxldGVWZXJ0ZXhBcnJheSggdmFvICk7XG5cblx0XHRyZXR1cm4gZXh0ZW5zaW9uLmRlbGV0ZVZlcnRleEFycmF5T0VTKCB2YW8gKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0QmluZGluZ1N0YXRlKCBnZW9tZXRyeSwgcHJvZ3JhbSwgbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCB3aXJlZnJhbWUgPSAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApO1xuXG5cdFx0bGV0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0aWYgKCBwcm9ncmFtTWFwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHByb2dyYW1NYXAgPSB7fTtcblx0XHRcdGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF0gPSBwcm9ncmFtTWFwO1xuXG5cdFx0fVxuXG5cdFx0bGV0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdO1xuXG5cdFx0aWYgKCBzdGF0ZU1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzdGF0ZU1hcCA9IHt9O1xuXHRcdFx0cHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdID0gc3RhdGVNYXA7XG5cblx0XHR9XG5cblx0XHRsZXQgc3RhdGUgPSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRpZiAoIHN0YXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN0YXRlID0gY3JlYXRlQmluZGluZ1N0YXRlKCBjcmVhdGVWZXJ0ZXhBcnJheU9iamVjdCgpICk7XG5cdFx0XHRzdGF0ZU1hcFsgd2lyZWZyYW1lIF0gPSBzdGF0ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzdGF0ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlQmluZGluZ1N0YXRlKCB2YW8gKSB7XG5cblx0XHRjb25zdCBuZXdBdHRyaWJ1dGVzID0gW107XG5cdFx0Y29uc3QgZW5hYmxlZEF0dHJpYnV0ZXMgPSBbXTtcblx0XHRjb25zdCBhdHRyaWJ1dGVEaXZpc29ycyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbWF4VmVydGV4QXR0cmlidXRlczsgaSArKyApIHtcblxuXHRcdFx0bmV3QXR0cmlidXRlc1sgaSBdID0gMDtcblx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXHRcdFx0YXR0cmlidXRlRGl2aXNvcnNbIGkgXSA9IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHQvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBvbiBub24tVkFPIHN1cHBvcnQgYnJvd3NlclxuXHRcdFx0Z2VvbWV0cnk6IG51bGwsXG5cdFx0XHRwcm9ncmFtOiBudWxsLFxuXHRcdFx0d2lyZWZyYW1lOiBmYWxzZSxcblxuXHRcdFx0bmV3QXR0cmlidXRlczogbmV3QXR0cmlidXRlcyxcblx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzOiBlbmFibGVkQXR0cmlidXRlcyxcblx0XHRcdGF0dHJpYnV0ZURpdmlzb3JzOiBhdHRyaWJ1dGVEaXZpc29ycyxcblx0XHRcdG9iamVjdDogdmFvLFxuXHRcdFx0YXR0cmlidXRlczoge30sXG5cdFx0XHRpbmRleDogbnVsbFxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gbmVlZHNVcGRhdGUoIGdlb21ldHJ5LCBpbmRleCApIHtcblxuXHRcdGNvbnN0IGNhY2hlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuYXR0cmlidXRlcztcblx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0bGV0IGF0dHJpYnV0ZXNOdW0gPSAwO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGdlb21ldHJ5QXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgY2FjaGVkQXR0cmlidXRlID0gY2FjaGVkQXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZSA9IGdlb21ldHJ5QXR0cmlidXRlc1sga2V5IF07XG5cblx0XHRcdGlmICggY2FjaGVkQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdFx0aWYgKCBjYWNoZWRBdHRyaWJ1dGUuYXR0cmlidXRlICE9PSBnZW9tZXRyeUF0dHJpYnV0ZSApIHJldHVybiB0cnVlO1xuXG5cdFx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZS5kYXRhICE9PSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhICkgcmV0dXJuIHRydWU7XG5cblx0XHRcdGF0dHJpYnV0ZXNOdW0gKys7XG5cblx0XHR9XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzTnVtICE9PSBhdHRyaWJ1dGVzTnVtICkgcmV0dXJuIHRydWU7XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5pbmRleCAhPT0gaW5kZXggKSByZXR1cm4gdHJ1ZTtcblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2F2ZUNhY2hlKCBnZW9tZXRyeSwgaW5kZXggKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHt9O1xuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdGxldCBhdHRyaWJ1dGVzTnVtID0gMDtcblxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0Y29uc3QgZGF0YSA9IHt9O1xuXHRcdFx0ZGF0YS5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmRhdGEgKSB7XG5cblx0XHRcdFx0ZGF0YS5kYXRhID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FjaGVbIGtleSBdID0gZGF0YTtcblxuXHRcdFx0YXR0cmlidXRlc051bSArKztcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzID0gY2FjaGU7XG5cdFx0Y3VycmVudFN0YXRlLmF0dHJpYnV0ZXNOdW0gPSBhdHRyaWJ1dGVzTnVtO1xuXG5cdFx0Y3VycmVudFN0YXRlLmluZGV4ID0gaW5kZXg7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRBdHRyaWJ1dGVzKCkge1xuXG5cdFx0Y29uc3QgbmV3QXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5uZXdBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG5ld0F0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdG5ld0F0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggYXR0cmlidXRlLCAwICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRcdGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUubmV3QXR0cmlidXRlcztcblx0XHRjb25zdCBlbmFibGVkQXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5lbmFibGVkQXR0cmlidXRlcztcblx0XHRjb25zdCBhdHRyaWJ1dGVEaXZpc29ycyA9IGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVEaXZpc29ycztcblxuXHRcdG5ld0F0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID0gMTtcblxuXHRcdGlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID09PSAwICkge1xuXG5cdFx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSggYXR0cmlidXRlICk7XG5cdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBhdHRyaWJ1dGVEaXZpc29yc1sgYXR0cmlidXRlIF0gIT09IG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/IGdsIDogZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0XHRleHRlbnNpb25bIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/ICd2ZXJ0ZXhBdHRyaWJEaXZpc29yJyA6ICd2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUnIF0oIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApO1xuXHRcdFx0YXR0cmlidXRlRGl2aXNvcnNbIGF0dHJpYnV0ZSBdID0gbWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKSB7XG5cblx0XHRjb25zdCBuZXdBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLm5ld0F0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgZW5hYmxlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuZW5hYmxlZEF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSAhPT0gbmV3QXR0cmlidXRlc1sgaSBdICkge1xuXG5cdFx0XHRcdGdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSggaSApO1xuXHRcdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB2ZXJ0ZXhBdHRyaWJQb2ludGVyKCBpbmRleCwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgc3RyaWRlLCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA9PT0gdHJ1ZSAmJiAoIHR5cGUgPT09IDUxMjQgfHwgdHlwZSA9PT0gNTEyNSApICkge1xuXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJJUG9pbnRlciggaW5kZXgsIHNpemUsIHR5cGUsIHN0cmlkZSwgb2Zmc2V0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBpbmRleCwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgc3RyaWRlLCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBvYmplY3QsIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSApIHtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyID09PSBmYWxzZSAmJiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggfHwgZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSApICkge1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKSA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdH1cblxuXHRcdGluaXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IG1hdGVyaWFsLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtQXR0cmlidXRlID0gcHJvZ3JhbUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uID49IDAgKSB7XG5cblx0XHRcdFx0bGV0IGdlb21ldHJ5QXR0cmlidXRlID0gZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBuYW1lID09PSAnaW5zdGFuY2VNYXRyaXgnICYmIG9iamVjdC5pbnN0YW5jZU1hdHJpeCApIGdlb21ldHJ5QXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlTWF0cml4O1xuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlQ29sb3InICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICkgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VDb2xvcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgbm9ybWFsaXplZCA9IGdlb21ldHJ5QXR0cmlidXRlLm5vcm1hbGl6ZWQ7XG5cdFx0XHRcdFx0Y29uc3Qgc2l6ZSA9IGdlb21ldHJ5QXR0cmlidXRlLml0ZW1TaXplO1xuXG5cdFx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5QXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHQvLyBUT0RPIEF0dHJpYnV0ZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBvbiBjb250ZXh0IHJlc3RvcmVcblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IGF0dHJpYnV0ZS5idWZmZXI7XG5cdFx0XHRcdFx0Y29uc3QgdHlwZSA9IGF0dHJpYnV0ZS50eXBlO1xuXHRcdFx0XHRcdGNvbnN0IGJ5dGVzUGVyRWxlbWVudCA9IGF0dHJpYnV0ZS5ieXRlc1BlckVsZW1lbnQ7XG5cblx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGRhdGEgPSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyaWRlID0gZGF0YS5zdHJpZGU7XG5cdFx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5vZmZzZXQ7XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksIGRhdGEubWVzaFBlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggIT09IHRydWUgJiYgZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50ID0gZGF0YS5tZXNoUGVyQXR0cmlidXRlICogZGF0YS5jb3VudDtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRlbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXIgKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmVydGV4QXR0cmliUG9pbnRlcihcblx0XHRcdFx0XHRcdFx0XHRwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSxcblx0XHRcdFx0XHRcdFx0XHRzaXplIC8gcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemUsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZSxcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxpemVkLFxuXHRcdFx0XHRcdFx0XHRcdHN0cmlkZSAqIGJ5dGVzUGVyRWxlbWVudCxcblx0XHRcdFx0XHRcdFx0XHQoIG9mZnNldCArICggc2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplICkgKiBpICkgKiBieXRlc1BlckVsZW1lbnRcblx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpLCBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAhPT0gdHJ1ZSAmJiBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRnbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRleEF0dHJpYlBvaW50ZXIoXG5cdFx0XHRcdFx0XHRcdFx0cHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGUsXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsaXplZCxcblx0XHRcdFx0XHRcdFx0XHRzaXplICogYnl0ZXNQZXJFbGVtZW50LFxuXHRcdFx0XHRcdFx0XHRcdCggc2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplICkgKiBpICogYnl0ZXNQZXJFbGVtZW50XG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzWyBuYW1lIF07XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIHZhbHVlLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0Z2wudmVydGV4QXR0cmliMmZ2KCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0XHRnbC52ZXJ0ZXhBdHRyaWIzZnYoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24sIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjRmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjFmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHJlc2V0KCk7XG5cblx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUlkIGluIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHByb2dyYW1JZCBpbiBwcm9ncmFtTWFwICkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHRcdFx0Zm9yICggY29uc3Qgd2lyZWZyYW1lIGluIHN0YXRlTWFwICkge1xuXG5cdFx0XHRcdFx0ZGVsZXRlVmVydGV4QXJyYXlPYmplY3QoIHN0YXRlTWFwWyB3aXJlZnJhbWUgXS5vYmplY3QgKTtcblxuXHRcdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBwcm9ncmFtTWFwWyBwcm9ncmFtSWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnlJZCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSggZ2VvbWV0cnkgKSB7XG5cblx0XHRpZiAoIGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF0gPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0Zm9yICggY29uc3QgcHJvZ3JhbUlkIGluIHByb2dyYW1NYXAgKSB7XG5cblx0XHRcdGNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHtcblxuXHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW1JZCBdO1xuXG5cdFx0fVxuXG5cdFx0ZGVsZXRlIGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VTdGF0ZXNPZlByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUlkIGluIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3Qgc3RhdGVNYXAgPSBwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHtcblxuXHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW0uaWQgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHRyZXNldERlZmF1bHRTdGF0ZSgpO1xuXHRcdGZvcmNlVXBkYXRlID0gdHJ1ZTtcblxuXHRcdGlmICggY3VycmVudFN0YXRlID09PSBkZWZhdWx0U3RhdGUgKSByZXR1cm47XG5cblx0XHRjdXJyZW50U3RhdGUgPSBkZWZhdWx0U3RhdGU7XG5cdFx0YmluZFZlcnRleEFycmF5T2JqZWN0KCBjdXJyZW50U3RhdGUub2JqZWN0ICk7XG5cblx0fVxuXG5cdC8vIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5XG5cblx0ZnVuY3Rpb24gcmVzZXREZWZhdWx0U3RhdGUoKSB7XG5cblx0XHRkZWZhdWx0U3RhdGUuZ2VvbWV0cnkgPSBudWxsO1xuXHRcdGRlZmF1bHRTdGF0ZS5wcm9ncmFtID0gbnVsbDtcblx0XHRkZWZhdWx0U3RhdGUud2lyZWZyYW1lID0gZmFsc2U7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRzZXR1cDogc2V0dXAsXG5cdFx0cmVzZXQ6IHJlc2V0LFxuXHRcdHJlc2V0RGVmYXVsdFN0YXRlOiByZXNldERlZmF1bHRTdGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlLFxuXHRcdHJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5OiByZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSxcblx0XHRyZWxlYXNlU3RhdGVzT2ZQcm9ncmFtOiByZWxlYXNlU3RhdGVzT2ZQcm9ncmFtLFxuXG5cdFx0aW5pdEF0dHJpYnV0ZXM6IGluaXRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLFxuXHRcdGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzOiBkaXNhYmxlVW51c2VkQXR0cmlidXRlc1xuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApIHtcblxuXHRjb25zdCBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblxuXHRsZXQgbW9kZTtcblxuXHRmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHtcblxuXHRcdG1vZGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3QXJyYXlzKCBtb2RlLCBzdGFydCwgY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgMSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50ICkge1xuXG5cdFx0aWYgKCBwcmltY291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRsZXQgZXh0ZW5zaW9uLCBtZXRob2ROYW1lO1xuXG5cdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZ2w7XG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdBcnJheXNJbnN0YW5jZWQnO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXHRcdFx0bWV0aG9kTmFtZSA9ICdkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUnO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xCdWZmZXJSZW5kZXJlcjogdXNpbmcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgYnV0IGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgZXh0ZW5zaW9uIEFOR0xFX2luc3RhbmNlZF9hcnJheXMuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGV4dGVuc2lvblsgbWV0aG9kTmFtZSBdKCBtb2RlLCBzdGFydCwgY291bnQsIHByaW1jb3VudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCBwcmltY291bnQgKTtcblxuXHR9XG5cblx0Ly9cblxuXHR0aGlzLnNldE1vZGUgPSBzZXRNb2RlO1xuXHR0aGlzLnJlbmRlciA9IHJlbmRlcjtcblx0dGhpcy5yZW5kZXJJbnN0YW5jZXMgPSByZW5kZXJJbnN0YW5jZXM7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xDYXBhYmlsaXRpZXMoIGdsLCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBtYXhBbmlzb3Ryb3B5O1xuXG5cdGZ1bmN0aW9uIGdldE1heEFuaXNvdHJvcHkoKSB7XG5cblx0XHRpZiAoIG1heEFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHJldHVybiBtYXhBbmlzb3Ryb3B5O1xuXG5cdFx0aWYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cblx0XHRcdG1heEFuaXNvdHJvcHkgPSBnbC5nZXRQYXJhbWV0ZXIoIGV4dGVuc2lvbi5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1heEFuaXNvdHJvcHkgPSAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1heEFuaXNvdHJvcHk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICkge1xuXG5cdFx0aWYgKCBwcmVjaXNpb24gPT09ICdoaWdocCcgKSB7XG5cblx0XHRcdGlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMywgMzYzMzggKS5wcmVjaXNpb24gPiAwICYmXG5cdFx0XHRcdGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzIsIDM2MzM4ICkucHJlY2lzaW9uID4gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gJ2hpZ2hwJztcblxuXHRcdFx0fVxuXG5cdFx0XHRwcmVjaXNpb24gPSAnbWVkaXVtcCc7XG5cblx0XHR9XG5cblx0XHRpZiAoIHByZWNpc2lvbiA9PT0gJ21lZGl1bXAnICkge1xuXG5cdFx0XHRpZiAoIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzMsIDM2MzM3ICkucHJlY2lzaW9uID4gMCAmJlxuXHRcdFx0XHRnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIDM1NjMyLCAzNjMzNyApLnByZWNpc2lvbiA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuICdtZWRpdW1wJztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuICdsb3dwJztcblxuXHR9XG5cblx0Y29uc3QgaXNXZWJHTDIgPSAoIHR5cGVvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ICE9PSAndW5kZWZpbmVkJyAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgKSB8fFxuXHRcdCggdHlwZW9mIFdlYkdMMkNvbXB1dGVSZW5kZXJpbmdDb250ZXh0ICE9PSAndW5kZWZpbmVkJyAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMkNvbXB1dGVSZW5kZXJpbmdDb250ZXh0ICk7XG5cblx0bGV0IHByZWNpc2lvbiA9IHBhcmFtZXRlcnMucHJlY2lzaW9uICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZWNpc2lvbiA6ICdoaWdocCc7XG5cdGNvbnN0IG1heFByZWNpc2lvbiA9IGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICk7XG5cblx0aWYgKCBtYXhQcmVjaXNpb24gIT09IHByZWNpc2lvbiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6JywgcHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBtYXhQcmVjaXNpb24sICdpbnN0ZWFkLicgKTtcblx0XHRwcmVjaXNpb24gPSBtYXhQcmVjaXNpb247XG5cblx0fVxuXG5cdGNvbnN0IGRyYXdCdWZmZXJzID0gaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9kcmF3X2J1ZmZlcnMnICk7XG5cblx0Y29uc3QgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9PT0gdHJ1ZTtcblxuXHRjb25zdCBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MzAgKTtcblx0Y29uc3QgbWF4VmVydGV4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM1NjYwICk7XG5cdGNvbnN0IG1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCAzMzc5ICk7XG5cdGNvbnN0IG1heEN1YmVtYXBTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDA3NiApO1xuXG5cdGNvbnN0IG1heEF0dHJpYnV0ZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM0OTIxICk7XG5cdGNvbnN0IG1heFZlcnRleFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0NyApO1xuXHRjb25zdCBtYXhWYXJ5aW5ncyA9IGdsLmdldFBhcmFtZXRlciggMzYzNDggKTtcblx0Y29uc3QgbWF4RnJhZ21lbnRVbmlmb3JtcyA9IGdsLmdldFBhcmFtZXRlciggMzYzNDkgKTtcblxuXHRjb25zdCB2ZXJ0ZXhUZXh0dXJlcyA9IG1heFZlcnRleFRleHR1cmVzID4gMDtcblx0Y29uc3QgZmxvYXRGcmFnbWVudFRleHR1cmVzID0gaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5oYXMoICdPRVNfdGV4dHVyZV9mbG9hdCcgKTtcblx0Y29uc3QgZmxvYXRWZXJ0ZXhUZXh0dXJlcyA9IHZlcnRleFRleHR1cmVzICYmIGZsb2F0RnJhZ21lbnRUZXh0dXJlcztcblxuXHRjb25zdCBtYXhTYW1wbGVzID0gaXNXZWJHTDIgPyBnbC5nZXRQYXJhbWV0ZXIoIDM2MTgzICkgOiAwO1xuXG5cdHJldHVybiB7XG5cblx0XHRpc1dlYkdMMjogaXNXZWJHTDIsXG5cblx0XHRkcmF3QnVmZmVyczogZHJhd0J1ZmZlcnMsXG5cblx0XHRnZXRNYXhBbmlzb3Ryb3B5OiBnZXRNYXhBbmlzb3Ryb3B5LFxuXHRcdGdldE1heFByZWNpc2lvbjogZ2V0TWF4UHJlY2lzaW9uLFxuXG5cdFx0cHJlY2lzaW9uOiBwcmVjaXNpb24sXG5cdFx0bG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcixcblxuXHRcdG1heFRleHR1cmVzOiBtYXhUZXh0dXJlcyxcblx0XHRtYXhWZXJ0ZXhUZXh0dXJlczogbWF4VmVydGV4VGV4dHVyZXMsXG5cdFx0bWF4VGV4dHVyZVNpemU6IG1heFRleHR1cmVTaXplLFxuXHRcdG1heEN1YmVtYXBTaXplOiBtYXhDdWJlbWFwU2l6ZSxcblxuXHRcdG1heEF0dHJpYnV0ZXM6IG1heEF0dHJpYnV0ZXMsXG5cdFx0bWF4VmVydGV4VW5pZm9ybXM6IG1heFZlcnRleFVuaWZvcm1zLFxuXHRcdG1heFZhcnlpbmdzOiBtYXhWYXJ5aW5ncyxcblx0XHRtYXhGcmFnbWVudFVuaWZvcm1zOiBtYXhGcmFnbWVudFVuaWZvcm1zLFxuXG5cdFx0dmVydGV4VGV4dHVyZXM6IHZlcnRleFRleHR1cmVzLFxuXHRcdGZsb2F0RnJhZ21lbnRUZXh0dXJlczogZmxvYXRGcmFnbWVudFRleHR1cmVzLFxuXHRcdGZsb2F0VmVydGV4VGV4dHVyZXM6IGZsb2F0VmVydGV4VGV4dHVyZXMsXG5cblx0XHRtYXhTYW1wbGVzOiBtYXhTYW1wbGVzXG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTENsaXBwaW5nKCBwcm9wZXJ0aWVzICkge1xuXG5cdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRsZXQgZ2xvYmFsU3RhdGUgPSBudWxsLFxuXHRcdG51bUdsb2JhbFBsYW5lcyA9IDAsXG5cdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gZmFsc2U7XG5cblx0Y29uc3QgcGxhbmUgPSBuZXcgUGxhbmUoKSxcblx0XHR2aWV3Tm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKSxcblxuXHRcdHVuaWZvcm0gPSB7IHZhbHVlOiBudWxsLCBuZWVkc1VwZGF0ZTogZmFsc2UgfTtcblxuXHR0aGlzLnVuaWZvcm0gPSB1bmlmb3JtO1xuXHR0aGlzLm51bVBsYW5lcyA9IDA7XG5cdHRoaXMubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoIHBsYW5lcywgZW5hYmxlTG9jYWxDbGlwcGluZywgY2FtZXJhICkge1xuXG5cdFx0Y29uc3QgZW5hYmxlZCA9XG5cdFx0XHRwbGFuZXMubGVuZ3RoICE9PSAwIHx8XG5cdFx0XHRlbmFibGVMb2NhbENsaXBwaW5nIHx8XG5cdFx0XHQvLyBlbmFibGUgc3RhdGUgb2YgcHJldmlvdXMgZnJhbWUgLSB0aGUgY2xpcHBpbmcgY29kZSBoYXMgdG9cblx0XHRcdC8vIHJ1biBhbm90aGVyIGZyYW1lIGluIG9yZGVyIHRvIHJlc2V0IHRoZSBzdGF0ZTpcblx0XHRcdG51bUdsb2JhbFBsYW5lcyAhPT0gMCB8fFxuXHRcdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQ7XG5cblx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGVuYWJsZUxvY2FsQ2xpcHBpbmc7XG5cblx0XHRnbG9iYWxTdGF0ZSA9IHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCAwICk7XG5cdFx0bnVtR2xvYmFsUGxhbmVzID0gcGxhbmVzLmxlbmd0aDtcblxuXHRcdHJldHVybiBlbmFibGVkO1xuXG5cdH07XG5cblx0dGhpcy5iZWdpblNoYWRvd3MgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gdHJ1ZTtcblx0XHRwcm9qZWN0UGxhbmVzKCBudWxsICk7XG5cblx0fTtcblxuXHR0aGlzLmVuZFNoYWRvd3MgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gZmFsc2U7XG5cdFx0cmVzZXRHbG9iYWxTdGF0ZSgpO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTdGF0ZSA9IGZ1bmN0aW9uICggbWF0ZXJpYWwsIGNhbWVyYSwgdXNlQ2FjaGUgKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcyxcblx0XHRcdGNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uLFxuXHRcdFx0Y2xpcFNoYWRvd3MgPSBtYXRlcmlhbC5jbGlwU2hhZG93cztcblxuXHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdFx0aWYgKCAhIGxvY2FsQ2xpcHBpbmdFbmFibGVkIHx8IHBsYW5lcyA9PT0gbnVsbCB8fCBwbGFuZXMubGVuZ3RoID09PSAwIHx8IHJlbmRlcmluZ1NoYWRvd3MgJiYgISBjbGlwU2hhZG93cyApIHtcblxuXHRcdFx0Ly8gdGhlcmUncyBubyBsb2NhbCBjbGlwcGluZ1xuXG5cdFx0XHRpZiAoIHJlbmRlcmluZ1NoYWRvd3MgKSB7XG5cblx0XHRcdFx0Ly8gdGhlcmUncyBubyBnbG9iYWwgY2xpcHBpbmdcblxuXHRcdFx0XHRwcm9qZWN0UGxhbmVzKCBudWxsICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVzZXRHbG9iYWxTdGF0ZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBuR2xvYmFsID0gcmVuZGVyaW5nU2hhZG93cyA/IDAgOiBudW1HbG9iYWxQbGFuZXMsXG5cdFx0XHRcdGxHbG9iYWwgPSBuR2xvYmFsICogNDtcblxuXHRcdFx0bGV0IGRzdEFycmF5ID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLmNsaXBwaW5nU3RhdGUgfHwgbnVsbDtcblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGRzdEFycmF5OyAvLyBlbnN1cmUgdW5pcXVlIHN0YXRlXG5cblx0XHRcdGRzdEFycmF5ID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGxHbG9iYWwsIHVzZUNhY2hlICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbEdsb2JhbDsgKysgaSApIHtcblxuXHRcdFx0XHRkc3RBcnJheVsgaSBdID0gZ2xvYmFsU3RhdGVbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuY2xpcHBpbmdTdGF0ZSA9IGRzdEFycmF5O1xuXHRcdFx0dGhpcy5udW1JbnRlcnNlY3Rpb24gPSBjbGlwSW50ZXJzZWN0aW9uID8gdGhpcy5udW1QbGFuZXMgOiAwO1xuXHRcdFx0dGhpcy5udW1QbGFuZXMgKz0gbkdsb2JhbDtcblxuXHRcdH1cblxuXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVzZXRHbG9iYWxTdGF0ZSgpIHtcblxuXHRcdGlmICggdW5pZm9ybS52YWx1ZSAhPT0gZ2xvYmFsU3RhdGUgKSB7XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBnbG9iYWxTdGF0ZTtcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSBudW1HbG9iYWxQbGFuZXMgPiAwO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubnVtUGxhbmVzID0gbnVtR2xvYmFsUGxhbmVzO1xuXHRcdHNjb3BlLm51bUludGVyc2VjdGlvbiA9IDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCBkc3RPZmZzZXQsIHNraXBUcmFuc2Zvcm0gKSB7XG5cblx0XHRjb25zdCBuUGxhbmVzID0gcGxhbmVzICE9PSBudWxsID8gcGxhbmVzLmxlbmd0aCA6IDA7XG5cdFx0bGV0IGRzdEFycmF5ID0gbnVsbDtcblxuXHRcdGlmICggblBsYW5lcyAhPT0gMCApIHtcblxuXHRcdFx0ZHN0QXJyYXkgPSB1bmlmb3JtLnZhbHVlO1xuXG5cdFx0XHRpZiAoIHNraXBUcmFuc2Zvcm0gIT09IHRydWUgfHwgZHN0QXJyYXkgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc3QgZmxhdFNpemUgPSBkc3RPZmZzZXQgKyBuUGxhbmVzICogNCxcblx0XHRcdFx0XHR2aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdFx0XHR2aWV3Tm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGlmICggZHN0QXJyYXkgPT09IG51bGwgfHwgZHN0QXJyYXkubGVuZ3RoIDwgZmxhdFNpemUgKSB7XG5cblx0XHRcdFx0XHRkc3RBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIGZsYXRTaXplICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaTQgPSBkc3RPZmZzZXQ7IGkgIT09IG5QbGFuZXM7ICsrIGksIGk0ICs9IDQgKSB7XG5cblx0XHRcdFx0XHRwbGFuZS5jb3B5KCBwbGFuZXNbIGkgXSApLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCwgdmlld05vcm1hbE1hdHJpeCApO1xuXG5cdFx0XHRcdFx0cGxhbmUubm9ybWFsLnRvQXJyYXkoIGRzdEFycmF5LCBpNCApO1xuXHRcdFx0XHRcdGRzdEFycmF5WyBpNCArIDMgXSA9IHBsYW5lLmNvbnN0YW50O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7XG5cdFx0XHR1bmlmb3JtLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm51bVBsYW5lcyA9IG5QbGFuZXM7XG5cdFx0c2NvcGUubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHRcdHJldHVybiBkc3RBcnJheTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xDdWJlTWFwcyggcmVuZGVyZXIgKSB7XG5cblx0bGV0IGN1YmVtYXBzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBtYXBUZXh0dXJlTWFwcGluZyggdGV4dHVyZSwgbWFwcGluZyApIHtcblxuXHRcdGlmICggbWFwcGluZyA9PT0gRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdHRleHR1cmUubWFwcGluZyA9IEN1YmVSZWZsZWN0aW9uTWFwcGluZztcblxuXHRcdH0gZWxzZSBpZiAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0XHR0ZXh0dXJlLm1hcHBpbmcgPSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0KCB0ZXh0dXJlICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNUZXh0dXJlICYmIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc3QgbWFwcGluZyA9IHRleHR1cmUubWFwcGluZztcblxuXHRcdFx0aWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHtcblxuXHRcdFx0XHRpZiAoIGN1YmVtYXBzLmhhcyggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY3ViZW1hcCA9IGN1YmVtYXBzLmdldCggdGV4dHVyZSApLnRleHR1cmU7XG5cdFx0XHRcdFx0cmV0dXJuIG1hcFRleHR1cmVNYXBwaW5nKCBjdWJlbWFwLCB0ZXh0dXJlLm1hcHBpbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2UgPSB0ZXh0dXJlLmltYWdlO1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZSAmJiBpbWFnZS5oZWlnaHQgPiAwICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0KCBpbWFnZS5oZWlnaHQgLyAyICk7XG5cdFx0XHRcdFx0XHRyZW5kZXJUYXJnZXQuZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUoIHJlbmRlcmVyLCB0ZXh0dXJlICk7XG5cdFx0XHRcdFx0XHRjdWJlbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gbWFwVGV4dHVyZU1hcHBpbmcoIHJlbmRlclRhcmdldC50ZXh0dXJlLCB0ZXh0dXJlLm1hcHBpbmcgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIGltYWdlIG5vdCB5ZXQgcmVhZHkuIHRyeSB0aGUgY29udmVyc2lvbiBuZXh0IGZyYW1lXG5cblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRjb25zdCBjdWJlbWFwID0gY3ViZW1hcHMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIGN1YmVtYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y3ViZW1hcHMuZGVsZXRlKCB0ZXh0dXJlICk7XG5cdFx0XHRjdWJlbWFwLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdGN1YmVtYXBzID0gbmV3IFdlYWtNYXAoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuY2xhc3MgT3J0aG9ncmFwaGljQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhIHtcblxuXHRjb25zdHJ1Y3RvciggbGVmdCA9IC0gMSwgcmlnaHQgPSAxLCB0b3AgPSAxLCBib3R0b20gPSAtIDEsIG5lYXIgPSAwLjEsIGZhciA9IDIwMDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ09ydGhvZ3JhcGhpY0NhbWVyYSc7XG5cblx0XHR0aGlzLnpvb20gPSAxO1xuXHRcdHRoaXMudmlldyA9IG51bGw7XG5cblx0XHR0aGlzLmxlZnQgPSBsZWZ0O1xuXHRcdHRoaXMucmlnaHQgPSByaWdodDtcblx0XHR0aGlzLnRvcCA9IHRvcDtcblx0XHR0aGlzLmJvdHRvbSA9IGJvdHRvbTtcblxuXHRcdHRoaXMubmVhciA9IG5lYXI7XG5cdFx0dGhpcy5mYXIgPSBmYXI7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5sZWZ0ID0gc291cmNlLmxlZnQ7XG5cdFx0dGhpcy5yaWdodCA9IHNvdXJjZS5yaWdodDtcblx0XHR0aGlzLnRvcCA9IHNvdXJjZS50b3A7XG5cdFx0dGhpcy5ib3R0b20gPSBzb3VyY2UuYm90dG9tO1xuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblxuXHRcdHRoaXMuem9vbSA9IHNvdXJjZS56b29tO1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcgPSB7XG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcblx0XHRcdFx0ZnVsbEhlaWdodDogMSxcblx0XHRcdFx0b2Zmc2V0WDogMCxcblx0XHRcdFx0b2Zmc2V0WTogMCxcblx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WCA9IHg7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0Y2xlYXJWaWV3T2Zmc2V0KCkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcblxuXHRcdGNvbnN0IGR4ID0gKCB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0ICkgLyAoIDIgKiB0aGlzLnpvb20gKTtcblx0XHRjb25zdCBkeSA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gKCAyICogdGhpcy56b29tICk7XG5cdFx0Y29uc3QgY3ggPSAoIHRoaXMucmlnaHQgKyB0aGlzLmxlZnQgKSAvIDI7XG5cdFx0Y29uc3QgY3kgPSAoIHRoaXMudG9wICsgdGhpcy5ib3R0b20gKSAvIDI7XG5cblx0XHRsZXQgbGVmdCA9IGN4IC0gZHg7XG5cdFx0bGV0IHJpZ2h0ID0gY3ggKyBkeDtcblx0XHRsZXQgdG9wID0gY3kgKyBkeTtcblx0XHRsZXQgYm90dG9tID0gY3kgLSBkeTtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xuXG5cdFx0XHRjb25zdCBzY2FsZVcgPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvIHRoaXMudmlldy5mdWxsV2lkdGggLyB0aGlzLnpvb207XG5cdFx0XHRjb25zdCBzY2FsZUggPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvIHRoaXMudmlldy5mdWxsSGVpZ2h0IC8gdGhpcy56b29tO1xuXG5cdFx0XHRsZWZ0ICs9IHNjYWxlVyAqIHRoaXMudmlldy5vZmZzZXRYO1xuXHRcdFx0cmlnaHQgPSBsZWZ0ICsgc2NhbGVXICogdGhpcy52aWV3LndpZHRoO1xuXHRcdFx0dG9wIC09IHNjYWxlSCAqIHRoaXMudmlldy5vZmZzZXRZO1xuXHRcdFx0Ym90dG9tID0gdG9wIC0gc2NhbGVIICogdGhpcy52aWV3LmhlaWdodDtcblxuXHRcdH1cblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIHRoaXMubmVhciwgdGhpcy5mYXIgKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0Lnpvb20gPSB0aGlzLnpvb207XG5cdFx0ZGF0YS5vYmplY3QubGVmdCA9IHRoaXMubGVmdDtcblx0XHRkYXRhLm9iamVjdC5yaWdodCA9IHRoaXMucmlnaHQ7XG5cdFx0ZGF0YS5vYmplY3QudG9wID0gdGhpcy50b3A7XG5cdFx0ZGF0YS5vYmplY3QuYm90dG9tID0gdGhpcy5ib3R0b207XG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcblx0XHRkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5PcnRob2dyYXBoaWNDYW1lcmEucHJvdG90eXBlLmlzT3J0aG9ncmFwaGljQ2FtZXJhID0gdHJ1ZTtcblxuY29uc3QgTE9EX01JTiA9IDQ7XG5cbi8vIFRoZSBzdGFuZGFyZCBkZXZpYXRpb25zIChyYWRpYW5zKSBhc3NvY2lhdGVkIHdpdGggdGhlIGV4dHJhIG1pcHMuIFRoZXNlIGFyZVxuLy8gY2hvc2VuIHRvIGFwcHJveGltYXRlIGEgVHJvd2JyaWRnZS1SZWl0eiBkaXN0cmlidXRpb24gZnVuY3Rpb24gdGltZXMgdGhlXG4vLyBnZW9tZXRyaWMgc2hhZG93aW5nIGZ1bmN0aW9uLiBUaGVzZSBzaWdtYSB2YWx1ZXMgc3F1YXJlZCBtdXN0IG1hdGNoIHRoZVxuLy8gdmFyaWFuY2UgI2RlZmluZXMgaW4gY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50Lmdsc2wuanMuXG5jb25zdCBFWFRSQV9MT0RfU0lHTUEgPSBbIDAuMTI1LCAwLjIxNSwgMC4zNSwgMC40NDYsIDAuNTI2LCAwLjU4MiBdO1xuXG4vLyBUaGUgbWF4aW11bSBsZW5ndGggb2YgdGhlIGJsdXIgZm9yIGxvb3AuIFNtYWxsZXIgc2lnbWFzIHdpbGwgdXNlIGZld2VyXG4vLyBzYW1wbGVzIGFuZCBleGl0IGVhcmx5LCBidXQgbm90IHJlY29tcGlsZSB0aGUgc2hhZGVyLlxuY29uc3QgTUFYX1NBTVBMRVMgPSAyMDtcblxuY29uc3QgX2ZsYXRDYW1lcmEgPSAvKkBfX1BVUkVfXyovIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoKTtcbmNvbnN0IF9jbGVhckNvbG9yID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcbmxldCBfb2xkVGFyZ2V0ID0gbnVsbDtcblxuLy8gR29sZGVuIFJhdGlvXG5jb25zdCBQSEkgPSAoIDEgKyBNYXRoLnNxcnQoIDUgKSApIC8gMjtcbmNvbnN0IElOVl9QSEkgPSAxIC8gUEhJO1xuXG4vLyBWZXJ0aWNlcyBvZiBhIGRvZGVjYWhlZHJvbiAoZXhjZXB0IHRoZSBvcHBvc2l0ZXMsIHdoaWNoIHJlcHJlc2VudCB0aGVcbi8vIHNhbWUgYXhpcyksIHVzZWQgYXMgYXhpcyBkaXJlY3Rpb25zIGV2ZW5seSBzcHJlYWQgb24gYSBzcGhlcmUuXG5jb25zdCBfYXhpc0RpcmVjdGlvbnMgPSBbXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSAxLCAxLCAxICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIC0gMSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtIDEsIDEsIC0gMSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCBQSEksIElOVl9QSEkgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgUEhJLCAtIElOVl9QSEkgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggSU5WX1BISSwgMCwgUEhJICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIC0gSU5WX1BISSwgMCwgUEhJICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIFBISSwgSU5WX1BISSwgMCApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtIFBISSwgSU5WX1BISSwgMCApIF07XG5cbi8qKlxuICogVGhpcyBjbGFzcyBnZW5lcmF0ZXMgYSBQcmVmaWx0ZXJlZCwgTWlwbWFwcGVkIFJhZGlhbmNlIEVudmlyb25tZW50IE1hcFxuICogKFBNUkVNKSBmcm9tIGEgY3ViZU1hcCBlbnZpcm9ubWVudCB0ZXh0dXJlLiBUaGlzIGFsbG93cyBkaWZmZXJlbnQgbGV2ZWxzIG9mXG4gKiBibHVyIHRvIGJlIHF1aWNrbHkgYWNjZXNzZWQgYmFzZWQgb24gbWF0ZXJpYWwgcm91Z2huZXNzLiBJdCBpcyBwYWNrZWQgaW50byBhXG4gKiBzcGVjaWFsIEN1YmVVViBmb3JtYXQgdGhhdCBhbGxvd3MgdXMgdG8gcGVyZm9ybSBjdXN0b20gaW50ZXJwb2xhdGlvbiBzbyB0aGF0XG4gKiB3ZSBjYW4gc3VwcG9ydCBub25saW5lYXIgZm9ybWF0cyBzdWNoIGFzIFJHQkUuIFVubGlrZSBhIHRyYWRpdGlvbmFsIG1pcG1hcFxuICogY2hhaW4sIGl0IG9ubHkgZ29lcyBkb3duIHRvIHRoZSBMT0RfTUlOIGxldmVsIChhYm92ZSksIGFuZCB0aGVuIGNyZWF0ZXMgZXh0cmFcbiAqIGV2ZW4gbW9yZSBmaWx0ZXJlZCAnbWlwcycgYXQgdGhlIHNhbWUgTE9EX01JTiByZXNvbHV0aW9uLCBhc3NvY2lhdGVkIHdpdGhcbiAqIGhpZ2hlciByb3VnaG5lc3MgbGV2ZWxzLiBJbiB0aGlzIHdheSB3ZSBtYWludGFpbiByZXNvbHV0aW9uIHRvIHNtb290aGx5XG4gKiBpbnRlcnBvbGF0ZSBkaWZmdXNlIGxpZ2h0aW5nIHdoaWxlIGxpbWl0aW5nIHNhbXBsaW5nIGNvbXB1dGF0aW9uLlxuICpcbiAqIFBhcGVyOiBGYXN0LCBBY2N1cmF0ZSBJbWFnZS1CYXNlZCBMaWdodGluZ1xuICogaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNXk4cl9VcEtsVTlTdlY0SUxiMEMzcUNQZWNTOHB2THovdmlld1xuKi9cblxuY2xhc3MgUE1SRU1HZW5lcmF0b3Ige1xuXG5cdGNvbnN0cnVjdG9yKCByZW5kZXJlciApIHtcblxuXHRcdHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG5cdFx0dGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0dGhpcy5fbG9kTWF4ID0gMDtcblx0XHR0aGlzLl9jdWJlU2l6ZSA9IDA7XG5cdFx0dGhpcy5fbG9kUGxhbmVzID0gW107XG5cdFx0dGhpcy5fc2l6ZUxvZHMgPSBbXTtcblx0XHR0aGlzLl9zaWdtYXMgPSBbXTtcblxuXHRcdHRoaXMuX2JsdXJNYXRlcmlhbCA9IG51bGw7XG5cdFx0dGhpcy5fY3ViZW1hcE1hdGVyaWFsID0gbnVsbDtcblx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gbnVsbDtcblxuXHRcdHRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fYmx1ck1hdGVyaWFsICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgYSBQTVJFTSBmcm9tIGEgc3VwcGxpZWQgU2NlbmUsIHdoaWNoIGNhbiBiZSBmYXN0ZXIgdGhhbiB1c2luZyBhblxuXHQgKiBpbWFnZSBpZiBuZXR3b3JraW5nIGJhbmR3aWR0aCBpcyBsb3cuIE9wdGlvbmFsIHNpZ21hIHNwZWNpZmllcyBhIGJsdXIgcmFkaXVzXG5cdCAqIGluIHJhZGlhbnMgdG8gYmUgYXBwbGllZCB0byB0aGUgc2NlbmUgYmVmb3JlIFBNUkVNIGdlbmVyYXRpb24uIE9wdGlvbmFsIG5lYXJcblx0ICogYW5kIGZhciBwbGFuZXMgZW5zdXJlIHRoZSBzY2VuZSBpcyByZW5kZXJlZCBpbiBpdHMgZW50aXJldHkgKHRoZSBjdWJlQ2FtZXJhXG5cdCAqIGlzIHBsYWNlZCBhdCB0aGUgb3JpZ2luKS5cblx0ICovXG5cdGZyb21TY2VuZSggc2NlbmUsIHNpZ21hID0gMCwgbmVhciA9IDAuMSwgZmFyID0gMTAwICkge1xuXG5cdFx0X29sZFRhcmdldCA9IHRoaXMuX3JlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0dGhpcy5fc2V0U2l6ZSggMjU2ICk7XG5cblx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSB0aGlzLl9hbGxvY2F0ZVRhcmdldHMoKTtcblx0XHRjdWJlVVZSZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgPSB0cnVlO1xuXG5cdFx0dGhpcy5fc2NlbmVUb0N1YmVVViggc2NlbmUsIG5lYXIsIGZhciwgY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpZiAoIHNpZ21hID4gMCApIHtcblxuXHRcdFx0dGhpcy5fYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCBzaWdtYSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fY2xlYW51cCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhbiBlcXVpcmVjdGFuZ3VsYXIgdGV4dHVyZSwgd2hpY2ggY2FuIGJlIGVpdGhlciBMRFJcblx0ICogb3IgSERSLiBUaGUgaWRlYWwgaW5wdXQgaW1hZ2Ugc2l6ZSBpcyAxayAoMTAyNCB4IDUxMiksXG5cdCAqIGFzIHRoaXMgbWF0Y2hlcyBiZXN0IHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC5cblx0ICovXG5cdGZyb21FcXVpcmVjdGFuZ3VsYXIoIGVxdWlyZWN0YW5ndWxhciwgcmVuZGVyVGFyZ2V0ID0gbnVsbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9mcm9tVGV4dHVyZSggZXF1aXJlY3Rhbmd1bGFyLCByZW5kZXJUYXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gYW4gY3ViZW1hcCB0ZXh0dXJlLCB3aGljaCBjYW4gYmUgZWl0aGVyIExEUlxuXHQgKiBvciBIRFIuIFRoZSBpZGVhbCBpbnB1dCBjdWJlIHNpemUgaXMgMjU2IHggMjU2LFxuXHQgKiBhcyB0aGlzIG1hdGNoZXMgYmVzdCB3aXRoIHRoZSAyNTYgeCAyNTYgY3ViZW1hcCBvdXRwdXQuXG5cdCAqL1xuXHRmcm9tQ3ViZW1hcCggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ID0gbnVsbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9mcm9tVGV4dHVyZSggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcmUtY29tcGlsZXMgdGhlIGN1YmVtYXAgc2hhZGVyLiBZb3UgY2FuIGdldCBmYXN0ZXIgc3RhcnQtdXAgYnkgaW52b2tpbmcgdGhpcyBtZXRob2QgZHVyaW5nXG5cdCAqIHlvdXIgdGV4dHVyZSdzIG5ldHdvcmsgZmV0Y2ggZm9yIGluY3JlYXNlZCBjb25jdXJyZW5jeS5cblx0ICovXG5cdGNvbXBpbGVDdWJlbWFwU2hhZGVyKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9IF9nZXRDdWJlbWFwTWF0ZXJpYWwoKTtcblx0XHRcdHRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fY3ViZW1hcE1hdGVyaWFsICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcmUtY29tcGlsZXMgdGhlIGVxdWlyZWN0YW5ndWxhciBzaGFkZXIuIFlvdSBjYW4gZ2V0IGZhc3RlciBzdGFydC11cCBieSBpbnZva2luZyB0aGlzIG1ldGhvZCBkdXJpbmdcblx0ICogeW91ciB0ZXh0dXJlJ3MgbmV0d29yayBmZXRjaCBmb3IgaW5jcmVhc2VkIGNvbmN1cnJlbmN5LlxuXHQgKi9cblx0Y29tcGlsZUVxdWlyZWN0YW5ndWxhclNoYWRlcigpIHtcblxuXHRcdGlmICggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9IF9nZXRFcXVpcmVjdE1hdGVyaWFsKCk7XG5cdFx0XHR0aGlzLl9jb21waWxlTWF0ZXJpYWwoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIG9mIHRoZSBQTVJFTUdlbmVyYXRvcidzIGludGVybmFsIG1lbW9yeS4gTm90ZSB0aGF0IFBNUkVNR2VuZXJhdG9yIGlzIGEgc3RhdGljIGNsYXNzLFxuXHQgKiBzbyB5b3Ugc2hvdWxkIG5vdCBuZWVkIG1vcmUgdGhhbiBvbmUgUE1SRU1HZW5lcmF0b3Igb2JqZWN0LiBJZiB5b3UgZG8sIGNhbGxpbmcgZGlzcG9zZSgpIG9uXG5cdCAqIG9uZSBvZiB0aGVtIHdpbGwgY2F1c2UgYW55IG90aGVycyB0byBhbHNvIGJlY29tZSB1bnVzYWJsZS5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLl9kaXNwb3NlKCk7XG5cblx0XHRpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMuX2N1YmVtYXBNYXRlcmlhbC5kaXNwb3NlKCk7XG5cdFx0aWYgKCB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5fZXF1aXJlY3RNYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdC8vIHByaXZhdGUgaW50ZXJmYWNlXG5cblx0X3NldFNpemUoIGN1YmVTaXplICkge1xuXG5cdFx0dGhpcy5fbG9kTWF4ID0gTWF0aC5mbG9vciggTWF0aC5sb2cyKCBjdWJlU2l6ZSApICk7XG5cdFx0dGhpcy5fY3ViZVNpemUgPSBNYXRoLnBvdyggMiwgdGhpcy5fbG9kTWF4ICk7XG5cblx0fVxuXG5cdF9kaXNwb3NlKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9ibHVyTWF0ZXJpYWwgIT09IG51bGwgKSB0aGlzLl9ibHVyTWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0aWYgKCB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCAhPT0gbnVsbCApIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0LmRpc3Bvc2UoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuX2xvZFBsYW5lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuX2xvZFBsYW5lc1sgaSBdLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0X2NsZWFudXAoIG91dHB1dFRhcmdldCApIHtcblxuXHRcdHRoaXMuX3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggX29sZFRhcmdldCApO1xuXHRcdG91dHB1dFRhcmdldC5zY2lzc29yVGVzdCA9IGZhbHNlO1xuXHRcdF9zZXRWaWV3cG9ydCggb3V0cHV0VGFyZ2V0LCAwLCAwLCBvdXRwdXRUYXJnZXQud2lkdGgsIG91dHB1dFRhcmdldC5oZWlnaHQgKTtcblxuXHR9XG5cblx0X2Zyb21UZXh0dXJlKCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0XHR0aGlzLl9zZXRTaXplKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCA9PT0gMCA/IDE2IDogKCB0ZXh0dXJlLmltYWdlWyAwIF0ud2lkdGggfHwgdGV4dHVyZS5pbWFnZVsgMCBdLmltYWdlLndpZHRoICkgKTtcblxuXHRcdH0gZWxzZSB7IC8vIEVxdWlyZWN0YW5ndWxhclxuXG5cdFx0XHR0aGlzLl9zZXRTaXplKCB0ZXh0dXJlLmltYWdlLndpZHRoIC8gNCApO1xuXG5cdFx0fVxuXG5cdFx0X29sZFRhcmdldCA9IHRoaXMuX3JlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0Y29uc3QgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0IHx8IHRoaXMuX2FsbG9jYXRlVGFyZ2V0cygpO1xuXHRcdHRoaXMuX3RleHR1cmVUb0N1YmVVViggdGV4dHVyZSwgY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fY2xlYW51cCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG5cdH1cblxuXHRfYWxsb2NhdGVUYXJnZXRzKCkge1xuXG5cdFx0Y29uc3Qgd2lkdGggPSAzICogTWF0aC5tYXgoIHRoaXMuX2N1YmVTaXplLCAxNiAqIDcgKTtcblx0XHRjb25zdCBoZWlnaHQgPSA0ICogdGhpcy5fY3ViZVNpemUgLSAzMjtcblxuXHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdG1hZ0ZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRcdFx0bWluRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdFx0XHRnZW5lcmF0ZU1pcG1hcHM6IGZhbHNlLFxuXHRcdFx0dHlwZTogSGFsZkZsb2F0VHlwZSxcblx0XHRcdGZvcm1hdDogUkdCQUZvcm1hdCxcblx0XHRcdGVuY29kaW5nOiBMaW5lYXJFbmNvZGluZyxcblx0XHRcdGRlcHRoQnVmZmVyOiBmYWxzZVxuXHRcdH07XG5cblx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSBfY3JlYXRlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTtcblxuXHRcdGlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQud2lkdGggIT09IHdpZHRoICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCA9IF9jcmVhdGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApO1xuXG5cdFx0XHRjb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7XG5cdFx0XHQoIHsgc2l6ZUxvZHM6IHRoaXMuX3NpemVMb2RzLCBsb2RQbGFuZXM6IHRoaXMuX2xvZFBsYW5lcywgc2lnbWFzOiB0aGlzLl9zaWdtYXMgfSA9IF9jcmVhdGVQbGFuZXMoIF9sb2RNYXggKSApO1xuXG5cdFx0XHR0aGlzLl9ibHVyTWF0ZXJpYWwgPSBfZ2V0Qmx1clNoYWRlciggX2xvZE1heCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9XG5cblx0X2NvbXBpbGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCB0bXBNZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgMCBdLCBtYXRlcmlhbCApO1xuXHRcdHRoaXMuX3JlbmRlcmVyLmNvbXBpbGUoIHRtcE1lc2gsIF9mbGF0Q2FtZXJhICk7XG5cblx0fVxuXG5cdF9zY2VuZVRvQ3ViZVVWKCBzY2VuZSwgbmVhciwgZmFyLCBjdWJlVVZSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBmb3YgPSA5MDtcblx0XHRjb25zdCBhc3BlY3QgPSAxO1xuXHRcdGNvbnN0IGN1YmVDYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjb25zdCB1cFNpZ24gPSBbIDEsIC0gMSwgMSwgMSwgMSwgMSBdO1xuXHRcdGNvbnN0IGZvcndhcmRTaWduID0gWyAxLCAxLCAxLCAtIDEsIC0gMSwgLSAxIF07XG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblxuXHRcdGNvbnN0IG9yaWdpbmFsQXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIuZ2V0Q2xlYXJDb2xvciggX2NsZWFyQ29sb3IgKTtcblxuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGJhY2tncm91bmRNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgge1xuXHRcdFx0bmFtZTogJ1BNUkVNLkJhY2tncm91bmQnLFxuXHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0fSApO1xuXG5cdFx0Y29uc3QgYmFja2dyb3VuZEJveCA9IG5ldyBNZXNoKCBuZXcgQm94R2VvbWV0cnkoKSwgYmFja2dyb3VuZE1hdGVyaWFsICk7XG5cblx0XHRsZXQgdXNlU29saWRDb2xvciA9IGZhbHNlO1xuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBzY2VuZS5iYWNrZ3JvdW5kO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQuaXNDb2xvciApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kTWF0ZXJpYWwuY29sb3IuY29weSggYmFja2dyb3VuZCApO1xuXHRcdFx0XHRzY2VuZS5iYWNrZ3JvdW5kID0gbnVsbDtcblx0XHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJhY2tncm91bmRNYXRlcmlhbC5jb2xvci5jb3B5KCBfY2xlYXJDb2xvciApO1xuXHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb2wgPSBpICUgMztcblxuXHRcdFx0aWYgKCBjb2wgPT09IDAgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBmb3J3YXJkU2lnblsgaSBdLCAwLCAwICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNvbCA9PT0gMSApIHtcblxuXHRcdFx0XHRjdWJlQ2FtZXJhLnVwLnNldCggMCwgMCwgdXBTaWduWyBpIF0gKTtcblx0XHRcdFx0Y3ViZUNhbWVyYS5sb29rQXQoIDAsIGZvcndhcmRTaWduWyBpIF0sIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjdWJlQ2FtZXJhLnVwLnNldCggMCwgdXBTaWduWyBpIF0sIDAgKTtcblx0XHRcdFx0Y3ViZUNhbWVyYS5sb29rQXQoIDAsIDAsIGZvcndhcmRTaWduWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzaXplID0gdGhpcy5fY3ViZVNpemU7XG5cblx0XHRcdF9zZXRWaWV3cG9ydCggY3ViZVVWUmVuZGVyVGFyZ2V0LCBjb2wgKiBzaXplLCBpID4gMiA/IHNpemUgOiAwLCBzaXplLCBzaXplICk7XG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGlmICggdXNlU29saWRDb2xvciApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5yZW5kZXIoIGJhY2tncm91bmRCb3gsIGN1YmVDYW1lcmEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjdWJlQ2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRiYWNrZ3JvdW5kQm94Lmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHRiYWNrZ3JvdW5kQm94Lm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gdG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gb3JpZ2luYWxBdXRvQ2xlYXI7XG5cdFx0c2NlbmUuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cblx0fVxuXG5cdF90ZXh0dXJlVG9DdWJlVVYoIHRleHR1cmUsIGN1YmVVVlJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cblx0XHRjb25zdCBpc0N1YmVUZXh0dXJlID0gKCB0ZXh0dXJlLm1hcHBpbmcgPT09IEN1YmVSZWZsZWN0aW9uTWFwcGluZyB8fCB0ZXh0dXJlLm1hcHBpbmcgPT09IEN1YmVSZWZyYWN0aW9uTWFwcGluZyApO1xuXG5cdFx0aWYgKCBpc0N1YmVUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBfZ2V0Q3ViZW1hcE1hdGVyaWFsKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3ViZW1hcE1hdGVyaWFsLnVuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApID8gLSAxIDogMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBpc0N1YmVUZXh0dXJlID8gdGhpcy5fY3ViZW1hcE1hdGVyaWFsIDogdGhpcy5fZXF1aXJlY3RNYXRlcmlhbDtcblx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgMCBdLCBtYXRlcmlhbCApO1xuXG5cdFx0Y29uc3QgdW5pZm9ybXMgPSBtYXRlcmlhbC51bmlmb3JtcztcblxuXHRcdHVuaWZvcm1zWyAnZW52TWFwJyBdLnZhbHVlID0gdGV4dHVyZTtcblxuXHRcdGNvbnN0IHNpemUgPSB0aGlzLl9jdWJlU2l6ZTtcblxuXHRcdF9zZXRWaWV3cG9ydCggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCAzICogc2l6ZSwgMiAqIHNpemUgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBtZXNoLCBfZmxhdENhbWVyYSApO1xuXG5cdH1cblxuXHRfYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblx0XHRjb25zdCBhdXRvQ2xlYXIgPSByZW5kZXJlci5hdXRvQ2xlYXI7XG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPCB0aGlzLl9sb2RQbGFuZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaWdtYSA9IE1hdGguc3FydCggdGhpcy5fc2lnbWFzWyBpIF0gKiB0aGlzLl9zaWdtYXNbIGkgXSAtIHRoaXMuX3NpZ21hc1sgaSAtIDEgXSAqIHRoaXMuX3NpZ21hc1sgaSAtIDEgXSApO1xuXG5cdFx0XHRjb25zdCBwb2xlQXhpcyA9IF9heGlzRGlyZWN0aW9uc1sgKCBpIC0gMSApICUgX2F4aXNEaXJlY3Rpb25zLmxlbmd0aCBdO1xuXG5cdFx0XHR0aGlzLl9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIGkgLSAxLCBpLCBzaWdtYSwgcG9sZUF4aXMgKTtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGF1dG9DbGVhcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgaXMgYSB0d28tcGFzcyBHYXVzc2lhbiBibHVyIGZvciBhIGN1YmVtYXAuIE5vcm1hbGx5IHRoaXMgaXMgZG9uZVxuXHQgKiB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHksIGJ1dCB0aGlzIGJyZWFrcyBkb3duIG9uIGEgY3ViZS4gSGVyZSB3ZSBhcHBseVxuXHQgKiB0aGUgYmx1ciBsYXRpdHVkaW5hbGx5IChhcm91bmQgdGhlIHBvbGVzKSwgYW5kIHRoZW4gbG9uZ2l0dWRpbmFsbHkgKHRvd2FyZHNcblx0ICogdGhlIHBvbGVzKSB0byBhcHByb3hpbWF0ZSB0aGUgb3J0aG9nb25hbGx5LXNlcGFyYWJsZSBibHVyLiBJdCBpcyBsZWFzdFxuXHQgKiBhY2N1cmF0ZSBhdCB0aGUgcG9sZXMsIGJ1dCBzdGlsbCBkb2VzIGEgZGVjZW50IGpvYi5cblx0ICovXG5cdF9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIGxvZEluLCBsb2RPdXQsIHNpZ21hLCBwb2xlQXhpcyApIHtcblxuXHRcdGNvbnN0IHBpbmdQb25nUmVuZGVyVGFyZ2V0ID0gdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQ7XG5cblx0XHR0aGlzLl9oYWxmQmx1cihcblx0XHRcdGN1YmVVVlJlbmRlclRhcmdldCxcblx0XHRcdHBpbmdQb25nUmVuZGVyVGFyZ2V0LFxuXHRcdFx0bG9kSW4sXG5cdFx0XHRsb2RPdXQsXG5cdFx0XHRzaWdtYSxcblx0XHRcdCdsYXRpdHVkaW5hbCcsXG5cdFx0XHRwb2xlQXhpcyApO1xuXG5cdFx0dGhpcy5faGFsZkJsdXIoXG5cdFx0XHRwaW5nUG9uZ1JlbmRlclRhcmdldCxcblx0XHRcdGN1YmVVVlJlbmRlclRhcmdldCxcblx0XHRcdGxvZE91dCxcblx0XHRcdGxvZE91dCxcblx0XHRcdHNpZ21hLFxuXHRcdFx0J2xvbmdpdHVkaW5hbCcsXG5cdFx0XHRwb2xlQXhpcyApO1xuXG5cdH1cblxuXHRfaGFsZkJsdXIoIHRhcmdldEluLCB0YXJnZXRPdXQsIGxvZEluLCBsb2RPdXQsIHNpZ21hUmFkaWFucywgZGlyZWN0aW9uLCBwb2xlQXhpcyApIHtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cdFx0Y29uc3QgYmx1ck1hdGVyaWFsID0gdGhpcy5fYmx1ck1hdGVyaWFsO1xuXG5cdFx0aWYgKCBkaXJlY3Rpb24gIT09ICdsYXRpdHVkaW5hbCcgJiYgZGlyZWN0aW9uICE9PSAnbG9uZ2l0dWRpbmFsJyApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0J2JsdXIgZGlyZWN0aW9uIG11c3QgYmUgZWl0aGVyIGxhdGl0dWRpbmFsIG9yIGxvbmdpdHVkaW5hbCEnICk7XG5cblx0XHR9XG5cblx0XHQvLyBOdW1iZXIgb2Ygc3RhbmRhcmQgZGV2aWF0aW9ucyBhdCB3aGljaCB0byBjdXQgb2ZmIHRoZSBkaXNjcmV0ZSBhcHByb3hpbWF0aW9uLlxuXHRcdGNvbnN0IFNUQU5EQVJEX0RFVklBVElPTlMgPSAzO1xuXG5cdFx0Y29uc3QgYmx1ck1lc2ggPSBuZXcgTWVzaCggdGhpcy5fbG9kUGxhbmVzWyBsb2RPdXQgXSwgYmx1ck1hdGVyaWFsICk7XG5cdFx0Y29uc3QgYmx1clVuaWZvcm1zID0gYmx1ck1hdGVyaWFsLnVuaWZvcm1zO1xuXG5cdFx0Y29uc3QgcGl4ZWxzID0gdGhpcy5fc2l6ZUxvZHNbIGxvZEluIF0gLSAxO1xuXHRcdGNvbnN0IHJhZGlhbnNQZXJQaXhlbCA9IGlzRmluaXRlKCBzaWdtYVJhZGlhbnMgKSA/IE1hdGguUEkgLyAoIDIgKiBwaXhlbHMgKSA6IDIgKiBNYXRoLlBJIC8gKCAyICogTUFYX1NBTVBMRVMgLSAxICk7XG5cdFx0Y29uc3Qgc2lnbWFQaXhlbHMgPSBzaWdtYVJhZGlhbnMgLyByYWRpYW5zUGVyUGl4ZWw7XG5cdFx0Y29uc3Qgc2FtcGxlcyA9IGlzRmluaXRlKCBzaWdtYVJhZGlhbnMgKSA/IDEgKyBNYXRoLmZsb29yKCBTVEFOREFSRF9ERVZJQVRJT05TICogc2lnbWFQaXhlbHMgKSA6IE1BWF9TQU1QTEVTO1xuXG5cdFx0aWYgKCBzYW1wbGVzID4gTUFYX1NBTVBMRVMgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggYHNpZ21hUmFkaWFucywgJHtcblx0XHRcdFx0c2lnbWFSYWRpYW5zfSwgaXMgdG9vIGxhcmdlIGFuZCB3aWxsIGNsaXAsIGFzIGl0IHJlcXVlc3RlZCAke1xuXHRcdFx0XHRzYW1wbGVzfSBzYW1wbGVzIHdoZW4gdGhlIG1heGltdW0gaXMgc2V0IHRvICR7TUFYX1NBTVBMRVN9YCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgd2VpZ2h0cyA9IFtdO1xuXHRcdGxldCBzdW0gPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgTUFYX1NBTVBMRVM7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHggPSBpIC8gc2lnbWFQaXhlbHM7XG5cdFx0XHRjb25zdCB3ZWlnaHQgPSBNYXRoLmV4cCggLSB4ICogeCAvIDIgKTtcblx0XHRcdHdlaWdodHMucHVzaCggd2VpZ2h0ICk7XG5cblx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRzdW0gKz0gd2VpZ2h0O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpIDwgc2FtcGxlcyApIHtcblxuXHRcdFx0XHRzdW0gKz0gMiAqIHdlaWdodDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgd2VpZ2h0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHdlaWdodHNbIGkgXSA9IHdlaWdodHNbIGkgXSAvIHN1bTtcblxuXHRcdH1cblxuXHRcdGJsdXJVbmlmb3Jtc1sgJ2Vudk1hcCcgXS52YWx1ZSA9IHRhcmdldEluLnRleHR1cmU7XG5cdFx0Ymx1clVuaWZvcm1zWyAnc2FtcGxlcycgXS52YWx1ZSA9IHNhbXBsZXM7XG5cdFx0Ymx1clVuaWZvcm1zWyAnd2VpZ2h0cycgXS52YWx1ZSA9IHdlaWdodHM7XG5cdFx0Ymx1clVuaWZvcm1zWyAnbGF0aXR1ZGluYWwnIF0udmFsdWUgPSBkaXJlY3Rpb24gPT09ICdsYXRpdHVkaW5hbCc7XG5cblx0XHRpZiAoIHBvbGVBeGlzICkge1xuXG5cdFx0XHRibHVyVW5pZm9ybXNbICdwb2xlQXhpcycgXS52YWx1ZSA9IHBvbGVBeGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgeyBfbG9kTWF4IH0gPSB0aGlzO1xuXHRcdGJsdXJVbmlmb3Jtc1sgJ2RUaGV0YScgXS52YWx1ZSA9IHJhZGlhbnNQZXJQaXhlbDtcblx0XHRibHVyVW5pZm9ybXNbICdtaXBJbnQnIF0udmFsdWUgPSBfbG9kTWF4IC0gbG9kSW47XG5cblx0XHRjb25zdCBvdXRwdXRTaXplID0gdGhpcy5fc2l6ZUxvZHNbIGxvZE91dCBdO1xuXHRcdGNvbnN0IHggPSAzICogb3V0cHV0U2l6ZSAqICggbG9kT3V0ID4gX2xvZE1heCAtIExPRF9NSU4gPyBsb2RPdXQgLSBfbG9kTWF4ICsgTE9EX01JTiA6IDAgKTtcblx0XHRjb25zdCB5ID0gNCAqICggdGhpcy5fY3ViZVNpemUgLSBvdXRwdXRTaXplICk7XG5cblx0XHRfc2V0Vmlld3BvcnQoIHRhcmdldE91dCwgeCwgeSwgMyAqIG91dHB1dFNpemUsIDIgKiBvdXRwdXRTaXplICk7XG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0YXJnZXRPdXQgKTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIGJsdXJNZXNoLCBfZmxhdENhbWVyYSApO1xuXG5cdH1cblxufVxuXG5cblxuZnVuY3Rpb24gX2NyZWF0ZVBsYW5lcyggbG9kTWF4ICkge1xuXG5cdGNvbnN0IGxvZFBsYW5lcyA9IFtdO1xuXHRjb25zdCBzaXplTG9kcyA9IFtdO1xuXHRjb25zdCBzaWdtYXMgPSBbXTtcblxuXHRsZXQgbG9kID0gbG9kTWF4O1xuXG5cdGNvbnN0IHRvdGFsTG9kcyA9IGxvZE1heCAtIExPRF9NSU4gKyAxICsgRVhUUkFfTE9EX1NJR01BLmxlbmd0aDtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0b3RhbExvZHM7IGkgKysgKSB7XG5cblx0XHRjb25zdCBzaXplTG9kID0gTWF0aC5wb3coIDIsIGxvZCApO1xuXHRcdHNpemVMb2RzLnB1c2goIHNpemVMb2QgKTtcblx0XHRsZXQgc2lnbWEgPSAxLjAgLyBzaXplTG9kO1xuXG5cdFx0aWYgKCBpID4gbG9kTWF4IC0gTE9EX01JTiApIHtcblxuXHRcdFx0c2lnbWEgPSBFWFRSQV9MT0RfU0lHTUFbIGkgLSBsb2RNYXggKyBMT0RfTUlOIC0gMSBdO1xuXG5cdFx0fSBlbHNlIGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0c2lnbWEgPSAwO1xuXG5cdFx0fVxuXG5cdFx0c2lnbWFzLnB1c2goIHNpZ21hICk7XG5cblx0XHRjb25zdCB0ZXhlbFNpemUgPSAxLjAgLyAoIHNpemVMb2QgLSAxICk7XG5cdFx0Y29uc3QgbWluID0gLSB0ZXhlbFNpemUgLyAyO1xuXHRcdGNvbnN0IG1heCA9IDEgKyB0ZXhlbFNpemUgLyAyO1xuXHRcdGNvbnN0IHV2MSA9IFsgbWluLCBtaW4sIG1heCwgbWluLCBtYXgsIG1heCwgbWluLCBtaW4sIG1heCwgbWF4LCBtaW4sIG1heCBdO1xuXG5cdFx0Y29uc3QgY3ViZUZhY2VzID0gNjtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IDY7XG5cdFx0Y29uc3QgcG9zaXRpb25TaXplID0gMztcblx0XHRjb25zdCB1dlNpemUgPSAyO1xuXHRcdGNvbnN0IGZhY2VJbmRleFNpemUgPSAxO1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvblNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApO1xuXHRcdGNvbnN0IHV2ID0gbmV3IEZsb2F0MzJBcnJheSggdXZTaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblx0XHRjb25zdCBmYWNlSW5kZXggPSBuZXcgRmxvYXQzMkFycmF5KCBmYWNlSW5kZXhTaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblxuXHRcdGZvciAoIGxldCBmYWNlID0gMDsgZmFjZSA8IGN1YmVGYWNlczsgZmFjZSArKyApIHtcblxuXHRcdFx0Y29uc3QgeCA9ICggZmFjZSAlIDMgKSAqIDIgLyAzIC0gMTtcblx0XHRcdGNvbnN0IHkgPSBmYWNlID4gMiA/IDAgOiAtIDE7XG5cdFx0XHRjb25zdCBjb29yZGluYXRlcyA9IFtcblx0XHRcdFx0eCwgeSwgMCxcblx0XHRcdFx0eCArIDIgLyAzLCB5LCAwLFxuXHRcdFx0XHR4ICsgMiAvIDMsIHkgKyAxLCAwLFxuXHRcdFx0XHR4LCB5LCAwLFxuXHRcdFx0XHR4ICsgMiAvIDMsIHkgKyAxLCAwLFxuXHRcdFx0XHR4LCB5ICsgMSwgMFxuXHRcdFx0XTtcblx0XHRcdHBvc2l0aW9uLnNldCggY29vcmRpbmF0ZXMsIHBvc2l0aW9uU2l6ZSAqIHZlcnRpY2VzICogZmFjZSApO1xuXHRcdFx0dXYuc2V0KCB1djEsIHV2U2l6ZSAqIHZlcnRpY2VzICogZmFjZSApO1xuXHRcdFx0Y29uc3QgZmlsbCA9IFsgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSBdO1xuXHRcdFx0ZmFjZUluZGV4LnNldCggZmlsbCwgZmFjZUluZGV4U2l6ZSAqIHZlcnRpY2VzICogZmFjZSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcGxhbmVzID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0cGxhbmVzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIHBvc2l0aW9uU2l6ZSApICk7XG5cdFx0cGxhbmVzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdXYsIHV2U2l6ZSApICk7XG5cdFx0cGxhbmVzLnNldEF0dHJpYnV0ZSggJ2ZhY2VJbmRleCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGZhY2VJbmRleCwgZmFjZUluZGV4U2l6ZSApICk7XG5cdFx0bG9kUGxhbmVzLnB1c2goIHBsYW5lcyApO1xuXG5cdFx0aWYgKCBsb2QgPiBMT0RfTUlOICkge1xuXG5cdFx0XHRsb2QgLS07XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7IGxvZFBsYW5lcywgc2l6ZUxvZHMsIHNpZ21hcyB9O1xuXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApIHtcblxuXHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQudGV4dHVyZS5tYXBwaW5nID0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc7XG5cdGN1YmVVVlJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSAnUE1SRU0uY3ViZVV2Jztcblx0Y3ViZVVWUmVuZGVyVGFyZ2V0LnNjaXNzb3JUZXN0ID0gdHJ1ZTtcblx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxufVxuXG5mdW5jdGlvbiBfc2V0Vmlld3BvcnQoIHRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHR0YXJnZXQudmlld3BvcnQuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cdHRhcmdldC5zY2lzc29yLnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRCbHVyU2hhZGVyKCBsb2RNYXgsIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0Y29uc3Qgd2VpZ2h0cyA9IG5ldyBGbG9hdDMyQXJyYXkoIE1BWF9TQU1QTEVTICk7XG5cdGNvbnN0IHBvbGVBeGlzID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcblx0Y29uc3Qgc2hhZGVyTWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblxuXHRcdG5hbWU6ICdTcGhlcmljYWxHYXVzc2lhbkJsdXInLFxuXG5cdFx0ZGVmaW5lczoge1xuXHRcdFx0J24nOiBNQVhfU0FNUExFUyxcblx0XHRcdCdDVUJFVVZfVEVYRUxfV0lEVEgnOiAxLjAgLyB3aWR0aCxcblx0XHRcdCdDVUJFVVZfVEVYRUxfSEVJR0hUJzogMS4wIC8gaGVpZ2h0LFxuXHRcdFx0J0NVQkVVVl9NQVhfTUlQJzogYCR7bG9kTWF4fS4wYCxcblx0XHR9LFxuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdCdlbnZNYXAnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHQnc2FtcGxlcyc6IHsgdmFsdWU6IDEgfSxcblx0XHRcdCd3ZWlnaHRzJzogeyB2YWx1ZTogd2VpZ2h0cyB9LFxuXHRcdFx0J2xhdGl0dWRpbmFsJzogeyB2YWx1ZTogZmFsc2UgfSxcblx0XHRcdCdkVGhldGEnOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHQnbWlwSW50JzogeyB2YWx1ZTogMCB9LFxuXHRcdFx0J3BvbGVBeGlzJzogeyB2YWx1ZTogcG9sZUF4aXMgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IF9nZXRDb21tb25WZXJ0ZXhTaGFkZXIoKSxcblxuXHRcdGZyYWdtZW50U2hhZGVyOiAvKiBnbHNsICovYFxuXG5cdFx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGludDtcblxuXHRcdFx0dmFyeWluZyB2ZWMzIHZPdXRwdXREaXJlY3Rpb247XG5cblx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcblx0XHRcdHVuaWZvcm0gaW50IHNhbXBsZXM7XG5cdFx0XHR1bmlmb3JtIGZsb2F0IHdlaWdodHNbIG4gXTtcblx0XHRcdHVuaWZvcm0gYm9vbCBsYXRpdHVkaW5hbDtcblx0XHRcdHVuaWZvcm0gZmxvYXQgZFRoZXRhO1xuXHRcdFx0dW5pZm9ybSBmbG9hdCBtaXBJbnQ7XG5cdFx0XHR1bmlmb3JtIHZlYzMgcG9sZUF4aXM7XG5cblx0XHRcdCNkZWZpbmUgRU5WTUFQX1RZUEVfQ1VCRV9VVlxuXHRcdFx0I2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cblxuXHRcdFx0dmVjMyBnZXRTYW1wbGUoIGZsb2F0IHRoZXRhLCB2ZWMzIGF4aXMgKSB7XG5cblx0XHRcdFx0ZmxvYXQgY29zVGhldGEgPSBjb3MoIHRoZXRhICk7XG5cdFx0XHRcdC8vIFJvZHJpZ3VlcycgYXhpcy1hbmdsZSByb3RhdGlvblxuXHRcdFx0XHR2ZWMzIHNhbXBsZURpcmVjdGlvbiA9IHZPdXRwdXREaXJlY3Rpb24gKiBjb3NUaGV0YVxuXHRcdFx0XHRcdCsgY3Jvc3MoIGF4aXMsIHZPdXRwdXREaXJlY3Rpb24gKSAqIHNpbiggdGhldGEgKVxuXHRcdFx0XHRcdCsgYXhpcyAqIGRvdCggYXhpcywgdk91dHB1dERpcmVjdGlvbiApICogKCAxLjAgLSBjb3NUaGV0YSApO1xuXG5cdFx0XHRcdHJldHVybiBiaWxpbmVhckN1YmVVViggZW52TWFwLCBzYW1wbGVEaXJlY3Rpb24sIG1pcEludCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHR2ZWMzIGF4aXMgPSBsYXRpdHVkaW5hbCA/IHBvbGVBeGlzIDogY3Jvc3MoIHBvbGVBeGlzLCB2T3V0cHV0RGlyZWN0aW9uICk7XG5cblx0XHRcdFx0aWYgKCBhbGwoIGVxdWFsKCBheGlzLCB2ZWMzKCAwLjAgKSApICkgKSB7XG5cblx0XHRcdFx0XHRheGlzID0gdmVjMyggdk91dHB1dERpcmVjdGlvbi56LCAwLjAsIC0gdk91dHB1dERpcmVjdGlvbi54ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGF4aXMgPSBub3JtYWxpemUoIGF4aXMgKTtcblxuXHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTtcblx0XHRcdFx0Z2xfRnJhZ0NvbG9yLnJnYiArPSB3ZWlnaHRzWyAwIF0gKiBnZXRTYW1wbGUoIDAuMCwgYXhpcyApO1xuXG5cdFx0XHRcdGZvciAoIGludCBpID0gMTsgaSA8IG47IGkrKyApIHtcblxuXHRcdFx0XHRcdGlmICggaSA+PSBzYW1wbGVzICkge1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZsb2F0IHRoZXRhID0gZFRoZXRhICogZmxvYXQoIGkgKTtcblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIGkgXSAqIGdldFNhbXBsZSggLTEuMCAqIHRoZXRhLCBheGlzICk7XG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yLnJnYiArPSB3ZWlnaHRzWyBpIF0gKiBnZXRTYW1wbGUoIHRoZXRhLCBheGlzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cblx0cmV0dXJuIHNoYWRlck1hdGVyaWFsO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRFcXVpcmVjdE1hdGVyaWFsKCkge1xuXG5cdHJldHVybiBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblxuXHRcdG5hbWU6ICdFcXVpcmVjdGFuZ3VsYXJUb0N1YmVVVicsXG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0J2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IF9nZXRDb21tb25WZXJ0ZXhTaGFkZXIoKSxcblxuXHRcdGZyYWdtZW50U2hhZGVyOiAvKiBnbHNsICovYFxuXG5cdFx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGludDtcblxuXHRcdFx0dmFyeWluZyB2ZWMzIHZPdXRwdXREaXJlY3Rpb247XG5cblx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcblxuXHRcdFx0I2luY2x1ZGUgPGNvbW1vbj5cblxuXHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdHZlYzMgb3V0cHV0RGlyZWN0aW9uID0gbm9ybWFsaXplKCB2T3V0cHV0RGlyZWN0aW9uICk7XG5cdFx0XHRcdHZlYzIgdXYgPSBlcXVpcmVjdFV2KCBvdXRwdXREaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB0ZXh0dXJlMkQgKCBlbnZNYXAsIHV2ICkucmdiLCAxLjAgKTtcblxuXHRcdFx0fVxuXHRcdGAsXG5cblx0XHRibGVuZGluZzogTm9CbGVuZGluZyxcblx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdGRlcHRoV3JpdGU6IGZhbHNlXG5cblx0fSApO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRDdWJlbWFwTWF0ZXJpYWwoKSB7XG5cblx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0bmFtZTogJ0N1YmVtYXBUb0N1YmVVVicsXG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0J2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdCdmbGlwRW52TWFwJzogeyB2YWx1ZTogLSAxIH1cblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCksXG5cblx0XHRmcmFnbWVudFNoYWRlcjogLyogZ2xzbCAqL2BcblxuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cdFx0XHRwcmVjaXNpb24gbWVkaXVtcCBpbnQ7XG5cblx0XHRcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcblxuXHRcdFx0dmFyeWluZyB2ZWMzIHZPdXRwdXREaXJlY3Rpb247XG5cblx0XHRcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xuXG5cdFx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgdmVjMyggZmxpcEVudk1hcCAqIHZPdXRwdXREaXJlY3Rpb24ueCwgdk91dHB1dERpcmVjdGlvbi55eiApICk7XG5cblx0XHRcdH1cblx0XHRgLFxuXG5cdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmcsXG5cdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRkZXB0aFdyaXRlOiBmYWxzZVxuXG5cdH0gKTtcblxufVxuXG5mdW5jdGlvbiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCkge1xuXG5cdHJldHVybiAvKiBnbHNsICovYFxuXG5cdFx0cHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0YXR0cmlidXRlIGZsb2F0IGZhY2VJbmRleDtcblxuXHRcdHZhcnlpbmcgdmVjMyB2T3V0cHV0RGlyZWN0aW9uO1xuXG5cdFx0Ly8gUkggY29vcmRpbmF0ZSBzeXN0ZW07IFBNUkVNIGZhY2UtaW5kZXhpbmcgY29udmVudGlvblxuXHRcdHZlYzMgZ2V0RGlyZWN0aW9uKCB2ZWMyIHV2LCBmbG9hdCBmYWNlICkge1xuXG5cdFx0XHR1diA9IDIuMCAqIHV2IC0gMS4wO1xuXG5cdFx0XHR2ZWMzIGRpcmVjdGlvbiA9IHZlYzMoIHV2LCAxLjAgKTtcblxuXHRcdFx0aWYgKCBmYWNlID09IDAuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24gPSBkaXJlY3Rpb24uenl4OyAvLyAoIDEsIHYsIHUgKSBwb3MgeFxuXG5cdFx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDEuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24gPSBkaXJlY3Rpb24ueHp5O1xuXHRcdFx0XHRkaXJlY3Rpb24ueHogKj0gLTEuMDsgLy8gKCAtdSwgMSwgLXYgKSBwb3MgeVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDIuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24ueCAqPSAtMS4wOyAvLyAoIC11LCB2LCAxICkgcG9zIHpcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSAzLjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uID0gZGlyZWN0aW9uLnp5eDtcblx0XHRcdFx0ZGlyZWN0aW9uLnh6ICo9IC0xLjA7IC8vICggLTEsIHYsIC11ICkgbmVnIHhcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSA0LjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uID0gZGlyZWN0aW9uLnh6eTtcblx0XHRcdFx0ZGlyZWN0aW9uLnh5ICo9IC0xLjA7IC8vICggLXUsIC0xLCB2ICkgbmVnIHlcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSA1LjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uLnogKj0gLTEuMDsgLy8gKCB1LCB2LCAtMSApIG5lZyB6XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRpcmVjdGlvbjtcblxuXHRcdH1cblxuXHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0dk91dHB1dERpcmVjdGlvbiA9IGdldERpcmVjdGlvbiggdXYsIGZhY2VJbmRleCApO1xuXHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cblx0XHR9XG5cdGA7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xDdWJlVVZNYXBzKCByZW5kZXJlciApIHtcblxuXHRsZXQgY3ViZVVWbWFwcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0bGV0IHBtcmVtR2VuZXJhdG9yID0gbnVsbDtcblxuXHRmdW5jdGlvbiBnZXQoIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGNvbnN0IG1hcHBpbmcgPSB0ZXh0dXJlLm1hcHBpbmc7XG5cblx0XHRcdGNvbnN0IGlzRXF1aXJlY3RNYXAgPSAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nIHx8IG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nICk7XG5cdFx0XHRjb25zdCBpc0N1YmVNYXAgPSAoIG1hcHBpbmcgPT09IEN1YmVSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgKTtcblxuXHRcdFx0Ly8gZXF1aXJlY3QvY3ViZSBtYXAgdG8gY3ViZVVWIGNvbnZlcnNpb25cblxuXHRcdFx0aWYgKCBpc0VxdWlyZWN0TWFwIHx8IGlzQ3ViZU1hcCApIHtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlICYmIHRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0bGV0IHJlbmRlclRhcmdldCA9IGN1YmVVVm1hcHMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0XHRpZiAoIHBtcmVtR2VuZXJhdG9yID09PSBudWxsICkgcG1yZW1HZW5lcmF0b3IgPSBuZXcgUE1SRU1HZW5lcmF0b3IoIHJlbmRlcmVyICk7XG5cblx0XHRcdFx0XHRyZW5kZXJUYXJnZXQgPSBpc0VxdWlyZWN0TWFwID8gcG1yZW1HZW5lcmF0b3IuZnJvbUVxdWlyZWN0YW5ndWxhciggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0ICkgOiBwbXJlbUdlbmVyYXRvci5mcm9tQ3ViZW1hcCggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdFx0Y3ViZVVWbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIGN1YmVVVm1hcHMuaGFzKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBjdWJlVVZtYXBzLmdldCggdGV4dHVyZSApLnRleHR1cmU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdFx0XHRcdGlmICggKCBpc0VxdWlyZWN0TWFwICYmIGltYWdlICYmIGltYWdlLmhlaWdodCA+IDAgKSB8fCAoIGlzQ3ViZU1hcCAmJiBpbWFnZSAmJiBpc0N1YmVUZXh0dXJlQ29tcGxldGUoIGltYWdlICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHBtcmVtR2VuZXJhdG9yID09PSBudWxsICkgcG1yZW1HZW5lcmF0b3IgPSBuZXcgUE1SRU1HZW5lcmF0b3IoIHJlbmRlcmVyICk7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0ID0gaXNFcXVpcmVjdE1hcCA/IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIoIHRleHR1cmUgKSA6IHBtcmVtR2VuZXJhdG9yLmZyb21DdWJlbWFwKCB0ZXh0dXJlICk7XG5cdFx0XHRcdFx0XHRcdGN1YmVVVm1hcHMuc2V0KCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBpbWFnZSBub3QgeWV0IHJlYWR5LiB0cnkgdGhlIGNvbnZlcnNpb24gbmV4dCBmcmFtZVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNDdWJlVGV4dHVyZUNvbXBsZXRlKCBpbWFnZSApIHtcblxuXHRcdGxldCBjb3VudCA9IDA7XG5cdFx0Y29uc3QgbGVuZ3RoID0gNjtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBpbWFnZVsgaSBdICE9PSB1bmRlZmluZWQgKSBjb3VudCArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb3VudCA9PT0gbGVuZ3RoO1xuXG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRjb25zdCBjdWJlbWFwVVYgPSBjdWJlVVZtYXBzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCBjdWJlbWFwVVYgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y3ViZVVWbWFwcy5kZWxldGUoIHRleHR1cmUgKTtcblx0XHRcdGN1YmVtYXBVVi5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRjdWJlVVZtYXBzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdGlmICggcG1yZW1HZW5lcmF0b3IgIT09IG51bGwgKSB7XG5cblx0XHRcdHBtcmVtR2VuZXJhdG9yLmRpc3Bvc2UoKTtcblx0XHRcdHBtcmVtR2VuZXJhdG9yID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xFeHRlbnNpb25zKCBnbCApIHtcblxuXHRjb25zdCBleHRlbnNpb25zID0ge307XG5cblx0ZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKCBuYW1lICkge1xuXG5cdFx0aWYgKCBleHRlbnNpb25zWyBuYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbnNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdGxldCBleHRlbnNpb247XG5cblx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRjYXNlICdXRUJHTF9kZXB0aF90ZXh0dXJlJzpcblx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Yyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnOlxuXHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggbmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uc1sgbmFtZSBdID0gZXh0ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIGV4dGVuc2lvbjtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGhhczogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0XHRyZXR1cm4gZ2V0RXh0ZW5zaW9uKCBuYW1lICkgIT09IG51bGw7XG5cblx0XHR9LFxuXG5cdFx0aW5pdDogZnVuY3Rpb24gKCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0Z2V0RXh0ZW5zaW9uKCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApO1xuXHRcdFx0XHRnZXRFeHRlbnNpb24oICdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnICk7XG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ09FU19lbGVtZW50X2luZGV4X3VpbnQnICk7XG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JyApO1xuXHRcdFx0XHRnZXRFeHRlbnNpb24oICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdldEV4dGVuc2lvbiggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKTtcblx0XHRcdGdldEV4dGVuc2lvbiggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKTtcblx0XHRcdGdldEV4dGVuc2lvbiggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKTtcblxuXHRcdH0sXG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uKCBuYW1lICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBuYW1lICsgJyBleHRlbnNpb24gbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbjtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMR2VvbWV0cmllcyggZ2wsIGF0dHJpYnV0ZXMsIGluZm8sIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0Y29uc3QgZ2VvbWV0cmllcyA9IHt9O1xuXHRjb25zdCB3aXJlZnJhbWVBdHRyaWJ1dGVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBvbkdlb21ldHJ5RGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdGlmICggZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBnZW9tZXRyeS5pbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggZ2VvbWV0cnkuYXR0cmlidXRlc1sgbmFtZSBdICk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7XG5cblx0XHRkZWxldGUgZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGNvbnN0IGF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBhdHRyaWJ1dGUgKTtcblx0XHRcdHdpcmVmcmFtZUF0dHJpYnV0ZXMuZGVsZXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0fVxuXG5cdFx0YmluZGluZ1N0YXRlcy5yZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0ZGVsZXRlIGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50O1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGluZm8ubWVtb3J5Lmdlb21ldHJpZXMgLS07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldCggb2JqZWN0LCBnZW9tZXRyeSApIHtcblxuXHRcdGlmICggZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXSA9PT0gdHJ1ZSApIHJldHVybiBnZW9tZXRyeTtcblxuXHRcdGdlb21ldHJ5LmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25HZW9tZXRyeURpc3Bvc2UgKTtcblxuXHRcdGdlb21ldHJpZXNbIGdlb21ldHJ5LmlkIF0gPSB0cnVlO1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyArKztcblxuXHRcdHJldHVybiBnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBVcGRhdGluZyBpbmRleCBidWZmZXIgaW4gVkFPIG5vdy4gU2VlIFdlYkdMQmluZGluZ1N0YXRlcy5cblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gZ2VvbWV0cnlBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF0sIDM0OTYyICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCB0YXJnZXRzXG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggYXJyYXlbIGkgXSwgMzQ5NjIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdGNvbnN0IGdlb21ldHJ5UG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGxldCB2ZXJzaW9uID0gMDtcblxuXHRcdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBnZW9tZXRyeUluZGV4LmFycmF5O1xuXHRcdFx0dmVyc2lvbiA9IGdlb21ldHJ5SW5kZXgudmVyc2lvbjtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBhcnJheVsgaSArIDAgXTtcblx0XHRcdFx0Y29uc3QgYiA9IGFycmF5WyBpICsgMSBdO1xuXHRcdFx0XHRjb25zdCBjID0gYXJyYXlbIGkgKyAyIF07XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBiLCBjLCBjLCBhICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gZ2VvbWV0cnlQb3NpdGlvbi5hcnJheTtcblx0XHRcdHZlcnNpb24gPSBnZW9tZXRyeVBvc2l0aW9uLnZlcnNpb247XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9ICggYXJyYXkubGVuZ3RoIC8gMyApIC0gMTsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gaSArIDA7XG5cdFx0XHRcdGNvbnN0IGIgPSBpICsgMTtcblx0XHRcdFx0Y29uc3QgYyA9IGkgKyAyO1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBhdHRyaWJ1dGUgPSBuZXcgKCBhcnJheU5lZWRzVWludDMyKCBpbmRpY2VzICkgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgKSggaW5kaWNlcywgMSApO1xuXHRcdGF0dHJpYnV0ZS52ZXJzaW9uID0gdmVyc2lvbjtcblxuXHRcdC8vIFVwZGF0aW5nIGluZGV4IGJ1ZmZlciBpbiBWQU8gbm93LiBTZWUgV2ViR0xCaW5kaW5nU3RhdGVzXG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgcHJldmlvdXNBdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggcHJldmlvdXNBdHRyaWJ1dGUgKSBhdHRyaWJ1dGVzLnJlbW92ZSggcHJldmlvdXNBdHRyaWJ1dGUgKTtcblxuXHRcdC8vXG5cblx0XHR3aXJlZnJhbWVBdHRyaWJ1dGVzLnNldCggZ2VvbWV0cnksIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc3QgY3VycmVudEF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBjdXJyZW50QXR0cmlidXRlICkge1xuXG5cdFx0XHRjb25zdCBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cblx0XHRcdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBpZiB0aGUgYXR0cmlidXRlIGlzIG9ic29sZXRlLCBjcmVhdGUgYSBuZXcgb25lXG5cblx0XHRcdFx0aWYgKCBjdXJyZW50QXR0cmlidXRlLnZlcnNpb24gPCBnZW9tZXRyeUluZGV4LnZlcnNpb24gKSB7XG5cblx0XHRcdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGdldCxcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblxuXHRcdGdldFdpcmVmcmFtZUF0dHJpYnV0ZTogZ2V0V2lyZWZyYW1lQXR0cmlidXRlXG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApIHtcblxuXHRjb25zdCBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblxuXHRsZXQgbW9kZTtcblxuXHRmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHtcblxuXHRcdG1vZGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0bGV0IHR5cGUsIGJ5dGVzUGVyRWxlbWVudDtcblxuXHRmdW5jdGlvbiBzZXRJbmRleCggdmFsdWUgKSB7XG5cblx0XHR0eXBlID0gdmFsdWUudHlwZTtcblx0XHRieXRlc1BlckVsZW1lbnQgPSB2YWx1ZS5ieXRlc1BlckVsZW1lbnQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Z2wuZHJhd0VsZW1lbnRzKCBtb2RlLCBjb3VudCwgdHlwZSwgc3RhcnQgKiBieXRlc1BlckVsZW1lbnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgMSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50ICkge1xuXG5cdFx0aWYgKCBwcmltY291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRsZXQgZXh0ZW5zaW9uLCBtZXRob2ROYW1lO1xuXG5cdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZ2w7XG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdFbGVtZW50c0luc3RhbmNlZCc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFJztcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uWyBtZXRob2ROYW1lIF0oIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCwgcHJpbWNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIHByaW1jb3VudCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMuc2V0SW5kZXggPSBzZXRJbmRleDtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMSW5mbyggZ2wgKSB7XG5cblx0Y29uc3QgbWVtb3J5ID0ge1xuXHRcdGdlb21ldHJpZXM6IDAsXG5cdFx0dGV4dHVyZXM6IDBcblx0fTtcblxuXHRjb25zdCByZW5kZXIgPSB7XG5cdFx0ZnJhbWU6IDAsXG5cdFx0Y2FsbHM6IDAsXG5cdFx0dHJpYW5nbGVzOiAwLFxuXHRcdHBvaW50czogMCxcblx0XHRsaW5lczogMFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggY291bnQsIG1vZGUsIGluc3RhbmNlQ291bnQgKSB7XG5cblx0XHRyZW5kZXIuY2FsbHMgKys7XG5cblx0XHRzd2l0Y2ggKCBtb2RlICkge1xuXG5cdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdHJlbmRlci50cmlhbmdsZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAzICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdHJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAvIDIgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC0gMSApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqIGNvdW50O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRyZW5kZXIucG9pbnRzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEluZm86IFVua25vd24gZHJhdyBtb2RlOicsIG1vZGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0cmVuZGVyLmZyYW1lICsrO1xuXHRcdHJlbmRlci5jYWxscyA9IDA7XG5cdFx0cmVuZGVyLnRyaWFuZ2xlcyA9IDA7XG5cdFx0cmVuZGVyLnBvaW50cyA9IDA7XG5cdFx0cmVuZGVyLmxpbmVzID0gMDtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRtZW1vcnk6IG1lbW9yeSxcblx0XHRyZW5kZXI6IHJlbmRlcixcblx0XHRwcm9ncmFtczogbnVsbCxcblx0XHRhdXRvUmVzZXQ6IHRydWUsXG5cdFx0cmVzZXQ6IHJlc2V0LFxuXHRcdHVwZGF0ZTogdXBkYXRlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gbnVtZXJpY2FsU29ydCggYSwgYiApIHtcblxuXHRyZXR1cm4gYVsgMCBdIC0gYlsgMCBdO1xuXG59XG5cbmZ1bmN0aW9uIGFic051bWVyaWNhbFNvcnQoIGEsIGIgKSB7XG5cblx0cmV0dXJuIE1hdGguYWJzKCBiWyAxIF0gKSAtIE1hdGguYWJzKCBhWyAxIF0gKTtcblxufVxuXG5mdW5jdGlvbiBkZW5vcm1hbGl6ZSggbW9ycGgsIGF0dHJpYnV0ZSApIHtcblxuXHRsZXQgZGVub21pbmF0b3IgPSAxO1xuXHRjb25zdCBhcnJheSA9IGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlID8gYXR0cmlidXRlLmRhdGEuYXJyYXkgOiBhdHRyaWJ1dGUuYXJyYXk7XG5cblx0aWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSApIGRlbm9taW5hdG9yID0gMTI3O1xuXHRlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICkgZGVub21pbmF0b3IgPSAzMjc2Nztcblx0ZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSApIGRlbm9taW5hdG9yID0gMjE0NzQ4MzY0Nztcblx0ZWxzZSBjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xNb3JwaHRhcmdldHM6IFVuc3VwcG9ydGVkIG1vcnBoIGF0dHJpYnV0ZSBkYXRhIHR5cGU6ICcsIGFycmF5ICk7XG5cblx0bW9ycGguZGl2aWRlU2NhbGFyKCBkZW5vbWluYXRvciApO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMTW9ycGh0YXJnZXRzKCBnbCwgY2FwYWJpbGl0aWVzLCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBpbmZsdWVuY2VzTGlzdCA9IHt9O1xuXHRjb25zdCBtb3JwaEluZmx1ZW5jZXMgPSBuZXcgRmxvYXQzMkFycmF5KCA4ICk7XG5cdGNvbnN0IG1vcnBoVGV4dHVyZXMgPSBuZXcgV2Vha01hcCgpO1xuXHRjb25zdCBtb3JwaCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0Y29uc3Qgd29ya0luZmx1ZW5jZXMgPSBbXTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA4OyBpICsrICkge1xuXG5cdFx0d29ya0luZmx1ZW5jZXNbIGkgXSA9IFsgaSwgMCBdO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBwcm9ncmFtICkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0SW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB1c2luZyBhdHRyaWJ1dGVzLCB0aGUgV2ViR0wgMiBjb2RlIHBhdGggZW5jb2RlcyBtb3JwaCB0YXJnZXRzXG5cdFx0XHQvLyBpbnRvIGFuIGFycmF5IG9mIGRhdGEgdGV4dHVyZXMuIEVhY2ggbGF5ZXIgcmVwcmVzZW50cyBhIHNpbmdsZSBtb3JwaCB0YXJnZXQuXG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzQ291bnQgPSAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoQXR0cmlidXRlLmxlbmd0aCA6IDA7XG5cblx0XHRcdGxldCBlbnRyeSA9IG1vcnBoVGV4dHVyZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0XHRpZiAoIGVudHJ5ID09PSB1bmRlZmluZWQgfHwgZW50cnkuY291bnQgIT09IG1vcnBoVGFyZ2V0c0NvdW50ICkge1xuXG5cdFx0XHRcdGlmICggZW50cnkgIT09IHVuZGVmaW5lZCApIGVudHJ5LnRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0XHRcdGNvbnN0IGhhc01vcnBoUG9zaXRpb24gPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZDtcblx0XHRcdFx0Y29uc3QgaGFzTW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0XHRjb25zdCBoYXNNb3JwaENvbG9ycyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0cyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiB8fCBbXTtcblx0XHRcdFx0Y29uc3QgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBbXTtcblx0XHRcdFx0Y29uc3QgbW9ycGhDb2xvcnMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgfHwgW107XG5cblx0XHRcdFx0bGV0IHZlcnRleERhdGFDb3VudCA9IDA7XG5cblx0XHRcdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMTtcblx0XHRcdFx0aWYgKCBoYXNNb3JwaE5vcm1hbHMgPT09IHRydWUgKSB2ZXJ0ZXhEYXRhQ291bnQgPSAyO1xuXHRcdFx0XHRpZiAoIGhhc01vcnBoQ29sb3JzID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMztcblxuXHRcdFx0XHRsZXQgd2lkdGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50ICogdmVydGV4RGF0YUNvdW50O1xuXHRcdFx0XHRsZXQgaGVpZ2h0ID0gMTtcblxuXHRcdFx0XHRpZiAoIHdpZHRoID4gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdFx0aGVpZ2h0ID0gTWF0aC5jZWlsKCB3aWR0aCAvIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApO1xuXHRcdFx0XHRcdHdpZHRoID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCB3aWR0aCAqIGhlaWdodCAqIDQgKiBtb3JwaFRhcmdldHNDb3VudCApO1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggYnVmZmVyLCB3aWR0aCwgaGVpZ2h0LCBtb3JwaFRhcmdldHNDb3VudCApO1xuXHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSBGbG9hdFR5cGU7XG5cdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdC8vIGZpbGwgYnVmZmVyXG5cblx0XHRcdFx0Y29uc3QgdmVydGV4RGF0YVN0cmlkZSA9IHZlcnRleERhdGFDb3VudCAqIDQ7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbW9ycGhUYXJnZXRzQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgaSBdO1xuXHRcdFx0XHRcdGNvbnN0IG1vcnBoTm9ybWFsID0gbW9ycGhOb3JtYWxzWyBpIF07XG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhDb2xvciA9IG1vcnBoQ29sb3JzWyBpIF07XG5cblx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSB3aWR0aCAqIGhlaWdodCAqIDQgKiBpO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbW9ycGhUYXJnZXQuY291bnQ7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHN0cmlkZSA9IGogKiB2ZXJ0ZXhEYXRhU3RyaWRlO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGhhc01vcnBoUG9zaXRpb24gPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0bW9ycGguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhUYXJnZXQsIGogKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0Lm5vcm1hbGl6ZWQgPT09IHRydWUgKSBkZW5vcm1hbGl6ZSggbW9ycGgsIG1vcnBoVGFyZ2V0ICk7XG5cblx0XHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAwIF0gPSBtb3JwaC54O1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDEgXSA9IG1vcnBoLnk7XG5cdFx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMiBdID0gbW9ycGguejtcblx0XHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAzIF0gPSAwO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggaGFzTW9ycGhOb3JtYWxzID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRcdG1vcnBoLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoTm9ybWFsLCBqICk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBtb3JwaE5vcm1hbC5ub3JtYWxpemVkID09PSB0cnVlICkgZGVub3JtYWxpemUoIG1vcnBoLCBtb3JwaE5vcm1hbCApO1xuXG5cdFx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgNCBdID0gbW9ycGgueDtcblx0XHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA1IF0gPSBtb3JwaC55O1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDYgXSA9IG1vcnBoLno7XG5cdFx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgNyBdID0gMDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoIGhhc01vcnBoQ29sb3JzID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRcdG1vcnBoLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQ29sb3IsIGogKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIG1vcnBoQ29sb3Iubm9ybWFsaXplZCA9PT0gdHJ1ZSApIGRlbm9ybWFsaXplKCBtb3JwaCwgbW9ycGhDb2xvciApO1xuXG5cdFx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgOCBdID0gbW9ycGgueDtcblx0XHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA5IF0gPSBtb3JwaC55O1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDEwIF0gPSBtb3JwaC56O1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDExIF0gPSAoIG1vcnBoQ29sb3IuaXRlbVNpemUgPT09IDQgKSA/IG1vcnBoLncgOiAxO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVudHJ5ID0ge1xuXHRcdFx0XHRcdGNvdW50OiBtb3JwaFRhcmdldHNDb3VudCxcblx0XHRcdFx0XHR0ZXh0dXJlOiB0ZXh0dXJlLFxuXHRcdFx0XHRcdHNpemU6IG5ldyBWZWN0b3IyKCB3aWR0aCwgaGVpZ2h0IClcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRtb3JwaFRleHR1cmVzLnNldCggZ2VvbWV0cnksIGVudHJ5ICk7XG5cblx0XHRcdFx0ZnVuY3Rpb24gZGlzcG9zZVRleHR1cmUoKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0XHRcdG1vcnBoVGV4dHVyZXMuZGVsZXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBkaXNwb3NlVGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VUZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0bGV0IG1vcnBoSW5mbHVlbmNlc1N1bSA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG1vcnBoSW5mbHVlbmNlc1N1bSArPSBvYmplY3RJbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbW9ycGhCYXNlSW5mbHVlbmNlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPyAxIDogMSAtIG1vcnBoSW5mbHVlbmNlc1N1bTtcblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZScsIG1vcnBoQmFzZUluZmx1ZW5jZSApO1xuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG9iamVjdEluZmx1ZW5jZXMgKTtcblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0c1RleHR1cmUnLCBlbnRyeS50ZXh0dXJlLCB0ZXh0dXJlcyApO1xuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0c1RleHR1cmVTaXplJywgZW50cnkuc2l6ZSApO1xuXG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBXaGVuIG9iamVjdCBkb2Vzbid0IGhhdmUgbW9ycGggdGFyZ2V0IGluZmx1ZW5jZXMgZGVmaW5lZCwgd2UgdHJlYXQgaXQgYXMgYSAwLWxlbmd0aCBhcnJheVxuXHRcdFx0Ly8gVGhpcyBpcyBpbXBvcnRhbnQgdG8gbWFrZSBzdXJlIHdlIHNldCB1cCBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2UgLyBtb3JwaFRhcmdldEluZmx1ZW5jZXNcblxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gb2JqZWN0SW5mbHVlbmNlcyA9PT0gdW5kZWZpbmVkID8gMCA6IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoO1xuXG5cdFx0XHRsZXQgaW5mbHVlbmNlcyA9IGluZmx1ZW5jZXNMaXN0WyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0XHRpZiAoIGluZmx1ZW5jZXMgPT09IHVuZGVmaW5lZCB8fCBpbmZsdWVuY2VzLmxlbmd0aCAhPT0gbGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIGluaXRpYWxpc2UgbGlzdFxuXG5cdFx0XHRcdGluZmx1ZW5jZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpbmZsdWVuY2VzWyBpIF0gPSBbIGksIDAgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5mbHVlbmNlc0xpc3RbIGdlb21ldHJ5LmlkIF0gPSBpbmZsdWVuY2VzO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbGxlY3QgaW5mbHVlbmNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5mbHVlbmNlID0gaW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0XHRcdGluZmx1ZW5jZVsgMCBdID0gaTtcblx0XHRcdFx0aW5mbHVlbmNlWyAxIF0gPSBvYmplY3RJbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mbHVlbmNlcy5zb3J0KCBhYnNOdW1lcmljYWxTb3J0ICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDg7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBpIDwgbGVuZ3RoICYmIGluZmx1ZW5jZXNbIGkgXVsgMSBdICkge1xuXG5cdFx0XHRcdFx0d29ya0luZmx1ZW5jZXNbIGkgXVsgMCBdID0gaW5mbHVlbmNlc1sgaSBdWyAwIF07XG5cdFx0XHRcdFx0d29ya0luZmx1ZW5jZXNbIGkgXVsgMSBdID0gaW5mbHVlbmNlc1sgaSBdWyAxIF07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHdvcmtJbmZsdWVuY2VzWyBpIF1bIDAgXSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuXHRcdFx0XHRcdHdvcmtJbmZsdWVuY2VzWyBpIF1bIDEgXSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHdvcmtJbmZsdWVuY2VzLnNvcnQoIG51bWVyaWNhbFNvcnQgKTtcblxuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0Y29uc3QgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdFx0bGV0IG1vcnBoSW5mbHVlbmNlc1N1bSA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5mbHVlbmNlID0gd29ya0luZmx1ZW5jZXNbIGkgXTtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBpbmZsdWVuY2VbIDAgXTtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBpbmZsdWVuY2VbIDEgXTtcblxuXHRcdFx0XHRpZiAoIGluZGV4ICE9PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSApIHtcblxuXHRcdFx0XHRcdGlmICggbW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ21vcnBoVGFyZ2V0JyArIGkgKSAhPT0gbW9ycGhUYXJnZXRzWyBpbmRleCBdICkge1xuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpLCBtb3JwaFRhcmdldHNbIGluZGV4IF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICYmIGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ21vcnBoTm9ybWFsJyArIGkgKSAhPT0gbW9ycGhOb3JtYWxzWyBpbmRleCBdICkge1xuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdtb3JwaE5vcm1hbCcgKyBpLCBtb3JwaE5vcm1hbHNbIGluZGV4IF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1vcnBoSW5mbHVlbmNlc1sgaSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzU3VtICs9IHZhbHVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5oYXNBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ21vcnBoVGFyZ2V0JyArIGkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICYmIGdlb21ldHJ5Lmhhc0F0dHJpYnV0ZSggJ21vcnBoTm9ybWFsJyArIGkgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAnbW9ycGhOb3JtYWwnICsgaSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzWyBpIF0gPSAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBHTFNMIHNoYWRlciB1c2VzIGZvcm11bGEgYmFzZWluZmx1ZW5jZSAqIGJhc2UgKyBzdW0odGFyZ2V0ICogaW5mbHVlbmNlKVxuXHRcdFx0Ly8gVGhpcyBhbGxvd3MgdXMgdG8gc3dpdGNoIGJldHdlZW4gYWJzb2x1dGUgbW9ycGhzIGFuZCByZWxhdGl2ZSBtb3JwaHMgd2l0aG91dCBjaGFuZ2luZyBzaGFkZXIgY29kZVxuXHRcdFx0Ly8gV2hlbiBiYXNlaW5mbHVlbmNlID0gMSAtIHN1bShpbmZsdWVuY2UpLCB0aGUgYWJvdmUgaXMgZXF1aXZhbGVudCB0byBzdW0oKHRhcmdldCAtIGJhc2UpICogaW5mbHVlbmNlKVxuXHRcdFx0Y29uc3QgbW9ycGhCYXNlSW5mbHVlbmNlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPyAxIDogMSAtIG1vcnBoSW5mbHVlbmNlc1N1bTtcblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZScsIG1vcnBoQmFzZUluZmx1ZW5jZSApO1xuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG1vcnBoSW5mbHVlbmNlcyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMT2JqZWN0cyggZ2wsIGdlb21ldHJpZXMsIGF0dHJpYnV0ZXMsIGluZm8gKSB7XG5cblx0bGV0IHVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHRjb25zdCBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzLmdldCggb2JqZWN0LCBnZW9tZXRyeSApO1xuXG5cdFx0Ly8gVXBkYXRlIG9uY2UgcGVyIGZyYW1lXG5cblx0XHRpZiAoIHVwZGF0ZU1hcC5nZXQoIGJ1ZmZlcmdlb21ldHJ5ICkgIT09IGZyYW1lICkge1xuXG5cdFx0XHRnZW9tZXRyaWVzLnVwZGF0ZSggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdFx0dXBkYXRlTWFwLnNldCggYnVmZmVyZ2VvbWV0cnksIGZyYW1lICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdGlmICggb2JqZWN0Lmhhc0V2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25JbnN0YW5jZWRNZXNoRGlzcG9zZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRvYmplY3QuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIG9iamVjdC5pbnN0YW5jZU1hdHJpeCwgMzQ5NjIgKTtcblxuXHRcdFx0aWYgKCBvYmplY3QuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggb2JqZWN0Lmluc3RhbmNlQ29sb3IsIDM0OTYyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgaW5zdGFuY2VkTWVzaCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdGluc3RhbmNlZE1lc2gucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7XG5cblx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZU1hdHJpeCApO1xuXG5cdFx0aWYgKCBpbnN0YW5jZWRNZXNoLmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSBhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZUNvbG9yICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIFVuaWZvcm1zIG9mIGEgcHJvZ3JhbS5cbiAqIFRob3NlIGZvcm0gYSB0cmVlIHN0cnVjdHVyZSB3aXRoIGEgc3BlY2lhbCB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciB0aGUgcm9vdCxcbiAqIHdoaWNoIHlvdSBnZXQgYnkgY2FsbGluZyAnbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICknLlxuICpcbiAqXG4gKiBQcm9wZXJ0aWVzIG9mIGlubmVyIG5vZGVzIGluY2x1ZGluZyB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcbiAqXG4gKiAuc2VxIC0gYXJyYXkgb2YgbmVzdGVkIHVuaWZvcm1zXG4gKiAubWFwIC0gbmVzdGVkIHVuaWZvcm1zIGJ5IG5hbWVcbiAqXG4gKlxuICogTWV0aG9kcyBvZiBhbGwgbm9kZXMgZXhjZXB0IHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIHZhbHVlLCBbdGV4dHVyZXNdIClcbiAqXG4gKiBcdFx0dXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocylcbiAqICBcdHRoZSAndGV4dHVyZXMnIHBhcmFtZXRlciBpcyBuZWVkZWQgZm9yIHNhbXBsZXIgdW5pZm9ybXNcbiAqXG4gKlxuICogU3RhdGljIG1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHRleHR1cmVzIGZhY3Rvcml6YXRpb25zKTpcbiAqXG4gKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtcyBpbiAnc2VxJyB0byAndmFsdWVzW2lkXS52YWx1ZSdcbiAqXG4gKiAuc2VxV2l0aFZhbHVlKCBzZXEsIHZhbHVlcyApIDogZmlsdGVyZWRTZXFcbiAqXG4gKiBcdFx0ZmlsdGVycyAnc2VxJyBlbnRyaWVzIHdpdGggY29ycmVzcG9uZGluZyBlbnRyeSBpbiB2YWx1ZXNcbiAqXG4gKlxuICogTWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIG5hbWUsIHZhbHVlLCB0ZXh0dXJlcyApXG4gKlxuICogXHRcdHNldHMgdW5pZm9ybSB3aXRoICBuYW1lICduYW1lJyB0byAndmFsdWUnXG4gKlxuICogLnNldE9wdGlvbmFsKCBnbCwgb2JqLCBwcm9wIClcbiAqXG4gKiBcdFx0bGlrZSAuc2V0IGZvciBhbiBvcHRpb25hbCBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0XG4gKlxuICovXG5cbmNvbnN0IGVtcHR5VGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG5jb25zdCBlbXB0eUFycmF5VGV4dHVyZSA9IG5ldyBEYXRhQXJyYXlUZXh0dXJlKCk7XG5jb25zdCBlbXB0eTNkVGV4dHVyZSA9IG5ldyBEYXRhM0RUZXh0dXJlKCk7XG5jb25zdCBlbXB0eUN1YmVUZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCk7XG5cbi8vIC0tLSBVdGlsaXRpZXMgLS0tXG5cbi8vIEFycmF5IENhY2hlcyAocHJvdmlkZSB0eXBlZCBhcnJheXMgZm9yIHRlbXBvcmFyeSBieSBzaXplKVxuXG5jb25zdCBhcnJheUNhY2hlRjMyID0gW107XG5jb25zdCBhcnJheUNhY2hlSTMyID0gW107XG5cbi8vIEZsb2F0MzJBcnJheSBjYWNoZXMgdXNlZCBmb3IgdXBsb2FkaW5nIE1hdHJpeCB1bmlmb3Jtc1xuXG5jb25zdCBtYXQ0YXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCAxNiApO1xuY29uc3QgbWF0M2FycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggOSApO1xuY29uc3QgbWF0MmFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggNCApO1xuXG4vLyBGbGF0dGVuaW5nIGZvciBhcnJheXMgb2YgdmVjdG9ycyBhbmQgbWF0cmljZXNcblxuZnVuY3Rpb24gZmxhdHRlbiggYXJyYXksIG5CbG9ja3MsIGJsb2NrU2l6ZSApIHtcblxuXHRjb25zdCBmaXJzdEVsZW0gPSBhcnJheVsgMCBdO1xuXG5cdGlmICggZmlyc3RFbGVtIDw9IDAgfHwgZmlyc3RFbGVtID4gMCApIHJldHVybiBhcnJheTtcblx0Ly8gdW5vcHRpbWl6ZWQ6ICEgaXNOYU4oIGZpcnN0RWxlbSApXG5cdC8vIHNlZSBodHRwOi8vamFja3NvbmR1bnN0YW4uY29tL2FydGljbGVzLzk4M1xuXG5cdGNvbnN0IG4gPSBuQmxvY2tzICogYmxvY2tTaXplO1xuXHRsZXQgciA9IGFycmF5Q2FjaGVGMzJbIG4gXTtcblxuXHRpZiAoIHIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHIgPSBuZXcgRmxvYXQzMkFycmF5KCBuICk7XG5cdFx0YXJyYXlDYWNoZUYzMlsgbiBdID0gcjtcblxuXHR9XG5cblx0aWYgKCBuQmxvY2tzICE9PSAwICkge1xuXG5cdFx0Zmlyc3RFbGVtLnRvQXJyYXkoIHIsIDAgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMSwgb2Zmc2V0ID0gMDsgaSAhPT0gbkJsb2NrczsgKysgaSApIHtcblxuXHRcdFx0b2Zmc2V0ICs9IGJsb2NrU2l6ZTtcblx0XHRcdGFycmF5WyBpIF0udG9BcnJheSggciwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiByO1xuXG59XG5cbmZ1bmN0aW9uIGFycmF5c0VxdWFsKCBhLCBiICkge1xuXG5cdGlmICggYS5sZW5ndGggIT09IGIubGVuZ3RoICkgcmV0dXJuIGZhbHNlO1xuXG5cdGZvciAoIGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGlmICggYVsgaSBdICE9PSBiWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbmZ1bmN0aW9uIGNvcHlBcnJheSggYSwgYiApIHtcblxuXHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBiLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRhWyBpIF0gPSBiWyBpIF07XG5cblx0fVxuXG59XG5cbi8vIFRleHR1cmUgdW5pdCBhbGxvY2F0aW9uXG5cbmZ1bmN0aW9uIGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICkge1xuXG5cdGxldCByID0gYXJyYXlDYWNoZUkzMlsgbiBdO1xuXG5cdGlmICggciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0ciA9IG5ldyBJbnQzMkFycmF5KCBuICk7XG5cdFx0YXJyYXlDYWNoZUkzMlsgbiBdID0gcjtcblxuXHR9XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0clsgaSBdID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufVxuXG4vLyAtLS0gU2V0dGVycyAtLS1cblxuLy8gTm90ZTogRGVmaW5pbmcgdGhlc2UgbWV0aG9kcyBleHRlcm5hbGx5LCBiZWNhdXNlIHRoZXkgY29tZSBpbiBhIGJ1bmNoXG4vLyBhbmQgdGhpcyB3YXkgdGhlaXIgbmFtZXMgbWluaWZ5LlxuXG4vLyBTaW5nbGUgc2NhbGFyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFmKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBjYWNoZVsgMCBdID09PSB2ICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xZiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y2FjaGVbIDAgXSA9IHY7XG5cbn1cblxuLy8gU2luZ2xlIGZsb2F0IHZlY3RvciAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJmKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTJmKCB0aGlzLmFkZHIsIHYueCwgdi55ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTJmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNmKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblxuXHRcdH1cblxuXHR9IGVsc2UgaWYgKCB2LnIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi5yIHx8IGNhY2hlWyAxIF0gIT09IHYuZyB8fCBjYWNoZVsgMiBdICE9PSB2LmIgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LnIsIHYuZywgdi5iICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2LnI7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi5nO1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuYjtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0zZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0ZiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56IHx8IGNhY2hlWyAzIF0gIT09IHYudyApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTRmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbi8vIFNpbmdsZSBtYXRyaXggKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5NYXRyaXhOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0yKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDJhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQyYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTMoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0M2FycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDNhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNNCggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQ0YXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0NGFycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgaW50ZWdlciAvIGJvb2xlYW5cblxuZnVuY3Rpb24gc2V0VmFsdWVWMWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gPT09IHYgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG4vLyBTaW5nbGUgaW50ZWdlciAvIGJvb2xlYW4gdmVjdG9yIChmcm9tIGZsYXQgYXJyYXkpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMml2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM2koIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0zaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG59XG5cbi8vIFNpbmdsZSB1bnNpZ25lZCBpbnRlZ2VyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjF1aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMXVpKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG4vLyBTaW5nbGUgdW5zaWduZWQgaW50ZWdlciB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSlcblxuZnVuY3Rpb24gc2V0VmFsdWVWMnVpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMnVpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjN1aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTN1aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0dWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm00dWl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuXG4vLyBTaW5nbGUgdGV4dHVyZSAoMkQgLyBDdWJlKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQxKCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNldFRleHR1cmUyRCggdiB8fCBlbXB0eVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzRDEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCB2IHx8IGVtcHR5M2RUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUNiggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdiB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUMkRBcnJheTEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHYgfHwgZW1wdHlBcnJheVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciB0aGUgc2luZ3VsYXIgY2FzZVxuXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZjsgLy8gRkxPQVRcblx0XHRjYXNlIDB4OGI1MDogcmV0dXJuIHNldFZhbHVlVjJmOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2Y7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZjsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVhOiByZXR1cm4gc2V0VmFsdWVNMjsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTM7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00OyAvLyBfTUFUNFxuXG5cdFx0Y2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpOyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWk7IC8vIFVJTlRcblx0XHRjYXNlIDB4OGRjNjogcmV0dXJuIHNldFZhbHVlVjJ1aTsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGRjNzogcmV0dXJuIHNldFZhbHVlVjN1aTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGRjODogcmV0dXJuIHNldFZhbHVlVjR1aTsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVlOiAvLyBTQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkNjY6IC8vIFNBTVBMRVJfRVhURVJOQUxfT0VTXG5cdFx0Y2FzZSAweDhkY2E6IC8vIElOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkZDI6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhiNjI6IC8vIFNBTVBMRVJfMkRfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMTtcblxuXHRcdGNhc2UgMHg4YjVmOiAvLyBTQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhkY2I6IC8vIElOVF9TQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhkZDM6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzNEXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUM0QxO1xuXG5cdFx0Y2FzZSAweDhiNjA6IC8vIFNBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGNjOiAvLyBJTlRfU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkZDQ6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRjNTogLy8gU0FNUExFUl9DVUJFX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDY7XG5cblx0XHRjYXNlIDB4OGRjMTogLy8gU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGNmOiAvLyBJTlRfU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGQ3OiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGM0OiAvLyBTQU1QTEVSXzJEX0FSUkFZX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDJEQXJyYXkxO1xuXG5cdH1cblxufVxuXG5cbi8vIEFycmF5IG9mIHNjYWxhcnNcblxuZnVuY3Rpb24gc2V0VmFsdWVWMWZBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTFmdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdmVjdG9ycyAoZnJvbSBmbGF0IGFycmF5IG9yIGFycmF5IG9mIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJmQXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDIgKTtcblxuXHRnbC51bmlmb3JtMmZ2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzZkFycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAzICk7XG5cblx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGZBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApO1xuXG5cdGdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIG1hdHJpY2VzIChmcm9tIGZsYXQgYXJyYXkgb3IgYXJyYXkgb2YgVEhSRUUuTWF0cml4TilcblxuZnVuY3Rpb24gc2V0VmFsdWVNMkFycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA0ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTNBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgOSApO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU00QXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDE2ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIGludGVnZXIgLyBib29sZWFuXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFpQXJyYXkoIGdsLCB2ICkge1xuXG5cdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbi8vIEFycmF5IG9mIGludGVnZXIgLyBib29sZWFuIHZlY3RvcnMgKGZyb20gZmxhdCBhcnJheSlcblxuZnVuY3Rpb24gc2V0VmFsdWVWMmlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTJpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM2lBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTNpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdW5zaWduZWQgaW50ZWdlclxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxdWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTF1aXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbi8vIEFycmF5IG9mIHVuc2lnbmVkIGludGVnZXIgdmVjdG9ycyAoZnJvbSBmbGF0IGFycmF5KVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYydWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTJ1aXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjN1aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtM3VpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNHVpQXJyYXkoIGdsLCB2ICkge1xuXG5cdGdsLnVuaWZvcm00dWl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5cbi8vIEFycmF5IG9mIHRleHR1cmVzICgyRCAvIDNEIC8gQ3ViZSAvIDJEQXJyYXkpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVDFBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzREFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgbiA9IHYubGVuZ3RoO1xuXG5cdGNvbnN0IHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCB2WyBpIF0gfHwgZW1wdHkzZFRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUNkFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgbiA9IHYubGVuZ3RoO1xuXG5cdGNvbnN0IHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZUN1YmUoIHZbIGkgXSB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDJEQXJyYXlBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyREFycmF5KCB2WyBpIF0gfHwgZW1wdHlBcnJheVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciBhIHB1cmUgKGJvdHRvbS1sZXZlbCkgYXJyYXlcblxuZnVuY3Rpb24gZ2V0UHVyZUFycmF5U2V0dGVyKCB0eXBlICkge1xuXG5cdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRjYXNlIDB4MTQwNjogcmV0dXJuIHNldFZhbHVlVjFmQXJyYXk7IC8vIEZMT0FUXG5cdFx0Y2FzZSAweDhiNTA6IHJldHVybiBzZXRWYWx1ZVYyZkFycmF5OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2ZBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlVjRmQXJyYXk7IC8vIF9WRUM0XG5cblx0XHRjYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTJBcnJheTsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTNBcnJheTsgLy8gX01BVDNcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlTTRBcnJheTsgLy8gX01BVDRcblxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlVjFpQXJyYXk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2lBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZVY0aUFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWlBcnJheTsgLy8gVUlOVFxuXHRcdGNhc2UgMHg4ZGM2OiByZXR1cm4gc2V0VmFsdWVWMnVpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhkYzc6IHJldHVybiBzZXRWYWx1ZVYzdWlBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGRjODogcmV0dXJuIHNldFZhbHVlVjR1aUFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWU6IC8vIFNBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGQ2NjogLy8gU0FNUExFUl9FWFRFUk5BTF9PRVNcblx0XHRjYXNlIDB4OGRjYTogLy8gSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGRkMjogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGI2MjogLy8gU0FNUExFUl8yRF9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQxQXJyYXk7XG5cblx0XHRjYXNlIDB4OGI1ZjogLy8gU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4ZGNiOiAvLyBJTlRfU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4ZGQzOiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8zRFxuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDNEQXJyYXk7XG5cblx0XHRjYXNlIDB4OGI2MDogLy8gU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkY2M6IC8vIElOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRkNDogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGM1OiAvLyBTQU1QTEVSX0NVQkVfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUNkFycmF5O1xuXG5cdFx0Y2FzZSAweDhkYzE6IC8vIFNBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRjZjogLy8gSU5UX1NBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRkNzogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRjNDogLy8gU0FNUExFUl8yRF9BUlJBWV9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQyREFycmF5QXJyYXk7XG5cblx0fVxuXG59XG5cbi8vIC0tLSBVbmlmb3JtIENsYXNzZXMgLS0tXG5cbmZ1bmN0aW9uIFNpbmdsZVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblx0dGhpcy5hZGRyID0gYWRkcjtcblx0dGhpcy5jYWNoZSA9IFtdO1xuXHR0aGlzLnNldFZhbHVlID0gZ2V0U2luZ3VsYXJTZXR0ZXIoIGFjdGl2ZUluZm8udHlwZSApO1xuXG5cdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcblxufVxuXG5mdW5jdGlvbiBQdXJlQXJyYXlVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIHtcblxuXHR0aGlzLmlkID0gaWQ7XG5cdHRoaXMuYWRkciA9IGFkZHI7XG5cdHRoaXMuY2FjaGUgPSBbXTtcblx0dGhpcy5zaXplID0gYWN0aXZlSW5mby5zaXplO1xuXHR0aGlzLnNldFZhbHVlID0gZ2V0UHVyZUFycmF5U2V0dGVyKCBhY3RpdmVJbmZvLnR5cGUgKTtcblxuXHQvLyB0aGlzLnBhdGggPSBhY3RpdmVJbmZvLm5hbWU7IC8vIERFQlVHXG5cbn1cblxuUHVyZUFycmF5VW5pZm9ybS5wcm90b3R5cGUudXBkYXRlQ2FjaGUgPSBmdW5jdGlvbiAoIGRhdGEgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggZGF0YSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSAmJiBjYWNoZS5sZW5ndGggIT09IGRhdGEubGVuZ3RoICkge1xuXG5cdFx0dGhpcy5jYWNoZSA9IG5ldyBGbG9hdDMyQXJyYXkoIGRhdGEubGVuZ3RoICk7XG5cblx0fVxuXG5cdGNvcHlBcnJheSggY2FjaGUsIGRhdGEgKTtcblxufTtcblxuZnVuY3Rpb24gU3RydWN0dXJlZFVuaWZvcm0oIGlkICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblxuXHR0aGlzLnNlcSA9IFtdO1xuXHR0aGlzLm1hcCA9IHt9O1xuXG59XG5cblN0cnVjdHVyZWRVbmlmb3JtLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICggZ2wsIHZhbHVlLCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBzZXEgPSB0aGlzLnNlcTtcblxuXHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0Y29uc3QgdSA9IHNlcVsgaSBdO1xuXHRcdHUuc2V0VmFsdWUoIGdsLCB2YWx1ZVsgdS5pZCBdLCB0ZXh0dXJlcyApO1xuXG5cdH1cblxufTtcblxuLy8gLS0tIFRvcC1sZXZlbCAtLS1cblxuLy8gUGFyc2VyIC0gYnVpbGRzIHVwIHRoZSBwcm9wZXJ0eSB0cmVlIGZyb20gdGhlIHBhdGggc3RyaW5nc1xuXG5jb25zdCBSZVBhdGhQYXJ0ID0gLyhcXHcrKShcXF0pPyhcXFt8XFwuKT8vZztcblxuLy8gZXh0cmFjdHNcbi8vIFx0LSB0aGUgaWRlbnRpZmllciAobWVtYmVyIG5hbWUgb3IgYXJyYXkgaW5kZXgpXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCByaWdodCBicmFja2V0IChmb3VuZCB3aGVuIGFycmF5IGluZGV4KVxuLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgbGVmdCBicmFja2V0IG9yIGRvdCAodHlwZSBvZiBzdWJzY3JpcHQpXG4vL1xuLy8gTm90ZTogVGhlc2UgcG9ydGlvbnMgY2FuIGJlIHJlYWQgaW4gYSBub24tb3ZlcmxhcHBpbmcgZmFzaGlvbiBhbmRcbi8vIGFsbG93IHN0cmFpZ2h0Zm9yd2FyZCBwYXJzaW5nIG9mIHRoZSBoaWVyYXJjaHkgdGhhdCBXZWJHTCBlbmNvZGVzXG4vLyBpbiB0aGUgdW5pZm9ybSBuYW1lcy5cblxuZnVuY3Rpb24gYWRkVW5pZm9ybSggY29udGFpbmVyLCB1bmlmb3JtT2JqZWN0ICkge1xuXG5cdGNvbnRhaW5lci5zZXEucHVzaCggdW5pZm9ybU9iamVjdCApO1xuXHRjb250YWluZXIubWFwWyB1bmlmb3JtT2JqZWN0LmlkIF0gPSB1bmlmb3JtT2JqZWN0O1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5pZm9ybSggYWN0aXZlSW5mbywgYWRkciwgY29udGFpbmVyICkge1xuXG5cdGNvbnN0IHBhdGggPSBhY3RpdmVJbmZvLm5hbWUsXG5cdFx0cGF0aExlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG5cdC8vIHJlc2V0IFJlZ0V4cCBvYmplY3QsIGJlY2F1c2Ugb2YgdGhlIGVhcmx5IGV4aXQgb2YgYSBwcmV2aW91cyBydW5cblx0UmVQYXRoUGFydC5sYXN0SW5kZXggPSAwO1xuXG5cdHdoaWxlICggdHJ1ZSApIHtcblxuXHRcdGNvbnN0IG1hdGNoID0gUmVQYXRoUGFydC5leGVjKCBwYXRoICksXG5cdFx0XHRtYXRjaEVuZCA9IFJlUGF0aFBhcnQubGFzdEluZGV4O1xuXG5cdFx0bGV0IGlkID0gbWF0Y2hbIDEgXTtcblx0XHRjb25zdCBpZElzSW5kZXggPSBtYXRjaFsgMiBdID09PSAnXScsXG5cdFx0XHRzdWJzY3JpcHQgPSBtYXRjaFsgMyBdO1xuXG5cdFx0aWYgKCBpZElzSW5kZXggKSBpZCA9IGlkIHwgMDsgLy8gY29udmVydCB0byBpbnRlZ2VyXG5cblx0XHRpZiAoIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkIHx8IHN1YnNjcmlwdCA9PT0gJ1snICYmIG1hdGNoRW5kICsgMiA9PT0gcGF0aExlbmd0aCApIHtcblxuXHRcdFx0Ly8gYmFyZSBuYW1lIG9yIFwicHVyZVwiIGJvdHRvbS1sZXZlbCBhcnJheSBcIlswXVwiIHN1ZmZpeFxuXG5cdFx0XHRhZGRVbmlmb3JtKCBjb250YWluZXIsIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0bmV3IFNpbmdsZVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgOlxuXHRcdFx0XHRuZXcgUHVyZUFycmF5VW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHN0ZXAgaW50byBpbm5lciBub2RlIC8gY3JlYXRlIGl0IGluIGNhc2UgaXQgZG9lc24ndCBleGlzdFxuXG5cdFx0XHRjb25zdCBtYXAgPSBjb250YWluZXIubWFwO1xuXHRcdFx0bGV0IG5leHQgPSBtYXBbIGlkIF07XG5cblx0XHRcdGlmICggbmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5leHQgPSBuZXcgU3RydWN0dXJlZFVuaWZvcm0oIGlkICk7XG5cdFx0XHRcdGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgbmV4dCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5lciA9IG5leHQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIFJvb3QgQ29udGFpbmVyXG5cbmZ1bmN0aW9uIFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICkge1xuXG5cdHRoaXMuc2VxID0gW107XG5cdHRoaXMubWFwID0ge307XG5cblx0Y29uc3QgbiA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE4ICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbjsgKysgaSApIHtcblxuXHRcdGNvbnN0IGluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKCBwcm9ncmFtLCBpICksXG5cdFx0XHRhZGRyID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCBpbmZvLm5hbWUgKTtcblxuXHRcdHBhcnNlVW5pZm9ybSggaW5mbywgYWRkciwgdGhpcyApO1xuXG5cdH1cblxufVxuXG5XZWJHTFVuaWZvcm1zLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICggZ2wsIG5hbWUsIHZhbHVlLCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCB1ID0gdGhpcy5tYXBbIG5hbWUgXTtcblxuXHRpZiAoIHUgIT09IHVuZGVmaW5lZCApIHUuc2V0VmFsdWUoIGdsLCB2YWx1ZSwgdGV4dHVyZXMgKTtcblxufTtcblxuV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0T3B0aW9uYWwgPSBmdW5jdGlvbiAoIGdsLCBvYmplY3QsIG5hbWUgKSB7XG5cblx0Y29uc3QgdiA9IG9iamVjdFsgbmFtZSBdO1xuXG5cdGlmICggdiAhPT0gdW5kZWZpbmVkICkgdGhpcy5zZXRWYWx1ZSggZ2wsIG5hbWUsIHYgKTtcblxufTtcblxuXG4vLyBTdGF0aWMgaW50ZXJmYWNlXG5cbldlYkdMVW5pZm9ybXMudXBsb2FkID0gZnVuY3Rpb24gKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzICkge1xuXG5cdGZvciAoIGxldCBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRjb25zdCB1ID0gc2VxWyBpIF0sXG5cdFx0XHR2ID0gdmFsdWVzWyB1LmlkIF07XG5cblx0XHRpZiAoIHYubmVlZHNVcGRhdGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBub3RlOiBhbHdheXMgdXBkYXRpbmcgd2hlbiAubmVlZHNVcGRhdGUgaXMgdW5kZWZpbmVkXG5cdFx0XHR1LnNldFZhbHVlKCBnbCwgdi52YWx1ZSwgdGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbldlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlID0gZnVuY3Rpb24gKCBzZXEsIHZhbHVlcyApIHtcblxuXHRjb25zdCByID0gW107XG5cblx0Zm9yICggbGV0IGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdGNvbnN0IHUgPSBzZXFbIGkgXTtcblx0XHRpZiAoIHUuaWQgaW4gdmFsdWVzICkgci5wdXNoKCB1ICk7XG5cblx0fVxuXG5cdHJldHVybiByO1xuXG59O1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRlciggZ2wsIHR5cGUsIHN0cmluZyApIHtcblxuXHRjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoIHR5cGUgKTtcblxuXHRnbC5zaGFkZXJTb3VyY2UoIHNoYWRlciwgc3RyaW5nICk7XG5cdGdsLmNvbXBpbGVTaGFkZXIoIHNoYWRlciApO1xuXG5cdHJldHVybiBzaGFkZXI7XG5cbn1cblxubGV0IHByb2dyYW1JZENvdW50ID0gMDtcblxuZnVuY3Rpb24gaGFuZGxlU291cmNlKCBzdHJpbmcsIGVycm9yTGluZSApIHtcblxuXHRjb25zdCBsaW5lcyA9IHN0cmluZy5zcGxpdCggJ1xcbicgKTtcblx0Y29uc3QgbGluZXMyID0gW107XG5cblx0Y29uc3QgZnJvbSA9IE1hdGgubWF4KCBlcnJvckxpbmUgLSA2LCAwICk7XG5cdGNvbnN0IHRvID0gTWF0aC5taW4oIGVycm9yTGluZSArIDYsIGxpbmVzLmxlbmd0aCApO1xuXG5cdGZvciAoIGxldCBpID0gZnJvbTsgaSA8IHRvOyBpICsrICkge1xuXG5cdFx0bGluZXMyLnB1c2goICggaSArIDEgKSArICc6ICcgKyBsaW5lc1sgaSBdICk7XG5cblx0fVxuXG5cdHJldHVybiBsaW5lczIuam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICkge1xuXG5cdHN3aXRjaCAoIGVuY29kaW5nICkge1xuXG5cdFx0Y2FzZSBMaW5lYXJFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdMaW5lYXInLCAnKCB2YWx1ZSApJyBdO1xuXHRcdGNhc2Ugc1JHQkVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ3NSR0InLCAnKCB2YWx1ZSApJyBdO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW06IFVuc3VwcG9ydGVkIGVuY29kaW5nOicsIGVuY29kaW5nICk7XG5cdFx0XHRyZXR1cm4gWyAnTGluZWFyJywgJyggdmFsdWUgKScgXTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gZ2V0U2hhZGVyRXJyb3JzKCBnbCwgc2hhZGVyLCB0eXBlICkge1xuXG5cdGNvbnN0IHN0YXR1cyA9IGdsLmdldFNoYWRlclBhcmFtZXRlciggc2hhZGVyLCAzNTcxMyApO1xuXHRjb25zdCBlcnJvcnMgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKCBzaGFkZXIgKS50cmltKCk7XG5cblx0aWYgKCBzdGF0dXMgJiYgZXJyb3JzID09PSAnJyApIHJldHVybiAnJztcblxuXHRjb25zdCBlcnJvckxpbmUgPSBwYXJzZUludCggL0VSUk9SOiAwOihcXGQrKS8uZXhlYyggZXJyb3JzIClbIDEgXSApO1xuXG5cdC8vIC0tZW5hYmxlLXByaXZpbGVnZWQtd2ViZ2wtZXh0ZW5zaW9uXG5cdC8vIGNvbnNvbGUubG9nKCAnKionICsgdHlwZSArICcqKicsIGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2RlYnVnX3NoYWRlcnMnICkuZ2V0VHJhbnNsYXRlZFNoYWRlclNvdXJjZSggc2hhZGVyICkgKTtcblxuXHRyZXR1cm4gdHlwZS50b1VwcGVyQ2FzZSgpICsgJ1xcblxcbicgKyBlcnJvcnMgKyAnXFxuXFxuJyArIGhhbmRsZVNvdXJjZSggZ2wuZ2V0U2hhZGVyU291cmNlKCBzaGFkZXIgKSwgZXJyb3JMaW5lICk7XG5cbn1cblxuZnVuY3Rpb24gZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCBmdW5jdGlvbk5hbWUsIGVuY29kaW5nICkge1xuXG5cdGNvbnN0IGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICk7XG5cdHJldHVybiAndmVjNCAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjNCB2YWx1ZSApIHsgcmV0dXJuIExpbmVhclRvJyArIGNvbXBvbmVudHNbIDAgXSArIGNvbXBvbmVudHNbIDEgXSArICc7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7XG5cblx0bGV0IHRvbmVNYXBwaW5nTmFtZTtcblxuXHRzd2l0Y2ggKCB0b25lTWFwcGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWluaGFyZFRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1JlaW5oYXJkJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDaW5lb25Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdPcHRpbWl6ZWRDaW5lb24nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIEFDRVNGaWxtaWNUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBQ0VTRmlsbWljJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDdXN0b21Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdDdXN0b20nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBVbnN1cHBvcnRlZCB0b25lTWFwcGluZzonLCB0b25lTWFwcGluZyApO1xuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ0xpbmVhcic7XG5cblx0fVxuXG5cdHJldHVybiAndmVjMyAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjMyBjb2xvciApIHsgcmV0dXJuICcgKyB0b25lTWFwcGluZ05hbWUgKyAnVG9uZU1hcHBpbmcoIGNvbG9yICk7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRXh0ZW5zaW9ucyggcGFyYW1ldGVycyApIHtcblxuXHRjb25zdCBjaHVua3MgPSBbXG5cdFx0KCBwYXJhbWV0ZXJzLmV4dGVuc2lvbkRlcml2YXRpdmVzIHx8ICEhIHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWSGVpZ2h0IHx8IHBhcmFtZXRlcnMuYnVtcE1hcCB8fCBwYXJhbWV0ZXJzLnRhbmdlbnRTcGFjZU5vcm1hbE1hcCB8fCBwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcCB8fCBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nIHx8IHBhcmFtZXRlcnMuc2hhZGVySUQgPT09ICdwaHlzaWNhbCcgKSA/ICcjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZScgOiAnJyxcblx0XHQoIHBhcmFtZXRlcnMuZXh0ZW5zaW9uRnJhZ0RlcHRoIHx8IHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApICYmIHBhcmFtZXRlcnMucmVuZGVyZXJFeHRlbnNpb25GcmFnRGVwdGggPyAnI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZScgOiAnJyxcblx0XHQoIHBhcmFtZXRlcnMuZXh0ZW5zaW9uRHJhd0J1ZmZlcnMgJiYgcGFyYW1ldGVycy5yZW5kZXJlckV4dGVuc2lvbkRyYXdCdWZmZXJzICkgPyAnI2V4dGVuc2lvbiBHTF9FWFRfZHJhd19idWZmZXJzIDogcmVxdWlyZScgOiAnJyxcblx0XHQoIHBhcmFtZXRlcnMuZXh0ZW5zaW9uU2hhZGVyVGV4dHVyZUxPRCB8fCBwYXJhbWV0ZXJzLmVudk1hcCB8fCBwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiApICYmIHBhcmFtZXRlcnMucmVuZGVyZXJFeHRlbnNpb25TaGFkZXJUZXh0dXJlTG9kID8gJyNleHRlbnNpb24gR0xfRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCA6IGVuYWJsZScgOiAnJ1xuXHRdO1xuXG5cdHJldHVybiBjaHVua3MuZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApIHtcblxuXHRjb25zdCBjaHVua3MgPSBbXTtcblxuXHRmb3IgKCBjb25zdCBuYW1lIGluIGRlZmluZXMgKSB7XG5cblx0XHRjb25zdCB2YWx1ZSA9IGRlZmluZXNbIG5hbWUgXTtcblxuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkgY29udGludWU7XG5cblx0XHRjaHVua3MucHVzaCggJyNkZWZpbmUgJyArIG5hbWUgKyAnICcgKyB2YWx1ZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gY2h1bmtzLmpvaW4oICdcXG4nICk7XG5cbn1cblxuZnVuY3Rpb24gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICkge1xuXG5cdGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTtcblxuXHRjb25zdCBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MjEgKTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBuOyBpICsrICkge1xuXG5cdFx0Y29uc3QgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYiggcHJvZ3JhbSwgaSApO1xuXHRcdGNvbnN0IG5hbWUgPSBpbmZvLm5hbWU7XG5cblx0XHRsZXQgbG9jYXRpb25TaXplID0gMTtcblx0XHRpZiAoIGluZm8udHlwZSA9PT0gMzU2NzQgKSBsb2NhdGlvblNpemUgPSAyO1xuXHRcdGlmICggaW5mby50eXBlID09PSAzNTY3NSApIGxvY2F0aW9uU2l6ZSA9IDM7XG5cdFx0aWYgKCBpbmZvLnR5cGUgPT09IDM1Njc2ICkgbG9jYXRpb25TaXplID0gNDtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBBQ1RJVkUgVkVSVEVYIEFUVFJJQlVURTonLCBuYW1lLCBpICk7XG5cblx0XHRhdHRyaWJ1dGVzWyBuYW1lIF0gPSB7XG5cdFx0XHR0eXBlOiBpbmZvLnR5cGUsXG5cdFx0XHRsb2NhdGlvbjogZ2wuZ2V0QXR0cmliTG9jYXRpb24oIHByb2dyYW0sIG5hbWUgKSxcblx0XHRcdGxvY2F0aW9uU2l6ZTogbG9jYXRpb25TaXplXG5cdFx0fTtcblxuXHR9XG5cblx0cmV0dXJuIGF0dHJpYnV0ZXM7XG5cbn1cblxuZnVuY3Rpb24gZmlsdGVyRW1wdHlMaW5lKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZyAhPT0gJyc7XG5cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUxpZ2h0TnVtcyggc3RyaW5nLCBwYXJhbWV0ZXJzICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggL05VTV9ESVJfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1JFQ1RfQVJFQV9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUE9JTlRfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUG9pbnRMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX0hFTUlfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtSGVtaUxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1EaXJMaWdodFNoYWRvd3MgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3MgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApO1xuXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggc3RyaW5nLCBwYXJhbWV0ZXJzICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggL05VTV9DTElQUElOR19QTEFORVMvZywgcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyApXG5cdFx0LnJlcGxhY2UoIC9VTklPTl9DTElQUElOR19QTEFORVMvZywgKCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzIC0gcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICkgKTtcblxufVxuXG4vLyBSZXNvbHZlIEluY2x1ZGVzXG5cbmNvbnN0IGluY2x1ZGVQYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcblxuZnVuY3Rpb24gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBpbmNsdWRlUGF0dGVybiwgaW5jbHVkZVJlcGxhY2VyICk7XG5cbn1cblxuZnVuY3Rpb24gaW5jbHVkZVJlcGxhY2VyKCBtYXRjaCwgaW5jbHVkZSApIHtcblxuXHRjb25zdCBzdHJpbmcgPSBTaGFkZXJDaHVua1sgaW5jbHVkZSBdO1xuXG5cdGlmICggc3RyaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdDYW4gbm90IHJlc29sdmUgI2luY2x1ZGUgPCcgKyBpbmNsdWRlICsgJz4nICk7XG5cblx0fVxuXG5cdHJldHVybiByZXNvbHZlSW5jbHVkZXMoIHN0cmluZyApO1xuXG59XG5cbi8vIFVucm9sbCBMb29wc1xuXG5jb25zdCBkZXByZWNhdGVkVW5yb2xsTG9vcFBhdHRlcm4gPSAvI3ByYWdtYSB1bnJvbGxfbG9vcFtcXHNdKz9mb3IgXFwoIGludCBpIFxcPSAoXFxkKylcXDsgaSA8IChcXGQrKVxcOyBpIFxcK1xcKyBcXCkgXFx7KFtcXHNcXFNdKz8pKD89XFx9KVxcfS9nO1xuY29uc3QgdW5yb2xsTG9vcFBhdHRlcm4gPSAvI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxccytmb3JcXHMqXFwoXFxzKmludFxccytpXFxzKj1cXHMqKFxcZCspXFxzKjtcXHMqaVxccyo8XFxzKihcXGQrKVxccyo7XFxzKmlcXHMqXFwrXFwrXFxzKlxcKVxccyp7KFtcXHNcXFNdKz8pfVxccysjcHJhZ21hIHVucm9sbF9sb29wX2VuZC9nO1xuXG5mdW5jdGlvbiB1bnJvbGxMb29wcyggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggdW5yb2xsTG9vcFBhdHRlcm4sIGxvb3BSZXBsYWNlciApXG5cdFx0LnJlcGxhY2UoIGRlcHJlY2F0ZWRVbnJvbGxMb29wUGF0dGVybiwgZGVwcmVjYXRlZExvb3BSZXBsYWNlciApO1xuXG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZWRMb29wUmVwbGFjZXIoIG1hdGNoLCBzdGFydCwgZW5kLCBzbmlwcGV0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1dlYkdMUHJvZ3JhbTogI3ByYWdtYSB1bnJvbGxfbG9vcCBzaGFkZXIgc3ludGF4IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydCBzeW50YXggaW5zdGVhZC4nICk7XG5cdHJldHVybiBsb29wUmVwbGFjZXIoIG1hdGNoLCBzdGFydCwgZW5kLCBzbmlwcGV0ICk7XG5cbn1cblxuZnVuY3Rpb24gbG9vcFJlcGxhY2VyKCBtYXRjaCwgc3RhcnQsIGVuZCwgc25pcHBldCApIHtcblxuXHRsZXQgc3RyaW5nID0gJyc7XG5cblx0Zm9yICggbGV0IGkgPSBwYXJzZUludCggc3RhcnQgKTsgaSA8IHBhcnNlSW50KCBlbmQgKTsgaSArKyApIHtcblxuXHRcdHN0cmluZyArPSBzbmlwcGV0XG5cdFx0XHQucmVwbGFjZSggL1xcW1xccyppXFxzKlxcXS9nLCAnWyAnICsgaSArICcgXScgKVxuXHRcdFx0LnJlcGxhY2UoIC9VTlJPTExFRF9MT09QX0lOREVYL2csIGkgKTtcblxuXHR9XG5cblx0cmV0dXJuIHN0cmluZztcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVByZWNpc2lvbiggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgcHJlY2lzaW9uc3RyaW5nID0gJ3ByZWNpc2lvbiAnICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAnIGZsb2F0O1xcbnByZWNpc2lvbiAnICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAnIGludDsnO1xuXG5cdGlmICggcGFyYW1ldGVycy5wcmVjaXNpb24gPT09ICdoaWdocCcgKSB7XG5cblx0XHRwcmVjaXNpb25zdHJpbmcgKz0gJ1xcbiNkZWZpbmUgSElHSF9QUkVDSVNJT04nO1xuXG5cdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSAnbWVkaXVtcCcgKSB7XG5cblx0XHRwcmVjaXNpb25zdHJpbmcgKz0gJ1xcbiNkZWZpbmUgTUVESVVNX1BSRUNJU0lPTic7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5wcmVjaXNpb24gPT09ICdsb3dwJyApIHtcblxuXHRcdHByZWNpc2lvbnN0cmluZyArPSAnXFxuI2RlZmluZSBMT1dfUFJFQ0lTSU9OJztcblxuXHR9XG5cblx0cmV0dXJuIHByZWNpc2lvbnN0cmluZztcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfQkFTSUMnO1xuXG5cdGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRic7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTb2Z0U2hhZG93TWFwICkge1xuXG5cdFx0c2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCc7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBWU01TaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1ZTTSc7XG5cblx0fVxuXG5cdHJldHVybiBzaGFkb3dNYXBUeXBlRGVmaW5lO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggcGFyYW1ldGVycy5lbnZNYXBNb2RlICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFX1VWJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBlbnZNYXBUeXBlRGVmaW5lO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwTW9kZURlZmluZSggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgZW52TWFwTW9kZURlZmluZSA9ICdFTlZNQVBfTU9ERV9SRUZMRUNUSU9OJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggcGFyYW1ldGVycy5lbnZNYXBNb2RlICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZyYWN0aW9uTWFwcGluZzpcblxuXHRcdFx0XHRlbnZNYXBNb2RlRGVmaW5lID0gJ0VOVk1BUF9NT0RFX1JFRlJBQ1RJT04nO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGVudk1hcE1vZGVEZWZpbmU7XG5cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVFbnZNYXBCbGVuZGluZ0RlZmluZSggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX05PTkUnO1xuXG5cdGlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7XG5cblx0XHRzd2l0Y2ggKCBwYXJhbWV0ZXJzLmNvbWJpbmUgKSB7XG5cblx0XHRcdGNhc2UgTXVsdGlwbHlPcGVyYXRpb246XG5cdFx0XHRcdGVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19NVUxUSVBMWSc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIE1peE9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01JWCc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEFkZE9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX0FERCc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZW52TWFwQmxlbmRpbmdEZWZpbmU7XG5cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVDdWJlVVZTaXplKCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnN0IGltYWdlSGVpZ2h0ID0gcGFyYW1ldGVycy5lbnZNYXBDdWJlVVZIZWlnaHQ7XG5cblx0aWYgKCBpbWFnZUhlaWdodCA9PT0gbnVsbCApIHJldHVybiBudWxsO1xuXG5cdGNvbnN0IG1heE1pcCA9IE1hdGgubG9nMiggaW1hZ2VIZWlnaHQgLyAzMiArIDEgKSArIDM7XG5cblx0Y29uc3QgdGV4ZWxIZWlnaHQgPSAxLjAgLyBpbWFnZUhlaWdodDtcblxuXHRjb25zdCB0ZXhlbFdpZHRoID0gMS4wIC8gKCAzICogTWF0aC5tYXgoIE1hdGgucG93KCAyLCBtYXhNaXAgKSwgNyAqIDE2ICkgKTtcblxuXHRyZXR1cm4geyB0ZXhlbFdpZHRoLCB0ZXhlbEhlaWdodCwgbWF4TWlwIH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xQcm9ncmFtKCByZW5kZXJlciwgY2FjaGVLZXksIHBhcmFtZXRlcnMsIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0Ly8gVE9ETyBTZW5kIHRoaXMgZXZlbnQgdG8gVGhyZWUuanMgRGV2VG9vbHNcblx0Ly8gY29uc29sZS5sb2coICdXZWJHTFByb2dyYW0nLCBjYWNoZUtleSApO1xuXG5cdGNvbnN0IGdsID0gcmVuZGVyZXIuZ2V0Q29udGV4dCgpO1xuXG5cdGNvbnN0IGRlZmluZXMgPSBwYXJhbWV0ZXJzLmRlZmluZXM7XG5cblx0bGV0IHZlcnRleFNoYWRlciA9IHBhcmFtZXRlcnMudmVydGV4U2hhZGVyO1xuXHRsZXQgZnJhZ21lbnRTaGFkZXIgPSBwYXJhbWV0ZXJzLmZyYWdtZW50U2hhZGVyO1xuXG5cdGNvbnN0IHNoYWRvd01hcFR5cGVEZWZpbmUgPSBnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKTtcblx0Y29uc3QgZW52TWFwVHlwZURlZmluZSA9IGdlbmVyYXRlRW52TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApO1xuXHRjb25zdCBlbnZNYXBNb2RlRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBNb2RlRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cdGNvbnN0IGVudk1hcEJsZW5kaW5nRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBCbGVuZGluZ0RlZmluZSggcGFyYW1ldGVycyApO1xuXHRjb25zdCBlbnZNYXBDdWJlVVZTaXplID0gZ2VuZXJhdGVDdWJlVVZTaXplKCBwYXJhbWV0ZXJzICk7XG5cblx0Y29uc3QgY3VzdG9tRXh0ZW5zaW9ucyA9IHBhcmFtZXRlcnMuaXNXZWJHTDIgPyAnJyA6IGdlbmVyYXRlRXh0ZW5zaW9ucyggcGFyYW1ldGVycyApO1xuXG5cdGNvbnN0IGN1c3RvbURlZmluZXMgPSBnZW5lcmF0ZURlZmluZXMoIGRlZmluZXMgKTtcblxuXHRjb25zdCBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuXG5cdGxldCBwcmVmaXhWZXJ0ZXgsIHByZWZpeEZyYWdtZW50O1xuXHRsZXQgdmVyc2lvblN0cmluZyA9IHBhcmFtZXRlcnMuZ2xzbFZlcnNpb24gPyAnI3ZlcnNpb24gJyArIHBhcmFtZXRlcnMuZ2xzbFZlcnNpb24gKyAnXFxuJyA6ICcnO1xuXG5cdGlmICggcGFyYW1ldGVycy5pc1Jhd1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4VmVydGV4Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeFZlcnRleCArPSAnXFxuJztcblxuXHRcdH1cblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRpZiAoIHByZWZpeEZyYWdtZW50Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeEZyYWdtZW50ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdGdlbmVyYXRlUHJlY2lzaW9uKCBwYXJhbWV0ZXJzICksXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXMsXG5cblx0XHRcdHBhcmFtZXRlcnMuaW5zdGFuY2luZyA/ICcjZGVmaW5lIFVTRV9JTlNUQU5DSU5HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5pbnN0YW5jaW5nQ29sb3IgPyAnI2RlZmluZSBVU0VfSU5TVEFOQ0lOR19DT0xPUicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVkVSVEVYX1RFWFRVUkVTJyA6ICcnLFxuXG5cdFx0XHQnI2RlZmluZSBNQVhfQk9ORVMgJyArIHBhcmFtZXRlcnMubWF4Qm9uZXMsXG5cdFx0XHQoIHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nICkgPyAnI2RlZmluZSBVU0VfRk9HJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZ0V4cDIgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgT0JKRUNUU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLnRhbmdlbnRTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgVEFOR0VOVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwICYmIHBhcmFtZXRlcnMuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyA/ICcjZGVmaW5lIFVTRV9ESVNQTEFDRU1FTlRNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSSU5URU5TSVRZTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhckNvbG9yTWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSQ09MT1JNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubWV0YWxuZXNzTWFwID8gJyNkZWZpbmUgVVNFX01FVEFMTkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFNYXAgPyAnI2RlZmluZSBVU0VfQUxQSEFNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudGhpY2tuZXNzTWFwID8gJyNkZWZpbmUgVVNFX1RISUNLTkVTU01BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOUk9VR0hORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzID8gJyNkZWZpbmUgVVNFX1RBTkdFTlQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleENvbG9ycyA/ICcjZGVmaW5lIFVTRV9DT0xPUicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4QWxwaGFzID8gJyNkZWZpbmUgVVNFX0NPTE9SX0FMUEhBJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdnMgPyAnI2RlZmluZSBVU0VfVVYnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnV2c1ZlcnRleE9ubHkgPyAnI2RlZmluZSBVVlNfVkVSVEVYX09OTFknIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5za2lubmluZyA/ICcjZGVmaW5lIFVTRV9TS0lOTklORycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudXNlVmVydGV4VGV4dHVyZSA/ICcjZGVmaW5lIEJPTkVfVEVYVFVSRScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPyAnI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzICYmIHBhcmFtZXRlcnMuaXNXZWJHTDIgKSA/ICcjZGVmaW5lIFVTRV9NT1JQSENPTE9SUycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5tb3JwaFRhcmdldHNDb3VudCA+IDAgJiYgcGFyYW1ldGVycy5pc1dlYkdMMiApID8gJyNkZWZpbmUgTU9SUEhUQVJHRVRTX1RFWFRVUkUnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgPiAwICYmIHBhcmFtZXRlcnMuaXNXZWJHTDIgKSA/ICcjZGVmaW5lIE1PUlBIVEFSR0VUU19URVhUVVJFX1NUUklERSAnICsgcGFyYW1ldGVycy5tb3JwaFRleHR1cmVTdHJpZGUgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5tb3JwaFRhcmdldHNDb3VudCA+IDAgJiYgcGFyYW1ldGVycy5pc1dlYkdMMiApID8gJyNkZWZpbmUgTU9SUEhUQVJHRVRTX0NPVU5UICcgKyBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0c0NvdW50IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5mbGlwU2lkZWQgPyAnI2RlZmluZSBGTElQX1NJREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSBVU0VfU0hBRE9XTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgJyArIHNoYWRvd01hcFR5cGVEZWZpbmUgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gPyAnI2RlZmluZSBVU0VfU0laRUFUVEVOVUFUSU9OJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUYnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciAmJiBwYXJhbWV0ZXJzLnJlbmRlcmVyRXh0ZW5zaW9uRnJhZ0RlcHRoICkgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUZfRVhUJyA6ICcnLFxuXG5cdFx0XHQndW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uOycsXG5cdFx0XHQndW5pZm9ybSBib29sIGlzT3J0aG9ncmFwaGljOycsXG5cblx0XHRcdCcjaWZkZWYgVVNFX0lOU1RBTkNJTkcnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgbWF0NCBpbnN0YW5jZU1hdHJpeDsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfSU5TVEFOQ0lOR19DT0xPUicsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIGluc3RhbmNlQ29sb3I7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCdhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsnLFxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIG5vcm1hbDsnLFxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMyIHV2OycsXG5cblx0XHRcdCcjaWZkZWYgVVNFX1RBTkdFTlQnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCB0YW5nZW50OycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzQgY29sb3I7JyxcblxuXHRcdFx0JyNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgY29sb3I7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWYgKCBkZWZpbmVkKCBVU0VfTU9SUEhUQVJHRVRTICkgJiYgISBkZWZpbmVkKCBNT1JQSFRBUkdFVFNfVEVYVFVSRSApICknLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDA7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MTsnLFxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQyOycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDM7JyxcblxuXHRcdFx0J1x0I2lmZGVmIFVTRV9NT1JQSE5PUk1BTFMnLFxuXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMDsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDE7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwyOycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMzsnLFxuXG5cdFx0XHQnXHQjZWxzZScsXG5cblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ0OycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NTsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDY7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ3OycsXG5cblx0XHRcdCdcdCNlbmRpZicsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9TS0lOTklORycsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHNraW5JbmRleDsnLFxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzQgc2tpbldlaWdodDsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0J1xcbidcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXG5cblx0XHRcdGN1c3RvbUV4dGVuc2lvbnMsXG5cblx0XHRcdGdlbmVyYXRlUHJlY2lzaW9uKCBwYXJhbWV0ZXJzICksXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXMsXG5cblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2cgKSA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nRXhwMiApID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubWFwID8gJyNkZWZpbmUgVVNFX01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubWF0Y2FwID8gJyNkZWZpbmUgVVNFX01BVENBUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgVVNFX0VOVk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcFR5cGVEZWZpbmUgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcE1vZGVEZWZpbmUgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcEJsZW5kaW5nRGVmaW5lIDogJycsXG5cdFx0XHRlbnZNYXBDdWJlVVZTaXplID8gJyNkZWZpbmUgQ1VCRVVWX1RFWEVMX1dJRFRIICcgKyBlbnZNYXBDdWJlVVZTaXplLnRleGVsV2lkdGggOiAnJyxcblx0XHRcdGVudk1hcEN1YmVVVlNpemUgPyAnI2RlZmluZSBDVUJFVVZfVEVYRUxfSEVJR0hUICcgKyBlbnZNYXBDdWJlVVZTaXplLnRleGVsSGVpZ2h0IDogJycsXG5cdFx0XHRlbnZNYXBDdWJlVVZTaXplID8gJyNkZWZpbmUgQ1VCRVVWX01BWF9NSVAgJyArIGVudk1hcEN1YmVVVlNpemUubWF4TWlwICsgJy4wJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcCA/ICcjZGVmaW5lIFVTRV9MSUdIVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKSA/ICcjZGVmaW5lIE9CSkVDVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy50YW5nZW50U3BhY2VOb3JtYWxNYXAgKSA/ICcjZGVmaW5lIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0ID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0TWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhckludGVuc2l0eU1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUklOVEVOU0lUWU1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJDb2xvck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUkNPTE9STUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYVRlc3QgPyAnI2RlZmluZSBVU0VfQUxQSEFURVNUJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuID8gJyNkZWZpbmUgVVNFX1NIRUVOJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOUk9VR0hORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiA/ICcjZGVmaW5lIFVTRV9UUkFOU01JU1NJT04nIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbk1hcCA/ICcjZGVmaW5lIFVTRV9UUkFOU01JU1NJT05NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9USElDS05FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlID8gJyNkZWZpbmUgREVDT0RFX1ZJREVPX1RFWFRVUkUnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgPyAnI2RlZmluZSBVU0VfVEFOR0VOVCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4Q29sb3JzIHx8IHBhcmFtZXRlcnMuaW5zdGFuY2luZ0NvbG9yID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhBbHBoYXMgPyAnI2RlZmluZSBVU0VfQ09MT1JfQUxQSEEnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2cyA/ICcjZGVmaW5lIFVTRV9VVicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudXZzVmVydGV4T25seSA/ICcjZGVmaW5lIFVWU19WRVJURVhfT05MWScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5ncmFkaWVudE1hcCA/ICcjZGVmaW5lIFVTRV9HUkFESUVOVE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5mbGlwU2lkZWQgPyAnI2RlZmluZSBGTElQX1NJREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSBVU0VfU0hBRE9XTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgJyArIHNoYWRvd01hcFR5cGVEZWZpbmUgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgPyAnI2RlZmluZSBQUkVNVUxUSVBMSUVEX0FMUEhBJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID8gJyNkZWZpbmUgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUUycgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgJiYgcGFyYW1ldGVycy5yZW5kZXJlckV4dGVuc2lvbkZyYWdEZXB0aCApID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGX0VYVCcgOiAnJyxcblxuXHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uOycsXG5cdFx0XHQndW5pZm9ybSBib29sIGlzT3J0aG9ncmFwaGljOycsXG5cblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gJyNkZWZpbmUgVE9ORV9NQVBQSU5HJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBTaGFkZXJDaHVua1sgJ3RvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQnIF0gOiAnJywgLy8gdGhpcyBjb2RlIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IHRoZSB0b25lTWFwcGluZygpIGZ1bmN0aW9uIGRlZmluZWQgYmVsb3dcblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiggJ3RvbmVNYXBwaW5nJywgcGFyYW1ldGVycy50b25lTWFwcGluZyApIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGl0aGVyaW5nID8gJyNkZWZpbmUgRElUSEVSSU5HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5vcGFxdWUgPyAnI2RlZmluZSBPUEFRVUUnIDogJycsXG5cblx0XHRcdFNoYWRlckNodW5rWyAnZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQnIF0sIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdmFyaW91cyBlbmNvZGluZy9kZWNvZGluZyBmdW5jdGlvbiBkZWZpbmVkIGJlbG93XG5cdFx0XHRnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24oICdsaW5lYXJUb091dHB1dFRleGVsJywgcGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZyApLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRlcHRoUGFja2luZyA/ICcjZGVmaW5lIERFUFRIX1BBQ0tJTkcgJyArIHBhcmFtZXRlcnMuZGVwdGhQYWNraW5nIDogJycsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHR9XG5cblx0dmVydGV4U2hhZGVyID0gcmVzb2x2ZUluY2x1ZGVzKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cdHZlcnRleFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0ZnJhZ21lbnRTaGFkZXIgPSByZXNvbHZlSW5jbHVkZXMoIGZyYWdtZW50U2hhZGVyICk7XG5cdGZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMoIGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0dmVydGV4U2hhZGVyID0gdW5yb2xsTG9vcHMoIHZlcnRleFNoYWRlciApO1xuXHRmcmFnbWVudFNoYWRlciA9IHVucm9sbExvb3BzKCBmcmFnbWVudFNoYWRlciApO1xuXG5cdGlmICggcGFyYW1ldGVycy5pc1dlYkdMMiAmJiBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgIT09IHRydWUgKSB7XG5cblx0XHQvLyBHTFNMIDMuMCBjb252ZXJzaW9uIGZvciBidWlsdC1pbiBtYXRlcmlhbHMgYW5kIFNoYWRlck1hdGVyaWFsXG5cblx0XHR2ZXJzaW9uU3RyaW5nID0gJyN2ZXJzaW9uIDMwMCBlc1xcbic7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cdFx0XHQncHJlY2lzaW9uIG1lZGl1bXAgc2FtcGxlcjJEQXJyYXk7Jyxcblx0XHRcdCcjZGVmaW5lIGF0dHJpYnV0ZSBpbicsXG5cdFx0XHQnI2RlZmluZSB2YXJ5aW5nIG91dCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkQgdGV4dHVyZSdcblx0XHRdLmpvaW4oICdcXG4nICkgKyAnXFxuJyArIHByZWZpeFZlcnRleDtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXHRcdFx0JyNkZWZpbmUgdmFyeWluZyBpbicsXG5cdFx0XHQoIHBhcmFtZXRlcnMuZ2xzbFZlcnNpb24gPT09IEdMU0wzICkgPyAnJyA6ICdsYXlvdXQobG9jYXRpb24gPSAwKSBvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3I7Jyxcblx0XHRcdCggcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA9PT0gR0xTTDMgKSA/ICcnIDogJyNkZWZpbmUgZ2xfRnJhZ0NvbG9yIHBjX2ZyYWdDb2xvcicsXG5cdFx0XHQnI2RlZmluZSBnbF9GcmFnRGVwdGhFWFQgZ2xfRnJhZ0RlcHRoJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlIHRleHR1cmUnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvaiB0ZXh0dXJlUHJvaicsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRMb2RFWFQgdGV4dHVyZUxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qTG9kRVhUIHRleHR1cmVQcm9qTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlTG9kRVhUIHRleHR1cmVMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJER3JhZEVYVCB0ZXh0dXJlR3JhZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qR3JhZEVYVCB0ZXh0dXJlUHJvakdyYWQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmVHcmFkRVhUIHRleHR1cmVHcmFkJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4RnJhZ21lbnQ7XG5cblx0fVxuXG5cdGNvbnN0IHZlcnRleEdsc2wgPSB2ZXJzaW9uU3RyaW5nICsgcHJlZml4VmVydGV4ICsgdmVydGV4U2hhZGVyO1xuXHRjb25zdCBmcmFnbWVudEdsc2wgPSB2ZXJzaW9uU3RyaW5nICsgcHJlZml4RnJhZ21lbnQgKyBmcmFnbWVudFNoYWRlcjtcblxuXHQvLyBjb25zb2xlLmxvZyggJypWRVJURVgqJywgdmVydGV4R2xzbCApO1xuXHQvLyBjb25zb2xlLmxvZyggJypGUkFHTUVOVConLCBmcmFnbWVudEdsc2wgKTtcblxuXHRjb25zdCBnbFZlcnRleFNoYWRlciA9IFdlYkdMU2hhZGVyKCBnbCwgMzU2MzMsIHZlcnRleEdsc2wgKTtcblx0Y29uc3QgZ2xGcmFnbWVudFNoYWRlciA9IFdlYkdMU2hhZGVyKCBnbCwgMzU2MzIsIGZyYWdtZW50R2xzbCApO1xuXG5cdGdsLmF0dGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Ly8gRm9yY2UgYSBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSB0byBpbmRleCAwLlxuXG5cdGlmICggcGFyYW1ldGVycy5pbmRleDBBdHRyaWJ1dGVOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsIHBhcmFtZXRlcnMuaW5kZXgwQXR0cmlidXRlTmFtZSApO1xuXG5cdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzID09PSB0cnVlICkge1xuXG5cdFx0Ly8gcHJvZ3JhbXMgd2l0aCBtb3JwaFRhcmdldHMgZGlzcGxhY2UgcG9zaXRpb24gb3V0IG9mIGF0dHJpYnV0ZSAwXG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCAwLCAncG9zaXRpb24nICk7XG5cblx0fVxuXG5cdGdsLmxpbmtQcm9ncmFtKCBwcm9ncmFtICk7XG5cblx0Ly8gY2hlY2sgZm9yIGxpbmsgZXJyb3JzXG5cdGlmICggcmVuZGVyZXIuZGVidWcuY2hlY2tTaGFkZXJFcnJvcnMgKSB7XG5cblx0XHRjb25zdCBwcm9ncmFtTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coIHByb2dyYW0gKS50cmltKCk7XG5cdFx0Y29uc3QgdmVydGV4TG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xWZXJ0ZXhTaGFkZXIgKS50cmltKCk7XG5cdFx0Y29uc3QgZnJhZ21lbnRMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKCBnbEZyYWdtZW50U2hhZGVyICkudHJpbSgpO1xuXG5cdFx0bGV0IHJ1bm5hYmxlID0gdHJ1ZTtcblx0XHRsZXQgaGF2ZURpYWdub3N0aWNzID0gdHJ1ZTtcblxuXHRcdGlmICggZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MTQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHJ1bm5hYmxlID0gZmFsc2U7XG5cblx0XHRcdGNvbnN0IHZlcnRleEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsVmVydGV4U2hhZGVyLCAndmVydGV4JyApO1xuXHRcdFx0Y29uc3QgZnJhZ21lbnRFcnJvcnMgPSBnZXRTaGFkZXJFcnJvcnMoIGdsLCBnbEZyYWdtZW50U2hhZGVyLCAnZnJhZ21lbnQnICk7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdCdUSFJFRS5XZWJHTFByb2dyYW06IFNoYWRlciBFcnJvciAnICsgZ2wuZ2V0RXJyb3IoKSArICcgLSAnICtcblx0XHRcdFx0J1ZBTElEQVRFX1NUQVRVUyAnICsgZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MTUgKSArICdcXG5cXG4nICtcblx0XHRcdFx0J1Byb2dyYW0gSW5mbyBMb2c6ICcgKyBwcm9ncmFtTG9nICsgJ1xcbicgK1xuXHRcdFx0XHR2ZXJ0ZXhFcnJvcnMgKyAnXFxuJyArXG5cdFx0XHRcdGZyYWdtZW50RXJyb3JzXG5cdFx0XHQpO1xuXG5cdFx0fSBlbHNlIGlmICggcHJvZ3JhbUxvZyAhPT0gJycgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogUHJvZ3JhbSBJbmZvIExvZzonLCBwcm9ncmFtTG9nICk7XG5cblx0XHR9IGVsc2UgaWYgKCB2ZXJ0ZXhMb2cgPT09ICcnIHx8IGZyYWdtZW50TG9nID09PSAnJyApIHtcblxuXHRcdFx0aGF2ZURpYWdub3N0aWNzID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIGhhdmVEaWFnbm9zdGljcyApIHtcblxuXHRcdFx0dGhpcy5kaWFnbm9zdGljcyA9IHtcblxuXHRcdFx0XHRydW5uYWJsZTogcnVubmFibGUsXG5cblx0XHRcdFx0cHJvZ3JhbUxvZzogcHJvZ3JhbUxvZyxcblxuXHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IHtcblxuXHRcdFx0XHRcdGxvZzogdmVydGV4TG9nLFxuXHRcdFx0XHRcdHByZWZpeDogcHJlZml4VmVydGV4XG5cblx0XHRcdFx0fSxcblxuXHRcdFx0XHRmcmFnbWVudFNoYWRlcjoge1xuXG5cdFx0XHRcdFx0bG9nOiBmcmFnbWVudExvZyxcblx0XHRcdFx0XHRwcmVmaXg6IHByZWZpeEZyYWdtZW50XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBDbGVhbiB1cFxuXG5cdC8vIENyYXNoZXMgaW4gaU9TOSBhbmQgaU9TMTAuICMxODQwMlxuXHQvLyBnbC5kZXRhY2hTaGFkZXIoIHByb2dyYW0sIGdsVmVydGV4U2hhZGVyICk7XG5cdC8vIGdsLmRldGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xGcmFnbWVudFNoYWRlciApO1xuXG5cdGdsLmRlbGV0ZVNoYWRlciggZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Z2wuZGVsZXRlU2hhZGVyKCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Ly8gc2V0IHVwIGNhY2hpbmcgZm9yIHVuaWZvcm0gbG9jYXRpb25zXG5cblx0bGV0IGNhY2hlZFVuaWZvcm1zO1xuXG5cdHRoaXMuZ2V0VW5pZm9ybXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNhY2hlZFVuaWZvcm1zID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNhY2hlZFVuaWZvcm1zID0gbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGVkVW5pZm9ybXM7XG5cblx0fTtcblxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgYXR0cmlidXRlIGxvY2F0aW9uc1xuXG5cdGxldCBjYWNoZWRBdHRyaWJ1dGVzO1xuXG5cdHRoaXMuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggY2FjaGVkQXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjYWNoZWRBdHRyaWJ1dGVzID0gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGVkQXR0cmlidXRlcztcblxuXHR9O1xuXG5cdC8vIGZyZWUgcmVzb3VyY2VcblxuXHR0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRiaW5kaW5nU3RhdGVzLnJlbGVhc2VTdGF0ZXNPZlByb2dyYW0oIHRoaXMgKTtcblxuXHRcdGdsLmRlbGV0ZVByb2dyYW0oIHByb2dyYW0gKTtcblx0XHR0aGlzLnByb2dyYW0gPSB1bmRlZmluZWQ7XG5cblx0fTtcblxuXHQvL1xuXG5cdHRoaXMubmFtZSA9IHBhcmFtZXRlcnMuc2hhZGVyTmFtZTtcblx0dGhpcy5pZCA9IHByb2dyYW1JZENvdW50ICsrO1xuXHR0aGlzLmNhY2hlS2V5ID0gY2FjaGVLZXk7XG5cdHRoaXMudXNlZFRpbWVzID0gMTtcblx0dGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcblx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSBnbFZlcnRleFNoYWRlcjtcblx0dGhpcy5mcmFnbWVudFNoYWRlciA9IGdsRnJhZ21lbnRTaGFkZXI7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn1cblxubGV0IF9pZCA9IDA7XG5cbmNsYXNzIFdlYkdMU2hhZGVyQ2FjaGUge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy5zaGFkZXJDYWNoZSA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLm1hdGVyaWFsQ2FjaGUgPSBuZXcgTWFwKCk7XG5cblx0fVxuXG5cdHVwZGF0ZSggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCB2ZXJ0ZXhTaGFkZXIgPSBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXI7XG5cdFx0Y29uc3QgZnJhZ21lbnRTaGFkZXIgPSBtYXRlcmlhbC5mcmFnbWVudFNoYWRlcjtcblxuXHRcdGNvbnN0IHZlcnRleFNoYWRlclN0YWdlID0gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIHZlcnRleFNoYWRlciApO1xuXHRcdGNvbnN0IGZyYWdtZW50U2hhZGVyU3RhZ2UgPSB0aGlzLl9nZXRTaGFkZXJTdGFnZSggZnJhZ21lbnRTaGFkZXIgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsU2hhZGVycyA9IHRoaXMuX2dldFNoYWRlckNhY2hlRm9yTWF0ZXJpYWwoIG1hdGVyaWFsICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsU2hhZGVycy5oYXMoIHZlcnRleFNoYWRlclN0YWdlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRtYXRlcmlhbFNoYWRlcnMuYWRkKCB2ZXJ0ZXhTaGFkZXJTdGFnZSApO1xuXHRcdFx0dmVydGV4U2hhZGVyU3RhZ2UudXNlZFRpbWVzICsrO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbFNoYWRlcnMuaGFzKCBmcmFnbWVudFNoYWRlclN0YWdlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRtYXRlcmlhbFNoYWRlcnMuYWRkKCBmcmFnbWVudFNoYWRlclN0YWdlICk7XG5cdFx0XHRmcmFnbWVudFNoYWRlclN0YWdlLnVzZWRUaW1lcyArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyZW1vdmUoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWxTaGFkZXJzID0gdGhpcy5tYXRlcmlhbENhY2hlLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGZvciAoIGNvbnN0IHNoYWRlclN0YWdlIG9mIG1hdGVyaWFsU2hhZGVycyApIHtcblxuXHRcdFx0c2hhZGVyU3RhZ2UudXNlZFRpbWVzIC0tO1xuXG5cdFx0XHRpZiAoIHNoYWRlclN0YWdlLnVzZWRUaW1lcyA9PT0gMCApIHRoaXMuc2hhZGVyQ2FjaGUuZGVsZXRlKCBzaGFkZXJTdGFnZS5jb2RlICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1hdGVyaWFsQ2FjaGUuZGVsZXRlKCBtYXRlcmlhbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFZlcnRleFNoYWRlcklEKCBtYXRlcmlhbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9nZXRTaGFkZXJTdGFnZSggbWF0ZXJpYWwudmVydGV4U2hhZGVyICkuaWQ7XG5cblx0fVxuXG5cdGdldEZyYWdtZW50U2hhZGVySUQoIG1hdGVyaWFsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2dldFNoYWRlclN0YWdlKCBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciApLmlkO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5zaGFkZXJDYWNoZS5jbGVhcigpO1xuXHRcdHRoaXMubWF0ZXJpYWxDYWNoZS5jbGVhcigpO1xuXG5cdH1cblxuXHRfZ2V0U2hhZGVyQ2FjaGVGb3JNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHRoaXMubWF0ZXJpYWxDYWNoZTtcblxuXHRcdGlmICggY2FjaGUuaGFzKCBtYXRlcmlhbCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y2FjaGUuc2V0KCBtYXRlcmlhbCwgbmV3IFNldCgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGUuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHRfZ2V0U2hhZGVyU3RhZ2UoIGNvZGUgKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHRoaXMuc2hhZGVyQ2FjaGU7XG5cblx0XHRpZiAoIGNhY2hlLmhhcyggY29kZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc3Qgc3RhZ2UgPSBuZXcgV2ViR0xTaGFkZXJTdGFnZSggY29kZSApO1xuXHRcdFx0Y2FjaGUuc2V0KCBjb2RlLCBzdGFnZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlLmdldCggY29kZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBXZWJHTFNoYWRlclN0YWdlIHtcblxuXHRjb25zdHJ1Y3RvciggY29kZSApIHtcblxuXHRcdHRoaXMuaWQgPSBfaWQgKys7XG5cblx0XHR0aGlzLmNvZGUgPSBjb2RlO1xuXHRcdHRoaXMudXNlZFRpbWVzID0gMDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xQcm9ncmFtcyggcmVuZGVyZXIsIGN1YmVtYXBzLCBjdWJldXZtYXBzLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMsIGJpbmRpbmdTdGF0ZXMsIGNsaXBwaW5nICkge1xuXG5cdGNvbnN0IF9wcm9ncmFtTGF5ZXJzID0gbmV3IExheWVycygpO1xuXHRjb25zdCBfY3VzdG9tU2hhZGVycyA9IG5ldyBXZWJHTFNoYWRlckNhY2hlKCk7XG5cdGNvbnN0IHByb2dyYW1zID0gW107XG5cblx0Y29uc3QgaXNXZWJHTDIgPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDI7XG5cdGNvbnN0IGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBjYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjtcblx0Y29uc3QgZmxvYXRWZXJ0ZXhUZXh0dXJlcyA9IGNhcGFiaWxpdGllcy5mbG9hdFZlcnRleFRleHR1cmVzO1xuXHRjb25zdCBtYXhWZXJ0ZXhVbmlmb3JtcyA9IGNhcGFiaWxpdGllcy5tYXhWZXJ0ZXhVbmlmb3Jtcztcblx0Y29uc3QgdmVydGV4VGV4dHVyZXMgPSBjYXBhYmlsaXRpZXMudmVydGV4VGV4dHVyZXM7XG5cdGxldCBwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG5cdGNvbnN0IHNoYWRlcklEcyA9IHtcblx0XHRNZXNoRGVwdGhNYXRlcmlhbDogJ2RlcHRoJyxcblx0XHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogJ2Rpc3RhbmNlUkdCQScsXG5cdFx0TWVzaE5vcm1hbE1hdGVyaWFsOiAnbm9ybWFsJyxcblx0XHRNZXNoQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJyxcblx0XHRNZXNoTGFtYmVydE1hdGVyaWFsOiAnbGFtYmVydCcsXG5cdFx0TWVzaFBob25nTWF0ZXJpYWw6ICdwaG9uZycsXG5cdFx0TWVzaFRvb25NYXRlcmlhbDogJ3Rvb24nLFxuXHRcdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hNYXRjYXBNYXRlcmlhbDogJ21hdGNhcCcsXG5cdFx0TGluZUJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsXG5cdFx0TGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJyxcblx0XHRQb2ludHNNYXRlcmlhbDogJ3BvaW50cycsXG5cdFx0U2hhZG93TWF0ZXJpYWw6ICdzaGFkb3cnLFxuXHRcdFNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJ1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldE1heEJvbmVzKCBvYmplY3QgKSB7XG5cblx0XHRjb25zdCBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjtcblx0XHRjb25zdCBib25lcyA9IHNrZWxldG9uLmJvbmVzO1xuXG5cdFx0aWYgKCBmbG9hdFZlcnRleFRleHR1cmVzICkge1xuXG5cdFx0XHRyZXR1cm4gMTAyNDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGRlZmF1bHQgZm9yIHdoZW4gb2JqZWN0IGlzIG5vdCBzcGVjaWZpZWRcblx0XHRcdC8vICggZm9yIGV4YW1wbGUgd2hlbiBwcmVidWlsZGluZyBzaGFkZXIgdG8gYmUgdXNlZCB3aXRoIG11bHRpcGxlIG9iamVjdHMgKVxuXHRcdFx0Ly9cblx0XHRcdC8vICAtIGxlYXZlIHNvbWUgZXh0cmEgc3BhY2UgZm9yIG90aGVyIHVuaWZvcm1zXG5cdFx0XHQvLyAgLSBsaW1pdCBoZXJlIGlzIEFOR0xFJ3MgMjU0IG1heCB1bmlmb3JtIHZlY3RvcnNcblx0XHRcdC8vICAgICh1cCB0byA1NCBzaG91bGQgYmUgc2FmZSlcblxuXHRcdFx0Y29uc3QgblZlcnRleFVuaWZvcm1zID0gbWF4VmVydGV4VW5pZm9ybXM7XG5cdFx0XHRjb25zdCBuVmVydGV4TWF0cmljZXMgPSBNYXRoLmZsb29yKCAoIG5WZXJ0ZXhVbmlmb3JtcyAtIDIwICkgLyA0ICk7XG5cblx0XHRcdGNvbnN0IG1heEJvbmVzID0gTWF0aC5taW4oIG5WZXJ0ZXhNYXRyaWNlcywgYm9uZXMubGVuZ3RoICk7XG5cblx0XHRcdGlmICggbWF4Qm9uZXMgPCBib25lcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogU2tlbGV0b24gaGFzICcgKyBib25lcy5sZW5ndGggKyAnIGJvbmVzLiBUaGlzIEdQVSBzdXBwb3J0cyAnICsgbWF4Qm9uZXMgKyAnLicgKTtcblx0XHRcdFx0cmV0dXJuIDA7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1heEJvbmVzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQYXJhbWV0ZXJzKCBtYXRlcmlhbCwgbGlnaHRzLCBzaGFkb3dzLCBzY2VuZSwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgZm9nID0gc2NlbmUuZm9nO1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXHRcdGNvbnN0IGVudmlyb25tZW50ID0gbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IHNjZW5lLmVudmlyb25tZW50IDogbnVsbDtcblxuXHRcdGNvbnN0IGVudk1hcCA9ICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IGN1YmV1dm1hcHMgOiBjdWJlbWFwcyApLmdldCggbWF0ZXJpYWwuZW52TWFwIHx8IGVudmlyb25tZW50ICk7XG5cdFx0Y29uc3QgZW52TWFwQ3ViZVVWSGVpZ2h0ID0gKCAhISBlbnZNYXAgKSAmJiAoIGVudk1hcC5tYXBwaW5nID09PSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyApID8gZW52TWFwLmltYWdlLmhlaWdodCA6IG51bGw7XG5cblx0XHRjb25zdCBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdO1xuXG5cdFx0Ly8gaGV1cmlzdGljcyB0byBjcmVhdGUgc2hhZGVyIHBhcmFtZXRlcnMgYWNjb3JkaW5nIHRvIGxpZ2h0cyBpbiB0aGUgc2NlbmVcblx0XHQvLyAobm90IHRvIGJsb3cgb3ZlciBtYXhMaWdodHMgYnVkZ2V0KVxuXG5cdFx0Y29uc3QgbWF4Qm9uZXMgPSBvYmplY3QuaXNTa2lubmVkTWVzaCA/IGdldE1heEJvbmVzKCBvYmplY3QgKSA6IDA7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnByZWNpc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0cHJlY2lzaW9uID0gY2FwYWJpbGl0aWVzLmdldE1heFByZWNpc2lvbiggbWF0ZXJpYWwucHJlY2lzaW9uICk7XG5cblx0XHRcdGlmICggcHJlY2lzaW9uICE9PSBtYXRlcmlhbC5wcmVjaXNpb24gKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtLmdldFBhcmFtZXRlcnM6JywgbWF0ZXJpYWwucHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBwcmVjaXNpb24sICdpbnN0ZWFkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXHRcdGNvbnN0IG1vcnBoVGFyZ2V0c0NvdW50ID0gKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkgPyBtb3JwaEF0dHJpYnV0ZS5sZW5ndGggOiAwO1xuXG5cdFx0bGV0IG1vcnBoVGV4dHVyZVN0cmlkZSA9IDA7XG5cblx0XHRpZiAoIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkgbW9ycGhUZXh0dXJlU3RyaWRlID0gMTtcblx0XHRpZiAoIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZCApIG1vcnBoVGV4dHVyZVN0cmlkZSA9IDI7XG5cdFx0aWYgKCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCApIG1vcnBoVGV4dHVyZVN0cmlkZSA9IDM7XG5cblx0XHQvL1xuXG5cdFx0bGV0IHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXI7XG5cdFx0bGV0IGN1c3RvbVZlcnRleFNoYWRlcklELCBjdXN0b21GcmFnbWVudFNoYWRlcklEO1xuXG5cdFx0aWYgKCBzaGFkZXJJRCApIHtcblxuXHRcdFx0Y29uc3Qgc2hhZGVyID0gU2hhZGVyTGliWyBzaGFkZXJJRCBdO1xuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXIgPSBzaGFkZXIudmVydGV4U2hhZGVyO1xuXHRcdFx0ZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXI7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXIgPSBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXI7XG5cdFx0XHRmcmFnbWVudFNoYWRlciA9IG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyO1xuXG5cdFx0XHRfY3VzdG9tU2hhZGVycy51cGRhdGUoIG1hdGVyaWFsICk7XG5cblx0XHRcdGN1c3RvbVZlcnRleFNoYWRlcklEID0gX2N1c3RvbVNoYWRlcnMuZ2V0VmVydGV4U2hhZGVySUQoIG1hdGVyaWFsICk7XG5cdFx0XHRjdXN0b21GcmFnbWVudFNoYWRlcklEID0gX2N1c3RvbVNoYWRlcnMuZ2V0RnJhZ21lbnRTaGFkZXJJRCggbWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHRcdGNvbnN0IHVzZUFscGhhVGVzdCA9IG1hdGVyaWFsLmFscGhhVGVzdCA+IDA7XG5cdFx0Y29uc3QgdXNlQ2xlYXJjb2F0ID0gbWF0ZXJpYWwuY2xlYXJjb2F0ID4gMDtcblxuXHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB7XG5cblx0XHRcdGlzV2ViR0wyOiBpc1dlYkdMMixcblxuXHRcdFx0c2hhZGVySUQ6IHNoYWRlcklELFxuXHRcdFx0c2hhZGVyTmFtZTogbWF0ZXJpYWwudHlwZSxcblxuXHRcdFx0dmVydGV4U2hhZGVyOiB2ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRkZWZpbmVzOiBtYXRlcmlhbC5kZWZpbmVzLFxuXG5cdFx0XHRjdXN0b21WZXJ0ZXhTaGFkZXJJRDogY3VzdG9tVmVydGV4U2hhZGVySUQsXG5cdFx0XHRjdXN0b21GcmFnbWVudFNoYWRlcklEOiBjdXN0b21GcmFnbWVudFNoYWRlcklELFxuXG5cdFx0XHRpc1Jhd1NoYWRlck1hdGVyaWFsOiBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsID09PSB0cnVlLFxuXHRcdFx0Z2xzbFZlcnNpb246IG1hdGVyaWFsLmdsc2xWZXJzaW9uLFxuXG5cdFx0XHRwcmVjaXNpb246IHByZWNpc2lvbixcblxuXHRcdFx0aW5zdGFuY2luZzogb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZSxcblx0XHRcdGluc3RhbmNpbmdDb2xvcjogb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZSAmJiBvYmplY3QuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCxcblxuXHRcdFx0c3VwcG9ydHNWZXJ0ZXhUZXh0dXJlczogdmVydGV4VGV4dHVyZXMsXG5cdFx0XHRvdXRwdXRFbmNvZGluZzogKCBjdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsICkgPyByZW5kZXJlci5vdXRwdXRFbmNvZGluZyA6ICggY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlID8gY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLmVuY29kaW5nIDogTGluZWFyRW5jb2RpbmcgKSxcblx0XHRcdG1hcDogISEgbWF0ZXJpYWwubWFwLFxuXHRcdFx0bWF0Y2FwOiAhISBtYXRlcmlhbC5tYXRjYXAsXG5cdFx0XHRlbnZNYXA6ICEhIGVudk1hcCxcblx0XHRcdGVudk1hcE1vZGU6IGVudk1hcCAmJiBlbnZNYXAubWFwcGluZyxcblx0XHRcdGVudk1hcEN1YmVVVkhlaWdodDogZW52TWFwQ3ViZVVWSGVpZ2h0LFxuXHRcdFx0bGlnaHRNYXA6ICEhIG1hdGVyaWFsLmxpZ2h0TWFwLFxuXHRcdFx0YW9NYXA6ICEhIG1hdGVyaWFsLmFvTWFwLFxuXHRcdFx0ZW1pc3NpdmVNYXA6ICEhIG1hdGVyaWFsLmVtaXNzaXZlTWFwLFxuXHRcdFx0YnVtcE1hcDogISEgbWF0ZXJpYWwuYnVtcE1hcCxcblx0XHRcdG5vcm1hbE1hcDogISEgbWF0ZXJpYWwubm9ybWFsTWFwLFxuXHRcdFx0b2JqZWN0U3BhY2VOb3JtYWxNYXA6IG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPT09IE9iamVjdFNwYWNlTm9ybWFsTWFwLFxuXHRcdFx0dGFuZ2VudFNwYWNlTm9ybWFsTWFwOiBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID09PSBUYW5nZW50U3BhY2VOb3JtYWxNYXAsXG5cblx0XHRcdGRlY29kZVZpZGVvVGV4dHVyZTogISEgbWF0ZXJpYWwubWFwICYmICggbWF0ZXJpYWwubWFwLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlICkgJiYgKCBtYXRlcmlhbC5tYXAuZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApLFxuXG5cdFx0XHRjbGVhcmNvYXQ6IHVzZUNsZWFyY29hdCxcblx0XHRcdGNsZWFyY29hdE1hcDogdXNlQ2xlYXJjb2F0ICYmICEhIG1hdGVyaWFsLmNsZWFyY29hdE1hcCxcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzc01hcDogdXNlQ2xlYXJjb2F0ICYmICEhIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzc01hcCxcblx0XHRcdGNsZWFyY29hdE5vcm1hbE1hcDogdXNlQ2xlYXJjb2F0ICYmICEhIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCxcblxuXHRcdFx0ZGlzcGxhY2VtZW50TWFwOiAhISBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAsXG5cdFx0XHRyb3VnaG5lc3NNYXA6ICEhIG1hdGVyaWFsLnJvdWdobmVzc01hcCxcblx0XHRcdG1ldGFsbmVzc01hcDogISEgbWF0ZXJpYWwubWV0YWxuZXNzTWFwLFxuXHRcdFx0c3BlY3VsYXJNYXA6ICEhIG1hdGVyaWFsLnNwZWN1bGFyTWFwLFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHlNYXA6ICEhIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwLFxuXHRcdFx0c3BlY3VsYXJDb2xvck1hcDogISEgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcCxcblxuXHRcdFx0b3BhcXVlOiBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gZmFsc2UgJiYgbWF0ZXJpYWwuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nLFxuXG5cdFx0XHRhbHBoYU1hcDogISEgbWF0ZXJpYWwuYWxwaGFNYXAsXG5cdFx0XHRhbHBoYVRlc3Q6IHVzZUFscGhhVGVzdCxcblxuXHRcdFx0Z3JhZGllbnRNYXA6ICEhIG1hdGVyaWFsLmdyYWRpZW50TWFwLFxuXG5cdFx0XHRzaGVlbjogbWF0ZXJpYWwuc2hlZW4gPiAwLFxuXHRcdFx0c2hlZW5Db2xvck1hcDogISEgbWF0ZXJpYWwuc2hlZW5Db2xvck1hcCxcblx0XHRcdHNoZWVuUm91Z2huZXNzTWFwOiAhISBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcCxcblxuXHRcdFx0dHJhbnNtaXNzaW9uOiBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwLFxuXHRcdFx0dHJhbnNtaXNzaW9uTWFwOiAhISBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAsXG5cdFx0XHR0aGlja25lc3NNYXA6ICEhIG1hdGVyaWFsLnRoaWNrbmVzc01hcCxcblxuXHRcdFx0Y29tYmluZTogbWF0ZXJpYWwuY29tYmluZSxcblxuXHRcdFx0dmVydGV4VGFuZ2VudHM6ICggISEgbWF0ZXJpYWwubm9ybWFsTWFwICYmICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMudGFuZ2VudCApLFxuXHRcdFx0dmVydGV4Q29sb3JzOiBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMsXG5cdFx0XHR2ZXJ0ZXhBbHBoYXM6IG1hdGVyaWFsLnZlcnRleENvbG9ycyA9PT0gdHJ1ZSAmJiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IuaXRlbVNpemUgPT09IDQsXG5cdFx0XHR2ZXJ0ZXhVdnM6ICEhIG1hdGVyaWFsLm1hcCB8fCAhISBtYXRlcmlhbC5idW1wTWFwIHx8ICEhIG1hdGVyaWFsLm5vcm1hbE1hcCB8fCAhISBtYXRlcmlhbC5zcGVjdWxhck1hcCB8fCAhISBtYXRlcmlhbC5hbHBoYU1hcCB8fCAhISBtYXRlcmlhbC5lbWlzc2l2ZU1hcCB8fCAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgfHwgISEgbWF0ZXJpYWwubWV0YWxuZXNzTWFwIHx8ICEhIG1hdGVyaWFsLmNsZWFyY29hdE1hcCB8fCAhISBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgfHwgISEgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwIHx8ICEhIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCB8fCAhISBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAgfHwgISEgbWF0ZXJpYWwudGhpY2tuZXNzTWFwIHx8ICEhIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwIHx8ICEhIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgfHwgISEgbWF0ZXJpYWwuc2hlZW5Db2xvck1hcCB8fCAhISBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcCxcblx0XHRcdHV2c1ZlcnRleE9ubHk6ICEgKCAhISBtYXRlcmlhbC5tYXAgfHwgISEgbWF0ZXJpYWwuYnVtcE1hcCB8fCAhISBtYXRlcmlhbC5ub3JtYWxNYXAgfHwgISEgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgfHwgISEgbWF0ZXJpYWwuYWxwaGFNYXAgfHwgISEgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgfHwgISEgbWF0ZXJpYWwucm91Z2huZXNzTWFwIHx8ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCB8fCAhISBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgfHwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uID4gMCB8fCAhISBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAgfHwgISEgbWF0ZXJpYWwudGhpY2tuZXNzTWFwIHx8ICEhIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwIHx8ICEhIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgfHwgbWF0ZXJpYWwuc2hlZW4gPiAwIHx8ICEhIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAgfHwgISEgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXAgKSAmJiAhISBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAsXG5cblx0XHRcdGZvZzogISEgZm9nLFxuXHRcdFx0dXNlRm9nOiBtYXRlcmlhbC5mb2csXG5cdFx0XHRmb2dFeHAyOiAoIGZvZyAmJiBmb2cuaXNGb2dFeHAyICksXG5cblx0XHRcdGZsYXRTaGFkaW5nOiAhISBtYXRlcmlhbC5mbGF0U2hhZGluZyxcblxuXHRcdFx0c2l6ZUF0dGVudWF0aW9uOiBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24sXG5cdFx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXG5cdFx0XHRza2lubmluZzogb2JqZWN0LmlzU2tpbm5lZE1lc2ggPT09IHRydWUgJiYgbWF4Qm9uZXMgPiAwLFxuXHRcdFx0bWF4Qm9uZXM6IG1heEJvbmVzLFxuXHRcdFx0dXNlVmVydGV4VGV4dHVyZTogZmxvYXRWZXJ0ZXhUZXh0dXJlcyxcblxuXHRcdFx0bW9ycGhUYXJnZXRzOiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCxcblx0XHRcdG1vcnBoTm9ybWFsczogZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkLFxuXHRcdFx0bW9ycGhDb2xvcnM6IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkLFxuXHRcdFx0bW9ycGhUYXJnZXRzQ291bnQ6IG1vcnBoVGFyZ2V0c0NvdW50LFxuXHRcdFx0bW9ycGhUZXh0dXJlU3RyaWRlOiBtb3JwaFRleHR1cmVTdHJpZGUsXG5cblx0XHRcdG51bURpckxpZ2h0czogbGlnaHRzLmRpcmVjdGlvbmFsLmxlbmd0aCxcblx0XHRcdG51bVBvaW50TGlnaHRzOiBsaWdodHMucG9pbnQubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0czogbGlnaHRzLnNwb3QubGVuZ3RoLFxuXHRcdFx0bnVtUmVjdEFyZWFMaWdodHM6IGxpZ2h0cy5yZWN0QXJlYS5sZW5ndGgsXG5cdFx0XHRudW1IZW1pTGlnaHRzOiBsaWdodHMuaGVtaS5sZW5ndGgsXG5cblx0XHRcdG51bURpckxpZ2h0U2hhZG93czogbGlnaHRzLmRpcmVjdGlvbmFsU2hhZG93TWFwLmxlbmd0aCxcblx0XHRcdG51bVBvaW50TGlnaHRTaGFkb3dzOiBsaWdodHMucG9pbnRTaGFkb3dNYXAubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0U2hhZG93czogbGlnaHRzLnNwb3RTaGFkb3dNYXAubGVuZ3RoLFxuXG5cdFx0XHRudW1DbGlwcGluZ1BsYW5lczogY2xpcHBpbmcubnVtUGxhbmVzLFxuXHRcdFx0bnVtQ2xpcEludGVyc2VjdGlvbjogY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uLFxuXG5cdFx0XHRkaXRoZXJpbmc6IG1hdGVyaWFsLmRpdGhlcmluZyxcblxuXHRcdFx0c2hhZG93TWFwRW5hYmxlZDogcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgJiYgc2hhZG93cy5sZW5ndGggPiAwLFxuXHRcdFx0c2hhZG93TWFwVHlwZTogcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUsXG5cblx0XHRcdHRvbmVNYXBwaW5nOiBtYXRlcmlhbC50b25lTWFwcGVkID8gcmVuZGVyZXIudG9uZU1hcHBpbmcgOiBOb1RvbmVNYXBwaW5nLFxuXHRcdFx0cGh5c2ljYWxseUNvcnJlY3RMaWdodHM6IHJlbmRlcmVyLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzLFxuXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGE6IG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSxcblxuXHRcdFx0ZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsXG5cdFx0XHRmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLFxuXG5cdFx0XHRkZXB0aFBhY2tpbmc6ICggbWF0ZXJpYWwuZGVwdGhQYWNraW5nICE9PSB1bmRlZmluZWQgKSA/IG1hdGVyaWFsLmRlcHRoUGFja2luZyA6IGZhbHNlLFxuXG5cdFx0XHRpbmRleDBBdHRyaWJ1dGVOYW1lOiBtYXRlcmlhbC5pbmRleDBBdHRyaWJ1dGVOYW1lLFxuXG5cdFx0XHRleHRlbnNpb25EZXJpdmF0aXZlczogbWF0ZXJpYWwuZXh0ZW5zaW9ucyAmJiBtYXRlcmlhbC5leHRlbnNpb25zLmRlcml2YXRpdmVzLFxuXHRcdFx0ZXh0ZW5zaW9uRnJhZ0RlcHRoOiBtYXRlcmlhbC5leHRlbnNpb25zICYmIG1hdGVyaWFsLmV4dGVuc2lvbnMuZnJhZ0RlcHRoLFxuXHRcdFx0ZXh0ZW5zaW9uRHJhd0J1ZmZlcnM6IG1hdGVyaWFsLmV4dGVuc2lvbnMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5kcmF3QnVmZmVycyxcblx0XHRcdGV4dGVuc2lvblNoYWRlclRleHR1cmVMT0Q6IG1hdGVyaWFsLmV4dGVuc2lvbnMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5zaGFkZXJUZXh0dXJlTE9ELFxuXG5cdFx0XHRyZW5kZXJlckV4dGVuc2lvbkZyYWdEZXB0aDogaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5oYXMoICdFWFRfZnJhZ19kZXB0aCcgKSxcblx0XHRcdHJlbmRlcmVyRXh0ZW5zaW9uRHJhd0J1ZmZlcnM6IGlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfZHJhd19idWZmZXJzJyApLFxuXHRcdFx0cmVuZGVyZXJFeHRlbnNpb25TaGFkZXJUZXh0dXJlTG9kOiBpc1dlYkdMMiB8fCBleHRlbnNpb25zLmhhcyggJ0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QnICksXG5cblx0XHRcdGN1c3RvbVByb2dyYW1DYWNoZUtleTogbWF0ZXJpYWwuY3VzdG9tUHJvZ3JhbUNhY2hlS2V5KClcblxuXHRcdH07XG5cblx0XHRyZXR1cm4gcGFyYW1ldGVycztcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5KCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdGlmICggcGFyYW1ldGVycy5zaGFkZXJJRCApIHtcblxuXHRcdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaGFkZXJJRCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jdXN0b21WZXJ0ZXhTaGFkZXJJRCApO1xuXHRcdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jdXN0b21GcmFnbWVudFNoYWRlcklEICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMuZGVmaW5lcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCBuYW1lIGluIHBhcmFtZXRlcnMuZGVmaW5lcyApIHtcblxuXHRcdFx0XHRhcnJheS5wdXNoKCBuYW1lICk7XG5cdFx0XHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZGVmaW5lc1sgbmFtZSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcGFyYW1ldGVycy5pc1Jhd1NoYWRlck1hdGVyaWFsID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2V0UHJvZ3JhbUNhY2hlS2V5UGFyYW1ldGVycyggYXJyYXksIHBhcmFtZXRlcnMgKTtcblx0XHRcdGdldFByb2dyYW1DYWNoZUtleUJvb2xlYW5zKCBhcnJheSwgcGFyYW1ldGVycyApO1xuXHRcdFx0YXJyYXkucHVzaCggcmVuZGVyZXIub3V0cHV0RW5jb2RpbmcgKTtcblxuXHRcdH1cblxuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuY3VzdG9tUHJvZ3JhbUNhY2hlS2V5ICk7XG5cblx0XHRyZXR1cm4gYXJyYXkuam9pbigpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQcm9ncmFtQ2FjaGVLZXlQYXJhbWV0ZXJzKCBhcnJheSwgcGFyYW1ldGVycyApIHtcblxuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMucHJlY2lzaW9uICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZW52TWFwTW9kZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWSGVpZ2h0ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jb21iaW5lICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy52ZXJ0ZXhVdnMgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmZvZ0V4cDIgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNpemVBdHRlbnVhdGlvbiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubWF4Qm9uZXMgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0c0NvdW50ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5tb3JwaEF0dHJpYnV0ZUNvdW50ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1EaXJMaWdodHMgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1TcG90TGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1IZW1pTGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRTaGFkb3dzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFByb2dyYW1DYWNoZUtleUJvb2xlYW5zKCBhcnJheSwgcGFyYW1ldGVycyApIHtcblxuXHRcdF9wcm9ncmFtTGF5ZXJzLmRpc2FibGVBbGwoKTtcblxuXHRcdGlmICggcGFyYW1ldGVycy5pc1dlYkdMMiApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuaW5zdGFuY2luZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuaW5zdGFuY2luZ0NvbG9yIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm1hdGNhcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5saWdodE1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYW9NYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA4ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5idW1wTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubm9ybWFsTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTEgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMiApO1xuXHRcdGlmICggcGFyYW1ldGVycy50YW5nZW50U3BhY2VOb3JtYWxNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5jbGVhcmNvYXQgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5jbGVhcmNvYXRNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5zcGVjdWxhck1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE5ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIxICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmdyYWRpZW50TWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5hbHBoYVRlc3QgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyNSApO1xuXHRcdGlmICggcGFyYW1ldGVycy52ZXJ0ZXhBbHBoYXMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy52ZXJ0ZXhVdnMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyNyApO1xuXHRcdGlmICggcGFyYW1ldGVycy52ZXJ0ZXhUYW5nZW50cyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDI4ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnV2c1ZlcnRleE9ubHkgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5mb2cgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAzMCApO1xuXG5cdFx0YXJyYXkucHVzaCggX3Byb2dyYW1MYXllcnMubWFzayApO1xuXHRcdF9wcm9ncmFtTGF5ZXJzLmRpc2FibGVBbGwoKTtcblxuXHRcdGlmICggcGFyYW1ldGVycy51c2VGb2cgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5za2lubmluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDMgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudXNlVmVydGV4VGV4dHVyZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDQgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA2ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA4ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA5ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZG91YmxlU2lkZWQgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5mbGlwU2lkZWQgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kaXRoZXJpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5zcGVjdWxhckludGVuc2l0eU1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE1ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy50cmFuc21pc3Npb24gKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNyApO1xuXHRcdGlmICggcGFyYW1ldGVycy50cmFuc21pc3Npb25NYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy50aGlja25lc3NNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5zaGVlbiApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoZWVuQ29sb3JNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5zaGVlblJvdWdobmVzc01hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIyICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmRlY29kZVZpZGVvVGV4dHVyZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIzICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm9wYXF1ZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDI0ICk7XG5cblx0XHRhcnJheS5wdXNoKCBfcHJvZ3JhbUxheWVycy5tYXNrICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFVuaWZvcm1zKCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IHNoYWRlcklEID0gc2hhZGVySURzWyBtYXRlcmlhbC50eXBlIF07XG5cdFx0bGV0IHVuaWZvcm1zO1xuXG5cdFx0aWYgKCBzaGFkZXJJRCApIHtcblxuXHRcdFx0Y29uc3Qgc2hhZGVyID0gU2hhZGVyTGliWyBzaGFkZXJJRCBdO1xuXHRcdFx0dW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLmNsb25lKCBzaGFkZXIudW5pZm9ybXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5pZm9ybXM7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFjcXVpcmVQcm9ncmFtKCBwYXJhbWV0ZXJzLCBjYWNoZUtleSApIHtcblxuXHRcdGxldCBwcm9ncmFtO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgY29kZSBoYXMgYmVlbiBhbHJlYWR5IGNvbXBpbGVkXG5cdFx0Zm9yICggbGV0IHAgPSAwLCBwbCA9IHByb2dyYW1zLmxlbmd0aDsgcCA8IHBsOyBwICsrICkge1xuXG5cdFx0XHRjb25zdCBwcmVleGlzdGluZ1Byb2dyYW0gPSBwcm9ncmFtc1sgcCBdO1xuXG5cdFx0XHRpZiAoIHByZWV4aXN0aW5nUHJvZ3JhbS5jYWNoZUtleSA9PT0gY2FjaGVLZXkgKSB7XG5cblx0XHRcdFx0cHJvZ3JhbSA9IHByZWV4aXN0aW5nUHJvZ3JhbTtcblx0XHRcdFx0KysgcHJvZ3JhbS51c2VkVGltZXM7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcHJvZ3JhbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwcm9ncmFtID0gbmV3IFdlYkdMUHJvZ3JhbSggcmVuZGVyZXIsIGNhY2hlS2V5LCBwYXJhbWV0ZXJzLCBiaW5kaW5nU3RhdGVzICk7XG5cdFx0XHRwcm9ncmFtcy5wdXNoKCBwcm9ncmFtICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvZ3JhbTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVsZWFzZVByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRpZiAoIC0tIHByb2dyYW0udXNlZFRpbWVzID09PSAwICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZnJvbSB1bm9yZGVyZWQgc2V0XG5cdFx0XHRjb25zdCBpID0gcHJvZ3JhbXMuaW5kZXhPZiggcHJvZ3JhbSApO1xuXHRcdFx0cHJvZ3JhbXNbIGkgXSA9IHByb2dyYW1zWyBwcm9ncmFtcy5sZW5ndGggLSAxIF07XG5cdFx0XHRwcm9ncmFtcy5wb3AoKTtcblxuXHRcdFx0Ly8gRnJlZSBXZWJHTCByZXNvdXJjZXNcblx0XHRcdHByb2dyYW0uZGVzdHJveSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWxlYXNlU2hhZGVyQ2FjaGUoIG1hdGVyaWFsICkge1xuXG5cdFx0X2N1c3RvbVNoYWRlcnMucmVtb3ZlKCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0X2N1c3RvbVNoYWRlcnMuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldFBhcmFtZXRlcnM6IGdldFBhcmFtZXRlcnMsXG5cdFx0Z2V0UHJvZ3JhbUNhY2hlS2V5OiBnZXRQcm9ncmFtQ2FjaGVLZXksXG5cdFx0Z2V0VW5pZm9ybXM6IGdldFVuaWZvcm1zLFxuXHRcdGFjcXVpcmVQcm9ncmFtOiBhY3F1aXJlUHJvZ3JhbSxcblx0XHRyZWxlYXNlUHJvZ3JhbTogcmVsZWFzZVByb2dyYW0sXG5cdFx0cmVsZWFzZVNoYWRlckNhY2hlOiByZWxlYXNlU2hhZGVyQ2FjaGUsXG5cdFx0Ly8gRXhwb3NlZCBmb3IgcmVzb3VyY2UgbW9uaXRvcmluZyAmIGVycm9yIGZlZWRiYWNrIHZpYSByZW5kZXJlci5pbmZvOlxuXHRcdHByb2dyYW1zOiBwcm9ncmFtcyxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xQcm9wZXJ0aWVzKCkge1xuXG5cdGxldCBwcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIG9iamVjdCApIHtcblxuXHRcdGxldCBtYXAgPSBwcm9wZXJ0aWVzLmdldCggb2JqZWN0ICk7XG5cblx0XHRpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXAgPSB7fTtcblx0XHRcdHByb3BlcnRpZXMuc2V0KCBvYmplY3QsIG1hcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBvYmplY3QgKSB7XG5cblx0XHRwcm9wZXJ0aWVzLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBrZXksIHZhbHVlICkge1xuXG5cdFx0cHJvcGVydGllcy5nZXQoIG9iamVjdCApWyBrZXkgXSA9IHZhbHVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIHBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHtcblxuXHRcdHJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBhLnogLSBiLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYi56IC0gYS56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkge1xuXG5cdGNvbnN0IHJlbmRlckl0ZW1zID0gW107XG5cdGxldCByZW5kZXJJdGVtc0luZGV4ID0gMDtcblxuXHRjb25zdCBvcGFxdWUgPSBbXTtcblx0Y29uc3QgdHJhbnNtaXNzaXZlID0gW107XG5cdGNvbnN0IHRyYW5zcGFyZW50ID0gW107XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdHJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdFx0b3BhcXVlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNtaXNzaXZlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNwYXJlbnQubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdGxldCByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXTtcblxuXHRcdGlmICggcmVuZGVySXRlbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJJdGVtID0ge1xuXHRcdFx0XHRpZDogb2JqZWN0LmlkLFxuXHRcdFx0XHRvYmplY3Q6IG9iamVjdCxcblx0XHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5LFxuXHRcdFx0XHRtYXRlcmlhbDogbWF0ZXJpYWwsXG5cdFx0XHRcdGdyb3VwT3JkZXI6IGdyb3VwT3JkZXIsXG5cdFx0XHRcdHJlbmRlck9yZGVyOiBvYmplY3QucmVuZGVyT3JkZXIsXG5cdFx0XHRcdHo6IHosXG5cdFx0XHRcdGdyb3VwOiBncm91cFxuXHRcdFx0fTtcblxuXHRcdFx0cmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXSA9IHJlbmRlckl0ZW07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gb2JqZWN0LmlkO1xuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBvYmplY3Q7XG5cdFx0XHRyZW5kZXJJdGVtLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdFx0XHRyZW5kZXJJdGVtLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwT3JkZXIgPSBncm91cE9yZGVyO1xuXHRcdFx0cmVuZGVySXRlbS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblx0XHRcdHJlbmRlckl0ZW0ueiA9IHo7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gZ3JvdXA7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJJdGVtc0luZGV4ICsrO1xuXG5cdFx0cmV0dXJuIHJlbmRlckl0ZW07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdGNvbnN0IHJlbmRlckl0ZW0gPSBnZXROZXh0UmVuZGVySXRlbSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAuMCApIHtcblxuXHRcdFx0dHJhbnNtaXNzaXZlLnB1c2goIHJlbmRlckl0ZW0gKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICkge1xuXG5cdFx0XHR0cmFuc3BhcmVudC5wdXNoKCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRvcGFxdWUucHVzaCggcmVuZGVySXRlbSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1bnNoaWZ0KCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7XG5cblx0XHRjb25zdCByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwLjAgKSB7XG5cblx0XHRcdHRyYW5zbWlzc2l2ZS51bnNoaWZ0KCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dHJhbnNwYXJlbnQudW5zaGlmdCggcmVuZGVySXRlbSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0b3BhcXVlLnVuc2hpZnQoIHJlbmRlckl0ZW0gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc29ydCggY3VzdG9tT3BhcXVlU29ydCwgY3VzdG9tVHJhbnNwYXJlbnRTb3J0ICkge1xuXG5cdFx0aWYgKCBvcGFxdWUubGVuZ3RoID4gMSApIG9wYXF1ZS5zb3J0KCBjdXN0b21PcGFxdWVTb3J0IHx8IHBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc21pc3NpdmUubGVuZ3RoID4gMSApIHRyYW5zbWlzc2l2ZS5zb3J0KCBjdXN0b21UcmFuc3BhcmVudFNvcnQgfHwgcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc3BhcmVudC5sZW5ndGggPiAxICkgdHJhbnNwYXJlbnQuc29ydCggY3VzdG9tVHJhbnNwYXJlbnRTb3J0IHx8IHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBmaW5pc2goKSB7XG5cblx0XHQvLyBDbGVhciByZWZlcmVuY2VzIGZyb20gaW5hY3RpdmUgcmVuZGVySXRlbXMgaW4gdGhlIGxpc3RcblxuXHRcdGZvciAoIGxldCBpID0gcmVuZGVySXRlbXNJbmRleCwgaWwgPSByZW5kZXJJdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVySXRlbSA9IHJlbmRlckl0ZW1zWyBpIF07XG5cblx0XHRcdGlmICggcmVuZGVySXRlbS5pZCA9PT0gbnVsbCApIGJyZWFrO1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0ub2JqZWN0ID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5tYXRlcmlhbCA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdG9wYXF1ZTogb3BhcXVlLFxuXHRcdHRyYW5zbWlzc2l2ZTogdHJhbnNtaXNzaXZlLFxuXHRcdHRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCxcblxuXHRcdGluaXQ6IGluaXQsXG5cdFx0cHVzaDogcHVzaCxcblx0XHR1bnNoaWZ0OiB1bnNoaWZ0LFxuXHRcdGZpbmlzaDogZmluaXNoLFxuXG5cdFx0c29ydDogc29ydFxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdHMoKSB7XG5cblx0bGV0IGxpc3RzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggKSB7XG5cblx0XHRsZXQgbGlzdDtcblxuXHRcdGlmICggbGlzdHMuaGFzKCBzY2VuZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdGxpc3RzLnNldCggc2NlbmUsIFsgbGlzdCBdICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIHJlbmRlckNhbGxEZXB0aCA+PSBsaXN0cy5nZXQoIHNjZW5lICkubGVuZ3RoICkge1xuXG5cdFx0XHRcdGxpc3QgPSBuZXcgV2ViR0xSZW5kZXJMaXN0KCk7XG5cdFx0XHRcdGxpc3RzLmdldCggc2NlbmUgKS5wdXNoKCBsaXN0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bGlzdCA9IGxpc3RzLmdldCggc2NlbmUgKVsgcmVuZGVyQ2FsbERlcHRoIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBsaXN0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0bGlzdHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG5mdW5jdGlvbiBVbmlmb3Jtc0NhY2hlKCkge1xuXG5cdGNvbnN0IGxpZ2h0cyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHRcdGlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxpZ2h0c1sgbGlnaHQuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgdW5pZm9ybXM7XG5cblx0XHRcdHN3aXRjaCAoIGxpZ2h0LnR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiAwLFxuXHRcdFx0XHRcdFx0Y29uZUNvczogMCxcblx0XHRcdFx0XHRcdHBlbnVtYnJhQ29zOiAwLFxuXHRcdFx0XHRcdFx0ZGVjYXk6IDBcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1BvaW50TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogMCxcblx0XHRcdFx0XHRcdGRlY2F5OiAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdIZW1pc3BoZXJlTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0c2t5Q29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0Z3JvdW5kQ29sb3I6IG5ldyBDb2xvcigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdSZWN0QXJlYUxpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0aGFsZldpZHRoOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0aGFsZkhlaWdodDogbmV3IFZlY3RvcjMoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0bGlnaHRzWyBsaWdodC5pZCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdHJldHVybiB1bmlmb3JtcztcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFNoYWRvd1VuaWZvcm1zQ2FjaGUoKSB7XG5cblx0Y29uc3QgbGlnaHRzID0ge307XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCBsaWdodCApIHtcblxuXHRcdFx0aWYgKCBsaWdodHNbIGxpZ2h0LmlkIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbGlnaHRzWyBsaWdodC5pZCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCB1bmlmb3JtcztcblxuXHRcdFx0c3dpdGNoICggbGlnaHQudHlwZSApIHtcblxuXHRcdFx0XHRjYXNlICdEaXJlY3Rpb25hbExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU3BvdExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93Tm9ybWFsQmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcblx0XHRcdFx0XHRcdHNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKCksXG5cdFx0XHRcdFx0XHRzaGFkb3dDYW1lcmFOZWFyOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhRmFyOiAxMDAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogc2V0IFJlY3RBcmVhTGlnaHQgc2hhZG93IHVuaWZvcm1zXG5cblx0XHRcdH1cblxuXHRcdFx0bGlnaHRzWyBsaWdodC5pZCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdHJldHVybiB1bmlmb3JtcztcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cblxuXG5sZXQgbmV4dFZlcnNpb24gPSAwO1xuXG5mdW5jdGlvbiBzaGFkb3dDYXN0aW5nTGlnaHRzRmlyc3QoIGxpZ2h0QSwgbGlnaHRCICkge1xuXG5cdHJldHVybiAoIGxpZ2h0Qi5jYXN0U2hhZG93ID8gMSA6IDAgKSAtICggbGlnaHRBLmNhc3RTaGFkb3cgPyAxIDogMCApO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMTGlnaHRzKCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSBuZXcgVW5pZm9ybXNDYWNoZSgpO1xuXG5cdGNvbnN0IHNoYWRvd0NhY2hlID0gU2hhZG93VW5pZm9ybXNDYWNoZSgpO1xuXG5cdGNvbnN0IHN0YXRlID0ge1xuXG5cdFx0dmVyc2lvbjogMCxcblxuXHRcdGhhc2g6IHtcblx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoOiAtIDEsXG5cdFx0XHRwb2ludExlbmd0aDogLSAxLFxuXHRcdFx0c3BvdExlbmd0aDogLSAxLFxuXHRcdFx0cmVjdEFyZWFMZW5ndGg6IC0gMSxcblx0XHRcdGhlbWlMZW5ndGg6IC0gMSxcblxuXHRcdFx0bnVtRGlyZWN0aW9uYWxTaGFkb3dzOiAtIDEsXG5cdFx0XHRudW1Qb2ludFNoYWRvd3M6IC0gMSxcblx0XHRcdG51bVNwb3RTaGFkb3dzOiAtIDFcblx0XHR9LFxuXG5cdFx0YW1iaWVudDogWyAwLCAwLCAwIF0sXG5cdFx0cHJvYmU6IFtdLFxuXHRcdGRpcmVjdGlvbmFsOiBbXSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvdzogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXA6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiBbXSxcblx0XHRzcG90OiBbXSxcblx0XHRzcG90U2hhZG93OiBbXSxcblx0XHRzcG90U2hhZG93TWFwOiBbXSxcblx0XHRzcG90U2hhZG93TWF0cml4OiBbXSxcblx0XHRyZWN0QXJlYTogW10sXG5cdFx0cmVjdEFyZWFMVEMxOiBudWxsLFxuXHRcdHJlY3RBcmVhTFRDMjogbnVsbCxcblx0XHRwb2ludDogW10sXG5cdFx0cG9pbnRTaGFkb3c6IFtdLFxuXHRcdHBvaW50U2hhZG93TWFwOiBbXSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXG5cdFx0aGVtaTogW11cblxuXHR9O1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSBzdGF0ZS5wcm9iZS5wdXNoKCBuZXcgVmVjdG9yMygpICk7XG5cblx0Y29uc3QgdmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG5cdGNvbnN0IG1hdHJpeDQgPSBuZXcgTWF0cml4NCgpO1xuXHRjb25zdCBtYXRyaXg0MiA9IG5ldyBNYXRyaXg0KCk7XG5cblx0ZnVuY3Rpb24gc2V0dXAoIGxpZ2h0cywgcGh5c2ljYWxseUNvcnJlY3RMaWdodHMgKSB7XG5cblx0XHRsZXQgciA9IDAsIGcgPSAwLCBiID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSBzdGF0ZS5wcm9iZVsgaSBdLnNldCggMCwgMCwgMCApO1xuXG5cdFx0bGV0IGRpcmVjdGlvbmFsTGVuZ3RoID0gMDtcblx0XHRsZXQgcG9pbnRMZW5ndGggPSAwO1xuXHRcdGxldCBzcG90TGVuZ3RoID0gMDtcblx0XHRsZXQgcmVjdEFyZWFMZW5ndGggPSAwO1xuXHRcdGxldCBoZW1pTGVuZ3RoID0gMDtcblxuXHRcdGxldCBudW1EaXJlY3Rpb25hbFNoYWRvd3MgPSAwO1xuXHRcdGxldCBudW1Qb2ludFNoYWRvd3MgPSAwO1xuXHRcdGxldCBudW1TcG90U2hhZG93cyA9IDA7XG5cblx0XHRsaWdodHMuc29ydCggc2hhZG93Q2FzdGluZ0xpZ2h0c0ZpcnN0ICk7XG5cblx0XHQvLyBhcnRpc3QtZnJpZW5kbHkgbGlnaHQgaW50ZW5zaXR5IHNjYWxpbmcgZmFjdG9yXG5cdFx0Y29uc3Qgc2NhbGVGYWN0b3IgPSAoIHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzICE9PSB0cnVlICkgPyBNYXRoLlBJIDogMTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxpZ2h0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsaWdodCA9IGxpZ2h0c1sgaSBdO1xuXG5cdFx0XHRjb25zdCBjb2xvciA9IGxpZ2h0LmNvbG9yO1xuXHRcdFx0Y29uc3QgaW50ZW5zaXR5ID0gbGlnaHQuaW50ZW5zaXR5O1xuXHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBsaWdodC5kaXN0YW5jZTtcblxuXHRcdFx0Y29uc3Qgc2hhZG93TWFwID0gKCBsaWdodC5zaGFkb3cgJiYgbGlnaHQuc2hhZG93Lm1hcCApID8gbGlnaHQuc2hhZG93Lm1hcC50ZXh0dXJlIDogbnVsbDtcblxuXHRcdFx0aWYgKCBsaWdodC5pc0FtYmllbnRMaWdodCApIHtcblxuXHRcdFx0XHRyICs9IGNvbG9yLnIgKiBpbnRlbnNpdHkgKiBzY2FsZUZhY3Rvcjtcblx0XHRcdFx0ZyArPSBjb2xvci5nICogaW50ZW5zaXR5ICogc2NhbGVGYWN0b3I7XG5cdFx0XHRcdGIgKz0gY29sb3IuYiAqIGludGVuc2l0eSAqIHNjYWxlRmFjdG9yO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0xpZ2h0UHJvYmUgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgOTsgaiArKyApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnByb2JlWyBqIF0uYWRkU2NhbGVkVmVjdG9yKCBsaWdodC5zaC5jb2VmZmljaWVudHNbIGogXSwgaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0RpcmVjdGlvbmFsTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggbGlnaHQuaW50ZW5zaXR5ICogc2NhbGVGYWN0b3IgKTtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dOb3JtYWxCaWFzID0gc2hhZG93Lm5vcm1hbEJpYXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1cztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dNYXBTaXplID0gc2hhZG93Lm1hcFNpemU7XG5cblx0XHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd1sgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHNoYWRvd1VuaWZvcm1zO1xuXHRcdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwWyBkaXJlY3Rpb25hbExlbmd0aCBdID0gc2hhZG93TWFwO1xuXHRcdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBkaXJlY3Rpb25hbExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0XHRcdG51bURpcmVjdGlvbmFsU2hhZG93cyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRkaXJlY3Rpb25hbExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNTcG90TGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSAqIHNjYWxlRmFjdG9yICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29uZUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wZW51bWJyYUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSAqICggMSAtIGxpZ2h0LnBlbnVtYnJhICkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dOb3JtYWxCaWFzID0gc2hhZG93Lm5vcm1hbEJpYXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1cztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dNYXBTaXplID0gc2hhZG93Lm1hcFNpemU7XG5cblx0XHRcdFx0XHRzdGF0ZS5zcG90U2hhZG93WyBzcG90TGVuZ3RoIF0gPSBzaGFkb3dVbmlmb3Jtcztcblx0XHRcdFx0XHRzdGF0ZS5zcG90U2hhZG93TWFwWyBzcG90TGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hdHJpeFsgc3BvdExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0XHRcdG51bVNwb3RTaGFkb3dzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5zcG90WyBzcG90TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRzcG90TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1JlY3RBcmVhTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0Ly8gKGEpIGludGVuc2l0eSBpcyB0aGUgdG90YWwgdmlzaWJsZSBsaWdodCBlbWl0dGVkXG5cdFx0XHRcdC8vdW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5IC8gKCBsaWdodC53aWR0aCAqIGxpZ2h0LmhlaWdodCAqIE1hdGguUEkgKSApO1xuXG5cdFx0XHRcdC8vIChiKSBpbnRlbnNpdHkgaXMgdGhlIGJyaWdodG5lc3Mgb2YgdGhlIGxpZ2h0XG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZXaWR0aC5zZXQoIGxpZ2h0LndpZHRoICogMC41LCAwLjAsIDAuMCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LnNldCggMC4wLCBsaWdodC5oZWlnaHQgKiAwLjUsIDAuMCApO1xuXG5cdFx0XHRcdHN0YXRlLnJlY3RBcmVhWyByZWN0QXJlYUxlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0cmVjdEFyZWFMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzUG9pbnRMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKiBzY2FsZUZhY3RvciApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9IGxpZ2h0LmRlY2F5O1xuXG5cdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdGNvbnN0IHNoYWRvd1VuaWZvcm1zID0gc2hhZG93Q2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dDYW1lcmFOZWFyID0gc2hhZG93LmNhbWVyYS5uZWFyO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0NhbWVyYUZhciA9IHNoYWRvdy5jYW1lcmEuZmFyO1xuXG5cdFx0XHRcdFx0c3RhdGUucG9pbnRTaGFkb3dbIHBvaW50TGVuZ3RoIF0gPSBzaGFkb3dVbmlmb3Jtcztcblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcFsgcG9pbnRMZW5ndGggXSA9IHNoYWRvd01hcDtcblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hdHJpeFsgcG9pbnRMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XG5cblx0XHRcdFx0XHRudW1Qb2ludFNoYWRvd3MgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLnBvaW50WyBwb2ludExlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0cG9pbnRMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzSGVtaXNwaGVyZUxpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNreUNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSAqIHNjYWxlRmFjdG9yICk7XG5cdFx0XHRcdHVuaWZvcm1zLmdyb3VuZENvbG9yLmNvcHkoIGxpZ2h0Lmdyb3VuZENvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSAqIHNjYWxlRmFjdG9yICk7XG5cblx0XHRcdFx0c3RhdGUuaGVtaVsgaGVtaUxlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0aGVtaUxlbmd0aCArKztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCByZWN0QXJlYUxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRcdC8vIFdlYkdMIDJcblxuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzEgPSBVbmlmb3Jtc0xpYi5MVENfRkxPQVRfMTtcblx0XHRcdFx0c3RhdGUucmVjdEFyZWFMVEMyID0gVW5pZm9ybXNMaWIuTFRDX0ZMT0FUXzI7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gV2ViR0wgMVxuXG5cdFx0XHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzEgPSBVbmlmb3Jtc0xpYi5MVENfRkxPQVRfMTtcblx0XHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfRkxPQVRfMjtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBleHRlbnNpb25zLmhhcyggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0c3RhdGUucmVjdEFyZWFMVEMxID0gVW5pZm9ybXNMaWIuTFRDX0hBTEZfMTtcblx0XHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfSEFMRl8yO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVW5hYmxlIHRvIHVzZSBSZWN0QXJlYUxpZ2h0LiBNaXNzaW5nIFdlYkdMIGV4dGVuc2lvbnMuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYW1iaWVudFsgMCBdID0gcjtcblx0XHRzdGF0ZS5hbWJpZW50WyAxIF0gPSBnO1xuXHRcdHN0YXRlLmFtYmllbnRbIDIgXSA9IGI7XG5cblx0XHRjb25zdCBoYXNoID0gc3RhdGUuaGFzaDtcblxuXHRcdGlmICggaGFzaC5kaXJlY3Rpb25hbExlbmd0aCAhPT0gZGlyZWN0aW9uYWxMZW5ndGggfHxcblx0XHRcdGhhc2gucG9pbnRMZW5ndGggIT09IHBvaW50TGVuZ3RoIHx8XG5cdFx0XHRoYXNoLnNwb3RMZW5ndGggIT09IHNwb3RMZW5ndGggfHxcblx0XHRcdGhhc2gucmVjdEFyZWFMZW5ndGggIT09IHJlY3RBcmVhTGVuZ3RoIHx8XG5cdFx0XHRoYXNoLmhlbWlMZW5ndGggIT09IGhlbWlMZW5ndGggfHxcblx0XHRcdGhhc2gubnVtRGlyZWN0aW9uYWxTaGFkb3dzICE9PSBudW1EaXJlY3Rpb25hbFNoYWRvd3MgfHxcblx0XHRcdGhhc2gubnVtUG9pbnRTaGFkb3dzICE9PSBudW1Qb2ludFNoYWRvd3MgfHxcblx0XHRcdGhhc2gubnVtU3BvdFNoYWRvd3MgIT09IG51bVNwb3RTaGFkb3dzICkge1xuXG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbC5sZW5ndGggPSBkaXJlY3Rpb25hbExlbmd0aDtcblx0XHRcdHN0YXRlLnNwb3QubGVuZ3RoID0gc3BvdExlbmd0aDtcblx0XHRcdHN0YXRlLnJlY3RBcmVhLmxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoO1xuXHRcdFx0c3RhdGUucG9pbnQubGVuZ3RoID0gcG9pbnRMZW5ndGg7XG5cdFx0XHRzdGF0ZS5oZW1pLmxlbmd0aCA9IGhlbWlMZW5ndGg7XG5cblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwLmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdHN0YXRlLnBvaW50U2hhZG93Lmxlbmd0aCA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWFwLmxlbmd0aCA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdHN0YXRlLnNwb3RTaGFkb3cubGVuZ3RoID0gbnVtU3BvdFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5zcG90U2hhZG93TWFwLmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzO1xuXHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgubGVuZ3RoID0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzO1xuXHRcdFx0c3RhdGUucG9pbnRTaGFkb3dNYXRyaXgubGVuZ3RoID0gbnVtUG9pbnRTaGFkb3dzO1xuXHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hdHJpeC5sZW5ndGggPSBudW1TcG90U2hhZG93cztcblxuXHRcdFx0aGFzaC5kaXJlY3Rpb25hbExlbmd0aCA9IGRpcmVjdGlvbmFsTGVuZ3RoO1xuXHRcdFx0aGFzaC5wb2ludExlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdFx0aGFzaC5zcG90TGVuZ3RoID0gc3BvdExlbmd0aDtcblx0XHRcdGhhc2gucmVjdEFyZWFMZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcblx0XHRcdGhhc2guaGVtaUxlbmd0aCA9IGhlbWlMZW5ndGg7XG5cblx0XHRcdGhhc2gubnVtRGlyZWN0aW9uYWxTaGFkb3dzID0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzO1xuXHRcdFx0aGFzaC5udW1Qb2ludFNoYWRvd3MgPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRoYXNoLm51bVNwb3RTaGFkb3dzID0gbnVtU3BvdFNoYWRvd3M7XG5cblx0XHRcdHN0YXRlLnZlcnNpb24gPSBuZXh0VmVyc2lvbiArKztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBWaWV3KCBsaWdodHMsIGNhbWVyYSApIHtcblxuXHRcdGxldCBkaXJlY3Rpb25hbExlbmd0aCA9IDA7XG5cdFx0bGV0IHBvaW50TGVuZ3RoID0gMDtcblx0XHRsZXQgc3BvdExlbmd0aCA9IDA7XG5cdFx0bGV0IHJlY3RBcmVhTGVuZ3RoID0gMDtcblx0XHRsZXQgaGVtaUxlbmd0aCA9IDA7XG5cblx0XHRjb25zdCB2aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxpZ2h0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsaWdodCA9IGxpZ2h0c1sgaSBdO1xuXG5cdFx0XHRpZiAoIGxpZ2h0LmlzRGlyZWN0aW9uYWxMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IHN0YXRlLmRpcmVjdGlvbmFsWyBkaXJlY3Rpb25hbExlbmd0aCBdO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0ZGlyZWN0aW9uYWxMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzU3BvdExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUuc3BvdFsgc3BvdExlbmd0aCBdO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc3ViKCB2ZWN0b3IzICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHRzcG90TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1JlY3RBcmVhTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5yZWN0QXJlYVsgcmVjdEFyZWFMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdC8vIGV4dHJhY3QgbG9jYWwgcm90YXRpb24gb2YgbGlnaHQgdG8gZGVyaXZlIHdpZHRoL2hlaWdodCBoYWxmIHZlY3RvcnNcblx0XHRcdFx0bWF0cml4NDIuaWRlbnRpdHkoKTtcblx0XHRcdFx0bWF0cml4NC5jb3B5KCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHRtYXRyaXg0LnByZW11bHRpcGx5KCB2aWV3TWF0cml4ICk7XG5cdFx0XHRcdG1hdHJpeDQyLmV4dHJhY3RSb3RhdGlvbiggbWF0cml4NCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZXaWR0aC5zZXQoIGxpZ2h0LndpZHRoICogMC41LCAwLjAsIDAuMCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LnNldCggMC4wLCBsaWdodC5oZWlnaHQgKiAwLjUsIDAuMCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZXaWR0aC5hcHBseU1hdHJpeDQoIG1hdHJpeDQyICk7XG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApO1xuXG5cdFx0XHRcdHJlY3RBcmVhTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1BvaW50TGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5wb2ludFsgcG9pbnRMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHBvaW50TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0hlbWlzcGhlcmVMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IHN0YXRlLmhlbWlbIGhlbWlMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRoZW1pTGVuZ3RoICsrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0c2V0dXA6IHNldHVwLFxuXHRcdHNldHVwVmlldzogc2V0dXBWaWV3LFxuXHRcdHN0YXRlOiBzdGF0ZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRjb25zdCBsaWdodHMgPSBuZXcgV2ViR0xMaWdodHMoIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApO1xuXG5cdGNvbnN0IGxpZ2h0c0FycmF5ID0gW107XG5cdGNvbnN0IHNoYWRvd3NBcnJheSA9IFtdO1xuXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cblx0XHRsaWdodHNBcnJheS5sZW5ndGggPSAwO1xuXHRcdHNoYWRvd3NBcnJheS5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoTGlnaHQoIGxpZ2h0ICkge1xuXG5cdFx0bGlnaHRzQXJyYXkucHVzaCggbGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFNoYWRvdyggc2hhZG93TGlnaHQgKSB7XG5cblx0XHRzaGFkb3dzQXJyYXkucHVzaCggc2hhZG93TGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBMaWdodHMoIHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzICkge1xuXG5cdFx0bGlnaHRzLnNldHVwKCBsaWdodHNBcnJheSwgcGh5c2ljYWxseUNvcnJlY3RMaWdodHMgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBMaWdodHNWaWV3KCBjYW1lcmEgKSB7XG5cblx0XHRsaWdodHMuc2V0dXBWaWV3KCBsaWdodHNBcnJheSwgY2FtZXJhICk7XG5cblx0fVxuXG5cdGNvbnN0IHN0YXRlID0ge1xuXHRcdGxpZ2h0c0FycmF5OiBsaWdodHNBcnJheSxcblx0XHRzaGFkb3dzQXJyYXk6IHNoYWRvd3NBcnJheSxcblxuXHRcdGxpZ2h0czogbGlnaHRzXG5cdH07XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0LFxuXHRcdHN0YXRlOiBzdGF0ZSxcblx0XHRzZXR1cExpZ2h0czogc2V0dXBMaWdodHMsXG5cdFx0c2V0dXBMaWdodHNWaWV3OiBzZXR1cExpZ2h0c1ZpZXcsXG5cblx0XHRwdXNoTGlnaHQ6IHB1c2hMaWdodCxcblx0XHRwdXNoU2hhZG93OiBwdXNoU2hhZG93XG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZXMoIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRsZXQgcmVuZGVyU3RhdGVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggPSAwICkge1xuXG5cdFx0bGV0IHJlbmRlclN0YXRlO1xuXG5cdFx0aWYgKCByZW5kZXJTdGF0ZXMuaGFzKCBzY2VuZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0cmVuZGVyU3RhdGUgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZSggZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICk7XG5cdFx0XHRyZW5kZXJTdGF0ZXMuc2V0KCBzY2VuZSwgWyByZW5kZXJTdGF0ZSBdICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIHJlbmRlckNhbGxEZXB0aCA+PSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSApLmxlbmd0aCApIHtcblxuXHRcdFx0XHRyZW5kZXJTdGF0ZSA9IG5ldyBXZWJHTFJlbmRlclN0YXRlKCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRcdFx0cmVuZGVyU3RhdGVzLmdldCggc2NlbmUgKS5wdXNoKCByZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUgKVsgcmVuZGVyQ2FsbERlcHRoIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiByZW5kZXJTdGF0ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHJlbmRlclN0YXRlcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmNsYXNzIE1lc2hEZXB0aE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoRGVwdGhNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmRlcHRoUGFja2luZyA9IEJhc2ljRGVwdGhQYWNraW5nO1xuXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdFx0dGhpcy5mb2cgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5kZXB0aFBhY2tpbmcgPSBzb3VyY2UuZGVwdGhQYWNraW5nO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoRGVwdGhNYXRlcmlhbCA9IHRydWU7XG5cbmNsYXNzIE1lc2hEaXN0YW5jZU1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoRGlzdGFuY2VNYXRlcmlhbCc7XG5cblx0XHR0aGlzLnJlZmVyZW5jZVBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR0aGlzLm5lYXJEaXN0YW5jZSA9IDE7XG5cdFx0dGhpcy5mYXJEaXN0YW5jZSA9IDEwMDA7XG5cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdFx0dGhpcy5mb2cgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5yZWZlcmVuY2VQb3NpdGlvbi5jb3B5KCBzb3VyY2UucmVmZXJlbmNlUG9zaXRpb24gKTtcblx0XHR0aGlzLm5lYXJEaXN0YW5jZSA9IHNvdXJjZS5uZWFyRGlzdGFuY2U7XG5cdFx0dGhpcy5mYXJEaXN0YW5jZSA9IHNvdXJjZS5mYXJEaXN0YW5jZTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCA9IHRydWU7XG5cbmNvbnN0IHZlcnRleCA9IFwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQgPSBcInVuaWZvcm0gc2FtcGxlcjJEIHNoYWRvd19wYXNzO1xcbnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uO1xcbnVuaWZvcm0gZmxvYXQgcmFkaXVzO1xcbiNpbmNsdWRlIDxwYWNraW5nPlxcbnZvaWQgbWFpbigpIHtcXG5cXHRjb25zdCBmbG9hdCBzYW1wbGVzID0gZmxvYXQoIFZTTV9TQU1QTEVTICk7XFxuXFx0ZmxvYXQgbWVhbiA9IDAuMDtcXG5cXHRmbG9hdCBzcXVhcmVkX21lYW4gPSAwLjA7XFxuXFx0ZmxvYXQgdXZTdHJpZGUgPSBzYW1wbGVzIDw9IDEuMCA/IDAuMCA6IDIuMCAvICggc2FtcGxlcyAtIDEuMCApO1xcblxcdGZsb2F0IHV2U3RhcnQgPSBzYW1wbGVzIDw9IDEuMCA/IDAuMCA6IC0gMS4wO1xcblxcdGZvciAoIGZsb2F0IGkgPSAwLjA7IGkgPCBzYW1wbGVzOyBpICsrICkge1xcblxcdFxcdGZsb2F0IHV2T2Zmc2V0ID0gdXZTdGFydCArIGkgKiB1dlN0cmlkZTtcXG5cXHRcXHQjaWZkZWYgSE9SSVpPTlRBTF9QQVNTXFxuXFx0XFx0XFx0dmVjMiBkaXN0cmlidXRpb24gPSB1bnBhY2tSR0JBVG8ySGFsZiggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCB1dk9mZnNldCwgMC4wICkgKiByYWRpdXMgKSAvIHJlc29sdXRpb24gKSApO1xcblxcdFxcdFxcdG1lYW4gKz0gZGlzdHJpYnV0aW9uLng7XFxuXFx0XFx0XFx0c3F1YXJlZF9tZWFuICs9IGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKyBkaXN0cmlidXRpb24ueCAqIGRpc3RyaWJ1dGlvbi54O1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0ZmxvYXQgZGVwdGggPSB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCAwLjAsIHV2T2Zmc2V0ICkgKiByYWRpdXMgKSAvIHJlc29sdXRpb24gKSApO1xcblxcdFxcdFxcdG1lYW4gKz0gZGVwdGg7XFxuXFx0XFx0XFx0c3F1YXJlZF9tZWFuICs9IGRlcHRoICogZGVwdGg7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdG1lYW4gPSBtZWFuIC8gc2FtcGxlcztcXG5cXHRzcXVhcmVkX21lYW4gPSBzcXVhcmVkX21lYW4gLyBzYW1wbGVzO1xcblxcdGZsb2F0IHN0ZF9kZXYgPSBzcXJ0KCBzcXVhcmVkX21lYW4gLSBtZWFuICogbWVhbiApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHBhY2sySGFsZlRvUkdCQSggdmVjMiggbWVhbiwgc3RkX2RldiApICk7XFxufVwiO1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRvd01hcCggX3JlbmRlcmVyLCBfb2JqZWN0cywgX2NhcGFiaWxpdGllcyApIHtcblxuXHRsZXQgX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpO1xuXG5cdGNvbnN0IF9zaGFkb3dNYXBTaXplID0gbmV3IFZlY3RvcjIoKSxcblx0XHRfdmlld3BvcnRTaXplID0gbmV3IFZlY3RvcjIoKSxcblxuXHRcdF92aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCksXG5cblx0XHRfZGVwdGhNYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCggeyBkZXB0aFBhY2tpbmc6IFJHQkFEZXB0aFBhY2tpbmcgfSApLFxuXHRcdF9kaXN0YW5jZU1hdGVyaWFsID0gbmV3IE1lc2hEaXN0YW5jZU1hdGVyaWFsKCksXG5cblx0XHRfbWF0ZXJpYWxDYWNoZSA9IHt9LFxuXG5cdFx0X21heFRleHR1cmVTaXplID0gX2NhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZTtcblxuXHRjb25zdCBzaGFkb3dTaWRlID0geyAwOiBCYWNrU2lkZSwgMTogRnJvbnRTaWRlLCAyOiBEb3VibGVTaWRlIH07XG5cblx0Y29uc3Qgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdGRlZmluZXM6IHtcblx0XHRcdFZTTV9TQU1QTEVTOiA4XG5cdFx0fSxcblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0c2hhZG93X3Bhc3M6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHJlc29sdXRpb246IHsgdmFsdWU6IG5ldyBWZWN0b3IyKCkgfSxcblx0XHRcdHJhZGl1czogeyB2YWx1ZTogNC4wIH1cblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiB2ZXJ0ZXgsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IGZyYWdtZW50XG5cblx0fSApO1xuXG5cdGNvbnN0IHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbCA9IHNoYWRvd01hdGVyaWFsVmVydGljYWwuY2xvbmUoKTtcblx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLmRlZmluZXMuSE9SSVpPTlRBTF9QQVNTID0gMTtcblxuXHRjb25zdCBmdWxsU2NyZWVuVHJpID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGZ1bGxTY3JlZW5Ucmkuc2V0QXR0cmlidXRlKFxuXHRcdCdwb3NpdGlvbicsXG5cdFx0bmV3IEJ1ZmZlckF0dHJpYnV0ZShcblx0XHRcdG5ldyBGbG9hdDMyQXJyYXkoIFsgLSAxLCAtIDEsIDAuNSwgMywgLSAxLCAwLjUsIC0gMSwgMywgMC41IF0gKSxcblx0XHRcdDNcblx0XHQpXG5cdCk7XG5cblx0Y29uc3QgZnVsbFNjcmVlbk1lc2ggPSBuZXcgTWVzaCggZnVsbFNjcmVlblRyaSwgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCApO1xuXG5cdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlO1xuXHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy50eXBlID0gUENGU2hhZG93TWFwO1xuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBsaWdodHMsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXHRcdGlmICggc2NvcGUuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgJiYgc2NvcGUubmVlZHNVcGRhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0aWYgKCBsaWdodHMubGVuZ3RoID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IF9yZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblx0XHRjb25zdCBhY3RpdmVDdWJlRmFjZSA9IF9yZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpO1xuXHRcdGNvbnN0IGFjdGl2ZU1pcG1hcExldmVsID0gX3JlbmRlcmVyLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7XG5cblx0XHRjb25zdCBfc3RhdGUgPSBfcmVuZGVyZXIuc3RhdGU7XG5cblx0XHQvLyBTZXQgR0wgc3RhdGUgZm9yIGRlcHRoIG1hcC5cblx0XHRfc3RhdGUuc2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKTtcblx0XHRfc3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhciggMSwgMSwgMSwgMSApO1xuXHRcdF9zdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTtcblx0XHRfc3RhdGUuc2V0U2Npc3NvclRlc3QoIGZhbHNlICk7XG5cblx0XHQvLyByZW5kZXIgZGVwdGggbWFwXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsaWdodCA9IGxpZ2h0c1sgaSBdO1xuXHRcdFx0Y29uc3Qgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRpZiAoIHNoYWRvdyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZG93TWFwOicsIGxpZ2h0LCAnaGFzIG5vIHNoYWRvdy4nICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93LmF1dG9VcGRhdGUgPT09IGZhbHNlICYmIHNoYWRvdy5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSBjb250aW51ZTtcblxuXHRcdFx0X3NoYWRvd01hcFNpemUuY29weSggc2hhZG93Lm1hcFNpemUgKTtcblxuXHRcdFx0Y29uc3Qgc2hhZG93RnJhbWVFeHRlbnRzID0gc2hhZG93LmdldEZyYW1lRXh0ZW50cygpO1xuXG5cdFx0XHRfc2hhZG93TWFwU2l6ZS5tdWx0aXBseSggc2hhZG93RnJhbWVFeHRlbnRzICk7XG5cblx0XHRcdF92aWV3cG9ydFNpemUuY29weSggc2hhZG93Lm1hcFNpemUgKTtcblxuXHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS54ID4gX21heFRleHR1cmVTaXplIHx8IF9zaGFkb3dNYXBTaXplLnkgPiBfbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS54ID4gX21heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS54ID0gTWF0aC5mbG9vciggX21heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnggKTtcblx0XHRcdFx0XHRfc2hhZG93TWFwU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54ICogc2hhZG93RnJhbWVFeHRlbnRzLng7XG5cdFx0XHRcdFx0c2hhZG93Lm1hcFNpemUueCA9IF92aWV3cG9ydFNpemUueDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS55ID4gX21heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ID0gTWF0aC5mbG9vciggX21heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnkgKTtcblx0XHRcdFx0XHRfc2hhZG93TWFwU2l6ZS55ID0gX3ZpZXdwb3J0U2l6ZS55ICogc2hhZG93RnJhbWVFeHRlbnRzLnk7XG5cdFx0XHRcdFx0c2hhZG93Lm1hcFNpemUueSA9IF92aWV3cG9ydFNpemUueTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzaGFkb3cubWFwID09PSBudWxsICYmICEgc2hhZG93LmlzUG9pbnRMaWdodFNoYWRvdyAmJiB0aGlzLnR5cGUgPT09IFZTTVNoYWRvd01hcCApIHtcblxuXHRcdFx0XHRzaGFkb3cubWFwID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBfc2hhZG93TWFwU2l6ZS54LCBfc2hhZG93TWFwU2l6ZS55ICk7XG5cdFx0XHRcdHNoYWRvdy5tYXAudGV4dHVyZS5uYW1lID0gbGlnaHQubmFtZSArICcuc2hhZG93TWFwJztcblxuXHRcdFx0XHRzaGFkb3cubWFwUGFzcyA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSApO1xuXG5cdFx0XHRcdHNoYWRvdy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93Lm1hcCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBwYXJzID0geyBtaW5GaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsIG1hZ0ZpbHRlcjogTmVhcmVzdEZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07XG5cblx0XHRcdFx0c2hhZG93Lm1hcCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyApO1xuXHRcdFx0XHRzaGFkb3cubWFwLnRleHR1cmUubmFtZSA9IGxpZ2h0Lm5hbWUgKyAnLnNoYWRvd01hcCc7XG5cblx0XHRcdFx0c2hhZG93LmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcCApO1xuXHRcdFx0X3JlbmRlcmVyLmNsZWFyKCk7XG5cblx0XHRcdGNvbnN0IHZpZXdwb3J0Q291bnQgPSBzaGFkb3cuZ2V0Vmlld3BvcnRDb3VudCgpO1xuXG5cdFx0XHRmb3IgKCBsZXQgdnAgPSAwOyB2cCA8IHZpZXdwb3J0Q291bnQ7IHZwICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdwb3J0ID0gc2hhZG93LmdldFZpZXdwb3J0KCB2cCApO1xuXG5cdFx0XHRcdF92aWV3cG9ydC5zZXQoXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS54ICogdmlld3BvcnQueCxcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnkgKiB2aWV3cG9ydC55LFxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueCAqIHZpZXdwb3J0LnosXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ICogdmlld3BvcnQud1xuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdF9zdGF0ZS52aWV3cG9ydCggX3ZpZXdwb3J0ICk7XG5cblx0XHRcdFx0c2hhZG93LnVwZGF0ZU1hdHJpY2VzKCBsaWdodCwgdnAgKTtcblxuXHRcdFx0XHRfZnJ1c3R1bSA9IHNoYWRvdy5nZXRGcnVzdHVtKCk7XG5cblx0XHRcdFx0cmVuZGVyT2JqZWN0KCBzY2VuZSwgY2FtZXJhLCBzaGFkb3cuY2FtZXJhLCBsaWdodCwgdGhpcy50eXBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZG8gYmx1ciBwYXNzIGZvciBWU01cblxuXHRcdFx0aWYgKCAhIHNoYWRvdy5pc1BvaW50TGlnaHRTaGFkb3cgJiYgdGhpcy50eXBlID09PSBWU01TaGFkb3dNYXAgKSB7XG5cblx0XHRcdFx0VlNNUGFzcyggc2hhZG93LCBjYW1lcmEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzaGFkb3cubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRfcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0LCBhY3RpdmVDdWJlRmFjZSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcblxuXHR9O1xuXG5cdGZ1bmN0aW9uIFZTTVBhc3MoIHNoYWRvdywgY2FtZXJhICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBfb2JqZWN0cy51cGRhdGUoIGZ1bGxTY3JlZW5NZXNoICk7XG5cblx0XHRpZiAoIHNoYWRvd01hdGVyaWFsVmVydGljYWwuZGVmaW5lcy5WU01fU0FNUExFUyAhPT0gc2hhZG93LmJsdXJTYW1wbGVzICkge1xuXG5cdFx0XHRzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmRlZmluZXMuVlNNX1NBTVBMRVMgPSBzaGFkb3cuYmx1clNhbXBsZXM7XG5cdFx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwuZGVmaW5lcy5WU01fU0FNUExFUyA9IHNoYWRvdy5ibHVyU2FtcGxlcztcblxuXHRcdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdmVydGljYWwgcGFzc1xuXG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5zaGFkb3dfcGFzcy52YWx1ZSA9IHNoYWRvdy5tYXAudGV4dHVyZTtcblx0XHRzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLnVuaWZvcm1zLnJlc29sdXRpb24udmFsdWUgPSBzaGFkb3cubWFwU2l6ZTtcblx0XHRzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLnVuaWZvcm1zLnJhZGl1cy52YWx1ZSA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcFBhc3MgKTtcblx0XHRfcmVuZGVyZXIuY2xlYXIoKTtcblx0XHRfcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLCBmdWxsU2NyZWVuTWVzaCwgbnVsbCApO1xuXG5cdFx0Ly8gaG9yaXpvbnRhbCBwYXNzXG5cblx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwudW5pZm9ybXMuc2hhZG93X3Bhc3MudmFsdWUgPSBzaGFkb3cubWFwUGFzcy50ZXh0dXJlO1xuXHRcdHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbC51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlID0gc2hhZG93Lm1hcFNpemU7XG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLnVuaWZvcm1zLnJhZGl1cy52YWx1ZSA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcCApO1xuXHRcdF9yZW5kZXJlci5jbGVhcigpO1xuXHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbCwgZnVsbFNjcmVlbk1lc2gsIG51bGwgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBtYXRlcmlhbCwgbGlnaHQsIHNoYWRvd0NhbWVyYU5lYXIsIHNoYWRvd0NhbWVyYUZhciwgdHlwZSApIHtcblxuXHRcdGxldCByZXN1bHQgPSBudWxsO1xuXG5cdFx0Y29uc3QgY3VzdG9tTWF0ZXJpYWwgPSAoIGxpZ2h0LmlzUG9pbnRMaWdodCA9PT0gdHJ1ZSApID8gb2JqZWN0LmN1c3RvbURpc3RhbmNlTWF0ZXJpYWwgOiBvYmplY3QuY3VzdG9tRGVwdGhNYXRlcmlhbDtcblxuXHRcdGlmICggY3VzdG9tTWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmVzdWx0ID0gY3VzdG9tTWF0ZXJpYWw7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXN1bHQgPSAoIGxpZ2h0LmlzUG9pbnRMaWdodCA9PT0gdHJ1ZSApID8gX2Rpc3RhbmNlTWF0ZXJpYWwgOiBfZGVwdGhNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdGlmICggKCBfcmVuZGVyZXIubG9jYWxDbGlwcGluZ0VuYWJsZWQgJiYgbWF0ZXJpYWwuY2xpcFNoYWRvd3MgPT09IHRydWUgJiYgbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMubGVuZ3RoICE9PSAwICkgfHxcblx0XHRcdCggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICYmIG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlICE9PSAwICkgfHxcblx0XHRcdCggbWF0ZXJpYWwuYWxwaGFNYXAgJiYgbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApICkge1xuXG5cdFx0XHQvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCBhIHVuaXF1ZSBtYXRlcmlhbCBpbnN0YW5jZSByZWZsZWN0aW5nIHRoZVxuXHRcdFx0Ly8gYXBwcm9wcmlhdGUgc3RhdGVcblxuXHRcdFx0Y29uc3Qga2V5QSA9IHJlc3VsdC51dWlkLCBrZXlCID0gbWF0ZXJpYWwudXVpZDtcblxuXHRcdFx0bGV0IG1hdGVyaWFsc0ZvclZhcmlhbnQgPSBfbWF0ZXJpYWxDYWNoZVsga2V5QSBdO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsc0ZvclZhcmlhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50ID0ge307XG5cdFx0XHRcdF9tYXRlcmlhbENhY2hlWyBrZXlBIF0gPSBtYXRlcmlhbHNGb3JWYXJpYW50O1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCBjYWNoZWRNYXRlcmlhbCA9IG1hdGVyaWFsc0ZvclZhcmlhbnRbIGtleUIgXTtcblxuXHRcdFx0aWYgKCBjYWNoZWRNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNhY2hlZE1hdGVyaWFsID0gcmVzdWx0LmNsb25lKCk7XG5cdFx0XHRcdG1hdGVyaWFsc0ZvclZhcmlhbnRbIGtleUIgXSA9IGNhY2hlZE1hdGVyaWFsO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJlc3VsdCA9IGNhY2hlZE1hdGVyaWFsO1xuXG5cdFx0fVxuXG5cdFx0cmVzdWx0LnZpc2libGUgPSBtYXRlcmlhbC52aXNpYmxlO1xuXHRcdHJlc3VsdC53aXJlZnJhbWUgPSBtYXRlcmlhbC53aXJlZnJhbWU7XG5cblx0XHRpZiAoIHR5cGUgPT09IFZTTVNoYWRvd01hcCApIHtcblxuXHRcdFx0cmVzdWx0LnNpZGUgPSAoIG1hdGVyaWFsLnNoYWRvd1NpZGUgIT09IG51bGwgKSA/IG1hdGVyaWFsLnNoYWRvd1NpZGUgOiBtYXRlcmlhbC5zaWRlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVzdWx0LnNpZGUgPSAoIG1hdGVyaWFsLnNoYWRvd1NpZGUgIT09IG51bGwgKSA/IG1hdGVyaWFsLnNoYWRvd1NpZGUgOiBzaGFkb3dTaWRlWyBtYXRlcmlhbC5zaWRlIF07XG5cblx0XHR9XG5cblx0XHRyZXN1bHQuYWxwaGFNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblx0XHRyZXN1bHQuYWxwaGFUZXN0ID0gbWF0ZXJpYWwuYWxwaGFUZXN0O1xuXG5cdFx0cmVzdWx0LmNsaXBTaGFkb3dzID0gbWF0ZXJpYWwuY2xpcFNoYWRvd3M7XG5cdFx0cmVzdWx0LmNsaXBwaW5nUGxhbmVzID0gbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXM7XG5cdFx0cmVzdWx0LmNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uO1xuXG5cdFx0cmVzdWx0LmRpc3BsYWNlbWVudE1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRyZXN1bHQuZGlzcGxhY2VtZW50U2NhbGUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRyZXN1bHQuZGlzcGxhY2VtZW50QmlhcyA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHRyZXN1bHQud2lyZWZyYW1lTGluZXdpZHRoID0gbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdHJlc3VsdC5saW5ld2lkdGggPSBtYXRlcmlhbC5saW5ld2lkdGg7XG5cblx0XHRpZiAoIGxpZ2h0LmlzUG9pbnRMaWdodCA9PT0gdHJ1ZSAmJiByZXN1bHQuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0cmVzdWx0LnJlZmVyZW5jZVBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdHJlc3VsdC5uZWFyRGlzdGFuY2UgPSBzaGFkb3dDYW1lcmFOZWFyO1xuXHRcdFx0cmVzdWx0LmZhckRpc3RhbmNlID0gc2hhZG93Q2FtZXJhRmFyO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBsaWdodCwgdHlwZSApIHtcblxuXHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgdmlzaWJsZSA9IG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApO1xuXG5cdFx0aWYgKCB2aXNpYmxlICYmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApICkge1xuXG5cdFx0XHRpZiAoICggb2JqZWN0LmNhc3RTaGFkb3cgfHwgKCBvYmplY3QucmVjZWl2ZVNoYWRvdyAmJiB0eXBlID09PSBWU01TaGFkb3dNYXAgKSApICYmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSApICkge1xuXG5cdFx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0Y29uc3QgZ2VvbWV0cnkgPSBfb2JqZWN0cy51cGRhdGUoIG9iamVjdCApO1xuXHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgayA9IDAsIGtsID0gZ3JvdXBzLmxlbmd0aDsgayA8IGtsOyBrICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgayBdO1xuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGlmICggZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgZGVwdGhNYXRlcmlhbCA9IGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgZ3JvdXBNYXRlcmlhbCwgbGlnaHQsIHNoYWRvd0NhbWVyYS5uZWFyLCBzaGFkb3dDYW1lcmEuZmFyLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0X3JlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggc2hhZG93Q2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGRlcHRoTWF0ZXJpYWwgPSBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIG1hdGVyaWFsLCBsaWdodCwgc2hhZG93Q2FtZXJhLm5lYXIsIHNoYWRvd0NhbWVyYS5mYXIsIHR5cGUgKTtcblxuXHRcdFx0XHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIHNoYWRvd0NhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG9iamVjdCwgbnVsbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBsaWdodCwgdHlwZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBXZWJHTFN0YXRlKCBnbCwgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICkge1xuXG5cdGNvbnN0IGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdGZ1bmN0aW9uIENvbG9yQnVmZmVyKCkge1xuXG5cdFx0bGV0IGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgY29sb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHRcdGxldCBjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHRjb25zdCBjdXJyZW50Q29sb3JDbGVhciA9IG5ldyBWZWN0b3I0KCAwLCAwLCAwLCAwICk7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIGNvbG9yTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRDb2xvck1hc2sgIT09IGNvbG9yTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLmNvbG9yTWFzayggY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IGNvbG9yTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIHIsIGcsIGIsIGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHIgKj0gYTsgZyAqPSBhOyBiICo9IGE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbG9yLnNldCggciwgZywgYiwgYSApO1xuXG5cdFx0XHRcdGlmICggY3VycmVudENvbG9yQ2xlYXIuZXF1YWxzKCBjb2xvciApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyQ29sb3IoIHIsIGcsIGIsIGEgKTtcblx0XHRcdFx0XHRjdXJyZW50Q29sb3JDbGVhci5jb3B5KCBjb2xvciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudENvbG9yQ2xlYXIuc2V0KCAtIDEsIDAsIDAsIDAgKTsgLy8gc2V0IHRvIGludmFsaWQgc3RhdGVcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gRGVwdGhCdWZmZXIoKSB7XG5cblx0XHRsZXQgbG9ja2VkID0gZmFsc2U7XG5cblx0XHRsZXQgY3VycmVudERlcHRoTWFzayA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnREZXB0aEZ1bmMgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50RGVwdGhDbGVhciA9IG51bGw7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRUZXN0OiBmdW5jdGlvbiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0XHRcdGVuYWJsZSggMjkyOSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRkaXNhYmxlKCAyOTI5ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIGRlcHRoTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aE1hc2sgIT09IGRlcHRoTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLmRlcHRoTWFzayggZGVwdGhNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudERlcHRoTWFzayA9IGRlcHRoTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldEZ1bmM6IGZ1bmN0aW9uICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoRnVuYyAhPT0gZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIE5ldmVyRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxMiApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgQWx3YXlzRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxOSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTGVzc0RlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTMgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIExlc3NFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIEVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNCApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgR3JlYXRlckVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxOCApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgR3JlYXRlckRlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTYgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIE5vdEVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNyApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IGRlcHRoRnVuYztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIGRlcHRoICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoQ2xlYXIgIT09IGRlcHRoICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJEZXB0aCggZGVwdGggKTtcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IGRlcHRoO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50RGVwdGhNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gU3RlbmNpbEJ1ZmZlcigpIHtcblxuXHRcdGxldCBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdGxldCBjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRcdFx0ZW5hYmxlKCAyOTYwICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRkaXNhYmxlKCAyOTYwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxNYXNrICE9PSBzdGVuY2lsTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxNYXNrKCBzdGVuY2lsTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsTWFzayA9IHN0ZW5jaWxNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0RnVuYzogZnVuY3Rpb24gKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbEZ1bmMgIT09IHN0ZW5jaWxGdW5jIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxSZWYgIT09IHN0ZW5jaWxSZWYgfHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrICE9PSBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxGdW5jKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKTtcblxuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuYyA9IHN0ZW5jaWxGdW5jO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsUmVmID0gc3RlbmNpbFJlZjtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gc3RlbmNpbE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRPcDogZnVuY3Rpb24gKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbEZhaWwgIT09IHN0ZW5jaWxGYWlsIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxaRmFpbCAhPT0gc3RlbmNpbFpGYWlsIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxaUGFzcyAhPT0gc3RlbmNpbFpQYXNzICkge1xuXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbE9wKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKTtcblxuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsRmFpbCA9IHN0ZW5jaWxGYWlsO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsWkZhaWwgPSBzdGVuY2lsWkZhaWw7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IHN0ZW5jaWxaUGFzcztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIHN0ZW5jaWwgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbENsZWFyICE9PSBzdGVuY2lsICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJTdGVuY2lsKCBzdGVuY2lsICk7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxDbGVhciA9IHN0ZW5jaWw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsUmVmID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRmFpbCA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsWkZhaWwgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFpQYXNzID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxDbGVhciA9IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdC8vXG5cblx0Y29uc3QgY29sb3JCdWZmZXIgPSBuZXcgQ29sb3JCdWZmZXIoKTtcblx0Y29uc3QgZGVwdGhCdWZmZXIgPSBuZXcgRGVwdGhCdWZmZXIoKTtcblx0Y29uc3Qgc3RlbmNpbEJ1ZmZlciA9IG5ldyBTdGVuY2lsQnVmZmVyKCk7XG5cblx0bGV0IGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHRsZXQgY3VycmVudEJvdW5kRnJhbWVidWZmZXJzID0ge307XG5cdGxldCBjdXJyZW50RHJhd2J1ZmZlcnMgPSBuZXcgV2Vha01hcCgpO1xuXHRsZXQgZGVmYXVsdERyYXdidWZmZXJzID0gW107XG5cblx0bGV0IGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHRsZXQgY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXHRsZXQgY3VycmVudEJsZW5kaW5nID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdGxldCBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBmYWxzZTtcblxuXHRsZXQgY3VycmVudEZsaXBTaWRlZCA9IG51bGw7XG5cdGxldCBjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdGxldCBjdXJyZW50TGluZVdpZHRoID0gbnVsbDtcblxuXHRsZXQgY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBudWxsO1xuXHRsZXQgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IG51bGw7XG5cblx0Y29uc3QgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM1NjYxICk7XG5cblx0bGV0IGxpbmVXaWR0aEF2YWlsYWJsZSA9IGZhbHNlO1xuXHRsZXQgdmVyc2lvbiA9IDA7XG5cdGNvbnN0IGdsVmVyc2lvbiA9IGdsLmdldFBhcmFtZXRlciggNzkzOCApO1xuXG5cdGlmICggZ2xWZXJzaW9uLmluZGV4T2YoICdXZWJHTCcgKSAhPT0gLSAxICkge1xuXG5cdFx0dmVyc2lvbiA9IHBhcnNlRmxvYXQoIC9eV2ViR0wgKFxcZCkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTtcblx0XHRsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMS4wICk7XG5cblx0fSBlbHNlIGlmICggZ2xWZXJzaW9uLmluZGV4T2YoICdPcGVuR0wgRVMnICkgIT09IC0gMSApIHtcblxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXk9wZW5HTCBFUyAoXFxkKS8uZXhlYyggZ2xWZXJzaW9uIClbIDEgXSApO1xuXHRcdGxpbmVXaWR0aEF2YWlsYWJsZSA9ICggdmVyc2lvbiA+PSAyLjAgKTtcblxuXHR9XG5cblx0bGV0IGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdGxldCBjdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9O1xuXG5cdGNvbnN0IHNjaXNzb3JQYXJhbSA9IGdsLmdldFBhcmFtZXRlciggMzA4OCApO1xuXHRjb25zdCB2aWV3cG9ydFBhcmFtID0gZ2wuZ2V0UGFyYW1ldGVyKCAyOTc4ICk7XG5cblx0Y29uc3QgY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpLmZyb21BcnJheSggc2Npc3NvclBhcmFtICk7XG5cdGNvbnN0IGN1cnJlbnRWaWV3cG9ydCA9IG5ldyBWZWN0b3I0KCkuZnJvbUFycmF5KCB2aWV3cG9ydFBhcmFtICk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlVGV4dHVyZSggdHlwZSwgdGFyZ2V0LCBjb3VudCApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheSggNCApOyAvLyA0IGlzIHJlcXVpcmVkIHRvIG1hdGNoIGRlZmF1bHQgdW5wYWNrIGFsaWdubWVudCBvZiA0LlxuXHRcdGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRnbC5iaW5kVGV4dHVyZSggdHlwZSwgdGV4dHVyZSApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIDEwMjQxLCA5NzI4ICk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaSggdHlwZSwgMTAyNDAsIDk3MjggKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrICkge1xuXG5cdFx0XHRnbC50ZXhJbWFnZTJEKCB0YXJnZXQgKyBpLCAwLCA2NDA4LCAxLCAxLCAwLCA2NDA4LCA1MTIxLCBkYXRhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0Y29uc3QgZW1wdHlUZXh0dXJlcyA9IHt9O1xuXHRlbXB0eVRleHR1cmVzWyAzNTUzIF0gPSBjcmVhdGVUZXh0dXJlKCAzNTUzLCAzNTUzLCAxICk7XG5cdGVtcHR5VGV4dHVyZXNbIDM0MDY3IF0gPSBjcmVhdGVUZXh0dXJlKCAzNDA2NywgMzQwNjksIDYgKTtcblxuXHQvLyBpbml0XG5cblx0Y29sb3JCdWZmZXIuc2V0Q2xlYXIoIDAsIDAsIDAsIDEgKTtcblx0ZGVwdGhCdWZmZXIuc2V0Q2xlYXIoIDEgKTtcblx0c3RlbmNpbEJ1ZmZlci5zZXRDbGVhciggMCApO1xuXG5cdGVuYWJsZSggMjkyOSApO1xuXHRkZXB0aEJ1ZmZlci5zZXRGdW5jKCBMZXNzRXF1YWxEZXB0aCApO1xuXG5cdHNldEZsaXBTaWRlZCggZmFsc2UgKTtcblx0c2V0Q3VsbEZhY2UoIEN1bGxGYWNlQmFjayApO1xuXHRlbmFibGUoIDI4ODQgKTtcblxuXHRzZXRCbGVuZGluZyggTm9CbGVuZGluZyApO1xuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZW5hYmxlKCBpZCApIHtcblxuXHRcdGlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0Z2wuZW5hYmxlKCBpZCApO1xuXHRcdFx0ZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc2FibGUoIGlkICkge1xuXG5cdFx0aWYgKCBlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdICE9PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuZGlzYWJsZSggaWQgKTtcblx0XHRcdGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gPSBmYWxzZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYmluZEZyYW1lYnVmZmVyKCB0YXJnZXQsIGZyYW1lYnVmZmVyICkge1xuXG5cdFx0aWYgKCBjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIHRhcmdldCBdICE9PSBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKCB0YXJnZXQsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgdGFyZ2V0IF0gPSBmcmFtZWJ1ZmZlcjtcblxuXHRcdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0XHQvLyAzNjAwOSBpcyBlcXVpdmFsZW50IHRvIDM2MTYwXG5cblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IDM2MDA5ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudEJvdW5kRnJhbWVidWZmZXJzWyAzNjE2MCBdID0gZnJhbWVidWZmZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSAzNjE2MCApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgMzYwMDkgXSA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZHJhd0J1ZmZlcnMoIHJlbmRlclRhcmdldCwgZnJhbWVidWZmZXIgKSB7XG5cblx0XHRsZXQgZHJhd0J1ZmZlcnMgPSBkZWZhdWx0RHJhd2J1ZmZlcnM7XG5cblx0XHRsZXQgbmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRkcmF3QnVmZmVycyA9IGN1cnJlbnREcmF3YnVmZmVycy5nZXQoIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdGlmICggZHJhd0J1ZmZlcnMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRkcmF3QnVmZmVycyA9IFtdO1xuXHRcdFx0XHRjdXJyZW50RHJhd2J1ZmZlcnMuc2V0KCBmcmFtZWJ1ZmZlciwgZHJhd0J1ZmZlcnMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCBkcmF3QnVmZmVycy5sZW5ndGggIT09IHRleHR1cmVzLmxlbmd0aCB8fCBkcmF3QnVmZmVyc1sgMCBdICE9PSAzNjA2NCApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0ZHJhd0J1ZmZlcnNbIGkgXSA9IDM2MDY0ICsgaTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGRyYXdCdWZmZXJzLmxlbmd0aCA9IHRleHR1cmVzLmxlbmd0aDtcblxuXHRcdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBkcmF3QnVmZmVyc1sgMCBdICE9PSAzNjA2NCApIHtcblxuXHRcdFx0XHRcdGRyYXdCdWZmZXJzWyAwIF0gPSAzNjA2NDtcblxuXHRcdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggZHJhd0J1ZmZlcnNbIDAgXSAhPT0gMTAyOSApIHtcblxuXHRcdFx0XHRkcmF3QnVmZmVyc1sgMCBdID0gMTAyOTtcblxuXHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRcdGdsLmRyYXdCdWZmZXJzKCBkcmF3QnVmZmVycyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfZHJhd19idWZmZXJzJyApLmRyYXdCdWZmZXJzV0VCR0woIGRyYXdCdWZmZXJzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdH1cblxuXHRmdW5jdGlvbiB1c2VQcm9ncmFtKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCBjdXJyZW50UHJvZ3JhbSAhPT0gcHJvZ3JhbSApIHtcblxuXHRcdFx0Z2wudXNlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdFx0XHRjdXJyZW50UHJvZ3JhbSA9IHByb2dyYW07XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRjb25zdCBlcXVhdGlvblRvR0wgPSB7XG5cdFx0WyBBZGRFcXVhdGlvbiBdOiAzMjc3NCxcblx0XHRbIFN1YnRyYWN0RXF1YXRpb24gXTogMzI3NzgsXG5cdFx0WyBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiBdOiAzMjc3OVxuXHR9O1xuXG5cdGlmICggaXNXZWJHTDIgKSB7XG5cblx0XHRlcXVhdGlvblRvR0xbIE1pbkVxdWF0aW9uIF0gPSAzMjc3NTtcblx0XHRlcXVhdGlvblRvR0xbIE1heEVxdWF0aW9uIF0gPSAzMjc3NjtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfYmxlbmRfbWlubWF4JyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdGVxdWF0aW9uVG9HTFsgTWluRXF1YXRpb24gXSA9IGV4dGVuc2lvbi5NSU5fRVhUO1xuXHRcdFx0ZXF1YXRpb25Ub0dMWyBNYXhFcXVhdGlvbiBdID0gZXh0ZW5zaW9uLk1BWF9FWFQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvbnN0IGZhY3RvclRvR0wgPSB7XG5cdFx0WyBaZXJvRmFjdG9yIF06IDAsXG5cdFx0WyBPbmVGYWN0b3IgXTogMSxcblx0XHRbIFNyY0NvbG9yRmFjdG9yIF06IDc2OCxcblx0XHRbIFNyY0FscGhhRmFjdG9yIF06IDc3MCxcblx0XHRbIFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgXTogNzc2LFxuXHRcdFsgRHN0Q29sb3JGYWN0b3IgXTogNzc0LFxuXHRcdFsgRHN0QWxwaGFGYWN0b3IgXTogNzcyLFxuXHRcdFsgT25lTWludXNTcmNDb2xvckZhY3RvciBdOiA3NjksXG5cdFx0WyBPbmVNaW51c1NyY0FscGhhRmFjdG9yIF06IDc3MSxcblx0XHRbIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgXTogNzc1LFxuXHRcdFsgT25lTWludXNEc3RBbHBoYUZhY3RvciBdOiA3NzNcblx0fTtcblxuXHRmdW5jdGlvbiBzZXRCbGVuZGluZyggYmxlbmRpbmcsIGJsZW5kRXF1YXRpb24sIGJsZW5kU3JjLCBibGVuZERzdCwgYmxlbmRFcXVhdGlvbkFscGhhLCBibGVuZFNyY0FscGhhLCBibGVuZERzdEFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRpZiAoIGJsZW5kaW5nID09PSBOb0JsZW5kaW5nICkge1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0ZGlzYWJsZSggMzA0MiApO1xuXHRcdFx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjdXJyZW50QmxlbmRpbmdFbmFibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0ZW5hYmxlKCAzMDQyICk7XG5cdFx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRpbmcgIT09IEN1c3RvbUJsZW5kaW5nICkge1xuXG5cdFx0XHRpZiAoIGJsZW5kaW5nICE9PSBjdXJyZW50QmxlbmRpbmcgfHwgcHJlbXVsdGlwbGllZEFscGhhICE9PSBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50QmxlbmRFcXVhdGlvbiAhPT0gQWRkRXF1YXRpb24gfHwgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSAhPT0gQWRkRXF1YXRpb24gKSB7XG5cblx0XHRcdFx0XHRnbC5ibGVuZEVxdWF0aW9uKCAzMjc3NCApO1xuXG5cdFx0XHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblx0XHRcdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gQWRkRXF1YXRpb247XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggYmxlbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCAxLCA3NzEsIDEsIDc3MSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDEsIDEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgU3VidHJhY3RpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIDAsIDc2OSwgMCwgMSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBNdWx0aXBseUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggMCwgNzY4LCAwLCA3NzAgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggYmxlbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCA3NzAsIDc3MSwgMSwgNzcxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEFkZGl0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggNzcwLCAxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCAwLCA3NjksIDAsIDEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCAwLCA3NjggKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cblx0XHRcdFx0Y3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7XG5cdFx0XHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBjdXN0b20gYmxlbmRpbmdcblxuXHRcdGJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYSB8fCBibGVuZEVxdWF0aW9uO1xuXHRcdGJsZW5kU3JjQWxwaGEgPSBibGVuZFNyY0FscGhhIHx8IGJsZW5kU3JjO1xuXHRcdGJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhIHx8IGJsZW5kRHN0O1xuXG5cdFx0aWYgKCBibGVuZEVxdWF0aW9uICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbiB8fCBibGVuZEVxdWF0aW9uQWxwaGEgIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgKSB7XG5cblx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSggZXF1YXRpb25Ub0dMWyBibGVuZEVxdWF0aW9uIF0sIGVxdWF0aW9uVG9HTFsgYmxlbmRFcXVhdGlvbkFscGhhIF0gKTtcblxuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBibGVuZEVxdWF0aW9uO1xuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRTcmMgIT09IGN1cnJlbnRCbGVuZFNyYyB8fCBibGVuZERzdCAhPT0gY3VycmVudEJsZW5kRHN0IHx8IGJsZW5kU3JjQWxwaGEgIT09IGN1cnJlbnRCbGVuZFNyY0FscGhhIHx8IGJsZW5kRHN0QWxwaGEgIT09IGN1cnJlbnRCbGVuZERzdEFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZmFjdG9yVG9HTFsgYmxlbmRTcmMgXSwgZmFjdG9yVG9HTFsgYmxlbmREc3QgXSwgZmFjdG9yVG9HTFsgYmxlbmRTcmNBbHBoYSBdLCBmYWN0b3JUb0dMWyBibGVuZERzdEFscGhhIF0gKTtcblxuXHRcdFx0Y3VycmVudEJsZW5kU3JjID0gYmxlbmRTcmM7XG5cdFx0XHRjdXJyZW50QmxlbmREc3QgPSBibGVuZERzdDtcblx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYTtcblx0XHRcdGN1cnJlbnRCbGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYTtcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xuXHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IG51bGw7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldE1hdGVyaWFsKCBtYXRlcmlhbCwgZnJvbnRGYWNlQ1cgKSB7XG5cblx0XHRtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlXG5cdFx0XHQ/IGRpc2FibGUoIDI4ODQgKVxuXHRcdFx0OiBlbmFibGUoIDI4ODQgKTtcblxuXHRcdGxldCBmbGlwU2lkZWQgPSAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICk7XG5cdFx0aWYgKCBmcm9udEZhY2VDVyApIGZsaXBTaWRlZCA9ICEgZmxpcFNpZGVkO1xuXG5cdFx0c2V0RmxpcFNpZGVkKCBmbGlwU2lkZWQgKTtcblxuXHRcdCggbWF0ZXJpYWwuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nICYmIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSBmYWxzZSApXG5cdFx0XHQ/IHNldEJsZW5kaW5nKCBOb0JsZW5kaW5nIClcblx0XHRcdDogc2V0QmxlbmRpbmcoIG1hdGVyaWFsLmJsZW5kaW5nLCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uLCBtYXRlcmlhbC5ibGVuZFNyYywgbWF0ZXJpYWwuYmxlbmREc3QsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb25BbHBoYSwgbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSwgbWF0ZXJpYWwuYmxlbmREc3RBbHBoYSwgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhICk7XG5cblx0XHRkZXB0aEJ1ZmZlci5zZXRGdW5jKCBtYXRlcmlhbC5kZXB0aEZ1bmMgKTtcblx0XHRkZXB0aEJ1ZmZlci5zZXRUZXN0KCBtYXRlcmlhbC5kZXB0aFRlc3QgKTtcblx0XHRkZXB0aEJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5kZXB0aFdyaXRlICk7XG5cdFx0Y29sb3JCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuY29sb3JXcml0ZSApO1xuXG5cdFx0Y29uc3Qgc3RlbmNpbFdyaXRlID0gbWF0ZXJpYWwuc3RlbmNpbFdyaXRlO1xuXHRcdHN0ZW5jaWxCdWZmZXIuc2V0VGVzdCggc3RlbmNpbFdyaXRlICk7XG5cdFx0aWYgKCBzdGVuY2lsV3JpdGUgKSB7XG5cblx0XHRcdHN0ZW5jaWxCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayApO1xuXHRcdFx0c3RlbmNpbEJ1ZmZlci5zZXRGdW5jKCBtYXRlcmlhbC5zdGVuY2lsRnVuYywgbWF0ZXJpYWwuc3RlbmNpbFJlZiwgbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrICk7XG5cdFx0XHRzdGVuY2lsQnVmZmVyLnNldE9wKCBtYXRlcmlhbC5zdGVuY2lsRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWlBhc3MgKTtcblxuXHRcdH1cblxuXHRcdHNldFBvbHlnb25PZmZzZXQoIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyApO1xuXG5cdFx0bWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID09PSB0cnVlXG5cdFx0XHQ/IGVuYWJsZSggMzI5MjYgKVxuXHRcdFx0OiBkaXNhYmxlKCAzMjkyNiApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNldEZsaXBTaWRlZCggZmxpcFNpZGVkICkge1xuXG5cdFx0aWYgKCBjdXJyZW50RmxpcFNpZGVkICE9PSBmbGlwU2lkZWQgKSB7XG5cblx0XHRcdGlmICggZmxpcFNpZGVkICkge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggMjMwNCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggMjMwNSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGN1cnJlbnRGbGlwU2lkZWQgPSBmbGlwU2lkZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldEN1bGxGYWNlKCBjdWxsRmFjZSApIHtcblxuXHRcdGlmICggY3VsbEZhY2UgIT09IEN1bGxGYWNlTm9uZSApIHtcblxuXHRcdFx0ZW5hYmxlKCAyODg0ICk7XG5cblx0XHRcdGlmICggY3VsbEZhY2UgIT09IGN1cnJlbnRDdWxsRmFjZSApIHtcblxuXHRcdFx0XHRpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUJhY2sgKSB7XG5cblx0XHRcdFx0XHRnbC5jdWxsRmFjZSggMTAyOSApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUZyb250ICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMjggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMzIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDI4ODQgKTtcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRDdWxsRmFjZSA9IGN1bGxGYWNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRMaW5lV2lkdGgoIHdpZHRoICkge1xuXG5cdFx0aWYgKCB3aWR0aCAhPT0gY3VycmVudExpbmVXaWR0aCApIHtcblxuXHRcdFx0aWYgKCBsaW5lV2lkdGhBdmFpbGFibGUgKSBnbC5saW5lV2lkdGgoIHdpZHRoICk7XG5cblx0XHRcdGN1cnJlbnRMaW5lV2lkdGggPSB3aWR0aDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0UG9seWdvbk9mZnNldCggcG9seWdvbk9mZnNldCwgZmFjdG9yLCB1bml0cyApIHtcblxuXHRcdGlmICggcG9seWdvbk9mZnNldCApIHtcblxuXHRcdFx0ZW5hYmxlKCAzMjgyMyApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSBmYWN0b3IgfHwgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5pdHMgKSB7XG5cblx0XHRcdFx0Z2wucG9seWdvbk9mZnNldCggZmFjdG9yLCB1bml0cyApO1xuXG5cdFx0XHRcdGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gZmFjdG9yO1xuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gdW5pdHM7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDMyODIzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFNjaXNzb3JUZXN0KCBzY2lzc29yVGVzdCApIHtcblxuXHRcdGlmICggc2Npc3NvclRlc3QgKSB7XG5cblx0XHRcdGVuYWJsZSggMzA4OSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGlzYWJsZSggMzA4OSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyB0ZXh0dXJlXG5cblx0ZnVuY3Rpb24gYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICkge1xuXG5cdFx0aWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHdlYmdsU2xvdCA9IDMzOTg0ICsgbWF4VGV4dHVyZXMgLSAxO1xuXG5cdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCApIHtcblxuXHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICk7XG5cdFx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSB3ZWJnbFNsb3Q7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSApIHtcblxuXHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ID09PSBudWxsICkge1xuXG5cdFx0XHRhY3RpdmVUZXh0dXJlKCk7XG5cblx0XHR9XG5cblx0XHRsZXQgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdO1xuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ym91bmRUZXh0dXJlID0geyB0eXBlOiB1bmRlZmluZWQsIHRleHR1cmU6IHVuZGVmaW5lZCB9O1xuXHRcdFx0Y3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdID0gYm91bmRUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUudHlwZSAhPT0gd2ViZ2xUeXBlIHx8IGJvdW5kVGV4dHVyZS50ZXh0dXJlICE9PSB3ZWJnbFRleHR1cmUgKSB7XG5cblx0XHRcdGdsLmJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSB8fCBlbXB0eVRleHR1cmVzWyB3ZWJnbFR5cGUgXSApO1xuXG5cdFx0XHRib3VuZFRleHR1cmUudHlwZSA9IHdlYmdsVHlwZTtcblx0XHRcdGJvdW5kVGV4dHVyZS50ZXh0dXJlID0gd2ViZ2xUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1bmJpbmRUZXh0dXJlKCkge1xuXG5cdFx0Y29uc3QgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdO1xuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBib3VuZFRleHR1cmUudHlwZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRnbC5iaW5kVGV4dHVyZSggYm91bmRUZXh0dXJlLnR5cGUsIG51bGwgKTtcblxuXHRcdFx0Ym91bmRUZXh0dXJlLnR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHVuZGVmaW5lZDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY29tcHJlc3NlZFRleEltYWdlMkQoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhTdWJJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3ViSW1hZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhTdWJJbWFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3ViSW1hZ2UzRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLmNvbXByZXNzZWRUZXhTdWJJbWFnZTJELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleFN0b3JhZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleFN0b3JhZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhTdG9yYWdlM0QoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC50ZXhTdG9yYWdlM0QuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlM0QuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzY2lzc29yKCBzY2lzc29yICkge1xuXG5cdFx0aWYgKCBjdXJyZW50U2Npc3Nvci5lcXVhbHMoIHNjaXNzb3IgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLnNjaXNzb3IoIHNjaXNzb3IueCwgc2Npc3Nvci55LCBzY2lzc29yLnosIHNjaXNzb3IudyApO1xuXHRcdFx0Y3VycmVudFNjaXNzb3IuY29weSggc2Npc3NvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB2aWV3cG9ydCggdmlld3BvcnQgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRWaWV3cG9ydC5lcXVhbHMoIHZpZXdwb3J0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC52aWV3cG9ydCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQueiwgdmlld3BvcnQudyApO1xuXHRcdFx0Y3VycmVudFZpZXdwb3J0LmNvcHkoIHZpZXdwb3J0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHQvLyByZXNldCBzdGF0ZVxuXG5cdFx0Z2wuZGlzYWJsZSggMzA0MiApO1xuXHRcdGdsLmRpc2FibGUoIDI4ODQgKTtcblx0XHRnbC5kaXNhYmxlKCAyOTI5ICk7XG5cdFx0Z2wuZGlzYWJsZSggMzI4MjMgKTtcblx0XHRnbC5kaXNhYmxlKCAzMDg5ICk7XG5cdFx0Z2wuZGlzYWJsZSggMjk2MCApO1xuXHRcdGdsLmRpc2FibGUoIDMyOTI2ICk7XG5cblx0XHRnbC5ibGVuZEVxdWF0aW9uKCAzMjc3NCApO1xuXHRcdGdsLmJsZW5kRnVuYyggMSwgMCApO1xuXHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCAxLCAwLCAxLCAwICk7XG5cblx0XHRnbC5jb2xvck1hc2soIHRydWUsIHRydWUsIHRydWUsIHRydWUgKTtcblx0XHRnbC5jbGVhckNvbG9yKCAwLCAwLCAwLCAwICk7XG5cblx0XHRnbC5kZXB0aE1hc2soIHRydWUgKTtcblx0XHRnbC5kZXB0aEZ1bmMoIDUxMyApO1xuXHRcdGdsLmNsZWFyRGVwdGgoIDEgKTtcblxuXHRcdGdsLnN0ZW5jaWxNYXNrKCAweGZmZmZmZmZmICk7XG5cdFx0Z2wuc3RlbmNpbEZ1bmMoIDUxOSwgMCwgMHhmZmZmZmZmZiApO1xuXHRcdGdsLnN0ZW5jaWxPcCggNzY4MCwgNzY4MCwgNzY4MCApO1xuXHRcdGdsLmNsZWFyU3RlbmNpbCggMCApO1xuXG5cdFx0Z2wuY3VsbEZhY2UoIDEwMjkgKTtcblx0XHRnbC5mcm9udEZhY2UoIDIzMDUgKTtcblxuXHRcdGdsLnBvbHlnb25PZmZzZXQoIDAsIDAgKTtcblxuXHRcdGdsLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICk7XG5cblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBudWxsICk7XG5cblx0XHRpZiAoIGlzV2ViR0wyID09PSB0cnVlICkge1xuXG5cdFx0XHRnbC5iaW5kRnJhbWVidWZmZXIoIDM2MDA5LCBudWxsICk7XG5cdFx0XHRnbC5iaW5kRnJhbWVidWZmZXIoIDM2MDA4LCBudWxsICk7XG5cblx0XHR9XG5cblx0XHRnbC51c2VQcm9ncmFtKCBudWxsICk7XG5cblx0XHRnbC5saW5lV2lkdGgoIDEgKTtcblxuXHRcdGdsLnNjaXNzb3IoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApO1xuXHRcdGdsLnZpZXdwb3J0KCAwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQgKTtcblxuXHRcdC8vIHJlc2V0IGludGVybmFsc1xuXG5cdFx0ZW5hYmxlZENhcGFiaWxpdGllcyA9IHt9O1xuXG5cdFx0Y3VycmVudFRleHR1cmVTbG90ID0gbnVsbDtcblx0XHRjdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9O1xuXG5cdFx0Y3VycmVudEJvdW5kRnJhbWVidWZmZXJzID0ge307XG5cdFx0Y3VycmVudERyYXdidWZmZXJzID0gbmV3IFdlYWtNYXAoKTtcblx0XHRkZWZhdWx0RHJhd2J1ZmZlcnMgPSBbXTtcblxuXHRcdGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHRcdGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSBmYWxzZTtcblx0XHRjdXJyZW50QmxlbmRpbmcgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZERzdCA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDtcblx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBmYWxzZTtcblxuXHRcdGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsO1xuXHRcdGN1cnJlbnRDdWxsRmFjZSA9IG51bGw7XG5cblx0XHRjdXJyZW50TGluZVdpZHRoID0gbnVsbDtcblxuXHRcdGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gbnVsbDtcblx0XHRjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gbnVsbDtcblxuXHRcdGN1cnJlbnRTY2lzc29yLnNldCggMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0ICk7XG5cdFx0Y3VycmVudFZpZXdwb3J0LnNldCggMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0ICk7XG5cblx0XHRjb2xvckJ1ZmZlci5yZXNldCgpO1xuXHRcdGRlcHRoQnVmZmVyLnJlc2V0KCk7XG5cdFx0c3RlbmNpbEJ1ZmZlci5yZXNldCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0YnVmZmVyczoge1xuXHRcdFx0Y29sb3I6IGNvbG9yQnVmZmVyLFxuXHRcdFx0ZGVwdGg6IGRlcHRoQnVmZmVyLFxuXHRcdFx0c3RlbmNpbDogc3RlbmNpbEJ1ZmZlclxuXHRcdH0sXG5cblx0XHRlbmFibGU6IGVuYWJsZSxcblx0XHRkaXNhYmxlOiBkaXNhYmxlLFxuXG5cdFx0YmluZEZyYW1lYnVmZmVyOiBiaW5kRnJhbWVidWZmZXIsXG5cdFx0ZHJhd0J1ZmZlcnM6IGRyYXdCdWZmZXJzLFxuXG5cdFx0dXNlUHJvZ3JhbTogdXNlUHJvZ3JhbSxcblxuXHRcdHNldEJsZW5kaW5nOiBzZXRCbGVuZGluZyxcblx0XHRzZXRNYXRlcmlhbDogc2V0TWF0ZXJpYWwsXG5cblx0XHRzZXRGbGlwU2lkZWQ6IHNldEZsaXBTaWRlZCxcblx0XHRzZXRDdWxsRmFjZTogc2V0Q3VsbEZhY2UsXG5cblx0XHRzZXRMaW5lV2lkdGg6IHNldExpbmVXaWR0aCxcblx0XHRzZXRQb2x5Z29uT2Zmc2V0OiBzZXRQb2x5Z29uT2Zmc2V0LFxuXG5cdFx0c2V0U2Npc3NvclRlc3Q6IHNldFNjaXNzb3JUZXN0LFxuXG5cdFx0YWN0aXZlVGV4dHVyZTogYWN0aXZlVGV4dHVyZSxcblx0XHRiaW5kVGV4dHVyZTogYmluZFRleHR1cmUsXG5cdFx0dW5iaW5kVGV4dHVyZTogdW5iaW5kVGV4dHVyZSxcblx0XHRjb21wcmVzc2VkVGV4SW1hZ2UyRDogY29tcHJlc3NlZFRleEltYWdlMkQsXG5cdFx0dGV4SW1hZ2UyRDogdGV4SW1hZ2UyRCxcblx0XHR0ZXhJbWFnZTNEOiB0ZXhJbWFnZTNELFxuXG5cdFx0dGV4U3RvcmFnZTJEOiB0ZXhTdG9yYWdlMkQsXG5cdFx0dGV4U3RvcmFnZTNEOiB0ZXhTdG9yYWdlM0QsXG5cdFx0dGV4U3ViSW1hZ2UyRDogdGV4U3ViSW1hZ2UyRCxcblx0XHR0ZXhTdWJJbWFnZTNEOiB0ZXhTdWJJbWFnZTNELFxuXHRcdGNvbXByZXNzZWRUZXhTdWJJbWFnZTJEOiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCxcblxuXHRcdHNjaXNzb3I6IHNjaXNzb3IsXG5cdFx0dmlld3BvcnQ6IHZpZXdwb3J0LFxuXG5cdFx0cmVzZXQ6IHJlc2V0XG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICkge1xuXG5cdGNvbnN0IGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXHRjb25zdCBtYXhUZXh0dXJlcyA9IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlcztcblx0Y29uc3QgbWF4Q3ViZW1hcFNpemUgPSBjYXBhYmlsaXRpZXMubWF4Q3ViZW1hcFNpemU7XG5cdGNvbnN0IG1heFRleHR1cmVTaXplID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXHRjb25zdCBtYXhTYW1wbGVzID0gY2FwYWJpbGl0aWVzLm1heFNhbXBsZXM7XG5cdGNvbnN0IG11bHRpc2FtcGxlZFJUVEV4dCA9IGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApID8gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgOiBudWxsO1xuXHRjb25zdCBzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciA9IC9PY3VsdXNCcm93c2VyL2cudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApO1xuXG5cdGNvbnN0IF92aWRlb1RleHR1cmVzID0gbmV3IFdlYWtNYXAoKTtcblx0bGV0IF9jYW52YXM7XG5cblx0Y29uc3QgX3NvdXJjZXMgPSBuZXcgV2Vha01hcCgpOyAvLyBtYXBzIFdlYmdsVGV4dHVyZSBvYmplY3RzIHRvIGluc3RhbmNlcyBvZiBTb3VyY2VcblxuXHQvLyBjb3Jkb3ZhIGlPUyAoYXMgb2YgNS4wKSBzdGlsbCB1c2VzIFVJV2ViVmlldywgd2hpY2ggcHJvdmlkZXMgT2Zmc2NyZWVuQ2FudmFzLFxuXHQvLyBhbHNvIE9mZnNjcmVlbkNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIiksIGJ1dCBub3QgT2Zmc2NyZWVuQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKSFcblx0Ly8gU29tZSBpbXBsZW1lbnRhdGlvbnMgbWF5IG9ubHkgaW1wbGVtZW50IE9mZnNjcmVlbkNhbnZhcyBwYXJ0aWFsbHkgKGUuZy4gbGFja2luZyAyZCkuXG5cblx0bGV0IHVzZU9mZnNjcmVlbkNhbnZhcyA9IGZhbHNlO1xuXG5cdHRyeSB7XG5cblx0XHR1c2VPZmZzY3JlZW5DYW52YXMgPSB0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJ1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcblx0XHRcdCYmICggbmV3IE9mZnNjcmVlbkNhbnZhcyggMSwgMSApLmdldENvbnRleHQoICcyZCcgKSApICE9PSBudWxsO1xuXG5cdH0gY2F0Y2ggKCBlcnIgKSB7XG5cblx0XHQvLyBJZ25vcmUgYW55IGVycm9yc1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHQvLyBVc2UgT2Zmc2NyZWVuQ2FudmFzIHdoZW4gYXZhaWxhYmxlLiBTcGVjaWFsbHkgbmVlZGVkIGluIHdlYiB3b3JrZXJzXG5cblx0XHRyZXR1cm4gdXNlT2Zmc2NyZWVuQ2FudmFzID9cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wYXQvY29tcGF0XG5cdFx0XHRuZXcgT2Zmc2NyZWVuQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICkgOiBjcmVhdGVFbGVtZW50TlMoICdjYW52YXMnICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2l6ZUltYWdlKCBpbWFnZSwgbmVlZHNQb3dlck9mVHdvLCBuZWVkc05ld0NhbnZhcywgbWF4U2l6ZSApIHtcblxuXHRcdGxldCBzY2FsZSA9IDE7XG5cblx0XHQvLyBoYW5kbGUgY2FzZSBpZiB0ZXh0dXJlIGV4Y2VlZHMgbWF4IHNpemVcblxuXHRcdGlmICggaW1hZ2Uud2lkdGggPiBtYXhTaXplIHx8IGltYWdlLmhlaWdodCA+IG1heFNpemUgKSB7XG5cblx0XHRcdHNjYWxlID0gbWF4U2l6ZSAvIE1hdGgubWF4KCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHQvLyBvbmx5IHBlcmZvcm0gcmVzaXplIGlmIG5lY2Vzc2FyeVxuXG5cdFx0aWYgKCBzY2FsZSA8IDEgfHwgbmVlZHNQb3dlck9mVHdvID09PSB0cnVlICkge1xuXG5cdFx0XHQvLyBvbmx5IHBlcmZvcm0gcmVzaXplIGZvciBjZXJ0YWluIGltYWdlIHR5cGVzXG5cblx0XHRcdGlmICggKCB0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkgfHxcblx0XHRcdFx0KCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fFxuXHRcdFx0XHQoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApICkge1xuXG5cdFx0XHRcdGNvbnN0IGZsb29yID0gbmVlZHNQb3dlck9mVHdvID8gZmxvb3JQb3dlck9mVHdvIDogTWF0aC5mbG9vcjtcblxuXHRcdFx0XHRjb25zdCB3aWR0aCA9IGZsb29yKCBzY2FsZSAqIGltYWdlLndpZHRoICk7XG5cdFx0XHRcdGNvbnN0IGhlaWdodCA9IGZsb29yKCBzY2FsZSAqIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdGlmICggX2NhbnZhcyA9PT0gdW5kZWZpbmVkICkgX2NhbnZhcyA9IGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHRcdC8vIGN1YmUgdGV4dHVyZXMgY2FuJ3QgcmV1c2UgdGhlIHNhbWUgY2FudmFzXG5cblx0XHRcdFx0Y29uc3QgY2FudmFzID0gbmVlZHNOZXdDYW52YXMgPyBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKSA6IF9jYW52YXM7XG5cblx0XHRcdFx0Y2FudmFzLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRcdFx0Y29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cdFx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaGFzIGJlZW4gcmVzaXplZCBmcm9tICgnICsgaW1hZ2Uud2lkdGggKyAneCcgKyBpbWFnZS5oZWlnaHQgKyAnKSB0byAoJyArIHdpZHRoICsgJ3gnICsgaGVpZ2h0ICsgJykuJyApO1xuXG5cdFx0XHRcdHJldHVybiBjYW52YXM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCAnZGF0YScgaW4gaW1hZ2UgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBJbWFnZSBpbiBEYXRhVGV4dHVyZSBpcyB0b28gYmlnICgnICsgaW1hZ2Uud2lkdGggKyAneCcgKyBpbWFnZS5oZWlnaHQgKyAnKS4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBpbWFnZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGltYWdlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBpc1Bvd2VyT2ZUd28kMSggaW1hZ2UgKSB7XG5cblx0XHRyZXR1cm4gaXNQb3dlck9mVHdvKCBpbWFnZS53aWR0aCApICYmIGlzUG93ZXJPZlR3byggaW1hZ2UuaGVpZ2h0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleHR1cmVOZWVkc1Bvd2VyT2ZUd28oIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIGlzV2ViR0wyICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0cmV0dXJuICggdGV4dHVyZS53cmFwUyAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyB8fCB0ZXh0dXJlLndyYXBUICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nICkgfHxcblx0XHRcdCggdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlciApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdHJldHVybiB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyAmJiBzdXBwb3J0c01pcHMgJiZcblx0XHRcdHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXI7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQgKSB7XG5cblx0XHRfZ2wuZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRJbnRlcm5hbEZvcm1hdCggaW50ZXJuYWxGb3JtYXROYW1lLCBnbEZvcm1hdCwgZ2xUeXBlLCBlbmNvZGluZywgaXNWaWRlb1RleHR1cmUgPSBmYWxzZSApIHtcblxuXHRcdGlmICggaXNXZWJHTDIgPT09IGZhbHNlICkgcmV0dXJuIGdsRm9ybWF0O1xuXG5cdFx0aWYgKCBpbnRlcm5hbEZvcm1hdE5hbWUgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggX2dsWyBpbnRlcm5hbEZvcm1hdE5hbWUgXSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIF9nbFsgaW50ZXJuYWxGb3JtYXROYW1lIF07XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gdXNlIG5vbi1leGlzdGluZyBXZWJHTCBpbnRlcm5hbCBmb3JtYXQgXFwnJyArIGludGVybmFsRm9ybWF0TmFtZSArICdcXCcnICk7XG5cblx0XHR9XG5cblx0XHRsZXQgaW50ZXJuYWxGb3JtYXQgPSBnbEZvcm1hdDtcblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDY0MDMgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyNjtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyNTtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTIxICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyMTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDMzMzE5ICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyNiApIGludGVybmFsRm9ybWF0ID0gMzMzMjg7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEzMSApIGludGVybmFsRm9ybWF0ID0gMzMzMjc7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyMSApIGludGVybmFsRm9ybWF0ID0gMzMzMjM7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSA2NDA4ICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyNiApIGludGVybmFsRm9ybWF0ID0gMzQ4MzY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEzMSApIGludGVybmFsRm9ybWF0ID0gMzQ4NDI7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyMSApIGludGVybmFsRm9ybWF0ID0gKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICYmIGlzVmlkZW9UZXh0dXJlID09PSBmYWxzZSApID8gMzU5MDcgOiAzMjg1Njtcblx0XHRcdGlmICggZ2xUeXBlID09PSAzMjgxOSApIGludGVybmFsRm9ybWF0ID0gMzI4NTQ7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gMzI4MjAgKSBpbnRlcm5hbEZvcm1hdCA9IDMyODU1O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpbnRlcm5hbEZvcm1hdCA9PT0gMzMzMjUgfHwgaW50ZXJuYWxGb3JtYXQgPT09IDMzMzI2IHx8XG5cdFx0XHRpbnRlcm5hbEZvcm1hdCA9PT0gMzMzMjcgfHwgaW50ZXJuYWxGb3JtYXQgPT09IDMzMzI4IHx8XG5cdFx0XHRpbnRlcm5hbEZvcm1hdCA9PT0gMzQ4NDIgfHwgaW50ZXJuYWxGb3JtYXQgPT09IDM0ODM2ICkge1xuXG5cdFx0XHRleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW50ZXJuYWxGb3JtYXQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UsIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSA9PT0gdHJ1ZSB8fCAoIHRleHR1cmUuaXNGcmFtZWJ1ZmZlclRleHR1cmUgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlciApICkge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5sb2cyKCBNYXRoLm1heCggaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApICkgKyAxO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5taXBtYXBzICE9PSB1bmRlZmluZWQgJiYgdGV4dHVyZS5taXBtYXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdC8vIHVzZXItZGVmaW5lZCBtaXBtYXBzXG5cblx0XHRcdHJldHVybiB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICYmIEFycmF5LmlzQXJyYXkoIHRleHR1cmUuaW1hZ2UgKSApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLm1pcG1hcHMubGVuZ3RoO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gdGV4dHVyZSB3aXRob3V0IG1pcG1hcHMgKG9ubHkgYmFzZSBsZXZlbClcblxuXHRcdFx0cmV0dXJuIDE7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIEZhbGxiYWNrIGZpbHRlcnMgZm9yIG5vbi1wb3dlci1vZi0yIHRleHR1cmVzXG5cblx0ZnVuY3Rpb24gZmlsdGVyRmFsbGJhY2soIGYgKSB7XG5cblx0XHRpZiAoIGYgPT09IE5lYXJlc3RGaWx0ZXIgfHwgZiA9PT0gTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgfHwgZiA9PT0gTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciApIHtcblxuXHRcdFx0cmV0dXJuIDk3Mjg7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gOTcyOTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSBldmVudC50YXJnZXQ7XG5cblx0XHR0ZXh0dXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApIHtcblxuXHRcdFx0X3ZpZGVvVGV4dHVyZXMuZGVsZXRlKCB0ZXh0dXJlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSBldmVudC50YXJnZXQ7XG5cblx0XHRyZW5kZXJUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gY2hlY2sgaWYgaXQncyBuZWNlc3NhcnkgdG8gcmVtb3ZlIHRoZSBXZWJHTFRleHR1cmUgb2JqZWN0XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblx0XHRjb25zdCB3ZWJnbFRleHR1cmVzID0gX3NvdXJjZXMuZ2V0KCBzb3VyY2UgKTtcblxuXHRcdGlmICggd2ViZ2xUZXh0dXJlcyApIHtcblxuXHRcdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlID0gd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdO1xuXHRcdFx0d2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyAtLTtcblxuXHRcdFx0Ly8gdGhlIFdlYkdMVGV4dHVyZSBvYmplY3QgaXMgbm90IHVzZWQgYW55bW9yZSwgcmVtb3ZlIGl0XG5cblx0XHRcdGlmICggd2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0XHRkZWxldGVUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIHRoZSB3ZWFrIG1hcCBlbnRyeSBpZiBubyBXZWJHTFRleHR1cmUgdXNlcyB0aGUgc291cmNlIGFueW1vcmVcblxuXHRcdFx0aWYgKCBPYmplY3Qua2V5cyggd2ViZ2xUZXh0dXJlcyApLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRfc291cmNlcy5kZWxldGUoIHNvdXJjZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkZWxldGVUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXHRcdF9nbC5kZWxldGVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlcyA9IF9zb3VyY2VzLmdldCggc291cmNlICk7XG5cdFx0ZGVsZXRlIHdlYmdsVGV4dHVyZXNbIHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgXTtcblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApO1xuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyICkgX2dsLmRlbGV0ZVJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyICkgX2dsLmRlbGV0ZVJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKSBfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7XG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyICkgX2dsLmRlbGV0ZVJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRleHR1cmUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0YWNobWVudFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZVsgaSBdICk7XG5cblx0XHRcdFx0aWYgKCBhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdF9nbC5kZWxldGVUZXh0dXJlKCBhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0XHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgLS07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHRleHR1cmUgKTtcblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8vXG5cblx0bGV0IHRleHR1cmVVbml0cyA9IDA7XG5cblx0ZnVuY3Rpb24gcmVzZXRUZXh0dXJlVW5pdHMoKSB7XG5cblx0XHR0ZXh0dXJlVW5pdHMgPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhbGxvY2F0ZVRleHR1cmVVbml0KCkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdHM7XG5cblx0XHRpZiAoIHRleHR1cmVVbml0ID49IG1heFRleHR1cmVzICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFRleHR1cmVzOiBUcnlpbmcgdG8gdXNlICcgKyB0ZXh0dXJlVW5pdCArICcgdGV4dHVyZSB1bml0cyB3aGlsZSB0aGlzIEdQVSBzdXBwb3J0cyBvbmx5ICcgKyBtYXhUZXh0dXJlcyApO1xuXG5cdFx0fVxuXG5cdFx0dGV4dHVyZVVuaXRzICs9IDE7XG5cblx0XHRyZXR1cm4gdGV4dHVyZVVuaXQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFRleHR1cmVDYWNoZUtleSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLndyYXBTICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS53cmFwVCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUubWFnRmlsdGVyICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5taW5GaWx0ZXIgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmFuaXNvdHJvcHkgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmludGVybmFsRm9ybWF0ICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5mb3JtYXQgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuZmxpcFkgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuZW5jb2RpbmcgKTtcblxuXHRcdHJldHVybiBhcnJheS5qb2luKCk7XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZTJEKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkgdXBkYXRlVmlkZW9UZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSAmJiB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdGlmICggaW1hZ2UgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBtYXJrZWQgZm9yIHVwZGF0ZSBidXQgbm8gaW1hZ2UgZGF0YSBmb3VuZC4nICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGltYWdlLmNvbXBsZXRlID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyBpbmNvbXBsZXRlJyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDM1NTMsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUyREFycmF5KCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDM1ODY2LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlM0QoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzI4NzksIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRDdWJlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHR9XG5cblx0Y29uc3Qgd3JhcHBpbmdUb0dMID0ge1xuXHRcdFsgUmVwZWF0V3JhcHBpbmcgXTogMTA0OTcsXG5cdFx0WyBDbGFtcFRvRWRnZVdyYXBwaW5nIF06IDMzMDcxLFxuXHRcdFsgTWlycm9yZWRSZXBlYXRXcmFwcGluZyBdOiAzMzY0OFxuXHR9O1xuXG5cdGNvbnN0IGZpbHRlclRvR0wgPSB7XG5cdFx0WyBOZWFyZXN0RmlsdGVyIF06IDk3MjgsXG5cdFx0WyBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciBdOiA5OTg0LFxuXHRcdFsgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciBdOiA5OTg2LFxuXG5cdFx0WyBMaW5lYXJGaWx0ZXIgXTogOTcyOSxcblx0XHRbIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgXTogOTk4NSxcblx0XHRbIExpbmVhck1pcG1hcExpbmVhckZpbHRlciBdOiA5OTg3XG5cdH07XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZVBhcmFtZXRlcnMoIHRleHR1cmVUeXBlLCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSB7XG5cblx0XHRpZiAoIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0Miwgd3JhcHBpbmdUb0dMWyB0ZXh0dXJlLndyYXBTIF0gKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDMsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwVCBdICk7XG5cblx0XHRcdGlmICggdGV4dHVyZVR5cGUgPT09IDMyODc5IHx8IHRleHR1cmVUeXBlID09PSAzNTg2NiApIHtcblxuXHRcdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDMyODgyLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFIgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDAsIGZpbHRlclRvR0xbIHRleHR1cmUubWFnRmlsdGVyIF0gKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDEsIGZpbHRlclRvR0xbIHRleHR1cmUubWluRmlsdGVyIF0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDIsIDMzMDcxICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQzLCAzMzA3MSApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVUeXBlID09PSAzMjg3OSB8fCB0ZXh0dXJlVHlwZSA9PT0gMzU4NjYgKSB7XG5cblx0XHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAzMjg4MiwgMzMwNzEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmUud3JhcFMgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgfHwgdGV4dHVyZS53cmFwVCAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGlzIG5vdCBwb3dlciBvZiB0d28uIFRleHR1cmUud3JhcFMgYW5kIFRleHR1cmUud3JhcFQgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQwLCBmaWx0ZXJGYWxsYmFjayggdGV4dHVyZS5tYWdGaWx0ZXIgKSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MSwgZmlsdGVyRmFsbGJhY2soIHRleHR1cmUubWluRmlsdGVyICkgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICkgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gRmxvYXRUeXBlICYmIGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApID09PSBmYWxzZSApIHJldHVybjsgLy8gdmVyaWZ5IGV4dGVuc2lvbiBmb3IgV2ViR0wgMSBhbmQgV2ViR0wgMlxuXHRcdFx0aWYgKCBpc1dlYkdMMiA9PT0gZmFsc2UgJiYgKCB0ZXh0dXJlLnR5cGUgPT09IEhhbGZGbG9hdFR5cGUgJiYgZXh0ZW5zaW9ucy5oYXMoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicgKSA9PT0gZmFsc2UgKSApIHJldHVybjsgLy8gdmVyaWZ5IGV4dGVuc2lvbiBmb3IgV2ViR0wgMSBvbmx5XG5cblx0XHRcdGlmICggdGV4dHVyZS5hbmlzb3Ryb3B5ID4gMSB8fCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgKSB7XG5cblx0XHRcdFx0X2dsLnRleFBhcmFtZXRlcmYoIHRleHR1cmVUeXBlLCBleHRlbnNpb24uVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIE1hdGgubWluKCB0ZXh0dXJlLmFuaXNvdHJvcHksIGNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCkgKSApO1xuXHRcdFx0XHRwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgPSB0ZXh0dXJlLmFuaXNvdHJvcHk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICkge1xuXG5cdFx0bGV0IGZvcmNlVXBsb2FkID0gZmFsc2U7XG5cblx0XHRpZiAoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID0gdHJ1ZTtcblxuXHRcdFx0dGV4dHVyZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNyZWF0ZSBTb3VyY2UgPC0+IFdlYkdMVGV4dHVyZXMgbWFwcGluZyBpZiBuZWNlc3NhcnlcblxuXHRcdGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuXHRcdGxldCB3ZWJnbFRleHR1cmVzID0gX3NvdXJjZXMuZ2V0KCBzb3VyY2UgKTtcblxuXHRcdGlmICggd2ViZ2xUZXh0dXJlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR3ZWJnbFRleHR1cmVzID0ge307XG5cdFx0XHRfc291cmNlcy5zZXQoIHNvdXJjZSwgd2ViZ2xUZXh0dXJlcyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIFdlYkdMVGV4dHVyZSBvYmplY3QgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIHBhcmFtZXRlcnNcblxuXHRcdGNvbnN0IHRleHR1cmVDYWNoZUtleSA9IGdldFRleHR1cmVDYWNoZUtleSggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlQ2FjaGVLZXkgIT09IHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgKSB7XG5cblx0XHRcdC8vIGlmIG5vdCwgY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIFdlYkdMVGV4dHVyZVxuXG5cdFx0XHRpZiAoIHdlYmdsVGV4dHVyZXNbIHRleHR1cmVDYWNoZUtleSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gY3JlYXRlIG5ldyBlbnRyeVxuXG5cdFx0XHRcdHdlYmdsVGV4dHVyZXNbIHRleHR1cmVDYWNoZUtleSBdID0ge1xuXHRcdFx0XHRcdHRleHR1cmU6IF9nbC5jcmVhdGVUZXh0dXJlKCksXG5cdFx0XHRcdFx0dXNlZFRpbWVzOiAwXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHRcdFx0Ly8gd2hlbiBhIG5ldyBpbnN0YW5jZSBvZiBXZWJHTFRleHR1cmUgd2FzIGNyZWF0ZWQsIGEgdGV4dHVyZSB1cGxvYWQgaXMgcmVxdWlyZWRcblx0XHRcdFx0Ly8gZXZlbiBpZiB0aGUgaW1hZ2UgY29udGVudHMgYXJlIGlkZW50aWNhbFxuXG5cdFx0XHRcdGZvcmNlVXBsb2FkID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXS51c2VkVGltZXMgKys7XG5cblx0XHRcdC8vIGV2ZXJ5IHRpbWUgdGhlIHRleHR1cmUgY2FjaGUga2V5IGNoYW5nZXMsIGl0J3MgbmVjZXNzYXJ5IHRvIGNoZWNrIGlmIGFuIGluc3RhbmNlIG9mXG5cdFx0XHQvLyBXZWJHTFRleHR1cmUgY2FuIGJlIGRlbGV0ZWQgaW4gb3JkZXIgdG8gYXZvaWQgYSBtZW1vcnkgbGVhay5cblxuXHRcdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlID0gd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdO1xuXG5cdFx0XHRpZiAoIHdlYmdsVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHdlYmdsVGV4dHVyZXNbIHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgXS51c2VkVGltZXMgLS07XG5cblx0XHRcdFx0aWYgKCB3ZWJnbFRleHR1cmUudXNlZFRpbWVzID09PSAwICkge1xuXG5cdFx0XHRcdFx0ZGVsZXRlVGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBzdG9yZSByZWZlcmVuY2VzIHRvIGNhY2hlIGtleSBhbmQgV2ViR0xUZXh0dXJlIG9iamVjdFxuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5ID0gdGV4dHVyZUNhY2hlS2V5O1xuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXS50ZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZvcmNlVXBsb2FkO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGxldCB0ZXh0dXJlVHlwZSA9IDM1NTM7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlICkgdGV4dHVyZVR5cGUgPSAzNTg2Njtcblx0XHRpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkgdGV4dHVyZVR5cGUgPSAzMjg3OTtcblxuXHRcdGNvbnN0IGZvcmNlVXBsb2FkID0gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7XG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGV4dHVyZVR5cGUsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHRpZiAoIHNvdXJjZS52ZXJzaW9uICE9PSBzb3VyY2UuX19jdXJyZW50VmVyc2lvbiB8fCBmb3JjZVVwbG9hZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MCwgdGV4dHVyZS5mbGlwWSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MSwgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMzMTcsIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQzLCAwICk7XG5cblx0XHRcdGNvbnN0IG5lZWRzUG93ZXJPZlR3byA9IHRleHR1cmVOZWVkc1Bvd2VyT2ZUd28oIHRleHR1cmUgKSAmJiBpc1Bvd2VyT2ZUd28kMSggdGV4dHVyZS5pbWFnZSApID09PSBmYWxzZTtcblx0XHRcdGxldCBpbWFnZSA9IHJlc2l6ZUltYWdlKCB0ZXh0dXJlLmltYWdlLCBuZWVkc1Bvd2VyT2ZUd28sIGZhbHNlLCBtYXhUZXh0dXJlU2l6ZSApO1xuXHRcdFx0aW1hZ2UgPSB2ZXJpZnlDb2xvclNwYWNlKCB0ZXh0dXJlLCBpbWFnZSApO1xuXG5cdFx0XHRjb25zdCBzdXBwb3J0c01pcHMgPSBpc1Bvd2VyT2ZUd28kMSggaW1hZ2UgKSB8fCBpc1dlYkdMMixcblx0XHRcdFx0Z2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5lbmNvZGluZyApO1xuXG5cdFx0XHRsZXQgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICksXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5lbmNvZGluZywgdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApO1xuXG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0XHRsZXQgbWlwbWFwO1xuXHRcdFx0Y29uc3QgbWlwbWFwcyA9IHRleHR1cmUubWlwbWFwcztcblxuXHRcdFx0Y29uc3QgdXNlVGV4U3RvcmFnZSA9ICggaXNXZWJHTDIgJiYgdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSAhPT0gdHJ1ZSApO1xuXHRcdFx0Y29uc3QgYWxsb2NhdGVNZW1vcnkgPSAoIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9PT0gdW5kZWZpbmVkICk7XG5cdFx0XHRjb25zdCBsZXZlbHMgPSBnZXRNaXBMZXZlbHMoIHRleHR1cmUsIGltYWdlLCBzdXBwb3J0c01pcHMgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdC8vIHBvcHVsYXRlIGRlcHRoIHRleHR1cmUgd2l0aCBkdW1teSBkYXRhXG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDY0MDI7XG5cblx0XHRcdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzNjAxMjtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUudHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzMxOTA7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLnR5cGUgPT09IFVuc2lnbmVkSW50MjQ4VHlwZSApIHtcblxuXHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDM1MDU2O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDMzMTg5OyAvLyBXZWJHTDIgcmVxdWlyZXMgc2l6ZWQgaW50ZXJuYWxmb3JtYXQgZm9yIGdsVGV4SW1hZ2UyRFxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gRmxvYXRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnV2ViR0xSZW5kZXJlcjogRmxvYXRpbmcgcG9pbnQgZGVwdGggdGV4dHVyZSByZXF1aXJlcyBXZWJHTDIuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyB2YWxpZGF0aW9uIGNoZWNrcyBmb3IgV2ViR0wgMVxuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5mb3JtYXQgPT09IERlcHRoRm9ybWF0ICYmIGdsSW50ZXJuYWxGb3JtYXQgPT09IDY0MDIgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmVcblx0XHRcdFx0XHQvLyBERVBUSF9DT01QT05FTlQgYW5kIHR5cGUgaXMgbm90IFVOU0lHTkVEX1NIT1JUIG9yIFVOU0lHTkVEX0lOVFxuXHRcdFx0XHRcdC8vIChodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2RlcHRoX3RleHR1cmUvKVxuXHRcdFx0XHRcdGlmICggdGV4dHVyZS50eXBlICE9PSBVbnNpZ25lZFNob3J0VHlwZSAmJiB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkSW50VHlwZSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVXNlIFVuc2lnbmVkU2hvcnRUeXBlIG9yIFVuc2lnbmVkSW50VHlwZSBmb3IgRGVwdGhGb3JtYXQgRGVwdGhUZXh0dXJlLicgKTtcblxuXHRcdFx0XHRcdFx0dGV4dHVyZS50eXBlID0gVW5zaWduZWRTaG9ydFR5cGU7XG5cdFx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICYmIGdsSW50ZXJuYWxGb3JtYXQgPT09IDY0MDIgKSB7XG5cblx0XHRcdFx0XHQvLyBEZXB0aCBzdGVuY2lsIHRleHR1cmVzIG5lZWQgdGhlIERFUFRIX1NURU5DSUwgaW50ZXJuYWwgZm9ybWF0XG5cdFx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDM0MDQxO1xuXG5cdFx0XHRcdFx0Ly8gVGhlIGVycm9yIElOVkFMSURfT1BFUkFUSU9OIGlzIGdlbmVyYXRlZCBieSB0ZXhJbWFnZTJEIGlmIGZvcm1hdCBhbmQgaW50ZXJuYWxmb3JtYXQgYXJlXG5cdFx0XHRcdFx0Ly8gREVQVEhfU1RFTkNJTCBhbmQgdHlwZSBpcyBub3QgVU5TSUdORURfSU5UXzI0XzhfV0VCR0wuXG5cdFx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkSW50MjQ4VHlwZSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVXNlIFVuc2lnbmVkSW50MjQ4VHlwZSBmb3IgRGVwdGhTdGVuY2lsRm9ybWF0IERlcHRoVGV4dHVyZS4nICk7XG5cblx0XHRcdFx0XHRcdHRleHR1cmUudHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTtcblx0XHRcdFx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggMzU1MywgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcblx0XHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHRcdC8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVsc1xuXG5cdFx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICYmIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCAzNTUzLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcHNbIDAgXS53aWR0aCwgbWlwbWFwc1sgMCBdLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIDM1NTMsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIDM1NTMsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIDM1NTMsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSApIHtcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIDM1NTMsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwc1sgMCBdLndpZHRoLCBtaXBtYXBzWyAwIF0uaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnbEZvcm1hdCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggMzU1MywgaSwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBnbEZvcm1hdCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnVwbG9hZFRleHR1cmUoKScgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIDM1NTMsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdGlmICggYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UzRCggMzU4NjYsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlM0QoIDM1ODY2LCAwLCAwLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCAzNTg2NiwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdGlmICggYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UzRCggMzI4NzksIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlM0QoIDMyODc5LCAwLCAwLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCAzMjg3OSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNGcmFtZWJ1ZmZlclRleHR1cmUgKSB7XG5cblx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCAzNTUzLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzU1MywgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyByZWd1bGFyIFRleHR1cmUgKGltYWdlLCB2aWRlbywgY2FudmFzKVxuXG5cdFx0XHRcdC8vIHVzZSBtYW51YWxseSBjcmVhdGVkIG1pcG1hcHMgaWYgYXZhaWxhYmxlXG5cdFx0XHRcdC8vIGlmIHRoZXJlIGFyZSBubyBtYW51YWwgbWlwbWFwc1xuXHRcdFx0XHQvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHNcblxuXHRcdFx0XHRpZiAoIG1pcG1hcHMubGVuZ3RoID4gMCAmJiBzdXBwb3J0c01pcHMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggMzU1MywgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBzWyAwIF0ud2lkdGgsIG1pcG1hcHNbIDAgXS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cblx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCAzNTUzLCBpLCAwLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggMzU1MywgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggMzU1MywgMCwgMCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggdGV4dHVyZVR5cGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzb3VyY2UuX19jdXJyZW50VmVyc2lvbiA9IHNvdXJjZS52ZXJzaW9uO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUub25VcGRhdGUgKSB0ZXh0dXJlLm9uVXBkYXRlKCB0ZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZEN1YmVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGlmICggdGV4dHVyZS5pbWFnZS5sZW5ndGggIT09IDYgKSByZXR1cm47XG5cblx0XHRjb25zdCBmb3JjZVVwbG9hZCA9IGluaXRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSApO1xuXHRcdGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UudmVyc2lvbiAhPT0gc291cmNlLl9fY3VycmVudFZlcnNpb24gfHwgZm9yY2VVcGxvYWQgPT09IHRydWUgKSB7XG5cblx0XHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDAsIHRleHR1cmUuZmxpcFkgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDEsIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCAzMzE3LCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MywgMCApO1xuXG5cdFx0XHRjb25zdCBpc0NvbXByZXNzZWQgPSAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaXNDb21wcmVzc2VkVGV4dHVyZSApO1xuXHRcdFx0Y29uc3QgaXNEYXRhVGV4dHVyZSA9ICggdGV4dHVyZS5pbWFnZVsgMCBdICYmIHRleHR1cmUuaW1hZ2VbIDAgXS5pc0RhdGFUZXh0dXJlICk7XG5cblx0XHRcdGNvbnN0IGN1YmVJbWFnZSA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggISBpc0NvbXByZXNzZWQgJiYgISBpc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSByZXNpemVJbWFnZSggdGV4dHVyZS5pbWFnZVsgaSBdLCBmYWxzZSwgdHJ1ZSwgbWF4Q3ViZW1hcFNpemUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSBpc0RhdGFUZXh0dXJlID8gdGV4dHVyZS5pbWFnZVsgaSBdLmltYWdlIDogdGV4dHVyZS5pbWFnZVsgaSBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdWJlSW1hZ2VbIGkgXSA9IHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGN1YmVJbWFnZVsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgaW1hZ2UgPSBjdWJlSW1hZ2VbIDAgXSxcblx0XHRcdFx0c3VwcG9ydHNNaXBzID0gaXNQb3dlck9mVHdvJDEoIGltYWdlICkgfHwgaXNXZWJHTDIsXG5cdFx0XHRcdGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuZW5jb2RpbmcgKSxcblx0XHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICksXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5lbmNvZGluZyApO1xuXG5cdFx0XHRjb25zdCB1c2VUZXhTdG9yYWdlID0gKCBpc1dlYkdMMiAmJiB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICE9PSB0cnVlICk7XG5cdFx0XHRjb25zdCBhbGxvY2F0ZU1lbW9yeSA9ICggdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID09PSB1bmRlZmluZWQgKTtcblx0XHRcdGxldCBsZXZlbHMgPSBnZXRNaXBMZXZlbHMoIHRleHR1cmUsIGltYWdlLCBzdXBwb3J0c01pcHMgKTtcblxuXHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIDM0MDY3LCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKTtcblxuXHRcdFx0bGV0IG1pcG1hcHM7XG5cblx0XHRcdGlmICggaXNDb21wcmVzc2VkICkge1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggMzQwNjcsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwcyA9IGN1YmVJbWFnZVsgaSBdLm1pcG1hcHM7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKCAzNDA2OSArIGksIGosIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC5zZXRUZXh0dXJlQ3ViZSgpJyApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCAzNDA2OSArIGksIGosIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7XG5cblx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0Ly8gVE9ETzogVW5pZm9ybWx5IGhhbmRsZSBtaXBtYXAgZGVmaW5pdGlvbnNcblx0XHRcdFx0XHQvLyBOb3JtYWwgdGV4dHVyZXMgYW5kIGNvbXByZXNzZWQgY3ViZSB0ZXh0dXJlcyBkZWZpbmUgYmFzZSBsZXZlbCArIG1pcHMgd2l0aCB0aGVpciBtaXBtYXAgYXJyYXlcblx0XHRcdFx0XHQvLyBVbmNvbXByZXNzZWQgY3ViZSB0ZXh0dXJlcyB1c2UgdGhlaXIgbWlwbWFwIGFycmF5IG9ubHkgZm9yIG1pcHMgKG5vIGJhc2UgbGV2ZWwpXG5cblx0XHRcdFx0XHRpZiAoIG1pcG1hcHMubGVuZ3RoID4gMCApIGxldmVscyArKztcblxuXHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggMzQwNjcsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgY3ViZUltYWdlWyAwIF0ud2lkdGgsIGN1YmVJbWFnZVsgMCBdLmhlaWdodCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBpc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggMzQwNjkgKyBpLCAwLCAwLCAwLCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBtaXBtYXBJbWFnZSA9IG1pcG1hcC5pbWFnZVsgaSBdLmltYWdlO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIDM0MDY5ICsgaSwgaiArIDEsIDAsIDAsIG1pcG1hcEltYWdlLndpZHRoLCBtaXBtYXBJbWFnZS5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcEltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqICsgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwSW1hZ2Uud2lkdGgsIG1pcG1hcEltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwSW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIDM0MDY5ICsgaSwgMCwgMCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNDA2OSArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIDM0MDY5ICsgaSwgaiArIDEsIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5pbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgaiArIDEsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5pbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSApIHtcblxuXHRcdFx0XHQvLyBXZSBhc3N1bWUgaW1hZ2VzIGZvciBjdWJlIG1hcCBoYXZlIHRoZSBzYW1lIHNpemUuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCAzNDA2NyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNvdXJjZS5fX2N1cnJlbnRWZXJzaW9uID0gc291cmNlLnZlcnNpb247XG5cblx0XHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHR9XG5cblx0Ly8gUmVuZGVyIHRhcmdldHNcblxuXHQvLyBTZXR1cCBzdG9yYWdlIGZvciB0YXJnZXQgdGV4dHVyZSBhbmQgYmluZCBpdCB0byBjb3JyZWN0IGZyYW1lYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0ZXh0dXJlLCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5lbmNvZGluZyApO1xuXHRcdGNvbnN0IGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXHRcdGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5lbmNvZGluZyApO1xuXHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpZiAoICEgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2hhc0V4dGVybmFsVGV4dHVyZXMgKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZVRhcmdldCA9PT0gMzI4NzkgfHwgdGV4dHVyZVRhcmdldCA9PT0gMzU4NjYgKSB7XG5cblx0XHRcdFx0c3RhdGUudGV4SW1hZ2UzRCggdGV4dHVyZVRhcmdldCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0LCByZW5kZXJUYXJnZXQuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCB0ZXh0dXJlVGFyZ2V0LCAwLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LmZyYW1lYnVmZmVyVGV4dHVyZTJETXVsdGlzYW1wbGVFWFQoIDM2MTYwLCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCAwLCBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCwgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgMCApO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgbnVsbCApO1xuXG5cdH1cblxuXG5cdC8vIFNldHVwIHN0b3JhZ2UgZm9yIGludGVybmFsIGRlcHRoL3N0ZW5jaWwgYnVmZmVycyBhbmQgYmluZCB0byBjb3JyZWN0IGZyYW1lYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyYnVmZmVyLCByZW5kZXJUYXJnZXQsIGlzTXVsdGlzYW1wbGUgKSB7XG5cblx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggMzYxNjEsIHJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgISByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciApIHtcblxuXHRcdFx0bGV0IGdsSW50ZXJuYWxGb3JtYXQgPSAzMzE4OTtcblxuXHRcdFx0aWYgKCBpc011bHRpc2FtcGxlIHx8IHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGVwdGhUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZTtcblxuXHRcdFx0XHRpZiAoIGRlcHRoVGV4dHVyZSAmJiBkZXB0aFRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRlcHRoVGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzNjAxMjtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRlcHRoVGV4dHVyZS50eXBlID09PSBVbnNpZ25lZEludFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzMzE5MDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3Qgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGVFWFQoIDM2MTYxLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggMzYxNjEsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggMzYxNjEsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggMzYxNjAsIDM2MDk2LCAzNjE2MSwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSB7XG5cblx0XHRcdGNvbnN0IHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0aWYgKCBpc011bHRpc2FtcGxlICYmIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIDM2MTYxLCBzYW1wbGVzLCAzNTA1NiwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCggMzYxNjEsIHNhbXBsZXMsIDM1MDU2LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggMzYxNjEsIDM0MDQxLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggMzYxNjAsIDMzMzA2LCAzNjE2MSwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGZpcnN0IHRleHR1cmUgZm9yIE1SVCBzbyBmYXJcblx0XHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyA9PT0gdHJ1ZSA/IHJlbmRlclRhcmdldC50ZXh0dXJlWyAwIF0gOiByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5lbmNvZGluZyApO1xuXHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cdFx0XHRjb25zdCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuZW5jb2RpbmcgKTtcblx0XHRcdGNvbnN0IHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0aWYgKCBpc011bHRpc2FtcGxlICYmIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIDM2MTYxLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlRVhUKCAzNjE2MSwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIDM2MTYxLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIFNldHVwIHJlc291cmNlcyBmb3IgYSBEZXB0aCBUZXh0dXJlIGZvciBhIEZCTyAobmVlZHMgYW4gZXh0ZW5zaW9uKVxuXHRmdW5jdGlvbiBzZXR1cERlcHRoVGV4dHVyZSggZnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCApO1xuXHRcdGlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAnRGVwdGggVGV4dHVyZSB3aXRoIGN1YmUgcmVuZGVyIHRhcmdldHMgaXMgbm90IHN1cHBvcnRlZCcgKTtcblxuXHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRpZiAoICEgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICYmIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAncmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFRIUkVFLkRlcHRoVGV4dHVyZScgKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwbG9hZCBhbiBlbXB0eSBkZXB0aCB0ZXh0dXJlIHdpdGggZnJhbWVidWZmZXIgc2l6ZVxuXHRcdGlmICggISBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlIHx8XG5cdFx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggIT09IHJlbmRlclRhcmdldC53aWR0aCB8fFxuXHRcdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLmhlaWdodCAhPT0gcmVuZGVyVGFyZ2V0LmhlaWdodCApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDtcblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0c2V0VGV4dHVyZTJEKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLCAwICk7XG5cblx0XHRjb25zdCB3ZWJnbERlcHRoVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmU7XG5cdFx0Y29uc3Qgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgKSB7XG5cblx0XHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQuZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCggMzYxNjAsIDM2MDk2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCwgc2FtcGxlcyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDM2MDk2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkge1xuXG5cdFx0XHRpZiAoIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LmZyYW1lYnVmZmVyVGV4dHVyZTJETXVsdGlzYW1wbGVFWFQoIDM2MTYwLCAzMzMwNiwgMzU1Mywgd2ViZ2xEZXB0aFRleHR1cmUsIDAsIHNhbXBsZXMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIDM2MTYwLCAzMzMwNiwgMzU1Mywgd2ViZ2xEZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVW5rbm93biBkZXB0aFRleHR1cmUgZm9ybWF0JyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBTZXR1cCBHTCByZXNvdXJjZXMgZm9yIGEgbm9uLXRleHR1cmUgZGVwdGggYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0Y29uc3QgaXNDdWJlID0gKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPT09IHRydWUgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSAmJiAhIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19hdXRvQWxsb2NhdGVEZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0aWYgKCBpc0N1YmUgKSB0aHJvdyBuZXcgRXJyb3IoICd0YXJnZXQuZGVwdGhUZXh0dXJlIG5vdCBzdXBwb3J0ZWQgaW4gQ3ViZSByZW5kZXIgdGFyZ2V0cycgKTtcblxuXHRcdFx0c2V0dXBEZXB0aFRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyID0gW107XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gKTtcblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRcdHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSwgcmVuZGVyVGFyZ2V0LCBmYWxzZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBmYWxzZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIHJlYmluZCBmcmFtZWJ1ZmZlciB3aXRoIGV4dGVybmFsIHRleHR1cmVzXG5cdGZ1bmN0aW9uIHJlYmluZFRleHR1cmVzKCByZW5kZXJUYXJnZXQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGlmICggY29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCByZW5kZXJUYXJnZXQudGV4dHVyZSwgMzYwNjQsIDM1NTMgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGVwdGhUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBTZXQgdXAgR0wgcmVzb3VyY2VzIGZvciB0aGUgcmVuZGVyIHRhcmdldFxuXHRmdW5jdGlvbiBzZXR1cFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMgIT09IHRydWUgKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCA9PT0gdHJ1ZSApO1xuXHRcdGNvbnN0IGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzID0gKCByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyA9PT0gdHJ1ZSApO1xuXHRcdGNvbnN0IHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byQxKCByZW5kZXJUYXJnZXQgKSB8fCBpc1dlYkdMMjtcblxuXHRcdC8vIFNldHVwIGZyYW1lYnVmZmVyXG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdGlmICggaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7XG5cblx0XHRcdFx0aWYgKCBjYXBhYmlsaXRpZXMuZHJhd0J1ZmZlcnMgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBhdHRhY2htZW50UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlc1sgaSBdICk7XG5cblx0XHRcdFx0XHRcdGlmICggYXR0YWNobWVudFByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFdlYkdMMiBvciBXRUJHTF9kcmF3X2J1ZmZlcnMgZXh0ZW5zaW9uLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoICggaXNXZWJHTDIgJiYgcmVuZGVyVGFyZ2V0LnNhbXBsZXMgPiAwICkgJiYgdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cblx0XHRcdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0XHRcdGNvbnN0IGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuZW5jb2RpbmcgKTtcblx0XHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cdFx0XHRcdGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5lbmNvZGluZyApO1xuXHRcdFx0XHRjb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIDM2MTYxLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIDM2MTYwLCAzNjA2NCwgMzYxNjEsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyICk7XG5cdFx0XHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCAzNjE2MSwgbnVsbCApO1xuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0cnVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIG51bGwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gU2V0dXAgY29sb3IgYnVmZmVyXG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIDM0MDY3LCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSwgcmVuZGVyVGFyZ2V0LCB0ZXh0dXJlLCAzNjA2NCwgMzQwNjkgKyBpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCAzNDA2NyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdH0gZWxzZSBpZiAoIGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0YWNobWVudCA9IHRleHR1cmVzWyBpIF07XG5cdFx0XHRcdGNvbnN0IGF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIGF0dGFjaG1lbnQgKTtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgYXR0YWNobWVudFByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIDM1NTMsIGF0dGFjaG1lbnQsIHN1cHBvcnRzTWlwcyApO1xuXHRcdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgYXR0YWNobWVudCwgMzYwNjQgKyBpLCAzNTUzICk7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIGF0dGFjaG1lbnQsIHN1cHBvcnRzTWlwcyApICkge1xuXG5cdFx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM1NTMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bGV0IGdsVGV4dHVyZVR5cGUgPSAzNTUzO1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMM0RSZW5kZXJUYXJnZXQgfHwgcmVuZGVyVGFyZ2V0LmlzV2ViR0xBcnJheVJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHRpZiAoIGlzV2ViR0wyICkge1xuXG5cdFx0XHRcdFx0Z2xUZXh0dXJlVHlwZSA9IHJlbmRlclRhcmdldC5pc1dlYkdMM0RSZW5kZXJUYXJnZXQgPyAzMjg3OSA6IDM1ODY2O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xUZXh0dXJlczogVEhSRUUuRGF0YTNEVGV4dHVyZSBhbmQgVEhSRUUuRGF0YUFycmF5VGV4dHVyZSBvbmx5IHN1cHBvcnRlZCB3aXRoIFdlYkdMMi4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBnbFRleHR1cmVUeXBlLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIDM2MDY0LCBnbFRleHR1cmVUeXBlICk7XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggZ2xUZXh0dXJlVHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGRlcHRoIGFuZCBzdGVuY2lsIGJ1ZmZlcnNcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBzdXBwb3J0c01pcHMgPSBpc1Bvd2VyT2ZUd28kMSggcmVuZGVyVGFyZ2V0ICkgfHwgaXNXZWJHTDI7XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlwbGVSZW5kZXJUYXJnZXRzID09PSB0cnVlID8gcmVuZGVyVGFyZ2V0LnRleHR1cmUgOiBbIHJlbmRlclRhcmdldC50ZXh0dXJlIF07XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmUgPSB0ZXh0dXJlc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGFyZ2V0ID0gcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID8gMzQwNjcgOiAzNTUzO1xuXHRcdFx0XHRjb25zdCB3ZWJnbFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlO1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0YXJnZXQsIHdlYmdsVGV4dHVyZSApO1xuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggdGFyZ2V0ICk7XG5cdFx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0aWYgKCAoIGlzV2ViR0wyICYmIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCApICYmIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zdCB3aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDtcblx0XHRcdGNvbnN0IGhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG5cdFx0XHRsZXQgbWFzayA9IDE2Mzg0O1xuXHRcdFx0Y29uc3QgaW52YWxpZGF0aW9uQXJyYXkgPSBbIDM2MDY0IF07XG5cdFx0XHRjb25zdCBkZXB0aFN0eWxlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyAzMzMwNiA6IDM2MDk2O1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRpbnZhbGlkYXRpb25BcnJheS5wdXNoKCBkZXB0aFN0eWxlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdGNvbnN0IGlnbm9yZURlcHRoVmFsdWVzID0gKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faWdub3JlRGVwdGhWYWx1ZXMgIT09IHVuZGVmaW5lZCApID8gcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2lnbm9yZURlcHRoVmFsdWVzIDogZmFsc2U7XG5cblx0XHRcdGlmICggaWdub3JlRGVwdGhWYWx1ZXMgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkgbWFzayB8PSAyNTY7XG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSBtYXNrIHw9IDEwMjQ7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCAzNjAwOCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYwMDksIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cblx0XHRcdGlmICggaWdub3JlRGVwdGhWYWx1ZXMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0X2dsLmludmFsaWRhdGVGcmFtZWJ1ZmZlciggMzYwMDgsIFsgZGVwdGhTdHlsZSBdICk7XG5cdFx0XHRcdF9nbC5pbnZhbGlkYXRlRnJhbWVidWZmZXIoIDM2MDA5LCBbIGRlcHRoU3R5bGUgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC5ibGl0RnJhbWVidWZmZXIoIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIG1hc2ssIDk3MjggKTtcblxuXHRcdFx0aWYgKCBzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHRfZ2wuaW52YWxpZGF0ZUZyYW1lYnVmZmVyKCAzNjAwOCwgaW52YWxpZGF0aW9uQXJyYXkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MDA4LCBudWxsICk7XG5cdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MDA5LCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5taW4oIG1heFNhbXBsZXMsIHJlbmRlclRhcmdldC5zYW1wbGVzICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJldHVybiBpc1dlYkdMMiAmJiByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgJiYgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgPT09IHRydWUgJiYgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3VzZVJlbmRlclRvVGV4dHVyZSAhPT0gZmFsc2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVZpZGVvVGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHQvLyBDaGVjayB0aGUgbGFzdCBmcmFtZSB3ZSB1cGRhdGVkIHRoZSBWaWRlb1RleHR1cmVcblxuXHRcdGlmICggX3ZpZGVvVGV4dHVyZXMuZ2V0KCB0ZXh0dXJlICkgIT09IGZyYW1lICkge1xuXG5cdFx0XHRfdmlkZW9UZXh0dXJlcy5zZXQoIHRleHR1cmUsIGZyYW1lICk7XG5cdFx0XHR0ZXh0dXJlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB2ZXJpZnlDb2xvclNwYWNlKCB0ZXh0dXJlLCBpbWFnZSApIHtcblxuXHRcdGNvbnN0IGVuY29kaW5nID0gdGV4dHVyZS5lbmNvZGluZztcblx0XHRjb25zdCBmb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcblx0XHRjb25zdCB0eXBlID0gdGV4dHVyZS50eXBlO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgPT09IHRydWUgfHwgdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSB8fCB0ZXh0dXJlLmZvcm1hdCA9PT0gX1NSR0JBRm9ybWF0ICkgcmV0dXJuIGltYWdlO1xuXG5cdFx0aWYgKCBlbmNvZGluZyAhPT0gTGluZWFyRW5jb2RpbmcgKSB7XG5cblx0XHRcdC8vIHNSR0JcblxuXHRcdFx0aWYgKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkge1xuXG5cdFx0XHRcdGlmICggaXNXZWJHTDIgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0Ly8gaW4gV2ViR0wgMSwgdHJ5IHRvIHVzZSBFWFRfc1JHQiBleHRlbnNpb24gYW5kIHVuc2l6ZWQgZm9ybWF0c1xuXG5cdFx0XHRcdFx0aWYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF9zUkdCJyApID09PSB0cnVlICYmIGZvcm1hdCA9PT0gUkdCQUZvcm1hdCApIHtcblxuXHRcdFx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSBfU1JHQkFGb3JtYXQ7XG5cblx0XHRcdFx0XHRcdC8vIGl0J3Mgbm90IHBvc3NpYmxlIHRvIGdlbmVyYXRlIG1pcHMgaW4gV2ViR0wgMSB3aXRoIHRoaXMgZXh0ZW5zaW9uXG5cblx0XHRcdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXHRcdFx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIHNsb3cgZmFsbGJhY2sgKENQVSBkZWNvZGUpXG5cblx0XHRcdFx0XHRcdGltYWdlID0gSW1hZ2VVdGlscy5zUkdCVG9MaW5lYXIoIGltYWdlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGluIFdlYkdMIDIgdW5jb21wcmVzc2VkIHRleHR1cmVzIGNhbiBvbmx5IGJlIHNSR0IgZW5jb2RlZCBpZiB0aGV5IGhhdmUgdGhlIFJHQkE4IGZvcm1hdFxuXG5cdFx0XHRcdFx0aWYgKCBmb3JtYXQgIT09IFJHQkFGb3JtYXQgfHwgdHlwZSAhPT0gVW5zaWduZWRCeXRlVHlwZSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xUZXh0dXJlczogc1JHQiBlbmNvZGVkIHRleHR1cmVzIGhhdmUgdG8gdXNlIFJHQkFGb3JtYXQgYW5kIFVuc2lnbmVkQnl0ZVR5cGUuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xUZXh0dXJlczogVW5zdXBwb3J0ZWQgdGV4dHVyZSBlbmNvZGluZzonLCBlbmNvZGluZyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5hbGxvY2F0ZVRleHR1cmVVbml0ID0gYWxsb2NhdGVUZXh0dXJlVW5pdDtcblx0dGhpcy5yZXNldFRleHR1cmVVbml0cyA9IHJlc2V0VGV4dHVyZVVuaXRzO1xuXG5cdHRoaXMuc2V0VGV4dHVyZTJEID0gc2V0VGV4dHVyZTJEO1xuXHR0aGlzLnNldFRleHR1cmUyREFycmF5ID0gc2V0VGV4dHVyZTJEQXJyYXk7XG5cdHRoaXMuc2V0VGV4dHVyZTNEID0gc2V0VGV4dHVyZTNEO1xuXHR0aGlzLnNldFRleHR1cmVDdWJlID0gc2V0VGV4dHVyZUN1YmU7XG5cdHRoaXMucmViaW5kVGV4dHVyZXMgPSByZWJpbmRUZXh0dXJlcztcblx0dGhpcy5zZXR1cFJlbmRlclRhcmdldCA9IHNldHVwUmVuZGVyVGFyZ2V0O1xuXHR0aGlzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCA9IHVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcDtcblx0dGhpcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCA9IHVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0O1xuXHR0aGlzLnNldHVwRGVwdGhSZW5kZXJidWZmZXIgPSBzZXR1cERlcHRoUmVuZGVyYnVmZmVyO1xuXHR0aGlzLnNldHVwRnJhbWVCdWZmZXJUZXh0dXJlID0gc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmU7XG5cdHRoaXMudXNlTXVsdGlzYW1wbGVkUlRUID0gdXNlTXVsdGlzYW1wbGVkUlRUO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMVXRpbHMoIGdsLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0Y29uc3QgaXNXZWJHTDIgPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDI7XG5cblx0ZnVuY3Rpb24gY29udmVydCggcCwgZW5jb2RpbmcgPSBudWxsICkge1xuXG5cdFx0bGV0IGV4dGVuc2lvbjtcblxuXHRcdGlmICggcCA9PT0gVW5zaWduZWRCeXRlVHlwZSApIHJldHVybiA1MTIxO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDQ0NDRUeXBlICkgcmV0dXJuIDMyODE5O1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDU1NTFUeXBlICkgcmV0dXJuIDMyODIwO1xuXG5cdFx0aWYgKCBwID09PSBCeXRlVHlwZSApIHJldHVybiA1MTIwO1xuXHRcdGlmICggcCA9PT0gU2hvcnRUeXBlICkgcmV0dXJuIDUxMjI7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHJldHVybiA1MTIzO1xuXHRcdGlmICggcCA9PT0gSW50VHlwZSApIHJldHVybiA1MTI0O1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnRUeXBlICkgcmV0dXJuIDUxMjU7XG5cdFx0aWYgKCBwID09PSBGbG9hdFR5cGUgKSByZXR1cm4gNTEyNjtcblxuXHRcdGlmICggcCA9PT0gSGFsZkZsb2F0VHlwZSApIHtcblxuXHRcdFx0aWYgKCBpc1dlYkdMMiApIHJldHVybiA1MTMxO1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBleHRlbnNpb24uSEFMRl9GTE9BVF9PRVM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gQWxwaGFGb3JtYXQgKSByZXR1cm4gNjQwNjtcblx0XHRpZiAoIHAgPT09IFJHQkFGb3JtYXQgKSByZXR1cm4gNjQwODtcblx0XHRpZiAoIHAgPT09IEx1bWluYW5jZUZvcm1hdCApIHJldHVybiA2NDA5O1xuXHRcdGlmICggcCA9PT0gTHVtaW5hbmNlQWxwaGFGb3JtYXQgKSByZXR1cm4gNjQxMDtcblx0XHRpZiAoIHAgPT09IERlcHRoRm9ybWF0ICkgcmV0dXJuIDY0MDI7XG5cdFx0aWYgKCBwID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSByZXR1cm4gMzQwNDE7XG5cdFx0aWYgKCBwID09PSBSZWRGb3JtYXQgKSByZXR1cm4gNjQwMztcblxuXHRcdGlmICggcCA9PT0gUkdCRm9ybWF0ICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUSFJFRS5SR0JGb3JtYXQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLlJHQkFGb3JtYXQgaW5zdGVhZC4gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzIzMjI4JyApO1xuXHRcdFx0cmV0dXJuIDY0MDg7XG5cblx0XHR9XG5cblx0XHQvLyBXZWJHTCAxIHNSR0IgZmFsbGJhY2tcblxuXHRcdGlmICggcCA9PT0gX1NSR0JBRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF9zUkdCJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXh0ZW5zaW9uLlNSR0JfQUxQSEFfRVhUO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBXZWJHTDIgZm9ybWF0cy5cblxuXHRcdGlmICggcCA9PT0gUmVkSW50ZWdlckZvcm1hdCApIHJldHVybiAzNjI0NDtcblx0XHRpZiAoIHAgPT09IFJHRm9ybWF0ICkgcmV0dXJuIDMzMzE5O1xuXHRcdGlmICggcCA9PT0gUkdJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIDMzMzIwO1xuXHRcdGlmICggcCA9PT0gUkdCQUludGVnZXJGb3JtYXQgKSByZXR1cm4gMzYyNDk7XG5cblx0XHQvLyBTM1RDXG5cblx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkge1xuXG5cdFx0XHRpZiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSB7XG5cblx0XHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y19zcmdiJyApO1xuXG5cdFx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQzX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUNV9FWFQ7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApO1xuXG5cdFx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBQVlJUQ1xuXG5cdFx0aWYgKCBwID09PSBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRztcblx0XHRcdFx0aWYgKCBwID09PSBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRztcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIEVUQzFcblxuXHRcdGlmICggcCA9PT0gUkdCX0VUQzFfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0w7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIEVUQzJcblxuXHRcdGlmICggcCA9PT0gUkdCX0VUQzJfRm9ybWF0IHx8IHAgPT09IFJHQkFfRVRDMl9FQUNfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX0VUQzJfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfRVRDMiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQjhfRVRDMjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0VUQzJfRUFDX0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQyA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBBU1RDXG5cblx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ180eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNHg0X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNXg1X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNng1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg2X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4OF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgKSByZXR1cm4gKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgKSByZXR1cm4gKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg2X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgKSByZXR1cm4gKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg4X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDEwX0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEwX0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQlBUQ1xuXG5cdFx0aWYgKCBwID09PSBSR0JBX0JQVENfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX2JwdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9CUFRDX0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfQlBUQ19VTk9STV9FWFQgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0JQVENfVU5PUk1fRVhUO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7XG5cblx0XHRcdGlmICggaXNXZWJHTDIgKSByZXR1cm4gMzQwNDI7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGV4dGVuc2lvbi5VTlNJR05FRF9JTlRfMjRfOF9XRUJHTDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4geyBjb252ZXJ0OiBjb252ZXJ0IH07XG5cbn1cblxuY2xhc3MgQXJyYXlDYW1lcmEgZXh0ZW5kcyBQZXJzcGVjdGl2ZUNhbWVyYSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5ID0gW10gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5jYW1lcmFzID0gYXJyYXk7XG5cblx0fVxuXG59XG5cbkFycmF5Q2FtZXJhLnByb3RvdHlwZS5pc0FycmF5Q2FtZXJhID0gdHJ1ZTtcblxuY2xhc3MgR3JvdXAgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0dyb3VwJztcblxuXHR9XG5cbn1cblxuR3JvdXAucHJvdG90eXBlLmlzR3JvdXAgPSB0cnVlO1xuXG5jb25zdCBfbW92ZUV2ZW50ID0geyB0eXBlOiAnbW92ZScgfTtcblxuY2xhc3MgV2ViWFJDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuX3RhcmdldFJheSA9IG51bGw7XG5cdFx0dGhpcy5fZ3JpcCA9IG51bGw7XG5cdFx0dGhpcy5faGFuZCA9IG51bGw7XG5cblx0fVxuXG5cdGdldEhhbmRTcGFjZSgpIHtcblxuXHRcdGlmICggdGhpcy5faGFuZCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5faGFuZCA9IG5ldyBHcm91cCgpO1xuXHRcdFx0dGhpcy5faGFuZC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9oYW5kLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0dGhpcy5faGFuZC5qb2ludHMgPSB7fTtcblx0XHRcdHRoaXMuX2hhbmQuaW5wdXRTdGF0ZSA9IHsgcGluY2hpbmc6IGZhbHNlIH07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5faGFuZDtcblxuXHR9XG5cblx0Z2V0VGFyZ2V0UmF5U3BhY2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuX3RhcmdldFJheSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5ID0gbmV3IEdyb3VwKCk7XG5cdFx0XHR0aGlzLl90YXJnZXRSYXkubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LnZpc2libGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuX3RhcmdldFJheS5oYXNMaW5lYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LmxpbmVhclZlbG9jaXR5ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHRoaXMuX3RhcmdldFJheS5oYXNBbmd1bGFyVmVsb2NpdHkgPSBmYWxzZTtcblx0XHRcdHRoaXMuX3RhcmdldFJheS5hbmd1bGFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3RhcmdldFJheTtcblxuXHR9XG5cblx0Z2V0R3JpcFNwYWNlKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9ncmlwID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9ncmlwID0gbmV3IEdyb3VwKCk7XG5cdFx0XHR0aGlzLl9ncmlwLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuX2dyaXAudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5oYXNMaW5lYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5saW5lYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR0aGlzLl9ncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5hbmd1bGFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2dyaXA7XG5cblx0fVxuXG5cdGRpc3BhdGNoRXZlbnQoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl90YXJnZXRSYXkgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3RhcmdldFJheS5kaXNwYXRjaEV2ZW50KCBldmVudCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9ncmlwICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9ncmlwLmRpc3BhdGNoRXZlbnQoIGV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX2hhbmQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2hhbmQuZGlzcGF0Y2hFdmVudCggZXZlbnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXNjb25uZWN0KCBpbnB1dFNvdXJjZSApIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzY29ubmVjdGVkJywgZGF0YTogaW5wdXRTb3VyY2UgfSApO1xuXG5cdFx0aWYgKCB0aGlzLl90YXJnZXRSYXkgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3RhcmdldFJheS52aXNpYmxlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX2dyaXAgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2dyaXAudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9oYW5kICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9oYW5kLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR1cGRhdGUoIGlucHV0U291cmNlLCBmcmFtZSwgcmVmZXJlbmNlU3BhY2UgKSB7XG5cblx0XHRsZXQgaW5wdXRQb3NlID0gbnVsbDtcblx0XHRsZXQgZ3JpcFBvc2UgPSBudWxsO1xuXHRcdGxldCBoYW5kUG9zZSA9IG51bGw7XG5cblx0XHRjb25zdCB0YXJnZXRSYXkgPSB0aGlzLl90YXJnZXRSYXk7XG5cdFx0Y29uc3QgZ3JpcCA9IHRoaXMuX2dyaXA7XG5cdFx0Y29uc3QgaGFuZCA9IHRoaXMuX2hhbmQ7XG5cblx0XHRpZiAoIGlucHV0U291cmNlICYmIGZyYW1lLnNlc3Npb24udmlzaWJpbGl0eVN0YXRlICE9PSAndmlzaWJsZS1ibHVycmVkJyApIHtcblxuXHRcdFx0aWYgKCB0YXJnZXRSYXkgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aW5wdXRQb3NlID0gZnJhbWUuZ2V0UG9zZSggaW5wdXRTb3VyY2UudGFyZ2V0UmF5U3BhY2UsIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRcdFx0aWYgKCBpbnB1dFBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR0YXJnZXRSYXkubWF0cml4LmZyb21BcnJheSggaW5wdXRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTtcblx0XHRcdFx0XHR0YXJnZXRSYXkubWF0cml4LmRlY29tcG9zZSggdGFyZ2V0UmF5LnBvc2l0aW9uLCB0YXJnZXRSYXkucm90YXRpb24sIHRhcmdldFJheS5zY2FsZSApO1xuXG5cdFx0XHRcdFx0aWYgKCBpbnB1dFBvc2UubGluZWFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdHRhcmdldFJheS5oYXNMaW5lYXJWZWxvY2l0eSA9IHRydWU7XG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkubGluZWFyVmVsb2NpdHkuY29weSggaW5wdXRQb3NlLmxpbmVhclZlbG9jaXR5ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuaGFzTGluZWFyVmVsb2NpdHkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaW5wdXRQb3NlLmFuZ3VsYXJWZWxvY2l0eSApIHtcblxuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5Lmhhc0FuZ3VsYXJWZWxvY2l0eSA9IHRydWU7XG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuYW5ndWxhclZlbG9jaXR5LmNvcHkoIGlucHV0UG9zZS5hbmd1bGFyVmVsb2NpdHkgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRhcmdldFJheS5oYXNBbmd1bGFyVmVsb2NpdHkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggX21vdmVFdmVudCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhbmQgJiYgaW5wdXRTb3VyY2UuaGFuZCApIHtcblxuXHRcdFx0XHRoYW5kUG9zZSA9IHRydWU7XG5cblx0XHRcdFx0Zm9yICggY29uc3QgaW5wdXRqb2ludCBvZiBpbnB1dFNvdXJjZS5oYW5kLnZhbHVlcygpICkge1xuXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBqb2ludHMgZ3JvdXBzIHdpdGggdGhlIFhSSm9pbnQgcG9zZXNcblx0XHRcdFx0XHRjb25zdCBqb2ludFBvc2UgPSBmcmFtZS5nZXRKb2ludFBvc2UoIGlucHV0am9pbnQsIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmQuam9pbnRzWyBpbnB1dGpvaW50LmpvaW50TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFRoZSB0cmFuc2Zvcm0gb2YgdGhpcyBqb2ludCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCB0aGUgam9pbnQgcG9zZSBvbiBlYWNoIGZyYW1lXG5cdFx0XHRcdFx0XHRjb25zdCBqb2ludCA9IG5ldyBHcm91cCgpO1xuXHRcdFx0XHRcdFx0am9pbnQubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0am9pbnQudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0aGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF0gPSBqb2ludDtcblx0XHRcdFx0XHRcdC8vID8/XG5cdFx0XHRcdFx0XHRoYW5kLmFkZCggam9pbnQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IGpvaW50ID0gaGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF07XG5cblx0XHRcdFx0XHRpZiAoIGpvaW50UG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0am9pbnQubWF0cml4LmZyb21BcnJheSggam9pbnRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTtcblx0XHRcdFx0XHRcdGpvaW50Lm1hdHJpeC5kZWNvbXBvc2UoIGpvaW50LnBvc2l0aW9uLCBqb2ludC5yb3RhdGlvbiwgam9pbnQuc2NhbGUgKTtcblx0XHRcdFx0XHRcdGpvaW50LmpvaW50UmFkaXVzID0gam9pbnRQb3NlLnJhZGl1cztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpvaW50LnZpc2libGUgPSBqb2ludFBvc2UgIT09IG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEN1c3RvbSBldmVudHNcblxuXHRcdFx0XHQvLyBDaGVjayBwaW5jaHpcblx0XHRcdFx0Y29uc3QgaW5kZXhUaXAgPSBoYW5kLmpvaW50c1sgJ2luZGV4LWZpbmdlci10aXAnIF07XG5cdFx0XHRcdGNvbnN0IHRodW1iVGlwID0gaGFuZC5qb2ludHNbICd0aHVtYi10aXAnIF07XG5cdFx0XHRcdGNvbnN0IGRpc3RhbmNlID0gaW5kZXhUaXAucG9zaXRpb24uZGlzdGFuY2VUbyggdGh1bWJUaXAucG9zaXRpb24gKTtcblxuXHRcdFx0XHRjb25zdCBkaXN0YW5jZVRvUGluY2ggPSAwLjAyO1xuXHRcdFx0XHRjb25zdCB0aHJlc2hvbGQgPSAwLjAwNTtcblxuXHRcdFx0XHRpZiAoIGhhbmQuaW5wdXRTdGF0ZS5waW5jaGluZyAmJiBkaXN0YW5jZSA+IGRpc3RhbmNlVG9QaW5jaCArIHRocmVzaG9sZCApIHtcblxuXHRcdFx0XHRcdGhhbmQuaW5wdXRTdGF0ZS5waW5jaGluZyA9IGZhbHNlO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ3BpbmNoZW5kJyxcblx0XHRcdFx0XHRcdGhhbmRlZG5lc3M6IGlucHV0U291cmNlLmhhbmRlZG5lc3MsXG5cdFx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggISBoYW5kLmlucHV0U3RhdGUucGluY2hpbmcgJiYgZGlzdGFuY2UgPD0gZGlzdGFuY2VUb1BpbmNoIC0gdGhyZXNob2xkICkge1xuXG5cdFx0XHRcdFx0aGFuZC5pbnB1dFN0YXRlLnBpbmNoaW5nID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHtcblx0XHRcdFx0XHRcdHR5cGU6ICdwaW5jaHN0YXJ0Jyxcblx0XHRcdFx0XHRcdGhhbmRlZG5lc3M6IGlucHV0U291cmNlLmhhbmRlZG5lc3MsXG5cdFx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggZ3JpcCAhPT0gbnVsbCAmJiBpbnB1dFNvdXJjZS5ncmlwU3BhY2UgKSB7XG5cblx0XHRcdFx0XHRncmlwUG9zZSA9IGZyYW1lLmdldFBvc2UoIGlucHV0U291cmNlLmdyaXBTcGFjZSwgcmVmZXJlbmNlU3BhY2UgKTtcblxuXHRcdFx0XHRcdGlmICggZ3JpcFBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdGdyaXAubWF0cml4LmZyb21BcnJheSggZ3JpcFBvc2UudHJhbnNmb3JtLm1hdHJpeCApO1xuXHRcdFx0XHRcdFx0Z3JpcC5tYXRyaXguZGVjb21wb3NlKCBncmlwLnBvc2l0aW9uLCBncmlwLnJvdGF0aW9uLCBncmlwLnNjYWxlICk7XG5cblx0XHRcdFx0XHRcdGlmICggZ3JpcFBvc2UubGluZWFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z3JpcC5oYXNMaW5lYXJWZWxvY2l0eSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGdyaXAubGluZWFyVmVsb2NpdHkuY29weSggZ3JpcFBvc2UubGluZWFyVmVsb2NpdHkgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRncmlwLmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBncmlwUG9zZS5hbmd1bGFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z3JpcC5oYXNBbmd1bGFyVmVsb2NpdHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRncmlwLmFuZ3VsYXJWZWxvY2l0eS5jb3B5KCBncmlwUG9zZS5hbmd1bGFyVmVsb2NpdHkgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRhcmdldFJheSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGFyZ2V0UmF5LnZpc2libGUgPSAoIGlucHV0UG9zZSAhPT0gbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBncmlwICE9PSBudWxsICkge1xuXG5cdFx0XHRncmlwLnZpc2libGUgPSAoIGdyaXBQb3NlICE9PSBudWxsICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGhhbmQgIT09IG51bGwgKSB7XG5cblx0XHRcdGhhbmQudmlzaWJsZSA9ICggaGFuZFBvc2UgIT09IG51bGwgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jbGFzcyBEZXB0aFRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgdHlwZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgYW5pc290cm9weSwgZm9ybWF0ICkge1xuXG5cdFx0Zm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBEZXB0aEZvcm1hdDtcblxuXHRcdGlmICggZm9ybWF0ICE9PSBEZXB0aEZvcm1hdCAmJiBmb3JtYXQgIT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnRGVwdGhUZXh0dXJlIGZvcm1hdCBtdXN0IGJlIGVpdGhlciBUSFJFRS5EZXB0aEZvcm1hdCBvciBUSFJFRS5EZXB0aFN0ZW5jaWxGb3JtYXQnICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5cGUgPT09IHVuZGVmaW5lZCAmJiBmb3JtYXQgPT09IERlcHRoRm9ybWF0ICkgdHlwZSA9IFVuc2lnbmVkU2hvcnRUeXBlO1xuXHRcdGlmICggdHlwZSA9PT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkgdHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTtcblxuXHRcdHN1cGVyKCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcblxuXHRcdHRoaXMuaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHRcdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xuXG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzXHQ9IGZhbHNlO1xuXG5cdH1cblxuXG59XG5cbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUuaXNEZXB0aFRleHR1cmUgPSB0cnVlO1xuXG5jbGFzcyBXZWJYUk1hbmFnZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCByZW5kZXJlciwgZ2wgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0bGV0IHNlc3Npb24gPSBudWxsO1xuXHRcdGxldCBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gMS4wO1xuXG5cdFx0bGV0IHJlZmVyZW5jZVNwYWNlID0gbnVsbDtcblx0XHRsZXQgcmVmZXJlbmNlU3BhY2VUeXBlID0gJ2xvY2FsLWZsb29yJztcblxuXHRcdGxldCBwb3NlID0gbnVsbDtcblx0XHRsZXQgZ2xCaW5kaW5nID0gbnVsbDtcblx0XHRsZXQgZ2xQcm9qTGF5ZXIgPSBudWxsO1xuXHRcdGxldCBnbEJhc2VMYXllciA9IG51bGw7XG5cdFx0bGV0IHhyRnJhbWUgPSBudWxsO1xuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpO1xuXHRcdGxldCBpbml0aWFsUmVuZGVyVGFyZ2V0ID0gbnVsbDtcblx0XHRsZXQgbmV3UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdGNvbnN0IGNvbnRyb2xsZXJzID0gW107XG5cdFx0Y29uc3QgaW5wdXRTb3VyY2VzTWFwID0gbmV3IE1hcCgpO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0XHRjYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTtcblx0XHRjYW1lcmFMLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0XHRjYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTtcblx0XHRjYW1lcmFSLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IGNhbWVyYXMgPSBbIGNhbWVyYUwsIGNhbWVyYVIgXTtcblxuXHRcdGNvbnN0IGNhbWVyYVZSID0gbmV3IEFycmF5Q2FtZXJhKCk7XG5cdFx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRcdGNhbWVyYVZSLmxheWVycy5lbmFibGUoIDIgKTtcblxuXHRcdGxldCBfY3VycmVudERlcHRoTmVhciA9IG51bGw7XG5cdFx0bGV0IF9jdXJyZW50RGVwdGhGYXIgPSBudWxsO1xuXG5cdFx0Ly9cblxuXHRcdHRoaXMuY2FtZXJhQXV0b1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR0aGlzLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5nZXRDb250cm9sbGVyID0gZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdFx0bGV0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaW5kZXggXTtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29udHJvbGxlciA9IG5ldyBXZWJYUkNvbnRyb2xsZXIoKTtcblx0XHRcdFx0Y29udHJvbGxlcnNbIGluZGV4IF0gPSBjb250cm9sbGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjb250cm9sbGVyLmdldFRhcmdldFJheVNwYWNlKCk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRDb250cm9sbGVyR3JpcCA9IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRcdGxldCBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGluZGV4IF07XG5cblx0XHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIgPSBuZXcgV2ViWFJDb250cm9sbGVyKCk7XG5cdFx0XHRcdGNvbnRyb2xsZXJzWyBpbmRleCBdID0gY29udHJvbGxlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY29udHJvbGxlci5nZXRHcmlwU3BhY2UoKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldEhhbmQgPSBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0XHRsZXQgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpbmRleCBdO1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyID0gbmV3IFdlYlhSQ29udHJvbGxlcigpO1xuXHRcdFx0XHRjb250cm9sbGVyc1sgaW5kZXggXSA9IGNvbnRyb2xsZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNvbnRyb2xsZXIuZ2V0SGFuZFNwYWNlKCk7XG5cblx0XHR9O1xuXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIG9uU2Vzc2lvbkV2ZW50KCBldmVudCApIHtcblxuXHRcdFx0Y29uc3QgY29udHJvbGxlciA9IGlucHV0U291cmNlc01hcC5nZXQoIGV2ZW50LmlucHV0U291cmNlICk7XG5cblx0XHRcdGlmICggY29udHJvbGxlciApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogZXZlbnQudHlwZSwgZGF0YTogZXZlbnQuaW5wdXRTb3VyY2UgfSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblNlc3Npb25FbmQoKSB7XG5cblx0XHRcdGlucHV0U291cmNlc01hcC5mb3JFYWNoKCBmdW5jdGlvbiAoIGNvbnRyb2xsZXIsIGlucHV0U291cmNlICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIuZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0XHRpbnB1dFNvdXJjZXNNYXAuY2xlYXIoKTtcblxuXHRcdFx0X2N1cnJlbnREZXB0aE5lYXIgPSBudWxsO1xuXHRcdFx0X2N1cnJlbnREZXB0aEZhciA9IG51bGw7XG5cblx0XHRcdC8vIHJlc3RvcmUgZnJhbWVidWZmZXIvcmVuZGVyaW5nIHN0YXRlXG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggaW5pdGlhbFJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRnbEJhc2VMYXllciA9IG51bGw7XG5cdFx0XHRnbFByb2pMYXllciA9IG51bGw7XG5cdFx0XHRnbEJpbmRpbmcgPSBudWxsO1xuXHRcdFx0c2Vzc2lvbiA9IG51bGw7XG5cdFx0XHRuZXdSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdFx0XHRzY29wZS5pc1ByZXNlbnRpbmcgPSBmYWxzZTtcblxuXHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2Vzc2lvbmVuZCcgfSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlO1xuXG5cdFx0XHRpZiAoIHNjb3BlLmlzUHJlc2VudGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IENhbm5vdCBjaGFuZ2UgZnJhbWVidWZmZXIgc2NhbGUgd2hpbGUgcHJlc2VudGluZy4nICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFJlZmVyZW5jZVNwYWNlVHlwZSA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHJlZmVyZW5jZVNwYWNlVHlwZSA9IHZhbHVlO1xuXG5cdFx0XHRpZiAoIHNjb3BlLmlzUHJlc2VudGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IENhbm5vdCBjaGFuZ2UgcmVmZXJlbmNlIHNwYWNlIHR5cGUgd2hpbGUgcHJlc2VudGluZy4nICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHR0aGlzLmdldFJlZmVyZW5jZVNwYWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gcmVmZXJlbmNlU3BhY2U7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRCYXNlTGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBnbFByb2pMYXllciAhPT0gbnVsbCA/IGdsUHJvakxheWVyIDogZ2xCYXNlTGF5ZXI7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRCaW5kaW5nID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gZ2xCaW5kaW5nO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB4ckZyYW1lO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNlc3Npb247XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0c2Vzc2lvbiA9IHZhbHVlO1xuXG5cdFx0XHRpZiAoIHNlc3Npb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aW5pdGlhbFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdHN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0ZW5kJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZScsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdlbmQnLCBvblNlc3Npb25FbmQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXRzb3VyY2VzY2hhbmdlJywgb25JbnB1dFNvdXJjZXNDaGFuZ2UgKTtcblxuXHRcdFx0XHRpZiAoIGF0dHJpYnV0ZXMueHJDb21wYXRpYmxlICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0YXdhaXQgZ2wubWFrZVhSQ29tcGF0aWJsZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICggc2Vzc2lvbi5yZW5kZXJTdGF0ZS5sYXllcnMgPT09IHVuZGVmaW5lZCApIHx8ICggcmVuZGVyZXIuY2FwYWJpbGl0aWVzLmlzV2ViR0wyID09PSBmYWxzZSApICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbGF5ZXJJbml0ID0ge1xuXHRcdFx0XHRcdFx0YW50aWFsaWFzOiAoIHNlc3Npb24ucmVuZGVyU3RhdGUubGF5ZXJzID09PSB1bmRlZmluZWQgKSA/IGF0dHJpYnV0ZXMuYW50aWFsaWFzIDogdHJ1ZSxcblx0XHRcdFx0XHRcdGFscGhhOiBhdHRyaWJ1dGVzLmFscGhhLFxuXHRcdFx0XHRcdFx0ZGVwdGg6IGF0dHJpYnV0ZXMuZGVwdGgsXG5cdFx0XHRcdFx0XHRzdGVuY2lsOiBhdHRyaWJ1dGVzLnN0ZW5jaWwsXG5cdFx0XHRcdFx0XHRmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yOiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGdsQmFzZUxheWVyID0gbmV3IFhSV2ViR0xMYXllciggc2Vzc2lvbiwgZ2wsIGxheWVySW5pdCApO1xuXG5cdFx0XHRcdFx0c2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSggeyBiYXNlTGF5ZXI6IGdsQmFzZUxheWVyIH0gKTtcblxuXHRcdFx0XHRcdG5ld1JlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldChcblx0XHRcdFx0XHRcdGdsQmFzZUxheWVyLmZyYW1lYnVmZmVyV2lkdGgsXG5cdFx0XHRcdFx0XHRnbEJhc2VMYXllci5mcmFtZWJ1ZmZlckhlaWdodCxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Zm9ybWF0OiBSR0JBRm9ybWF0LFxuXHRcdFx0XHRcdFx0XHR0eXBlOiBVbnNpZ25lZEJ5dGVUeXBlLFxuXHRcdFx0XHRcdFx0XHRlbmNvZGluZzogcmVuZGVyZXIub3V0cHV0RW5jb2Rpbmdcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRsZXQgZGVwdGhGb3JtYXQgPSBudWxsO1xuXHRcdFx0XHRcdGxldCBkZXB0aFR5cGUgPSBudWxsO1xuXHRcdFx0XHRcdGxldCBnbERlcHRoRm9ybWF0ID0gbnVsbDtcblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlcy5kZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0Z2xEZXB0aEZvcm1hdCA9IGF0dHJpYnV0ZXMuc3RlbmNpbCA/IDM1MDU2IDogMzMxOTA7XG5cdFx0XHRcdFx0XHRkZXB0aEZvcm1hdCA9IGF0dHJpYnV0ZXMuc3RlbmNpbCA/IERlcHRoU3RlbmNpbEZvcm1hdCA6IERlcHRoRm9ybWF0O1xuXHRcdFx0XHRcdFx0ZGVwdGhUeXBlID0gYXR0cmlidXRlcy5zdGVuY2lsID8gVW5zaWduZWRJbnQyNDhUeXBlIDogVW5zaWduZWRTaG9ydFR5cGU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBwcm9qZWN0aW9ubGF5ZXJJbml0ID0ge1xuXHRcdFx0XHRcdFx0Y29sb3JGb3JtYXQ6ICggcmVuZGVyZXIub3V0cHV0RW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gMzU5MDcgOiAzMjg1Nixcblx0XHRcdFx0XHRcdGRlcHRoRm9ybWF0OiBnbERlcHRoRm9ybWF0LFxuXHRcdFx0XHRcdFx0c2NhbGVGYWN0b3I6IGZyYW1lYnVmZmVyU2NhbGVGYWN0b3Jcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Z2xCaW5kaW5nID0gbmV3IFhSV2ViR0xCaW5kaW5nKCBzZXNzaW9uLCBnbCApO1xuXG5cdFx0XHRcdFx0Z2xQcm9qTGF5ZXIgPSBnbEJpbmRpbmcuY3JlYXRlUHJvamVjdGlvbkxheWVyKCBwcm9qZWN0aW9ubGF5ZXJJbml0ICk7XG5cblx0XHRcdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7IGxheWVyczogWyBnbFByb2pMYXllciBdIH0gKTtcblxuXHRcdFx0XHRcdG5ld1JlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldChcblx0XHRcdFx0XHRcdGdsUHJvakxheWVyLnRleHR1cmVXaWR0aCxcblx0XHRcdFx0XHRcdGdsUHJvakxheWVyLnRleHR1cmVIZWlnaHQsXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGZvcm1hdDogUkdCQUZvcm1hdCxcblx0XHRcdFx0XHRcdFx0dHlwZTogVW5zaWduZWRCeXRlVHlwZSxcblx0XHRcdFx0XHRcdFx0ZGVwdGhUZXh0dXJlOiBuZXcgRGVwdGhUZXh0dXJlKCBnbFByb2pMYXllci50ZXh0dXJlV2lkdGgsIGdsUHJvakxheWVyLnRleHR1cmVIZWlnaHQsIGRlcHRoVHlwZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZGVwdGhGb3JtYXQgKSxcblx0XHRcdFx0XHRcdFx0c3RlbmNpbEJ1ZmZlcjogYXR0cmlidXRlcy5zdGVuY2lsLFxuXHRcdFx0XHRcdFx0XHRlbmNvZGluZzogcmVuZGVyZXIub3V0cHV0RW5jb2RpbmcsXG5cdFx0XHRcdFx0XHRcdHNhbXBsZXM6IGF0dHJpYnV0ZXMuYW50aWFsaWFzID8gNCA6IDBcblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSByZW5kZXJlci5wcm9wZXJ0aWVzLmdldCggbmV3UmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2lnbm9yZURlcHRoVmFsdWVzID0gZ2xQcm9qTGF5ZXIuaWdub3JlRGVwdGhWYWx1ZXM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5ld1JlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID0gdHJ1ZTsgLy8gVE9ETyBSZW1vdmUgdGhpcyB3aGVuIHBvc3NpYmxlLCBzZWUgIzIzMjc4XG5cblx0XHRcdFx0Ly8gU2V0IGZvdmVhdGlvbiB0byBtYXhpbXVtLlxuXHRcdFx0XHR0aGlzLnNldEZvdmVhdGlvbiggMS4wICk7XG5cblx0XHRcdFx0cmVmZXJlbmNlU3BhY2UgPSBhd2FpdCBzZXNzaW9uLnJlcXVlc3RSZWZlcmVuY2VTcGFjZSggcmVmZXJlbmNlU3BhY2VUeXBlICk7XG5cblx0XHRcdFx0YW5pbWF0aW9uLnNldENvbnRleHQoIHNlc3Npb24gKTtcblx0XHRcdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0XHRcdFx0c2NvcGUuaXNQcmVzZW50aW5nID0gdHJ1ZTtcblxuXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uc3RhcnQnIH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIG9uSW5wdXRTb3VyY2VzQ2hhbmdlKCBldmVudCApIHtcblxuXHRcdFx0Y29uc3QgaW5wdXRTb3VyY2VzID0gc2Vzc2lvbi5pbnB1dFNvdXJjZXM7XG5cblx0XHRcdC8vIEFzc2lnbiBpbnB1dFNvdXJjZXMgdG8gYXZhaWxhYmxlIGNvbnRyb2xsZXJzXG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRpbnB1dFNvdXJjZXNNYXAuc2V0KCBpbnB1dFNvdXJjZXNbIGkgXSwgY29udHJvbGxlcnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIE5vdGlmeSBkaXNjb25uZWN0ZWRcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZXZlbnQucmVtb3ZlZC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBldmVudC5yZW1vdmVkWyBpIF07XG5cdFx0XHRcdGNvbnN0IGNvbnRyb2xsZXIgPSBpbnB1dFNvdXJjZXNNYXAuZ2V0KCBpbnB1dFNvdXJjZSApO1xuXG5cdFx0XHRcdGlmICggY29udHJvbGxlciApIHtcblxuXHRcdFx0XHRcdGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzY29ubmVjdGVkJywgZGF0YTogaW5wdXRTb3VyY2UgfSApO1xuXHRcdFx0XHRcdGlucHV0U291cmNlc01hcC5kZWxldGUoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIE5vdGlmeSBjb25uZWN0ZWRcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZXZlbnQuYWRkZWQubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGlucHV0U291cmNlID0gZXZlbnQuYWRkZWRbIGkgXTtcblx0XHRcdFx0Y29uc3QgY29udHJvbGxlciA9IGlucHV0U291cmNlc01hcC5nZXQoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0aWYgKCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgY2FtZXJhTFBvcyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgY2FtZXJhUlBvcyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvKipcblx0XHQgKiBBc3N1bWVzIDIgY2FtZXJhcyB0aGF0IGFyZSBwYXJhbGxlbCBhbmQgc2hhcmUgYW4gWC1heGlzLCBhbmQgdGhhdFxuXHRcdCAqIHRoZSBjYW1lcmFzJyBwcm9qZWN0aW9uIGFuZCB3b3JsZCBtYXRyaWNlcyBoYXZlIGFscmVhZHkgYmVlbiBzZXQuXG5cdFx0ICogQW5kIHRoYXQgbmVhciBhbmQgZmFyIHBsYW5lcyBhcmUgaWRlbnRpY2FsIGZvciBib3RoIGNhbWVyYXMuXG5cdFx0ICogVmlzdWFsaXphdGlvbiBvZiB0aGlzIHRlY2huaXF1ZTogaHR0cHM6Ly9jb21wdXRlcmdyYXBoaWNzLnN0YWNrZXhjaGFuZ2UuY29tL2EvNDc2NVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYSwgY2FtZXJhTCwgY2FtZXJhUiApIHtcblxuXHRcdFx0Y2FtZXJhTFBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYUwubWF0cml4V29ybGQgKTtcblx0XHRcdGNhbWVyYVJQb3Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmFSLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGNvbnN0IGlwZCA9IGNhbWVyYUxQb3MuZGlzdGFuY2VUbyggY2FtZXJhUlBvcyApO1xuXG5cdFx0XHRjb25zdCBwcm9qTCA9IGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblx0XHRcdGNvbnN0IHByb2pSID0gY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xuXG5cdFx0XHQvLyBWUiBzeXN0ZW1zIHdpbGwgaGF2ZSBpZGVudGljYWwgZmFyIGFuZCBuZWFyIHBsYW5lcywgYW5kXG5cdFx0XHQvLyBtb3N0IGxpa2VseSBpZGVudGljYWwgdG9wIGFuZCBib3R0b20gZnJ1c3R1bSBleHRlbnRzLlxuXHRcdFx0Ly8gVXNlIHRoZSBsZWZ0IGNhbWVyYSBmb3IgdGhlc2UgdmFsdWVzLlxuXHRcdFx0Y29uc3QgbmVhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSAtIDEgKTtcblx0XHRcdGNvbnN0IGZhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSArIDEgKTtcblx0XHRcdGNvbnN0IHRvcEZvdiA9ICggcHJvakxbIDkgXSArIDEgKSAvIHByb2pMWyA1IF07XG5cdFx0XHRjb25zdCBib3R0b21Gb3YgPSAoIHByb2pMWyA5IF0gLSAxICkgLyBwcm9qTFsgNSBdO1xuXG5cdFx0XHRjb25zdCBsZWZ0Rm92ID0gKCBwcm9qTFsgOCBdIC0gMSApIC8gcHJvakxbIDAgXTtcblx0XHRcdGNvbnN0IHJpZ2h0Rm92ID0gKCBwcm9qUlsgOCBdICsgMSApIC8gcHJvalJbIDAgXTtcblx0XHRcdGNvbnN0IGxlZnQgPSBuZWFyICogbGVmdEZvdjtcblx0XHRcdGNvbnN0IHJpZ2h0ID0gbmVhciAqIHJpZ2h0Rm92O1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgdGhlIG5ldyBjYW1lcmEncyBwb3NpdGlvbiBvZmZzZXQgZnJvbSB0aGVcblx0XHRcdC8vIGxlZnQgY2FtZXJhLiB4T2Zmc2V0IHNob3VsZCBiZSByb3VnaGx5IGhhbGYgYGlwZGAuXG5cdFx0XHRjb25zdCB6T2Zmc2V0ID0gaXBkIC8gKCAtIGxlZnRGb3YgKyByaWdodEZvdiApO1xuXHRcdFx0Y29uc3QgeE9mZnNldCA9IHpPZmZzZXQgKiAtIGxlZnRGb3Y7XG5cblx0XHRcdC8vIFRPRE86IEJldHRlciB3YXkgdG8gYXBwbHkgdGhpcyBvZmZzZXQ/XG5cdFx0XHRjYW1lcmFMLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7XG5cdFx0XHRjYW1lcmEudHJhbnNsYXRlWCggeE9mZnNldCApO1xuXHRcdFx0Y2FtZXJhLnRyYW5zbGF0ZVooIHpPZmZzZXQgKTtcblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5jb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0XHRcdC8vIEZpbmQgdGhlIHVuaW9uIG9mIHRoZSBmcnVzdHVtIHZhbHVlcyBvZiB0aGUgY2FtZXJhcyBhbmQgc2NhbGVcblx0XHRcdC8vIHRoZSB2YWx1ZXMgc28gdGhhdCB0aGUgbmVhciBwbGFuZSdzIHBvc2l0aW9uIGRvZXMgbm90IGNoYW5nZSBpbiB3b3JsZCBzcGFjZSxcblx0XHRcdC8vIGFsdGhvdWdoIG11c3Qgbm93IGJlIHJlbGF0aXZlIHRvIHRoZSBuZXcgdW5pb24gY2FtZXJhLlxuXHRcdFx0Y29uc3QgbmVhcjIgPSBuZWFyICsgek9mZnNldDtcblx0XHRcdGNvbnN0IGZhcjIgPSBmYXIgKyB6T2Zmc2V0O1xuXHRcdFx0Y29uc3QgbGVmdDIgPSBsZWZ0IC0geE9mZnNldDtcblx0XHRcdGNvbnN0IHJpZ2h0MiA9IHJpZ2h0ICsgKCBpcGQgLSB4T2Zmc2V0ICk7XG5cdFx0XHRjb25zdCB0b3AyID0gdG9wRm92ICogZmFyIC8gZmFyMiAqIG5lYXIyO1xuXHRcdFx0Y29uc3QgYm90dG9tMiA9IGJvdHRvbUZvdiAqIGZhciAvIGZhcjIgKiBuZWFyMjtcblxuXHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0MiwgcmlnaHQyLCB0b3AyLCBib3R0b20yLCBuZWFyMiwgZmFyMiApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FtZXJhKCBjYW1lcmEsIHBhcmVudCApIHtcblxuXHRcdFx0aWYgKCBwYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjYW1lcmEubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggcGFyZW50Lm1hdHJpeFdvcmxkLCBjYW1lcmEubWF0cml4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlQ2FtZXJhID0gZnVuY3Rpb24gKCBjYW1lcmEgKSB7XG5cblx0XHRcdGlmICggc2Vzc2lvbiA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdFx0Y2FtZXJhVlIubmVhciA9IGNhbWVyYVIubmVhciA9IGNhbWVyYUwubmVhciA9IGNhbWVyYS5uZWFyO1xuXHRcdFx0Y2FtZXJhVlIuZmFyID0gY2FtZXJhUi5mYXIgPSBjYW1lcmFMLmZhciA9IGNhbWVyYS5mYXI7XG5cblx0XHRcdGlmICggX2N1cnJlbnREZXB0aE5lYXIgIT09IGNhbWVyYVZSLm5lYXIgfHwgX2N1cnJlbnREZXB0aEZhciAhPT0gY2FtZXJhVlIuZmFyICkge1xuXG5cdFx0XHRcdC8vIE5vdGUgdGhhdCB0aGUgbmV3IHJlbmRlclN0YXRlIHdvbid0IGFwcGx5IHVudGlsIHRoZSBuZXh0IGZyYW1lLiBTZWUgIzE4MzIwXG5cblx0XHRcdFx0c2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSgge1xuXHRcdFx0XHRcdGRlcHRoTmVhcjogY2FtZXJhVlIubmVhcixcblx0XHRcdFx0XHRkZXB0aEZhcjogY2FtZXJhVlIuZmFyXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRfY3VycmVudERlcHRoTmVhciA9IGNhbWVyYVZSLm5lYXI7XG5cdFx0XHRcdF9jdXJyZW50RGVwdGhGYXIgPSBjYW1lcmFWUi5mYXI7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcGFyZW50ID0gY2FtZXJhLnBhcmVudDtcblx0XHRcdGNvbnN0IGNhbWVyYXMgPSBjYW1lcmFWUi5jYW1lcmFzO1xuXG5cdFx0XHR1cGRhdGVDYW1lcmEoIGNhbWVyYVZSLCBwYXJlbnQgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2FtZXJhcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dXBkYXRlQ2FtZXJhKCBjYW1lcmFzWyBpIF0sIHBhcmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhbWVyYVZSLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggY2FtZXJhVlIucG9zaXRpb24sIGNhbWVyYVZSLnF1YXRlcm5pb24sIGNhbWVyYVZSLnNjYWxlICk7XG5cblx0XHRcdC8vIHVwZGF0ZSB1c2VyIGNhbWVyYSBhbmQgaXRzIGNoaWxkcmVuXG5cblx0XHRcdGNhbWVyYS5wb3NpdGlvbi5jb3B5KCBjYW1lcmFWUi5wb3NpdGlvbiApO1xuXHRcdFx0Y2FtZXJhLnF1YXRlcm5pb24uY29weSggY2FtZXJhVlIucXVhdGVybmlvbiApO1xuXHRcdFx0Y2FtZXJhLnNjYWxlLmNvcHkoIGNhbWVyYVZSLnNjYWxlICk7XG5cdFx0XHRjYW1lcmEubWF0cml4LmNvcHkoIGNhbWVyYVZSLm1hdHJpeCApO1xuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYVZSLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGNvbnN0IGNoaWxkcmVuID0gY2FtZXJhLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNoaWxkcmVuWyBpIF0udXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB1cGRhdGUgcHJvamVjdGlvbiBtYXRyaXggZm9yIHByb3BlciB2aWV3IGZydXN0dW0gY3VsbGluZ1xuXG5cdFx0XHRpZiAoIGNhbWVyYXMubGVuZ3RoID09PSAyICkge1xuXG5cdFx0XHRcdHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYVZSLCBjYW1lcmFMLCBjYW1lcmFSICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gYXNzdW1lIHNpbmdsZSBjYW1lcmEgc2V0dXAgKEFSKVxuXG5cdFx0XHRcdGNhbWVyYVZSLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHR0aGlzLmdldENhbWVyYSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGNhbWVyYVZSO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0Rm92ZWF0aW9uID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIGdsUHJvakxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBnbFByb2pMYXllci5maXhlZEZvdmVhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdsQmFzZUxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBnbEJhc2VMYXllci5maXhlZEZvdmVhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuc2V0Rm92ZWF0aW9uID0gZnVuY3Rpb24gKCBmb3ZlYXRpb24gKSB7XG5cblx0XHRcdC8vIDAgPSBubyBmb3ZlYXRpb24gPSBmdWxsIHJlc29sdXRpb25cblx0XHRcdC8vIDEgPSBtYXhpbXVtIGZvdmVhdGlvbiA9IHRoZSBlZGdlcyByZW5kZXIgYXQgbG93ZXIgcmVzb2x1dGlvblxuXG5cdFx0XHRpZiAoIGdsUHJvakxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGdsUHJvakxheWVyLmZpeGVkRm92ZWF0aW9uID0gZm92ZWF0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2xCYXNlTGF5ZXIgIT09IG51bGwgJiYgZ2xCYXNlTGF5ZXIuZml4ZWRGb3ZlYXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRnbEJhc2VMYXllci5maXhlZEZvdmVhdGlvbiA9IGZvdmVhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0XHRsZXQgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRcdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0XHRwb3NlID0gZnJhbWUuZ2V0Vmlld2VyUG9zZSggcmVmZXJlbmNlU3BhY2UgKTtcblx0XHRcdHhyRnJhbWUgPSBmcmFtZTtcblxuXHRcdFx0aWYgKCBwb3NlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdzID0gcG9zZS52aWV3cztcblxuXHRcdFx0XHRpZiAoIGdsQmFzZUxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0RnJhbWVidWZmZXIoIG5ld1JlbmRlclRhcmdldCwgZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG5ld1JlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgY2FtZXJhVlJOZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIGNoZWNrIGlmIGl0J3MgbmVjZXNzYXJ5IHRvIHJlYnVpbGQgY2FtZXJhVlIncyBjYW1lcmEgbGlzdFxuXG5cdFx0XHRcdGlmICggdmlld3MubGVuZ3RoICE9PSBjYW1lcmFWUi5jYW1lcmFzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdGNhbWVyYVZSLmNhbWVyYXMubGVuZ3RoID0gMDtcblx0XHRcdFx0XHRjYW1lcmFWUk5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmlld3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmlldyA9IHZpZXdzWyBpIF07XG5cblx0XHRcdFx0XHRsZXQgdmlld3BvcnQgPSBudWxsO1xuXG5cdFx0XHRcdFx0aWYgKCBnbEJhc2VMYXllciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0dmlld3BvcnQgPSBnbEJhc2VMYXllci5nZXRWaWV3cG9ydCggdmlldyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZ2xTdWJJbWFnZSA9IGdsQmluZGluZy5nZXRWaWV3U3ViSW1hZ2UoIGdsUHJvakxheWVyLCB2aWV3ICk7XG5cdFx0XHRcdFx0XHR2aWV3cG9ydCA9IGdsU3ViSW1hZ2Uudmlld3BvcnQ7XG5cblx0XHRcdFx0XHRcdC8vIEZvciBzaWRlLWJ5LXNpZGUgcHJvamVjdGlvbiwgd2Ugb25seSBwcm9kdWNlIGEgc2luZ2xlIHRleHR1cmUgZm9yIGJvdGggZXllcy5cblx0XHRcdFx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXRUZXh0dXJlcyhcblx0XHRcdFx0XHRcdFx0XHRuZXdSZW5kZXJUYXJnZXQsXG5cdFx0XHRcdFx0XHRcdFx0Z2xTdWJJbWFnZS5jb2xvclRleHR1cmUsXG5cdFx0XHRcdFx0XHRcdFx0Z2xQcm9qTGF5ZXIuaWdub3JlRGVwdGhWYWx1ZXMgPyB1bmRlZmluZWQgOiBnbFN1YkltYWdlLmRlcHRoU3RlbmNpbFRleHR1cmUgKTtcblxuXHRcdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG5ld1JlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBjYW1lcmEgPSBjYW1lcmFzWyBpIF07XG5cblx0XHRcdFx0XHRjYW1lcmEubWF0cml4LmZyb21BcnJheSggdmlldy50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXguZnJvbUFycmF5KCB2aWV3LnByb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdFx0XHRjYW1lcmEudmlld3BvcnQuc2V0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRpZiAoIGkgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdGNhbWVyYVZSLm1hdHJpeC5jb3B5KCBjYW1lcmEubWF0cml4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGNhbWVyYVZSTmVlZHNVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdGNhbWVyYVZSLmNhbWVyYXMucHVzaCggY2FtZXJhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGNvbnN0IGlucHV0U291cmNlcyA9IHNlc3Npb24uaW5wdXRTb3VyY2VzO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpIF07XG5cdFx0XHRcdGNvbnN0IGlucHV0U291cmNlID0gaW5wdXRTb3VyY2VzWyBpIF07XG5cblx0XHRcdFx0Y29udHJvbGxlci51cGRhdGUoIGlucHV0U291cmNlLCBmcmFtZSwgcmVmZXJlbmNlU3BhY2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayApIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayggdGltZSwgZnJhbWUgKTtcblxuXHRcdFx0eHJGcmFtZSA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblxuXHRcdGFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0XHRvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdH07XG5cblx0XHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xNYXRlcmlhbHMoIHJlbmRlcmVyLCBwcm9wZXJ0aWVzICkge1xuXG5cdGZ1bmN0aW9uIHJlZnJlc2hGb2dVbmlmb3JtcyggdW5pZm9ybXMsIGZvZyApIHtcblxuXHRcdHVuaWZvcm1zLmZvZ0NvbG9yLnZhbHVlLmNvcHkoIGZvZy5jb2xvciApO1xuXG5cdFx0aWYgKCBmb2cuaXNGb2cgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmZvZ05lYXIudmFsdWUgPSBmb2cubmVhcjtcblx0XHRcdHVuaWZvcm1zLmZvZ0Zhci52YWx1ZSA9IGZvZy5mYXI7XG5cblx0XHR9IGVsc2UgaWYgKCBmb2cuaXNGb2dFeHAyICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5mb2dEZW5zaXR5LnZhbHVlID0gZm9nLmRlbnNpdHk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHBpeGVsUmF0aW8sIGhlaWdodCwgdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTGFtYmVydE1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0cmVmcmVzaFVuaWZvcm1zVG9vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0cmVmcmVzaFVuaWZvcm1zUGhvbmcoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaHlzaWNhbE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hNYXRjYXBNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc01hdGNhcCggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hEZXB0aE1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaE5vcm1hbE1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNMaW5lQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zTGluZSggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNMaW5lRGFzaGVkTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGFzaCggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzUG9pbnRzTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc1BvaW50cyggdW5pZm9ybXMsIG1hdGVyaWFsLCBwaXhlbFJhdGlvLCBoZWlnaHQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU3ByaXRlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTaGFkb3dNYXRlcmlhbCApIHtcblxuXHRcdFx0dW5pZm9ybXMuY29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblx0XHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7IC8vICMxNTU4MVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5jb2xvciApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZSApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmUudmFsdWUuY29weSggbWF0ZXJpYWwuZW1pc3NpdmUgKS5tdWx0aXBseVNjYWxhciggbWF0ZXJpYWwuZW1pc3NpdmVJbnRlbnNpdHkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhVGVzdC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhVGVzdDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGVudk1hcCA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLmVudk1hcDtcblxuXHRcdGlmICggZW52TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBlbnZNYXA7XG5cblx0XHRcdHVuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIGVudk1hcC5pc0N1YmVUZXh0dXJlICYmIGVudk1hcC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtIDEgOiAxO1xuXG5cdFx0XHR1bmlmb3Jtcy5yZWZsZWN0aXZpdHkudmFsdWUgPSBtYXRlcmlhbC5yZWZsZWN0aXZpdHk7XG5cdFx0XHR1bmlmb3Jtcy5pb3IudmFsdWUgPSBtYXRlcmlhbC5pb3I7XG5cdFx0XHR1bmlmb3Jtcy5yZWZyYWN0aW9uUmF0aW8udmFsdWUgPSBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmxpZ2h0TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5saWdodE1hcC52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwO1xuXG5cdFx0XHQvLyBhcnRpc3QtZnJpZW5kbHkgbGlnaHQgaW50ZW5zaXR5IHNjYWxpbmcgZmFjdG9yXG5cdFx0XHRjb25zdCBzY2FsZUZhY3RvciA9ICggcmVuZGVyZXIucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgIT09IHRydWUgKSA/IE1hdGguUEkgOiAxO1xuXG5cdFx0XHR1bmlmb3Jtcy5saWdodE1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5ICogc2NhbGVGYWN0b3I7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFvTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hb01hcC52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwO1xuXHRcdFx0dW5pZm9ybXMuYW9NYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5hb01hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdC8vIHV2IHJlcGVhdCBhbmQgb2Zmc2V0IHNldHRpbmcgcHJpb3JpdGllc1xuXHRcdC8vIDEuIGNvbG9yIG1hcFxuXHRcdC8vIDIuIHNwZWN1bGFyIG1hcFxuXHRcdC8vIDMuIGRpc3BsYWNlbWVudE1hcCBtYXBcblx0XHQvLyA0LiBub3JtYWwgbWFwXG5cdFx0Ly8gNS4gYnVtcCBtYXBcblx0XHQvLyA2LiByb3VnaG5lc3NNYXAgbWFwXG5cdFx0Ly8gNy4gbWV0YWxuZXNzTWFwIG1hcFxuXHRcdC8vIDguIGFscGhhTWFwIG1hcFxuXHRcdC8vIDkuIGVtaXNzaXZlTWFwIG1hcFxuXHRcdC8vIDEwLiBjbGVhcmNvYXQgbWFwXG5cdFx0Ly8gMTEuIGNsZWFyY29hdCBub3JtYWwgbWFwXG5cdFx0Ly8gMTIuIGNsZWFyY29hdCByb3VnaG5lc3NNYXAgbWFwXG5cdFx0Ly8gMTMuIHNwZWN1bGFyIGludGVuc2l0eSBtYXBcblx0XHQvLyAxNC4gc3BlY3VsYXIgdGludCBtYXBcblx0XHQvLyAxNS4gdHJhbnNtaXNzaW9uIG1hcFxuXHRcdC8vIDE2LiB0aGlja25lc3MgbWFwXG5cblx0XHRsZXQgdXZTY2FsZU1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5zcGVjdWxhck1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5idW1wTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubWV0YWxuZXNzTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5jbGVhcmNvYXRNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC50cmFuc21pc3Npb25NYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50aGlja25lc3NNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC50aGlja25lc3NNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc2hlZW5Db2xvck1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2U2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdGlmICggdXZTY2FsZU1hcC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdHV2U2NhbGVNYXAgPSB1dlNjYWxlTWFwLnRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1dlNjYWxlTWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dXZTY2FsZU1hcC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1dlNjYWxlTWFwLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzIGZvciB1djJcblx0XHQvLyAxLiBhbyBtYXBcblx0XHQvLyAyLiBsaWdodCBtYXBcblxuXHRcdGxldCB1djJTY2FsZU1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwuYW9NYXAgKSB7XG5cblx0XHRcdHV2MlNjYWxlTWFwID0gbWF0ZXJpYWwuYW9NYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0dXYyU2NhbGVNYXAgPSBtYXRlcmlhbC5saWdodE1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggdXYyU2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdGlmICggdXYyU2NhbGVNYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHR1djJTY2FsZU1hcCA9IHV2MlNjYWxlTWFwLnRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1djJTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHV2MlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2MlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1djJTY2FsZU1hcC5tYXRyaXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTGluZSggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEYXNoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kYXNoU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplO1xuXHRcdHVuaWZvcm1zLnRvdGFsU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplICsgbWF0ZXJpYWwuZ2FwU2l6ZTtcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IG1hdGVyaWFsLnNjYWxlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCwgcGl4ZWxSYXRpbywgaGVpZ2h0ICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnNpemUudmFsdWUgPSBtYXRlcmlhbC5zaXplICogcGl4ZWxSYXRpbztcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IGhlaWdodCAqIDAuNTtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7XG5cblx0XHR9XG5cblx0XHQvLyB1diByZXBlYXQgYW5kIG9mZnNldCBzZXR0aW5nIHByaW9yaXRpZXNcblx0XHQvLyAxLiBjb2xvciBtYXBcblx0XHQvLyAyLiBhbHBoYSBtYXBcblxuXHRcdGxldCB1dlNjYWxlTWFwO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1dlNjYWxlTWFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdXZTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHV2U2NhbGVNYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggdXZTY2FsZU1hcC5tYXRyaXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnJvdGF0aW9uLnZhbHVlID0gbWF0ZXJpYWwucm90YXRpb247XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFUZXN0LnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFUZXN0O1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzXG5cdFx0Ly8gMS4gY29sb3IgbWFwXG5cdFx0Ly8gMi4gYWxwaGEgbWFwXG5cblx0XHRsZXQgdXZTY2FsZU1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggdXZTY2FsZU1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHV2U2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIHV2U2NhbGVNYXAubWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zcGVjdWxhciApO1xuXHRcdHVuaWZvcm1zLnNoaW5pbmVzcy52YWx1ZSA9IE1hdGgubWF4KCBtYXRlcmlhbC5zaGluaW5lc3MsIDFlLTQgKTsgLy8gdG8gcHJldmVudCBwb3coIDAuMCwgMC4wIClcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zVG9vbiggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5ncmFkaWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZ3JhZGllbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5ncmFkaWVudE1hcDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLnJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnJvdWdobmVzcztcblx0XHR1bmlmb3Jtcy5tZXRhbG5lc3MudmFsdWUgPSBtYXRlcmlhbC5tZXRhbG5lc3M7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnJvdWdobmVzc01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMucm91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1ldGFsbmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzc01hcDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGVudk1hcCA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLmVudk1hcDtcblxuXHRcdGlmICggZW52TWFwICkge1xuXG5cdFx0XHQvL3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDsgLy8gcGFydCBvZiB1bmlmb3JtcyBjb21tb25cblx0XHRcdHVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCwgdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dW5pZm9ybXMuaW9yLnZhbHVlID0gbWF0ZXJpYWwuaW9yOyAvLyBhbHNvIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uXG5cblx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuc2hlZW5Db2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zaGVlbkNvbG9yICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLnNoZWVuICk7XG5cblx0XHRcdHVuaWZvcm1zLnNoZWVuUm91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3M7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuc2hlZW5Db2xvck1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5zaGVlbkNvbG9yTWFwLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Db2xvck1hcDtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoZWVuUm91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0LnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0O1xuXHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdE1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXRNYXAudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXRNYXA7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbFNjYWxlICk7XG5cdFx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcDtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvbi52YWx1ZSA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbjtcblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvblNhbXBsZXJNYXAudmFsdWUgPSB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQudGV4dHVyZTtcblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvblNhbXBsZXJTaXplLnZhbHVlLnNldCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0LndpZHRoLCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvbk1hcC52YWx1ZSA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbk1hcDtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy50aGlja25lc3MudmFsdWUgPSBtYXRlcmlhbC50aGlja25lc3M7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudGhpY2tuZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnRoaWNrbmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLnRoaWNrbmVzc01hcDtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy5hdHRlbnVhdGlvbkRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZTtcblx0XHRcdHVuaWZvcm1zLmF0dGVudWF0aW9uQ29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciApO1xuXG5cdFx0fVxuXG5cdFx0dW5pZm9ybXMuc3BlY3VsYXJJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eTtcblx0XHR1bmlmb3Jtcy5zcGVjdWxhckNvbG9yLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKTtcblxuXHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFySW50ZW5zaXR5TWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyQ29sb3JNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwubWF0Y2FwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5yZWZlcmVuY2VQb3NpdGlvbi52YWx1ZS5jb3B5KCBtYXRlcmlhbC5yZWZlcmVuY2VQb3NpdGlvbiApO1xuXHRcdHVuaWZvcm1zLm5lYXJEaXN0YW5jZS52YWx1ZSA9IG1hdGVyaWFsLm5lYXJEaXN0YW5jZTtcblx0XHR1bmlmb3Jtcy5mYXJEaXN0YW5jZS52YWx1ZSA9IG1hdGVyaWFsLmZhckRpc3RhbmNlO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHJlZnJlc2hGb2dVbmlmb3JtczogcmVmcmVzaEZvZ1VuaWZvcm1zLFxuXHRcdHJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zOiByZWZyZXNoTWF0ZXJpYWxVbmlmb3Jtc1xuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhbnZhc0VsZW1lbnQoKSB7XG5cblx0Y29uc3QgY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApO1xuXHRjYW52YXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdHJldHVybiBjYW52YXM7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJlciggcGFyYW1ldGVycyA9IHt9ICkge1xuXG5cdGNvbnN0IF9jYW52YXMgPSBwYXJhbWV0ZXJzLmNhbnZhcyAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jYW52YXMgOiBjcmVhdGVDYW52YXNFbGVtZW50KCksXG5cdFx0X2NvbnRleHQgPSBwYXJhbWV0ZXJzLmNvbnRleHQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuY29udGV4dCA6IG51bGwsXG5cblx0XHRfZGVwdGggPSBwYXJhbWV0ZXJzLmRlcHRoICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmRlcHRoIDogdHJ1ZSxcblx0XHRfc3RlbmNpbCA9IHBhcmFtZXRlcnMuc3RlbmNpbCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5zdGVuY2lsIDogdHJ1ZSxcblx0XHRfYW50aWFsaWFzID0gcGFyYW1ldGVycy5hbnRpYWxpYXMgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYW50aWFsaWFzIDogZmFsc2UsXG5cdFx0X3ByZW11bHRpcGxpZWRBbHBoYSA9IHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA6IHRydWUsXG5cdFx0X3ByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IHBhcmFtZXRlcnMucHJlc2VydmVEcmF3aW5nQnVmZmVyICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciA6IGZhbHNlLFxuXHRcdF9wb3dlclByZWZlcmVuY2UgPSBwYXJhbWV0ZXJzLnBvd2VyUHJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wb3dlclByZWZlcmVuY2UgOiAnZGVmYXVsdCcsXG5cdFx0X2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBwYXJhbWV0ZXJzLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCA6IGZhbHNlO1xuXG5cdGxldCBfYWxwaGE7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmNvbnRleHQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdF9hbHBoYSA9IF9jb250ZXh0LmdldENvbnRleHRBdHRyaWJ1dGVzKCkuYWxwaGE7XG5cblx0fSBlbHNlIHtcblxuXHRcdF9hbHBoYSA9IHBhcmFtZXRlcnMuYWxwaGEgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYWxwaGEgOiBmYWxzZTtcblxuXHR9XG5cblx0bGV0IGN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDtcblx0bGV0IGN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7XG5cblx0Ly8gcmVuZGVyKCkgY2FuIGJlIGNhbGxlZCBmcm9tIHdpdGhpbiBhIGNhbGxiYWNrIHRyaWdnZXJlZCBieSBhbm90aGVyIHJlbmRlci5cblx0Ly8gV2UgdHJhY2sgdGhpcyBzbyB0aGF0IHRoZSBuZXN0ZWQgcmVuZGVyIGNhbGwgZ2V0cyBpdHMgbGlzdCBhbmQgc3RhdGUgaXNvbGF0ZWQgZnJvbSB0aGUgcGFyZW50IHJlbmRlciBjYWxsLlxuXG5cdGNvbnN0IHJlbmRlckxpc3RTdGFjayA9IFtdO1xuXHRjb25zdCByZW5kZXJTdGF0ZVN0YWNrID0gW107XG5cblx0Ly8gcHVibGljIHByb3BlcnRpZXNcblxuXHR0aGlzLmRvbUVsZW1lbnQgPSBfY2FudmFzO1xuXG5cdC8vIERlYnVnIGNvbmZpZ3VyYXRpb24gY29udGFpbmVyXG5cdHRoaXMuZGVidWcgPSB7XG5cblx0XHQvKipcblx0XHQgKiBFbmFibGVzIGVycm9yIGNoZWNraW5nIGFuZCByZXBvcnRpbmcgd2hlbiBzaGFkZXIgcHJvZ3JhbXMgYXJlIGJlaW5nIGNvbXBpbGVkXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0Y2hlY2tTaGFkZXJFcnJvcnM6IHRydWVcblx0fTtcblxuXHQvLyBjbGVhcmluZ1xuXG5cdHRoaXMuYXV0b0NsZWFyID0gdHJ1ZTtcblx0dGhpcy5hdXRvQ2xlYXJDb2xvciA9IHRydWU7XG5cdHRoaXMuYXV0b0NsZWFyRGVwdGggPSB0cnVlO1xuXHR0aGlzLmF1dG9DbGVhclN0ZW5jaWwgPSB0cnVlO1xuXG5cdC8vIHNjZW5lIGdyYXBoXG5cblx0dGhpcy5zb3J0T2JqZWN0cyA9IHRydWU7XG5cblx0Ly8gdXNlci1kZWZpbmVkIGNsaXBwaW5nXG5cblx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IFtdO1xuXHR0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0Ly8gcGh5c2ljYWxseSBiYXNlZCBzaGFkaW5nXG5cblx0dGhpcy5vdXRwdXRFbmNvZGluZyA9IExpbmVhckVuY29kaW5nO1xuXG5cdC8vIHBoeXNpY2FsIGxpZ2h0c1xuXG5cdHRoaXMucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgPSBmYWxzZTtcblxuXHQvLyB0b25lIG1hcHBpbmdcblxuXHR0aGlzLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblx0dGhpcy50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4wO1xuXG5cdC8vIGludGVybmFsIHByb3BlcnRpZXNcblxuXHRjb25zdCBfdGhpcyA9IHRoaXM7XG5cblx0bGV0IF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7XG5cblx0Ly8gaW50ZXJuYWwgc3RhdGUgY2FjaGVcblxuXHRsZXQgX2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IDA7XG5cdGxldCBfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gMDtcblx0bGV0IF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblx0bGV0IF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMTtcblxuXHRsZXQgX2N1cnJlbnRDYW1lcmEgPSBudWxsO1xuXG5cdGNvbnN0IF9jdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXHRjb25zdCBfY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHRsZXQgX2N1cnJlbnRTY2lzc29yVGVzdCA9IG51bGw7XG5cblx0Ly9cblxuXHRsZXQgX3dpZHRoID0gX2NhbnZhcy53aWR0aDtcblx0bGV0IF9oZWlnaHQgPSBfY2FudmFzLmhlaWdodDtcblxuXHRsZXQgX3BpeGVsUmF0aW8gPSAxO1xuXHRsZXQgX29wYXF1ZVNvcnQgPSBudWxsO1xuXHRsZXQgX3RyYW5zcGFyZW50U29ydCA9IG51bGw7XG5cblx0Y29uc3QgX3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApO1xuXHRjb25zdCBfc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCBfd2lkdGgsIF9oZWlnaHQgKTtcblx0bGV0IF9zY2lzc29yVGVzdCA9IGZhbHNlO1xuXG5cdC8vIGZydXN0dW1cblxuXHRjb25zdCBfZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XG5cblx0Ly8gY2xpcHBpbmdcblxuXHRsZXQgX2NsaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xuXHRsZXQgX2xvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0Ly8gdHJhbnNtaXNzaW9uXG5cblx0bGV0IF90cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdC8vIGNhbWVyYSBtYXRyaWNlcyBjYWNoZVxuXG5cdGNvbnN0IF9wcm9qU2NyZWVuTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRjb25zdCBfdmVjdG9yMiA9IG5ldyBWZWN0b3IyKCk7XG5cdGNvbnN0IF92ZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblxuXHRjb25zdCBfZW1wdHlTY2VuZSA9IHsgYmFja2dyb3VuZDogbnVsbCwgZm9nOiBudWxsLCBlbnZpcm9ubWVudDogbnVsbCwgb3ZlcnJpZGVNYXRlcmlhbDogbnVsbCwgaXNTY2VuZTogdHJ1ZSB9O1xuXG5cdGZ1bmN0aW9uIGdldFRhcmdldFBpeGVsUmF0aW8oKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgPyBfcGl4ZWxSYXRpbyA6IDE7XG5cblx0fVxuXG5cdC8vIGluaXRpYWxpemVcblxuXHRsZXQgX2dsID0gX2NvbnRleHQ7XG5cblx0ZnVuY3Rpb24gZ2V0Q29udGV4dCggY29udGV4dE5hbWVzLCBjb250ZXh0QXR0cmlidXRlcyApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvbnRleHROYW1lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNvbnRleHROYW1lID0gY29udGV4dE5hbWVzWyBpIF07XG5cdFx0XHRjb25zdCBjb250ZXh0ID0gX2NhbnZhcy5nZXRDb250ZXh0KCBjb250ZXh0TmFtZSwgY29udGV4dEF0dHJpYnV0ZXMgKTtcblx0XHRcdGlmICggY29udGV4dCAhPT0gbnVsbCApIHJldHVybiBjb250ZXh0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdHRyeSB7XG5cblx0XHRjb25zdCBjb250ZXh0QXR0cmlidXRlcyA9IHtcblx0XHRcdGFscGhhOiB0cnVlLFxuXHRcdFx0ZGVwdGg6IF9kZXB0aCxcblx0XHRcdHN0ZW5jaWw6IF9zdGVuY2lsLFxuXHRcdFx0YW50aWFsaWFzOiBfYW50aWFsaWFzLFxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBfcHJlbXVsdGlwbGllZEFscGhhLFxuXHRcdFx0cHJlc2VydmVEcmF3aW5nQnVmZmVyOiBfcHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuXHRcdFx0cG93ZXJQcmVmZXJlbmNlOiBfcG93ZXJQcmVmZXJlbmNlLFxuXHRcdFx0ZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdDogX2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXRcblx0XHR9O1xuXG5cdFx0Ly8gT2Zmc2NyZWVuQ2FudmFzIGRvZXMgbm90IGhhdmUgc2V0QXR0cmlidXRlLCBzZWUgIzIyODExXG5cdFx0aWYgKCAnc2V0QXR0cmlidXRlJyBpbiBfY2FudmFzICkgX2NhbnZhcy5zZXRBdHRyaWJ1dGUoICdkYXRhLWVuZ2luZScsIGB0aHJlZS5qcyByJHtSRVZJU0lPTn1gICk7XG5cblx0XHQvLyBldmVudCBsaXN0ZW5lcnMgbXVzdCBiZSByZWdpc3RlcmVkIGJlZm9yZSBXZWJHTCBjb250ZXh0IGlzIGNyZWF0ZWQsIHNlZSAjMTI3NTNcblx0XHRfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTtcblx0XHRfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7XG5cblx0XHRpZiAoIF9nbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgY29udGV4dE5hbWVzID0gWyAnd2ViZ2wyJywgJ3dlYmdsJywgJ2V4cGVyaW1lbnRhbC13ZWJnbCcgXTtcblxuXHRcdFx0aWYgKCBfdGhpcy5pc1dlYkdMMVJlbmRlcmVyID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnRleHROYW1lcy5zaGlmdCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbCA9IGdldENvbnRleHQoIGNvbnRleHROYW1lcywgY29udGV4dEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBfZ2wgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBnZXRDb250ZXh0KCBjb250ZXh0TmFtZXMgKSApIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQgd2l0aCB5b3VyIHNlbGVjdGVkIGF0dHJpYnV0ZXMuJyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0LicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFNvbWUgZXhwZXJpbWVudGFsLXdlYmdsIGltcGxlbWVudGF0aW9ucyBkbyBub3QgaGF2ZSBnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXRcblxuXHRcdGlmICggX2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHJldHVybiB7ICdyYW5nZU1pbic6IDEsICdyYW5nZU1heCc6IDEsICdwcmVjaXNpb24nOiAxIH07XG5cblx0XHRcdH07XG5cblx0XHR9XG5cblx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBlcnJvci5tZXNzYWdlICk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cblx0fVxuXG5cdGxldCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMsIHN0YXRlLCBpbmZvO1xuXHRsZXQgcHJvcGVydGllcywgdGV4dHVyZXMsIGN1YmVtYXBzLCBjdWJldXZtYXBzLCBhdHRyaWJ1dGVzLCBnZW9tZXRyaWVzLCBvYmplY3RzO1xuXHRsZXQgcHJvZ3JhbUNhY2hlLCBtYXRlcmlhbHMsIHJlbmRlckxpc3RzLCByZW5kZXJTdGF0ZXMsIGNsaXBwaW5nLCBzaGFkb3dNYXA7XG5cblx0bGV0IGJhY2tncm91bmQsIG1vcnBodGFyZ2V0cywgYnVmZmVyUmVuZGVyZXIsIGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblxuXHRsZXQgdXRpbHMsIGJpbmRpbmdTdGF0ZXM7XG5cblx0ZnVuY3Rpb24gaW5pdEdMQ29udGV4dCgpIHtcblxuXHRcdGV4dGVuc2lvbnMgPSBuZXcgV2ViR0xFeHRlbnNpb25zKCBfZ2wgKTtcblxuXHRcdGNhcGFiaWxpdGllcyA9IG5ldyBXZWJHTENhcGFiaWxpdGllcyggX2dsLCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRleHRlbnNpb25zLmluaXQoIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0dXRpbHMgPSBuZXcgV2ViR0xVdGlscyggX2dsLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKTtcblxuXHRcdHN0YXRlID0gbmV3IFdlYkdMU3RhdGUoIF9nbCwgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICk7XG5cblx0XHRpbmZvID0gbmV3IFdlYkdMSW5mbyggX2dsICk7XG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWJHTFByb3BlcnRpZXMoKTtcblx0XHR0ZXh0dXJlcyA9IG5ldyBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICk7XG5cdFx0Y3ViZW1hcHMgPSBuZXcgV2ViR0xDdWJlTWFwcyggX3RoaXMgKTtcblx0XHRjdWJldXZtYXBzID0gbmV3IFdlYkdMQ3ViZVVWTWFwcyggX3RoaXMgKTtcblx0XHRhdHRyaWJ1dGVzID0gbmV3IFdlYkdMQXR0cmlidXRlcyggX2dsLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRiaW5kaW5nU3RhdGVzID0gbmV3IFdlYkdMQmluZGluZ1N0YXRlcyggX2dsLCBleHRlbnNpb25zLCBhdHRyaWJ1dGVzLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRnZW9tZXRyaWVzID0gbmV3IFdlYkdMR2VvbWV0cmllcyggX2dsLCBhdHRyaWJ1dGVzLCBpbmZvLCBiaW5kaW5nU3RhdGVzICk7XG5cdFx0b2JqZWN0cyA9IG5ldyBXZWJHTE9iamVjdHMoIF9nbCwgZ2VvbWV0cmllcywgYXR0cmlidXRlcywgaW5mbyApO1xuXHRcdG1vcnBodGFyZ2V0cyA9IG5ldyBXZWJHTE1vcnBodGFyZ2V0cyggX2dsLCBjYXBhYmlsaXRpZXMsIHRleHR1cmVzICk7XG5cdFx0Y2xpcHBpbmcgPSBuZXcgV2ViR0xDbGlwcGluZyggcHJvcGVydGllcyApO1xuXHRcdHByb2dyYW1DYWNoZSA9IG5ldyBXZWJHTFByb2dyYW1zKCBfdGhpcywgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgYmluZGluZ1N0YXRlcywgY2xpcHBpbmcgKTtcblx0XHRtYXRlcmlhbHMgPSBuZXcgV2ViR0xNYXRlcmlhbHMoIF90aGlzLCBwcm9wZXJ0aWVzICk7XG5cdFx0cmVuZGVyTGlzdHMgPSBuZXcgV2ViR0xSZW5kZXJMaXN0cygpO1xuXHRcdHJlbmRlclN0YXRlcyA9IG5ldyBXZWJHTFJlbmRlclN0YXRlcyggZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICk7XG5cdFx0YmFja2dyb3VuZCA9IG5ldyBXZWJHTEJhY2tncm91bmQoIF90aGlzLCBjdWJlbWFwcywgc3RhdGUsIG9iamVjdHMsIF9hbHBoYSwgX3ByZW11bHRpcGxpZWRBbHBoYSApO1xuXHRcdHNoYWRvd01hcCA9IG5ldyBXZWJHTFNoYWRvd01hcCggX3RoaXMsIG9iamVjdHMsIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0YnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRpbmRleGVkQnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIF9nbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICk7XG5cblx0XHRpbmZvLnByb2dyYW1zID0gcHJvZ3JhbUNhY2hlLnByb2dyYW1zO1xuXG5cdFx0X3RoaXMuY2FwYWJpbGl0aWVzID0gY2FwYWJpbGl0aWVzO1xuXHRcdF90aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXHRcdF90aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuXHRcdF90aGlzLnJlbmRlckxpc3RzID0gcmVuZGVyTGlzdHM7XG5cdFx0X3RoaXMuc2hhZG93TWFwID0gc2hhZG93TWFwO1xuXHRcdF90aGlzLnN0YXRlID0gc3RhdGU7XG5cdFx0X3RoaXMuaW5mbyA9IGluZm87XG5cblx0fVxuXG5cdGluaXRHTENvbnRleHQoKTtcblxuXHQvLyB4clxuXG5cdGNvbnN0IHhyID0gbmV3IFdlYlhSTWFuYWdlciggX3RoaXMsIF9nbCApO1xuXG5cdHRoaXMueHIgPSB4cjtcblxuXHQvLyBBUElcblxuXHR0aGlzLmdldENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2dsO1xuXG5cdH07XG5cblx0dGhpcy5nZXRDb250ZXh0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcblxuXHR9O1xuXG5cdHRoaXMuZm9yY2VDb250ZXh0TG9zcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApO1xuXHRcdGlmICggZXh0ZW5zaW9uICkgZXh0ZW5zaW9uLmxvc2VDb250ZXh0KCk7XG5cblx0fTtcblxuXHR0aGlzLmZvcmNlQ29udGV4dFJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2xvc2VfY29udGV4dCcgKTtcblx0XHRpZiAoIGV4dGVuc2lvbiApIGV4dGVuc2lvbi5yZXN0b3JlQ29udGV4dCgpO1xuXG5cdH07XG5cblx0dGhpcy5nZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9waXhlbFJhdGlvO1xuXG5cdH07XG5cblx0dGhpcy5zZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdF9waXhlbFJhdGlvID0gdmFsdWU7XG5cblx0XHR0aGlzLnNldFNpemUoIF93aWR0aCwgX2hlaWdodCwgZmFsc2UgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0U2l6ZSA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCwgX2hlaWdodCApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTaXplID0gZnVuY3Rpb24gKCB3aWR0aCwgaGVpZ2h0LCB1cGRhdGVTdHlsZSApIHtcblxuXHRcdGlmICggeHIuaXNQcmVzZW50aW5nICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDYW5cXCd0IGNoYW5nZSBzaXplIHdoaWxlIFZSIGRldmljZSBpcyBwcmVzZW50aW5nLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRfY2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiBfcGl4ZWxSYXRpbyApO1xuXHRcdF9jYW52YXMuaGVpZ2h0ID0gTWF0aC5mbG9vciggaGVpZ2h0ICogX3BpeGVsUmF0aW8gKTtcblxuXHRcdGlmICggdXBkYXRlU3R5bGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHRfY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuXHRcdFx0X2NhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH07XG5cblx0dGhpcy5nZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCAqIF9waXhlbFJhdGlvLCBfaGVpZ2h0ICogX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXG5cdH07XG5cblx0dGhpcy5zZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCwgcGl4ZWxSYXRpbyApIHtcblxuXHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRfcGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG5cblx0XHRfY2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiBwaXhlbFJhdGlvICk7XG5cdFx0X2NhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBwaXhlbFJhdGlvICk7XG5cblx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0fTtcblxuXHR0aGlzLmdldEN1cnJlbnRWaWV3cG9ydCA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBfY3VycmVudFZpZXdwb3J0ICk7XG5cblx0fTtcblxuXHR0aGlzLmdldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF92aWV3cG9ydCApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRWaWV3cG9ydCA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggeC5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdF92aWV3cG9ydC5zZXQoIHgueCwgeC55LCB4LnosIHgudyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3ZpZXdwb3J0LnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkuZmxvb3IoKSApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRTY2lzc29yID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF9zY2lzc29yICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFNjaXNzb3IgPSBmdW5jdGlvbiAoIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRpZiAoIHguaXNWZWN0b3I0ICkge1xuXG5cdFx0XHRfc2Npc3Nvci5zZXQoIHgueCwgeC55LCB4LnosIHgudyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3NjaXNzb3Iuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpICk7XG5cblx0fTtcblxuXHR0aGlzLmdldFNjaXNzb3JUZXN0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9zY2lzc29yVGVzdDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7XG5cblx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdCggX3NjaXNzb3JUZXN0ID0gYm9vbGVhbiApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRPcGFxdWVTb3J0ID0gZnVuY3Rpb24gKCBtZXRob2QgKSB7XG5cblx0XHRfb3BhcXVlU29ydCA9IG1ldGhvZDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0VHJhbnNwYXJlbnRTb3J0ID0gZnVuY3Rpb24gKCBtZXRob2QgKSB7XG5cblx0XHRfdHJhbnNwYXJlbnRTb3J0ID0gbWV0aG9kO1xuXG5cdH07XG5cblx0Ly8gQ2xlYXJpbmdcblxuXHR0aGlzLmdldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggYmFja2dyb3VuZC5nZXRDbGVhckNvbG9yKCkgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGJhY2tncm91bmQuc2V0Q2xlYXJDb2xvci5hcHBseSggYmFja2dyb3VuZCwgYXJndW1lbnRzICk7XG5cblx0fTtcblxuXHR0aGlzLmdldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gYmFja2dyb3VuZC5nZXRDbGVhckFscGhhKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRiYWNrZ3JvdW5kLnNldENsZWFyQWxwaGEuYXBwbHkoIGJhY2tncm91bmQsIGFyZ3VtZW50cyApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhciA9IGZ1bmN0aW9uICggY29sb3IgPSB0cnVlLCBkZXB0aCA9IHRydWUsIHN0ZW5jaWwgPSB0cnVlICkge1xuXG5cdFx0bGV0IGJpdHMgPSAwO1xuXG5cdFx0aWYgKCBjb2xvciApIGJpdHMgfD0gMTYzODQ7XG5cdFx0aWYgKCBkZXB0aCApIGJpdHMgfD0gMjU2O1xuXHRcdGlmICggc3RlbmNpbCApIGJpdHMgfD0gMTAyNDtcblxuXHRcdF9nbC5jbGVhciggYml0cyApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jbGVhciggdHJ1ZSwgZmFsc2UsIGZhbHNlICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyRGVwdGggPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNsZWFyKCBmYWxzZSwgdHJ1ZSwgZmFsc2UgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXJTdGVuY2lsID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jbGVhciggZmFsc2UsIGZhbHNlLCB0cnVlICk7XG5cblx0fTtcblxuXHQvL1xuXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdF9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdF9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UgKTtcblxuXHRcdHJlbmRlckxpc3RzLmRpc3Bvc2UoKTtcblx0XHRyZW5kZXJTdGF0ZXMuZGlzcG9zZSgpO1xuXHRcdHByb3BlcnRpZXMuZGlzcG9zZSgpO1xuXHRcdGN1YmVtYXBzLmRpc3Bvc2UoKTtcblx0XHRjdWJldXZtYXBzLmRpc3Bvc2UoKTtcblx0XHRvYmplY3RzLmRpc3Bvc2UoKTtcblx0XHRiaW5kaW5nU3RhdGVzLmRpc3Bvc2UoKTtcblx0XHRwcm9ncmFtQ2FjaGUuZGlzcG9zZSgpO1xuXG5cdFx0eHIuZGlzcG9zZSgpO1xuXG5cdFx0eHIucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Nlc3Npb25zdGFydCcsIG9uWFJTZXNzaW9uU3RhcnQgKTtcblx0XHR4ci5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Vzc2lvbmVuZCcsIG9uWFJTZXNzaW9uRW5kICk7XG5cblx0XHRpZiAoIF90cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdF90cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuZGlzcG9zZSgpO1xuXHRcdFx0X3RyYW5zbWlzc2lvblJlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdH07XG5cblx0Ly8gRXZlbnRzXG5cblx0ZnVuY3Rpb24gb25Db250ZXh0TG9zdCggZXZlbnQgKSB7XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IExvc3QuJyApO1xuXG5cdFx0X2lzQ29udGV4dExvc3QgPSB0cnVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvbkNvbnRleHRSZXN0b3JlKCAvKiBldmVudCAqLyApIHtcblxuXHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBSZXN0b3JlZC4nICk7XG5cblx0XHRfaXNDb250ZXh0TG9zdCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgaW5mb0F1dG9SZXNldCA9IGluZm8uYXV0b1Jlc2V0O1xuXHRcdGNvbnN0IHNoYWRvd01hcEVuYWJsZWQgPSBzaGFkb3dNYXAuZW5hYmxlZDtcblx0XHRjb25zdCBzaGFkb3dNYXBBdXRvVXBkYXRlID0gc2hhZG93TWFwLmF1dG9VcGRhdGU7XG5cdFx0Y29uc3Qgc2hhZG93TWFwTmVlZHNVcGRhdGUgPSBzaGFkb3dNYXAubmVlZHNVcGRhdGU7XG5cdFx0Y29uc3Qgc2hhZG93TWFwVHlwZSA9IHNoYWRvd01hcC50eXBlO1xuXG5cdFx0aW5pdEdMQ29udGV4dCgpO1xuXG5cdFx0aW5mby5hdXRvUmVzZXQgPSBpbmZvQXV0b1Jlc2V0O1xuXHRcdHNoYWRvd01hcC5lbmFibGVkID0gc2hhZG93TWFwRW5hYmxlZDtcblx0XHRzaGFkb3dNYXAuYXV0b1VwZGF0ZSA9IHNoYWRvd01hcEF1dG9VcGRhdGU7XG5cdFx0c2hhZG93TWFwLm5lZWRzVXBkYXRlID0gc2hhZG93TWFwTmVlZHNVcGRhdGU7XG5cdFx0c2hhZG93TWFwLnR5cGUgPSBzaGFkb3dNYXBUeXBlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvbk1hdGVyaWFsRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdG1hdGVyaWFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0Ly8gQnVmZmVyIGRlYWxsb2NhdGlvblxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlcyggbWF0ZXJpYWwgKTtcblxuXHRcdHByb3BlcnRpZXMucmVtb3ZlKCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2VzKCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IHByb2dyYW1zID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICkucHJvZ3JhbXM7XG5cblx0XHRpZiAoIHByb2dyYW1zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHByb2dyYW1zLmZvckVhY2goIGZ1bmN0aW9uICggcHJvZ3JhbSApIHtcblxuXHRcdFx0XHRwcm9ncmFtQ2FjaGUucmVsZWFzZVByb2dyYW0oIHByb2dyYW0gKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cHJvZ3JhbUNhY2hlLnJlbGVhc2VTaGFkZXJDYWNoZSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBCdWZmZXIgcmVuZGVyaW5nXG5cblx0dGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QgPSBmdW5jdGlvbiAoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApIHtcblxuXHRcdGlmICggc2NlbmUgPT09IG51bGwgKSBzY2VuZSA9IF9lbXB0eVNjZW5lOyAvLyByZW5kZXJCdWZmZXJEaXJlY3Qgc2Vjb25kIHBhcmFtZXRlciB1c2VkIHRvIGJlIGZvZyAoY291bGQgYmUgbnVsbClcblxuXHRcdGNvbnN0IGZyb250RmFjZUNXID0gKCBvYmplY3QuaXNNZXNoICYmIG9iamVjdC5tYXRyaXhXb3JsZC5kZXRlcm1pbmFudCgpIDwgMCApO1xuXG5cdFx0Y29uc3QgcHJvZ3JhbSA9IHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0ICk7XG5cblx0XHRzdGF0ZS5zZXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZyb250RmFjZUNXICk7XG5cblx0XHQvL1xuXG5cdFx0bGV0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggcG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbi5jb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdH0gZWxzZSBpZiAoIGluZGV4LmNvdW50ID09PSAwICkge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0bGV0IHJhbmdlRmFjdG9yID0gMTtcblxuXHRcdGlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkge1xuXG5cdFx0XHRpbmRleCA9IGdlb21ldHJpZXMuZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApO1xuXHRcdFx0cmFuZ2VGYWN0b3IgPSAyO1xuXG5cdFx0fVxuXG5cdFx0YmluZGluZ1N0YXRlcy5zZXR1cCggb2JqZWN0LCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnksIGluZGV4ICk7XG5cblx0XHRsZXQgYXR0cmlidXRlO1xuXHRcdGxldCByZW5kZXJlciA9IGJ1ZmZlclJlbmRlcmVyO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGluZGV4ICk7XG5cblx0XHRcdHJlbmRlcmVyID0gaW5kZXhlZEJ1ZmZlclJlbmRlcmVyO1xuXHRcdFx0cmVuZGVyZXIuc2V0SW5kZXgoIGF0dHJpYnV0ZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGRhdGFDb3VudCA9ICggaW5kZXggIT09IG51bGwgKSA/IGluZGV4LmNvdW50IDogcG9zaXRpb24uY291bnQ7XG5cblx0XHRjb25zdCByYW5nZVN0YXJ0ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLnN0YXJ0ICogcmFuZ2VGYWN0b3I7XG5cdFx0Y29uc3QgcmFuZ2VDb3VudCA9IGdlb21ldHJ5LmRyYXdSYW5nZS5jb3VudCAqIHJhbmdlRmFjdG9yO1xuXG5cdFx0Y29uc3QgZ3JvdXBTdGFydCA9IGdyb3VwICE9PSBudWxsID8gZ3JvdXAuc3RhcnQgKiByYW5nZUZhY3RvciA6IDA7XG5cdFx0Y29uc3QgZ3JvdXBDb3VudCA9IGdyb3VwICE9PSBudWxsID8gZ3JvdXAuY291bnQgKiByYW5nZUZhY3RvciA6IEluZmluaXR5O1xuXG5cdFx0Y29uc3QgZHJhd1N0YXJ0ID0gTWF0aC5tYXgoIHJhbmdlU3RhcnQsIGdyb3VwU3RhcnQgKTtcblx0XHRjb25zdCBkcmF3RW5kID0gTWF0aC5taW4oIGRhdGFDb3VudCwgcmFuZ2VTdGFydCArIHJhbmdlQ291bnQsIGdyb3VwU3RhcnQgKyBncm91cENvdW50ICkgLSAxO1xuXG5cdFx0Y29uc3QgZHJhd0NvdW50ID0gTWF0aC5tYXgoIDAsIGRyYXdFbmQgLSBkcmF3U3RhcnQgKyAxICk7XG5cblx0XHRpZiAoIGRyYXdDb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdC8vXG5cblx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHN0YXRlLnNldExpbmVXaWR0aCggbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoICogZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpICk7XG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCA0ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmUgKSB7XG5cblx0XHRcdGxldCBsaW5lV2lkdGggPSBtYXRlcmlhbC5saW5ld2lkdGg7XG5cblx0XHRcdGlmICggbGluZVdpZHRoID09PSB1bmRlZmluZWQgKSBsaW5lV2lkdGggPSAxOyAvLyBOb3QgdXNpbmcgTGluZSpNYXRlcmlhbFxuXG5cdFx0XHRzdGF0ZS5zZXRMaW5lV2lkdGgoIGxpbmVXaWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApO1xuXG5cdFx0XHRpZiAoIG9iamVjdC5pc0xpbmVTZWdtZW50cyApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAxICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmVMb29wICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAzICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1BvaW50cyApIHtcblxuXHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMCApO1xuXG5cdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRNb2RlKCA0ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdHJlbmRlcmVyLnJlbmRlckluc3RhbmNlcyggZHJhd1N0YXJ0LCBkcmF3Q291bnQsIG9iamVjdC5jb3VudCApO1xuXG5cdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0Y29uc3QgaW5zdGFuY2VDb3VudCA9IE1hdGgubWluKCBnZW9tZXRyeS5pbnN0YW5jZUNvdW50LCBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCApO1xuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoIGRyYXdTdGFydCwgZHJhd0NvdW50LCBpbnN0YW5jZUNvdW50ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXIoIGRyYXdTdGFydCwgZHJhd0NvdW50ICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLyBDb21waWxlXG5cblx0dGhpcy5jb21waWxlID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuaW5pdCgpO1xuXG5cdFx0cmVuZGVyU3RhdGVTdGFjay5wdXNoKCBjdXJyZW50UmVuZGVyU3RhdGUgKTtcblxuXHRcdHNjZW5lLnRyYXZlcnNlVmlzaWJsZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LmlzTGlnaHQgJiYgb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICkgKSB7XG5cblx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodCggb2JqZWN0ICk7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU2hhZG93KCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0cyggX3RoaXMucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgKTtcblxuXHRcdHNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbWF0ZXJpYWwubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbDIgPSBtYXRlcmlhbFsgaSBdO1xuXG5cdFx0XHRcdFx0XHRnZXRQcm9ncmFtKCBtYXRlcmlhbDIsIHNjZW5lLCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Z2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHRcdHJlbmRlclN0YXRlU3RhY2sucG9wKCk7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcblxuXHR9O1xuXG5cdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0bGV0IG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IG51bGw7XG5cblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSApIHtcblxuXHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uWFJTZXNzaW9uU3RhcnQoKSB7XG5cblx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvblhSU2Vzc2lvbkVuZCgpIHtcblxuXHRcdGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdH1cblxuXHRjb25zdCBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHRpZiAoIHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyApIGFuaW1hdGlvbi5zZXRDb250ZXh0KCBzZWxmICk7XG5cblx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdHhyLnNldEFuaW1hdGlvbkxvb3AoIGNhbGxiYWNrICk7XG5cblx0XHQoIGNhbGxiYWNrID09PSBudWxsICkgPyBhbmltYXRpb24uc3RvcCgpIDogYW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0fTtcblxuXHR4ci5hZGRFdmVudExpc3RlbmVyKCAnc2Vzc2lvbnN0YXJ0Jywgb25YUlNlc3Npb25TdGFydCApO1xuXHR4ci5hZGRFdmVudExpc3RlbmVyKCAnc2Vzc2lvbmVuZCcsIG9uWFJTZXNzaW9uRW5kICk7XG5cblx0Ly8gUmVuZGVyaW5nXG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIGNhbWVyYSAhPT0gdW5kZWZpbmVkICYmIGNhbWVyYS5pc0NhbWVyYSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyOiBjYW1lcmEgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkNhbWVyYS4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIF9pc0NvbnRleHRMb3N0ID09PSB0cnVlICkgcmV0dXJuO1xuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRpZiAoIHNjZW5lLmF1dG9VcGRhdGUgPT09IHRydWUgKSBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0Ly8gdXBkYXRlIGNhbWVyYSBtYXRyaWNlcyBhbmQgZnJ1c3R1bVxuXG5cdFx0aWYgKCBjYW1lcmEucGFyZW50ID09PSBudWxsICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRpZiAoIHhyLmVuYWJsZWQgPT09IHRydWUgJiYgeHIuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIHhyLmNhbWVyYUF1dG9VcGRhdGUgPT09IHRydWUgKSB4ci51cGRhdGVDYW1lcmEoIGNhbWVyYSApO1xuXG5cdFx0XHRjYW1lcmEgPSB4ci5nZXRDYW1lcmEoKTsgLy8gdXNlIFhSIGNhbWVyYSBmb3IgcmVuZGVyaW5nXG5cblx0XHR9XG5cblx0XHQvL1xuXHRcdGlmICggc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSApIHNjZW5lLm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCByZW5kZXJTdGF0ZVN0YWNrLmxlbmd0aCApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCk7XG5cblx0XHRyZW5kZXJTdGF0ZVN0YWNrLnB1c2goIGN1cnJlbnRSZW5kZXJTdGF0ZSApO1xuXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRfZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQ7XG5cdFx0X2NsaXBwaW5nRW5hYmxlZCA9IGNsaXBwaW5nLmluaXQoIHRoaXMuY2xpcHBpbmdQbGFuZXMsIF9sb2NhbENsaXBwaW5nRW5hYmxlZCwgY2FtZXJhICk7XG5cblx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IHJlbmRlckxpc3RzLmdldCggc2NlbmUsIHJlbmRlckxpc3RTdGFjay5sZW5ndGggKTtcblx0XHRjdXJyZW50UmVuZGVyTGlzdC5pbml0KCk7XG5cblx0XHRyZW5kZXJMaXN0U3RhY2sucHVzaCggY3VycmVudFJlbmRlckxpc3QgKTtcblxuXHRcdHByb2plY3RPYmplY3QoIHNjZW5lLCBjYW1lcmEsIDAsIF90aGlzLnNvcnRPYmplY3RzICk7XG5cblx0XHRjdXJyZW50UmVuZGVyTGlzdC5maW5pc2goKTtcblxuXHRcdGlmICggX3RoaXMuc29ydE9iamVjdHMgPT09IHRydWUgKSB7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnNvcnQoIF9vcGFxdWVTb3J0LCBfdHJhbnNwYXJlbnRTb3J0ICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkgY2xpcHBpbmcuYmVnaW5TaGFkb3dzKCk7XG5cblx0XHRjb25zdCBzaGFkb3dzQXJyYXkgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUuc2hhZG93c0FycmF5O1xuXG5cdFx0c2hhZG93TWFwLnJlbmRlciggc2hhZG93c0FycmF5LCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSBjbGlwcGluZy5lbmRTaGFkb3dzKCk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmluZm8uYXV0b1Jlc2V0ID09PSB0cnVlICkgdGhpcy5pbmZvLnJlc2V0KCk7XG5cblx0XHQvL1xuXG5cdFx0YmFja2dyb3VuZC5yZW5kZXIoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSApO1xuXG5cdFx0Ly8gcmVuZGVyIHNjZW5lXG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHMoIF90aGlzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzICk7XG5cblx0XHRpZiAoIGNhbWVyYS5pc0FycmF5Q2FtZXJhICkge1xuXG5cdFx0XHRjb25zdCBjYW1lcmFzID0gY2FtZXJhLmNhbWVyYXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNhbWVyYXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjYW1lcmEyID0gY2FtZXJhc1sgaSBdO1xuXG5cdFx0XHRcdHJlbmRlclNjZW5lKCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYTIsIGNhbWVyYTIudmlld3BvcnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBfY3VycmVudFJlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gcmVzb2x2ZSBtdWx0aXNhbXBsZSByZW5kZXJidWZmZXJzIHRvIGEgc2luZ2xlLXNhbXBsZSB0ZXh0dXJlIGlmIG5lY2Vzc2FyeVxuXG5cdFx0XHR0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0Ly8gR2VuZXJhdGUgbWlwbWFwIGlmIHdlJ3JlIHVzaW5nIGFueSBraW5kIG9mIG1pcG1hcCBmaWx0ZXJpbmdcblxuXHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCBfY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSApIHNjZW5lLm9uQWZ0ZXJSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHQvLyBfZ2wuZmluaXNoKCk7XG5cblx0XHRiaW5kaW5nU3RhdGVzLnJlc2V0RGVmYXVsdFN0YXRlKCk7XG5cdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gLSAxO1xuXHRcdF9jdXJyZW50Q2FtZXJhID0gbnVsbDtcblxuXHRcdHJlbmRlclN0YXRlU3RhY2sucG9wKCk7XG5cblx0XHRpZiAoIHJlbmRlclN0YXRlU3RhY2subGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVTdGFja1sgcmVuZGVyU3RhdGVTdGFjay5sZW5ndGggLSAxIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyTGlzdFN0YWNrLnBvcCgpO1xuXG5cdFx0aWYgKCByZW5kZXJMaXN0U3RhY2subGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y3VycmVudFJlbmRlckxpc3QgPSByZW5kZXJMaXN0U3RhY2tbIHJlbmRlckxpc3RTdGFjay5sZW5ndGggLSAxIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7XG5cblx0XHR9XG5cblx0fTtcblxuXHRmdW5jdGlvbiBwcm9qZWN0T2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKSB7XG5cblx0XHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGNvbnN0IHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNHcm91cCApIHtcblxuXHRcdFx0XHRncm91cE9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMT0QgKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIG9iamVjdC51cGRhdGUoIGNhbWVyYSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRcdGlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzU3ByaXRlKCBvYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIG9iamVjdCApO1xuXHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0aWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApIHtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICkge1xuXG5cdFx0XHRcdFx0Ly8gdXBkYXRlIHNrZWxldG9uIG9ubHkgb25jZSBpbiBhIGZyYW1lXG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5za2VsZXRvbi5mcmFtZSAhPT0gaW5mby5yZW5kZXIuZnJhbWUgKSB7XG5cblx0XHRcdFx0XHRcdG9iamVjdC5za2VsZXRvbi51cGRhdGUoKTtcblx0XHRcdFx0XHRcdG9iamVjdC5za2VsZXRvbi5mcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgZ3JvdXBNYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yMy56LCBudWxsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHByb2plY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCB2aWV3cG9ydCApIHtcblxuXHRcdGNvbnN0IG9wYXF1ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC5vcGFxdWU7XG5cdFx0Y29uc3QgdHJhbnNtaXNzaXZlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zbWlzc2l2ZTtcblx0XHRjb25zdCB0cmFuc3BhcmVudE9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc3BhcmVudDtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0c1ZpZXcoIGNhbWVyYSApO1xuXG5cdFx0aWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJUcmFuc21pc3Npb25QYXNzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRpZiAoIHZpZXdwb3J0ICkgc3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggdmlld3BvcnQgKSApO1xuXG5cdFx0aWYgKCBvcGFxdWVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0aWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCB0cmFuc21pc3NpdmVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0aWYgKCB0cmFuc3BhcmVudE9iamVjdHMubGVuZ3RoID4gMCApIHJlbmRlck9iamVjdHMoIHRyYW5zcGFyZW50T2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0Ly8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWQgb24gbmV4dCByZW5kZXJcblxuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0TWFzayggdHJ1ZSApO1xuXG5cdFx0c3RhdGUuc2V0UG9seWdvbk9mZnNldCggZmFsc2UgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyVHJhbnNtaXNzaW9uUGFzcyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdFx0aWYgKCBfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0XHRfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCAxLCAxLCB7XG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwczogdHJ1ZSxcblx0XHRcdFx0dHlwZTogdXRpbHMuY29udmVydCggSGFsZkZsb2F0VHlwZSApICE9PSBudWxsID8gSGFsZkZsb2F0VHlwZSA6IFVuc2lnbmVkQnl0ZVR5cGUsXG5cdFx0XHRcdG1pbkZpbHRlcjogTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLFxuXHRcdFx0XHRzYW1wbGVzOiAoIGlzV2ViR0wyICYmIF9hbnRpYWxpYXMgPT09IHRydWUgKSA/IDQgOiAwXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRfdGhpcy5nZXREcmF3aW5nQnVmZmVyU2l6ZSggX3ZlY3RvcjIgKTtcblxuXHRcdGlmICggaXNXZWJHTDIgKSB7XG5cblx0XHRcdF90cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuc2V0U2l6ZSggX3ZlY3RvcjIueCwgX3ZlY3RvcjIueSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3RyYW5zbWlzc2lvblJlbmRlclRhcmdldC5zZXRTaXplKCBmbG9vclBvd2VyT2ZUd28oIF92ZWN0b3IyLnggKSwgZmxvb3JQb3dlck9mVHdvKCBfdmVjdG9yMi55ICkgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gX3RoaXMuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0X3RoaXMuc2V0UmVuZGVyVGFyZ2V0KCBfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cdFx0X3RoaXMuY2xlYXIoKTtcblxuXHRcdC8vIFR1cm4gb2ZmIHRoZSBmZWF0dXJlcyB3aGljaCBjYW4gYWZmZWN0IHRoZSBmcmFnIGNvbG9yIGZvciBvcGFxdWUgb2JqZWN0cyBwYXNzLlxuXHRcdC8vIE90aGVyd2lzZSB0aGV5IGFyZSBhcHBsaWVkIHR3aWNlIGluIG9wYXF1ZSBvYmplY3RzIHBhc3MgYW5kIHRyYW5zbWlzc2lvbiBvYmplY3RzIHBhc3MuXG5cdFx0Y29uc3QgY3VycmVudFRvbmVNYXBwaW5nID0gX3RoaXMudG9uZU1hcHBpbmc7XG5cdFx0X3RoaXMudG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0cmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0X3RoaXMudG9uZU1hcHBpbmcgPSBjdXJyZW50VG9uZU1hcHBpbmc7XG5cblx0XHR0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXHRcdHRleHR1cmVzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXG5cdFx0X3RoaXMuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdHMoIHJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBvdmVycmlkZU1hdGVyaWFsID0gc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSA/IHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWwgOiBudWxsO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCByZW5kZXJJdGVtID0gcmVuZGVyTGlzdFsgaSBdO1xuXG5cdFx0XHRjb25zdCBvYmplY3QgPSByZW5kZXJJdGVtLm9iamVjdDtcblx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb3ZlcnJpZGVNYXRlcmlhbCA9PT0gbnVsbCA/IHJlbmRlckl0ZW0ubWF0ZXJpYWwgOiBvdmVycmlkZU1hdGVyaWFsO1xuXHRcdFx0Y29uc3QgZ3JvdXAgPSByZW5kZXJJdGVtLmdyb3VwO1xuXG5cdFx0XHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKSB7XG5cblx0XHRvYmplY3Qub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRvYmplY3QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXHRcdG9iamVjdC5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCBvYmplY3QubW9kZWxWaWV3TWF0cml4ICk7XG5cblx0XHRtYXRlcmlhbC5vbkJlZm9yZVJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICYmIG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUgKSB7XG5cblx0XHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRcdG1hdGVyaWFsLnNpZGUgPSBGcm9udFNpZGU7XG5cdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRtYXRlcmlhbC5zaWRlID0gRG91YmxlU2lkZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHR9XG5cblx0XHRvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIHNjZW5lLmlzU2NlbmUgIT09IHRydWUgKSBzY2VuZSA9IF9lbXB0eVNjZW5lOyAvLyBzY2VuZSBjb3VsZCBiZSBhIE1lc2gsIExpbmUsIFBvaW50cywgLi4uXG5cblx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGNvbnN0IGxpZ2h0cyA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5saWdodHM7XG5cdFx0Y29uc3Qgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdGNvbnN0IGxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0cy5zdGF0ZS52ZXJzaW9uO1xuXG5cdFx0Y29uc3QgcGFyYW1ldGVycyA9IHByb2dyYW1DYWNoZS5nZXRQYXJhbWV0ZXJzKCBtYXRlcmlhbCwgbGlnaHRzLnN0YXRlLCBzaGFkb3dzQXJyYXksIHNjZW5lLCBvYmplY3QgKTtcblx0XHRjb25zdCBwcm9ncmFtQ2FjaGVLZXkgPSBwcm9ncmFtQ2FjaGUuZ2V0UHJvZ3JhbUNhY2hlS2V5KCBwYXJhbWV0ZXJzICk7XG5cblx0XHRsZXQgcHJvZ3JhbXMgPSBtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbXM7XG5cblx0XHQvLyBhbHdheXMgdXBkYXRlIGVudmlyb25tZW50IGFuZCBmb2cgLSBjaGFuZ2luZyB0aGVzZSB0cmlnZ2VyIGFuIGdldFByb2dyYW0gY2FsbCwgYnV0IGl0J3MgcG9zc2libGUgdGhhdCB0aGUgcHJvZ3JhbSBkb2Vzbid0IGNoYW5nZVxuXG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmVudmlyb25tZW50ID0gbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IHNjZW5lLmVudmlyb25tZW50IDogbnVsbDtcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMuZm9nID0gc2NlbmUuZm9nO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXAgPSAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIG1hdGVyaWFsLmVudk1hcCB8fCBtYXRlcmlhbFByb3BlcnRpZXMuZW52aXJvbm1lbnQgKTtcblxuXHRcdGlmICggcHJvZ3JhbXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbmV3IG1hdGVyaWFsXG5cblx0XHRcdG1hdGVyaWFsLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdFx0cHJvZ3JhbXMgPSBuZXcgTWFwKCk7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcblxuXHRcdH1cblxuXHRcdGxldCBwcm9ncmFtID0gcHJvZ3JhbXMuZ2V0KCBwcm9ncmFtQ2FjaGVLZXkgKTtcblxuXHRcdGlmICggcHJvZ3JhbSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBlYXJseSBvdXQgaWYgcHJvZ3JhbSBhbmQgbGlnaHQgc3RhdGUgaXMgaWRlbnRpY2FsXG5cblx0XHRcdGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmN1cnJlbnRQcm9ncmFtID09PSBwcm9ncmFtICYmIG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gPT09IGxpZ2h0c1N0YXRlVmVyc2lvbiApIHtcblxuXHRcdFx0XHR1cGRhdGVDb21tb25NYXRlcmlhbFByb3BlcnRpZXMoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRcdFx0cmV0dXJuIHByb2dyYW07XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHBhcmFtZXRlcnMudW5pZm9ybXMgPSBwcm9ncmFtQ2FjaGUuZ2V0VW5pZm9ybXMoIG1hdGVyaWFsICk7XG5cblx0XHRcdG1hdGVyaWFsLm9uQnVpbGQoIG9iamVjdCwgcGFyYW1ldGVycywgX3RoaXMgKTtcblxuXHRcdFx0bWF0ZXJpYWwub25CZWZvcmVDb21waWxlKCBwYXJhbWV0ZXJzLCBfdGhpcyApO1xuXG5cdFx0XHRwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKCBwYXJhbWV0ZXJzLCBwcm9ncmFtQ2FjaGVLZXkgKTtcblx0XHRcdHByb2dyYW1zLnNldCggcHJvZ3JhbUNhY2hlS2V5LCBwcm9ncmFtICk7XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcyA9IHBhcmFtZXRlcnMudW5pZm9ybXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcztcblxuXHRcdGlmICggKCAhIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgISBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsICkgfHwgbWF0ZXJpYWwuY2xpcHBpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmNsaXBwaW5nUGxhbmVzID0gY2xpcHBpbmcudW5pZm9ybTtcblxuXHRcdH1cblxuXHRcdHVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKTtcblxuXHRcdC8vIHN0b3JlIHRoZSBsaWdodCBzZXR1cCBpdCB3YXMgY3JlYXRlZCBmb3JcblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyA9IG1hdGVyaWFsTmVlZHNMaWdodHMoIG1hdGVyaWFsICk7XG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0c1N0YXRlVmVyc2lvbjtcblxuXHRcdGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzICkge1xuXG5cdFx0XHQvLyB3aXJlIHVwIHRoZSBtYXRlcmlhbCB0byB0aGlzIHJlbmRlcmVyJ3MgbGlnaHRpbmcgc3RhdGVcblxuXHRcdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IudmFsdWUgPSBsaWdodHMuc3RhdGUuYW1iaWVudDtcblx0XHRcdHVuaWZvcm1zLmxpZ2h0UHJvYmUudmFsdWUgPSBsaWdodHMuc3RhdGUucHJvYmU7XG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbDtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93O1xuXHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90O1xuXHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0U2hhZG93cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93O1xuXHRcdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWE7XG5cdFx0XHR1bmlmb3Jtcy5sdGNfMS52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYUxUQzE7XG5cdFx0XHR1bmlmb3Jtcy5sdGNfMi52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYUxUQzI7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludDtcblx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRTaGFkb3dzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93O1xuXHRcdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5oZW1pO1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcDtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4O1xuXHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWFwO1xuXHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWF0cml4O1xuXHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXA7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hdHJpeDtcblx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBhZGQgYXJlYSBsaWdodHMgc2hhZG93IGluZm8gdG8gdW5pZm9ybXNcblxuXHRcdH1cblxuXHRcdGNvbnN0IHByb2dVbmlmb3JtcyA9IHByb2dyYW0uZ2V0VW5pZm9ybXMoKTtcblx0XHRjb25zdCB1bmlmb3Jtc0xpc3QgPSBXZWJHTFVuaWZvcm1zLnNlcVdpdGhWYWx1ZSggcHJvZ1VuaWZvcm1zLnNlcSwgdW5pZm9ybXMgKTtcblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5jdXJyZW50UHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9IHVuaWZvcm1zTGlzdDtcblxuXHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVDb21tb25NYXRlcmlhbFByb3BlcnRpZXMoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRtYXRlcmlhbFByb3BlcnRpZXMub3V0cHV0RW5jb2RpbmcgPSBwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID0gcGFyYW1ldGVycy5pbnN0YW5jaW5nO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9IHBhcmFtZXRlcnMuc2tpbm5pbmc7XG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0cyA9IHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaE5vcm1hbHMgPSBwYXJhbWV0ZXJzLm1vcnBoTm9ybWFscztcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhDb2xvcnMgPSBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaFRhcmdldHNDb3VudCA9IHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQ7XG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzID0gcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcztcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uID0gcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy52ZXJ0ZXhBbHBoYXMgPSBwYXJhbWV0ZXJzLnZlcnRleEFscGhhcztcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4VGFuZ2VudHMgPSBwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy50b25lTWFwcGluZyA9IHBhcmFtZXRlcnMudG9uZU1hcHBpbmc7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBzY2VuZS5pc1NjZW5lICE9PSB0cnVlICkgc2NlbmUgPSBfZW1wdHlTY2VuZTsgLy8gc2NlbmUgY291bGQgYmUgYSBNZXNoLCBMaW5lLCBQb2ludHMsIC4uLlxuXG5cdFx0dGV4dHVyZXMucmVzZXRUZXh0dXJlVW5pdHMoKTtcblxuXHRcdGNvbnN0IGZvZyA9IHNjZW5lLmZvZztcblx0XHRjb25zdCBlbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7XG5cdFx0Y29uc3QgZW5jb2RpbmcgPSAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsICkgPyBfdGhpcy5vdXRwdXRFbmNvZGluZyA6ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCA9PT0gdHJ1ZSA/IF9jdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUuZW5jb2RpbmcgOiBMaW5lYXJFbmNvZGluZyApO1xuXHRcdGNvbnN0IGVudk1hcCA9ICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IGN1YmV1dm1hcHMgOiBjdWJlbWFwcyApLmdldCggbWF0ZXJpYWwuZW52TWFwIHx8IGVudmlyb25tZW50ICk7XG5cdFx0Y29uc3QgdmVydGV4QWxwaGFzID0gbWF0ZXJpYWwudmVydGV4Q29sb3JzID09PSB0cnVlICYmICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5pdGVtU2l6ZSA9PT0gNDtcblx0XHRjb25zdCB2ZXJ0ZXhUYW5nZW50cyA9ICEhIG1hdGVyaWFsLm5vcm1hbE1hcCAmJiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQ7XG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gISEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGNvbnN0IG1vcnBoTm9ybWFscyA9ICEhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWw7XG5cdFx0Y29uc3QgbW9ycGhDb2xvcnMgPSAhISBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0Y29uc3QgdG9uZU1hcHBpbmcgPSBtYXRlcmlhbC50b25lTWFwcGVkID8gX3RoaXMudG9uZU1hcHBpbmcgOiBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzQ291bnQgPSAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoQXR0cmlidXRlLmxlbmd0aCA6IDA7XG5cblx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblx0XHRjb25zdCBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXG5cdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSB8fCBjYW1lcmEgIT09IF9jdXJyZW50Q2FtZXJhICkge1xuXG5cdFx0XHRcdGNvbnN0IHVzZUNhY2hlID1cblx0XHRcdFx0XHRjYW1lcmEgPT09IF9jdXJyZW50Q2FtZXJhICYmXG5cdFx0XHRcdFx0bWF0ZXJpYWwuaWQgPT09IF9jdXJyZW50TWF0ZXJpYWxJZDtcblxuXHRcdFx0XHQvLyB3ZSBtaWdodCB3YW50IHRvIGNhbGwgdGhpcyBmdW5jdGlvbiB3aXRoIHNvbWUgQ2xpcHBpbmdHcm91cFxuXHRcdFx0XHQvLyBvYmplY3QgaW5zdGVhZCBvZiB0aGUgbWF0ZXJpYWwsIG9uY2UgaXQgYmVjb21lcyBmZWFzaWJsZVxuXHRcdFx0XHQvLyAoIzg0NjUsICM4Mzc5KVxuXHRcdFx0XHRjbGlwcGluZy5zZXRTdGF0ZSggbWF0ZXJpYWwsIGNhbWVyYSwgdXNlQ2FjaGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGxldCBuZWVkc1Byb2dyYW1DaGFuZ2UgPSBmYWxzZTtcblxuXHRcdGlmICggbWF0ZXJpYWwudmVyc2lvbiA9PT0gbWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgJiYgKCBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uICE9PSBsaWdodHMuc3RhdGUudmVyc2lvbiApICkge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5vdXRwdXRFbmNvZGluZyAhPT0gZW5jb2RpbmcgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuc2tpbm5pbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudk1hcCAhPT0gZW52TWFwICkge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmZvZyAmJiBtYXRlcmlhbFByb3BlcnRpZXMuZm9nICE9PSBmb2cgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0KCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IGNsaXBwaW5nLm51bVBsYW5lcyB8fFxuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uICE9PSBjbGlwcGluZy5udW1JbnRlcnNlY3Rpb24gKSApIHtcblxuXHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4QWxwaGFzICE9PSB2ZXJ0ZXhBbHBoYXMgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlcnRleFRhbmdlbnRzICE9PSB2ZXJ0ZXhUYW5nZW50cyApIHtcblxuXHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhUYXJnZXRzICE9PSBtb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoTm9ybWFscyAhPT0gbW9ycGhOb3JtYWxzICkge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaENvbG9ycyAhPT0gbW9ycGhDb2xvcnMgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnRvbmVNYXBwaW5nICE9PSB0b25lTWFwcGluZyApIHtcblxuXHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPT09IHRydWUgJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0c0NvdW50ICE9PSBtb3JwaFRhcmdldHNDb3VudCApIHtcblxuXHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IG1hdGVyaWFsLnZlcnNpb247XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0bGV0IHByb2dyYW0gPSBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW07XG5cblx0XHRpZiAoIG5lZWRzUHJvZ3JhbUNoYW5nZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0cHJvZ3JhbSA9IGdldFByb2dyYW0oIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRsZXQgcmVmcmVzaFByb2dyYW0gPSBmYWxzZTtcblx0XHRsZXQgcmVmcmVzaE1hdGVyaWFsID0gZmFsc2U7XG5cdFx0bGV0IHJlZnJlc2hMaWdodHMgPSBmYWxzZTtcblxuXHRcdGNvbnN0IHBfdW5pZm9ybXMgPSBwcm9ncmFtLmdldFVuaWZvcm1zKCksXG5cdFx0XHRtX3VuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zO1xuXG5cdFx0aWYgKCBzdGF0ZS51c2VQcm9ncmFtKCBwcm9ncmFtLnByb2dyYW0gKSApIHtcblxuXHRcdFx0cmVmcmVzaFByb2dyYW0gPSB0cnVlO1xuXHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5pZCAhPT0gX2N1cnJlbnRNYXRlcmlhbElkICkge1xuXG5cdFx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSBtYXRlcmlhbC5pZDtcblxuXHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVmcmVzaFByb2dyYW0gfHwgX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncHJvamVjdGlvbk1hdHJpeCcsIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbG9nRGVwdGhCdWZGQycsXG5cdFx0XHRcdFx0Mi4wIC8gKCBNYXRoLmxvZyggY2FtZXJhLmZhciArIDEuMCApIC8gTWF0aC5MTjIgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0XHRfY3VycmVudENhbWVyYSA9IGNhbWVyYTtcblxuXHRcdFx0XHQvLyBsaWdodGluZyB1bmlmb3JtcyBkZXBlbmQgb24gdGhlIGNhbWVyYSBzbyBlbmZvcmNlIGFuIHVwZGF0ZVxuXHRcdFx0XHQvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlblxuXHRcdFx0XHQvLyB0aGUgbmV4dCBtYXRlcmlhbCB0aGF0IGRvZXMgZ2V0cyBhY3RpdmF0ZWQ6XG5cblx0XHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcdFx0Ly8gc2V0IHRvIHRydWUgb24gbWF0ZXJpYWwgY2hhbmdlXG5cdFx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1x0XHQvLyByZW1haW5zIHNldCB1bnRpbCB1cGRhdGUgZG9uZVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGxvYWQgbWF0ZXJpYWwgc3BlY2lmaWMgdW5pZm9ybXNcblx0XHRcdC8vIChzaGFkZXIgbWF0ZXJpYWwgYWxzbyBnZXRzIHRoZW0gZm9yIHRoZSBzYWtlIG9mIGdlbmVyaWNpdHkpXG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmVudk1hcCApIHtcblxuXHRcdFx0XHRjb25zdCB1Q2FtUG9zID0gcF91bmlmb3Jtcy5tYXAuY2FtZXJhUG9zaXRpb247XG5cblx0XHRcdFx0aWYgKCB1Q2FtUG9zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR1Q2FtUG9zLnNldFZhbHVlKCBfZ2wsXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoTGFtYmVydE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2lzT3J0aG9ncmFwaGljJywgY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhID09PSB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNTaGFkb3dNYXRlcmlhbCB8fFxuXHRcdFx0XHRvYmplY3QuaXNTa2lubmVkTWVzaCApIHtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd2aWV3TWF0cml4JywgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBza2lubmluZyBhbmQgbW9ycGggdGFyZ2V0IHVuaWZvcm1zIG11c3QgYmUgc2V0IGV2ZW4gaWYgbWF0ZXJpYWwgZGlkbid0IGNoYW5nZVxuXHRcdC8vIGF1dG8tc2V0dGluZyBvZiB0ZXh0dXJlIHVuaXQgZm9yIGJvbmUgYW5kIG1vcnBoIHRleHR1cmUgbXVzdCBnbyBiZWZvcmUgb3RoZXIgdGV4dHVyZXNcblx0XHQvLyBvdGhlcndpc2UgdGV4dHVyZXMgdXNlZCBmb3Igc2tpbm5pbmcgYW5kIG1vcnBoaW5nIGNhbiB0YWtlIG92ZXIgdGV4dHVyZSB1bml0cyByZXNlcnZlZCBmb3Igb3RoZXIgbWF0ZXJpYWwgdGV4dHVyZXNcblxuXHRcdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeCcgKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeEludmVyc2UnICk7XG5cblx0XHRcdGNvbnN0IHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uO1xuXG5cdFx0XHRpZiAoIHNrZWxldG9uICkge1xuXG5cdFx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNrZWxldG9uLmJvbmVUZXh0dXJlID09PSBudWxsICkgc2tlbGV0b24uY29tcHV0ZUJvbmVUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlLCB0ZXh0dXJlcyApO1xuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2JvbmVUZXh0dXJlU2l6ZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlU2l6ZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIHNrZWxldG9uLCAnYm9uZU1hdHJpY2VzJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCB8fCBtb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgfHwgKCBtb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCAmJiBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPT09IHRydWUgKSApIHtcblxuXHRcdFx0bW9ycGh0YXJnZXRzLnVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0gKTtcblxuXHRcdH1cblxuXG5cdFx0aWYgKCByZWZyZXNoTWF0ZXJpYWwgfHwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3cgIT09IG9iamVjdC5yZWNlaXZlU2hhZG93ICkge1xuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucmVjZWl2ZVNoYWRvdyA9IG9iamVjdC5yZWNlaXZlU2hhZG93O1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncmVjZWl2ZVNoYWRvdycsIG9iamVjdC5yZWNlaXZlU2hhZG93ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlZnJlc2hNYXRlcmlhbCApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdFeHBvc3VyZScsIF90aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgKSB7XG5cblx0XHRcdFx0Ly8gdGhlIGN1cnJlbnQgbWF0ZXJpYWwgcmVxdWlyZXMgbGlnaHRpbmcgaW5mb1xuXG5cdFx0XHRcdC8vIG5vdGU6IGFsbCBsaWdodGluZyB1bmlmb3JtcyBhcmUgYWx3YXlzIHNldCBjb3JyZWN0bHlcblx0XHRcdFx0Ly8gdGhleSBzaW1wbHkgcmVmZXJlbmNlIHRoZSByZW5kZXJlcidzIHN0YXRlIGZvciB0aGVpclxuXHRcdFx0XHQvLyB2YWx1ZXNcblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gdXNlIHRoZSBjdXJyZW50IG1hdGVyaWFsJ3MgLm5lZWRzVXBkYXRlIGZsYWdzIHRvIHNldFxuXHRcdFx0XHQvLyB0aGUgR0wgc3RhdGUgd2hlbiByZXF1aXJlZFxuXG5cdFx0XHRcdG1hcmtVbmlmb3Jtc0xpZ2h0c05lZWRzVXBkYXRlKCBtX3VuaWZvcm1zLCByZWZyZXNoTGlnaHRzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVmcmVzaCB1bmlmb3JtcyBjb21tb24gdG8gc2V2ZXJhbCBtYXRlcmlhbHNcblxuXHRcdFx0aWYgKCBmb2cgJiYgbWF0ZXJpYWwuZm9nICkge1xuXG5cdFx0XHRcdG1hdGVyaWFscy5yZWZyZXNoRm9nVW5pZm9ybXMoIG1fdW5pZm9ybXMsIGZvZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFscy5yZWZyZXNoTWF0ZXJpYWxVbmlmb3JtcyggbV91bmlmb3JtcywgbWF0ZXJpYWwsIF9waXhlbFJhdGlvLCBfaGVpZ2h0LCBfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZCggX2dsLCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0LCBtX3VuaWZvcm1zLCB0ZXh0dXJlcyApO1xuXHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU3ByaXRlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2NlbnRlcicsIG9iamVjdC5jZW50ZXIgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbW1vbiBtYXRyaWNlc1xuXG5cdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbW9kZWxWaWV3TWF0cml4Jywgb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ25vcm1hbE1hdHJpeCcsIG9iamVjdC5ub3JtYWxNYXRyaXggKTtcblx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdtb2RlbE1hdHJpeCcsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fVxuXG5cdC8vIElmIHVuaWZvcm1zIGFyZSBtYXJrZWQgYXMgY2xlYW4sIHRoZXkgZG9uJ3QgbmVlZCB0byBiZSBsb2FkZWQgdG8gdGhlIEdQVS5cblxuXHRmdW5jdGlvbiBtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggdW5pZm9ybXMsIHZhbHVlICkge1xuXG5cdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5saWdodFByb2JlLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMucG9pbnRMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0U2hhZG93cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnNwb3RMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5zcG90TGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5oZW1pc3BoZXJlTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG1hdGVyaWFsTmVlZHNMaWdodHMoIG1hdGVyaWFsICkge1xuXG5cdFx0cmV0dXJuIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0bWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc1NoYWRvd01hdGVyaWFsIHx8XG5cdFx0XHQoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwubGlnaHRzID09PSB0cnVlICk7XG5cblx0fVxuXG5cdHRoaXMuZ2V0QWN0aXZlQ3ViZUZhY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRBY3RpdmVDdWJlRmFjZTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbDtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0O1xuXG5cdH07XG5cblx0dGhpcy5zZXRSZW5kZXJUYXJnZXRUZXh0dXJlcyA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBjb2xvclRleHR1cmUsIGRlcHRoVGV4dHVyZSApIHtcblxuXHRcdHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlID0gY29sb3JUZXh0dXJlO1xuXHRcdHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmUgPSBkZXB0aFRleHR1cmU7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19oYXNFeHRlcm5hbFRleHR1cmVzID0gdHJ1ZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2hhc0V4dGVybmFsVGV4dHVyZXMgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19hdXRvQWxsb2NhdGVEZXB0aEJ1ZmZlciA9IGRlcHRoVGV4dHVyZSA9PT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoICEgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdC8vIFRoZSBtdWx0aXNhbXBsZV9yZW5kZXJfdG9fdGV4dHVyZSBleHRlbnNpb24gZG9lc24ndCB3b3JrIHByb3Blcmx5IGlmIHRoZXJlXG5cdFx0XHRcdC8vIGFyZSBtaWRmcmFtZSBmbHVzaGVzIGFuZCBhbiBleHRlcm5hbCBkZXB0aCBidWZmZXIuIERpc2FibGUgdXNlIG9mIHRoZSBleHRlbnNpb24uXG5cdFx0XHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBSZW5kZXItdG8tdGV4dHVyZSBleHRlbnNpb24gd2FzIGRpc2FibGVkIGJlY2F1c2UgYW4gZXh0ZXJuYWwgdGV4dHVyZSB3YXMgcHJvdmlkZWQnICk7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3VzZVJlbmRlclRvVGV4dHVyZSA9IGZhbHNlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5zZXRSZW5kZXJUYXJnZXRGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBkZWZhdWx0RnJhbWVidWZmZXIgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gZGVmYXVsdEZyYW1lYnVmZmVyO1xuXHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VEZWZhdWx0RnJhbWVidWZmZXIgPSBkZWZhdWx0RnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGFjdGl2ZUN1YmVGYWNlID0gMCwgYWN0aXZlTWlwbWFwTGV2ZWwgPSAwICkge1xuXG5cdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IGFjdGl2ZUN1YmVGYWNlO1xuXHRcdF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPSBhY3RpdmVNaXBtYXBMZXZlbDtcblxuXHRcdGxldCB1c2VEZWZhdWx0RnJhbWVidWZmZXIgPSB0cnVlO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3VzZURlZmF1bHRGcmFtZWJ1ZmZlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRvIHJlYmluZCB0aGUgZnJhbWVidWZmZXIuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIG51bGwgKTtcblx0XHRcdFx0dXNlRGVmYXVsdEZyYW1lYnVmZmVyID0gZmFsc2U7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faGFzRXh0ZXJuYWxUZXh0dXJlcyApIHtcblxuXHRcdFx0XHQvLyBDb2xvciBhbmQgZGVwdGggdGV4dHVyZSBtdXN0IGJlIHJlYm91bmQgaW4gb3JkZXIgZm9yIHRoZSBzd2FwY2hhaW4gdG8gdXBkYXRlLlxuXHRcdFx0XHR0ZXh0dXJlcy5yZWJpbmRUZXh0dXJlcyggcmVuZGVyVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRsZXQgZnJhbWVidWZmZXIgPSBudWxsO1xuXHRcdGxldCBpc0N1YmUgPSBmYWxzZTtcblx0XHRsZXQgaXNSZW5kZXJUYXJnZXQzRCA9IGZhbHNlO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSB8fCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSApIHtcblxuXHRcdFx0XHRpc1JlbmRlclRhcmdldDNEID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBfX3dlYmdsRnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2UgXTtcblx0XHRcdFx0aXNDdWJlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgJiYgcmVuZGVyVGFyZ2V0LnNhbXBsZXMgPiAwICkgJiYgdGV4dHVyZXMudXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyZW50Vmlld3BvcnQuY29weSggcmVuZGVyVGFyZ2V0LnZpZXdwb3J0ICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggcmVuZGVyVGFyZ2V0LnNjaXNzb3IgKTtcblx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSByZW5kZXJUYXJnZXQuc2Npc3NvclRlc3Q7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdFx0X2N1cnJlbnRTY2lzc29yVGVzdCA9IF9zY2lzc29yVGVzdDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGZyYW1lYnVmZmVyQm91bmQgPSBzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0aWYgKCBmcmFtZWJ1ZmZlckJvdW5kICYmIGNhcGFiaWxpdGllcy5kcmF3QnVmZmVycyAmJiB1c2VEZWZhdWx0RnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdHN0YXRlLmRyYXdCdWZmZXJzKCByZW5kZXJUYXJnZXQsIGZyYW1lYnVmZmVyICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydCApO1xuXHRcdHN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3NvciApO1xuXHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfY3VycmVudFNjaXNzb3JUZXN0ICk7XG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDM2MDY0LCAzNDA2OSArIGFjdGl2ZUN1YmVGYWNlLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGlzUmVuZGVyVGFyZ2V0M0QgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0XHRjb25zdCBsYXllciA9IGFjdGl2ZUN1YmVGYWNlIHx8IDA7XG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoIDM2MTYwLCAzNjA2NCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGFjdGl2ZU1pcG1hcExldmVsIHx8IDAsIGxheWVyICk7XG5cblx0XHR9XG5cblx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSAtIDE7IC8vIHJlc2V0IGN1cnJlbnQgbWF0ZXJpYWwgdG8gZW5zdXJlIGNvcnJlY3QgdW5pZm9ybSBiaW5kaW5nc1xuXG5cdH07XG5cblx0dGhpcy5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJ1ZmZlciwgYWN0aXZlQ3ViZUZhY2VJbmRleCApIHtcblxuXHRcdGlmICggISAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGxldCBmcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCAmJiBhY3RpdmVDdWJlRmFjZUluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlSW5kZXggXTtcblxuXHRcdH1cblxuXHRcdGlmICggZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXHRcdFx0XHRjb25zdCB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRcdGNvbnN0IHRleHR1cmVUeXBlID0gdGV4dHVyZS50eXBlO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZUZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICkgIT09IF9nbC5nZXRQYXJhbWV0ZXIoIDM1NzM5ICkgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFJHQkEgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCBmb3JtYXQuJyApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgaGFsZkZsb2F0U3VwcG9ydGVkQnlFeHQgPSAoIHRleHR1cmVUeXBlID09PSBIYWxmRmxvYXRUeXBlICkgJiYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKSB8fCAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiAmJiBleHRlbnNpb25zLmhhcyggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSApO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZVR5cGUgIT09IFVuc2lnbmVkQnl0ZVR5cGUgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSAhPT0gX2dsLmdldFBhcmFtZXRlciggMzU3MzggKSAmJiAvLyBFZGdlIGFuZCBDaHJvbWUgTWFjIDwgNTIgKCM5NTEzKVxuXHRcdFx0XHRcdCEgKCB0ZXh0dXJlVHlwZSA9PT0gRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSApICYmIC8vIENocm9tZSBNYWMgPj0gNTIgYW5kIEZpcmVmb3hcblx0XHRcdFx0XHQhIGhhbGZGbG9hdFN1cHBvcnRlZEJ5RXh0ICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyB0aGUgZm9sbG93aW5nIGlmIHN0YXRlbWVudCBlbnN1cmVzIHZhbGlkIHJlYWQgcmVxdWVzdHMgKG5vIG91dC1vZi1ib3VuZHMgcGl4ZWxzLCBzZWUgIzg2MDQpXG5cblx0XHRcdFx0aWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHtcblxuXHRcdFx0XHRcdF9nbC5yZWFkUGl4ZWxzKCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICksIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICksIGJ1ZmZlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBmaW5hbGx5IHtcblxuXHRcdFx0XHQvLyByZXN0b3JlIGZyYW1lYnVmZmVyIG9mIGN1cnJlbnQgcmVuZGVyIHRhcmdldCBpZiBuZWNlc3NhcnlcblxuXHRcdFx0XHRjb25zdCBmcmFtZWJ1ZmZlciA9ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgIT09IG51bGwgKSA/IHByb3BlcnRpZXMuZ2V0KCBfY3VycmVudFJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlciA6IG51bGw7XG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlID0gZnVuY3Rpb24gKCBwb3NpdGlvbiwgdGV4dHVyZSwgbGV2ZWwgPSAwICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzRnJhbWVidWZmZXJUZXh0dXJlICE9PSB0cnVlICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlKCkgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIEZyYW1lYnVmZmVyVGV4dHVyZS4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCBsZXZlbFNjYWxlID0gTWF0aC5wb3coIDIsIC0gbGV2ZWwgKTtcblx0XHRjb25zdCB3aWR0aCA9IE1hdGguZmxvb3IoIHRleHR1cmUuaW1hZ2Uud2lkdGggKiBsZXZlbFNjYWxlICk7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gTWF0aC5mbG9vciggdGV4dHVyZS5pbWFnZS5oZWlnaHQgKiBsZXZlbFNjYWxlICk7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdF9nbC5jb3B5VGV4U3ViSW1hZ2UyRCggMzU1MywgbGV2ZWwsIDAsIDAsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHR9O1xuXG5cdHRoaXMuY29weVRleHR1cmVUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHBvc2l0aW9uLCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBsZXZlbCA9IDAgKSB7XG5cblx0XHRjb25zdCB3aWR0aCA9IHNyY1RleHR1cmUuaW1hZ2Uud2lkdGg7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gc3JjVGV4dHVyZS5pbWFnZS5oZWlnaHQ7XG5cdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLmZvcm1hdCApO1xuXHRcdGNvbnN0IGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUudHlwZSApO1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEKCBkc3RUZXh0dXJlLCAwICk7XG5cblx0XHQvLyBBcyBhbm90aGVyIHRleHR1cmUgdXBsb2FkIG1heSBoYXZlIGNoYW5nZWQgcGl4ZWxTdG9yZWlcblx0XHQvLyBwYXJhbWV0ZXJzLCBtYWtlIHN1cmUgdGhleSBhcmUgY29ycmVjdCBmb3IgdGhlIGRzdFRleHR1cmVcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQwLCBkc3RUZXh0dXJlLmZsaXBZICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MSwgZHN0VGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMzE3LCBkc3RUZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXG5cdFx0aWYgKCBzcmNUZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdF9nbC50ZXhTdWJJbWFnZTJEKCAzNTUzLCBsZXZlbCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZS5kYXRhICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSApIHtcblxuXHRcdFx0XHRfZ2wuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoIDM1NTMsIGxldmVsLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBzcmNUZXh0dXJlLm1pcG1hcHNbIDAgXS53aWR0aCwgc3JjVGV4dHVyZS5taXBtYXBzWyAwIF0uaGVpZ2h0LCBnbEZvcm1hdCwgc3JjVGV4dHVyZS5taXBtYXBzWyAwIF0uZGF0YSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC50ZXhTdWJJbWFnZTJEKCAzNTUzLCBsZXZlbCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBHZW5lcmF0ZSBtaXBtYXBzIG9ubHkgd2hlbiBjb3B5aW5nIGxldmVsIDBcblx0XHRpZiAoIGxldmVsID09PSAwICYmIGRzdFRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICkgX2dsLmdlbmVyYXRlTWlwbWFwKCAzNTUzICk7XG5cblx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0fTtcblxuXHR0aGlzLmNvcHlUZXh0dXJlVG9UZXh0dXJlM0QgPSBmdW5jdGlvbiAoIHNvdXJjZUJveCwgcG9zaXRpb24sIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIGxldmVsID0gMCApIHtcblxuXHRcdGlmICggX3RoaXMuaXNXZWJHTDFSZW5kZXJlciApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5jb3B5VGV4dHVyZVRvVGV4dHVyZTNEOiBjYW4gb25seSBiZSB1c2VkIHdpdGggV2ViR0wyLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHdpZHRoID0gc291cmNlQm94Lm1heC54IC0gc291cmNlQm94Lm1pbi54ICsgMTtcblx0XHRjb25zdCBoZWlnaHQgPSBzb3VyY2VCb3gubWF4LnkgLSBzb3VyY2VCb3gubWluLnkgKyAxO1xuXHRcdGNvbnN0IGRlcHRoID0gc291cmNlQm94Lm1heC56IC0gc291cmNlQm94Lm1pbi56ICsgMTtcblx0XHRjb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUuZm9ybWF0ICk7XG5cdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS50eXBlICk7XG5cdFx0bGV0IGdsVGFyZ2V0O1xuXG5cdFx0aWYgKCBkc3RUZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCBkc3RUZXh0dXJlLCAwICk7XG5cdFx0XHRnbFRhcmdldCA9IDMyODc5O1xuXG5cdFx0fSBlbHNlIGlmICggZHN0VGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUyREFycmF5KCBkc3RUZXh0dXJlLCAwICk7XG5cdFx0XHRnbFRhcmdldCA9IDM1ODY2O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5jb3B5VGV4dHVyZVRvVGV4dHVyZTNEOiBvbmx5IHN1cHBvcnRzIFRIUkVFLkRhdGFUZXh0dXJlM0QgYW5kIFRIUkVFLkRhdGFUZXh0dXJlMkRBcnJheS4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQwLCBkc3RUZXh0dXJlLmZsaXBZICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MSwgZHN0VGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMzE3LCBkc3RUZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXG5cdFx0Y29uc3QgdW5wYWNrUm93TGVuID0gX2dsLmdldFBhcmFtZXRlciggMzMxNCApO1xuXHRcdGNvbnN0IHVucGFja0ltYWdlSGVpZ2h0ID0gX2dsLmdldFBhcmFtZXRlciggMzI4NzggKTtcblx0XHRjb25zdCB1bnBhY2tTa2lwUGl4ZWxzID0gX2dsLmdldFBhcmFtZXRlciggMzMxNiApO1xuXHRcdGNvbnN0IHVucGFja1NraXBSb3dzID0gX2dsLmdldFBhcmFtZXRlciggMzMxNSApO1xuXHRcdGNvbnN0IHVucGFja1NraXBJbWFnZXMgPSBfZ2wuZ2V0UGFyYW1ldGVyKCAzMjg3NyApO1xuXG5cdFx0Y29uc3QgaW1hZ2UgPSBzcmNUZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgPyBzcmNUZXh0dXJlLm1pcG1hcHNbIDAgXSA6IHNyY1RleHR1cmUuaW1hZ2U7XG5cblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMzMTQsIGltYWdlLndpZHRoICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMjg3OCwgaW1hZ2UuaGVpZ2h0ICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMzE2LCBzb3VyY2VCb3gubWluLnggKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMzMTUsIHNvdXJjZUJveC5taW4ueSApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzI4NzcsIHNvdXJjZUJveC5taW4ueiApO1xuXG5cdFx0aWYgKCBzcmNUZXh0dXJlLmlzRGF0YVRleHR1cmUgfHwgc3JjVGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdF9nbC50ZXhTdWJJbWFnZTNEKCBnbFRhcmdldCwgbGV2ZWwsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHBvc2l0aW9uLnosIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyLmNvcHlUZXh0dXJlVG9UZXh0dXJlM0Q6IHVudGVzdGVkIHN1cHBvcnQgZm9yIGNvbXByZXNzZWQgc3JjVGV4dHVyZS4nICk7XG5cdFx0XHRcdF9nbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGxldmVsLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ2xGb3JtYXQsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wudGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGxldmVsLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMzE0LCB1bnBhY2tSb3dMZW4gKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMyODc4LCB1bnBhY2tJbWFnZUhlaWdodCApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzMxNiwgdW5wYWNrU2tpcFBpeGVscyApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzMxNSwgdW5wYWNrU2tpcFJvd3MgKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMyODc3LCB1bnBhY2tTa2lwSW1hZ2VzICk7XG5cblx0XHQvLyBHZW5lcmF0ZSBtaXBtYXBzIG9ubHkgd2hlbiBjb3B5aW5nIGxldmVsIDBcblx0XHRpZiAoIGxldmVsID09PSAwICYmIGRzdFRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICkgX2dsLmdlbmVyYXRlTWlwbWFwKCBnbFRhcmdldCApO1xuXG5cdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdH07XG5cblx0dGhpcy5pbml0VGV4dHVyZSA9IGZ1bmN0aW9uICggdGV4dHVyZSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdGV4dHVyZSwgMCApO1xuXG5cdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdH07XG5cblx0dGhpcy5yZXNldFN0YXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IDA7XG5cdFx0X2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IDA7XG5cdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0c3RhdGUucmVzZXQoKTtcblx0XHRiaW5kaW5nU3RhdGVzLnJlc2V0KCk7XG5cblx0fTtcblxuXHRpZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0X19USFJFRV9ERVZUT09MU19fLmRpc3BhdGNoRXZlbnQoIG5ldyBDdXN0b21FdmVudCggJ29ic2VydmUnLCB7IGRldGFpbDogdGhpcyB9ICkgKTtcblxuXHR9XG5cbn1cblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuaXNXZWJHTFJlbmRlcmVyID0gdHJ1ZTtcblxuY2xhc3MgV2ViR0wxUmVuZGVyZXIgZXh0ZW5kcyBXZWJHTFJlbmRlcmVyIHt9XG5cbldlYkdMMVJlbmRlcmVyLnByb3RvdHlwZS5pc1dlYkdMMVJlbmRlcmVyID0gdHJ1ZTtcblxuY2xhc3MgRm9nRXhwMiB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBkZW5zaXR5ID0gMC4wMDAyNSApIHtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggY29sb3IgKTtcblx0XHR0aGlzLmRlbnNpdHkgPSBkZW5zaXR5O1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgRm9nRXhwMiggdGhpcy5jb2xvciwgdGhpcy5kZW5zaXR5ICk7XG5cblx0fVxuXG5cdHRvSlNPTiggLyogbWV0YSAqLyApIHtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiAnRm9nRXhwMicsXG5cdFx0XHRjb2xvcjogdGhpcy5jb2xvci5nZXRIZXgoKSxcblx0XHRcdGRlbnNpdHk6IHRoaXMuZGVuc2l0eVxuXHRcdH07XG5cblx0fVxuXG59XG5cbkZvZ0V4cDIucHJvdG90eXBlLmlzRm9nRXhwMiA9IHRydWU7XG5cbmNsYXNzIEZvZyB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBuZWFyID0gMSwgZmFyID0gMTAwMCApIHtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggY29sb3IgKTtcblxuXHRcdHRoaXMubmVhciA9IG5lYXI7XG5cdFx0dGhpcy5mYXIgPSBmYXI7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBGb2coIHRoaXMuY29sb3IsIHRoaXMubmVhciwgdGhpcy5mYXIgKTtcblxuXHR9XG5cblx0dG9KU09OKCAvKiBtZXRhICovICkge1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6ICdGb2cnLFxuXHRcdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXG5cdFx0XHRuZWFyOiB0aGlzLm5lYXIsXG5cdFx0XHRmYXI6IHRoaXMuZmFyXG5cdFx0fTtcblxuXHR9XG5cbn1cblxuRm9nLnByb3RvdHlwZS5pc0ZvZyA9IHRydWU7XG5cbmNsYXNzIFNjZW5lIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdTY2VuZSc7XG5cblx0XHR0aGlzLmJhY2tncm91bmQgPSBudWxsO1xuXHRcdHRoaXMuZW52aXJvbm1lbnQgPSBudWxsO1xuXHRcdHRoaXMuZm9nID0gbnVsbDtcblxuXHRcdHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IG51bGw7XG5cblx0XHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlOyAvLyBjaGVja2VkIGJ5IHRoZSByZW5kZXJlclxuXG5cdFx0aWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0X19USFJFRV9ERVZUT09MU19fLmRpc3BhdGNoRXZlbnQoIG5ldyBDdXN0b21FdmVudCggJ29ic2VydmUnLCB7IGRldGFpbDogdGhpcyB9ICkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UuYmFja2dyb3VuZCAhPT0gbnVsbCApIHRoaXMuYmFja2dyb3VuZCA9IHNvdXJjZS5iYWNrZ3JvdW5kLmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2UuZW52aXJvbm1lbnQgIT09IG51bGwgKSB0aGlzLmVudmlyb25tZW50ID0gc291cmNlLmVudmlyb25tZW50LmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2UuZm9nICE9PSBudWxsICkgdGhpcy5mb2cgPSBzb3VyY2UuZm9nLmNsb25lKCk7XG5cblx0XHRpZiAoIHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5vdmVycmlkZU1hdGVyaWFsID0gc291cmNlLm92ZXJyaWRlTWF0ZXJpYWwuY2xvbmUoKTtcblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHNvdXJjZS5hdXRvVXBkYXRlO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGlmICggdGhpcy5mb2cgIT09IG51bGwgKSBkYXRhLm9iamVjdC5mb2cgPSB0aGlzLmZvZy50b0pTT04oKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5TY2VuZS5wcm90b3R5cGUuaXNTY2VuZSA9IHRydWU7XG5cbmNsYXNzIEludGVybGVhdmVkQnVmZmVyIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIHN0cmlkZSApIHtcblxuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcblx0XHR0aGlzLnN0cmlkZSA9IHN0cmlkZTtcblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHN0cmlkZSA6IDA7XG5cblx0XHR0aGlzLnVzYWdlID0gU3RhdGljRHJhd1VzYWdlO1xuXHRcdHRoaXMudXBkYXRlUmFuZ2UgPSB7IG9mZnNldDogMCwgY291bnQ6IC0gMSB9O1xuXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcblxuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdH1cblxuXHRvblVwbG9hZENhbGxiYWNrKCkge31cblxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cblx0c2V0VXNhZ2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy51c2FnZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuYXJyYXkgPSBuZXcgc291cmNlLmFycmF5LmNvbnN0cnVjdG9yKCBzb3VyY2UuYXJyYXkgKTtcblx0XHR0aGlzLmNvdW50ID0gc291cmNlLmNvdW50O1xuXHRcdHRoaXMuc3RyaWRlID0gc291cmNlLnN0cmlkZTtcblx0XHR0aGlzLnVzYWdlID0gc291cmNlLnVzYWdlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHlBdCggaW5kZXgxLCBhdHRyaWJ1dGUsIGluZGV4MiApIHtcblxuXHRcdGluZGV4MSAqPSB0aGlzLnN0cmlkZTtcblx0XHRpbmRleDIgKj0gYXR0cmlidXRlLnN0cmlkZTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuc3RyaWRlOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5hcnJheVsgaW5kZXgxICsgaSBdID0gYXR0cmlidXRlLmFycmF5WyBpbmRleDIgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0KCB2YWx1ZSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoIGRhdGEgKSB7XG5cblx0XHRpZiAoIGRhdGEuYXJyYXlCdWZmZXJzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzID0ge307XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdID0gdGhpcy5hcnJheS5zbGljZSggMCApLmJ1ZmZlcjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGFycmF5ID0gbmV3IHRoaXMuYXJyYXkuY29uc3RydWN0b3IoIGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdICk7XG5cblx0XHRjb25zdCBpYiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCBhcnJheSwgdGhpcy5zdHJpZGUgKTtcblx0XHRpYi5zZXRVc2FnZSggdGhpcy51c2FnZSApO1xuXG5cdFx0cmV0dXJuIGliO1xuXG5cdH1cblxuXHRvblVwbG9hZCggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLm9uVXBsb2FkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIGRhdGEgKSB7XG5cblx0XHRpZiAoIGRhdGEuYXJyYXlCdWZmZXJzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzID0ge307XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSBVVUlEIGZvciBhcnJheSBidWZmZXIgaWYgbmVjZXNzYXJ5XG5cblx0XHRpZiAoIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGEuYXJyYXlCdWZmZXJzWyB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCBdID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIG5ldyBVaW50MzJBcnJheSggdGhpcy5hcnJheS5idWZmZXIgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHJldHVybiB7XG5cdFx0XHR1dWlkOiB0aGlzLnV1aWQsXG5cdFx0XHRidWZmZXI6IHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkLFxuXHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0c3RyaWRlOiB0aGlzLnN0cmlkZVxuXHRcdH07XG5cblx0fVxuXG59XG5cbkludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZS5pc0ludGVybGVhdmVkQnVmZmVyID0gdHJ1ZTtcblxuY29uc3QgX3ZlY3RvciQ2ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGludGVybGVhdmVkQnVmZmVyLCBpdGVtU2l6ZSwgb2Zmc2V0LCBub3JtYWxpemVkID0gZmFsc2UgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblxuXHRcdHRoaXMuZGF0YSA9IGludGVybGVhdmVkQnVmZmVyO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0XHR0aGlzLm9mZnNldCA9IG9mZnNldDtcblxuXHRcdHRoaXMubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQgPT09IHRydWU7XG5cblx0fVxuXG5cdGdldCBjb3VudCgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuY291bnQ7XG5cblx0fVxuXG5cdGdldCBhcnJheSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXk7XG5cblx0fVxuXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmRhdGEubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5kYXRhLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQ2LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ2LmFwcGx5TWF0cml4NCggbSApO1xuXG5cdFx0XHR0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ2LngsIF92ZWN0b3IkNi55LCBfdmVjdG9yJDYueiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5Tm9ybWFsTWF0cml4KCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkNi5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cblx0XHRcdF92ZWN0b3IkNi5hcHBseU5vcm1hbE1hdHJpeCggbSApO1xuXG5cdFx0XHR0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ2LngsIF92ZWN0b3IkNi55LCBfdmVjdG9yJDYueiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyYW5zZm9ybURpcmVjdGlvbiggbSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yJDYuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApO1xuXG5cdFx0XHRfdmVjdG9yJDYudHJhbnNmb3JtRGlyZWN0aW9uKCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDYueCwgX3ZlY3RvciQ2LnksIF92ZWN0b3IkNi56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WCggaW5kZXgsIHggKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF0gPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFkoIGluZGV4LCB5ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WiggaW5kZXgsIHogKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRXKCBpbmRleCwgdyApIHtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFgoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgXTtcblxuXHR9XG5cblx0Z2V0WSggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXTtcblxuXHR9XG5cblx0Z2V0WiggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDIgXTtcblxuXHR9XG5cblx0Z2V0VyggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDMgXTtcblxuXHR9XG5cblx0c2V0WFkoIGluZGV4LCB4LCB5ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZWiggaW5kZXgsIHgsIHksIHogKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WFlaVyggaW5kZXgsIHgsIHksIHosIHcgKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDMgXSA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoIGRhdGEgKSB7XG5cblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS5sb2coICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS5jbG9uZSgpOiBDbG9uaW5nIGFuIGludGVybGF2ZWQgYnVmZmVyIGF0dHJpYnV0ZSB3aWxsIGRlaW50ZXJsZWF2ZSBidWZmZXIgZGF0YS4nICk7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5kZXggPSBpICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IHRoaXMuaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheS5wdXNoKCB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgaiBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgdGhpcy5hcnJheS5jb25zdHJ1Y3RvciggYXJyYXkgKSwgdGhpcy5pdGVtU2l6ZSwgdGhpcy5ub3JtYWxpemVkICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnMgPSB7fTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzWyB0aGlzLmRhdGEudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnNbIHRoaXMuZGF0YS51dWlkIF0gPSB0aGlzLmRhdGEuY2xvbmUoIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSwgdGhpcy5pdGVtU2l6ZSwgdGhpcy5vZmZzZXQsIHRoaXMubm9ybWFsaXplZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR0b0pTT04oIGRhdGEgKSB7XG5cblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS5sb2coICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS50b0pTT04oKTogU2VyaWFsaXppbmcgYW4gaW50ZXJsYXZlZCBidWZmZXIgYXR0cmlidXRlIHdpbGwgZGVpbnRlcmxlYXZlIGJ1ZmZlciBkYXRhLicgKTtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5jb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbmRleCA9IGkgKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgdGhpcy5pdGVtU2l6ZTsgaiArKyApIHtcblxuXHRcdFx0XHRcdGFycmF5LnB1c2goIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyBqIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZGVpbnRlcmxlYXZlIGRhdGEgYW5kIHNhdmUgaXQgYXMgYW4gb3JkaW5hcnkgYnVmZmVyIGF0dHJpYnV0ZSBmb3Igbm93XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGl0ZW1TaXplOiB0aGlzLml0ZW1TaXplLFxuXHRcdFx0XHR0eXBlOiB0aGlzLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsXG5cdFx0XHRcdGFycmF5OiBhcnJheSxcblx0XHRcdFx0bm9ybWFsaXplZDogdGhpcy5ub3JtYWxpemVkXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gc2F2ZSBhcyB0cnVlIGludGVybGF2ZWQgYXR0cmlidHVlXG5cblx0XHRcdGlmICggZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRkYXRhLmludGVybGVhdmVkQnVmZmVycyA9IHt9O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnNbIHRoaXMuZGF0YS51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9IHRoaXMuZGF0YS50b0pTT04oIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlOiB0cnVlLFxuXHRcdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcblx0XHRcdFx0ZGF0YTogdGhpcy5kYXRhLnV1aWQsXG5cdFx0XHRcdG9mZnNldDogdGhpcy5vZmZzZXQsXG5cdFx0XHRcdG5vcm1hbGl6ZWQ6IHRoaXMubm9ybWFsaXplZFxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xuXG5jbGFzcyBTcHJpdGVNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3ByaXRlTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5yb3RhdGlvbiA9IDA7XG5cblx0XHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xuXG5cdFx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5pc1Nwcml0ZU1hdGVyaWFsID0gdHJ1ZTtcblxubGV0IF9nZW9tZXRyeTtcblxuY29uc3QgX2ludGVyc2VjdFBvaW50ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3dvcmxkU2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbXZQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX2FsaWduZWRQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IF9yb3RhdGVkUG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdmlld1dvcmxkTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuXG5jb25zdCBfdkEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdkIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdkMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF91dkEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdXZCID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuY29uc3QgX3V2QyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcblxuY2xhc3MgU3ByaXRlIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBtYXRlcmlhbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3ByaXRlJztcblxuXHRcdGlmICggX2dlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9nZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0XHRjb25zdCBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBbXG5cdFx0XHRcdC0gMC41LCAtIDAuNSwgMCwgMCwgMCxcblx0XHRcdFx0MC41LCAtIDAuNSwgMCwgMSwgMCxcblx0XHRcdFx0MC41LCAwLjUsIDAsIDEsIDEsXG5cdFx0XHRcdC0gMC41LCAwLjUsIDAsIDAsIDFcblx0XHRcdF0gKTtcblxuXHRcdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoIGZsb2F0MzJBcnJheSwgNSApO1xuXG5cdFx0XHRfZ2VvbWV0cnkuc2V0SW5kZXgoIFsgMCwgMSwgMixcdDAsIDIsIDMgXSApO1xuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMywgMCwgZmFsc2UgKSApO1xuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMiwgMywgZmFsc2UgKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5nZW9tZXRyeSA9IF9nZW9tZXRyeTtcblx0XHR0aGlzLm1hdGVyaWFsID0gKCBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkgPyBtYXRlcmlhbCA6IG5ldyBTcHJpdGVNYXRlcmlhbCgpO1xuXG5cdFx0dGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMiggMC41LCAwLjUgKTtcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0aWYgKCByYXljYXN0ZXIuY2FtZXJhID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU3ByaXRlOiBcIlJheWNhc3Rlci5jYW1lcmFcIiBuZWVkcyB0byBiZSBzZXQgaW4gb3JkZXIgdG8gcmF5Y2FzdCBhZ2FpbnN0IHNwcml0ZXMuJyApO1xuXG5cdFx0fVxuXG5cdFx0X3dvcmxkU2NhbGUuc2V0RnJvbU1hdHJpeFNjYWxlKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRfdmlld1dvcmxkTWF0cml4LmNvcHkoIHJheWNhc3Rlci5jYW1lcmEubWF0cml4V29ybGQgKTtcblx0XHR0aGlzLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCByYXljYXN0ZXIuY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0X212UG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0aWYgKCByYXljYXN0ZXIuY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgJiYgdGhpcy5tYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPT09IGZhbHNlICkge1xuXG5cdFx0XHRfd29ybGRTY2FsZS5tdWx0aXBseVNjYWxhciggLSBfbXZQb3NpdGlvbi56ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCByb3RhdGlvbiA9IHRoaXMubWF0ZXJpYWwucm90YXRpb247XG5cdFx0bGV0IHNpbiwgY29zO1xuXG5cdFx0aWYgKCByb3RhdGlvbiAhPT0gMCApIHtcblxuXHRcdFx0Y29zID0gTWF0aC5jb3MoIHJvdGF0aW9uICk7XG5cdFx0XHRzaW4gPSBNYXRoLnNpbiggcm90YXRpb24gKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGNlbnRlciA9IHRoaXMuY2VudGVyO1xuXG5cdFx0dHJhbnNmb3JtVmVydGV4KCBfdkEuc2V0KCAtIDAuNSwgLSAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cdFx0dHJhbnNmb3JtVmVydGV4KCBfdkIuc2V0KCAwLjUsIC0gMC41LCAwICksIF9tdlBvc2l0aW9uLCBjZW50ZXIsIF93b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXHRcdHRyYW5zZm9ybVZlcnRleCggX3ZDLnNldCggMC41LCAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cblx0XHRfdXZBLnNldCggMCwgMCApO1xuXHRcdF91dkIuc2V0KCAxLCAwICk7XG5cdFx0X3V2Qy5zZXQoIDEsIDEgKTtcblxuXHRcdC8vIGNoZWNrIGZpcnN0IHRyaWFuZ2xlXG5cdFx0bGV0IGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIF92QSwgX3ZCLCBfdkMsIGZhbHNlLCBfaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkge1xuXG5cdFx0XHQvLyBjaGVjayBzZWNvbmQgdHJpYW5nbGVcblx0XHRcdHRyYW5zZm9ybVZlcnRleCggX3ZCLnNldCggLSAwLjUsIDAuNSwgMCApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdF91dkIuc2V0KCAwLCAxICk7XG5cblx0XHRcdGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIF92QSwgX3ZDLCBfdkIsIGZhbHNlLCBfaW50ZXJzZWN0UG9pbnQgKTtcblx0XHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0cG9pbnQ6IF9pbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxuXHRcdFx0dXY6IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0UG9pbnQsIF92QSwgX3ZCLCBfdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkgKSxcblx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdH0gKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHRpZiAoIHNvdXJjZS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRoaXMuY2VudGVyLmNvcHkoIHNvdXJjZS5jZW50ZXIgKTtcblxuXHRcdHRoaXMubWF0ZXJpYWwgPSBzb3VyY2UubWF0ZXJpYWw7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuU3ByaXRlLnByb3RvdHlwZS5pc1Nwcml0ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVZlcnRleCggdmVydGV4UG9zaXRpb24sIG12UG9zaXRpb24sIGNlbnRlciwgc2NhbGUsIHNpbiwgY29zICkge1xuXG5cdC8vIGNvbXB1dGUgcG9zaXRpb24gaW4gY2FtZXJhIHNwYWNlXG5cdF9hbGlnbmVkUG9zaXRpb24uc3ViVmVjdG9ycyggdmVydGV4UG9zaXRpb24sIGNlbnRlciApLmFkZFNjYWxhciggMC41ICkubXVsdGlwbHkoIHNjYWxlICk7XG5cblx0Ly8gdG8gY2hlY2sgaWYgcm90YXRpb24gaXMgbm90IHplcm9cblx0aWYgKCBzaW4gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdF9yb3RhdGVkUG9zaXRpb24ueCA9ICggY29zICogX2FsaWduZWRQb3NpdGlvbi54ICkgLSAoIHNpbiAqIF9hbGlnbmVkUG9zaXRpb24ueSApO1xuXHRcdF9yb3RhdGVkUG9zaXRpb24ueSA9ICggc2luICogX2FsaWduZWRQb3NpdGlvbi54ICkgKyAoIGNvcyAqIF9hbGlnbmVkUG9zaXRpb24ueSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRfcm90YXRlZFBvc2l0aW9uLmNvcHkoIF9hbGlnbmVkUG9zaXRpb24gKTtcblxuXHR9XG5cblxuXHR2ZXJ0ZXhQb3NpdGlvbi5jb3B5KCBtdlBvc2l0aW9uICk7XG5cdHZlcnRleFBvc2l0aW9uLnggKz0gX3JvdGF0ZWRQb3NpdGlvbi54O1xuXHR2ZXJ0ZXhQb3NpdGlvbi55ICs9IF9yb3RhdGVkUG9zaXRpb24ueTtcblxuXHQvLyB0cmFuc2Zvcm0gdG8gd29ybGQgc3BhY2Vcblx0dmVydGV4UG9zaXRpb24uYXBwbHlNYXRyaXg0KCBfdmlld1dvcmxkTWF0cml4ICk7XG5cbn1cblxuY29uc3QgX3YxJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjIkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgTE9EIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX2N1cnJlbnRMZXZlbCA9IDA7XG5cblx0XHR0aGlzLnR5cGUgPSAnTE9EJztcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0XHRsZXZlbHM6IHtcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IFtdXG5cdFx0XHR9LFxuXHRcdFx0aXNMT0Q6IHtcblx0XHRcdFx0dmFsdWU6IHRydWUsXG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCBmYWxzZSApO1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gc291cmNlLmxldmVscztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmFkZExldmVsKCBsZXZlbC5vYmplY3QuY2xvbmUoKSwgbGV2ZWwuZGlzdGFuY2UgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHNvdXJjZS5hdXRvVXBkYXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZExldmVsKCBvYmplY3QsIGRpc3RhbmNlID0gMCApIHtcblxuXHRcdGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG5cblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGxldCBsO1xuXG5cdFx0Zm9yICggbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBsIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGxldmVscy5zcGxpY2UoIGwsIDAsIHsgZGlzdGFuY2U6IGRpc3RhbmNlLCBvYmplY3Q6IG9iamVjdCB9ICk7XG5cblx0XHR0aGlzLmFkZCggb2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q3VycmVudExldmVsKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRMZXZlbDtcblxuXHR9XG5cblx0Z2V0T2JqZWN0Rm9yRGlzdGFuY2UoIGRpc3RhbmNlICkge1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRpZiAoIGxldmVscy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRsZXQgaSwgbDtcblxuXHRcdFx0Zm9yICggaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBpIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxldmVsc1sgaSAtIDEgXS5vYmplY3Q7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRpZiAoIGxldmVscy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRfdjEkMi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfdjEkMiApO1xuXG5cdFx0XHR0aGlzLmdldE9iamVjdEZvckRpc3RhbmNlKCBkaXN0YW5jZSApLnJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGUoIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0aWYgKCBsZXZlbHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0X3YxJDIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblx0XHRcdF92MiQxLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IF92MSQyLmRpc3RhbmNlVG8oIF92MiQxICkgLyBjYW1lcmEuem9vbTtcblxuXHRcdFx0bGV2ZWxzWyAwIF0ub2JqZWN0LnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRsZXQgaSwgbDtcblxuXHRcdFx0Zm9yICggaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGRpc3RhbmNlID49IGxldmVsc1sgaSBdLmRpc3RhbmNlICkge1xuXG5cdFx0XHRcdFx0bGV2ZWxzWyBpIC0gMSBdLm9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cdFx0XHRcdFx0bGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3VycmVudExldmVsID0gaSAtIDE7XG5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0bGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRpZiAoIHRoaXMuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgKSBkYXRhLm9iamVjdC5hdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHRkYXRhLm9iamVjdC5sZXZlbHMgPSBbXTtcblxuXHRcdGNvbnN0IGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGxldmVsID0gbGV2ZWxzWyBpIF07XG5cblx0XHRcdGRhdGEub2JqZWN0LmxldmVscy5wdXNoKCB7XG5cdFx0XHRcdG9iamVjdDogbGV2ZWwub2JqZWN0LnV1aWQsXG5cdFx0XHRcdGRpc3RhbmNlOiBsZXZlbC5kaXN0YW5jZVxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9iYXNlUG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9za2luSW5kZXggPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7XG5jb25zdCBfc2tpbldlaWdodCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjQoKTtcblxuY29uc3QgX3ZlY3RvciQ1ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX21hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuY2xhc3MgU2tpbm5lZE1lc2ggZXh0ZW5kcyBNZXNoIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NraW5uZWRNZXNoJztcblxuXHRcdHRoaXMuYmluZE1vZGUgPSAnYXR0YWNoZWQnO1xuXHRcdHRoaXMuYmluZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5iaW5kTW9kZSA9IHNvdXJjZS5iaW5kTW9kZTtcblx0XHR0aGlzLmJpbmRNYXRyaXguY29weSggc291cmNlLmJpbmRNYXRyaXggKTtcblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIHNvdXJjZS5iaW5kTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0dGhpcy5za2VsZXRvbiA9IHNvdXJjZS5za2VsZXRvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRiaW5kKCBza2VsZXRvbiwgYmluZE1hdHJpeCApIHtcblxuXHRcdHRoaXMuc2tlbGV0b24gPSBza2VsZXRvbjtcblxuXHRcdGlmICggYmluZE1hdHJpeCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdHRoaXMuc2tlbGV0b24uY2FsY3VsYXRlSW52ZXJzZXMoKTtcblxuXHRcdFx0YmluZE1hdHJpeCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJpbmRNYXRyaXguY29weSggYmluZE1hdHJpeCApO1xuXHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuY29weSggYmluZE1hdHJpeCApLmludmVydCgpO1xuXG5cdH1cblxuXHRwb3NlKCkge1xuXG5cdFx0dGhpcy5za2VsZXRvbi5wb3NlKCk7XG5cblx0fVxuXG5cdG5vcm1hbGl6ZVNraW5XZWlnaHRzKCkge1xuXG5cdFx0Y29uc3QgdmVjdG9yID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IHNraW5XZWlnaHQgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuc2tpbldlaWdodDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNraW5XZWlnaHQuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2ZWN0b3IuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggc2tpbldlaWdodCwgaSApO1xuXG5cdFx0XHRjb25zdCBzY2FsZSA9IDEuMCAvIHZlY3Rvci5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHRcdFx0aWYgKCBzY2FsZSAhPT0gSW5maW5pdHkgKSB7XG5cblx0XHRcdFx0dmVjdG9yLm11bHRpcGx5U2NhbGFyKCBzY2FsZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZlY3Rvci5zZXQoIDEsIDAsIDAsIDAgKTsgLy8gZG8gc29tZXRoaW5nIHJlYXNvbmFibGVcblxuXHRcdFx0fVxuXG5cdFx0XHRza2luV2VpZ2h0LnNldFhZWlcoIGksIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnosIHZlY3Rvci53ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0aWYgKCB0aGlzLmJpbmRNb2RlID09PSAnYXR0YWNoZWQnICkge1xuXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuYmluZE1vZGUgPT09ICdkZXRhY2hlZCcgKSB7XG5cblx0XHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuY29weSggdGhpcy5iaW5kTWF0cml4ICkuaW52ZXJ0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2lubmVkTWVzaDogVW5yZWNvZ25pemVkIGJpbmRNb2RlOiAnICsgdGhpcy5iaW5kTW9kZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRib25lVHJhbnNmb3JtKCBpbmRleCwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3Qgc2tlbGV0b24gPSB0aGlzLnNrZWxldG9uO1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdF9za2luSW5kZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luSW5kZXgsIGluZGV4ICk7XG5cdFx0X3NraW5XZWlnaHQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0LCBpbmRleCApO1xuXG5cdFx0X2Jhc2VQb3NpdGlvbi5jb3B5KCB0YXJnZXQgKS5hcHBseU1hdHJpeDQoIHRoaXMuYmluZE1hdHJpeCApO1xuXG5cdFx0dGFyZ2V0LnNldCggMCwgMCwgMCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgd2VpZ2h0ID0gX3NraW5XZWlnaHQuZ2V0Q29tcG9uZW50KCBpICk7XG5cblx0XHRcdGlmICggd2VpZ2h0ICE9PSAwICkge1xuXG5cdFx0XHRcdGNvbnN0IGJvbmVJbmRleCA9IF9za2luSW5kZXguZ2V0Q29tcG9uZW50KCBpICk7XG5cblx0XHRcdFx0X21hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBza2VsZXRvbi5ib25lc1sgYm9uZUluZGV4IF0ubWF0cml4V29ybGQsIHNrZWxldG9uLmJvbmVJbnZlcnNlc1sgYm9uZUluZGV4IF0gKTtcblxuXHRcdFx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBfdmVjdG9yJDUuY29weSggX2Jhc2VQb3NpdGlvbiApLmFwcGx5TWF0cml4NCggX21hdHJpeCApLCB3ZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5hcHBseU1hdHJpeDQoIHRoaXMuYmluZE1hdHJpeEludmVyc2UgKTtcblxuXHR9XG5cbn1cblxuU2tpbm5lZE1lc2gucHJvdG90eXBlLmlzU2tpbm5lZE1lc2ggPSB0cnVlO1xuXG5jbGFzcyBCb25lIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdCb25lJztcblxuXHR9XG5cbn1cblxuQm9uZS5wcm90b3R5cGUuaXNCb25lID0gdHJ1ZTtcblxuY2xhc3MgRGF0YVRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXIsIG1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFx0c3VwZXIoIG51bGwsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKTtcblxuXHRcdHRoaXMuaW1hZ2UgPSB7IGRhdGE6IGRhdGEsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTtcblxuXHR9XG5cbn1cblxuRGF0YVRleHR1cmUucHJvdG90eXBlLmlzRGF0YVRleHR1cmUgPSB0cnVlO1xuXG5jb25zdCBfb2Zmc2V0TWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2lkZW50aXR5TWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuXG5jbGFzcyBTa2VsZXRvbiB7XG5cblx0Y29uc3RydWN0b3IoIGJvbmVzID0gW10sIGJvbmVJbnZlcnNlcyA9IFtdICkge1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR0aGlzLmJvbmVzID0gYm9uZXMuc2xpY2UoIDAgKTtcblx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IGJvbmVJbnZlcnNlcztcblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IG51bGw7XG5cblx0XHR0aGlzLmJvbmVUZXh0dXJlID0gbnVsbDtcblx0XHR0aGlzLmJvbmVUZXh0dXJlU2l6ZSA9IDA7XG5cblx0XHR0aGlzLmZyYW1lID0gLSAxO1xuXG5cdFx0dGhpcy5pbml0KCk7XG5cblx0fVxuXG5cdGluaXQoKSB7XG5cblx0XHRjb25zdCBib25lcyA9IHRoaXMuYm9uZXM7XG5cdFx0Y29uc3QgYm9uZUludmVyc2VzID0gdGhpcy5ib25lSW52ZXJzZXM7XG5cblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIGJvbmVzLmxlbmd0aCAqIDE2ICk7XG5cblx0XHQvLyBjYWxjdWxhdGUgaW52ZXJzZSBib25lIG1hdHJpY2VzIGlmIG5lY2Vzc2FyeVxuXG5cdFx0aWYgKCBib25lSW52ZXJzZXMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHR0aGlzLmNhbGN1bGF0ZUludmVyc2VzKCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBoYW5kbGUgc3BlY2lhbCBjYXNlXG5cblx0XHRcdGlmICggYm9uZXMubGVuZ3RoICE9PSBib25lSW52ZXJzZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNrZWxldG9uOiBOdW1iZXIgb2YgaW52ZXJzZSBib25lIG1hdHJpY2VzIGRvZXMgbm90IG1hdGNoIGFtb3VudCBvZiBib25lcy4nICk7XG5cblx0XHRcdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Y2FsY3VsYXRlSW52ZXJzZXMoKSB7XG5cblx0XHR0aGlzLmJvbmVJbnZlcnNlcy5sZW5ndGggPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0XHRpZiAoIHRoaXMuYm9uZXNbIGkgXSApIHtcblxuXHRcdFx0XHRpbnZlcnNlLmNvcHkoIHRoaXMuYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIGludmVyc2UgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cG9zZSgpIHtcblxuXHRcdC8vIHJlY292ZXIgdGhlIGJpbmQtdGltZSB3b3JsZCBtYXRyaWNlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZSApIHtcblxuXHRcdFx0XHRib25lLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMuYm9uZUludmVyc2VzWyBpIF0gKS5pbnZlcnQoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbG9jYWwgbWF0cmljZXMsIHBvc2l0aW9ucywgcm90YXRpb25zIGFuZCBzY2FsZXNcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgKSB7XG5cblx0XHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0XHRib25lLm1hdHJpeC5jb3B5KCBib25lLnBhcmVudC5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXHRcdFx0XHRcdGJvbmUubWF0cml4Lm11bHRpcGx5KCBib25lLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmNvcHkoIGJvbmUubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ym9uZS5tYXRyaXguZGVjb21wb3NlKCBib25lLnBvc2l0aW9uLCBib25lLnF1YXRlcm5pb24sIGJvbmUuc2NhbGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCBib25lcyA9IHRoaXMuYm9uZXM7XG5cdFx0Y29uc3QgYm9uZUludmVyc2VzID0gdGhpcy5ib25lSW52ZXJzZXM7XG5cdFx0Y29uc3QgYm9uZU1hdHJpY2VzID0gdGhpcy5ib25lTWF0cmljZXM7XG5cdFx0Y29uc3QgYm9uZVRleHR1cmUgPSB0aGlzLmJvbmVUZXh0dXJlO1xuXG5cdFx0Ly8gZmxhdHRlbiBib25lIG1hdHJpY2VzIHRvIGFycmF5XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGUgdGhlIG9mZnNldCBiZXR3ZWVuIHRoZSBjdXJyZW50IGFuZCB0aGUgb3JpZ2luYWwgdHJhbnNmb3JtXG5cblx0XHRcdGNvbnN0IG1hdHJpeCA9IGJvbmVzWyBpIF0gPyBib25lc1sgaSBdLm1hdHJpeFdvcmxkIDogX2lkZW50aXR5TWF0cml4O1xuXG5cdFx0XHRfb2Zmc2V0TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeCwgYm9uZUludmVyc2VzWyBpIF0gKTtcblx0XHRcdF9vZmZzZXRNYXRyaXgudG9BcnJheSggYm9uZU1hdHJpY2VzLCBpICogMTYgKTtcblxuXHRcdH1cblxuXHRcdGlmICggYm9uZVRleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IFNrZWxldG9uKCB0aGlzLmJvbmVzLCB0aGlzLmJvbmVJbnZlcnNlcyApO1xuXG5cdH1cblxuXHRjb21wdXRlQm9uZVRleHR1cmUoKSB7XG5cblx0XHQvLyBsYXlvdXQgKDEgbWF0cml4ID0gNCBwaXhlbHMpXG5cdFx0Ly8gICAgICBSR0JBIFJHQkEgUkdCQSBSR0JBICg9PiBjb2x1bW4xLCBjb2x1bW4yLCBjb2x1bW4zLCBjb2x1bW40KVxuXHRcdC8vICB3aXRoICA4eDggIHBpeGVsIHRleHR1cmUgbWF4ICAgMTYgYm9uZXMgKiA0IHBpeGVscyA9ICAoOCAqIDgpXG5cdFx0Ly8gICAgICAgMTZ4MTYgcGl4ZWwgdGV4dHVyZSBtYXggICA2NCBib25lcyAqIDQgcGl4ZWxzID0gKDE2ICogMTYpXG5cdFx0Ly8gICAgICAgMzJ4MzIgcGl4ZWwgdGV4dHVyZSBtYXggIDI1NiBib25lcyAqIDQgcGl4ZWxzID0gKDMyICogMzIpXG5cdFx0Ly8gICAgICAgNjR4NjQgcGl4ZWwgdGV4dHVyZSBtYXggMTAyNCBib25lcyAqIDQgcGl4ZWxzID0gKDY0ICogNjQpXG5cblx0XHRsZXQgc2l6ZSA9IE1hdGguc3FydCggdGhpcy5ib25lcy5sZW5ndGggKiA0ICk7IC8vIDQgcGl4ZWxzIG5lZWRlZCBmb3IgMSBtYXRyaXhcblx0XHRzaXplID0gY2VpbFBvd2VyT2ZUd28oIHNpemUgKTtcblx0XHRzaXplID0gTWF0aC5tYXgoIHNpemUsIDQgKTtcblxuXHRcdGNvbnN0IGJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIHNpemUgKiBzaXplICogNCApOyAvLyA0IGZsb2F0cyBwZXIgUkdCQSBwaXhlbFxuXHRcdGJvbmVNYXRyaWNlcy5zZXQoIHRoaXMuYm9uZU1hdHJpY2VzICk7IC8vIGNvcHkgY3VycmVudCB2YWx1ZXNcblxuXHRcdGNvbnN0IGJvbmVUZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCBib25lTWF0cmljZXMsIHNpemUsIHNpemUsIFJHQkFGb3JtYXQsIEZsb2F0VHlwZSApO1xuXHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHRoaXMuYm9uZU1hdHJpY2VzID0gYm9uZU1hdHJpY2VzO1xuXHRcdHRoaXMuYm9uZVRleHR1cmUgPSBib25lVGV4dHVyZTtcblx0XHR0aGlzLmJvbmVUZXh0dXJlU2l6ZSA9IHNpemU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Qm9uZUJ5TmFtZSggbmFtZSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gYm9uZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9XG5cblx0ZGlzcG9zZSggKSB7XG5cblx0XHRpZiAoIHRoaXMuYm9uZVRleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm9uZVRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0XHR0aGlzLmJvbmVUZXh0dXJlID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24sIGJvbmVzICkge1xuXG5cdFx0dGhpcy51dWlkID0ganNvbi51dWlkO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5ib25lcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB1dWlkID0ganNvbi5ib25lc1sgaSBdO1xuXHRcdFx0bGV0IGJvbmUgPSBib25lc1sgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogTm8gYm9uZSBmb3VuZCB3aXRoIFVVSUQ6JywgdXVpZCApO1xuXHRcdFx0XHRib25lID0gbmV3IEJvbmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmJvbmVzLnB1c2goIGJvbmUgKTtcblx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCBqc29uLmJvbmVJbnZlcnNlc1sgaSBdICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuaW5pdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdTa2VsZXRvbicsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ1NrZWxldG9uLnRvSlNPTidcblx0XHRcdH0sXG5cdFx0XHRib25lczogW10sXG5cdFx0XHRib25lSW52ZXJzZXM6IFtdXG5cdFx0fTtcblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblxuXHRcdGNvbnN0IGJvbmVzID0gdGhpcy5ib25lcztcblx0XHRjb25zdCBib25lSW52ZXJzZXMgPSB0aGlzLmJvbmVJbnZlcnNlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGJvbmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGJvbmUgPSBib25lc1sgaSBdO1xuXHRcdFx0ZGF0YS5ib25lcy5wdXNoKCBib25lLnV1aWQgKTtcblxuXHRcdFx0Y29uc3QgYm9uZUludmVyc2UgPSBib25lSW52ZXJzZXNbIGkgXTtcblx0XHRcdGRhdGEuYm9uZUludmVyc2VzLnB1c2goIGJvbmVJbnZlcnNlLnRvQXJyYXkoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmNsYXNzIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCwgbWVzaFBlckF0dHJpYnV0ZSA9IDEgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBub3JtYWxpemVkID09PSAnbnVtYmVyJyApIHtcblxuXHRcdFx0bWVzaFBlckF0dHJpYnV0ZSA9IG5vcm1hbGl6ZWQ7XG5cblx0XHRcdG5vcm1hbGl6ZWQgPSBmYWxzZTtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTogVGhlIGNvbnN0cnVjdG9yIG5vdyBleHBlY3RzIG5vcm1hbGl6ZWQgYXMgdGhlIHRoaXJkIGFyZ3VtZW50LicgKTtcblxuXHRcdH1cblxuXHRcdHN1cGVyKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0ZGF0YS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cbmNvbnN0IF9pbnN0YW5jZUxvY2FsTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2luc3RhbmNlV29ybGRNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbmNvbnN0IF9pbnN0YW5jZUludGVyc2VjdHMgPSBbXTtcblxuY29uc3QgX21lc2ggPSAvKkBfX1BVUkVfXyovIG5ldyBNZXNoKCk7XG5cbmNsYXNzIEluc3RhbmNlZE1lc2ggZXh0ZW5kcyBNZXNoIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsLCBjb3VudCApIHtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMuaW5zdGFuY2VNYXRyaXggPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBjb3VudCAqIDE2ICksIDE2ICk7XG5cdFx0dGhpcy5pbnN0YW5jZUNvbG9yID0gbnVsbDtcblxuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcblxuXHRcdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuaW5zdGFuY2VNYXRyaXguY29weSggc291cmNlLmluc3RhbmNlTWF0cml4ICk7XG5cblx0XHRpZiAoIHNvdXJjZS5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkgdGhpcy5pbnN0YW5jZUNvbG9yID0gc291cmNlLmluc3RhbmNlQ29sb3IuY2xvbmUoKTtcblxuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q29sb3JBdCggaW5kZXgsIGNvbG9yICkge1xuXG5cdFx0Y29sb3IuZnJvbUFycmF5KCB0aGlzLmluc3RhbmNlQ29sb3IuYXJyYXksIGluZGV4ICogMyApO1xuXG5cdH1cblxuXHRnZXRNYXRyaXhBdCggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRcdG1hdHJpeC5mcm9tQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguYXJyYXksIGluZGV4ICogMTYgKTtcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXHRcdGNvbnN0IHJheWNhc3RUaW1lcyA9IHRoaXMuY291bnQ7XG5cblx0XHRfbWVzaC5nZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0X21lc2gubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXG5cdFx0aWYgKCBfbWVzaC5tYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Zm9yICggbGV0IGluc3RhbmNlSWQgPSAwOyBpbnN0YW5jZUlkIDwgcmF5Y2FzdFRpbWVzOyBpbnN0YW5jZUlkICsrICkge1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgdGhlIHdvcmxkIG1hdHJpeCBmb3IgZWFjaCBpbnN0YW5jZVxuXG5cdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpbnN0YW5jZUlkLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHRfaW5zdGFuY2VXb3JsZE1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXhXb3JsZCwgX2luc3RhbmNlTG9jYWxNYXRyaXggKTtcblxuXHRcdFx0Ly8gdGhlIG1lc2ggcmVwcmVzZW50cyB0aGlzIHNpbmdsZSBpbnN0YW5jZVxuXG5cdFx0XHRfbWVzaC5tYXRyaXhXb3JsZCA9IF9pbnN0YW5jZVdvcmxkTWF0cml4O1xuXG5cdFx0XHRfbWVzaC5yYXljYXN0KCByYXljYXN0ZXIsIF9pbnN0YW5jZUludGVyc2VjdHMgKTtcblxuXHRcdFx0Ly8gcHJvY2VzcyB0aGUgcmVzdWx0IG9mIHJheWNhc3RcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gX2luc3RhbmNlSW50ZXJzZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IF9pbnN0YW5jZUludGVyc2VjdHNbIGkgXTtcblx0XHRcdFx0aW50ZXJzZWN0Lmluc3RhbmNlSWQgPSBpbnN0YW5jZUlkO1xuXHRcdFx0XHRpbnRlcnNlY3Qub2JqZWN0ID0gdGhpcztcblx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfaW5zdGFuY2VJbnRlcnNlY3RzLmxlbmd0aCA9IDA7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldENvbG9yQXQoIGluZGV4LCBjb2xvciApIHtcblxuXHRcdGlmICggdGhpcy5pbnN0YW5jZUNvbG9yID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmluc3RhbmNlQ29sb3IgPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCB0aGlzLmluc3RhbmNlTWF0cml4LmNvdW50ICogMyApLCAzICk7XG5cblx0XHR9XG5cblx0XHRjb2xvci50b0FycmF5KCB0aGlzLmluc3RhbmNlQ29sb3IuYXJyYXksIGluZGV4ICogMyApO1xuXG5cdH1cblxuXHRzZXRNYXRyaXhBdCggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRcdG1hdHJpeC50b0FycmF5KCB0aGlzLmluc3RhbmNlTWF0cml4LmFycmF5LCBpbmRleCAqIDE2ICk7XG5cblx0fVxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0cygpIHtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufVxuXG5JbnN0YW5jZWRNZXNoLnByb3RvdHlwZS5pc0luc3RhbmNlZE1lc2ggPSB0cnVlO1xuXG5jbGFzcyBMaW5lQmFzaWNNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUJhc2ljTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdHRoaXMubGluZXdpZHRoID0gMTtcblx0XHR0aGlzLmxpbmVjYXAgPSAncm91bmQnO1xuXHRcdHRoaXMubGluZWpvaW4gPSAncm91bmQnO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLmxpbmV3aWR0aCA9IHNvdXJjZS5saW5ld2lkdGg7XG5cdFx0dGhpcy5saW5lY2FwID0gc291cmNlLmxpbmVjYXA7XG5cdFx0dGhpcy5saW5lam9pbiA9IHNvdXJjZS5saW5lam9pbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuaXNMaW5lQmFzaWNNYXRlcmlhbCA9IHRydWU7XG5cbmNvbnN0IF9zdGFydCQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2VuZCQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2ludmVyc2VNYXRyaXgkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9yYXkkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFJheSgpO1xuY29uc3QgX3NwaGVyZSQxID0gLypAX19QVVJFX18qLyBuZXcgU3BoZXJlKCk7XG5cbmNsYXNzIExpbmUgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCksIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmUnO1xuXG5cdFx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuXHRcdHRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbCA9IHNvdXJjZS5tYXRlcmlhbDtcblx0XHR0aGlzLmdlb21ldHJ5ID0gc291cmNlLmdlb21ldHJ5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHQvLyB3ZSBhc3N1bWUgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdGNvbnN0IGxpbmVEaXN0YW5jZXMgPSBbIDAgXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRfc3RhcnQkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSAtIDEgKTtcblx0XHRcdFx0XHRfZW5kJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblxuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdICs9IF9zdGFydCQxLmRpc3RhbmNlVG8oIF9lbmQkMSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdsaW5lRGlzdGFuY2UnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbGluZURpc3RhbmNlcywgMSApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpIG5vIGxvbmdlciBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cdFx0Y29uc3QgdGhyZXNob2xkID0gcmF5Y2FzdGVyLnBhcmFtcy5MaW5lLnRocmVzaG9sZDtcblx0XHRjb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cblx0XHQvLyBDaGVja2luZyBib3VuZGluZ1NwaGVyZSBkaXN0YW5jZSB0byByYXlcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUkMS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUkMS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cdFx0X3NwaGVyZSQxLnJhZGl1cyArPSB0aHJlc2hvbGQ7XG5cblx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQxICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly9cblxuXHRcdF9pbnZlcnNlTWF0cml4JDEuY29weSggbWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblx0XHRfcmF5JDEuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXgkMSApO1xuXG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGRTcSA9IGxvY2FsVGhyZXNob2xkICogbG9jYWxUaHJlc2hvbGQ7XG5cblx0XHRjb25zdCB2U3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHZFbmQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IGludGVyU2VnbWVudCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgaW50ZXJSYXkgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHN0ZXAgPSB0aGlzLmlzTGluZVNlZ21lbnRzID8gMiA6IDE7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgbCA9IGVuZCAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggaSApO1xuXHRcdFx0XHRcdGNvbnN0IGIgPSBpbmRleC5nZXRYKCBpICsgMSApO1xuXG5cdFx0XHRcdFx0dlN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBhICk7XG5cdFx0XHRcdFx0dkVuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgYiApO1xuXG5cdFx0XHRcdFx0Y29uc3QgZGlzdFNxID0gX3JheSQxLmRpc3RhbmNlU3FUb1NlZ21lbnQoIHZTdGFydCwgdkVuZCwgaW50ZXJSYXksIGludGVyU2VnbWVudCApO1xuXG5cdFx0XHRcdFx0aWYgKCBkaXN0U3EgPiBsb2NhbFRocmVzaG9sZFNxICkgY29udGludWU7XG5cblx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgY29udGludWU7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XG5cdFx0XHRcdFx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcblx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdG9iamVjdDogdGhpc1xuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIHBvc2l0aW9uQXR0cmlidXRlLmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgbCA9IGVuZCAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0XHR2U3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblx0XHRcdFx0XHR2RW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApO1xuXG5cdFx0XHRcdFx0Y29uc3QgZGlzdFNxID0gX3JheSQxLmRpc3RhbmNlU3FUb1NlZ21lbnQoIHZTdGFydCwgdkVuZCwgaW50ZXJSYXksIGludGVyU2VnbWVudCApO1xuXG5cdFx0XHRcdFx0aWYgKCBkaXN0U3EgPiBsb2NhbFRocmVzaG9sZFNxICkgY29udGludWU7XG5cblx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgY29udGludWU7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XG5cdFx0XHRcdFx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcblx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdG9iamVjdDogdGhpc1xuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxpbmUucmF5Y2FzdCgpIG5vIGxvbmdlciBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGVNb3JwaFRhcmdldHMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblx0XHRcdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyggbW9ycGhBdHRyaWJ1dGVzICk7XG5cblx0XHRcdGlmICgga2V5cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXlzWyAwIF0gXTtcblxuXHRcdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgbSA9IDAsIG1sID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBtIDwgbWw7IG0gKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBtb3JwaEF0dHJpYnV0ZVsgbSBdLm5hbWUgfHwgU3RyaW5nKCBtICk7XG5cblx0XHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcblx0XHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5WyBuYW1lIF0gPSBtO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkICYmIG1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5MaW5lLnVwZGF0ZU1vcnBoVGFyZ2V0cygpIGRvZXMgbm90IHN1cHBvcnQgVEhSRUUuR2VvbWV0cnkuIFVzZSBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5MaW5lLnByb3RvdHlwZS5pc0xpbmUgPSB0cnVlO1xuXG5jb25zdCBfc3RhcnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZW5kID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBMaW5lU2VnbWVudHMgZXh0ZW5kcyBMaW5lIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVTZWdtZW50cyc7XG5cblx0fVxuXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHQvLyB3ZSBhc3N1bWUgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdGNvbnN0IGxpbmVEaXN0YW5jZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKz0gMiApIHtcblxuXHRcdFx0XHRcdF9zdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXHRcdFx0XHRcdF9lbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAxICk7XG5cblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gPSAoIGkgPT09IDAgKSA/IDAgOiBsaW5lRGlzdGFuY2VzWyBpIC0gMSBdO1xuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgKyAxIF0gPSBsaW5lRGlzdGFuY2VzWyBpIF0gKyBfc3RhcnQuZGlzdGFuY2VUbyggX2VuZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdsaW5lRGlzdGFuY2UnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbGluZURpc3RhbmNlcywgMSApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZVNlZ21lbnRzLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk6IENvbXB1dGF0aW9uIG9ubHkgcG9zc2libGUgd2l0aCBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeS4nICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5MaW5lU2VnbWVudHMuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKSBubyBsb25nZXIgc3VwcG9ydHMgVEhSRUUuR2VvbWV0cnkuIFVzZSBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5MaW5lU2VnbWVudHMucHJvdG90eXBlLmlzTGluZVNlZ21lbnRzID0gdHJ1ZTtcblxuY2xhc3MgTGluZUxvb3AgZXh0ZW5kcyBMaW5lIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVMb29wJztcblxuXHR9XG5cbn1cblxuTGluZUxvb3AucHJvdG90eXBlLmlzTGluZUxvb3AgPSB0cnVlO1xuXG5jbGFzcyBQb2ludHNNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUG9pbnRzTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5zaXplID0gMTtcblx0XHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5zaXplID0gc291cmNlLnNpemU7XG5cdFx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5pc1BvaW50c01hdGVyaWFsID0gdHJ1ZTtcblxuY29uc3QgX2ludmVyc2VNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcmF5ID0gLypAX19QVVJFX18qLyBuZXcgUmF5KCk7XG5jb25zdCBfc3BoZXJlID0gLypAX19QVVJFX18qLyBuZXcgU3BoZXJlKCk7XG5jb25zdCBfcG9zaXRpb24kMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgUG9pbnRzIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBtYXRlcmlhbCA9IG5ldyBQb2ludHNNYXRlcmlhbCgpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQb2ludHMnO1xuXG5cdFx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuXHRcdHRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbCA9IHNvdXJjZS5tYXRlcmlhbDtcblx0XHR0aGlzLmdlb21ldHJ5ID0gc291cmNlLmdlb21ldHJ5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cdFx0Y29uc3QgdGhyZXNob2xkID0gcmF5Y2FzdGVyLnBhcmFtcy5Qb2ludHMudGhyZXNob2xkO1xuXHRcdGNvbnN0IGRyYXdSYW5nZSA9IGdlb21ldHJ5LmRyYXdSYW5nZTtcblxuXHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0X3NwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXHRcdF9zcGhlcmUucmFkaXVzICs9IHRocmVzaG9sZDtcblxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly9cblxuXHRcdF9pbnZlcnNlTWF0cml4LmNvcHkoIG1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cdFx0X3JheS5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBfaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0Y29uc3QgbG9jYWxUaHJlc2hvbGRTcSA9IGxvY2FsVGhyZXNob2xkICogbG9jYWxUaHJlc2hvbGQ7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBpICk7XG5cblx0XHRcdFx0XHRfcG9zaXRpb24kMi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgYSApO1xuXG5cdFx0XHRcdFx0dGVzdFBvaW50KCBfcG9zaXRpb24kMiwgYSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIHBvc2l0aW9uQXR0cmlidXRlLmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgbCA9IGVuZDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRfcG9zaXRpb24kMi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXG5cdFx0XHRcdFx0dGVzdFBvaW50KCBfcG9zaXRpb24kMiwgaSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlBvaW50cy5yYXljYXN0KCkgbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0cygpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuXHRcdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xuXG5cdFx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgbmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApO1xuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgbW9ycGhUYXJnZXRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlBvaW50cy51cGRhdGVNb3JwaFRhcmdldHMoKSBkb2VzIG5vdCBzdXBwb3J0IFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuUG9pbnRzLnByb3RvdHlwZS5pc1BvaW50cyA9IHRydWU7XG5cbmZ1bmN0aW9uIHRlc3RQb2ludCggcG9pbnQsIGluZGV4LCBsb2NhbFRocmVzaG9sZFNxLCBtYXRyaXhXb3JsZCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCBvYmplY3QgKSB7XG5cblx0Y29uc3QgcmF5UG9pbnREaXN0YW5jZVNxID0gX3JheS5kaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKTtcblxuXHRpZiAoIHJheVBvaW50RGlzdGFuY2VTcSA8IGxvY2FsVGhyZXNob2xkU3EgKSB7XG5cblx0XHRjb25zdCBpbnRlcnNlY3RQb2ludCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRfcmF5LmNsb3Nlc3RQb2ludFRvUG9pbnQoIHBvaW50LCBpbnRlcnNlY3RQb2ludCApO1xuXHRcdGludGVyc2VjdFBvaW50LmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdGNvbnN0IGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0ZGlzdGFuY2VUb1JheTogTWF0aC5zcXJ0KCByYXlQb2ludERpc3RhbmNlU3EgKSxcblx0XHRcdHBvaW50OiBpbnRlcnNlY3RQb2ludCxcblx0XHRcdGluZGV4OiBpbmRleCxcblx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRvYmplY3Q6IG9iamVjdFxuXG5cdFx0fSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBWaWRlb1RleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcblxuXHRcdHN1cGVyKCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0XHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXHRcdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVmlkZW8oKSB7XG5cblx0XHRcdHNjb3BlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdHZpZGVvLnJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2soIHVwZGF0ZVZpZGVvICk7XG5cblx0XHR9XG5cblx0XHRpZiAoICdyZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrJyBpbiB2aWRlbyApIHtcblxuXHRcdFx0dmlkZW8ucmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjayggdXBkYXRlVmlkZW8gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuaW1hZ2UgKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdGNvbnN0IHZpZGVvID0gdGhpcy5pbWFnZTtcblx0XHRjb25zdCBoYXNWaWRlb0ZyYW1lQ2FsbGJhY2sgPSAncmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjaycgaW4gdmlkZW87XG5cblx0XHRpZiAoIGhhc1ZpZGVvRnJhbWVDYWxsYmFjayA9PT0gZmFsc2UgJiYgdmlkZW8ucmVhZHlTdGF0ZSA+PSB2aWRlby5IQVZFX0NVUlJFTlRfREFUQSApIHtcblxuXHRcdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cblZpZGVvVGV4dHVyZS5wcm90b3R5cGUuaXNWaWRlb1RleHR1cmUgPSB0cnVlO1xuXG5jbGFzcyBGcmFtZWJ1ZmZlclRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgZm9ybWF0ICkge1xuXG5cdFx0c3VwZXIoIHsgd2lkdGgsIGhlaWdodCB9ICk7XG5cblx0XHR0aGlzLmZvcm1hdCA9IGZvcm1hdDtcblxuXHRcdHRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblx0XHR0aGlzLm1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbkZyYW1lYnVmZmVyVGV4dHVyZS5wcm90b3R5cGUuaXNGcmFtZWJ1ZmZlclRleHR1cmUgPSB0cnVlO1xuXG5jbGFzcyBDb21wcmVzc2VkVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFx0c3VwZXIoIG51bGwsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKTtcblxuXHRcdHRoaXMuaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblx0XHR0aGlzLm1pcG1hcHMgPSBtaXBtYXBzO1xuXG5cdFx0Ly8gbm8gZmxpcHBpbmcgZm9yIGN1YmUgdGV4dHVyZXNcblx0XHQvLyAoYWxzbyBmbGlwcGluZyBkb2Vzbid0IHdvcmsgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXMgKVxuXG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXG5cdFx0Ly8gY2FuJ3QgZ2VuZXJhdGUgbWlwbWFwcyBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlc1xuXHRcdC8vIG1pcHMgbXVzdCBiZSBlbWJlZGRlZCBpbiBERFMgZmlsZXNcblxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0fVxuXG59XG5cbkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5pc0NvbXByZXNzZWRUZXh0dXJlID0gdHJ1ZTtcblxuY2xhc3MgQ2FudmFzVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcblxuXHRcdHN1cGVyKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbkNhbnZhc1RleHR1cmUucHJvdG90eXBlLmlzQ2FudmFzVGV4dHVyZSA9IHRydWU7XG5cbi8qKlxuICogRXh0ZW5zaWJsZSBjdXJ2ZSBvYmplY3QuXG4gKlxuICogU29tZSBjb21tb24gb2YgY3VydmUgbWV0aG9kczpcbiAqIC5nZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKSwgLmdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0IClcbiAqIC5nZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApLCAuZ2V0VGFuZ2VudEF0KCB1LCBvcHRpb25hbFRhcmdldCApXG4gKiAuZ2V0UG9pbnRzKCksIC5nZXRTcGFjZWRQb2ludHMoKVxuICogLmdldExlbmd0aCgpXG4gKiAudXBkYXRlQXJjTGVuZ3RocygpXG4gKlxuICogVGhpcyBmb2xsb3dpbmcgY3VydmVzIGluaGVyaXQgZnJvbSBUSFJFRS5DdXJ2ZTpcbiAqXG4gKiAtLSAyRCBjdXJ2ZXMgLS1cbiAqIFRIUkVFLkFyY0N1cnZlXG4gKiBUSFJFRS5DdWJpY0JlemllckN1cnZlXG4gKiBUSFJFRS5FbGxpcHNlQ3VydmVcbiAqIFRIUkVFLkxpbmVDdXJ2ZVxuICogVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmVcbiAqIFRIUkVFLlNwbGluZUN1cnZlXG4gKlxuICogLS0gM0QgY3VydmVzIC0tXG4gKiBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzXG4gKiBUSFJFRS5DdWJpY0JlemllckN1cnZlM1xuICogVEhSRUUuTGluZUN1cnZlM1xuICogVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmUzXG4gKlxuICogQSBzZXJpZXMgb2YgY3VydmVzIGNhbiBiZSByZXByZXNlbnRlZCBhcyBhIFRIUkVFLkN1cnZlUGF0aC5cbiAqXG4gKiovXG5cbmNsYXNzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMudHlwZSA9ICdDdXJ2ZSc7XG5cblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IDIwMDtcblxuXHR9XG5cblx0Ly8gVmlydHVhbCBiYXNlIGNsYXNzIG1ldGhvZCB0byBvdmVyd3JpdGUgYW5kIGltcGxlbWVudCBpbiBzdWJjbGFzc2VzXG5cdC8vXHQtIHQgWzAgLi4gMV1cblxuXHRnZXRQb2ludCggLyogdCwgb3B0aW9uYWxUYXJnZXQgKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLmdldFBvaW50KCkgbm90IGltcGxlbWVudGVkLicgKTtcblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0Ly8gR2V0IHBvaW50IGF0IHJlbGF0aXZlIHBvc2l0aW9uIGluIGN1cnZlIGFjY29yZGluZyB0byBhcmMgbGVuZ3RoXG5cdC8vIC0gdSBbMCAuLiAxXVxuXG5cdGdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdCA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcoIHUgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0Ly8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludCggdCApXG5cblx0Z2V0UG9pbnRzKCBkaXZpc2lvbnMgPSA1ICkge1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH1cblxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50QXQoIHUgKVxuXG5cdGdldFNwYWNlZFBvaW50cyggZGl2aXNpb25zID0gNSApIHtcblxuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnRBdCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH1cblxuXHQvLyBHZXQgdG90YWwgY3VydmUgYXJjIGxlbmd0aFxuXG5cdGdldExlbmd0aCgpIHtcblxuXHRcdGNvbnN0IGxlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuZ3Roc1sgbGVuZ3Rocy5sZW5ndGggLSAxIF07XG5cblx0fVxuXG5cdC8vIEdldCBsaXN0IG9mIGN1bXVsYXRpdmUgc2VnbWVudCBsZW5ndGhzXG5cblx0Z2V0TGVuZ3RocyggZGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgKSB7XG5cblx0XHRpZiAoIHRoaXMuY2FjaGVBcmNMZW5ndGhzICYmXG5cdFx0XHQoIHRoaXMuY2FjaGVBcmNMZW5ndGhzLmxlbmd0aCA9PT0gZGl2aXNpb25zICsgMSApICYmXG5cdFx0XHQhIHRoaXMubmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3RocztcblxuXHRcdH1cblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGNhY2hlID0gW107XG5cdFx0bGV0IGN1cnJlbnQsIGxhc3QgPSB0aGlzLmdldFBvaW50KCAwICk7XG5cdFx0bGV0IHN1bSA9IDA7XG5cblx0XHRjYWNoZS5wdXNoKCAwICk7XG5cblx0XHRmb3IgKCBsZXQgcCA9IDE7IHAgPD0gZGl2aXNpb25zOyBwICsrICkge1xuXG5cdFx0XHRjdXJyZW50ID0gdGhpcy5nZXRQb2ludCggcCAvIGRpdmlzaW9ucyApO1xuXHRcdFx0c3VtICs9IGN1cnJlbnQuZGlzdGFuY2VUbyggbGFzdCApO1xuXHRcdFx0Y2FjaGUucHVzaCggc3VtICk7XG5cdFx0XHRsYXN0ID0gY3VycmVudDtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2FjaGVBcmNMZW5ndGhzID0gY2FjaGU7XG5cblx0XHRyZXR1cm4gY2FjaGU7IC8vIHsgc3VtczogY2FjaGUsIHN1bTogc3VtIH07IFN1bSBpcyBpbiB0aGUgbGFzdCBlbGVtZW50LlxuXG5cdH1cblxuXHR1cGRhdGVBcmNMZW5ndGhzKCkge1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5nZXRMZW5ndGhzKCk7XG5cblx0fVxuXG5cdC8vIEdpdmVuIHUgKCAwIC4uIDEgKSwgZ2V0IGEgdCB0byBmaW5kIHAuIFRoaXMgZ2l2ZXMgeW91IHBvaW50cyB3aGljaCBhcmUgZXF1aWRpc3RhbnRcblxuXHRnZXRVdG9UbWFwcGluZyggdSwgZGlzdGFuY2UgKSB7XG5cblx0XHRjb25zdCBhcmNMZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7XG5cblx0XHRsZXQgaSA9IDA7XG5cdFx0Y29uc3QgaWwgPSBhcmNMZW5ndGhzLmxlbmd0aDtcblxuXHRcdGxldCB0YXJnZXRBcmNMZW5ndGg7IC8vIFRoZSB0YXJnZXRlZCB1IGRpc3RhbmNlIHZhbHVlIHRvIGdldFxuXG5cdFx0aWYgKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0dGFyZ2V0QXJjTGVuZ3RoID0gZGlzdGFuY2U7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSB1ICogYXJjTGVuZ3Roc1sgaWwgLSAxIF07XG5cblx0XHR9XG5cblx0XHQvLyBiaW5hcnkgc2VhcmNoIGZvciB0aGUgaW5kZXggd2l0aCBsYXJnZXN0IHZhbHVlIHNtYWxsZXIgdGhhbiB0YXJnZXQgdSBkaXN0YW5jZVxuXG5cdFx0bGV0IGxvdyA9IDAsIGhpZ2ggPSBpbCAtIDEsIGNvbXBhcmlzb247XG5cblx0XHR3aGlsZSAoIGxvdyA8PSBoaWdoICkge1xuXG5cdFx0XHRpID0gTWF0aC5mbG9vciggbG93ICsgKCBoaWdoIC0gbG93ICkgLyAyICk7IC8vIGxlc3MgbGlrZWx5IHRvIG92ZXJmbG93LCB0aG91Z2ggcHJvYmFibHkgbm90IGlzc3VlIGhlcmUsIEpTIGRvZXNuJ3QgcmVhbGx5IGhhdmUgaW50ZWdlcnMsIGFsbCBudW1iZXJzIGFyZSBmbG9hdHNcblxuXHRcdFx0Y29tcGFyaXNvbiA9IGFyY0xlbmd0aHNbIGkgXSAtIHRhcmdldEFyY0xlbmd0aDtcblxuXHRcdFx0aWYgKCBjb21wYXJpc29uIDwgMCApIHtcblxuXHRcdFx0XHRsb3cgPSBpICsgMTtcblxuXHRcdFx0fSBlbHNlIGlmICggY29tcGFyaXNvbiA+IDAgKSB7XG5cblx0XHRcdFx0aGlnaCA9IGkgLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGhpZ2ggPSBpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHQvLyBET05FXG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGkgPSBoaWdoO1xuXG5cdFx0aWYgKCBhcmNMZW5ndGhzWyBpIF0gPT09IHRhcmdldEFyY0xlbmd0aCApIHtcblxuXHRcdFx0cmV0dXJuIGkgLyAoIGlsIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gd2UgY291bGQgZ2V0IGZpbmVyIGdyYWluIGF0IGxlbmd0aHMsIG9yIHVzZSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcblxuXHRcdGNvbnN0IGxlbmd0aEJlZm9yZSA9IGFyY0xlbmd0aHNbIGkgXTtcblx0XHRjb25zdCBsZW5ndGhBZnRlciA9IGFyY0xlbmd0aHNbIGkgKyAxIF07XG5cblx0XHRjb25zdCBzZWdtZW50TGVuZ3RoID0gbGVuZ3RoQWZ0ZXIgLSBsZW5ndGhCZWZvcmU7XG5cblx0XHQvLyBkZXRlcm1pbmUgd2hlcmUgd2UgYXJlIGJldHdlZW4gdGhlICdiZWZvcmUnIGFuZCAnYWZ0ZXInIHBvaW50c1xuXG5cdFx0Y29uc3Qgc2VnbWVudEZyYWN0aW9uID0gKCB0YXJnZXRBcmNMZW5ndGggLSBsZW5ndGhCZWZvcmUgKSAvIHNlZ21lbnRMZW5ndGg7XG5cblx0XHQvLyBhZGQgdGhhdCBmcmFjdGlvbmFsIGFtb3VudCB0byB0XG5cblx0XHRjb25zdCB0ID0gKCBpICsgc2VnbWVudEZyYWN0aW9uICkgLyAoIGlsIC0gMSApO1xuXG5cdFx0cmV0dXJuIHQ7XG5cblx0fVxuXG5cdC8vIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGF0IHRcblx0Ly8gSW4gY2FzZSBhbnkgc3ViIGN1cnZlIGRvZXMgbm90IGltcGxlbWVudCBpdHMgdGFuZ2VudCBkZXJpdmF0aW9uLFxuXHQvLyAyIHBvaW50cyBhIHNtYWxsIGRlbHRhIGFwYXJ0IHdpbGwgYmUgdXNlZCB0byBmaW5kIGl0cyBncmFkaWVudFxuXHQvLyB3aGljaCBzZWVtcyB0byBnaXZlIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uXG5cblx0Z2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBkZWx0YSA9IDAuMDAwMTtcblx0XHRsZXQgdDEgPSB0IC0gZGVsdGE7XG5cdFx0bGV0IHQyID0gdCArIGRlbHRhO1xuXG5cdFx0Ly8gQ2FwcGluZyBpbiBjYXNlIG9mIGRhbmdlclxuXG5cdFx0aWYgKCB0MSA8IDAgKSB0MSA9IDA7XG5cdFx0aWYgKCB0MiA+IDEgKSB0MiA9IDE7XG5cblx0XHRjb25zdCBwdDEgPSB0aGlzLmdldFBvaW50KCB0MSApO1xuXHRcdGNvbnN0IHB0MiA9IHRoaXMuZ2V0UG9pbnQoIHQyICk7XG5cblx0XHRjb25zdCB0YW5nZW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgKCAoIHB0MS5pc1ZlY3RvcjIgKSA/IG5ldyBWZWN0b3IyKCkgOiBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR0YW5nZW50LmNvcHkoIHB0MiApLnN1YiggcHQxICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGFuZ2VudDtcblxuXHR9XG5cblx0Z2V0VGFuZ2VudEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0Y29tcHV0ZUZyZW5ldEZyYW1lcyggc2VnbWVudHMsIGNsb3NlZCApIHtcblxuXHRcdC8vIHNlZSBodHRwOi8vd3d3LmNzLmluZGlhbmEuZWR1L3B1Yi90ZWNocmVwb3J0cy9UUjQyNS5wZGZcblxuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRjb25zdCB0YW5nZW50cyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCBiaW5vcm1hbHMgPSBbXTtcblxuXHRcdGNvbnN0IHZlYyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgbWF0ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIHRhbmdlbnQgdmVjdG9ycyBmb3IgZWFjaCBzZWdtZW50IG9uIHRoZSBjdXJ2ZVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB1ID0gaSAvIHNlZ21lbnRzO1xuXG5cdFx0XHR0YW5nZW50c1sgaSBdID0gdGhpcy5nZXRUYW5nZW50QXQoIHUsIG5ldyBWZWN0b3IzKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHNlbGVjdCBhbiBpbml0aWFsIG5vcm1hbCB2ZWN0b3IgcGVycGVuZGljdWxhciB0byB0aGUgZmlyc3QgdGFuZ2VudCB2ZWN0b3IsXG5cdFx0Ly8gYW5kIGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlIG1pbmltdW0gdGFuZ2VudCB4eXogY29tcG9uZW50XG5cblx0XHRub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdGJpbm9ybWFsc1sgMCBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHRsZXQgbWluID0gTnVtYmVyLk1BWF9WQUxVRTtcblx0XHRjb25zdCB0eCA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnggKTtcblx0XHRjb25zdCB0eSA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnkgKTtcblx0XHRjb25zdCB0eiA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnogKTtcblxuXHRcdGlmICggdHggPD0gbWluICkge1xuXG5cdFx0XHRtaW4gPSB0eDtcblx0XHRcdG5vcm1hbC5zZXQoIDEsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHkgPD0gbWluICkge1xuXG5cdFx0XHRtaW4gPSB0eTtcblx0XHRcdG5vcm1hbC5zZXQoIDAsIDEsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHogPD0gbWluICkge1xuXG5cdFx0XHRub3JtYWwuc2V0KCAwLCAwLCAxICk7XG5cblx0XHR9XG5cblx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWwgKS5ub3JtYWxpemUoKTtcblxuXHRcdG5vcm1hbHNbIDAgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIHZlYyApO1xuXHRcdGJpbm9ybWFsc1sgMCBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsc1sgMCBdICk7XG5cblxuXHRcdC8vIGNvbXB1dGUgdGhlIHNsb3dseS12YXJ5aW5nIG5vcm1hbCBhbmQgYmlub3JtYWwgdmVjdG9ycyBmb3IgZWFjaCBzZWdtZW50IG9uIHRoZSBjdXJ2ZVxuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRub3JtYWxzWyBpIF0gPSBub3JtYWxzWyBpIC0gMSBdLmNsb25lKCk7XG5cblx0XHRcdGJpbm9ybWFsc1sgaSBdID0gYmlub3JtYWxzWyBpIC0gMSBdLmNsb25lKCk7XG5cblx0XHRcdHZlYy5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIC0gMSBdLCB0YW5nZW50c1sgaSBdICk7XG5cblx0XHRcdGlmICggdmVjLmxlbmd0aCgpID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0dmVjLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdGNvbnN0IHRoZXRhID0gTWF0aC5hY29zKCBjbGFtcCggdGFuZ2VudHNbIGkgLSAxIF0uZG90KCB0YW5nZW50c1sgaSBdICksIC0gMSwgMSApICk7IC8vIGNsYW1wIGZvciBmbG9hdGluZyBwdCBlcnJvcnNcblxuXHRcdFx0XHRub3JtYWxzWyBpIF0uYXBwbHlNYXRyaXg0KCBtYXQubWFrZVJvdGF0aW9uQXhpcyggdmVjLCB0aGV0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ymlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIGlmIHRoZSBjdXJ2ZSBpcyBjbG9zZWQsIHBvc3Rwcm9jZXNzIHRoZSB2ZWN0b3JzIHNvIHRoZSBmaXJzdCBhbmQgbGFzdCBub3JtYWwgdmVjdG9ycyBhcmUgdGhlIHNhbWVcblxuXHRcdGlmICggY2xvc2VkID09PSB0cnVlICkge1xuXG5cdFx0XHRsZXQgdGhldGEgPSBNYXRoLmFjb3MoIGNsYW1wKCBub3JtYWxzWyAwIF0uZG90KCBub3JtYWxzWyBzZWdtZW50cyBdICksIC0gMSwgMSApICk7XG5cdFx0XHR0aGV0YSAvPSBzZWdtZW50cztcblxuXHRcdFx0aWYgKCB0YW5nZW50c1sgMCBdLmRvdCggdmVjLmNyb3NzVmVjdG9ycyggbm9ybWFsc1sgMCBdLCBub3JtYWxzWyBzZWdtZW50cyBdICkgKSA+IDAgKSB7XG5cblx0XHRcdFx0dGhldGEgPSAtIHRoZXRhO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHQvLyB0d2lzdCBhIGxpdHRsZS4uLlxuXHRcdFx0XHRub3JtYWxzWyBpIF0uYXBwbHlNYXRyaXg0KCBtYXQubWFrZVJvdGF0aW9uQXhpcyggdGFuZ2VudHNbIGkgXSwgdGhldGEgKiBpICkgKTtcblx0XHRcdFx0Ymlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRhbmdlbnRzOiB0YW5nZW50cyxcblx0XHRcdG5vcm1hbHM6IG5vcm1hbHMsXG5cdFx0XHRiaW5vcm1hbHM6IGJpbm9ybWFsc1xuXHRcdH07XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IHNvdXJjZS5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ0N1cnZlJyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnQ3VydmUudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRkYXRhLmFyY0xlbmd0aERpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0ganNvbi5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuY2xhc3MgRWxsaXBzZUN1cnZlIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCBhWCA9IDAsIGFZID0gMCwgeFJhZGl1cyA9IDEsIHlSYWRpdXMgPSAxLCBhU3RhcnRBbmdsZSA9IDAsIGFFbmRBbmdsZSA9IE1hdGguUEkgKiAyLCBhQ2xvY2t3aXNlID0gZmFsc2UsIGFSb3RhdGlvbiA9IDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0VsbGlwc2VDdXJ2ZSc7XG5cblx0XHR0aGlzLmFYID0gYVg7XG5cdFx0dGhpcy5hWSA9IGFZO1xuXG5cdFx0dGhpcy54UmFkaXVzID0geFJhZGl1cztcblx0XHR0aGlzLnlSYWRpdXMgPSB5UmFkaXVzO1xuXG5cdFx0dGhpcy5hU3RhcnRBbmdsZSA9IGFTdGFydEFuZ2xlO1xuXHRcdHRoaXMuYUVuZEFuZ2xlID0gYUVuZEFuZ2xlO1xuXG5cdFx0dGhpcy5hQ2xvY2t3aXNlID0gYUNsb2Nrd2lzZTtcblxuXHRcdHRoaXMuYVJvdGF0aW9uID0gYVJvdGF0aW9uO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRjb25zdCB0d29QaSA9IE1hdGguUEkgKiAyO1xuXHRcdGxldCBkZWx0YUFuZ2xlID0gdGhpcy5hRW5kQW5nbGUgLSB0aGlzLmFTdGFydEFuZ2xlO1xuXHRcdGNvbnN0IHNhbWVQb2ludHMgPSBNYXRoLmFicyggZGVsdGFBbmdsZSApIDwgTnVtYmVyLkVQU0lMT047XG5cblx0XHQvLyBlbnN1cmVzIHRoYXQgZGVsdGFBbmdsZSBpcyAwIC4uIDIgUElcblx0XHR3aGlsZSAoIGRlbHRhQW5nbGUgPCAwICkgZGVsdGFBbmdsZSArPSB0d29QaTtcblx0XHR3aGlsZSAoIGRlbHRhQW5nbGUgPiB0d29QaSApIGRlbHRhQW5nbGUgLT0gdHdvUGk7XG5cblx0XHRpZiAoIGRlbHRhQW5nbGUgPCBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0aWYgKCBzYW1lUG9pbnRzICkge1xuXG5cdFx0XHRcdGRlbHRhQW5nbGUgPSAwO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRlbHRhQW5nbGUgPSB0d29QaTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmFDbG9ja3dpc2UgPT09IHRydWUgJiYgISBzYW1lUG9pbnRzICkge1xuXG5cdFx0XHRpZiAoIGRlbHRhQW5nbGUgPT09IHR3b1BpICkge1xuXG5cdFx0XHRcdGRlbHRhQW5nbGUgPSAtIHR3b1BpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRlbHRhQW5nbGUgPSBkZWx0YUFuZ2xlIC0gdHdvUGk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZSArIHQgKiBkZWx0YUFuZ2xlO1xuXHRcdGxldCB4ID0gdGhpcy5hWCArIHRoaXMueFJhZGl1cyAqIE1hdGguY29zKCBhbmdsZSApO1xuXHRcdGxldCB5ID0gdGhpcy5hWSArIHRoaXMueVJhZGl1cyAqIE1hdGguc2luKCBhbmdsZSApO1xuXG5cdFx0aWYgKCB0aGlzLmFSb3RhdGlvbiAhPT0gMCApIHtcblxuXHRcdFx0Y29uc3QgY29zID0gTWF0aC5jb3MoIHRoaXMuYVJvdGF0aW9uICk7XG5cdFx0XHRjb25zdCBzaW4gPSBNYXRoLnNpbiggdGhpcy5hUm90YXRpb24gKTtcblxuXHRcdFx0Y29uc3QgdHggPSB4IC0gdGhpcy5hWDtcblx0XHRcdGNvbnN0IHR5ID0geSAtIHRoaXMuYVk7XG5cblx0XHRcdC8vIFJvdGF0ZSB0aGUgcG9pbnQgYWJvdXQgdGhlIGNlbnRlciBvZiB0aGUgZWxsaXBzZS5cblx0XHRcdHggPSB0eCAqIGNvcyAtIHR5ICogc2luICsgdGhpcy5hWDtcblx0XHRcdHkgPSB0eCAqIHNpbiArIHR5ICogY29zICsgdGhpcy5hWTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludC5zZXQoIHgsIHkgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmFYID0gc291cmNlLmFYO1xuXHRcdHRoaXMuYVkgPSBzb3VyY2UuYVk7XG5cblx0XHR0aGlzLnhSYWRpdXMgPSBzb3VyY2UueFJhZGl1cztcblx0XHR0aGlzLnlSYWRpdXMgPSBzb3VyY2UueVJhZGl1cztcblxuXHRcdHRoaXMuYVN0YXJ0QW5nbGUgPSBzb3VyY2UuYVN0YXJ0QW5nbGU7XG5cdFx0dGhpcy5hRW5kQW5nbGUgPSBzb3VyY2UuYUVuZEFuZ2xlO1xuXG5cdFx0dGhpcy5hQ2xvY2t3aXNlID0gc291cmNlLmFDbG9ja3dpc2U7XG5cblx0XHR0aGlzLmFSb3RhdGlvbiA9IHNvdXJjZS5hUm90YXRpb247XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5hWCA9IHRoaXMuYVg7XG5cdFx0ZGF0YS5hWSA9IHRoaXMuYVk7XG5cblx0XHRkYXRhLnhSYWRpdXMgPSB0aGlzLnhSYWRpdXM7XG5cdFx0ZGF0YS55UmFkaXVzID0gdGhpcy55UmFkaXVzO1xuXG5cdFx0ZGF0YS5hU3RhcnRBbmdsZSA9IHRoaXMuYVN0YXJ0QW5nbGU7XG5cdFx0ZGF0YS5hRW5kQW5nbGUgPSB0aGlzLmFFbmRBbmdsZTtcblxuXHRcdGRhdGEuYUNsb2Nrd2lzZSA9IHRoaXMuYUNsb2Nrd2lzZTtcblxuXHRcdGRhdGEuYVJvdGF0aW9uID0gdGhpcy5hUm90YXRpb247XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy5hWCA9IGpzb24uYVg7XG5cdFx0dGhpcy5hWSA9IGpzb24uYVk7XG5cblx0XHR0aGlzLnhSYWRpdXMgPSBqc29uLnhSYWRpdXM7XG5cdFx0dGhpcy55UmFkaXVzID0ganNvbi55UmFkaXVzO1xuXG5cdFx0dGhpcy5hU3RhcnRBbmdsZSA9IGpzb24uYVN0YXJ0QW5nbGU7XG5cdFx0dGhpcy5hRW5kQW5nbGUgPSBqc29uLmFFbmRBbmdsZTtcblxuXHRcdHRoaXMuYUNsb2Nrd2lzZSA9IGpzb24uYUNsb2Nrd2lzZTtcblxuXHRcdHRoaXMuYVJvdGF0aW9uID0ganNvbi5hUm90YXRpb247XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5pc0VsbGlwc2VDdXJ2ZSA9IHRydWU7XG5cbmNsYXNzIEFyY0N1cnZlIGV4dGVuZHMgRWxsaXBzZUN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdFx0c3VwZXIoIGFYLCBhWSwgYVJhZGl1cywgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0FyY0N1cnZlJztcblxuXHR9XG5cbn1cblxuQXJjQ3VydmUucHJvdG90eXBlLmlzQXJjQ3VydmUgPSB0cnVlO1xuXG4vKipcbiAqIENlbnRyaXBldGFsIENhdG11bGxSb20gQ3VydmUgLSB3aGljaCBpcyB1c2VmdWwgZm9yIGF2b2lkaW5nXG4gKiBjdXNwcyBhbmQgc2VsZi1pbnRlcnNlY3Rpb25zIGluIG5vbi11bmlmb3JtIGNhdG11bGwgcm9tIGN1cnZlcy5cbiAqIGh0dHA6Ly93d3cuY2VteXVrc2VsLmNvbS9yZXNlYXJjaC9jYXRtdWxscm9tX3BhcmFtL2NhdG11bGxyb20ucGRmXG4gKlxuICogY3VydmUudHlwZSBhY2NlcHRzIGNlbnRyaXBldGFsKGRlZmF1bHQpLCBjaG9yZGFsIGFuZCBjYXRtdWxscm9tXG4gKiBjdXJ2ZS50ZW5zaW9uIGlzIHVzZWQgZm9yIGNhdG11bGxyb20gd2hpY2ggZGVmYXVsdHMgdG8gMC41XG4gKi9cblxuXG4vKlxuQmFzZWQgb24gYW4gb3B0aW1pemVkIGMrKyBzb2x1dGlvbiBpblxuIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NDg5NzM2L2NhdG11bGwtcm9tLWN1cnZlLXdpdGgtbm8tY3VzcHMtYW5kLW5vLXNlbGYtaW50ZXJzZWN0aW9ucy9cbiAtIGh0dHA6Ly9pZGVvbmUuY29tL05vRWJWTVxuXG5UaGlzIEN1YmljUG9seSBjbGFzcyBjb3VsZCBiZSB1c2VkIGZvciByZXVzaW5nIHNvbWUgdmFyaWFibGVzIGFuZCBjYWxjdWxhdGlvbnMsXG5idXQgZm9yIHRocmVlLmpzIGN1cnZlIHVzZSwgaXQgY291bGQgYmUgcG9zc2libGUgaW5saW5lZCBhbmQgZmxhdHRlbiBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIGNhbGxcbndoaWNoIGNhbiBiZSBwbGFjZWQgaW4gQ3VydmVVdGlscy5cbiovXG5cbmZ1bmN0aW9uIEN1YmljUG9seSgpIHtcblxuXHRsZXQgYzAgPSAwLCBjMSA9IDAsIGMyID0gMCwgYzMgPSAwO1xuXG5cdC8qXG5cdCAqIENvbXB1dGUgY29lZmZpY2llbnRzIGZvciBhIGN1YmljIHBvbHlub21pYWxcblx0ICogICBwKHMpID0gYzAgKyBjMSpzICsgYzIqc14yICsgYzMqc14zXG5cdCAqIHN1Y2ggdGhhdFxuXHQgKiAgIHAoMCkgPSB4MCwgcCgxKSA9IHgxXG5cdCAqICBhbmRcblx0ICogICBwJygwKSA9IHQwLCBwJygxKSA9IHQxLlxuXHQgKi9cblx0ZnVuY3Rpb24gaW5pdCggeDAsIHgxLCB0MCwgdDEgKSB7XG5cblx0XHRjMCA9IHgwO1xuXHRcdGMxID0gdDA7XG5cdFx0YzIgPSAtIDMgKiB4MCArIDMgKiB4MSAtIDIgKiB0MCAtIHQxO1xuXHRcdGMzID0gMiAqIHgwIC0gMiAqIHgxICsgdDAgKyB0MTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGluaXRDYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCB0ZW5zaW9uICkge1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHRlbnNpb24gKiAoIHgyIC0geDAgKSwgdGVuc2lvbiAqICggeDMgLSB4MSApICk7XG5cblx0XHR9LFxuXG5cdFx0aW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCBkdDAsIGR0MSwgZHQyICkge1xuXG5cdFx0XHQvLyBjb21wdXRlIHRhbmdlbnRzIHdoZW4gcGFyYW1ldGVyaXplZCBpbiBbdDEsdDJdXG5cdFx0XHRsZXQgdDEgPSAoIHgxIC0geDAgKSAvIGR0MCAtICggeDIgLSB4MCApIC8gKCBkdDAgKyBkdDEgKSArICggeDIgLSB4MSApIC8gZHQxO1xuXHRcdFx0bGV0IHQyID0gKCB4MiAtIHgxICkgLyBkdDEgLSAoIHgzIC0geDEgKSAvICggZHQxICsgZHQyICkgKyAoIHgzIC0geDIgKSAvIGR0MjtcblxuXHRcdFx0Ly8gcmVzY2FsZSB0YW5nZW50cyBmb3IgcGFyYW1ldHJpemF0aW9uIGluIFswLDFdXG5cdFx0XHR0MSAqPSBkdDE7XG5cdFx0XHR0MiAqPSBkdDE7XG5cblx0XHRcdGluaXQoIHgxLCB4MiwgdDEsIHQyICk7XG5cblx0XHR9LFxuXG5cdFx0Y2FsYzogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0XHRjb25zdCB0MiA9IHQgKiB0O1xuXHRcdFx0Y29uc3QgdDMgPSB0MiAqIHQ7XG5cdFx0XHRyZXR1cm4gYzAgKyBjMSAqIHQgKyBjMiAqIHQyICsgYzMgKiB0MztcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8vXG5cbmNvbnN0IHRtcCA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBweCA9IG5ldyBDdWJpY1BvbHkoKSwgcHkgPSBuZXcgQ3ViaWNQb2x5KCksIHB6ID0gbmV3IEN1YmljUG9seSgpO1xuXG5jbGFzcyBDYXRtdWxsUm9tQ3VydmUzIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCBwb2ludHMgPSBbXSwgY2xvc2VkID0gZmFsc2UsIGN1cnZlVHlwZSA9ICdjZW50cmlwZXRhbCcsIHRlbnNpb24gPSAwLjUgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0NhdG11bGxSb21DdXJ2ZTMnO1xuXG5cdFx0dGhpcy5wb2ludHMgPSBwb2ludHM7XG5cdFx0dGhpcy5jbG9zZWQgPSBjbG9zZWQ7XG5cdFx0dGhpcy5jdXJ2ZVR5cGUgPSBjdXJ2ZVR5cGU7XG5cdFx0dGhpcy50ZW5zaW9uID0gdGVuc2lvbjtcblxuXHR9XG5cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcblx0XHRjb25zdCBsID0gcG9pbnRzLmxlbmd0aDtcblxuXHRcdGNvbnN0IHAgPSAoIGwgLSAoIHRoaXMuY2xvc2VkID8gMCA6IDEgKSApICogdDtcblx0XHRsZXQgaW50UG9pbnQgPSBNYXRoLmZsb29yKCBwICk7XG5cdFx0bGV0IHdlaWdodCA9IHAgLSBpbnRQb2ludDtcblxuXHRcdGlmICggdGhpcy5jbG9zZWQgKSB7XG5cblx0XHRcdGludFBvaW50ICs9IGludFBvaW50ID4gMCA/IDAgOiAoIE1hdGguZmxvb3IoIE1hdGguYWJzKCBpbnRQb2ludCApIC8gbCApICsgMSApICogbDtcblxuXHRcdH0gZWxzZSBpZiAoIHdlaWdodCA9PT0gMCAmJiBpbnRQb2ludCA9PT0gbCAtIDEgKSB7XG5cblx0XHRcdGludFBvaW50ID0gbCAtIDI7XG5cdFx0XHR3ZWlnaHQgPSAxO1xuXG5cdFx0fVxuXG5cdFx0bGV0IHAwLCBwMzsgLy8gNCBwb2ludHMgKHAxICYgcDIgZGVmaW5lZCBiZWxvdylcblxuXHRcdGlmICggdGhpcy5jbG9zZWQgfHwgaW50UG9pbnQgPiAwICkge1xuXG5cdFx0XHRwMCA9IHBvaW50c1sgKCBpbnRQb2ludCAtIDEgKSAlIGwgXTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGV4dHJhcG9sYXRlIGZpcnN0IHBvaW50XG5cdFx0XHR0bXAuc3ViVmVjdG9ycyggcG9pbnRzWyAwIF0sIHBvaW50c1sgMSBdICkuYWRkKCBwb2ludHNbIDAgXSApO1xuXHRcdFx0cDAgPSB0bXA7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwMSA9IHBvaW50c1sgaW50UG9pbnQgJSBsIF07XG5cdFx0Y29uc3QgcDIgPSBwb2ludHNbICggaW50UG9pbnQgKyAxICkgJSBsIF07XG5cblx0XHRpZiAoIHRoaXMuY2xvc2VkIHx8IGludFBvaW50ICsgMiA8IGwgKSB7XG5cblx0XHRcdHAzID0gcG9pbnRzWyAoIGludFBvaW50ICsgMiApICUgbCBdO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gZXh0cmFwb2xhdGUgbGFzdCBwb2ludFxuXHRcdFx0dG1wLnN1YlZlY3RvcnMoIHBvaW50c1sgbCAtIDEgXSwgcG9pbnRzWyBsIC0gMiBdICkuYWRkKCBwb2ludHNbIGwgLSAxIF0gKTtcblx0XHRcdHAzID0gdG1wO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2NlbnRyaXBldGFsJyB8fCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnICkge1xuXG5cdFx0XHQvLyBpbml0IENlbnRyaXBldGFsIC8gQ2hvcmRhbCBDYXRtdWxsLVJvbVxuXHRcdFx0Y29uc3QgcG93ID0gdGhpcy5jdXJ2ZVR5cGUgPT09ICdjaG9yZGFsJyA/IDAuNSA6IDAuMjU7XG5cdFx0XHRsZXQgZHQwID0gTWF0aC5wb3coIHAwLmRpc3RhbmNlVG9TcXVhcmVkKCBwMSApLCBwb3cgKTtcblx0XHRcdGxldCBkdDEgPSBNYXRoLnBvdyggcDEuZGlzdGFuY2VUb1NxdWFyZWQoIHAyICksIHBvdyApO1xuXHRcdFx0bGV0IGR0MiA9IE1hdGgucG93KCBwMi5kaXN0YW5jZVRvU3F1YXJlZCggcDMgKSwgcG93ICk7XG5cblx0XHRcdC8vIHNhZmV0eSBjaGVjayBmb3IgcmVwZWF0ZWQgcG9pbnRzXG5cdFx0XHRpZiAoIGR0MSA8IDFlLTQgKSBkdDEgPSAxLjA7XG5cdFx0XHRpZiAoIGR0MCA8IDFlLTQgKSBkdDAgPSBkdDE7XG5cdFx0XHRpZiAoIGR0MiA8IDFlLTQgKSBkdDIgPSBkdDE7XG5cblx0XHRcdHB4LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgZHQwLCBkdDEsIGR0MiApO1xuXHRcdFx0cHkuaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC55LCBwMS55LCBwMi55LCBwMy55LCBkdDAsIGR0MSwgZHQyICk7XG5cdFx0XHRwei5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLnosIHAxLnosIHAyLnosIHAzLnosIGR0MCwgZHQxLCBkdDIgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2F0bXVsbHJvbScgKSB7XG5cblx0XHRcdHB4LmluaXRDYXRtdWxsUm9tKCBwMC54LCBwMS54LCBwMi54LCBwMy54LCB0aGlzLnRlbnNpb24gKTtcblx0XHRcdHB5LmluaXRDYXRtdWxsUm9tKCBwMC55LCBwMS55LCBwMi55LCBwMy55LCB0aGlzLnRlbnNpb24gKTtcblx0XHRcdHB6LmluaXRDYXRtdWxsUm9tKCBwMC56LCBwMS56LCBwMi56LCBwMy56LCB0aGlzLnRlbnNpb24gKTtcblxuXHRcdH1cblxuXHRcdHBvaW50LnNldChcblx0XHRcdHB4LmNhbGMoIHdlaWdodCApLFxuXHRcdFx0cHkuY2FsYyggd2VpZ2h0ICksXG5cdFx0XHRwei5jYWxjKCB3ZWlnaHQgKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNvdXJjZS5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcG9pbnQgPSBzb3VyY2UucG9pbnRzWyBpIF07XG5cblx0XHRcdHRoaXMucG9pbnRzLnB1c2goIHBvaW50LmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2xvc2VkID0gc291cmNlLmNsb3NlZDtcblx0XHR0aGlzLmN1cnZlVHlwZSA9IHNvdXJjZS5jdXJ2ZVR5cGU7XG5cdFx0dGhpcy50ZW5zaW9uID0gc291cmNlLnRlbnNpb247XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5wb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcblx0XHRcdGRhdGEucG9pbnRzLnB1c2goIHBvaW50LnRvQXJyYXkoKSApO1xuXG5cdFx0fVxuXG5cdFx0ZGF0YS5jbG9zZWQgPSB0aGlzLmNsb3NlZDtcblx0XHRkYXRhLmN1cnZlVHlwZSA9IHRoaXMuY3VydmVUeXBlO1xuXHRcdGRhdGEudGVuc2lvbiA9IHRoaXMudGVuc2lvbjtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcG9pbnQgPSBqc29uLnBvaW50c1sgaSBdO1xuXHRcdFx0dGhpcy5wb2ludHMucHVzaCggbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHBvaW50ICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2xvc2VkID0ganNvbi5jbG9zZWQ7XG5cdFx0dGhpcy5jdXJ2ZVR5cGUgPSBqc29uLmN1cnZlVHlwZTtcblx0XHR0aGlzLnRlbnNpb24gPSBqc29uLnRlbnNpb247XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuaXNDYXRtdWxsUm9tQ3VydmUzID0gdHJ1ZTtcblxuLyoqXG4gKiBCZXppZXIgQ3VydmVzIGZvcm11bGFzIG9idGFpbmVkIGZyb21cbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0IlQzMlQTl6aWVyX2N1cnZlXG4gKi9cblxuZnVuY3Rpb24gQ2F0bXVsbFJvbSggdCwgcDAsIHAxLCBwMiwgcDMgKSB7XG5cblx0Y29uc3QgdjAgPSAoIHAyIC0gcDAgKSAqIDAuNTtcblx0Y29uc3QgdjEgPSAoIHAzIC0gcDEgKSAqIDAuNTtcblx0Y29uc3QgdDIgPSB0ICogdDtcblx0Y29uc3QgdDMgPSB0ICogdDI7XG5cdHJldHVybiAoIDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEgKSAqIHQzICsgKCAtIDMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxICkgKiB0MiArIHYwICogdCArIHAxO1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAwKCB0LCBwICkge1xuXG5cdGNvbnN0IGsgPSAxIC0gdDtcblx0cmV0dXJuIGsgKiBrICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMSggdCwgcCApIHtcblxuXHRyZXR1cm4gMiAqICggMSAtIHQgKSAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAyKCB0LCBwICkge1xuXG5cdHJldHVybiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyKCB0LCBwMCwgcDEsIHAyICkge1xuXG5cdHJldHVybiBRdWFkcmF0aWNCZXppZXJQMCggdCwgcDAgKSArIFF1YWRyYXRpY0JlemllclAxKCB0LCBwMSApICtcblx0XHRRdWFkcmF0aWNCZXppZXJQMiggdCwgcDIgKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBDdWJpY0JlemllclAwKCB0LCBwICkge1xuXG5cdGNvbnN0IGsgPSAxIC0gdDtcblx0cmV0dXJuIGsgKiBrICogayAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMSggdCwgcCApIHtcblxuXHRjb25zdCBrID0gMSAtIHQ7XG5cdHJldHVybiAzICogayAqIGsgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAyKCB0LCBwICkge1xuXG5cdHJldHVybiAzICogKCAxIC0gdCApICogdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDMoIHQsIHAgKSB7XG5cblx0cmV0dXJuIHQgKiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXIoIHQsIHAwLCBwMSwgcDIsIHAzICkge1xuXG5cdHJldHVybiBDdWJpY0JlemllclAwKCB0LCBwMCApICsgQ3ViaWNCZXppZXJQMSggdCwgcDEgKSArIEN1YmljQmV6aWVyUDIoIHQsIHAyICkgK1xuXHRcdEN1YmljQmV6aWVyUDMoIHQsIHAzICk7XG5cbn1cblxuY2xhc3MgQ3ViaWNCZXppZXJDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggdjAgPSBuZXcgVmVjdG9yMigpLCB2MSA9IG5ldyBWZWN0b3IyKCksIHYyID0gbmV3IFZlY3RvcjIoKSwgdjMgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlJztcblxuXHRcdHRoaXMudjAgPSB2MDtcblx0XHR0aGlzLnYxID0gdjE7XG5cdFx0dGhpcy52MiA9IHYyO1xuXHRcdHRoaXMudjMgPSB2MztcblxuXHR9XG5cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyLCB2MyA9IHRoaXMudjM7XG5cblx0XHRwb2ludC5zZXQoXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCwgdjMueCApLFxuXHRcdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnksIHYzLnkgKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cdFx0dGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cdFx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUgPSB0cnVlO1xuXG5jbGFzcyBDdWJpY0JlemllckN1cnZlMyBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggdjAgPSBuZXcgVmVjdG9yMygpLCB2MSA9IG5ldyBWZWN0b3IzKCksIHYyID0gbmV3IFZlY3RvcjMoKSwgdjMgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlMyc7XG5cblx0XHR0aGlzLnYwID0gdjA7XG5cdFx0dGhpcy52MSA9IHYxO1xuXHRcdHRoaXMudjIgPSB2Mjtcblx0XHR0aGlzLnYzID0gdjM7XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MiwgdjMgPSB0aGlzLnYzO1xuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0Q3ViaWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLngsIHYzLnggKSxcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55LCB2My55ICksXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueiwgdjEueiwgdjIueiwgdjMueiApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblx0XHR0aGlzLnYzLmNvcHkoIHNvdXJjZS52MyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXHRcdGRhdGEudjMgPSB0aGlzLnYzLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblx0XHR0aGlzLnYzLmZyb21BcnJheSgganNvbi52MyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuY2xhc3MgTGluZUN1cnZlIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCB2MSA9IG5ldyBWZWN0b3IyKCksIHYyID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlJztcblxuXHRcdHRoaXMudjEgPSB2MTtcblx0XHR0aGlzLnYyID0gdjI7XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XG5cdFx0XHRwb2ludC5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy52MSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHQvLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcblx0Z2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0Z2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0YW5nZW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHRcdHRhbmdlbnQuY29weSggdGhpcy52MiApLnN1YiggdGhpcy52MSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRhbmdlbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuaXNMaW5lQ3VydmUgPSB0cnVlO1xuXG5jbGFzcyBMaW5lQ3VydmUzIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCB2MSA9IG5ldyBWZWN0b3IzKCksIHYyID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlMyc7XG5cdFx0dGhpcy5pc0xpbmVDdXJ2ZTMgPSB0cnVlO1xuXG5cdFx0dGhpcy52MSA9IHYxO1xuXHRcdHRoaXMudjIgPSB2MjtcblxuXHR9XG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XG5cdFx0XHRwb2ludC5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy52MSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblx0Ly8gTGluZSBjdXJ2ZSBpcyBsaW5lYXIsIHNvIHdlIGNhbiBvdmVyd3JpdGUgZGVmYXVsdCBnZXRQb2ludEF0XG5cdGdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIFF1YWRyYXRpY0JlemllckN1cnZlIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCB2MCA9IG5ldyBWZWN0b3IyKCksIHYxID0gbmV3IFZlY3RvcjIoKSwgdjIgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZSc7XG5cblx0XHR0aGlzLnYwID0gdjA7XG5cdFx0dGhpcy52MSA9IHYxO1xuXHRcdHRoaXMudjIgPSB2MjtcblxuXHR9XG5cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXG5cdFx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmlzUXVhZHJhdGljQmV6aWVyQ3VydmUgPSB0cnVlO1xuXG5jbGFzcyBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjMoKSwgdjEgPSBuZXcgVmVjdG9yMygpLCB2MiA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1F1YWRyYXRpY0JlemllckN1cnZlMyc7XG5cblx0XHR0aGlzLnYwID0gdjA7XG5cdFx0dGhpcy52MSA9IHYxO1xuXHRcdHRoaXMudjIgPSB2MjtcblxuXHR9XG5cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXG5cdFx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKSxcblx0XHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueiwgdjEueiwgdjIueiApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmlzUXVhZHJhdGljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuY2xhc3MgU3BsaW5lQ3VydmUgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFtdICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdTcGxpbmVDdXJ2ZSc7XG5cblx0XHR0aGlzLnBvaW50cyA9IHBvaW50cztcblxuXHR9XG5cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcblx0XHRjb25zdCBwID0gKCBwb2ludHMubGVuZ3RoIC0gMSApICogdDtcblxuXHRcdGNvbnN0IGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHRcdGNvbnN0IHdlaWdodCA9IHAgLSBpbnRQb2ludDtcblxuXHRcdGNvbnN0IHAwID0gcG9pbnRzWyBpbnRQb2ludCA9PT0gMCA/IGludFBvaW50IDogaW50UG9pbnQgLSAxIF07XG5cdFx0Y29uc3QgcDEgPSBwb2ludHNbIGludFBvaW50IF07XG5cdFx0Y29uc3QgcDIgPSBwb2ludHNbIGludFBvaW50ID4gcG9pbnRzLmxlbmd0aCAtIDIgPyBwb2ludHMubGVuZ3RoIC0gMSA6IGludFBvaW50ICsgMSBdO1xuXHRcdGNvbnN0IHAzID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAzID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDIgXTtcblxuXHRcdHBvaW50LnNldChcblx0XHRcdENhdG11bGxSb20oIHdlaWdodCwgcDAueCwgcDEueCwgcDIueCwgcDMueCApLFxuXHRcdFx0Q2F0bXVsbFJvbSggd2VpZ2h0LCBwMC55LCBwMS55LCBwMi55LCBwMy55IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5wb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcblx0XHRcdGRhdGEucG9pbnRzLnB1c2goIHBvaW50LnRvQXJyYXkoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggcG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5pc1NwbGluZUN1cnZlID0gdHJ1ZTtcblxudmFyIEN1cnZlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRBcmNDdXJ2ZTogQXJjQ3VydmUsXG5cdENhdG11bGxSb21DdXJ2ZTM6IENhdG11bGxSb21DdXJ2ZTMsXG5cdEN1YmljQmV6aWVyQ3VydmU6IEN1YmljQmV6aWVyQ3VydmUsXG5cdEN1YmljQmV6aWVyQ3VydmUzOiBDdWJpY0JlemllckN1cnZlMyxcblx0RWxsaXBzZUN1cnZlOiBFbGxpcHNlQ3VydmUsXG5cdExpbmVDdXJ2ZTogTGluZUN1cnZlLFxuXHRMaW5lQ3VydmUzOiBMaW5lQ3VydmUzLFxuXHRRdWFkcmF0aWNCZXppZXJDdXJ2ZTogUXVhZHJhdGljQmV6aWVyQ3VydmUsXG5cdFF1YWRyYXRpY0JlemllckN1cnZlMzogUXVhZHJhdGljQmV6aWVyQ3VydmUzLFxuXHRTcGxpbmVDdXJ2ZTogU3BsaW5lQ3VydmVcbn0pO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXHRDdXJ2ZWQgUGF0aCAtIGEgY3VydmUgcGF0aCBpcyBzaW1wbHkgYSBhcnJheSBvZiBjb25uZWN0ZWRcbiAqICBjdXJ2ZXMsIGJ1dCByZXRhaW5zIHRoZSBhcGkgb2YgYSBjdXJ2ZVxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jbGFzcyBDdXJ2ZVBhdGggZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0N1cnZlUGF0aCc7XG5cblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xuXHRcdHRoaXMuYXV0b0Nsb3NlID0gZmFsc2U7IC8vIEF1dG9tYXRpY2FsbHkgY2xvc2VzIHRoZSBwYXRoXG5cblx0fVxuXG5cdGFkZCggY3VydmUgKSB7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdH1cblxuXHRjbG9zZVBhdGgoKSB7XG5cblx0XHQvLyBBZGQgYSBsaW5lIGN1cnZlIGlmIHN0YXJ0IGFuZCBlbmQgb2YgbGluZXMgYXJlIG5vdCBjb25uZWN0ZWRcblx0XHRjb25zdCBzdGFydFBvaW50ID0gdGhpcy5jdXJ2ZXNbIDAgXS5nZXRQb2ludCggMCApO1xuXHRcdGNvbnN0IGVuZFBvaW50ID0gdGhpcy5jdXJ2ZXNbIHRoaXMuY3VydmVzLmxlbmd0aCAtIDEgXS5nZXRQb2ludCggMSApO1xuXG5cdFx0aWYgKCAhIHN0YXJ0UG9pbnQuZXF1YWxzKCBlbmRQb2ludCApICkge1xuXG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKCBuZXcgTGluZUN1cnZlKCBlbmRQb2ludCwgc3RhcnRQb2ludCApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIFRvIGdldCBhY2N1cmF0ZSBwb2ludCB3aXRoIHJlZmVyZW5jZSB0b1xuXHQvLyBlbnRpcmUgcGF0aCBkaXN0YW5jZSBhdCB0aW1lIHQsXG5cdC8vIGZvbGxvd2luZyBoYXMgdG8gYmUgZG9uZTpcblxuXHQvLyAxLiBMZW5ndGggb2YgZWFjaCBzdWIgcGF0aCBoYXZlIHRvIGJlIGtub3duXG5cdC8vIDIuIExvY2F0ZSBhbmQgaWRlbnRpZnkgdHlwZSBvZiBjdXJ2ZVxuXHQvLyAzLiBHZXQgdCBmb3IgdGhlIGN1cnZlXG5cdC8vIDQuIFJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KHQnKVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IGQgPSB0ICogdGhpcy5nZXRMZW5ndGgoKTtcblx0XHRjb25zdCBjdXJ2ZUxlbmd0aHMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXHRcdGxldCBpID0gMDtcblxuXHRcdC8vIFRvIHRoaW5rIGFib3V0IGJvdW5kYXJpZXMgcG9pbnRzLlxuXG5cdFx0d2hpbGUgKCBpIDwgY3VydmVMZW5ndGhzLmxlbmd0aCApIHtcblxuXHRcdFx0aWYgKCBjdXJ2ZUxlbmd0aHNbIGkgXSA+PSBkICkge1xuXG5cdFx0XHRcdGNvbnN0IGRpZmYgPSBjdXJ2ZUxlbmd0aHNbIGkgXSAtIGQ7XG5cdFx0XHRcdGNvbnN0IGN1cnZlID0gdGhpcy5jdXJ2ZXNbIGkgXTtcblxuXHRcdFx0XHRjb25zdCBzZWdtZW50TGVuZ3RoID0gY3VydmUuZ2V0TGVuZ3RoKCk7XG5cdFx0XHRcdGNvbnN0IHUgPSBzZWdtZW50TGVuZ3RoID09PSAwID8gMCA6IDEgLSBkaWZmIC8gc2VnbWVudExlbmd0aDtcblxuXHRcdFx0XHRyZXR1cm4gY3VydmUuZ2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpICsrO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0XHQvLyBsb29wIHdoZXJlIHN1bSAhPSAwLCBzdW0gPiBkICwgc3VtKzEgPGRcblxuXHR9XG5cblx0Ly8gV2UgY2Fubm90IHVzZSB0aGUgZGVmYXVsdCBUSFJFRS5DdXJ2ZSBnZXRQb2ludCgpIHdpdGggZ2V0TGVuZ3RoKCkgYmVjYXVzZSBpblxuXHQvLyBUSFJFRS5DdXJ2ZSwgZ2V0TGVuZ3RoKCkgZGVwZW5kcyBvbiBnZXRQb2ludCgpIGJ1dCBpbiBUSFJFRS5DdXJ2ZVBhdGhcblx0Ly8gZ2V0UG9pbnQoKSBkZXBlbmRzIG9uIGdldExlbmd0aFxuXG5cdGdldExlbmd0aCgpIHtcblxuXHRcdGNvbnN0IGxlbnMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXHRcdHJldHVybiBsZW5zWyBsZW5zLmxlbmd0aCAtIDEgXTtcblxuXHR9XG5cblx0Ly8gY2FjaGVMZW5ndGhzIG11c3QgYmUgcmVjYWxjdWxhdGVkLlxuXHR1cGRhdGVBcmNMZW5ndGhzKCkge1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5jYWNoZUxlbmd0aHMgPSBudWxsO1xuXHRcdHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XG5cblx0fVxuXG5cdC8vIENvbXB1dGUgbGVuZ3RocyBhbmQgY2FjaGUgdGhlbVxuXHQvLyBXZSBjYW5ub3Qgb3ZlcndyaXRlIGdldExlbmd0aHMoKSBiZWNhdXNlIFV0b1QgbWFwcGluZyB1c2VzIGl0LlxuXG5cdGdldEN1cnZlTGVuZ3RocygpIHtcblxuXHRcdC8vIFdlIHVzZSBjYWNoZSB2YWx1ZXMgaWYgY3VydmVzIGFuZCBjYWNoZSBhcnJheSBhcmUgc2FtZSBsZW5ndGhcblxuXHRcdGlmICggdGhpcy5jYWNoZUxlbmd0aHMgJiYgdGhpcy5jYWNoZUxlbmd0aHMubGVuZ3RoID09PSB0aGlzLmN1cnZlcy5sZW5ndGggKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNhY2hlTGVuZ3RocztcblxuXHRcdH1cblxuXHRcdC8vIEdldCBsZW5ndGggb2Ygc3ViLWN1cnZlXG5cdFx0Ly8gUHVzaCBzdW1zIGludG8gY2FjaGVkIGFycmF5XG5cblx0XHRjb25zdCBsZW5ndGhzID0gW107XG5cdFx0bGV0IHN1bXMgPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0c3VtcyArPSB0aGlzLmN1cnZlc1sgaSBdLmdldExlbmd0aCgpO1xuXHRcdFx0bGVuZ3Rocy5wdXNoKCBzdW1zICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlTGVuZ3RocyA9IGxlbmd0aHM7XG5cblx0XHRyZXR1cm4gbGVuZ3RocztcblxuXHR9XG5cblx0Z2V0U3BhY2VkUG9pbnRzKCBkaXZpc2lvbnMgPSA0MCApIHtcblxuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IGRpdmlzaW9uczsgaSArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnQoIGkgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmF1dG9DbG9zZSApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHBvaW50c1sgMCBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH1cblxuXHRnZXRQb2ludHMoIGRpdmlzaW9ucyA9IDEyICkge1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XG5cdFx0bGV0IGxhc3Q7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGN1cnZlcyA9IHRoaXMuY3VydmVzOyBpIDwgY3VydmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgY3VydmUgPSBjdXJ2ZXNbIGkgXTtcblx0XHRcdGNvbnN0IHJlc29sdXRpb24gPSBjdXJ2ZS5pc0VsbGlwc2VDdXJ2ZSA/IGRpdmlzaW9ucyAqIDJcblx0XHRcdFx0OiAoIGN1cnZlLmlzTGluZUN1cnZlIHx8IGN1cnZlLmlzTGluZUN1cnZlMyApID8gMVxuXHRcdFx0XHRcdDogY3VydmUuaXNTcGxpbmVDdXJ2ZSA/IGRpdmlzaW9ucyAqIGN1cnZlLnBvaW50cy5sZW5ndGhcblx0XHRcdFx0XHRcdDogZGl2aXNpb25zO1xuXG5cdFx0XHRjb25zdCBwdHMgPSBjdXJ2ZS5nZXRQb2ludHMoIHJlc29sdXRpb24gKTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgcHRzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCBwb2ludCA9IHB0c1sgaiBdO1xuXG5cdFx0XHRcdGlmICggbGFzdCAmJiBsYXN0LmVxdWFscyggcG9pbnQgKSApIGNvbnRpbnVlOyAvLyBlbnN1cmVzIG5vIGNvbnNlY3V0aXZlIHBvaW50cyBhcmUgZHVwbGljYXRlc1xuXG5cdFx0XHRcdHBvaW50cy5wdXNoKCBwb2ludCApO1xuXHRcdFx0XHRsYXN0ID0gcG9pbnQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hdXRvQ2xvc2UgJiYgcG9pbnRzLmxlbmd0aCA+IDEgJiYgISBwb2ludHNbIHBvaW50cy5sZW5ndGggLSAxIF0uZXF1YWxzKCBwb2ludHNbIDAgXSApICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggcG9pbnRzWyAwIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNvdXJjZS5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgY3VydmUgPSBzb3VyY2UuY3VydmVzWyBpIF07XG5cblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYXV0b0Nsb3NlID0gc291cmNlLmF1dG9DbG9zZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLmF1dG9DbG9zZSA9IHRoaXMuYXV0b0Nsb3NlO1xuXHRcdGRhdGEuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07XG5cdFx0XHRkYXRhLmN1cnZlcy5wdXNoKCBjdXJ2ZS50b0pTT04oKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMuYXV0b0Nsb3NlID0ganNvbi5hdXRvQ2xvc2U7XG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24uY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGN1cnZlID0ganNvbi5jdXJ2ZXNbIGkgXTtcblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIG5ldyBDdXJ2ZXNbIGN1cnZlLnR5cGUgXSgpLmZyb21KU09OKCBjdXJ2ZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuY2xhc3MgUGF0aCBleHRlbmRzIEN1cnZlUGF0aCB7XG5cblx0Y29uc3RydWN0b3IoIHBvaW50cyApIHtcblxuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy50eXBlID0gJ1BhdGgnO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0aWYgKCBwb2ludHMgKSB7XG5cblx0XHRcdHRoaXMuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldEZyb21Qb2ludHMoIHBvaW50cyApIHtcblxuXHRcdHRoaXMubW92ZVRvKCBwb2ludHNbIDAgXS54LCBwb2ludHNbIDAgXS55ICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5saW5lVG8oIHBvaW50c1sgaSBdLngsIHBvaW50c1sgaSBdLnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtb3ZlVG8oIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIHgsIHkgKTsgLy8gVE9ETyBjb25zaWRlciByZWZlcmVuY2luZyB2ZWN0b3JzIGluc3RlYWQgb2YgY29weWluZz9cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsaW5lVG8oIHgsIHkgKSB7XG5cblx0XHRjb25zdCBjdXJ2ZSA9IG5ldyBMaW5lQ3VydmUoIHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksIG5ldyBWZWN0b3IyKCB4LCB5ICkgKTtcblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCB4LCB5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgUXVhZHJhdGljQmV6aWVyQ3VydmUoXG5cdFx0XHR0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUHgsIGFDUHkgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhWCwgYVkgKVxuXHRcdCk7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCBhWCwgYVkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRiZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgQ3ViaWNCZXppZXJDdXJ2ZShcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMXgsIGFDUDF5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMngsIGFDUDJ5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcblx0XHQpO1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3BsaW5lVGhydSggcHRzIC8qQXJyYXkgb2YgVmVjdG9yKi8gKSB7XG5cblx0XHRjb25zdCBucHRzID0gWyB0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpIF0uY29uY2F0KCBwdHMgKTtcblxuXHRcdGNvbnN0IGN1cnZlID0gbmV3IFNwbGluZUN1cnZlKCBucHRzICk7XG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIHB0c1sgcHRzLmxlbmd0aCAtIDEgXSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFyYyggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdFx0Y29uc3QgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xuXHRcdGNvbnN0IHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTtcblxuXHRcdHRoaXMuYWJzYXJjKCBhWCArIHgwLCBhWSArIHkwLCBhUmFkaXVzLFxuXHRcdFx0YVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFic2FyYyggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdFx0dGhpcy5hYnNlbGxpcHNlKCBhWCwgYVksIGFSYWRpdXMsIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlbGxpcHNlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApIHtcblxuXHRcdGNvbnN0IHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDtcblx0XHRjb25zdCB5MCA9IHRoaXMuY3VycmVudFBvaW50Lnk7XG5cblx0XHR0aGlzLmFic2VsbGlwc2UoIGFYICsgeDAsIGFZICsgeTAsIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFic2VsbGlwc2UoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgRWxsaXBzZUN1cnZlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdFx0aWYgKCB0aGlzLmN1cnZlcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHQvLyBpZiBhIHByZXZpb3VzIGN1cnZlIGlzIHByZXNlbnQsIGF0dGVtcHQgdG8gam9pblxuXHRcdFx0Y29uc3QgZmlyc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAwICk7XG5cblx0XHRcdGlmICggISBmaXJzdFBvaW50LmVxdWFscyggdGhpcy5jdXJyZW50UG9pbnQgKSApIHtcblxuXHRcdFx0XHR0aGlzLmxpbmVUbyggZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdGNvbnN0IGxhc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAxICk7XG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggbGFzdFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBzb3VyY2UuY3VycmVudFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5jdXJyZW50UG9pbnQgPSB0aGlzLmN1cnJlbnRQb2ludC50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuZnJvbUFycmF5KCBqc29uLmN1cnJlbnRQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIExhdGhlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFsgbmV3IFZlY3RvcjIoIDAsIDAuNSApLCBuZXcgVmVjdG9yMiggMC41LCAwICksIG5ldyBWZWN0b3IyKCAwLCAtIDAuNSApIF0sIHNlZ21lbnRzID0gMTIsIHBoaVN0YXJ0ID0gMCwgcGhpTGVuZ3RoID0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xhdGhlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cG9pbnRzOiBwb2ludHMsXG5cdFx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0XHRwaGlTdGFydDogcGhpU3RhcnQsXG5cdFx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aFxuXHRcdH07XG5cblx0XHRzZWdtZW50cyA9IE1hdGguZmxvb3IoIHNlZ21lbnRzICk7XG5cblx0XHQvLyBjbGFtcCBwaGlMZW5ndGggc28gaXQncyBpbiByYW5nZSBvZiBbIDAsIDJQSSBdXG5cblx0XHRwaGlMZW5ndGggPSBjbGFtcCggcGhpTGVuZ3RoLCAwLCBNYXRoLlBJICogMiApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cdFx0Y29uc3QgaW5pdE5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCBpbnZlcnNlU2VnbWVudHMgPSAxLjAgLyBzZWdtZW50cztcblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IGN1ck5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgcHJldk5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0bGV0IGR4ID0gMDtcblx0XHRsZXQgZHkgPSAwO1xuXG5cdFx0Ly8gcHJlLWNvbXB1dGUgbm9ybWFscyBmb3IgaW5pdGlhbCBcIm1lcmlkaWFuXCJcblxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdHN3aXRjaCAoIGogKSB7XG5cblx0XHRcdFx0Y2FzZSAwOlx0XHRcdFx0Ly8gc3BlY2lhbCBoYW5kbGluZyBmb3IgMXN0IHZlcnRleCBvbiBwYXRoXG5cblx0XHRcdFx0XHRkeCA9IHBvaW50c1sgaiArIDEgXS54IC0gcG9pbnRzWyBqIF0ueDtcblx0XHRcdFx0XHRkeSA9IHBvaW50c1sgaiArIDEgXS55IC0gcG9pbnRzWyBqIF0ueTtcblxuXHRcdFx0XHRcdG5vcm1hbC54ID0gZHkgKiAxLjA7XG5cdFx0XHRcdFx0bm9ybWFsLnkgPSAtIGR4O1xuXHRcdFx0XHRcdG5vcm1hbC56ID0gZHkgKiAwLjA7XG5cblx0XHRcdFx0XHRwcmV2Tm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXG5cdFx0XHRcdFx0bm9ybWFsLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdFx0aW5pdE5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAoIHBvaW50cy5sZW5ndGggLSAxICk6XHQvLyBzcGVjaWFsIGhhbmRsaW5nIGZvciBsYXN0IFZlcnRleCBvbiBwYXRoXG5cblx0XHRcdFx0XHRpbml0Tm9ybWFscy5wdXNoKCBwcmV2Tm9ybWFsLngsIHByZXZOb3JtYWwueSwgcHJldk5vcm1hbC56ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0Olx0XHRcdC8vIGRlZmF1bHQgaGFuZGxpbmcgZm9yIGFsbCB2ZXJ0aWNlcyBpbiBiZXR3ZWVuXG5cblx0XHRcdFx0XHRkeCA9IHBvaW50c1sgaiArIDEgXS54IC0gcG9pbnRzWyBqIF0ueDtcblx0XHRcdFx0XHRkeSA9IHBvaW50c1sgaiArIDEgXS55IC0gcG9pbnRzWyBqIF0ueTtcblxuXHRcdFx0XHRcdG5vcm1hbC54ID0gZHkgKiAxLjA7XG5cdFx0XHRcdFx0bm9ybWFsLnkgPSAtIGR4O1xuXHRcdFx0XHRcdG5vcm1hbC56ID0gZHkgKiAwLjA7XG5cblx0XHRcdFx0XHRjdXJOb3JtYWwuY29weSggbm9ybWFsICk7XG5cblx0XHRcdFx0XHRub3JtYWwueCArPSBwcmV2Tm9ybWFsLng7XG5cdFx0XHRcdFx0bm9ybWFsLnkgKz0gcHJldk5vcm1hbC55O1xuXHRcdFx0XHRcdG5vcm1hbC56ICs9IHByZXZOb3JtYWwuejtcblxuXHRcdFx0XHRcdG5vcm1hbC5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRcdGluaXROb3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHRcdHByZXZOb3JtYWwuY29weSggY3VyTm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCB1dnMgYW5kIG5vcm1hbHNcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcGhpID0gcGhpU3RhcnQgKyBpICogaW52ZXJzZVNlZ21lbnRzICogcGhpTGVuZ3RoO1xuXG5cdFx0XHRjb25zdCBzaW4gPSBNYXRoLnNpbiggcGhpICk7XG5cdFx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcyggcGhpICk7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSBwb2ludHNbIGogXS54ICogc2luO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHBvaW50c1sgaiBdLnk7XG5cdFx0XHRcdHZlcnRleC56ID0gcG9pbnRzWyBqIF0ueCAqIGNvcztcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1di54ID0gaSAvIHNlZ21lbnRzO1xuXHRcdFx0XHR1di55ID0gaiAvICggcG9pbnRzLmxlbmd0aCAtIDEgKTtcblxuXHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdGNvbnN0IHggPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAwIF0gKiBzaW47XG5cdFx0XHRcdGNvbnN0IHkgPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAxIF07XG5cdFx0XHRcdGNvbnN0IHogPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAwIF0gKiBjb3M7XG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCB4LCB5LCB6ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmFzZSA9IGogKyBpICogcG9pbnRzLmxlbmd0aDtcblxuXHRcdFx0XHRjb25zdCBhID0gYmFzZTtcblx0XHRcdFx0Y29uc3QgYiA9IGJhc2UgKyBwb2ludHMubGVuZ3RoO1xuXHRcdFx0XHRjb25zdCBjID0gYmFzZSArIHBvaW50cy5sZW5ndGggKyAxO1xuXHRcdFx0XHRjb25zdCBkID0gYmFzZSArIDE7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBjLCBkLCBiICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IExhdGhlR2VvbWV0cnkoIGRhdGEucG9pbnRzLCBkYXRhLnNlZ21lbnRzLCBkYXRhLnBoaVN0YXJ0LCBkYXRhLnBoaUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBDYXBzdWxlR2VvbWV0cnkgZXh0ZW5kcyBMYXRoZUdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgbGVuZ3RoID0gMSwgY2FwU2VnbWVudHMgPSA0LCByYWRpYWxTZWdtZW50cyA9IDggKSB7XG5cblx0XHRjb25zdCBwYXRoID0gbmV3IFBhdGgoKTtcblx0XHRwYXRoLmFic2FyYyggMCwgLSBsZW5ndGggLyAyLCByYWRpdXMsIE1hdGguUEkgKiAxLjUsIDAgKTtcblx0XHRwYXRoLmFic2FyYyggMCwgbGVuZ3RoIC8gMiwgcmFkaXVzLCAwLCBNYXRoLlBJICogMC41ICk7XG5cblx0XHRzdXBlciggcGF0aC5nZXRQb2ludHMoIGNhcFNlZ21lbnRzICksIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2Fwc3VsZUdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0aGVpZ2h0OiBsZW5ndGgsXG5cdFx0XHRjYXBTZWdtZW50czogY2FwU2VnbWVudHMsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0fTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDYXBzdWxlR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmxlbmd0aCwgZGF0YS5jYXBTZWdtZW50cywgZGF0YS5yYWRpYWxTZWdtZW50cyApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBDaXJjbGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgc2VnbWVudHMgPSA4LCB0aGV0YVN0YXJ0ID0gMCwgdGhldGFMZW5ndGggPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2lyY2xlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHNlZ21lbnRzID0gTWF0aC5tYXgoIDMsIHNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdC8vIGNlbnRlciBwb2ludFxuXG5cdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXHRcdHV2cy5wdXNoKCAwLjUsIDAuNSApO1xuXG5cdFx0Zm9yICggbGV0IHMgPSAwLCBpID0gMzsgcyA8PSBzZWdtZW50czsgcyArKywgaSArPSAzICkge1xuXG5cdFx0XHRjb25zdCBzZWdtZW50ID0gdGhldGFTdGFydCArIHMgLyBzZWdtZW50cyAqIHRoZXRhTGVuZ3RoO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBNYXRoLmNvcyggc2VnbWVudCApO1xuXHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbiggc2VnbWVudCApO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblxuXHRcdFx0Ly8gdXZzXG5cblx0XHRcdHV2LnggPSAoIHZlcnRpY2VzWyBpIF0gLyByYWRpdXMgKyAxICkgLyAyO1xuXHRcdFx0dXYueSA9ICggdmVydGljZXNbIGkgKyAxIF0gLyByYWRpdXMgKyAxICkgLyAyO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCAwICk7XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDaXJjbGVHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEuc2VnbWVudHMsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBDeWxpbmRlckdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXNUb3AgPSAxLCByYWRpdXNCb3R0b20gPSAxLCBoZWlnaHQgPSAxLCByYWRpYWxTZWdtZW50cyA9IDgsIGhlaWdodFNlZ21lbnRzID0gMSwgb3BlbkVuZGVkID0gZmFsc2UsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKiAyICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXNUb3A6IHJhZGl1c1RvcCxcblx0XHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcblx0XHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApO1xuXHRcdGhlaWdodFNlZ21lbnRzID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGxldCBpbmRleCA9IDA7XG5cdFx0Y29uc3QgaW5kZXhBcnJheSA9IFtdO1xuXHRcdGNvbnN0IGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuXHRcdGxldCBncm91cFN0YXJ0ID0gMDtcblxuXHRcdC8vIGdlbmVyYXRlIGdlb21ldHJ5XG5cblx0XHRnZW5lcmF0ZVRvcnNvKCk7XG5cblx0XHRpZiAoIG9wZW5FbmRlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGlmICggcmFkaXVzVG9wID4gMCApIGdlbmVyYXRlQ2FwKCB0cnVlICk7XG5cdFx0XHRpZiAoIHJhZGl1c0JvdHRvbSA+IDAgKSBnZW5lcmF0ZUNhcCggZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVUb3JzbygpIHtcblxuXHRcdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGxldCBncm91cENvdW50ID0gMDtcblxuXHRcdFx0Ly8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBub3JtYWxcblx0XHRcdGNvbnN0IHNsb3BlID0gKCByYWRpdXNCb3R0b20gLSByYWRpdXNUb3AgKSAvIGhlaWdodDtcblxuXHRcdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0XHRmb3IgKCBsZXQgeSA9IDA7IHkgPD0gaGVpZ2h0U2VnbWVudHM7IHkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5kZXhSb3cgPSBbXTtcblxuXHRcdFx0XHRjb25zdCB2ID0geSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgcmFkaXVzIG9mIHRoZSBjdXJyZW50IHJvd1xuXG5cdFx0XHRcdGNvbnN0IHJhZGl1cyA9IHYgKiAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApICsgcmFkaXVzVG9wO1xuXG5cdFx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0XHRjb25zdCB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7XG5cblx0XHRcdFx0XHRjb25zdCBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xuXHRcdFx0XHRcdGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogc2luVGhldGE7XG5cdFx0XHRcdFx0dmVydGV4LnkgPSAtIHYgKiBoZWlnaHQgKyBoYWxmSGVpZ2h0O1xuXHRcdFx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7XG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0XHRub3JtYWwuc2V0KCBzaW5UaGV0YSwgc2xvcGUsIGNvc1RoZXRhICkubm9ybWFsaXplKCk7XG5cdFx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdFx0dXZzLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHRcdFx0XHQvLyBzYXZlIGluZGV4IG9mIHZlcnRleCBpbiByZXNwZWN0aXZlIHJvd1xuXG5cdFx0XHRcdFx0aW5kZXhSb3cucHVzaCggaW5kZXggKysgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbm93IHNhdmUgdmVydGljZXMgb2YgdGhlIHJvdyBpbiBvdXIgaW5kZXggYXJyYXlcblxuXHRcdFx0XHRpbmRleEFycmF5LnB1c2goIGluZGV4Um93ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPCByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgeSA9IDA7IHkgPCBoZWlnaHRTZWdtZW50czsgeSArKyApIHtcblxuXHRcdFx0XHRcdC8vIHdlIHVzZSB0aGUgaW5kZXggYXJyYXkgdG8gYWNjZXNzIHRoZSBjb3JyZWN0IGluZGljZXNcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleEFycmF5WyB5IF1bIHggXTtcblx0XHRcdFx0XHRjb25zdCBiID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCBdO1xuXHRcdFx0XHRcdGNvbnN0IGMgPSBpbmRleEFycmF5WyB5ICsgMSBdWyB4ICsgMSBdO1xuXHRcdFx0XHRcdGNvbnN0IGQgPSBpbmRleEFycmF5WyB5IF1bIHggKyAxIF07XG5cblx0XHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdFx0XHQvLyB1cGRhdGUgZ3JvdXAgY291bnRlclxuXG5cdFx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgMCApO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcblxuXHRcdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVDYXAoIHRvcCApIHtcblxuXHRcdFx0Ly8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGNlbnRlciB2ZXJ0ZXhcblx0XHRcdGNvbnN0IGNlbnRlckluZGV4U3RhcnQgPSBpbmRleDtcblxuXHRcdFx0Y29uc3QgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHRcdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0bGV0IGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0XHRjb25zdCByYWRpdXMgPSAoIHRvcCA9PT0gdHJ1ZSApID8gcmFkaXVzVG9wIDogcmFkaXVzQm90dG9tO1xuXHRcdFx0Y29uc3Qgc2lnbiA9ICggdG9wID09PSB0cnVlICkgPyAxIDogLSAxO1xuXG5cdFx0XHQvLyBmaXJzdCB3ZSBnZW5lcmF0ZSB0aGUgY2VudGVyIHZlcnRleCBkYXRhIG9mIHRoZSBjYXAuXG5cdFx0XHQvLyBiZWNhdXNlIHRoZSBnZW9tZXRyeSBuZWVkcyBvbmUgc2V0IG9mIHV2cyBwZXIgZmFjZSxcblx0XHRcdC8vIHdlIG11c3QgZ2VuZXJhdGUgYSBjZW50ZXIgdmVydGV4IHBlciBmYWNlL3NlZ21lbnRcblxuXHRcdFx0Zm9yICggbGV0IHggPSAxOyB4IDw9IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIGhhbGZIZWlnaHQgKiBzaWduLCAwICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCAwLCBzaWduLCAwICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggMC41LCAwLjUgKTtcblxuXHRcdFx0XHQvLyBpbmNyZWFzZSBpbmRleFxuXG5cdFx0XHRcdGluZGV4ICsrO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHNhdmUgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGNlbnRlciB2ZXJ0ZXhcblx0XHRcdGNvbnN0IGNlbnRlckluZGV4RW5kID0gaW5kZXg7XG5cblx0XHRcdC8vIG5vdyB3ZSBnZW5lcmF0ZSB0aGUgc3Vycm91bmRpbmcgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdSA9IHggLyByYWRpYWxTZWdtZW50cztcblx0XHRcdFx0Y29uc3QgdGhldGEgPSB1ICogdGhldGFMZW5ndGggKyB0aGV0YVN0YXJ0O1xuXG5cdFx0XHRcdGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cdFx0XHRcdGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBzaW5UaGV0YTtcblx0XHRcdFx0dmVydGV4LnkgPSBoYWxmSGVpZ2h0ICogc2lnbjtcblx0XHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgc2lnbiwgMCApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXYueCA9ICggY29zVGhldGEgKiAwLjUgKSArIDAuNTtcblx0XHRcdFx0dXYueSA9ICggc2luVGhldGEgKiAwLjUgKiBzaWduICkgKyAwLjU7XG5cdFx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0XHRcdFx0Ly8gaW5jcmVhc2UgaW5kZXhcblxuXHRcdFx0XHRpbmRleCArKztcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGMgPSBjZW50ZXJJbmRleFN0YXJ0ICsgeDtcblx0XHRcdFx0Y29uc3QgaSA9IGNlbnRlckluZGV4RW5kICsgeDtcblxuXHRcdFx0XHRpZiAoIHRvcCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIGZhY2UgdG9wXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCBjICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGZhY2UgYm90dG9tXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGkgKyAxLCBpLCBjICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdyb3VwQ291bnQgKz0gMztcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgdG9wID09PSB0cnVlID8gMSA6IDIgKTtcblxuXHRcdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXG5cblx0XHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcblxuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDeWxpbmRlckdlb21ldHJ5KCBkYXRhLnJhZGl1c1RvcCwgZGF0YS5yYWRpdXNCb3R0b20sIGRhdGEuaGVpZ2h0LCBkYXRhLnJhZGlhbFNlZ21lbnRzLCBkYXRhLmhlaWdodFNlZ21lbnRzLCBkYXRhLm9wZW5FbmRlZCwgZGF0YS50aGV0YVN0YXJ0LCBkYXRhLnRoZXRhTGVuZ3RoICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIENvbmVHZW9tZXRyeSBleHRlbmRzIEN5bGluZGVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBoZWlnaHQgPSAxLCByYWRpYWxTZWdtZW50cyA9IDgsIGhlaWdodFNlZ21lbnRzID0gMSwgb3BlbkVuZGVkID0gZmFsc2UsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKiAyICkge1xuXG5cdFx0c3VwZXIoIDAsIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDb25lR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxuXHRcdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHRcdH07XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgQ29uZUdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5oZWlnaHQsIGRhdGEucmFkaWFsU2VnbWVudHMsIGRhdGEuaGVpZ2h0U2VnbWVudHMsIGRhdGEub3BlbkVuZGVkLCBkYXRhLnRoZXRhU3RhcnQsIGRhdGEudGhldGFMZW5ndGggKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgUG9seWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCB2ZXJ0aWNlcyA9IFtdLCBpbmRpY2VzID0gW10sIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvbHloZWRyb25HZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHR2ZXJ0aWNlczogdmVydGljZXMsXG5cdFx0XHRpbmRpY2VzOiBpbmRpY2VzLFxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0XHQvLyBkZWZhdWx0IGJ1ZmZlciBkYXRhXG5cblx0XHRjb25zdCB2ZXJ0ZXhCdWZmZXIgPSBbXTtcblx0XHRjb25zdCB1dkJ1ZmZlciA9IFtdO1xuXG5cdFx0Ly8gdGhlIHN1YmRpdmlzaW9uIGNyZWF0ZXMgdGhlIHZlcnRleCBidWZmZXIgZGF0YVxuXG5cdFx0c3ViZGl2aWRlKCBkZXRhaWwgKTtcblxuXHRcdC8vIGFsbCB2ZXJ0aWNlcyBzaG91bGQgbGllIG9uIGEgY29uY2VwdHVhbCBzcGhlcmUgd2l0aCBhIGdpdmVuIHJhZGl1c1xuXG5cdFx0YXBwbHlSYWRpdXMoIHJhZGl1cyApO1xuXG5cdFx0Ly8gZmluYWxseSwgY3JlYXRlIHRoZSB1diBkYXRhXG5cblx0XHRnZW5lcmF0ZVVWcygpO1xuXG5cdFx0Ly8gYnVpbGQgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGV4QnVmZmVyLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0ZXhCdWZmZXIuc2xpY2UoKSwgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkJ1ZmZlciwgMiApICk7XG5cblx0XHRpZiAoIGRldGFpbCA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpOyAvLyBmbGF0IG5vcm1hbHNcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubm9ybWFsaXplTm9ybWFscygpOyAvLyBzbW9vdGggbm9ybWFsc1xuXG5cdFx0fVxuXG5cdFx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdFx0ZnVuY3Rpb24gc3ViZGl2aWRlKCBkZXRhaWwgKSB7XG5cblx0XHRcdGNvbnN0IGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgYiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBjID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gaXRlcmF0ZSBvdmVyIGFsbCBmYWNlcyBhbmQgYXBwbHkgYSBzdWJkaXZpc29uIHdpdGggdGhlIGdpdmVuIGRldGFpbCB2YWx1ZVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdC8vIGdldCB0aGUgdmVydGljZXMgb2YgdGhlIGZhY2VcblxuXHRcdFx0XHRnZXRWZXJ0ZXhCeUluZGV4KCBpbmRpY2VzWyBpICsgMCBdLCBhICk7XG5cdFx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAxIF0sIGIgKTtcblx0XHRcdFx0Z2V0VmVydGV4QnlJbmRleCggaW5kaWNlc1sgaSArIDIgXSwgYyApO1xuXG5cdFx0XHRcdC8vIHBlcmZvcm0gc3ViZGl2aXNpb25cblxuXHRcdFx0XHRzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICkge1xuXG5cdFx0XHRjb25zdCBjb2xzID0gZGV0YWlsICsgMTtcblxuXHRcdFx0Ly8gd2UgdXNlIHRoaXMgbXVsdGlkaW1lbnNpb25hbCBhcnJheSBhcyBhIGRhdGEgc3RydWN0dXJlIGZvciBjcmVhdGluZyB0aGUgc3ViZGl2aXNpb25cblxuXHRcdFx0Y29uc3QgdiA9IFtdO1xuXG5cdFx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSB2ZXJ0aWNlcyBmb3IgdGhpcyBzdWJkaXZpc2lvblxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gY29sczsgaSArKyApIHtcblxuXHRcdFx0XHR2WyBpIF0gPSBbXTtcblxuXHRcdFx0XHRjb25zdCBhaiA9IGEuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXHRcdFx0XHRjb25zdCBiaiA9IGIuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXG5cdFx0XHRcdGNvbnN0IHJvd3MgPSBjb2xzIC0gaTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcm93czsgaiArKyApIHtcblxuXHRcdFx0XHRcdGlmICggaiA9PT0gMCAmJiBpID09PSBjb2xzICkge1xuXG5cdFx0XHRcdFx0XHR2WyBpIF1bIGogXSA9IGFqO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhai5jbG9uZSgpLmxlcnAoIGJqLCBqIC8gcm93cyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSBmYWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb2xzOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDIgKiAoIGNvbHMgLSBpICkgLSAxOyBqICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgayA9IE1hdGguZmxvb3IoIGogLyAyICk7XG5cblx0XHRcdFx0XHRpZiAoIGogJSAyID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrIF0gKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhcHBseVJhZGl1cyggcmFkaXVzICkge1xuXG5cdFx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBpdGVyYXRlIG92ZXIgdGhlIGVudGlyZSBidWZmZXIgYW5kIGFwcGx5IHRoZSByYWRpdXMgdG8gZWFjaCB2ZXJ0ZXhcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcblx0XHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdFx0dmVydGV4Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCByYWRpdXMgKTtcblxuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF0gPSB2ZXJ0ZXgueDtcblx0XHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMSBdID0gdmVydGV4Lnk7XG5cdFx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDIgXSA9IHZlcnRleC56O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcblx0XHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdFx0Y29uc3QgdSA9IGF6aW11dGgoIHZlcnRleCApIC8gMiAvIE1hdGguUEkgKyAwLjU7XG5cdFx0XHRcdGNvbnN0IHYgPSBpbmNsaW5hdGlvbiggdmVydGV4ICkgLyBNYXRoLlBJICsgMC41O1xuXHRcdFx0XHR1dkJ1ZmZlci5wdXNoKCB1LCAxIC0gdiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvcnJlY3RVVnMoKTtcblxuXHRcdFx0Y29ycmVjdFNlYW0oKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNvcnJlY3RTZWFtKCkge1xuXG5cdFx0XHQvLyBoYW5kbGUgY2FzZSB3aGVuIGZhY2Ugc3RyYWRkbGVzIHRoZSBzZWFtLCBzZWUgIzMyNjlcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdXZCdWZmZXIubGVuZ3RoOyBpICs9IDYgKSB7XG5cblx0XHRcdFx0Ly8gdXYgZGF0YSBvZiBhIHNpbmdsZSBmYWNlXG5cblx0XHRcdFx0Y29uc3QgeDAgPSB1dkJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdFx0Y29uc3QgeDEgPSB1dkJ1ZmZlclsgaSArIDIgXTtcblx0XHRcdFx0Y29uc3QgeDIgPSB1dkJ1ZmZlclsgaSArIDQgXTtcblxuXHRcdFx0XHRjb25zdCBtYXggPSBNYXRoLm1heCggeDAsIHgxLCB4MiApO1xuXHRcdFx0XHRjb25zdCBtaW4gPSBNYXRoLm1pbiggeDAsIHgxLCB4MiApO1xuXG5cdFx0XHRcdC8vIDAuOSBpcyBzb21ld2hhdCBhcmJpdHJhcnlcblxuXHRcdFx0XHRpZiAoIG1heCA+IDAuOSAmJiBtaW4gPCAwLjEgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHgwIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAwIF0gKz0gMTtcblx0XHRcdFx0XHRpZiAoIHgxIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAyIF0gKz0gMTtcblx0XHRcdFx0XHRpZiAoIHgyIDwgMC4yICkgdXZCdWZmZXJbIGkgKyA0IF0gKz0gMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHB1c2hWZXJ0ZXgoIHZlcnRleCApIHtcblxuXHRcdFx0dmVydGV4QnVmZmVyLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldFZlcnRleEJ5SW5kZXgoIGluZGV4LCB2ZXJ0ZXggKSB7XG5cblx0XHRcdGNvbnN0IHN0cmlkZSA9IGluZGV4ICogMztcblxuXHRcdFx0dmVydGV4LnggPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMCBdO1xuXHRcdFx0dmVydGV4LnkgPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMSBdO1xuXHRcdFx0dmVydGV4LnogPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMiBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY29ycmVjdFVWcygpIHtcblxuXHRcdFx0Y29uc3QgYSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBiID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IGMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRjb25zdCBjZW50cm9pZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGNvbnN0IHV2QSA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0XHRjb25zdCB1dkIgPSBuZXcgVmVjdG9yMigpO1xuXHRcdFx0Y29uc3QgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gOSwgaiArPSA2ICkge1xuXG5cdFx0XHRcdGEuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF0sIHZlcnRleEJ1ZmZlclsgaSArIDEgXSwgdmVydGV4QnVmZmVyWyBpICsgMiBdICk7XG5cdFx0XHRcdGIuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAzIF0sIHZlcnRleEJ1ZmZlclsgaSArIDQgXSwgdmVydGV4QnVmZmVyWyBpICsgNSBdICk7XG5cdFx0XHRcdGMuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyA2IF0sIHZlcnRleEJ1ZmZlclsgaSArIDcgXSwgdmVydGV4QnVmZmVyWyBpICsgOCBdICk7XG5cblx0XHRcdFx0dXZBLnNldCggdXZCdWZmZXJbIGogKyAwIF0sIHV2QnVmZmVyWyBqICsgMSBdICk7XG5cdFx0XHRcdHV2Qi5zZXQoIHV2QnVmZmVyWyBqICsgMiBdLCB1dkJ1ZmZlclsgaiArIDMgXSApO1xuXHRcdFx0XHR1dkMuc2V0KCB1dkJ1ZmZlclsgaiArIDQgXSwgdXZCdWZmZXJbIGogKyA1IF0gKTtcblxuXHRcdFx0XHRjZW50cm9pZC5jb3B5KCBhICkuYWRkKCBiICkuYWRkKCBjICkuZGl2aWRlU2NhbGFyKCAzICk7XG5cblx0XHRcdFx0Y29uc3QgYXppID0gYXppbXV0aCggY2VudHJvaWQgKTtcblxuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QSwgaiArIDAsIGEsIGF6aSApO1xuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QiwgaiArIDIsIGIsIGF6aSApO1xuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QywgaiArIDQsIGMsIGF6aSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb3JyZWN0VVYoIHV2LCBzdHJpZGUsIHZlY3RvciwgYXppbXV0aCApIHtcblxuXHRcdFx0aWYgKCAoIGF6aW11dGggPCAwICkgJiYgKCB1di54ID09PSAxICkgKSB7XG5cblx0XHRcdFx0dXZCdWZmZXJbIHN0cmlkZSBdID0gdXYueCAtIDE7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAoIHZlY3Rvci54ID09PSAwICkgJiYgKCB2ZWN0b3IueiA9PT0gMCApICkge1xuXG5cdFx0XHRcdHV2QnVmZmVyWyBzdHJpZGUgXSA9IGF6aW11dGggLyAyIC8gTWF0aC5QSSArIDAuNTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQW5nbGUgYXJvdW5kIHRoZSBZIGF4aXMsIGNvdW50ZXItY2xvY2t3aXNlIHdoZW4gbG9va2luZyBmcm9tIGFib3ZlLlxuXG5cdFx0ZnVuY3Rpb24gYXppbXV0aCggdmVjdG9yICkge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5hdGFuMiggdmVjdG9yLnosIC0gdmVjdG9yLnggKTtcblxuXHRcdH1cblxuXG5cdFx0Ly8gQW5nbGUgYWJvdmUgdGhlIFhaIHBsYW5lLlxuXG5cdFx0ZnVuY3Rpb24gaW5jbGluYXRpb24oIHZlY3RvciApIHtcblxuXHRcdFx0cmV0dXJuIE1hdGguYXRhbjIoIC0gdmVjdG9yLnksIE1hdGguc3FydCggKCB2ZWN0b3IueCAqIHZlY3Rvci54ICkgKyAoIHZlY3Rvci56ICogdmVjdG9yLnogKSApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgUG9seWhlZHJvbkdlb21ldHJ5KCBkYXRhLnZlcnRpY2VzLCBkYXRhLmluZGljZXMsIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbHMgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgRG9kZWNhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBkZXRhaWwgPSAwICkge1xuXG5cdFx0Y29uc3QgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuXHRcdGNvbnN0IHIgPSAxIC8gdDtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xuXG5cdFx0XHQvLyAowrExLCDCsTEsIMKxMSlcblx0XHRcdC0gMSwgLSAxLCAtIDEsXHQtIDEsIC0gMSwgMSxcblx0XHRcdC0gMSwgMSwgLSAxLCAtIDEsIDEsIDEsXG5cdFx0XHQxLCAtIDEsIC0gMSwgMSwgLSAxLCAxLFxuXHRcdFx0MSwgMSwgLSAxLCAxLCAxLCAxLFxuXG5cdFx0XHQvLyAoMCwgwrExL8+GLCDCsc+GKVxuXHRcdFx0MCwgLSByLCAtIHQsIDAsIC0gciwgdCxcblx0XHRcdDAsIHIsIC0gdCwgMCwgciwgdCxcblxuXHRcdFx0Ly8gKMKxMS/PhiwgwrHPhiwgMClcblx0XHRcdC0gciwgLSB0LCAwLCAtIHIsIHQsIDAsXG5cdFx0XHRyLCAtIHQsIDAsIHIsIHQsIDAsXG5cblx0XHRcdC8vICjCsc+GLCAwLCDCsTEvz4YpXG5cdFx0XHQtIHQsIDAsIC0gciwgdCwgMCwgLSByLFxuXHRcdFx0LSB0LCAwLCByLCB0LCAwLCByXG5cdFx0XTtcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXG5cdFx0XHQzLCAxMSwgNywgXHQzLCA3LCAxNSwgXHQzLCAxNSwgMTMsXG5cdFx0XHQ3LCAxOSwgMTcsIFx0NywgMTcsIDYsIFx0NywgNiwgMTUsXG5cdFx0XHQxNywgNCwgOCwgXHQxNywgOCwgMTAsIFx0MTcsIDEwLCA2LFxuXHRcdFx0OCwgMCwgMTYsIFx0OCwgMTYsIDIsIFx0OCwgMiwgMTAsXG5cdFx0XHQwLCAxMiwgMSwgXHQwLCAxLCAxOCwgXHQwLCAxOCwgMTYsXG5cdFx0XHQ2LCAxMCwgMiwgXHQ2LCAyLCAxMywgXHQ2LCAxMywgMTUsXG5cdFx0XHQyLCAxNiwgMTgsIFx0MiwgMTgsIDMsIFx0MiwgMywgMTMsXG5cdFx0XHQxOCwgMSwgOSwgXHQxOCwgOSwgMTEsIFx0MTgsIDExLCAzLFxuXHRcdFx0NCwgMTQsIDEyLCBcdDQsIDEyLCAwLCBcdDQsIDAsIDgsXG5cdFx0XHQxMSwgOSwgNSwgXHQxMSwgNSwgMTksIFx0MTEsIDE5LCA3LFxuXHRcdFx0MTksIDUsIDE0LCBcdDE5LCAxNCwgNCwgXHQxOSwgNCwgMTcsXG5cdFx0XHQxLCAxMiwgMTQsIFx0MSwgMTQsIDUsIFx0MSwgNSwgOVxuXHRcdF07XG5cblx0XHRzdXBlciggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgRG9kZWNhaGVkcm9uR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdjAgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YxJDEgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX25vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdHJpYW5nbGUgPSBuZXcgVHJpYW5nbGUoKTtcblxuY2xhc3MgRWRnZXNHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBudWxsLCB0aHJlc2hvbGRBbmdsZSA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9ICdFZGdlc0dlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdGdlb21ldHJ5OiBnZW9tZXRyeSxcblx0XHRcdHRocmVzaG9sZEFuZ2xlOiB0aHJlc2hvbGRBbmdsZVxuXHRcdH07XG5cblx0XHRpZiAoIGdlb21ldHJ5ICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBwcmVjaXNpb25Qb2ludHMgPSA0O1xuXHRcdFx0Y29uc3QgcHJlY2lzaW9uID0gTWF0aC5wb3coIDEwLCBwcmVjaXNpb25Qb2ludHMgKTtcblx0XHRcdGNvbnN0IHRocmVzaG9sZERvdCA9IE1hdGguY29zKCBERUcyUkFEICogdGhyZXNob2xkQW5nbGUgKTtcblxuXHRcdFx0Y29uc3QgaW5kZXhBdHRyID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcblx0XHRcdGNvbnN0IHBvc2l0aW9uQXR0ciA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXHRcdFx0Y29uc3QgaW5kZXhDb3VudCA9IGluZGV4QXR0ciA/IGluZGV4QXR0ci5jb3VudCA6IHBvc2l0aW9uQXR0ci5jb3VudDtcblxuXHRcdFx0Y29uc3QgaW5kZXhBcnIgPSBbIDAsIDAsIDAgXTtcblx0XHRcdGNvbnN0IHZlcnRLZXlzID0gWyAnYScsICdiJywgJ2MnIF07XG5cdFx0XHRjb25zdCBoYXNoZXMgPSBuZXcgQXJyYXkoIDMgKTtcblxuXHRcdFx0Y29uc3QgZWRnZURhdGEgPSB7fTtcblx0XHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBpbmRleENvdW50OyBpICs9IDMgKSB7XG5cblx0XHRcdFx0aWYgKCBpbmRleEF0dHIgKSB7XG5cblx0XHRcdFx0XHRpbmRleEFyclsgMCBdID0gaW5kZXhBdHRyLmdldFgoIGkgKTtcblx0XHRcdFx0XHRpbmRleEFyclsgMSBdID0gaW5kZXhBdHRyLmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0aW5kZXhBcnJbIDIgXSA9IGluZGV4QXR0ci5nZXRYKCBpICsgMiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpbmRleEFyclsgMCBdID0gaTtcblx0XHRcdFx0XHRpbmRleEFyclsgMSBdID0gaSArIDE7XG5cdFx0XHRcdFx0aW5kZXhBcnJbIDIgXSA9IGkgKyAyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB7IGEsIGIsIGMgfSA9IF90cmlhbmdsZTtcblx0XHRcdFx0YS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAwIF0gKTtcblx0XHRcdFx0Yi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAxIF0gKTtcblx0XHRcdFx0Yy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAyIF0gKTtcblx0XHRcdFx0X3RyaWFuZ2xlLmdldE5vcm1hbCggX25vcm1hbCApO1xuXG5cdFx0XHRcdC8vIGNyZWF0ZSBoYXNoZXMgZm9yIHRoZSBlZGdlIGZyb20gdGhlIHZlcnRpY2VzXG5cdFx0XHRcdGhhc2hlc1sgMCBdID0gYCR7IE1hdGgucm91bmQoIGEueCAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYS55ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBhLnogKiBwcmVjaXNpb24gKSB9YDtcblx0XHRcdFx0aGFzaGVzWyAxIF0gPSBgJHsgTWF0aC5yb3VuZCggYi54ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBiLnkgKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGIueiAqIHByZWNpc2lvbiApIH1gO1xuXHRcdFx0XHRoYXNoZXNbIDIgXSA9IGAkeyBNYXRoLnJvdW5kKCBjLnggKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGMueSAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYy56ICogcHJlY2lzaW9uICkgfWA7XG5cblx0XHRcdFx0Ly8gc2tpcCBkZWdlbmVyYXRlIHRyaWFuZ2xlc1xuXHRcdFx0XHRpZiAoIGhhc2hlc1sgMCBdID09PSBoYXNoZXNbIDEgXSB8fCBoYXNoZXNbIDEgXSA9PT0gaGFzaGVzWyAyIF0gfHwgaGFzaGVzWyAyIF0gPT09IGhhc2hlc1sgMCBdICkge1xuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGl0ZXJhdGUgb3ZlciBldmVyeSBlZGdlXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHQvLyBnZXQgdGhlIGZpcnN0IGFuZCBuZXh0IHZlcnRleCBtYWtpbmcgdXAgdGhlIGVkZ2Vcblx0XHRcdFx0XHRjb25zdCBqTmV4dCA9ICggaiArIDEgKSAlIDM7XG5cdFx0XHRcdFx0Y29uc3QgdmVjSGFzaDAgPSBoYXNoZXNbIGogXTtcblx0XHRcdFx0XHRjb25zdCB2ZWNIYXNoMSA9IGhhc2hlc1sgak5leHQgXTtcblx0XHRcdFx0XHRjb25zdCB2MCA9IF90cmlhbmdsZVsgdmVydEtleXNbIGogXSBdO1xuXHRcdFx0XHRcdGNvbnN0IHYxID0gX3RyaWFuZ2xlWyB2ZXJ0S2V5c1sgak5leHQgXSBdO1xuXG5cdFx0XHRcdFx0Y29uc3QgaGFzaCA9IGAkeyB2ZWNIYXNoMCB9XyR7IHZlY0hhc2gxIH1gO1xuXHRcdFx0XHRcdGNvbnN0IHJldmVyc2VIYXNoID0gYCR7IHZlY0hhc2gxIH1fJHsgdmVjSGFzaDAgfWA7XG5cblx0XHRcdFx0XHRpZiAoIHJldmVyc2VIYXNoIGluIGVkZ2VEYXRhICYmIGVkZ2VEYXRhWyByZXZlcnNlSGFzaCBdICkge1xuXG5cdFx0XHRcdFx0XHQvLyBpZiB3ZSBmb3VuZCBhIHNpYmxpbmcgZWRnZSBhZGQgaXQgaW50byB0aGUgdmVydGV4IGFycmF5IGlmXG5cdFx0XHRcdFx0XHQvLyBpdCBtZWV0cyB0aGUgYW5nbGUgdGhyZXNob2xkIGFuZCBkZWxldGUgdGhlIGVkZ2UgZnJvbSB0aGUgbWFwLlxuXHRcdFx0XHRcdFx0aWYgKCBfbm9ybWFsLmRvdCggZWRnZURhdGFbIHJldmVyc2VIYXNoIF0ubm9ybWFsICkgPD0gdGhyZXNob2xkRG90ICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHYwLngsIHYwLnksIHYwLnogKTtcblx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVkZ2VEYXRhWyByZXZlcnNlSGFzaCBdID0gbnVsbDtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEgKCBoYXNoIGluIGVkZ2VEYXRhICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGlmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGVkZ2UgaGVyZSB0aGVuIHNraXAgYWRkaW5nIGEgbmV3IG9uZVxuXHRcdFx0XHRcdFx0ZWRnZURhdGFbIGhhc2ggXSA9IHtcblxuXHRcdFx0XHRcdFx0XHRpbmRleDA6IGluZGV4QXJyWyBqIF0sXG5cdFx0XHRcdFx0XHRcdGluZGV4MTogaW5kZXhBcnJbIGpOZXh0IF0sXG5cdFx0XHRcdFx0XHRcdG5vcm1hbDogX25vcm1hbC5jbG9uZSgpLFxuXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIHJlbWFpbmluZywgdW5tYXRjaGVkIGVkZ2VzIGFuZCBhZGQgdGhlbSB0byB0aGUgdmVydGV4IGFycmF5XG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gZWRnZURhdGEgKSB7XG5cblx0XHRcdFx0aWYgKCBlZGdlRGF0YVsga2V5IF0gKSB7XG5cblx0XHRcdFx0XHRjb25zdCB7IGluZGV4MCwgaW5kZXgxIH0gPSBlZGdlRGF0YVsga2V5IF07XG5cdFx0XHRcdFx0X3YwLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXgwICk7XG5cdFx0XHRcdFx0X3YxJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyLCBpbmRleDEgKTtcblxuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIF92MC54LCBfdjAueSwgX3YwLnogKTtcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBfdjEkMS54LCBfdjEkMS55LCBfdjEkMS56ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jbGFzcyBTaGFwZSBleHRlbmRzIFBhdGgge1xuXG5cdGNvbnN0cnVjdG9yKCBwb2ludHMgKSB7XG5cblx0XHRzdXBlciggcG9pbnRzICk7XG5cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFwZSc7XG5cblx0XHR0aGlzLmhvbGVzID0gW107XG5cblx0fVxuXG5cdGdldFBvaW50c0hvbGVzKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRjb25zdCBob2xlc1B0cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRob2xlc1B0c1sgaSBdID0gdGhpcy5ob2xlc1sgaSBdLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaG9sZXNQdHM7XG5cblx0fVxuXG5cdC8vIGdldCBwb2ludHMgb2Ygc2hhcGUgYW5kIGhvbGVzIChrZXlwb2ludHMgYmFzZWQgb24gc2VnbWVudHMgcGFyYW1ldGVyKVxuXG5cdGV4dHJhY3RQb2ludHMoIGRpdmlzaW9ucyApIHtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNoYXBlOiB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICksXG5cdFx0XHRob2xlczogdGhpcy5nZXRQb2ludHNIb2xlcyggZGl2aXNpb25zIClcblxuXHRcdH07XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGhvbGUgPSBzb3VyY2UuaG9sZXNbIGkgXTtcblxuXHRcdFx0dGhpcy5ob2xlcy5wdXNoKCBob2xlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBob2xlID0gdGhpcy5ob2xlc1sgaSBdO1xuXHRcdFx0ZGF0YS5ob2xlcy5wdXNoKCBob2xlLnRvSlNPTigpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy51dWlkID0ganNvbi51dWlkO1xuXHRcdHRoaXMuaG9sZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24uaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgaG9sZSA9IGpzb24uaG9sZXNbIGkgXTtcblx0XHRcdHRoaXMuaG9sZXMucHVzaCggbmV3IFBhdGgoKS5mcm9tSlNPTiggaG9sZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBQb3J0IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9lYXJjdXQgKHYyLjIuMilcbiAqL1xuXG5jb25zdCBFYXJjdXQgPSB7XG5cblx0dHJpYW5ndWxhdGU6IGZ1bmN0aW9uICggZGF0YSwgaG9sZUluZGljZXMsIGRpbSA9IDIgKSB7XG5cblx0XHRjb25zdCBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aDtcblx0XHRjb25zdCBvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbIDAgXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXHRcdGxldCBvdXRlck5vZGUgPSBsaW5rZWRMaXN0KCBkYXRhLCAwLCBvdXRlckxlbiwgZGltLCB0cnVlICk7XG5cdFx0Y29uc3QgdHJpYW5nbGVzID0gW107XG5cblx0XHRpZiAoICEgb3V0ZXJOb2RlIHx8IG91dGVyTm9kZS5uZXh0ID09PSBvdXRlck5vZGUucHJldiApIHJldHVybiB0cmlhbmdsZXM7XG5cblx0XHRsZXQgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcblxuXHRcdGlmICggaGFzSG9sZXMgKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICk7XG5cblx0XHQvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcblx0XHRpZiAoIGRhdGEubGVuZ3RoID4gODAgKiBkaW0gKSB7XG5cblx0XHRcdG1pblggPSBtYXhYID0gZGF0YVsgMCBdO1xuXHRcdFx0bWluWSA9IG1heFkgPSBkYXRhWyAxIF07XG5cblx0XHRcdGZvciAoIGxldCBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltICkge1xuXG5cdFx0XHRcdHggPSBkYXRhWyBpIF07XG5cdFx0XHRcdHkgPSBkYXRhWyBpICsgMSBdO1xuXHRcdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0XHRpZiAoIHkgPiBtYXhZICkgbWF4WSA9IHk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb25cblx0XHRcdGludlNpemUgPSBNYXRoLm1heCggbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZICk7XG5cdFx0XHRpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDEgLyBpbnZTaXplIDogMDtcblxuXHRcdH1cblxuXHRcdGVhcmN1dExpbmtlZCggb3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlcztcblxuXHR9XG5cbn07XG5cbi8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxuZnVuY3Rpb24gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UgKSB7XG5cblx0bGV0IGksIGxhc3Q7XG5cblx0aWYgKCBjbG9ja3dpc2UgPT09ICggc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkgPiAwICkgKSB7XG5cblx0XHRmb3IgKCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCBpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSApIGxhc3QgPSBpbnNlcnROb2RlKCBpLCBkYXRhWyBpIF0sIGRhdGFbIGkgKyAxIF0sIGxhc3QgKTtcblxuXHR9XG5cblx0aWYgKCBsYXN0ICYmIGVxdWFscyggbGFzdCwgbGFzdC5uZXh0ICkgKSB7XG5cblx0XHRyZW1vdmVOb2RlKCBsYXN0ICk7XG5cdFx0bGFzdCA9IGxhc3QubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIGxhc3Q7XG5cbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcbmZ1bmN0aW9uIGZpbHRlclBvaW50cyggc3RhcnQsIGVuZCApIHtcblxuXHRpZiAoICEgc3RhcnQgKSByZXR1cm4gc3RhcnQ7XG5cdGlmICggISBlbmQgKSBlbmQgPSBzdGFydDtcblxuXHRsZXQgcCA9IHN0YXJ0LFxuXHRcdGFnYWluO1xuXHRkbyB7XG5cblx0XHRhZ2FpbiA9IGZhbHNlO1xuXG5cdFx0aWYgKCAhIHAuc3RlaW5lciAmJiAoIGVxdWFscyggcCwgcC5uZXh0ICkgfHwgYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA9PT0gMCApICkge1xuXG5cdFx0XHRyZW1vdmVOb2RlKCBwICk7XG5cdFx0XHRwID0gZW5kID0gcC5wcmV2O1xuXHRcdFx0aWYgKCBwID09PSBwLm5leHQgKSBicmVhaztcblx0XHRcdGFnYWluID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHAgPSBwLm5leHQ7XG5cblx0XHR9XG5cblx0fSB3aGlsZSAoIGFnYWluIHx8IHAgIT09IGVuZCApO1xuXG5cdHJldHVybiBlbmQ7XG5cbn1cblxuLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MgKSB7XG5cblx0aWYgKCAhIGVhciApIHJldHVybjtcblxuXHQvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5cdGlmICggISBwYXNzICYmIGludlNpemUgKSBpbmRleEN1cnZlKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHRsZXQgc3RvcCA9IGVhcixcblx0XHRwcmV2LCBuZXh0O1xuXG5cdC8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZVxuXHR3aGlsZSAoIGVhci5wcmV2ICE9PSBlYXIubmV4dCApIHtcblxuXHRcdHByZXYgPSBlYXIucHJldjtcblx0XHRuZXh0ID0gZWFyLm5leHQ7XG5cblx0XHRpZiAoIGludlNpemUgPyBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgOiBpc0VhciggZWFyICkgKSB7XG5cblx0XHRcdC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXG5cdFx0XHR0cmlhbmdsZXMucHVzaCggcHJldi5pIC8gZGltICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggZWFyLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBuZXh0LmkgLyBkaW0gKTtcblxuXHRcdFx0cmVtb3ZlTm9kZSggZWFyICk7XG5cblx0XHRcdC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRleCBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcblx0XHRcdGVhciA9IG5leHQubmV4dDtcblx0XHRcdHN0b3AgPSBuZXh0Lm5leHQ7XG5cblx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0fVxuXG5cdFx0ZWFyID0gbmV4dDtcblxuXHRcdC8vIGlmIHdlIGxvb3BlZCB0aHJvdWdoIHRoZSB3aG9sZSByZW1haW5pbmcgcG9seWdvbiBhbmQgY2FuJ3QgZmluZCBhbnkgbW9yZSBlYXJzXG5cdFx0aWYgKCBlYXIgPT09IHN0b3AgKSB7XG5cblx0XHRcdC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG5cdFx0XHRpZiAoICEgcGFzcyApIHtcblxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGZpbHRlclBvaW50cyggZWFyICksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxICk7XG5cblx0XHRcdFx0Ly8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcblxuXHRcdFx0fSBlbHNlIGlmICggcGFzcyA9PT0gMSApIHtcblxuXHRcdFx0XHRlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKCBmaWx0ZXJQb2ludHMoIGVhciApLCB0cmlhbmdsZXMsIGRpbSApO1xuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIgKTtcblxuXHRcdFx0XHQvLyBhcyBhIGxhc3QgcmVzb3J0LCB0cnkgc3BsaXR0aW5nIHRoZSByZW1haW5pbmcgcG9seWdvbiBpbnRvIHR3b1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBwYXNzID09PSAyICkge1xuXG5cdFx0XHRcdHNwbGl0RWFyY3V0KCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIGNoZWNrIHdoZXRoZXIgYSBwb2x5Z29uIG5vZGUgZm9ybXMgYSB2YWxpZCBlYXIgd2l0aCBhZGphY2VudCBub2Rlc1xuZnVuY3Rpb24gaXNFYXIoIGVhciApIHtcblxuXHRjb25zdCBhID0gZWFyLnByZXYsXG5cdFx0YiA9IGVhcixcblx0XHRjID0gZWFyLm5leHQ7XG5cblx0aWYgKCBhcmVhKCBhLCBiLCBjICkgPj0gMCApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuXHQvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxuXHRsZXQgcCA9IGVhci5uZXh0Lm5leHQ7XG5cblx0d2hpbGUgKCBwICE9PSBlYXIucHJldiApIHtcblxuXHRcdGlmICggcG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoIGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHRjb25zdCBhID0gZWFyLnByZXYsXG5cdFx0YiA9IGVhcixcblx0XHRjID0gZWFyLm5leHQ7XG5cblx0aWYgKCBhcmVhKCBhLCBiLCBjICkgPj0gMCApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuXHQvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxuXHRjb25zdCBtaW5UWCA9IGEueCA8IGIueCA/ICggYS54IDwgYy54ID8gYS54IDogYy54ICkgOiAoIGIueCA8IGMueCA/IGIueCA6IGMueCApLFxuXHRcdG1pblRZID0gYS55IDwgYi55ID8gKCBhLnkgPCBjLnkgPyBhLnkgOiBjLnkgKSA6ICggYi55IDwgYy55ID8gYi55IDogYy55ICksXG5cdFx0bWF4VFggPSBhLnggPiBiLnggPyAoIGEueCA+IGMueCA/IGEueCA6IGMueCApIDogKCBiLnggPiBjLnggPyBiLnggOiBjLnggKSxcblx0XHRtYXhUWSA9IGEueSA+IGIueSA/ICggYS55ID4gYy55ID8gYS55IDogYy55ICkgOiAoIGIueSA+IGMueSA/IGIueSA6IGMueSApO1xuXG5cdC8vIHotb3JkZXIgcmFuZ2UgZm9yIHRoZSBjdXJyZW50IHRyaWFuZ2xlIGJib3g7XG5cdGNvbnN0IG1pblogPSB6T3JkZXIoIG1pblRYLCBtaW5UWSwgbWluWCwgbWluWSwgaW52U2l6ZSApLFxuXHRcdG1heFogPSB6T3JkZXIoIG1heFRYLCBtYXhUWSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdGxldCBwID0gZWFyLnByZXZaLFxuXHRcdG4gPSBlYXIubmV4dFo7XG5cblx0Ly8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgaW4gYm90aCBkaXJlY3Rpb25zXG5cdHdoaWxlICggcCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0XHRpZiAoIG4gIT09IGVhci5wcmV2ICYmIG4gIT09IGVhci5uZXh0ICYmXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIG4ueCwgbi55ICkgJiZcblx0XHRcdGFyZWEoIG4ucHJldiwgbiwgbi5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcblx0XHRuID0gbi5uZXh0WjtcblxuXHR9XG5cblx0Ly8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcblx0d2hpbGUgKCBwICYmIHAueiA+PSBtaW5aICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0fVxuXG5cdC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gaW5jcmVhc2luZyB6LW9yZGVyXG5cdHdoaWxlICggbiAmJiBuLnogPD0gbWF4WiApIHtcblxuXHRcdGlmICggbiAhPT0gZWFyLnByZXYgJiYgbiAhPT0gZWFyLm5leHQgJiZcblx0XHRcdHBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgbi54LCBuLnkgKSAmJlxuXHRcdFx0YXJlYSggbi5wcmV2LCBuLCBuLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xuXHRcdG4gPSBuLm5leHRaO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xuZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggc3RhcnQsIHRyaWFuZ2xlcywgZGltICkge1xuXG5cdGxldCBwID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdGNvbnN0IGEgPSBwLnByZXYsXG5cdFx0XHRiID0gcC5uZXh0Lm5leHQ7XG5cblx0XHRpZiAoICEgZXF1YWxzKCBhLCBiICkgJiYgaW50ZXJzZWN0cyggYSwgcCwgcC5uZXh0LCBiICkgJiYgbG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSApIHtcblxuXHRcdFx0dHJpYW5nbGVzLnB1c2goIGEuaSAvIGRpbSApO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2goIHAuaSAvIGRpbSApO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2goIGIuaSAvIGRpbSApO1xuXG5cdFx0XHQvLyByZW1vdmUgdHdvIG5vZGVzIGludm9sdmVkXG5cdFx0XHRyZW1vdmVOb2RlKCBwICk7XG5cdFx0XHRyZW1vdmVOb2RlKCBwLm5leHQgKTtcblxuXHRcdFx0cCA9IHN0YXJ0ID0gYjtcblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XG5cblx0cmV0dXJuIGZpbHRlclBvaW50cyggcCApO1xuXG59XG5cbi8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5XG5mdW5jdGlvbiBzcGxpdEVhcmN1dCggc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGxvb2sgZm9yIGEgdmFsaWQgZGlhZ29uYWwgdGhhdCBkaXZpZGVzIHRoZSBwb2x5Z29uIGludG8gdHdvXG5cdGxldCBhID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdGxldCBiID0gYS5uZXh0Lm5leHQ7XG5cdFx0d2hpbGUgKCBiICE9PSBhLnByZXYgKSB7XG5cblx0XHRcdGlmICggYS5pICE9PSBiLmkgJiYgaXNWYWxpZERpYWdvbmFsKCBhLCBiICkgKSB7XG5cblx0XHRcdFx0Ly8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbFxuXHRcdFx0XHRsZXQgYyA9IHNwbGl0UG9seWdvbiggYSwgYiApO1xuXG5cdFx0XHRcdC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG5cdFx0XHRcdGEgPSBmaWx0ZXJQb2ludHMoIGEsIGEubmV4dCApO1xuXHRcdFx0XHRjID0gZmlsdGVyUG9pbnRzKCBjLCBjLm5leHQgKTtcblxuXHRcdFx0XHQvLyBydW4gZWFyY3V0IG9uIGVhY2ggaGFsZlxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cdFx0XHRcdGVhcmN1dExpbmtlZCggYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGIgPSBiLm5leHQ7XG5cblx0XHR9XG5cblx0XHRhID0gYS5uZXh0O1xuXG5cdH0gd2hpbGUgKCBhICE9PSBzdGFydCApO1xuXG59XG5cbi8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKCBkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0gKSB7XG5cblx0Y29uc3QgcXVldWUgPSBbXTtcblx0bGV0IGksIGxlbiwgc3RhcnQsIGVuZCwgbGlzdDtcblxuXHRmb3IgKCBpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpICsrICkge1xuXG5cdFx0c3RhcnQgPSBob2xlSW5kaWNlc1sgaSBdICogZGltO1xuXHRcdGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbIGkgKyAxIF0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcblx0XHRsaXN0ID0gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBmYWxzZSApO1xuXHRcdGlmICggbGlzdCA9PT0gbGlzdC5uZXh0ICkgbGlzdC5zdGVpbmVyID0gdHJ1ZTtcblx0XHRxdWV1ZS5wdXNoKCBnZXRMZWZ0bW9zdCggbGlzdCApICk7XG5cblx0fVxuXG5cdHF1ZXVlLnNvcnQoIGNvbXBhcmVYICk7XG5cblx0Ly8gcHJvY2VzcyBob2xlcyBmcm9tIGxlZnQgdG8gcmlnaHRcblx0Zm9yICggaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRlbGltaW5hdGVIb2xlKCBxdWV1ZVsgaSBdLCBvdXRlck5vZGUgKTtcblx0XHRvdXRlck5vZGUgPSBmaWx0ZXJQb2ludHMoIG91dGVyTm9kZSwgb3V0ZXJOb2RlLm5leHQgKTtcblxuXHR9XG5cblx0cmV0dXJuIG91dGVyTm9kZTtcblxufVxuXG5mdW5jdGlvbiBjb21wYXJlWCggYSwgYiApIHtcblxuXHRyZXR1cm4gYS54IC0gYi54O1xuXG59XG5cbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBsaW5rIGl0XG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlKCBob2xlLCBvdXRlck5vZGUgKSB7XG5cblx0b3V0ZXJOb2RlID0gZmluZEhvbGVCcmlkZ2UoIGhvbGUsIG91dGVyTm9kZSApO1xuXHRpZiAoIG91dGVyTm9kZSApIHtcblxuXHRcdGNvbnN0IGIgPSBzcGxpdFBvbHlnb24oIG91dGVyTm9kZSwgaG9sZSApO1xuXG5cdFx0Ly8gZmlsdGVyIGNvbGxpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG5cdFx0ZmlsdGVyUG9pbnRzKCBvdXRlck5vZGUsIG91dGVyTm9kZS5uZXh0ICk7XG5cdFx0ZmlsdGVyUG9pbnRzKCBiLCBiLm5leHQgKTtcblxuXHR9XG5cbn1cblxuLy8gRGF2aWQgRWJlcmx5J3MgYWxnb3JpdGhtIGZvciBmaW5kaW5nIGEgYnJpZGdlIGJldHdlZW4gaG9sZSBhbmQgb3V0ZXIgcG9seWdvblxuZnVuY3Rpb24gZmluZEhvbGVCcmlkZ2UoIGhvbGUsIG91dGVyTm9kZSApIHtcblxuXHRsZXQgcCA9IG91dGVyTm9kZTtcblx0Y29uc3QgaHggPSBob2xlLng7XG5cdGNvbnN0IGh5ID0gaG9sZS55O1xuXHRsZXQgcXggPSAtIEluZmluaXR5LCBtO1xuXG5cdC8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDtcblx0Ly8gc2VnbWVudCdzIGVuZHBvaW50IHdpdGggbGVzc2VyIHggd2lsbCBiZSBwb3RlbnRpYWwgY29ubmVjdGlvbiBwb2ludFxuXHRkbyB7XG5cblx0XHRpZiAoIGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSAmJiBwLm5leHQueSAhPT0gcC55ICkge1xuXG5cdFx0XHRjb25zdCB4ID0gcC54ICsgKCBoeSAtIHAueSApICogKCBwLm5leHQueCAtIHAueCApIC8gKCBwLm5leHQueSAtIHAueSApO1xuXHRcdFx0aWYgKCB4IDw9IGh4ICYmIHggPiBxeCApIHtcblxuXHRcdFx0XHRxeCA9IHg7XG5cdFx0XHRcdGlmICggeCA9PT0gaHggKSB7XG5cblx0XHRcdFx0XHRpZiAoIGh5ID09PSBwLnkgKSByZXR1cm4gcDtcblx0XHRcdFx0XHRpZiAoIGh5ID09PSBwLm5leHQueSApIHJldHVybiBwLm5leHQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG0gPSBwLnggPCBwLm5leHQueCA/IHAgOiBwLm5leHQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IG91dGVyTm9kZSApO1xuXG5cdGlmICggISBtICkgcmV0dXJuIG51bGw7XG5cblx0aWYgKCBoeCA9PT0gcXggKSByZXR1cm4gbTsgLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbGVmdG1vc3QgZW5kcG9pbnRcblxuXHQvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBvZiBob2xlIHBvaW50LCBzZWdtZW50IGludGVyc2VjdGlvbiBhbmQgZW5kcG9pbnQ7XG5cdC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xuXHQvLyBvdGhlcndpc2UgY2hvb3NlIHRoZSBwb2ludCBvZiB0aGUgbWluaW11bSBhbmdsZSB3aXRoIHRoZSByYXkgYXMgY29ubmVjdGlvbiBwb2ludFxuXG5cdGNvbnN0IHN0b3AgPSBtLFxuXHRcdG14ID0gbS54LFxuXHRcdG15ID0gbS55O1xuXHRsZXQgdGFuTWluID0gSW5maW5pdHksIHRhbjtcblxuXHRwID0gbTtcblxuXHRkbyB7XG5cblx0XHRpZiAoIGh4ID49IHAueCAmJiBwLnggPj0gbXggJiYgaHggIT09IHAueCAmJlxuXHRcdFx0XHRwb2ludEluVHJpYW5nbGUoIGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55ICkgKSB7XG5cblx0XHRcdHRhbiA9IE1hdGguYWJzKCBoeSAtIHAueSApIC8gKCBoeCAtIHAueCApOyAvLyB0YW5nZW50aWFsXG5cblx0XHRcdGlmICggbG9jYWxseUluc2lkZSggcCwgaG9sZSApICYmICggdGFuIDwgdGFuTWluIHx8ICggdGFuID09PSB0YW5NaW4gJiYgKCBwLnggPiBtLnggfHwgKCBwLnggPT09IG0ueCAmJiBzZWN0b3JDb250YWluc1NlY3RvciggbSwgcCApICkgKSApICkgKSB7XG5cblx0XHRcdFx0bSA9IHA7XG5cdFx0XHRcdHRhbk1pbiA9IHRhbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gc3RvcCApO1xuXG5cdHJldHVybiBtO1xuXG59XG5cbi8vIHdoZXRoZXIgc2VjdG9yIGluIHZlcnRleCBtIGNvbnRhaW5zIHNlY3RvciBpbiB2ZXJ0ZXggcCBpbiB0aGUgc2FtZSBjb29yZGluYXRlc1xuZnVuY3Rpb24gc2VjdG9yQ29udGFpbnNTZWN0b3IoIG0sIHAgKSB7XG5cblx0cmV0dXJuIGFyZWEoIG0ucHJldiwgbSwgcC5wcmV2ICkgPCAwICYmIGFyZWEoIHAubmV4dCwgbSwgbS5uZXh0ICkgPCAwO1xuXG59XG5cbi8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcbmZ1bmN0aW9uIGluZGV4Q3VydmUoIHN0YXJ0LCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdGxldCBwID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdGlmICggcC56ID09PSBudWxsICkgcC56ID0gek9yZGVyKCBwLngsIHAueSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXHRcdHAucHJldlogPSBwLnByZXY7XG5cdFx0cC5uZXh0WiA9IHAubmV4dDtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHAucHJldloubmV4dFogPSBudWxsO1xuXHRwLnByZXZaID0gbnVsbDtcblxuXHRzb3J0TGlua2VkKCBwICk7XG5cbn1cblxuLy8gU2ltb24gVGF0aGFtJ3MgbGlua2VkIGxpc3QgbWVyZ2Ugc29ydCBhbGdvcml0aG1cbi8vIGh0dHA6Ly93d3cuY2hpYXJrLmdyZWVuZW5kLm9yZy51ay9+c2d0YXRoYW0vYWxnb3JpdGhtcy9saXN0c29ydC5odG1sXG5mdW5jdGlvbiBzb3J0TGlua2VkKCBsaXN0ICkge1xuXG5cdGxldCBpLCBwLCBxLCBlLCB0YWlsLCBudW1NZXJnZXMsIHBTaXplLCBxU2l6ZSxcblx0XHRpblNpemUgPSAxO1xuXG5cdGRvIHtcblxuXHRcdHAgPSBsaXN0O1xuXHRcdGxpc3QgPSBudWxsO1xuXHRcdHRhaWwgPSBudWxsO1xuXHRcdG51bU1lcmdlcyA9IDA7XG5cblx0XHR3aGlsZSAoIHAgKSB7XG5cblx0XHRcdG51bU1lcmdlcyArKztcblx0XHRcdHEgPSBwO1xuXHRcdFx0cFNpemUgPSAwO1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBpblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0cFNpemUgKys7XG5cdFx0XHRcdHEgPSBxLm5leHRaO1xuXHRcdFx0XHRpZiAoICEgcSApIGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdHFTaXplID0gaW5TaXplO1xuXG5cdFx0XHR3aGlsZSAoIHBTaXplID4gMCB8fCAoIHFTaXplID4gMCAmJiBxICkgKSB7XG5cblx0XHRcdFx0aWYgKCBwU2l6ZSAhPT0gMCAmJiAoIHFTaXplID09PSAwIHx8ICEgcSB8fCBwLnogPD0gcS56ICkgKSB7XG5cblx0XHRcdFx0XHRlID0gcDtcblx0XHRcdFx0XHRwID0gcC5uZXh0Wjtcblx0XHRcdFx0XHRwU2l6ZSAtLTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZSA9IHE7XG5cdFx0XHRcdFx0cSA9IHEubmV4dFo7XG5cdFx0XHRcdFx0cVNpemUgLS07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGFpbCApIHRhaWwubmV4dFogPSBlO1xuXHRcdFx0XHRlbHNlIGxpc3QgPSBlO1xuXG5cdFx0XHRcdGUucHJldlogPSB0YWlsO1xuXHRcdFx0XHR0YWlsID0gZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwID0gcTtcblxuXHRcdH1cblxuXHRcdHRhaWwubmV4dFogPSBudWxsO1xuXHRcdGluU2l6ZSAqPSAyO1xuXG5cdH0gd2hpbGUgKCBudW1NZXJnZXMgPiAxICk7XG5cblx0cmV0dXJuIGxpc3Q7XG5cbn1cblxuLy8gei1vcmRlciBvZiBhIHBvaW50IGdpdmVuIGNvb3JkcyBhbmQgaW52ZXJzZSBvZiB0aGUgbG9uZ2VyIHNpZGUgb2YgZGF0YSBiYm94XG5mdW5jdGlvbiB6T3JkZXIoIHgsIHksIG1pblgsIG1pblksIGludlNpemUgKSB7XG5cblx0Ly8gY29vcmRzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIG5vbi1uZWdhdGl2ZSAxNS1iaXQgaW50ZWdlciByYW5nZVxuXHR4ID0gMzI3NjcgKiAoIHggLSBtaW5YICkgKiBpbnZTaXplO1xuXHR5ID0gMzI3NjcgKiAoIHkgLSBtaW5ZICkgKiBpbnZTaXplO1xuXG5cdHggPSAoIHggfCAoIHggPDwgOCApICkgJiAweDAwRkYwMEZGO1xuXHR4ID0gKCB4IHwgKCB4IDw8IDQgKSApICYgMHgwRjBGMEYwRjtcblx0eCA9ICggeCB8ICggeCA8PCAyICkgKSAmIDB4MzMzMzMzMzM7XG5cdHggPSAoIHggfCAoIHggPDwgMSApICkgJiAweDU1NTU1NTU1O1xuXG5cdHkgPSAoIHkgfCAoIHkgPDwgOCApICkgJiAweDAwRkYwMEZGO1xuXHR5ID0gKCB5IHwgKCB5IDw8IDQgKSApICYgMHgwRjBGMEYwRjtcblx0eSA9ICggeSB8ICggeSA8PCAyICkgKSAmIDB4MzMzMzMzMzM7XG5cdHkgPSAoIHkgfCAoIHkgPDwgMSApICkgJiAweDU1NTU1NTU1O1xuXG5cdHJldHVybiB4IHwgKCB5IDw8IDEgKTtcblxufVxuXG4vLyBmaW5kIHRoZSBsZWZ0bW9zdCBub2RlIG9mIGEgcG9seWdvbiByaW5nXG5mdW5jdGlvbiBnZXRMZWZ0bW9zdCggc3RhcnQgKSB7XG5cblx0bGV0IHAgPSBzdGFydCxcblx0XHRsZWZ0bW9zdCA9IHN0YXJ0O1xuXHRkbyB7XG5cblx0XHRpZiAoIHAueCA8IGxlZnRtb3N0LnggfHwgKCBwLnggPT09IGxlZnRtb3N0LnggJiYgcC55IDwgbGVmdG1vc3QueSApICkgbGVmdG1vc3QgPSBwO1xuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XG5cblx0cmV0dXJuIGxlZnRtb3N0O1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9pbnQgbGllcyB3aXRoaW4gYSBjb252ZXggdHJpYW5nbGVcbmZ1bmN0aW9uIHBvaW50SW5UcmlhbmdsZSggYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5ICkge1xuXG5cdHJldHVybiAoIGN4IC0gcHggKSAqICggYXkgLSBweSApIC0gKCBheCAtIHB4ICkgKiAoIGN5IC0gcHkgKSA+PSAwICYmXG5cdFx0XHQoIGF4IC0gcHggKSAqICggYnkgLSBweSApIC0gKCBieCAtIHB4ICkgKiAoIGF5IC0gcHkgKSA+PSAwICYmXG5cdFx0XHQoIGJ4IC0gcHggKSAqICggY3kgLSBweSApIC0gKCBjeCAtIHB4ICkgKiAoIGJ5IC0gcHkgKSA+PSAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKCBhLCBiICkge1xuXG5cdHJldHVybiBhLm5leHQuaSAhPT0gYi5pICYmIGEucHJldi5pICE9PSBiLmkgJiYgISBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApICYmIC8vIGRvZXNuJ3QgaW50ZXJzZWN0IG90aGVyIGVkZ2VzXG5cdFx0KCBsb2NhbGx5SW5zaWRlKCBhLCBiICkgJiYgbG9jYWxseUluc2lkZSggYiwgYSApICYmIG1pZGRsZUluc2lkZSggYSwgYiApICYmIC8vIGxvY2FsbHkgdmlzaWJsZVxuXHRcdCggYXJlYSggYS5wcmV2LCBhLCBiLnByZXYgKSB8fCBhcmVhKCBhLCBiLnByZXYsIGIgKSApIHx8IC8vIGRvZXMgbm90IGNyZWF0ZSBvcHBvc2l0ZS1mYWNpbmcgc2VjdG9yc1xuXHRcdGVxdWFscyggYSwgYiApICYmIGFyZWEoIGEucHJldiwgYSwgYS5uZXh0ICkgPiAwICYmIGFyZWEoIGIucHJldiwgYiwgYi5uZXh0ICkgPiAwICk7IC8vIHNwZWNpYWwgemVyby1sZW5ndGggY2FzZVxuXG59XG5cbi8vIHNpZ25lZCBhcmVhIG9mIGEgdHJpYW5nbGVcbmZ1bmN0aW9uIGFyZWEoIHAsIHEsIHIgKSB7XG5cblx0cmV0dXJuICggcS55IC0gcC55ICkgKiAoIHIueCAtIHEueCApIC0gKCBxLnggLSBwLnggKSAqICggci55IC0gcS55ICk7XG5cbn1cblxuLy8gY2hlY2sgaWYgdHdvIHBvaW50cyBhcmUgZXF1YWxcbmZ1bmN0aW9uIGVxdWFscyggcDEsIHAyICkge1xuXG5cdHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7XG5cbn1cblxuLy8gY2hlY2sgaWYgdHdvIHNlZ21lbnRzIGludGVyc2VjdFxuZnVuY3Rpb24gaW50ZXJzZWN0cyggcDEsIHExLCBwMiwgcTIgKSB7XG5cblx0Y29uc3QgbzEgPSBzaWduKCBhcmVhKCBwMSwgcTEsIHAyICkgKTtcblx0Y29uc3QgbzIgPSBzaWduKCBhcmVhKCBwMSwgcTEsIHEyICkgKTtcblx0Y29uc3QgbzMgPSBzaWduKCBhcmVhKCBwMiwgcTIsIHAxICkgKTtcblx0Y29uc3QgbzQgPSBzaWduKCBhcmVhKCBwMiwgcTIsIHExICkgKTtcblxuXHRpZiAoIG8xICE9PSBvMiAmJiBvMyAhPT0gbzQgKSByZXR1cm4gdHJ1ZTsgLy8gZ2VuZXJhbCBjYXNlXG5cblx0aWYgKCBvMSA9PT0gMCAmJiBvblNlZ21lbnQoIHAxLCBwMiwgcTEgKSApIHJldHVybiB0cnVlOyAvLyBwMSwgcTEgYW5kIHAyIGFyZSBjb2xsaW5lYXIgYW5kIHAyIGxpZXMgb24gcDFxMVxuXHRpZiAoIG8yID09PSAwICYmIG9uU2VnbWVudCggcDEsIHEyLCBxMSApICkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcTIgYXJlIGNvbGxpbmVhciBhbmQgcTIgbGllcyBvbiBwMXExXG5cdGlmICggbzMgPT09IDAgJiYgb25TZWdtZW50KCBwMiwgcDEsIHEyICkgKSByZXR1cm4gdHJ1ZTsgLy8gcDIsIHEyIGFuZCBwMSBhcmUgY29sbGluZWFyIGFuZCBwMSBsaWVzIG9uIHAycTJcblx0aWYgKCBvNCA9PT0gMCAmJiBvblNlZ21lbnQoIHAyLCBxMSwgcTIgKSApIHJldHVybiB0cnVlOyAvLyBwMiwgcTIgYW5kIHExIGFyZSBjb2xsaW5lYXIgYW5kIHExIGxpZXMgb24gcDJxMlxuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG4vLyBmb3IgY29sbGluZWFyIHBvaW50cyBwLCBxLCByLCBjaGVjayBpZiBwb2ludCBxIGxpZXMgb24gc2VnbWVudCBwclxuZnVuY3Rpb24gb25TZWdtZW50KCBwLCBxLCByICkge1xuXG5cdHJldHVybiBxLnggPD0gTWF0aC5tYXgoIHAueCwgci54ICkgJiYgcS54ID49IE1hdGgubWluKCBwLngsIHIueCApICYmIHEueSA8PSBNYXRoLm1heCggcC55LCByLnkgKSAmJiBxLnkgPj0gTWF0aC5taW4oIHAueSwgci55ICk7XG5cbn1cblxuZnVuY3Rpb24gc2lnbiggbnVtICkge1xuXG5cdHJldHVybiBudW0gPiAwID8gMSA6IG51bSA8IDAgPyAtIDEgOiAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApIHtcblxuXHRsZXQgcCA9IGE7XG5cdGRvIHtcblxuXHRcdGlmICggcC5pICE9PSBhLmkgJiYgcC5uZXh0LmkgIT09IGEuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmXG5cdFx0XHRcdGludGVyc2VjdHMoIHAsIHAubmV4dCwgYSwgYiApICkgcmV0dXJuIHRydWU7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gYSApO1xuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgbG9jYWxseSBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGFyZWEoIGEucHJldiwgYSwgYS5uZXh0ICkgPCAwID9cblx0XHRhcmVhKCBhLCBiLCBhLm5leHQgKSA+PSAwICYmIGFyZWEoIGEsIGEucHJldiwgYiApID49IDAgOlxuXHRcdGFyZWEoIGEsIGIsIGEucHJldiApIDwgMCB8fCBhcmVhKCBhLCBhLm5leHQsIGIgKSA8IDA7XG5cbn1cblxuLy8gY2hlY2sgaWYgdGhlIG1pZGRsZSBwb2ludCBvZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBtaWRkbGVJbnNpZGUoIGEsIGIgKSB7XG5cblx0bGV0IHAgPSBhLFxuXHRcdGluc2lkZSA9IGZhbHNlO1xuXHRjb25zdCBweCA9ICggYS54ICsgYi54ICkgLyAyLFxuXHRcdHB5ID0gKCBhLnkgKyBiLnkgKSAvIDI7XG5cdGRvIHtcblxuXHRcdGlmICggKCAoIHAueSA+IHB5ICkgIT09ICggcC5uZXh0LnkgPiBweSApICkgJiYgcC5uZXh0LnkgIT09IHAueSAmJlxuXHRcdFx0XHQoIHB4IDwgKCBwLm5leHQueCAtIHAueCApICogKCBweSAtIHAueSApIC8gKCBwLm5leHQueSAtIHAueSApICsgcC54ICkgKVxuXHRcdFx0aW5zaWRlID0gISBpbnNpZGU7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gYSApO1xuXG5cdHJldHVybiBpbnNpZGU7XG5cbn1cblxuLy8gbGluayB0d28gcG9seWdvbiB2ZXJ0aWNlcyB3aXRoIGEgYnJpZGdlOyBpZiB0aGUgdmVydGljZXMgYmVsb25nIHRvIHRoZSBzYW1lIHJpbmcsIGl0IHNwbGl0cyBwb2x5Z29uIGludG8gdHdvO1xuLy8gaWYgb25lIGJlbG9uZ3MgdG8gdGhlIG91dGVyIHJpbmcgYW5kIGFub3RoZXIgdG8gYSBob2xlLCBpdCBtZXJnZXMgaXQgaW50byBhIHNpbmdsZSByaW5nXG5mdW5jdGlvbiBzcGxpdFBvbHlnb24oIGEsIGIgKSB7XG5cblx0Y29uc3QgYTIgPSBuZXcgTm9kZSggYS5pLCBhLngsIGEueSApLFxuXHRcdGIyID0gbmV3IE5vZGUoIGIuaSwgYi54LCBiLnkgKSxcblx0XHRhbiA9IGEubmV4dCxcblx0XHRicCA9IGIucHJldjtcblxuXHRhLm5leHQgPSBiO1xuXHRiLnByZXYgPSBhO1xuXG5cdGEyLm5leHQgPSBhbjtcblx0YW4ucHJldiA9IGEyO1xuXG5cdGIyLm5leHQgPSBhMjtcblx0YTIucHJldiA9IGIyO1xuXG5cdGJwLm5leHQgPSBiMjtcblx0YjIucHJldiA9IGJwO1xuXG5cdHJldHVybiBiMjtcblxufVxuXG4vLyBjcmVhdGUgYSBub2RlIGFuZCBvcHRpb25hbGx5IGxpbmsgaXQgd2l0aCBwcmV2aW91cyBvbmUgKGluIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gaW5zZXJ0Tm9kZSggaSwgeCwgeSwgbGFzdCApIHtcblxuXHRjb25zdCBwID0gbmV3IE5vZGUoIGksIHgsIHkgKTtcblxuXHRpZiAoICEgbGFzdCApIHtcblxuXHRcdHAucHJldiA9IHA7XG5cdFx0cC5uZXh0ID0gcDtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cC5uZXh0ID0gbGFzdC5uZXh0O1xuXHRcdHAucHJldiA9IGxhc3Q7XG5cdFx0bGFzdC5uZXh0LnByZXYgPSBwO1xuXHRcdGxhc3QubmV4dCA9IHA7XG5cblx0fVxuXG5cdHJldHVybiBwO1xuXG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGUoIHAgKSB7XG5cblx0cC5uZXh0LnByZXYgPSBwLnByZXY7XG5cdHAucHJldi5uZXh0ID0gcC5uZXh0O1xuXG5cdGlmICggcC5wcmV2WiApIHAucHJldloubmV4dFogPSBwLm5leHRaO1xuXHRpZiAoIHAubmV4dFogKSBwLm5leHRaLnByZXZaID0gcC5wcmV2WjtcblxufVxuXG5mdW5jdGlvbiBOb2RlKCBpLCB4LCB5ICkge1xuXG5cdC8vIHZlcnRleCBpbmRleCBpbiBjb29yZGluYXRlcyBhcnJheVxuXHR0aGlzLmkgPSBpO1xuXG5cdC8vIHZlcnRleCBjb29yZGluYXRlc1xuXHR0aGlzLnggPSB4O1xuXHR0aGlzLnkgPSB5O1xuXG5cdC8vIHByZXZpb3VzIGFuZCBuZXh0IHZlcnRleCBub2RlcyBpbiBhIHBvbHlnb24gcmluZ1xuXHR0aGlzLnByZXYgPSBudWxsO1xuXHR0aGlzLm5leHQgPSBudWxsO1xuXG5cdC8vIHotb3JkZXIgY3VydmUgdmFsdWVcblx0dGhpcy56ID0gbnVsbDtcblxuXHQvLyBwcmV2aW91cyBhbmQgbmV4dCBub2RlcyBpbiB6LW9yZGVyXG5cdHRoaXMucHJldlogPSBudWxsO1xuXHR0aGlzLm5leHRaID0gbnVsbDtcblxuXHQvLyBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGEgc3RlaW5lciBwb2ludFxuXHR0aGlzLnN0ZWluZXIgPSBmYWxzZTtcblxufVxuXG5mdW5jdGlvbiBzaWduZWRBcmVhKCBkYXRhLCBzdGFydCwgZW5kLCBkaW0gKSB7XG5cblx0bGV0IHN1bSA9IDA7XG5cdGZvciAoIGxldCBpID0gc3RhcnQsIGogPSBlbmQgLSBkaW07IGkgPCBlbmQ7IGkgKz0gZGltICkge1xuXG5cdFx0c3VtICs9ICggZGF0YVsgaiBdIC0gZGF0YVsgaSBdICkgKiAoIGRhdGFbIGkgKyAxIF0gKyBkYXRhWyBqICsgMSBdICk7XG5cdFx0aiA9IGk7XG5cblx0fVxuXG5cdHJldHVybiBzdW07XG5cbn1cblxuY2xhc3MgU2hhcGVVdGlscyB7XG5cblx0Ly8gY2FsY3VsYXRlIGFyZWEgb2YgdGhlIGNvbnRvdXIgcG9seWdvblxuXG5cdHN0YXRpYyBhcmVhKCBjb250b3VyICkge1xuXG5cdFx0Y29uc3QgbiA9IGNvbnRvdXIubGVuZ3RoO1xuXHRcdGxldCBhID0gMC4wO1xuXG5cdFx0Zm9yICggbGV0IHAgPSBuIC0gMSwgcSA9IDA7IHEgPCBuOyBwID0gcSArKyApIHtcblxuXHRcdFx0YSArPSBjb250b3VyWyBwIF0ueCAqIGNvbnRvdXJbIHEgXS55IC0gY29udG91clsgcSBdLnggKiBjb250b3VyWyBwIF0ueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhICogMC41O1xuXG5cdH1cblxuXHRzdGF0aWMgaXNDbG9ja1dpc2UoIHB0cyApIHtcblxuXHRcdHJldHVybiBTaGFwZVV0aWxzLmFyZWEoIHB0cyApIDwgMDtcblxuXHR9XG5cblx0c3RhdGljIHRyaWFuZ3VsYXRlU2hhcGUoIGNvbnRvdXIsIGhvbGVzICkge1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTsgLy8gZmxhdCBhcnJheSBvZiB2ZXJ0aWNlcyBsaWtlIFsgeDAseTAsIHgxLHkxLCB4Mix5MiwgLi4uIF1cblx0XHRjb25zdCBob2xlSW5kaWNlcyA9IFtdOyAvLyBhcnJheSBvZiBob2xlIGluZGljZXNcblx0XHRjb25zdCBmYWNlcyA9IFtdOyAvLyBmaW5hbCBhcnJheSBvZiB2ZXJ0ZXggaW5kaWNlcyBsaWtlIFsgWyBhLGIsZCBdLCBbIGIsYyxkIF0gXVxuXG5cdFx0cmVtb3ZlRHVwRW5kUHRzKCBjb250b3VyICk7XG5cdFx0YWRkQ29udG91ciggdmVydGljZXMsIGNvbnRvdXIgKTtcblxuXHRcdC8vXG5cblx0XHRsZXQgaG9sZUluZGV4ID0gY29udG91ci5sZW5ndGg7XG5cblx0XHRob2xlcy5mb3JFYWNoKCByZW1vdmVEdXBFbmRQdHMgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGhvbGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aG9sZUluZGljZXMucHVzaCggaG9sZUluZGV4ICk7XG5cdFx0XHRob2xlSW5kZXggKz0gaG9sZXNbIGkgXS5sZW5ndGg7XG5cdFx0XHRhZGRDb250b3VyKCB2ZXJ0aWNlcywgaG9sZXNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHRyaWFuZ2xlcyA9IEVhcmN1dC50cmlhbmd1bGF0ZSggdmVydGljZXMsIGhvbGVJbmRpY2VzICk7XG5cblx0XHQvL1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRmYWNlcy5wdXNoKCB0cmlhbmdsZXMuc2xpY2UoIGksIGkgKyAzICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWNlcztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRHVwRW5kUHRzKCBwb2ludHMgKSB7XG5cblx0Y29uc3QgbCA9IHBvaW50cy5sZW5ndGg7XG5cblx0aWYgKCBsID4gMiAmJiBwb2ludHNbIGwgLSAxIF0uZXF1YWxzKCBwb2ludHNbIDAgXSApICkge1xuXG5cdFx0cG9pbnRzLnBvcCgpO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBhZGRDb250b3VyKCB2ZXJ0aWNlcywgY29udG91ciApIHtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb250b3VyLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdHZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS54ICk7XG5cdFx0dmVydGljZXMucHVzaCggY29udG91clsgaSBdLnkgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGV4dHJ1ZGVkIGdlb21ldHJ5IGZyb20gYSBwYXRoIHNoYXBlLlxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKlxuICogIGN1cnZlU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgcG9pbnRzIG9uIHRoZSBjdXJ2ZXNcbiAqICBzdGVwczogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgZm9yIHotc2lkZSBleHRydXNpb25zIC8gdXNlZCBmb3Igc3ViZGl2aWRpbmcgc2VnbWVudHMgb2YgZXh0cnVkZSBzcGxpbmUgdG9vXG4gKiAgZGVwdGg6IDxmbG9hdD4sIC8vIERlcHRoIHRvIGV4dHJ1ZGUgdGhlIHNoYXBlXG4gKlxuICogIGJldmVsRW5hYmxlZDogPGJvb2w+LCAvLyB0dXJuIG9uIGJldmVsXG4gKiAgYmV2ZWxUaGlja25lc3M6IDxmbG9hdD4sIC8vIGhvdyBkZWVwIGludG8gdGhlIG9yaWdpbmFsIHNoYXBlIGJldmVsIGdvZXNcbiAqICBiZXZlbFNpemU6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSBzaGFwZSBvdXRsaW5lIChpbmNsdWRpbmcgYmV2ZWxPZmZzZXQpIGlzIGJldmVsXG4gKiAgYmV2ZWxPZmZzZXQ6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSBzaGFwZSBvdXRsaW5lIGRvZXMgYmV2ZWwgc3RhcnRcbiAqICBiZXZlbFNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIGJldmVsIGxheWVyc1xuICpcbiAqICBleHRydWRlUGF0aDogPFRIUkVFLkN1cnZlPiAvLyBjdXJ2ZSB0byBleHRydWRlIHNoYXBlIGFsb25nXG4gKlxuICogIFVWR2VuZXJhdG9yOiA8T2JqZWN0PiAvLyBvYmplY3QgdGhhdCBwcm92aWRlcyBVViBnZW5lcmF0b3IgZnVuY3Rpb25zXG4gKlxuICogfVxuICovXG5cbmNsYXNzIEV4dHJ1ZGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3Rvciggc2hhcGVzID0gbmV3IFNoYXBlKCBbIG5ldyBWZWN0b3IyKCAwLjUsIDAuNSApLCBuZXcgVmVjdG9yMiggLSAwLjUsIDAuNSApLCBuZXcgVmVjdG9yMiggLSAwLjUsIC0gMC41ICksIG5ldyBWZWN0b3IyKCAwLjUsIC0gMC41ICkgXSApLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0V4dHJ1ZGVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRcdG9wdGlvbnM6IG9wdGlvbnNcblx0XHR9O1xuXG5cdFx0c2hhcGVzID0gQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPyBzaGFwZXMgOiBbIHNoYXBlcyBdO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgdmVydGljZXNBcnJheSA9IFtdO1xuXHRcdGNvbnN0IHV2QXJyYXkgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXHRcdFx0YWRkU2hhcGUoIHNoYXBlICk7XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlc0FycmF5LCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2QXJyYXksIDIgKSApO1xuXG5cdFx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdFx0Ly8gZnVuY3Rpb25zXG5cblx0XHRmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7XG5cblx0XHRcdGNvbnN0IHBsYWNlaG9sZGVyID0gW107XG5cblx0XHRcdC8vIG9wdGlvbnNcblxuXHRcdFx0Y29uc3QgY3VydmVTZWdtZW50cyA9IG9wdGlvbnMuY3VydmVTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jdXJ2ZVNlZ21lbnRzIDogMTI7XG5cdFx0XHRjb25zdCBzdGVwcyA9IG9wdGlvbnMuc3RlcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlcHMgOiAxO1xuXHRcdFx0bGV0IGRlcHRoID0gb3B0aW9ucy5kZXB0aCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXB0aCA6IDE7XG5cblx0XHRcdGxldCBiZXZlbEVuYWJsZWQgPSBvcHRpb25zLmJldmVsRW5hYmxlZCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbEVuYWJsZWQgOiB0cnVlO1xuXHRcdFx0bGV0IGJldmVsVGhpY2tuZXNzID0gb3B0aW9ucy5iZXZlbFRoaWNrbmVzcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFRoaWNrbmVzcyA6IDAuMjtcblx0XHRcdGxldCBiZXZlbFNpemUgPSBvcHRpb25zLmJldmVsU2l6ZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFNpemUgOiBiZXZlbFRoaWNrbmVzcyAtIDAuMTtcblx0XHRcdGxldCBiZXZlbE9mZnNldCA9IG9wdGlvbnMuYmV2ZWxPZmZzZXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxPZmZzZXQgOiAwO1xuXHRcdFx0bGV0IGJldmVsU2VnbWVudHMgPSBvcHRpb25zLmJldmVsU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxTZWdtZW50cyA6IDM7XG5cblx0XHRcdGNvbnN0IGV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aDtcblxuXHRcdFx0Y29uc3QgdXZnZW4gPSBvcHRpb25zLlVWR2VuZXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLlVWR2VuZXJhdG9yIDogV29ybGRVVkdlbmVyYXRvcjtcblxuXHRcdFx0Ly8gZGVwcmVjYXRlZCBvcHRpb25zXG5cblx0XHRcdGlmICggb3B0aW9ucy5hbW91bnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IGFtb3VudCBoYXMgYmVlbiByZW5hbWVkIHRvIGRlcHRoLicgKTtcblx0XHRcdFx0ZGVwdGggPSBvcHRpb25zLmFtb3VudDtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRsZXQgZXh0cnVkZVB0cywgZXh0cnVkZUJ5UGF0aCA9IGZhbHNlO1xuXHRcdFx0bGV0IHNwbGluZVR1YmUsIGJpbm9ybWFsLCBub3JtYWwsIHBvc2l0aW9uMjtcblxuXHRcdFx0aWYgKCBleHRydWRlUGF0aCApIHtcblxuXHRcdFx0XHRleHRydWRlUHRzID0gZXh0cnVkZVBhdGguZ2V0U3BhY2VkUG9pbnRzKCBzdGVwcyApO1xuXG5cdFx0XHRcdGV4dHJ1ZGVCeVBhdGggPSB0cnVlO1xuXHRcdFx0XHRiZXZlbEVuYWJsZWQgPSBmYWxzZTsgLy8gYmV2ZWxzIG5vdCBzdXBwb3J0ZWQgZm9yIHBhdGggZXh0cnVzaW9uXG5cblx0XHRcdFx0Ly8gU0VUVVAgVE5CIHZhcmlhYmxlc1xuXG5cdFx0XHRcdC8vIFRPRE8xIC0gaGF2ZSBhIC5pc0Nsb3NlZCBpbiBzcGxpbmU/XG5cblx0XHRcdFx0c3BsaW5lVHViZSA9IGV4dHJ1ZGVQYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHN0ZXBzLCBmYWxzZSApO1xuXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKHNwbGluZVR1YmUsICdzcGxpbmVUdWJlJywgc3BsaW5lVHViZS5ub3JtYWxzLmxlbmd0aCwgJ3N0ZXBzJywgc3RlcHMsICdleHRydWRlUHRzJywgZXh0cnVkZVB0cy5sZW5ndGgpO1xuXG5cdFx0XHRcdGJpbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdFx0bm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdFx0cG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYWZlZ3VhcmRzIGlmIGJldmVscyBhcmUgbm90IGVuYWJsZWRcblxuXHRcdFx0aWYgKCAhIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHRiZXZlbFNlZ21lbnRzID0gMDtcblx0XHRcdFx0YmV2ZWxUaGlja25lc3MgPSAwO1xuXHRcdFx0XHRiZXZlbFNpemUgPSAwO1xuXHRcdFx0XHRiZXZlbE9mZnNldCA9IDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gVmFyaWFibGVzIGluaXRpYWxpemF0aW9uXG5cblx0XHRcdGNvbnN0IHNoYXBlUG9pbnRzID0gc2hhcGUuZXh0cmFjdFBvaW50cyggY3VydmVTZWdtZW50cyApO1xuXG5cdFx0XHRsZXQgdmVydGljZXMgPSBzaGFwZVBvaW50cy5zaGFwZTtcblx0XHRcdGNvbnN0IGhvbGVzID0gc2hhcGVQb2ludHMuaG9sZXM7XG5cblx0XHRcdGNvbnN0IHJldmVyc2UgPSAhIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHZlcnRpY2VzICk7XG5cblx0XHRcdGlmICggcmV2ZXJzZSApIHtcblxuXHRcdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdFx0XHQvLyBNYXliZSB3ZSBzaG91bGQgYWxzbyBjaGVjayBpZiBob2xlcyBhcmUgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiwganVzdCB0byBiZSBzYWZlIC4uLlxuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggYWhvbGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aG9sZXNbIGggXSA9IGFob2xlLnJldmVyc2UoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0XHRjb25zdCBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggdmVydGljZXMsIGhvbGVzICk7XG5cblx0XHRcdC8qIFZlcnRpY2VzICovXG5cblx0XHRcdGNvbnN0IGNvbnRvdXIgPSB2ZXJ0aWNlczsgLy8gdmVydGljZXMgaGFzIGFsbCBwb2ludHMgYnV0IGNvbnRvdXIgaGFzIG9ubHkgcG9pbnRzIG9mIGNpcmN1bWZlcmVuY2VcblxuXHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLmNvbmNhdCggYWhvbGUgKTtcblxuXHRcdFx0fVxuXG5cblx0XHRcdGZ1bmN0aW9uIHNjYWxlUHQyKCBwdCwgdmVjLCBzaXplICkge1xuXG5cdFx0XHRcdGlmICggISB2ZWMgKSBjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiB2ZWMgZG9lcyBub3QgZXhpc3QnICk7XG5cblx0XHRcdFx0cmV0dXJuIHZlYy5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKCBzaXplICkuYWRkKCBwdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHZsZW4gPSB2ZXJ0aWNlcy5sZW5ndGgsIGZsZW4gPSBmYWNlcy5sZW5ndGg7XG5cblxuXHRcdFx0Ly8gRmluZCBkaXJlY3Rpb25zIGZvciBwb2ludCBtb3ZlbWVudFxuXG5cblx0XHRcdGZ1bmN0aW9uIGdldEJldmVsVmVjKCBpblB0LCBpblByZXYsIGluTmV4dCApIHtcblxuXHRcdFx0XHQvLyBjb21wdXRlcyBmb3IgaW5QdCB0aGUgY29ycmVzcG9uZGluZyBwb2ludCBpblB0JyBvbiBhIG5ldyBjb250b3VyXG5cdFx0XHRcdC8vICAgc2hpZnRlZCBieSAxIHVuaXQgKGxlbmd0aCBvZiBub3JtYWxpemVkIHZlY3RvcikgdG8gdGhlIGxlZnRcblx0XHRcdFx0Ly8gaWYgd2Ugd2FsayBhbG9uZyBjb250b3VyIGNsb2Nrd2lzZSwgdGhpcyBuZXcgY29udG91ciBpcyBvdXRzaWRlIHRoZSBvbGQgb25lXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIGluUHQnIGlzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byBsaW5lcyBwYXJhbGxlbCB0byB0aGUgdHdvXG5cdFx0XHRcdC8vICBhZGphY2VudCBlZGdlcyBvZiBpblB0IGF0IGEgZGlzdGFuY2Ugb2YgMSB1bml0IG9uIHRoZSBsZWZ0IHNpZGUuXG5cblx0XHRcdFx0bGV0IHZfdHJhbnNfeCwgdl90cmFuc195LCBzaHJpbmtfYnk7IC8vIHJlc3VsdGluZyB0cmFuc2xhdGlvbiB2ZWN0b3IgZm9yIGluUHRcblxuXHRcdFx0XHQvLyBnb29kIHJlYWRpbmcgZm9yIGdlb21ldHJ5IGFsZ29yaXRobXMgKGhlcmU6IGxpbmUtbGluZSBpbnRlcnNlY3Rpb24pXG5cdFx0XHRcdC8vIGh0dHA6Ly9nZW9tYWxnb3JpdGhtcy5jb20vYTA1LV9pbnRlcnNlY3QtMS5odG1sXG5cblx0XHRcdFx0Y29uc3Qgdl9wcmV2X3ggPSBpblB0LnggLSBpblByZXYueCxcblx0XHRcdFx0XHR2X3ByZXZfeSA9IGluUHQueSAtIGluUHJldi55O1xuXHRcdFx0XHRjb25zdCB2X25leHRfeCA9IGluTmV4dC54IC0gaW5QdC54LFxuXHRcdFx0XHRcdHZfbmV4dF95ID0gaW5OZXh0LnkgLSBpblB0Lnk7XG5cblx0XHRcdFx0Y29uc3Qgdl9wcmV2X2xlbnNxID0gKCB2X3ByZXZfeCAqIHZfcHJldl94ICsgdl9wcmV2X3kgKiB2X3ByZXZfeSApO1xuXG5cdFx0XHRcdC8vIGNoZWNrIGZvciBjb2xsaW5lYXIgZWRnZXNcblx0XHRcdFx0Y29uc3QgY29sbGluZWFyMCA9ICggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBjb2xsaW5lYXIwICkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdC8vIG5vdCBjb2xsaW5lYXJcblxuXHRcdFx0XHRcdC8vIGxlbmd0aCBvZiB2ZWN0b3JzIGZvciBub3JtYWxpemluZ1xuXG5cdFx0XHRcdFx0Y29uc3Qgdl9wcmV2X2xlbiA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxICk7XG5cdFx0XHRcdFx0Y29uc3Qgdl9uZXh0X2xlbiA9IE1hdGguc3FydCggdl9uZXh0X3ggKiB2X25leHRfeCArIHZfbmV4dF95ICogdl9uZXh0X3kgKTtcblxuXHRcdFx0XHRcdC8vIHNoaWZ0IGFkamFjZW50IHBvaW50cyBieSB1bml0IHZlY3RvcnMgdG8gdGhlIGxlZnRcblxuXHRcdFx0XHRcdGNvbnN0IHB0UHJldlNoaWZ0X3ggPSAoIGluUHJldi54IC0gdl9wcmV2X3kgLyB2X3ByZXZfbGVuICk7XG5cdFx0XHRcdFx0Y29uc3QgcHRQcmV2U2hpZnRfeSA9ICggaW5QcmV2LnkgKyB2X3ByZXZfeCAvIHZfcHJldl9sZW4gKTtcblxuXHRcdFx0XHRcdGNvbnN0IHB0TmV4dFNoaWZ0X3ggPSAoIGluTmV4dC54IC0gdl9uZXh0X3kgLyB2X25leHRfbGVuICk7XG5cdFx0XHRcdFx0Y29uc3QgcHROZXh0U2hpZnRfeSA9ICggaW5OZXh0LnkgKyB2X25leHRfeCAvIHZfbmV4dF9sZW4gKTtcblxuXHRcdFx0XHRcdC8vIHNjYWxpbmcgZmFjdG9yIGZvciB2X3ByZXYgdG8gaW50ZXJzZWN0aW9uIHBvaW50XG5cblx0XHRcdFx0XHRjb25zdCBzZiA9ICggKCBwdE5leHRTaGlmdF94IC0gcHRQcmV2U2hpZnRfeCApICogdl9uZXh0X3kgLVxuXHRcdFx0XHRcdFx0XHQoIHB0TmV4dFNoaWZ0X3kgLSBwdFByZXZTaGlmdF95ICkgKiB2X25leHRfeCApIC9cblx0XHRcdFx0XHRcdCggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0XHRcdC8vIHZlY3RvciBmcm9tIGluUHQgdG8gaW50ZXJzZWN0aW9uIHBvaW50XG5cblx0XHRcdFx0XHR2X3RyYW5zX3ggPSAoIHB0UHJldlNoaWZ0X3ggKyB2X3ByZXZfeCAqIHNmIC0gaW5QdC54ICk7XG5cdFx0XHRcdFx0dl90cmFuc195ID0gKCBwdFByZXZTaGlmdF95ICsgdl9wcmV2X3kgKiBzZiAtIGluUHQueSApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qgbm9ybWFsaXplISwgb3RoZXJ3aXNlIHNoYXJwIGNvcm5lcnMgYmVjb21lIHVnbHlcblx0XHRcdFx0XHQvLyAgYnV0IHByZXZlbnQgY3Jhenkgc3Bpa2VzXG5cdFx0XHRcdFx0Y29uc3Qgdl90cmFuc19sZW5zcSA9ICggdl90cmFuc194ICogdl90cmFuc194ICsgdl90cmFuc195ICogdl90cmFuc195ICk7XG5cdFx0XHRcdFx0aWYgKCB2X3RyYW5zX2xlbnNxIDw9IDIgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBuZXcgVmVjdG9yMiggdl90cmFuc194LCB2X3RyYW5zX3kgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl90cmFuc19sZW5zcSAvIDIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gaGFuZGxlIHNwZWNpYWwgY2FzZSBvZiBjb2xsaW5lYXIgZWRnZXNcblxuXHRcdFx0XHRcdGxldCBkaXJlY3Rpb25fZXEgPSBmYWxzZTsgLy8gYXNzdW1lczogb3Bwb3NpdGVcblxuXHRcdFx0XHRcdGlmICggdl9wcmV2X3ggPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB2X25leHRfeCA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGlmICggdl9wcmV2X3ggPCAtIE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdl9uZXh0X3ggPCAtIE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBNYXRoLnNpZ24oIHZfcHJldl95ICkgPT09IE1hdGguc2lnbiggdl9uZXh0X3kgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGRpcmVjdGlvbl9lcSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzZXF1ZW5jZVwiKTtcblx0XHRcdFx0XHRcdHZfdHJhbnNfeCA9IC0gdl9wcmV2X3k7XG5cdFx0XHRcdFx0XHR2X3RyYW5zX3kgPSB2X3ByZXZfeDtcblx0XHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcIldhcm5pbmc6IGxpbmVzIGFyZSBhIHN0cmFpZ2h0IHNwaWtlXCIpO1xuXHRcdFx0XHRcdFx0dl90cmFuc194ID0gdl9wcmV2X3g7XG5cdFx0XHRcdFx0XHR2X3RyYW5zX3kgPSB2X3ByZXZfeTtcblx0XHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxIC8gMiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoIHZfdHJhbnNfeCAvIHNocmlua19ieSwgdl90cmFuc195IC8gc2hyaW5rX2J5ICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHRjb25zdCBjb250b3VyTW92ZW1lbnRzID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkgKyssIGogKyssIGsgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBqID09PSBpbCApIGogPSAwO1xuXHRcdFx0XHRpZiAoIGsgPT09IGlsICkgayA9IDA7XG5cblx0XHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZygnaSxqLGsnLCBpLCBqICwgaylcblxuXHRcdFx0XHRjb250b3VyTW92ZW1lbnRzWyBpIF0gPSBnZXRCZXZlbFZlYyggY29udG91clsgaSBdLCBjb250b3VyWyBqIF0sIGNvbnRvdXJbIGsgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGhvbGVzTW92ZW1lbnRzID0gW107XG5cdFx0XHRsZXQgb25lSG9sZU1vdmVtZW50cywgdmVydGljZXNNb3ZlbWVudHMgPSBjb250b3VyTW92ZW1lbnRzLmNvbmNhdCgpO1xuXG5cdFx0XHRmb3IgKCBsZXQgaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYWhvbGUgPSBob2xlc1sgaCBdO1xuXG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoLCBqID0gaWwgLSAxLCBrID0gaSArIDE7IGkgPCBpbDsgaSArKywgaiArKywgayArKyApIHtcblxuXHRcdFx0XHRcdGlmICggaiA9PT0gaWwgKSBqID0gMDtcblx0XHRcdFx0XHRpZiAoIGsgPT09IGlsICkgayA9IDA7XG5cblx0XHRcdFx0XHQvLyAgKGopLS0tKGkpLS0tKGspXG5cdFx0XHRcdFx0b25lSG9sZU1vdmVtZW50c1sgaSBdID0gZ2V0QmV2ZWxWZWMoIGFob2xlWyBpIF0sIGFob2xlWyBqIF0sIGFob2xlWyBrIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aG9sZXNNb3ZlbWVudHMucHVzaCggb25lSG9sZU1vdmVtZW50cyApO1xuXHRcdFx0XHR2ZXJ0aWNlc01vdmVtZW50cyA9IHZlcnRpY2VzTW92ZW1lbnRzLmNvbmNhdCggb25lSG9sZU1vdmVtZW50cyApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0Ly8gTG9vcCBiZXZlbFNlZ21lbnRzLCAxIGZvciB0aGUgZnJvbnQsIDEgZm9yIHRoZSBiYWNrXG5cblx0XHRcdGZvciAoIGxldCBiID0gMDsgYiA8IGJldmVsU2VnbWVudHM7IGIgKysgKSB7XG5cblx0XHRcdFx0Ly9mb3IgKCBiID0gYmV2ZWxTZWdtZW50czsgYiA+IDA7IGIgLS0gKSB7XG5cblx0XHRcdFx0Y29uc3QgdCA9IGIgLyBiZXZlbFNlZ21lbnRzO1xuXHRcdFx0XHRjb25zdCB6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7XG5cdFx0XHRcdGNvbnN0IGJzID0gYmV2ZWxTaXplICogTWF0aC5zaW4oIHQgKiBNYXRoLlBJIC8gMiApICsgYmV2ZWxPZmZzZXQ7XG5cblx0XHRcdFx0Ly8gY29udHJhY3Qgc2hhcGVcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZlcnQgPSBzY2FsZVB0MiggY29udG91clsgaSBdLCBjb250b3VyTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbIGggXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCAtIHogKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgYnMgPSBiZXZlbFNpemUgKyBiZXZlbE9mZnNldDtcblxuXHRcdFx0Ly8gQmFjayBmYWNpbmcgdmVydGljZXNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB2ZXJ0ID0gYmV2ZWxFbmFibGVkID8gc2NhbGVQdDIoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzTW92ZW1lbnRzWyBpIF0sIGJzICkgOiB2ZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIDAgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyAwIF0ueSwgZXh0cnVkZVB0c1sgMCBdLnggKTtcblxuXHRcdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcblx0XHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgMCBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xuXG5cdFx0XHRcdFx0cG9zaXRpb24yLmNvcHkoIGV4dHJ1ZGVQdHNbIDAgXSApLmFkZCggbm9ybWFsICkuYWRkKCBiaW5vcm1hbCApO1xuXG5cdFx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgc3RlcHBlZCB2ZXJ0aWNlcy4uLlxuXHRcdFx0Ly8gSW5jbHVkaW5nIGZyb250IGZhY2luZyB2ZXJ0aWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgcyA9IDE7IHMgPD0gc3RlcHM7IHMgKysgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZlcnQgPSBiZXZlbEVuYWJsZWQgPyBzY2FsZVB0MiggdmVydGljZXNbIGkgXSwgdmVydGljZXNNb3ZlbWVudHNbIGkgXSwgYnMgKSA6IHZlcnRpY2VzWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoIC8gc3RlcHMgKiBzICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyB2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueSwgZXh0cnVkZVB0c1sgcyAtIDEgXS54ICk7XG5cblx0XHRcdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIHMgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcblx0XHRcdFx0XHRcdGJpbm9ybWFsLmNvcHkoIHNwbGluZVR1YmUuYmlub3JtYWxzWyBzIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC55ICk7XG5cblx0XHRcdFx0XHRcdHBvc2l0aW9uMi5jb3B5KCBleHRydWRlUHRzWyBzIF0gKS5hZGQoIG5vcm1hbCApLmFkZCggYmlub3JtYWwgKTtcblxuXHRcdFx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cblx0XHRcdC8vIEFkZCBiZXZlbCBzZWdtZW50cyBwbGFuZXNcblxuXHRcdFx0Ly9mb3IgKCBiID0gMTsgYiA8PSBiZXZlbFNlZ21lbnRzOyBiICsrICkge1xuXHRcdFx0Zm9yICggbGV0IGIgPSBiZXZlbFNlZ21lbnRzIC0gMTsgYiA+PSAwOyBiIC0tICkge1xuXG5cdFx0XHRcdGNvbnN0IHQgPSBiIC8gYmV2ZWxTZWdtZW50cztcblx0XHRcdFx0Y29uc3QgeiA9IGJldmVsVGhpY2tuZXNzICogTWF0aC5jb3MoIHQgKiBNYXRoLlBJIC8gMiApO1xuXHRcdFx0XHRjb25zdCBicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKSArIGJldmVsT2Zmc2V0O1xuXG5cdFx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gc2NhbGVQdDIoIGNvbnRvdXJbIGkgXSwgY29udG91ck1vdmVtZW50c1sgaSBdLCBicyApO1xuXHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCArIHogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gZXhwYW5kIGhvbGVzXG5cblx0XHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYWhvbGUgPSBob2xlc1sgaCBdO1xuXHRcdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBob2xlc01vdmVtZW50c1sgaCBdO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gc2NhbGVQdDIoIGFob2xlWyBpIF0sIG9uZUhvbGVNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoICsgeiApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgc3RlcHMgLSAxIF0ueSwgZXh0cnVkZVB0c1sgc3RlcHMgLSAxIF0ueCArIHogKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvKiBGYWNlcyAqL1xuXG5cdFx0XHQvLyBUb3AgYW5kIGJvdHRvbSBmYWNlc1xuXG5cdFx0XHRidWlsZExpZEZhY2VzKCk7XG5cblx0XHRcdC8vIFNpZGVzIGZhY2VzXG5cblx0XHRcdGJ1aWxkU2lkZUZhY2VzKCk7XG5cblxuXHRcdFx0Ly8vLy8gIEludGVybmFsIGZ1bmN0aW9uc1xuXG5cdFx0XHRmdW5jdGlvbiBidWlsZExpZEZhY2VzKCkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXG5cdFx0XHRcdGlmICggYmV2ZWxFbmFibGVkICkge1xuXG5cdFx0XHRcdFx0bGV0IGxheWVyID0gMDsgLy8gc3RlcHMgKyAxXG5cdFx0XHRcdFx0bGV0IG9mZnNldCA9IHZsZW4gKiBsYXllcjtcblxuXHRcdFx0XHRcdC8vIEJvdHRvbSBmYWNlc1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZmFjZSA9IGZhY2VzWyBpIF07XG5cdFx0XHRcdFx0XHRmMyggZmFjZVsgMiBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDAgXSArIG9mZnNldCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGF5ZXIgPSBzdGVwcyArIGJldmVsU2VnbWVudHMgKiAyO1xuXHRcdFx0XHRcdG9mZnNldCA9IHZsZW4gKiBsYXllcjtcblxuXHRcdFx0XHRcdC8vIFRvcCBmYWNlc1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZmFjZSA9IGZhY2VzWyBpIF07XG5cdFx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDIgXSArIG9mZnNldCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDIgXSwgZmFjZVsgMSBdLCBmYWNlWyAwIF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFRvcCBmYWNlc1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZmFjZSA9IGZhY2VzWyBpIF07XG5cdFx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAxIF0gKyB2bGVuICogc3RlcHMsIGZhY2VbIDIgXSArIHZsZW4gKiBzdGVwcyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5hZGRHcm91cCggc3RhcnQsIHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMyAtIHN0YXJ0LCAwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ3JlYXRlIGZhY2VzIGZvciB0aGUgei1zaWRlcyBvZiB0aGUgc2hhcGVcblxuXHRcdFx0ZnVuY3Rpb24gYnVpbGRTaWRlRmFjZXMoKSB7XG5cblx0XHRcdFx0Y29uc3Qgc3RhcnQgPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHRcdGxldCBsYXllcm9mZnNldCA9IDA7XG5cdFx0XHRcdHNpZGV3YWxscyggY29udG91ciwgbGF5ZXJvZmZzZXQgKTtcblx0XHRcdFx0bGF5ZXJvZmZzZXQgKz0gY29udG91ci5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYWhvbGUgPSBob2xlc1sgaCBdO1xuXHRcdFx0XHRcdHNpZGV3YWxscyggYWhvbGUsIGxheWVyb2Zmc2V0ICk7XG5cblx0XHRcdFx0XHQvLywgdHJ1ZVxuXHRcdFx0XHRcdGxheWVyb2Zmc2V0ICs9IGFob2xlLmxlbmd0aDtcblxuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRzY29wZS5hZGRHcm91cCggc3RhcnQsIHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMyAtIHN0YXJ0LCAxICk7XG5cblxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICkge1xuXG5cdFx0XHRcdGxldCBpID0gY29udG91ci5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCAtLSBpID49IDAgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBqID0gaTtcblx0XHRcdFx0XHRsZXQgayA9IGkgLSAxO1xuXHRcdFx0XHRcdGlmICggayA8IDAgKSBrID0gY29udG91ci5sZW5ndGggLSAxO1xuXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnYicsIGksaiwgaS0xLCBrLHZlcnRpY2VzLmxlbmd0aCk7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgcyA9IDAsIHNsID0gKCBzdGVwcyArIGJldmVsU2VnbWVudHMgKiAyICk7IHMgPCBzbDsgcyArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgc2xlbjEgPSB2bGVuICogcztcblx0XHRcdFx0XHRcdGNvbnN0IHNsZW4yID0gdmxlbiAqICggcyArIDEgKTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgYSA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4xLFxuXHRcdFx0XHRcdFx0XHRiID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjEsXG5cdFx0XHRcdFx0XHRcdGMgPSBsYXllcm9mZnNldCArIGsgKyBzbGVuMixcblx0XHRcdFx0XHRcdFx0ZCA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4yO1xuXG5cdFx0XHRcdFx0XHRmNCggYSwgYiwgYywgZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiB2KCB4LCB5LCB6ICkge1xuXG5cdFx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHggKTtcblx0XHRcdFx0cGxhY2Vob2xkZXIucHVzaCggeSApO1xuXHRcdFx0XHRwbGFjZWhvbGRlci5wdXNoKCB6ICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHRmdW5jdGlvbiBmMyggYSwgYiwgYyApIHtcblxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGEgKTtcblx0XHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRcdGFkZFZlcnRleCggYyApO1xuXG5cdFx0XHRcdGNvbnN0IG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdFx0Y29uc3QgdXZzID0gdXZnZW4uZ2VuZXJhdGVUb3BVViggc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEgKTtcblxuXHRcdFx0XHRhZGRVViggdXZzWyAwIF0gKTtcblx0XHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRcdGFkZFVWKCB1dnNbIDIgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGY0KCBhLCBiLCBjLCBkICkge1xuXG5cdFx0XHRcdGFkZFZlcnRleCggYSApO1xuXHRcdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcblx0XHRcdFx0YWRkVmVydGV4KCBkICk7XG5cblx0XHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRcdGFkZFZlcnRleCggYyApO1xuXHRcdFx0XHRhZGRWZXJ0ZXgoIGQgKTtcblxuXG5cdFx0XHRcdGNvbnN0IG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdFx0Y29uc3QgdXZzID0gdXZnZW4uZ2VuZXJhdGVTaWRlV2FsbFVWKCBzY29wZSwgdmVydGljZXNBcnJheSwgbmV4dEluZGV4IC0gNiwgbmV4dEluZGV4IC0gMywgbmV4dEluZGV4IC0gMiwgbmV4dEluZGV4IC0gMSApO1xuXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDAgXSApO1xuXHRcdFx0XHRhZGRVViggdXZzWyAxIF0gKTtcblx0XHRcdFx0YWRkVVYoIHV2c1sgMyBdICk7XG5cblx0XHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRcdGFkZFVWKCB1dnNbIDIgXSApO1xuXHRcdFx0XHRhZGRVViggdXZzWyAzIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBhZGRWZXJ0ZXgoIGluZGV4ICkge1xuXG5cdFx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDAgXSApO1xuXHRcdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAxIF0gKTtcblx0XHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMiBdICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHRmdW5jdGlvbiBhZGRVViggdmVjdG9yMiApIHtcblxuXHRcdFx0XHR1dkFycmF5LnB1c2goIHZlY3RvcjIueCApO1xuXHRcdFx0XHR1dkFycmF5LnB1c2goIHZlY3RvcjIueSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHRoaXMucGFyYW1ldGVycy5vcHRpb25zO1xuXG5cdFx0cmV0dXJuIHRvSlNPTiQxKCBzaGFwZXMsIG9wdGlvbnMsIGRhdGEgKTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhLCBzaGFwZXMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeVNoYXBlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IGRhdGEuc2hhcGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgZGF0YS5zaGFwZXNbIGogXSBdO1xuXG5cdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZXh0cnVkZVBhdGggPSBkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGg7XG5cblx0XHRpZiAoIGV4dHJ1ZGVQYXRoICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG5ldyBDdXJ2ZXNbIGV4dHJ1ZGVQYXRoLnR5cGUgXSgpLmZyb21KU09OKCBleHRydWRlUGF0aCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBFeHRydWRlR2VvbWV0cnkoIGdlb21ldHJ5U2hhcGVzLCBkYXRhLm9wdGlvbnMgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgV29ybGRVVkdlbmVyYXRvciA9IHtcblxuXHRnZW5lcmF0ZVRvcFVWOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCB2ZXJ0aWNlcywgaW5kZXhBLCBpbmRleEIsIGluZGV4QyApIHtcblxuXHRcdGNvbnN0IGFfeCA9IHZlcnRpY2VzWyBpbmRleEEgKiAzIF07XG5cdFx0Y29uc3QgYV95ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAxIF07XG5cdFx0Y29uc3QgYl94ID0gdmVydGljZXNbIGluZGV4QiAqIDMgXTtcblx0XHRjb25zdCBiX3kgPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDEgXTtcblx0XHRjb25zdCBjX3ggPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyBdO1xuXHRcdGNvbnN0IGNfeSA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMSBdO1xuXG5cdFx0cmV0dXJuIFtcblx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIGFfeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgYl95ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggY194LCBjX3kgKVxuXHRcdF07XG5cblx0fSxcblxuXHRnZW5lcmF0ZVNpZGVXYWxsVVY6IGZ1bmN0aW9uICggZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDLCBpbmRleEQgKSB7XG5cblx0XHRjb25zdCBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdO1xuXHRcdGNvbnN0IGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xuXHRcdGNvbnN0IGFfeiA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMiBdO1xuXHRcdGNvbnN0IGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XG5cdFx0Y29uc3QgYl95ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAxIF07XG5cdFx0Y29uc3QgYl96ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAyIF07XG5cdFx0Y29uc3QgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHRjb25zdCBjX3kgPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDEgXTtcblx0XHRjb25zdCBjX3ogPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDIgXTtcblx0XHRjb25zdCBkX3ggPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyBdO1xuXHRcdGNvbnN0IGRfeSA9IHZlcnRpY2VzWyBpbmRleEQgKiAzICsgMSBdO1xuXHRcdGNvbnN0IGRfeiA9IHZlcnRpY2VzWyBpbmRleEQgKiAzICsgMiBdO1xuXG5cdFx0aWYgKCBNYXRoLmFicyggYV95IC0gYl95ICkgPCBNYXRoLmFicyggYV94IC0gYl94ICkgKSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY194LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3gsIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3ksIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeSwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY195LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3ksIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbmZ1bmN0aW9uIHRvSlNPTiQxKCBzaGFwZXMsIG9wdGlvbnMsIGRhdGEgKSB7XG5cblx0ZGF0YS5zaGFwZXMgPSBbXTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlLnV1aWQgKTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTtcblxuXHR9XG5cblx0aWYgKCBvcHRpb25zLmV4dHJ1ZGVQYXRoICE9PSB1bmRlZmluZWQgKSBkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGggPSBvcHRpb25zLmV4dHJ1ZGVQYXRoLnRvSlNPTigpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59XG5cbmNsYXNzIEljb3NhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBkZXRhaWwgPSAwICkge1xuXG5cdFx0Y29uc3QgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXG5cdFx0XHQtIDEsIHQsIDAsIFx0MSwgdCwgMCwgXHQtIDEsIC0gdCwgMCwgXHQxLCAtIHQsIDAsXG5cdFx0XHQwLCAtIDEsIHQsIFx0MCwgMSwgdCxcdDAsIC0gMSwgLSB0LCBcdDAsIDEsIC0gdCxcblx0XHRcdHQsIDAsIC0gMSwgXHR0LCAwLCAxLCBcdC0gdCwgMCwgLSAxLCBcdC0gdCwgMCwgMVxuXHRcdF07XG5cblx0XHRjb25zdCBpbmRpY2VzID0gW1xuXHRcdFx0MCwgMTEsIDUsIFx0MCwgNSwgMSwgXHQwLCAxLCA3LCBcdDAsIDcsIDEwLCBcdDAsIDEwLCAxMSxcblx0XHRcdDEsIDUsIDksIFx0NSwgMTEsIDQsXHQxMSwgMTAsIDIsXHQxMCwgNywgNixcdDcsIDEsIDgsXG5cdFx0XHQzLCA5LCA0LCBcdDMsIDQsIDIsXHQzLCAyLCA2LFx0MywgNiwgOCxcdDMsIDgsIDksXG5cdFx0XHQ0LCA5LCA1LCBcdDIsIDQsIDExLFx0NiwgMiwgMTAsXHQ4LCA2LCA3LFx0OSwgOCwgMVxuXHRcdF07XG5cblx0XHRzdXBlciggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnSWNvc2FoZWRyb25HZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGRldGFpbDogZGV0YWlsXG5cdFx0fTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBJY29zYWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgT2N0YWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgUG9seWhlZHJvbkdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgZGV0YWlsID0gMCApIHtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xuXHRcdFx0MSwgMCwgMCwgXHQtIDEsIDAsIDAsXHQwLCAxLCAwLFxuXHRcdFx0MCwgLSAxLCAwLCBcdDAsIDAsIDEsXHQwLCAwLCAtIDFcblx0XHRdO1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcblx0XHRcdDAsIDIsIDQsXHQwLCA0LCAzLFx0MCwgMywgNSxcblx0XHRcdDAsIDUsIDIsXHQxLCAyLCA1LFx0MSwgNSwgMyxcblx0XHRcdDEsIDMsIDQsXHQxLCA0LCAyXG5cdFx0XTtcblxuXHRcdHN1cGVyKCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdPY3RhaGVkcm9uR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgT2N0YWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgUmluZ0dlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCBpbm5lclJhZGl1cyA9IDAuNSwgb3V0ZXJSYWRpdXMgPSAxLCB0aGV0YVNlZ21lbnRzID0gOCwgcGhpU2VnbWVudHMgPSAxLCB0aGV0YVN0YXJ0ID0gMCwgdGhldGFMZW5ndGggPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUmluZ0dlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cyxcblx0XHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHRcdHRoZXRhU2VnbWVudHM6IHRoZXRhU2VnbWVudHMsXG5cdFx0XHRwaGlTZWdtZW50czogcGhpU2VnbWVudHMsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHRoZXRhU2VnbWVudHMgPSBNYXRoLm1heCggMywgdGhldGFTZWdtZW50cyApO1xuXHRcdHBoaVNlZ21lbnRzID0gTWF0aC5tYXgoIDEsIHBoaVNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBzb21lIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGxldCByYWRpdXMgPSBpbm5lclJhZGl1cztcblx0XHRjb25zdCByYWRpdXNTdGVwID0gKCAoIG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMgKSAvIHBoaVNlZ21lbnRzICk7XG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcGhpU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSB0aGV0YVNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdC8vIHZhbHVlcyBhcmUgZ2VuZXJhdGUgZnJvbSB0aGUgaW5zaWRlIG9mIHRoZSByaW5nIHRvIHRoZSBvdXRzaWRlXG5cblx0XHRcdFx0Y29uc3Qgc2VnbWVudCA9IHRoZXRhU3RhcnQgKyBpIC8gdGhldGFTZWdtZW50cyAqIHRoZXRhTGVuZ3RoO1xuXG5cdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTtcblx0XHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbiggc2VnbWVudCApO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblxuXHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdHV2LnggPSAoIHZlcnRleC54IC8gb3V0ZXJSYWRpdXMgKyAxICkgLyAyO1xuXHRcdFx0XHR1di55ID0gKCB2ZXJ0ZXgueSAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcblxuXHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluY3JlYXNlIHRoZSByYWRpdXMgZm9yIG5leHQgcm93IG9mIHZlcnRpY2VzXG5cblx0XHRcdHJhZGl1cyArPSByYWRpdXNTdGVwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgcGhpU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGNvbnN0IHRoZXRhU2VnbWVudExldmVsID0gaiAqICggdGhldGFTZWdtZW50cyArIDEgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhldGFTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzZWdtZW50ID0gaSArIHRoZXRhU2VnbWVudExldmVsO1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBzZWdtZW50O1xuXHRcdFx0XHRjb25zdCBiID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAxO1xuXHRcdFx0XHRjb25zdCBjID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAyO1xuXHRcdFx0XHRjb25zdCBkID0gc2VnbWVudCArIDE7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFJpbmdHZW9tZXRyeSggZGF0YS5pbm5lclJhZGl1cywgZGF0YS5vdXRlclJhZGl1cywgZGF0YS50aGV0YVNlZ21lbnRzLCBkYXRhLnBoaVNlZ21lbnRzLCBkYXRhLnRoZXRhU3RhcnQsIGRhdGEudGhldGFMZW5ndGggKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgU2hhcGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3Rvciggc2hhcGVzID0gbmV3IFNoYXBlKCBbIG5ldyBWZWN0b3IyKCAwLCAwLjUgKSwgbmV3IFZlY3RvcjIoIC0gMC41LCAtIDAuNSApLCBuZXcgVmVjdG9yMiggMC41LCAtIDAuNSApIF0gKSwgY3VydmVTZWdtZW50cyA9IDEyICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSAnU2hhcGVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRcdGN1cnZlU2VnbWVudHM6IGN1cnZlU2VnbWVudHNcblx0XHR9O1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0bGV0IGdyb3VwU3RhcnQgPSAwO1xuXHRcdGxldCBncm91cENvdW50ID0gMDtcblxuXHRcdC8vIGFsbG93IHNpbmdsZSBhbmQgYXJyYXkgdmFsdWVzIGZvciBcInNoYXBlc1wiIHBhcmFtZXRlclxuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGFkZFNoYXBlKCBzaGFwZXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNoYXBlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0YWRkU2hhcGUoIHNoYXBlc1sgaSBdICk7XG5cblx0XHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgaSApOyAvLyBlbmFibGVzIE11bHRpTWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcblx0XHRcdFx0Z3JvdXBDb3VudCA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cblx0XHQvLyBoZWxwZXIgZnVuY3Rpb25zXG5cblx0XHRmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7XG5cblx0XHRcdGNvbnN0IGluZGV4T2Zmc2V0ID0gdmVydGljZXMubGVuZ3RoIC8gMztcblx0XHRcdGNvbnN0IHBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoIGN1cnZlU2VnbWVudHMgKTtcblxuXHRcdFx0bGV0IHNoYXBlVmVydGljZXMgPSBwb2ludHMuc2hhcGU7XG5cdFx0XHRjb25zdCBzaGFwZUhvbGVzID0gcG9pbnRzLmhvbGVzO1xuXG5cdFx0XHQvLyBjaGVjayBkaXJlY3Rpb24gb2YgdmVydGljZXNcblxuXHRcdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZVZlcnRpY2VzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hhcGVIb2xlID0gc2hhcGVIb2xlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggc2hhcGVIb2xlICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRzaGFwZUhvbGVzWyBpIF0gPSBzaGFwZUhvbGUucmV2ZXJzZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggc2hhcGVWZXJ0aWNlcywgc2hhcGVIb2xlcyApO1xuXG5cdFx0XHQvLyBqb2luIHZlcnRpY2VzIG9mIGlubmVyIGFuZCBvdXRlciBwYXRocyB0byBhIHNpbmdsZSBhcnJheVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hhcGVIb2xlID0gc2hhcGVIb2xlc1sgaSBdO1xuXHRcdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5jb25jYXQoIHNoYXBlSG9sZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHZlcnRpY2VzLCBub3JtYWxzLCB1dnNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVWZXJ0aWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHZlcnRleCA9IHNoYXBlVmVydGljZXNbIGkgXTtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIDAgKTtcblx0XHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cdFx0XHRcdHV2cy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnkgKTsgLy8gd29ybGQgdXZzXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaW5jaWRlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBmYWNlWyAwIF0gKyBpbmRleE9mZnNldDtcblx0XHRcdFx0Y29uc3QgYiA9IGZhY2VbIDEgXSArIGluZGV4T2Zmc2V0O1xuXHRcdFx0XHRjb25zdCBjID0gZmFjZVsgMiBdICsgaW5kZXhPZmZzZXQ7XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBjICk7XG5cdFx0XHRcdGdyb3VwQ291bnQgKz0gMztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRjb25zdCBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXG5cdFx0cmV0dXJuIHRvSlNPTiggc2hhcGVzLCBkYXRhICk7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSwgc2hhcGVzICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlTaGFwZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcblxuXHRcdFx0Z2VvbWV0cnlTaGFwZXMucHVzaCggc2hhcGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgU2hhcGVHZW9tZXRyeSggZ2VvbWV0cnlTaGFwZXMsIGRhdGEuY3VydmVTZWdtZW50cyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiB0b0pTT04oIHNoYXBlcywgZGF0YSApIHtcblxuXHRkYXRhLnNoYXBlcyA9IFtdO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGkgXTtcblxuXHRcdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGUudXVpZCApO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZXMudXVpZCApO1xuXG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcblxufVxuXG5jbGFzcyBTcGhlcmVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgd2lkdGhTZWdtZW50cyA9IDMyLCBoZWlnaHRTZWdtZW50cyA9IDE2LCBwaGlTdGFydCA9IDAsIHBoaUxlbmd0aCA9IE1hdGguUEkgKiAyLCB0aGV0YVN0YXJ0ID0gMCwgdGhldGFMZW5ndGggPSBNYXRoLlBJICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSAnU3BoZXJlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxuXHRcdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdFx0cGhpTGVuZ3RoOiBwaGlMZW5ndGgsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHdpZHRoU2VnbWVudHMgPSBNYXRoLm1heCggMywgTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApICk7XG5cdFx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLm1heCggMiwgTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSApO1xuXG5cdFx0Y29uc3QgdGhldGFFbmQgPSBNYXRoLm1pbiggdGhldGFTdGFydCArIHRoZXRhTGVuZ3RoLCBNYXRoLlBJICk7XG5cblx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdGNvbnN0IGdyaWQgPSBbXTtcblxuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDw9IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcblxuXHRcdFx0Y29uc3QgdmVydGljZXNSb3cgPSBbXTtcblxuXHRcdFx0Y29uc3QgdiA9IGl5IC8gaGVpZ2h0U2VnbWVudHM7XG5cblx0XHRcdC8vIHNwZWNpYWwgY2FzZSBmb3IgdGhlIHBvbGVzXG5cblx0XHRcdGxldCB1T2Zmc2V0ID0gMDtcblxuXHRcdFx0aWYgKCBpeSA9PSAwICYmIHRoZXRhU3RhcnQgPT0gMCApIHtcblxuXHRcdFx0XHR1T2Zmc2V0ID0gMC41IC8gd2lkdGhTZWdtZW50cztcblxuXHRcdFx0fSBlbHNlIGlmICggaXkgPT0gaGVpZ2h0U2VnbWVudHMgJiYgdGhldGFFbmQgPT0gTWF0aC5QSSApIHtcblxuXHRcdFx0XHR1T2Zmc2V0ID0gLSAwLjUgLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDw9IHdpZHRoU2VnbWVudHM7IGl4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHUgPSBpeCAvIHdpZHRoU2VnbWVudHM7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSAtIHJhZGl1cyAqIE1hdGguY29zKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cdFx0XHRcdHZlcnRleC55ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGggKTtcblx0XHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBNYXRoLnNpbiggcGhpU3RhcnQgKyB1ICogcGhpTGVuZ3RoICkgKiBNYXRoLnNpbiggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWwuY29weSggdmVydGV4ICkubm9ybWFsaXplKCk7XG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIHUgKyB1T2Zmc2V0LCAxIC0gdiApO1xuXG5cdFx0XHRcdHZlcnRpY2VzUm93LnB1c2goIGluZGV4ICsrICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z3JpZC5wdXNoKCB2ZXJ0aWNlc1JvdyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPCBoZWlnaHRTZWdtZW50czsgaXkgKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgd2lkdGhTZWdtZW50czsgaXggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYSA9IGdyaWRbIGl5IF1bIGl4ICsgMSBdO1xuXHRcdFx0XHRjb25zdCBiID0gZ3JpZFsgaXkgXVsgaXggXTtcblx0XHRcdFx0Y29uc3QgYyA9IGdyaWRbIGl5ICsgMSBdWyBpeCBdO1xuXHRcdFx0XHRjb25zdCBkID0gZ3JpZFsgaXkgKyAxIF1bIGl4ICsgMSBdO1xuXG5cdFx0XHRcdGlmICggaXkgIT09IDAgfHwgdGhldGFTdGFydCA+IDAgKSBpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aWYgKCBpeSAhPT0gaGVpZ2h0U2VnbWVudHMgLSAxIHx8IHRoZXRhRW5kIDwgTWF0aC5QSSApIGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBTcGhlcmVHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEud2lkdGhTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5waGlTdGFydCwgZGF0YS5waGlMZW5ndGgsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBUZXRyYWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgUG9seWhlZHJvbkdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgZGV0YWlsID0gMCApIHtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xuXHRcdFx0MSwgMSwgMSwgXHQtIDEsIC0gMSwgMSwgXHQtIDEsIDEsIC0gMSwgXHQxLCAtIDEsIC0gMVxuXHRcdF07XG5cblx0XHRjb25zdCBpbmRpY2VzID0gW1xuXHRcdFx0MiwgMSwgMCwgXHQwLCAzLCAyLFx0MSwgMywgMCxcdDIsIDMsIDFcblx0XHRdO1xuXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ1RldHJhaGVkcm9uR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgVGV0cmFoZWRyb25HZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEuZGV0YWlsICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFRvcnVzR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHR1YmUgPSAwLjQsIHJhZGlhbFNlZ21lbnRzID0gOCwgdHVidWxhclNlZ21lbnRzID0gNiwgYXJjID0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9ICdUb3J1c0dlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0dHViZTogdHViZSxcblx0XHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdFx0YXJjOiBhcmNcblx0XHR9O1xuXG5cdFx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApO1xuXHRcdHR1YnVsYXJTZWdtZW50cyA9IE1hdGguZmxvb3IoIHR1YnVsYXJTZWdtZW50cyApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0Y29uc3QgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdSA9IGkgLyB0dWJ1bGFyU2VnbWVudHMgKiBhcmM7XG5cdFx0XHRcdGNvbnN0IHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9ICggcmFkaXVzICsgdHViZSAqIE1hdGguY29zKCB2ICkgKSAqIE1hdGguY29zKCB1ICk7XG5cdFx0XHRcdHZlcnRleC55ID0gKCByYWRpdXMgKyB0dWJlICogTWF0aC5jb3MoIHYgKSApICogTWF0aC5zaW4oIHUgKTtcblx0XHRcdFx0dmVydGV4LnogPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0Y2VudGVyLnggPSByYWRpdXMgKiBNYXRoLmNvcyggdSApO1xuXHRcdFx0XHRjZW50ZXIueSA9IHJhZGl1cyAqIE1hdGguc2luKCB1ICk7XG5cdFx0XHRcdG5vcm1hbC5zdWJWZWN0b3JzKCB2ZXJ0ZXgsIGNlbnRlciApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRcdFx0dXZzLnB1c2goIGogLyByYWRpYWxTZWdtZW50cyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0XHRmb3IgKCBsZXQgaiA9IDE7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gaW5kaWNlc1xuXG5cdFx0XHRcdGNvbnN0IGEgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpIC0gMTtcblx0XHRcdFx0Y29uc3QgYiA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaSAtIDE7XG5cdFx0XHRcdGNvbnN0IGMgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XG5cdFx0XHRcdGNvbnN0IGQgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpO1xuXG5cdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBUb3J1c0dlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS50dWJlLCBkYXRhLnJhZGlhbFNlZ21lbnRzLCBkYXRhLnR1YnVsYXJTZWdtZW50cywgZGF0YS5hcmMgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVG9ydXNLbm90R2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHR1YmUgPSAwLjQsIHR1YnVsYXJTZWdtZW50cyA9IDY0LCByYWRpYWxTZWdtZW50cyA9IDgsIHAgPSAyLCBxID0gMyApIHtcblxuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy50eXBlID0gJ1RvcnVzS25vdEdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0dHViZTogdHViZSxcblx0XHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0cDogcCxcblx0XHRcdHE6IHFcblx0XHR9O1xuXG5cdFx0dHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICk7XG5cdFx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgUDEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IFAyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGNvbnN0IEIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IFQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IE4gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgKysgaSApIHtcblxuXHRcdFx0Ly8gdGhlIHJhZGlhbiBcInVcIiBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlIG9mIHRoZSBjdXJyZW50IHR1YnVsYXIgc2VnbWVudFxuXG5cdFx0XHRjb25zdCB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIHAgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0Ly8gbm93IHdlIGNhbGN1bGF0ZSB0d28gcG9pbnRzLiBQMSBpcyBvdXIgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgY3VydmUsIFAyIGlzIGEgbGl0dGxlIGZhcnRoZXIgYWhlYWQuXG5cdFx0XHQvLyB0aGVzZSBwb2ludHMgYXJlIHVzZWQgdG8gY3JlYXRlIGEgc3BlY2lhbCBcImNvb3JkaW5hdGUgc3BhY2VcIiwgd2hpY2ggaXMgbmVjZXNzYXJ5IHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdCB2ZXJ0ZXggcG9zaXRpb25zXG5cblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBQMSApO1xuXHRcdFx0Y2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKCB1ICsgMC4wMSwgcCwgcSwgcmFkaXVzLCBQMiApO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgb3J0aG9ub3JtYWwgYmFzaXNcblxuXHRcdFx0VC5zdWJWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHRcdE4uYWRkVmVjdG9ycyggUDIsIFAxICk7XG5cdFx0XHRCLmNyb3NzVmVjdG9ycyggVCwgTiApO1xuXHRcdFx0Ti5jcm9zc1ZlY3RvcnMoIEIsIFQgKTtcblxuXHRcdFx0Ly8gbm9ybWFsaXplIEIsIE4uIFQgY2FuIGJlIGlnbm9yZWQsIHdlIGRvbid0IHVzZSBpdFxuXG5cdFx0XHRCLm5vcm1hbGl6ZSgpO1xuXHRcdFx0Ti5ub3JtYWxpemUoKTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArKyBqICkge1xuXG5cdFx0XHRcdC8vIG5vdyBjYWxjdWxhdGUgdGhlIHZlcnRpY2VzLiB0aGV5IGFyZSBub3RoaW5nIG1vcmUgdGhhbiBhbiBleHRydXNpb24gb2YgdGhlIHRvcnVzIGN1cnZlLlxuXHRcdFx0XHQvLyBiZWNhdXNlIHdlIGV4dHJ1ZGUgYSBzaGFwZSBpbiB0aGUgeHktcGxhbmUsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGEgei12YWx1ZS5cblxuXHRcdFx0XHRjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XG5cdFx0XHRcdGNvbnN0IGN4ID0gLSB0dWJlICogTWF0aC5jb3MoIHYgKTtcblx0XHRcdFx0Y29uc3QgY3kgPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXG5cdFx0XHRcdC8vIGZpcnN0IHdlIG9yaWVudCB0aGUgZXh0cnVzaW9uIHdpdGggb3VyIGJhc2lzIHZlY3RvcnMsIHRoZW4gd2UgYWRkIGl0IHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZVxuXG5cdFx0XHRcdHZlcnRleC54ID0gUDEueCArICggY3ggKiBOLnggKyBjeSAqIEIueCApO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IFAxLnkgKyAoIGN4ICogTi55ICsgY3kgKiBCLnkgKTtcblx0XHRcdFx0dmVydGV4LnogPSBQMS56ICsgKCBjeCAqIE4ueiArIGN5ICogQi56ICk7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbCAoUDEgaXMgYWx3YXlzIHRoZSBjZW50ZXIvb3JpZ2luIG9mIHRoZSBleHRydXNpb24sIHRodXMgd2UgY2FuIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbClcblxuXHRcdFx0XHRub3JtYWwuc3ViVmVjdG9ycyggdmVydGV4LCBQMSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRcdFx0dXZzLnB1c2goIGogLyByYWRpYWxTZWdtZW50cyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0XHRmb3IgKCBsZXQgaiA9IDE7IGogPD0gdHVidWxhclNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPD0gcmFkaWFsU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gaW5kaWNlc1xuXG5cdFx0XHRcdGNvbnN0IGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xuXHRcdFx0XHRjb25zdCBiID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyAoIGkgLSAxICk7XG5cdFx0XHRcdGNvbnN0IGMgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArIGk7XG5cdFx0XHRcdGNvbnN0IGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0XHQvLyB0aGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlXG5cblx0XHRmdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUoIHUsIHAsIHEsIHJhZGl1cywgcG9zaXRpb24gKSB7XG5cblx0XHRcdGNvbnN0IGN1ID0gTWF0aC5jb3MoIHUgKTtcblx0XHRcdGNvbnN0IHN1ID0gTWF0aC5zaW4oIHUgKTtcblx0XHRcdGNvbnN0IHF1T3ZlclAgPSBxIC8gcCAqIHU7XG5cdFx0XHRjb25zdCBjcyA9IE1hdGguY29zKCBxdU92ZXJQICk7XG5cblx0XHRcdHBvc2l0aW9uLnggPSByYWRpdXMgKiAoIDIgKyBjcyApICogMC41ICogY3U7XG5cdFx0XHRwb3NpdGlvbi55ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIHN1ICogMC41O1xuXHRcdFx0cG9zaXRpb24ueiA9IHJhZGl1cyAqIE1hdGguc2luKCBxdU92ZXJQICkgKiAwLjU7XG5cblx0XHR9XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgVG9ydXNLbm90R2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLnR1YmUsIGRhdGEudHVidWxhclNlZ21lbnRzLCBkYXRhLnJhZGlhbFNlZ21lbnRzLCBkYXRhLnAsIGRhdGEucSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBUdWJlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHBhdGggPSBuZXcgUXVhZHJhdGljQmV6aWVyQ3VydmUzKCBuZXcgVmVjdG9yMyggLSAxLCAtIDEsIDAgKSwgbmV3IFZlY3RvcjMoIC0gMSwgMSwgMCApLCBuZXcgVmVjdG9yMyggMSwgMSwgMCApICksIHR1YnVsYXJTZWdtZW50cyA9IDY0LCByYWRpdXMgPSAxLCByYWRpYWxTZWdtZW50cyA9IDgsIGNsb3NlZCA9IGZhbHNlICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSAnVHViZUdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHBhdGg6IHBhdGgsXG5cdFx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0Y2xvc2VkOiBjbG9zZWRcblx0XHR9O1xuXG5cdFx0Y29uc3QgZnJhbWVzID0gcGF0aC5jb21wdXRlRnJlbmV0RnJhbWVzKCB0dWJ1bGFyU2VnbWVudHMsIGNsb3NlZCApO1xuXG5cdFx0Ly8gZXhwb3NlIGludGVybmFsc1xuXG5cdFx0dGhpcy50YW5nZW50cyA9IGZyYW1lcy50YW5nZW50cztcblx0XHR0aGlzLm5vcm1hbHMgPSBmcmFtZXMubm9ybWFscztcblx0XHR0aGlzLmJpbm9ybWFscyA9IGZyYW1lcy5iaW5vcm1hbHM7XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHRcdGxldCBQID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIGJ1ZmZlclxuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXG5cdFx0Ly8gY3JlYXRlIGJ1ZmZlciBkYXRhXG5cblx0XHRnZW5lcmF0ZUJ1ZmZlckRhdGEoKTtcblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdFx0Ly8gZnVuY3Rpb25zXG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZUJ1ZmZlckRhdGEoKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZVNlZ21lbnQoIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgbm90IGNsb3NlZCwgZ2VuZXJhdGUgdGhlIGxhc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzXG5cdFx0XHQvLyBhdCB0aGUgcmVndWxhciBwb3NpdGlvbiBvbiB0aGUgZ2l2ZW4gcGF0aFxuXHRcdFx0Ly9cblx0XHRcdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBjbG9zZWQsIGR1cGxpY2F0ZSB0aGUgZmlyc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzICh1dnMgd2lsbCBkaWZmZXIpXG5cblx0XHRcdGdlbmVyYXRlU2VnbWVudCggKCBjbG9zZWQgPT09IGZhbHNlICkgPyB0dWJ1bGFyU2VnbWVudHMgOiAwICk7XG5cblx0XHRcdC8vIHV2cyBhcmUgZ2VuZXJhdGVkIGluIGEgc2VwYXJhdGUgZnVuY3Rpb24uXG5cdFx0XHQvLyB0aGlzIG1ha2VzIGl0IGVhc3kgY29tcHV0ZSBjb3JyZWN0IHZhbHVlcyBmb3IgY2xvc2VkIGdlb21ldHJpZXNcblxuXHRcdFx0Z2VuZXJhdGVVVnMoKTtcblxuXHRcdFx0Ly8gZmluYWxseSBjcmVhdGUgZmFjZXNcblxuXHRcdFx0Z2VuZXJhdGVJbmRpY2VzKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZVNlZ21lbnQoIGkgKSB7XG5cblx0XHRcdC8vIHdlIHVzZSBnZXRQb2ludEF0IHRvIHNhbXBsZSBldmVubHkgZGlzdHJpYnV0ZWQgcG9pbnRzIGZyb20gdGhlIGdpdmVuIHBhdGhcblxuXHRcdFx0UCA9IHBhdGguZ2V0UG9pbnRBdCggaSAvIHR1YnVsYXJTZWdtZW50cywgUCApO1xuXG5cdFx0XHQvLyByZXRyaWV2ZSBjb3JyZXNwb25kaW5nIG5vcm1hbCBhbmQgYmlub3JtYWxcblxuXHRcdFx0Y29uc3QgTiA9IGZyYW1lcy5ub3JtYWxzWyBpIF07XG5cdFx0XHRjb25zdCBCID0gZnJhbWVzLmJpbm9ybWFsc1sgaSBdO1xuXG5cdFx0XHQvLyBnZW5lcmF0ZSBub3JtYWxzIGFuZCB2ZXJ0aWNlcyBmb3IgdGhlIGN1cnJlbnQgc2VnbWVudFxuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHRcdGNvbnN0IHNpbiA9IE1hdGguc2luKCB2ICk7XG5cdFx0XHRcdGNvbnN0IGNvcyA9IC0gTWF0aC5jb3MoIHYgKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWwueCA9ICggY29zICogTi54ICsgc2luICogQi54ICk7XG5cdFx0XHRcdG5vcm1hbC55ID0gKCBjb3MgKiBOLnkgKyBzaW4gKiBCLnkgKTtcblx0XHRcdFx0bm9ybWFsLnogPSAoIGNvcyAqIE4ueiArIHNpbiAqIEIueiApO1xuXHRcdFx0XHRub3JtYWwubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSBQLnggKyByYWRpdXMgKiBub3JtYWwueDtcblx0XHRcdFx0dmVydGV4LnkgPSBQLnkgKyByYWRpdXMgKiBub3JtYWwueTtcblx0XHRcdFx0dmVydGV4LnogPSBQLnogKyByYWRpdXMgKiBub3JtYWwuejtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlSW5kaWNlcygpIHtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPD0gcmFkaWFsU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArICggaSAtIDEgKTtcblx0XHRcdFx0XHRjb25zdCBiID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyAoIGkgLSAxICk7XG5cdFx0XHRcdFx0Y29uc3QgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdFx0XHRjb25zdCBkID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XG5cblx0XHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdFx0XHR1di54ID0gaSAvIHR1YnVsYXJTZWdtZW50cztcblx0XHRcdFx0XHR1di55ID0gaiAvIHJhZGlhbFNlZ21lbnRzO1xuXG5cdFx0XHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5wYXRoID0gdGhpcy5wYXJhbWV0ZXJzLnBhdGgudG9KU09OKCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0Ly8gVGhpcyBvbmx5IHdvcmtzIGZvciBidWlsdC1pbiBjdXJ2ZXMgKGUuZy4gQ2F0bXVsbFJvbUN1cnZlMykuXG5cdFx0Ly8gVXNlciBkZWZpbmVkIGN1cnZlcyBvciBpbnN0YW5jZXMgb2YgQ3VydmVQYXRoIHdpbGwgbm90IGJlIGRlc2VyaWFsaXplZC5cblx0XHRyZXR1cm4gbmV3IFR1YmVHZW9tZXRyeShcblx0XHRcdG5ldyBDdXJ2ZXNbIGRhdGEucGF0aC50eXBlIF0oKS5mcm9tSlNPTiggZGF0YS5wYXRoICksXG5cdFx0XHRkYXRhLnR1YnVsYXJTZWdtZW50cyxcblx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0ZGF0YS5yYWRpYWxTZWdtZW50cyxcblx0XHRcdGRhdGEuY2xvc2VkXG5cdFx0KTtcblxuXHR9XG5cbn1cblxuY2xhc3MgV2lyZWZyYW1lR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy50eXBlID0gJ1dpcmVmcmFtZUdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdGdlb21ldHJ5OiBnZW9tZXRyeVxuXHRcdH07XG5cblx0XHRpZiAoIGdlb21ldHJ5ICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBidWZmZXJcblxuXHRcdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRcdGNvbnN0IGVkZ2VzID0gbmV3IFNldCgpO1xuXG5cdFx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRcdGNvbnN0IHN0YXJ0ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IGVuZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gaW5kZXhlZCBCdWZmZXJHZW9tZXRyeVxuXG5cdFx0XHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdFx0Y29uc3QgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0XHRsZXQgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdGlmICggZ3JvdXBzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRcdGdyb3VwcyA9IFsgeyBzdGFydDogMCwgY291bnQ6IGluZGljZXMuY291bnQsIG1hdGVyaWFsSW5kZXg6IDAgfSBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBjcmVhdGUgYSBkYXRhIHN0cnVjdHVyZSB0aGF0IGNvbnRhaW5zIGFsbCBlZGdlcyB3aXRob3V0IGR1cGxpY2F0ZXNcblxuXHRcdFx0XHRmb3IgKCBsZXQgbyA9IDAsIG9sID0gZ3JvdXBzLmxlbmd0aDsgbyA8IG9sOyArKyBvICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIG8gXTtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwU3RhcnQgPSBncm91cC5zdGFydDtcblx0XHRcdFx0XHRjb25zdCBncm91cENvdW50ID0gZ3JvdXAuY291bnQ7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IGdyb3VwU3RhcnQsIGwgPSAoIGdyb3VwU3RhcnQgKyBncm91cENvdW50ICk7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgaW5kZXgxID0gaW5kaWNlcy5nZXRYKCBpICsgaiApO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBpbmRleDIgPSBpbmRpY2VzLmdldFgoIGkgKyAoIGogKyAxICkgJSAzICk7XG5cblx0XHRcdFx0XHRcdFx0c3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MSApO1xuXHRcdFx0XHRcdFx0XHRlbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MiApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggaXNVbmlxdWVFZGdlKCBzdGFydCwgZW5kLCBlZGdlcyApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggc3RhcnQueCwgc3RhcnQueSwgc3RhcnQueiApO1xuXHRcdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIGVuZC54LCBlbmQueSwgZW5kLnogKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnlcblxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gKCBwb3NpdGlvbi5jb3VudCAvIDMgKTsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHQvLyB0aHJlZSBlZGdlcyBwZXIgdHJpYW5nbGUsIGFuIGVkZ2UgaXMgcmVwcmVzZW50ZWQgYXMgKGluZGV4MSwgaW5kZXgyKVxuXHRcdFx0XHRcdFx0Ly8gZS5nLiB0aGUgZmlyc3QgdHJpYW5nbGUgaGFzIHRoZSBmb2xsb3dpbmcgZWRnZXM6ICgwLDEpLCgxLDIpLCgyLDApXG5cblx0XHRcdFx0XHRcdGNvbnN0IGluZGV4MSA9IDMgKiBpICsgajtcblx0XHRcdFx0XHRcdGNvbnN0IGluZGV4MiA9IDMgKiBpICsgKCAoIGogKyAxICkgJSAzICk7XG5cblx0XHRcdFx0XHRcdHN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDEgKTtcblx0XHRcdFx0XHRcdGVuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgyICk7XG5cblx0XHRcdFx0XHRcdGlmICggaXNVbmlxdWVFZGdlKCBzdGFydCwgZW5kLCBlZGdlcyApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHN0YXJ0LngsIHN0YXJ0LnksIHN0YXJ0LnogKTtcblx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggZW5kLngsIGVuZC55LCBlbmQueiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBpc1VuaXF1ZUVkZ2UoIHN0YXJ0LCBlbmQsIGVkZ2VzICkge1xuXG5cdGNvbnN0IGhhc2gxID0gYCR7c3RhcnQueH0sJHtzdGFydC55fSwke3N0YXJ0Lnp9LSR7ZW5kLnh9LCR7ZW5kLnl9LCR7ZW5kLnp9YDtcblx0Y29uc3QgaGFzaDIgPSBgJHtlbmQueH0sJHtlbmQueX0sJHtlbmQuen0tJHtzdGFydC54fSwke3N0YXJ0Lnl9LCR7c3RhcnQuen1gOyAvLyBjb2luY2lkZW50IGVkZ2VcblxuXHRpZiAoIGVkZ2VzLmhhcyggaGFzaDEgKSA9PT0gdHJ1ZSB8fCBlZGdlcy5oYXMoIGhhc2gyICkgPT09IHRydWUgKSB7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSBlbHNlIHtcblxuXHRcdGVkZ2VzLmFkZCggaGFzaDEgKTtcblx0XHRlZGdlcy5hZGQoIGhhc2gyICk7XG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG59XG5cbnZhciBHZW9tZXRyaWVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRfX3Byb3RvX186IG51bGwsXG5cdEJveEdlb21ldHJ5OiBCb3hHZW9tZXRyeSxcblx0Qm94QnVmZmVyR2VvbWV0cnk6IEJveEdlb21ldHJ5LFxuXHRDYXBzdWxlR2VvbWV0cnk6IENhcHN1bGVHZW9tZXRyeSxcblx0Q2Fwc3VsZUJ1ZmZlckdlb21ldHJ5OiBDYXBzdWxlR2VvbWV0cnksXG5cdENpcmNsZUdlb21ldHJ5OiBDaXJjbGVHZW9tZXRyeSxcblx0Q2lyY2xlQnVmZmVyR2VvbWV0cnk6IENpcmNsZUdlb21ldHJ5LFxuXHRDb25lR2VvbWV0cnk6IENvbmVHZW9tZXRyeSxcblx0Q29uZUJ1ZmZlckdlb21ldHJ5OiBDb25lR2VvbWV0cnksXG5cdEN5bGluZGVyR2VvbWV0cnk6IEN5bGluZGVyR2VvbWV0cnksXG5cdEN5bGluZGVyQnVmZmVyR2VvbWV0cnk6IEN5bGluZGVyR2VvbWV0cnksXG5cdERvZGVjYWhlZHJvbkdlb21ldHJ5OiBEb2RlY2FoZWRyb25HZW9tZXRyeSxcblx0RG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IERvZGVjYWhlZHJvbkdlb21ldHJ5LFxuXHRFZGdlc0dlb21ldHJ5OiBFZGdlc0dlb21ldHJ5LFxuXHRFeHRydWRlR2VvbWV0cnk6IEV4dHJ1ZGVHZW9tZXRyeSxcblx0RXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiBFeHRydWRlR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uR2VvbWV0cnk6IEljb3NhaGVkcm9uR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IEljb3NhaGVkcm9uR2VvbWV0cnksXG5cdExhdGhlR2VvbWV0cnk6IExhdGhlR2VvbWV0cnksXG5cdExhdGhlQnVmZmVyR2VvbWV0cnk6IExhdGhlR2VvbWV0cnksXG5cdE9jdGFoZWRyb25HZW9tZXRyeTogT2N0YWhlZHJvbkdlb21ldHJ5LFxuXHRPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IE9jdGFoZWRyb25HZW9tZXRyeSxcblx0UGxhbmVHZW9tZXRyeTogUGxhbmVHZW9tZXRyeSxcblx0UGxhbmVCdWZmZXJHZW9tZXRyeTogUGxhbmVHZW9tZXRyeSxcblx0UG9seWhlZHJvbkdlb21ldHJ5OiBQb2x5aGVkcm9uR2VvbWV0cnksXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeTogUG9seWhlZHJvbkdlb21ldHJ5LFxuXHRSaW5nR2VvbWV0cnk6IFJpbmdHZW9tZXRyeSxcblx0UmluZ0J1ZmZlckdlb21ldHJ5OiBSaW5nR2VvbWV0cnksXG5cdFNoYXBlR2VvbWV0cnk6IFNoYXBlR2VvbWV0cnksXG5cdFNoYXBlQnVmZmVyR2VvbWV0cnk6IFNoYXBlR2VvbWV0cnksXG5cdFNwaGVyZUdlb21ldHJ5OiBTcGhlcmVHZW9tZXRyeSxcblx0U3BoZXJlQnVmZmVyR2VvbWV0cnk6IFNwaGVyZUdlb21ldHJ5LFxuXHRUZXRyYWhlZHJvbkdlb21ldHJ5OiBUZXRyYWhlZHJvbkdlb21ldHJ5LFxuXHRUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBUZXRyYWhlZHJvbkdlb21ldHJ5LFxuXHRUb3J1c0dlb21ldHJ5OiBUb3J1c0dlb21ldHJ5LFxuXHRUb3J1c0J1ZmZlckdlb21ldHJ5OiBUb3J1c0dlb21ldHJ5LFxuXHRUb3J1c0tub3RHZW9tZXRyeTogVG9ydXNLbm90R2VvbWV0cnksXG5cdFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5OiBUb3J1c0tub3RHZW9tZXRyeSxcblx0VHViZUdlb21ldHJ5OiBUdWJlR2VvbWV0cnksXG5cdFR1YmVCdWZmZXJHZW9tZXRyeTogVHViZUdlb21ldHJ5LFxuXHRXaXJlZnJhbWVHZW9tZXRyeTogV2lyZWZyYW1lR2VvbWV0cnlcbn0pO1xuXG5jbGFzcyBTaGFkb3dNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU2hhZG93TWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuaXNTaGFkb3dNYXRlcmlhbCA9IHRydWU7XG5cbmNsYXNzIFJhd1NoYWRlck1hdGVyaWFsIGV4dGVuZHMgU2hhZGVyTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoIHBhcmFtZXRlcnMgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdSYXdTaGFkZXJNYXRlcmlhbCc7XG5cblx0fVxuXG59XG5cblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5pc1Jhd1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuY2xhc3MgTWVzaFN0YW5kYXJkTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hTdGFuZGFyZE1hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2Vcblx0XHR0aGlzLnJvdWdobmVzcyA9IDEuMDtcblx0XHR0aGlzLm1ldGFsbmVzcyA9IDAuMDtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLnJvdWdobmVzc01hcCA9IG51bGw7XG5cblx0XHR0aGlzLm1ldGFsbmVzc01hcCA9IG51bGw7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZW52TWFwID0gbnVsbDtcblx0XHR0aGlzLmVudk1hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdFx0dGhpcy5yb3VnaG5lc3MgPSBzb3VyY2Uucm91Z2huZXNzO1xuXHRcdHRoaXMubWV0YWxuZXNzID0gc291cmNlLm1ldGFsbmVzcztcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMucm91Z2huZXNzTWFwID0gc291cmNlLnJvdWdobmVzc01hcDtcblxuXHRcdHRoaXMubWV0YWxuZXNzTWFwID0gc291cmNlLm1ldGFsbmVzc01hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdFx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSBzb3VyY2UuZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA9IHRydWU7XG5cbmNsYXNzIE1lc2hQaHlzaWNhbE1hdGVyaWFsIGV4dGVuZHMgTWVzaFN0YW5kYXJkTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHtcblxuXHRcdFx0J1NUQU5EQVJEJzogJycsXG5cdFx0XHQnUEhZU0lDQUwnOiAnJ1xuXG5cdFx0fTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoUGh5c2ljYWxNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmNsZWFyY29hdE1hcCA9IG51bGw7XG5cdFx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSAwLjA7XG5cdFx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSBudWxsO1xuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuaW9yID0gMS41O1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAncmVmbGVjdGl2aXR5Jywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0cmV0dXJuICggY2xhbXAoIDIuNSAqICggdGhpcy5pb3IgLSAxICkgLyAoIHRoaXMuaW9yICsgMSApLCAwLCAxICkgKTtcblxuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKCByZWZsZWN0aXZpdHkgKSB7XG5cblx0XHRcdFx0dGhpcy5pb3IgPSAoIDEgKyAwLjQgKiByZWZsZWN0aXZpdHkgKSAvICggMSAtIDAuNCAqIHJlZmxlY3Rpdml0eSApO1xuXG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5zaGVlbkNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHRcdHRoaXMuc2hlZW5Db2xvck1hcCA9IG51bGw7XG5cdFx0dGhpcy5zaGVlblJvdWdobmVzcyA9IDEuMDtcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzTWFwID0gbnVsbDtcblxuXHRcdHRoaXMudHJhbnNtaXNzaW9uTWFwID0gbnVsbDtcblxuXHRcdHRoaXMudGhpY2tuZXNzID0gMDtcblx0XHR0aGlzLnRoaWNrbmVzc01hcCA9IG51bGw7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlID0gMC4wO1xuXHRcdHRoaXMuYXR0ZW51YXRpb25Db2xvciA9IG5ldyBDb2xvciggMSwgMSwgMSApO1xuXG5cdFx0dGhpcy5zcGVjdWxhckludGVuc2l0eSA9IDEuMDtcblx0XHR0aGlzLnNwZWN1bGFySW50ZW5zaXR5TWFwID0gbnVsbDtcblx0XHR0aGlzLnNwZWN1bGFyQ29sb3IgPSBuZXcgQ29sb3IoIDEsIDEsIDEgKTtcblx0XHR0aGlzLnNwZWN1bGFyQ29sb3JNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5fc2hlZW4gPSAwLjA7XG5cdFx0dGhpcy5fY2xlYXJjb2F0ID0gMDtcblx0XHR0aGlzLl90cmFuc21pc3Npb24gPSAwO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Z2V0IHNoZWVuKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NoZWVuO1xuXG5cdH1cblxuXHRzZXQgc2hlZW4oIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9zaGVlbiA+IDAgIT09IHZhbHVlID4gMCApIHtcblxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fc2hlZW4gPSB2YWx1ZTtcblxuXHR9XG5cblx0Z2V0IGNsZWFyY29hdCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGVhcmNvYXQ7XG5cblx0fVxuXG5cdHNldCBjbGVhcmNvYXQoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9jbGVhcmNvYXQgPiAwICE9PSB2YWx1ZSA+IDAgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblxuXHRcdH1cblxuXHRcdHRoaXMuX2NsZWFyY29hdCA9IHZhbHVlO1xuXG5cdH1cblxuXHRnZXQgdHJhbnNtaXNzaW9uKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3RyYW5zbWlzc2lvbjtcblxuXHR9XG5cblx0c2V0IHRyYW5zbWlzc2lvbiggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuX3RyYW5zbWlzc2lvbiA+IDAgIT09IHZhbHVlID4gMCApIHtcblxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fdHJhbnNtaXNzaW9uID0gdmFsdWU7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0ge1xuXG5cdFx0XHQnU1RBTkRBUkQnOiAnJyxcblx0XHRcdCdQSFlTSUNBTCc6ICcnXG5cblx0XHR9O1xuXG5cdFx0dGhpcy5jbGVhcmNvYXQgPSBzb3VyY2UuY2xlYXJjb2F0O1xuXHRcdHRoaXMuY2xlYXJjb2F0TWFwID0gc291cmNlLmNsZWFyY29hdE1hcDtcblx0XHR0aGlzLmNsZWFyY29hdFJvdWdobmVzcyA9IHNvdXJjZS5jbGVhcmNvYXRSb3VnaG5lc3M7XG5cdFx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSBzb3VyY2UuY2xlYXJjb2F0Um91Z2huZXNzTWFwO1xuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gc291cmNlLmNsZWFyY29hdE5vcm1hbE1hcDtcblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5jbGVhcmNvYXROb3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5pb3IgPSBzb3VyY2UuaW9yO1xuXG5cdFx0dGhpcy5zaGVlbiA9IHNvdXJjZS5zaGVlbjtcblx0XHR0aGlzLnNoZWVuQ29sb3IuY29weSggc291cmNlLnNoZWVuQ29sb3IgKTtcblx0XHR0aGlzLnNoZWVuQ29sb3JNYXAgPSBzb3VyY2Uuc2hlZW5Db2xvck1hcDtcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzID0gc291cmNlLnNoZWVuUm91Z2huZXNzO1xuXHRcdHRoaXMuc2hlZW5Sb3VnaG5lc3NNYXAgPSBzb3VyY2Uuc2hlZW5Sb3VnaG5lc3NNYXA7XG5cblx0XHR0aGlzLnRyYW5zbWlzc2lvbiA9IHNvdXJjZS50cmFuc21pc3Npb247XG5cdFx0dGhpcy50cmFuc21pc3Npb25NYXAgPSBzb3VyY2UudHJhbnNtaXNzaW9uTWFwO1xuXG5cdFx0dGhpcy50aGlja25lc3MgPSBzb3VyY2UudGhpY2tuZXNzO1xuXHRcdHRoaXMudGhpY2tuZXNzTWFwID0gc291cmNlLnRoaWNrbmVzc01hcDtcblx0XHR0aGlzLmF0dGVudWF0aW9uRGlzdGFuY2UgPSBzb3VyY2UuYXR0ZW51YXRpb25EaXN0YW5jZTtcblx0XHR0aGlzLmF0dGVudWF0aW9uQ29sb3IuY29weSggc291cmNlLmF0dGVudWF0aW9uQ29sb3IgKTtcblxuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHkgPSBzb3VyY2Uuc3BlY3VsYXJJbnRlbnNpdHk7XG5cdFx0dGhpcy5zcGVjdWxhckludGVuc2l0eU1hcCA9IHNvdXJjZS5zcGVjdWxhckludGVuc2l0eU1hcDtcblx0XHR0aGlzLnNwZWN1bGFyQ29sb3IuY29weSggc291cmNlLnNwZWN1bGFyQ29sb3IgKTtcblx0XHR0aGlzLnNwZWN1bGFyQ29sb3JNYXAgPSBzb3VyY2Uuc3BlY3VsYXJDb2xvck1hcDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCA9IHRydWU7XG5cbmNsYXNzIE1lc2hQaG9uZ01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoUGhvbmdNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBkaWZmdXNlXG5cdFx0dGhpcy5zcGVjdWxhciA9IG5ldyBDb2xvciggMHgxMTExMTEgKTtcblx0XHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xuXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5saWdodE1hcCA9IG51bGw7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdHRoaXMuYW9NYXAgPSBudWxsO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdFx0dGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247XG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdFx0dGhpcy5zcGVjdWxhci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXIgKTtcblx0XHR0aGlzLnNoaW5pbmVzcyA9IHNvdXJjZS5zaGluaW5lc3M7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0XHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoUGhvbmdNYXRlcmlhbCA9IHRydWU7XG5cbmNsYXNzIE1lc2hUb29uTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnVE9PTic6ICcnIH07XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaFRvb25NYXRlcmlhbCc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXHRcdHRoaXMuZ3JhZGllbnRNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5saWdodE1hcCA9IG51bGw7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdHRoaXMuYW9NYXAgPSBudWxsO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblx0XHR0aGlzLmdyYWRpZW50TWFwID0gc291cmNlLmdyYWRpZW50TWFwO1xuXG5cdFx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0XHR0aGlzLmVtaXNzaXZlTWFwID0gc291cmNlLmVtaXNzaXZlTWFwO1xuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hUb29uTWF0ZXJpYWwgPSB0cnVlO1xuXG5jbGFzcyBNZXNoTm9ybWFsTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hOb3JtYWxNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdFx0dGhpcy5mb2cgPSBmYWxzZTtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gc291cmNlLmZsYXRTaGFkaW5nO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgPSB0cnVlO1xuXG5jbGFzcyBNZXNoTGFtYmVydE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoTGFtYmVydE1hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZW52TWFwID0gbnVsbDtcblx0XHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdFx0dGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7XG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgPSB0cnVlO1xuXG5jbGFzcyBNZXNoTWF0Y2FwTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnTUFUQ0FQJzogJycgfTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoTWF0Y2FwTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdFx0dGhpcy5tYXRjYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9O1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWF0Y2FwID0gc291cmNlLm1hdGNhcDtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoTWF0Y2FwTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaE1hdGNhcE1hdGVyaWFsID0gdHJ1ZTtcblxuY2xhc3MgTGluZURhc2hlZE1hdGVyaWFsIGV4dGVuZHMgTGluZUJhc2ljTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdMaW5lRGFzaGVkTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5zY2FsZSA9IDE7XG5cdFx0dGhpcy5kYXNoU2l6ZSA9IDM7XG5cdFx0dGhpcy5nYXBTaXplID0gMTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5zY2FsZSA9IHNvdXJjZS5zY2FsZTtcblx0XHR0aGlzLmRhc2hTaXplID0gc291cmNlLmRhc2hTaXplO1xuXHRcdHRoaXMuZ2FwU2l6ZSA9IHNvdXJjZS5nYXBTaXplO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuaXNMaW5lRGFzaGVkTWF0ZXJpYWwgPSB0cnVlO1xuXG5jb25zdCBtYXRlcmlhbExpYiA9IHtcblx0U2hhZG93TWF0ZXJpYWwsXG5cdFNwcml0ZU1hdGVyaWFsLFxuXHRSYXdTaGFkZXJNYXRlcmlhbCxcblx0U2hhZGVyTWF0ZXJpYWwsXG5cdFBvaW50c01hdGVyaWFsLFxuXHRNZXNoUGh5c2ljYWxNYXRlcmlhbCxcblx0TWVzaFN0YW5kYXJkTWF0ZXJpYWwsXG5cdE1lc2hQaG9uZ01hdGVyaWFsLFxuXHRNZXNoVG9vbk1hdGVyaWFsLFxuXHRNZXNoTm9ybWFsTWF0ZXJpYWwsXG5cdE1lc2hMYW1iZXJ0TWF0ZXJpYWwsXG5cdE1lc2hEZXB0aE1hdGVyaWFsLFxuXHRNZXNoRGlzdGFuY2VNYXRlcmlhbCxcblx0TWVzaEJhc2ljTWF0ZXJpYWwsXG5cdE1lc2hNYXRjYXBNYXRlcmlhbCxcblx0TGluZURhc2hlZE1hdGVyaWFsLFxuXHRMaW5lQmFzaWNNYXRlcmlhbCxcblx0TWF0ZXJpYWxcbn07XG5cbk1hdGVyaWFsLmZyb21UeXBlID0gZnVuY3Rpb24gKCB0eXBlICkge1xuXG5cdHJldHVybiBuZXcgbWF0ZXJpYWxMaWJbIHR5cGUgXSgpO1xuXG59O1xuXG5jb25zdCBBbmltYXRpb25VdGlscyA9IHtcblxuXHQvLyBzYW1lIGFzIEFycmF5LnByb3RvdHlwZS5zbGljZSwgYnV0IGFsc28gd29ya3Mgb24gdHlwZWQgYXJyYXlzXG5cdGFycmF5U2xpY2U6IGZ1bmN0aW9uICggYXJyYXksIGZyb20sIHRvICkge1xuXG5cdFx0aWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdC8vIGluIGlvczkgYXJyYXkuc3ViYXJyYXkoZnJvbSwgdW5kZWZpbmVkKSB3aWxsIHJldHVybiBlbXB0eSBhcnJheVxuXHRcdFx0Ly8gYnV0IGFycmF5LnN1YmFycmF5KGZyb20pIG9yIGFycmF5LnN1YmFycmF5KGZyb20sIGxlbikgaXMgY29ycmVjdFxuXHRcdFx0cmV0dXJuIG5ldyBhcnJheS5jb25zdHJ1Y3RvciggYXJyYXkuc3ViYXJyYXkoIGZyb20sIHRvICE9PSB1bmRlZmluZWQgPyB0byA6IGFycmF5Lmxlbmd0aCApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXkuc2xpY2UoIGZyb20sIHRvICk7XG5cblx0fSxcblxuXHQvLyBjb252ZXJ0cyBhbiBhcnJheSB0byBhIHNwZWNpZmljIHR5cGVcblx0Y29udmVydEFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCB0eXBlLCBmb3JjZUNsb25lICkge1xuXG5cdFx0aWYgKCAhIGFycmF5IHx8IC8vIGxldCAndW5kZWZpbmVkJyBhbmQgJ251bGwnIHBhc3Ncblx0XHRcdCEgZm9yY2VDbG9uZSAmJiBhcnJheS5jb25zdHJ1Y3RvciA9PT0gdHlwZSApIHJldHVybiBhcnJheTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUuQllURVNfUEVSX0VMRU1FTlQgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IHR5cGUoIGFycmF5ICk7IC8vIGNyZWF0ZSB0eXBlZCBhcnJheVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcnJheSApOyAvLyBjcmVhdGUgQXJyYXlcblxuXHR9LFxuXG5cdGlzVHlwZWRBcnJheTogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRyZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KCBvYmplY3QgKSAmJlxuXHRcdFx0ISAoIG9iamVjdCBpbnN0YW5jZW9mIERhdGFWaWV3ICk7XG5cblx0fSxcblxuXHQvLyByZXR1cm5zIGFuIGFycmF5IGJ5IHdoaWNoIHRpbWVzIGFuZCB2YWx1ZXMgY2FuIGJlIHNvcnRlZFxuXHRnZXRLZXlmcmFtZU9yZGVyOiBmdW5jdGlvbiAoIHRpbWVzICkge1xuXG5cdFx0ZnVuY3Rpb24gY29tcGFyZVRpbWUoIGksIGogKSB7XG5cblx0XHRcdHJldHVybiB0aW1lc1sgaSBdIC0gdGltZXNbIGogXTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG4gPSB0aW1lcy5sZW5ndGg7XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KCBuICk7XG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkgcmVzdWx0WyBpIF0gPSBpO1xuXG5cdFx0cmVzdWx0LnNvcnQoIGNvbXBhcmVUaW1lICk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH0sXG5cblx0Ly8gdXNlcyB0aGUgYXJyYXkgcHJldmlvdXNseSByZXR1cm5lZCBieSAnZ2V0S2V5ZnJhbWVPcmRlcicgdG8gc29ydCBkYXRhXG5cdHNvcnRlZEFycmF5OiBmdW5jdGlvbiAoIHZhbHVlcywgc3RyaWRlLCBvcmRlciApIHtcblxuXHRcdGNvbnN0IG5WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyB2YWx1ZXMuY29uc3RydWN0b3IoIG5WYWx1ZXMgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgZHN0T2Zmc2V0ID0gMDsgZHN0T2Zmc2V0ICE9PSBuVmFsdWVzOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBzcmNPZmZzZXQgPSBvcmRlclsgaSBdICogc3RyaWRlO1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogIT09IHN0cmlkZTsgKysgaiApIHtcblxuXHRcdFx0XHRyZXN1bHRbIGRzdE9mZnNldCArKyBdID0gdmFsdWVzWyBzcmNPZmZzZXQgKyBqIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyBmdW5jdGlvbiBmb3IgcGFyc2luZyBBT1Mga2V5ZnJhbWUgZm9ybWF0c1xuXHRmbGF0dGVuSlNPTjogZnVuY3Rpb24gKCBqc29uS2V5cywgdGltZXMsIHZhbHVlcywgdmFsdWVQcm9wZXJ0eU5hbWUgKSB7XG5cblx0XHRsZXQgaSA9IDEsIGtleSA9IGpzb25LZXlzWyAwIF07XG5cblx0XHR3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICYmIGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gbm8gZGF0YVxuXG5cdFx0bGV0IHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gbm8gZGF0YVxuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXG5cdFx0XHRkbyB7XG5cblx0XHRcdFx0dmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGltZXMucHVzaCgga2V5LnRpbWUgKTtcblx0XHRcdFx0XHR2YWx1ZXMucHVzaC5hcHBseSggdmFsdWVzLCB2YWx1ZSApOyAvLyBwdXNoIGFsbCBlbGVtZW50c1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLnRvQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gLi4uYXNzdW1lIFRIUkVFLk1hdGgtaXNoXG5cblx0XHRcdGRvIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHRcdHZhbHVlLnRvQXJyYXkoIHZhbHVlcywgdmFsdWVzLmxlbmd0aCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIG90aGVyd2lzZSBwdXNoIGFzLWlzXG5cblx0XHRcdGRvIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHN1YmNsaXA6IGZ1bmN0aW9uICggc291cmNlQ2xpcCwgbmFtZSwgc3RhcnRGcmFtZSwgZW5kRnJhbWUsIGZwcyA9IDMwICkge1xuXG5cdFx0Y29uc3QgY2xpcCA9IHNvdXJjZUNsaXAuY2xvbmUoKTtcblxuXHRcdGNsaXAubmFtZSA9IG5hbWU7XG5cblx0XHRjb25zdCB0cmFja3MgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNsaXAudHJhY2tzLmxlbmd0aDsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgdHJhY2sgPSBjbGlwLnRyYWNrc1sgaSBdO1xuXHRcdFx0Y29uc3QgdmFsdWVTaXplID0gdHJhY2suZ2V0VmFsdWVTaXplKCk7XG5cblx0XHRcdGNvbnN0IHRpbWVzID0gW107XG5cdFx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgdHJhY2sudGltZXMubGVuZ3RoOyArKyBqICkge1xuXG5cdFx0XHRcdGNvbnN0IGZyYW1lID0gdHJhY2sudGltZXNbIGogXSAqIGZwcztcblxuXHRcdFx0XHRpZiAoIGZyYW1lIDwgc3RhcnRGcmFtZSB8fCBmcmFtZSA+PSBlbmRGcmFtZSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHRpbWVzLnB1c2goIHRyYWNrLnRpbWVzWyBqIF0gKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgayA9IDA7IGsgPCB2YWx1ZVNpemU7ICsrIGsgKSB7XG5cblx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdHJhY2sudmFsdWVzWyBqICogdmFsdWVTaXplICsgayBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGltZXMubGVuZ3RoID09PSAwICkgY29udGludWU7XG5cblx0XHRcdHRyYWNrLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0aW1lcywgdHJhY2sudGltZXMuY29uc3RydWN0b3IgKTtcblx0XHRcdHRyYWNrLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdmFsdWVzLCB0cmFjay52YWx1ZXMuY29uc3RydWN0b3IgKTtcblxuXHRcdFx0dHJhY2tzLnB1c2goIHRyYWNrICk7XG5cblx0XHR9XG5cblx0XHRjbGlwLnRyYWNrcyA9IHRyYWNrcztcblxuXHRcdC8vIGZpbmQgbWluaW11bSAudGltZXMgdmFsdWUgYWNyb3NzIGFsbCB0cmFja3MgaW4gdGhlIHRyaW1tZWQgY2xpcFxuXG5cdFx0bGV0IG1pblN0YXJ0VGltZSA9IEluZmluaXR5O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcC50cmFja3MubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHRpZiAoIG1pblN0YXJ0VGltZSA+IGNsaXAudHJhY2tzWyBpIF0udGltZXNbIDAgXSApIHtcblxuXHRcdFx0XHRtaW5TdGFydFRpbWUgPSBjbGlwLnRyYWNrc1sgaSBdLnRpbWVzWyAwIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHNoaWZ0IGFsbCB0cmFja3Mgc3VjaCB0aGF0IGNsaXAgYmVnaW5zIGF0IHQ9MFxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcC50cmFja3MubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHRjbGlwLnRyYWNrc1sgaSBdLnNoaWZ0KCAtIDEgKiBtaW5TdGFydFRpbWUgKTtcblxuXHRcdH1cblxuXHRcdGNsaXAucmVzZXREdXJhdGlvbigpO1xuXG5cdFx0cmV0dXJuIGNsaXA7XG5cblx0fSxcblxuXHRtYWtlQ2xpcEFkZGl0aXZlOiBmdW5jdGlvbiAoIHRhcmdldENsaXAsIHJlZmVyZW5jZUZyYW1lID0gMCwgcmVmZXJlbmNlQ2xpcCA9IHRhcmdldENsaXAsIGZwcyA9IDMwICkge1xuXG5cdFx0aWYgKCBmcHMgPD0gMCApIGZwcyA9IDMwO1xuXG5cdFx0Y29uc3QgbnVtVHJhY2tzID0gcmVmZXJlbmNlQ2xpcC50cmFja3MubGVuZ3RoO1xuXHRcdGNvbnN0IHJlZmVyZW5jZVRpbWUgPSByZWZlcmVuY2VGcmFtZSAvIGZwcztcblxuXHRcdC8vIE1ha2UgZWFjaCB0cmFjaydzIHZhbHVlcyByZWxhdGl2ZSB0byB0aGUgdmFsdWVzIGF0IHRoZSByZWZlcmVuY2UgZnJhbWVcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1UcmFja3M7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHJlZmVyZW5jZVRyYWNrID0gcmVmZXJlbmNlQ2xpcC50cmFja3NbIGkgXTtcblx0XHRcdGNvbnN0IHJlZmVyZW5jZVRyYWNrVHlwZSA9IHJlZmVyZW5jZVRyYWNrLlZhbHVlVHlwZU5hbWU7XG5cblx0XHRcdC8vIFNraXAgdGhpcyB0cmFjayBpZiBpdCdzIG5vbi1udW1lcmljXG5cdFx0XHRpZiAoIHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ2Jvb2wnIHx8IHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ3N0cmluZycgKSBjb250aW51ZTtcblxuXHRcdFx0Ly8gRmluZCB0aGUgdHJhY2sgaW4gdGhlIHRhcmdldCBjbGlwIHdob3NlIG5hbWUgYW5kIHR5cGUgbWF0Y2hlcyB0aGUgcmVmZXJlbmNlIHRyYWNrXG5cdFx0XHRjb25zdCB0YXJnZXRUcmFjayA9IHRhcmdldENsaXAudHJhY2tzLmZpbmQoIGZ1bmN0aW9uICggdHJhY2sgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRyYWNrLm5hbWUgPT09IHJlZmVyZW5jZVRyYWNrLm5hbWVcblx0XHRcdFx0XHQmJiB0cmFjay5WYWx1ZVR5cGVOYW1lID09PSByZWZlcmVuY2VUcmFja1R5cGU7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0aWYgKCB0YXJnZXRUcmFjayA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRcdGxldCByZWZlcmVuY2VPZmZzZXQgPSAwO1xuXHRcdFx0Y29uc3QgcmVmZXJlbmNlVmFsdWVTaXplID0gcmVmZXJlbmNlVHJhY2suZ2V0VmFsdWVTaXplKCk7XG5cblx0XHRcdGlmICggcmVmZXJlbmNlVHJhY2suY3JlYXRlSW50ZXJwb2xhbnQuaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUgKSB7XG5cblx0XHRcdFx0cmVmZXJlbmNlT2Zmc2V0ID0gcmVmZXJlbmNlVmFsdWVTaXplIC8gMztcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgdGFyZ2V0T2Zmc2V0ID0gMDtcblx0XHRcdGNvbnN0IHRhcmdldFZhbHVlU2l6ZSA9IHRhcmdldFRyYWNrLmdldFZhbHVlU2l6ZSgpO1xuXG5cdFx0XHRpZiAoIHRhcmdldFRyYWNrLmNyZWF0ZUludGVycG9sYW50LmlzSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kR0xURkN1YmljU3BsaW5lICkge1xuXG5cdFx0XHRcdHRhcmdldE9mZnNldCA9IHRhcmdldFZhbHVlU2l6ZSAvIDM7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbGFzdEluZGV4ID0gcmVmZXJlbmNlVHJhY2sudGltZXMubGVuZ3RoIC0gMTtcblx0XHRcdGxldCByZWZlcmVuY2VWYWx1ZTtcblxuXHRcdFx0Ly8gRmluZCB0aGUgdmFsdWUgdG8gc3VidHJhY3Qgb3V0IG9mIHRoZSB0cmFja1xuXHRcdFx0aWYgKCByZWZlcmVuY2VUaW1lIDw9IHJlZmVyZW5jZVRyYWNrLnRpbWVzWyAwIF0gKSB7XG5cblx0XHRcdFx0Ly8gUmVmZXJlbmNlIGZyYW1lIGlzIGVhcmxpZXIgdGhhbiB0aGUgZmlyc3Qga2V5ZnJhbWUsIHNvIGp1c3QgdXNlIHRoZSBmaXJzdCBrZXlmcmFtZVxuXHRcdFx0XHRjb25zdCBzdGFydEluZGV4ID0gcmVmZXJlbmNlT2Zmc2V0O1xuXHRcdFx0XHRjb25zdCBlbmRJbmRleCA9IHJlZmVyZW5jZVZhbHVlU2l6ZSAtIHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdFx0cmVmZXJlbmNlVmFsdWUgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCByZWZlcmVuY2VUcmFjay52YWx1ZXMsIHN0YXJ0SW5kZXgsIGVuZEluZGV4ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHJlZmVyZW5jZVRpbWUgPj0gcmVmZXJlbmNlVHJhY2sudGltZXNbIGxhc3RJbmRleCBdICkge1xuXG5cdFx0XHRcdC8vIFJlZmVyZW5jZSBmcmFtZSBpcyBhZnRlciB0aGUgbGFzdCBrZXlmcmFtZSwgc28ganVzdCB1c2UgdGhlIGxhc3Qga2V5ZnJhbWVcblx0XHRcdFx0Y29uc3Qgc3RhcnRJbmRleCA9IGxhc3RJbmRleCAqIHJlZmVyZW5jZVZhbHVlU2l6ZSArIHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdFx0Y29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgcmVmZXJlbmNlVmFsdWVTaXplIC0gcmVmZXJlbmNlT2Zmc2V0O1xuXHRcdFx0XHRyZWZlcmVuY2VWYWx1ZSA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHJlZmVyZW5jZVRyYWNrLnZhbHVlcywgc3RhcnRJbmRleCwgZW5kSW5kZXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJbnRlcnBvbGF0ZSB0byB0aGUgcmVmZXJlbmNlIHZhbHVlXG5cdFx0XHRcdGNvbnN0IGludGVycG9sYW50ID0gcmVmZXJlbmNlVHJhY2suY3JlYXRlSW50ZXJwb2xhbnQoKTtcblx0XHRcdFx0Y29uc3Qgc3RhcnRJbmRleCA9IHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdFx0Y29uc3QgZW5kSW5kZXggPSByZWZlcmVuY2VWYWx1ZVNpemUgLSByZWZlcmVuY2VPZmZzZXQ7XG5cdFx0XHRcdGludGVycG9sYW50LmV2YWx1YXRlKCByZWZlcmVuY2VUaW1lICk7XG5cdFx0XHRcdHJlZmVyZW5jZVZhbHVlID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggaW50ZXJwb2xhbnQucmVzdWx0QnVmZmVyLCBzdGFydEluZGV4LCBlbmRJbmRleCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbmp1Z2F0ZSB0aGUgcXVhdGVybmlvblxuXHRcdFx0aWYgKCByZWZlcmVuY2VUcmFja1R5cGUgPT09ICdxdWF0ZXJuaW9uJyApIHtcblxuXHRcdFx0XHRjb25zdCByZWZlcmVuY2VRdWF0ID0gbmV3IFF1YXRlcm5pb24oKS5mcm9tQXJyYXkoIHJlZmVyZW5jZVZhbHVlICkubm9ybWFsaXplKCkuY29uanVnYXRlKCk7XG5cdFx0XHRcdHJlZmVyZW5jZVF1YXQudG9BcnJheSggcmVmZXJlbmNlVmFsdWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdWJ0cmFjdCB0aGUgcmVmZXJlbmNlIHZhbHVlIGZyb20gYWxsIG9mIHRoZSB0cmFjayB2YWx1ZXNcblxuXHRcdFx0Y29uc3QgbnVtVGltZXMgPSB0YXJnZXRUcmFjay50aW1lcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBudW1UaW1lczsgKysgaiApIHtcblxuXHRcdFx0XHRjb25zdCB2YWx1ZVN0YXJ0ID0gaiAqIHRhcmdldFZhbHVlU2l6ZSArIHRhcmdldE9mZnNldDtcblxuXHRcdFx0XHRpZiAoIHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ3F1YXRlcm5pb24nICkge1xuXG5cdFx0XHRcdFx0Ly8gTXVsdGlwbHkgdGhlIGNvbmp1Z2F0ZSBmb3IgcXVhdGVybmlvbiB0cmFjayB0eXBlc1xuXHRcdFx0XHRcdFF1YXRlcm5pb24ubXVsdGlwbHlRdWF0ZXJuaW9uc0ZsYXQoXG5cdFx0XHRcdFx0XHR0YXJnZXRUcmFjay52YWx1ZXMsXG5cdFx0XHRcdFx0XHR2YWx1ZVN0YXJ0LFxuXHRcdFx0XHRcdFx0cmVmZXJlbmNlVmFsdWUsXG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0dGFyZ2V0VHJhY2sudmFsdWVzLFxuXHRcdFx0XHRcdFx0dmFsdWVTdGFydFxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlRW5kID0gdGFyZ2V0VmFsdWVTaXplIC0gdGFyZ2V0T2Zmc2V0ICogMjtcblxuXHRcdFx0XHRcdC8vIFN1YnRyYWN0IGVhY2ggdmFsdWUgZm9yIGFsbCBvdGhlciBudW1lcmljIHRyYWNrIHR5cGVzXG5cdFx0XHRcdFx0Zm9yICggbGV0IGsgPSAwOyBrIDwgdmFsdWVFbmQ7ICsrIGsgKSB7XG5cblx0XHRcdFx0XHRcdHRhcmdldFRyYWNrLnZhbHVlc1sgdmFsdWVTdGFydCArIGsgXSAtPSByZWZlcmVuY2VWYWx1ZVsgayBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0Q2xpcC5ibGVuZE1vZGUgPSBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZTtcblxuXHRcdHJldHVybiB0YXJnZXRDbGlwO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIG9mIGludGVycG9sYW50cyBvdmVyIHBhcmFtZXRyaWMgc2FtcGxlcy5cbiAqXG4gKiBUaGUgcGFyYW1ldGVyIGRvbWFpbiBpcyBvbmUgZGltZW5zaW9uYWwsIHR5cGljYWxseSB0aGUgdGltZSBvciBhIHBhdGhcbiAqIGFsb25nIGEgY3VydmUgZGVmaW5lZCBieSB0aGUgZGF0YS5cbiAqXG4gKiBUaGUgc2FtcGxlIHZhbHVlcyBjYW4gaGF2ZSBhbnkgZGltZW5zaW9uYWxpdHkgYW5kIGRlcml2ZWQgY2xhc3NlcyBtYXlcbiAqIGFwcGx5IHNwZWNpYWwgaW50ZXJwcmV0YXRpb25zIHRvIHRoZSBkYXRhLlxuICpcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgdGhlIGludGVydmFsIHNlZWsgaW4gYSBUZW1wbGF0ZSBNZXRob2QsIGRlZmVycmluZ1xuICogdGhlIGFjdHVhbCBpbnRlcnBvbGF0aW9uIHRvIGRlcml2ZWQgY2xhc3Nlcy5cbiAqXG4gKiBUaW1lIGNvbXBsZXhpdHkgaXMgTygxKSBmb3IgbGluZWFyIGFjY2VzcyBjcm9zc2luZyBhdCBtb3N0IHR3byBwb2ludHNcbiAqIGFuZCBPKGxvZyBOKSBmb3IgcmFuZG9tIGFjY2Vzcywgd2hlcmUgTiBpcyB0aGUgbnVtYmVyIG9mIHBvc2l0aW9ucy5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICpcbiAqIFx0XHRodHRwOi8vd3d3Lm9vZGVzaWduLmNvbS90ZW1wbGF0ZS1tZXRob2QtcGF0dGVybi5odG1sXG4gKlxuICovXG5cbmNsYXNzIEludGVycG9sYW50IHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRcdHRoaXMucGFyYW1ldGVyUG9zaXRpb25zID0gcGFyYW1ldGVyUG9zaXRpb25zO1xuXHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcblxuXHRcdHRoaXMucmVzdWx0QnVmZmVyID0gcmVzdWx0QnVmZmVyICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0cmVzdWx0QnVmZmVyIDogbmV3IHNhbXBsZVZhbHVlcy5jb25zdHJ1Y3Rvciggc2FtcGxlU2l6ZSApO1xuXHRcdHRoaXMuc2FtcGxlVmFsdWVzID0gc2FtcGxlVmFsdWVzO1xuXHRcdHRoaXMudmFsdWVTaXplID0gc2FtcGxlU2l6ZTtcblxuXHRcdHRoaXMuc2V0dGluZ3MgPSBudWxsO1xuXHRcdHRoaXMuRGVmYXVsdFNldHRpbmdzXyA9IHt9O1xuXG5cdH1cblxuXHRldmFsdWF0ZSggdCApIHtcblxuXHRcdGNvbnN0IHBwID0gdGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnM7XG5cdFx0bGV0IGkxID0gdGhpcy5fY2FjaGVkSW5kZXgsXG5cdFx0XHR0MSA9IHBwWyBpMSBdLFxuXHRcdFx0dDAgPSBwcFsgaTEgLSAxIF07XG5cblx0XHR2YWxpZGF0ZV9pbnRlcnZhbDoge1xuXG5cdFx0XHRzZWVrOiB7XG5cblx0XHRcdFx0bGV0IHJpZ2h0O1xuXG5cdFx0XHRcdGxpbmVhcl9zY2FuOiB7XG5cblx0XHRcdFx0XHQvLy0gU2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NvbXBhcmlzb24tdG8tdW5kZWZpbmVkLzNcblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXG5cdFx0XHRcdFx0Ly8tIFx0XHRcdFx0aWYgKCB0ID49IHQxIHx8IHQxID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0Zm9yd2FyZF9zY2FuOiBpZiAoICEgKCB0IDwgdDEgKSApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGdpdmVVcEF0ID0gaTEgKyAyOyA7ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdDEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggdCA8IHQwICkgYnJlYWsgZm9yd2FyZF9zY2FuO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYWZ0ZXIgZW5kXG5cblx0XHRcdFx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFmdGVyRW5kXyggaTEgLSAxLCB0LCB0MCApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIGkxID09PSBnaXZlVXBBdCApIGJyZWFrOyAvLyB0aGlzIGxvb3BcblxuXHRcdFx0XHRcdFx0XHR0MCA9IHQxO1xuXHRcdFx0XHRcdFx0XHR0MSA9IHBwWyArKyBpMSBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdCA8IHQxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gd2UgaGF2ZSBhcnJpdmVkIGF0IHRoZSBzb3VnaHQgaW50ZXJ2YWxcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzZWVrO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGluZGV4XG5cdFx0XHRcdFx0XHRyaWdodCA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHRcdGJyZWFrIGxpbmVhcl9zY2FuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8tIHNsb3dlciBjb2RlOlxuXHRcdFx0XHRcdC8vLVx0XHRcdFx0XHRpZiAoIHQgPCB0MCB8fCB0MCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGlmICggISAoIHQgPj0gdDAgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbG9vcGluZz9cblxuXHRcdFx0XHRcdFx0Y29uc3QgdDFnbG9iYWwgPSBwcFsgMSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHQgPCB0MWdsb2JhbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpMSA9IDI7IC8vICsgMSwgdXNpbmcgdGhlIHNjYW4gZm9yIHRoZSBkZXRhaWxzXG5cdFx0XHRcdFx0XHRcdHQwID0gdDFnbG9iYWw7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gbGluZWFyIHJldmVyc2Ugc2NhblxuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgZ2l2ZVVwQXQgPSBpMSAtIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYmVmb3JlIHN0YXJ0XG5cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKCAwLCB0LCB0MSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIGkxID09PSBnaXZlVXBBdCApIGJyZWFrOyAvLyB0aGlzIGxvb3BcblxuXHRcdFx0XHRcdFx0XHR0MSA9IHQwO1xuXHRcdFx0XHRcdFx0XHR0MCA9IHBwWyAtLSBpMSAtIDEgXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHQgPj0gdDAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSBpbmRleFxuXHRcdFx0XHRcdFx0cmlnaHQgPSBpMTtcblx0XHRcdFx0XHRcdGkxID0gMDtcblx0XHRcdFx0XHRcdGJyZWFrIGxpbmVhcl9zY2FuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGhlIGludGVydmFsIGlzIHZhbGlkXG5cblx0XHRcdFx0XHRicmVhayB2YWxpZGF0ZV9pbnRlcnZhbDtcblxuXHRcdFx0XHR9IC8vIGxpbmVhciBzY2FuXG5cblx0XHRcdFx0Ly8gYmluYXJ5IHNlYXJjaFxuXG5cdFx0XHRcdHdoaWxlICggaTEgPCByaWdodCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG1pZCA9ICggaTEgKyByaWdodCApID4+PiAxO1xuXG5cdFx0XHRcdFx0aWYgKCB0IDwgcHBbIG1pZCBdICkge1xuXG5cdFx0XHRcdFx0XHRyaWdodCA9IG1pZDtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGkxID0gbWlkICsgMTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dDEgPSBwcFsgaTEgXTtcblx0XHRcdFx0dDAgPSBwcFsgaTEgLSAxIF07XG5cblx0XHRcdFx0Ly8gY2hlY2sgYm91bmRhcnkgY2FzZXMsIGFnYWluXG5cblx0XHRcdFx0aWYgKCB0MCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmJlZm9yZVN0YXJ0XyggMCwgdCwgdDEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0MSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aTEgPSBwcC5sZW5ndGg7XG5cdFx0XHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSBpMTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hZnRlckVuZF8oIGkxIC0gMSwgdDAsIHQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gLy8gc2Vla1xuXG5cdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXG5cdFx0XHR0aGlzLmludGVydmFsQ2hhbmdlZF8oIGkxLCB0MCwgdDEgKTtcblxuXHRcdH0gLy8gdmFsaWRhdGVfaW50ZXJ2YWxcblxuXHRcdHJldHVybiB0aGlzLmludGVycG9sYXRlXyggaTEsIHQwLCB0LCB0MSApO1xuXG5cdH1cblxuXHRnZXRTZXR0aW5nc18oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXR0aW5ncyB8fCB0aGlzLkRlZmF1bHRTZXR0aW5nc187XG5cblx0fVxuXG5cdGNvcHlTYW1wbGVWYWx1ZV8oIGluZGV4ICkge1xuXG5cdFx0Ly8gY29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyXG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRvZmZzZXQgPSBpbmRleCAqIHN0cmlkZTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRyZXN1bHRbIGkgXSA9IHZhbHVlc1sgb2Zmc2V0ICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0Ly8gVGVtcGxhdGUgbWV0aG9kcyBmb3IgZGVyaXZlZCBjbGFzc2VzOlxuXG5cdGludGVycG9sYXRlXyggLyogaTEsIHQwLCB0LCB0MSAqLyApIHtcblxuXHRcdHRocm93IG5ldyBFcnJvciggJ2NhbGwgdG8gYWJzdHJhY3QgbWV0aG9kJyApO1xuXHRcdC8vIGltcGxlbWVudGF0aW9ucyBzaGFsbCByZXR1cm4gdGhpcy5yZXN1bHRCdWZmZXJcblxuXHR9XG5cblx0aW50ZXJ2YWxDaGFuZ2VkXyggLyogaTEsIHQwLCB0MSAqLyApIHtcblxuXHRcdC8vIGVtcHR5XG5cblx0fVxuXG59XG5cbi8vIEFMSUFTIERFRklOSVRJT05TXG5cbkludGVycG9sYW50LnByb3RvdHlwZS5iZWZvcmVTdGFydF8gPSBJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXztcbkludGVycG9sYW50LnByb3RvdHlwZS5hZnRlckVuZF8gPSBJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXztcblxuLyoqXG4gKiBGYXN0IGFuZCBzaW1wbGUgY3ViaWMgc3BsaW5lIGludGVycG9sYW50LlxuICpcbiAqIEl0IHdhcyBkZXJpdmVkIGZyb20gYSBIZXJtaXRpYW4gY29uc3RydWN0aW9uIHNldHRpbmcgdGhlIGZpcnN0IGRlcml2YXRpdmVcbiAqIGF0IGVhY2ggc2FtcGxlIHBvc2l0aW9uIHRvIHRoZSBsaW5lYXIgc2xvcGUgYmV0d2VlbiBuZWlnaGJvcmluZyBwb3NpdGlvbnNcbiAqIG92ZXIgdGhlaXIgcGFyYW1ldGVyIGludGVydmFsLlxuICovXG5cbmNsYXNzIEN1YmljSW50ZXJwb2xhbnQgZXh0ZW5kcyBJbnRlcnBvbGFudCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdFx0dGhpcy5fd2VpZ2h0UHJldiA9IC0gMDtcblx0XHR0aGlzLl9vZmZzZXRQcmV2ID0gLSAwO1xuXHRcdHRoaXMuX3dlaWdodE5leHQgPSAtIDA7XG5cdFx0dGhpcy5fb2Zmc2V0TmV4dCA9IC0gMDtcblxuXHRcdHRoaXMuRGVmYXVsdFNldHRpbmdzXyA9IHtcblxuXHRcdFx0ZW5kaW5nU3RhcnQ6IFplcm9DdXJ2YXR1cmVFbmRpbmcsXG5cdFx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHRcdH07XG5cblx0fVxuXG5cdGludGVydmFsQ2hhbmdlZF8oIGkxLCB0MCwgdDEgKSB7XG5cblx0XHRjb25zdCBwcCA9IHRoaXMucGFyYW1ldGVyUG9zaXRpb25zO1xuXHRcdGxldCBpUHJldiA9IGkxIC0gMixcblx0XHRcdGlOZXh0ID0gaTEgKyAxLFxuXG5cdFx0XHR0UHJldiA9IHBwWyBpUHJldiBdLFxuXHRcdFx0dE5leHQgPSBwcFsgaU5leHQgXTtcblxuXHRcdGlmICggdFByZXYgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy5nZXRTZXR0aW5nc18oKS5lbmRpbmdTdGFydCApIHtcblxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcblxuXHRcdFx0XHRcdC8vIGYnKHQwKSA9IDBcblx0XHRcdFx0XHRpUHJldiA9IGkxO1xuXHRcdFx0XHRcdHRQcmV2ID0gMiAqIHQwIC0gdDE7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcblx0XHRcdFx0XHRpUHJldiA9IHBwLmxlbmd0aCAtIDI7XG5cdFx0XHRcdFx0dFByZXYgPSB0MCArIHBwWyBpUHJldiBdIC0gcHBbIGlQcmV2ICsgMSBdO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0XHRcdFx0Ly8gZicnKHQwKSA9IDAgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcblx0XHRcdFx0XHR0UHJldiA9IHQxO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHROZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nRW5kICkge1xuXG5cdFx0XHRcdGNhc2UgWmVyb1Nsb3BlRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gZicodE4pID0gMFxuXHRcdFx0XHRcdGlOZXh0ID0gaTE7XG5cdFx0XHRcdFx0dE5leHQgPSAyICogdDEgLSB0MDtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgV3JhcEFyb3VuZEVuZGluZzpcblxuXHRcdFx0XHRcdC8vIHVzZSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjdXJ2ZVxuXHRcdFx0XHRcdGlOZXh0ID0gMTtcblx0XHRcdFx0XHR0TmV4dCA9IHQxICsgcHBbIDEgXSAtIHBwWyAwIF07XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiAvLyBaZXJvQ3VydmF0dXJlRW5kaW5nXG5cblx0XHRcdFx0XHQvLyBmJycodE4pID0gMCwgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXG5cdFx0XHRcdFx0aU5leHQgPSBpMSAtIDE7XG5cdFx0XHRcdFx0dE5leHQgPSB0MDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaGFsZkR0ID0gKCB0MSAtIHQwICkgKiAwLjUsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZTtcblxuXHRcdHRoaXMuX3dlaWdodFByZXYgPSBoYWxmRHQgLyAoIHQwIC0gdFByZXYgKTtcblx0XHR0aGlzLl93ZWlnaHROZXh0ID0gaGFsZkR0IC8gKCB0TmV4dCAtIHQxICk7XG5cdFx0dGhpcy5fb2Zmc2V0UHJldiA9IGlQcmV2ICogc3RyaWRlO1xuXHRcdHRoaXMuX29mZnNldE5leHQgPSBpTmV4dCAqIHN0cmlkZTtcblxuXHR9XG5cblx0aW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICkge1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvMSA9IGkxICogc3RyaWRlLFx0XHRvMCA9IG8xIC0gc3RyaWRlLFxuXHRcdFx0b1AgPSB0aGlzLl9vZmZzZXRQcmV2LCBcdG9OID0gdGhpcy5fb2Zmc2V0TmV4dCxcblx0XHRcdHdQID0gdGhpcy5fd2VpZ2h0UHJldixcdHdOID0gdGhpcy5fd2VpZ2h0TmV4dCxcblxuXHRcdFx0cCA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHBwID0gcCAqIHAsXG5cdFx0XHRwcHAgPSBwcCAqIHA7XG5cblx0XHQvLyBldmFsdWF0ZSBwb2x5bm9taWFsc1xuXG5cdFx0Y29uc3Qgc1AgPSAtIHdQICogcHBwICsgMiAqIHdQICogcHAgLSB3UCAqIHA7XG5cdFx0Y29uc3QgczAgPSAoIDEgKyB3UCApICogcHBwICsgKCAtIDEuNSAtIDIgKiB3UCApICogcHAgKyAoIC0gMC41ICsgd1AgKSAqIHAgKyAxO1xuXHRcdGNvbnN0IHMxID0gKCAtIDEgLSB3TiApICogcHBwICsgKCAxLjUgKyB3TiApICogcHAgKyAwLjUgKiBwO1xuXHRcdGNvbnN0IHNOID0gd04gKiBwcHAgLSB3TiAqIHBwO1xuXG5cdFx0Ly8gY29tYmluZSBkYXRhIGxpbmVhcmx5XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPVxuXHRcdFx0XHRcdHNQICogdmFsdWVzWyBvUCArIGkgXSArXG5cdFx0XHRcdFx0czAgKiB2YWx1ZXNbIG8wICsgaSBdICtcblx0XHRcdFx0XHRzMSAqIHZhbHVlc1sgbzEgKyBpIF0gK1xuXHRcdFx0XHRcdHNOICogdmFsdWVzWyBvTiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59XG5cbmNsYXNzIExpbmVhckludGVycG9sYW50IGV4dGVuZHMgSW50ZXJwb2xhbnQge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdFx0c3VwZXIoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxuXHR9XG5cblx0aW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICkge1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvZmZzZXQxID0gaTEgKiBzdHJpZGUsXG5cdFx0XHRvZmZzZXQwID0gb2Zmc2V0MSAtIHN0cmlkZSxcblxuXHRcdFx0d2VpZ2h0MSA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHdlaWdodDAgPSAxIC0gd2VpZ2h0MTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRyZXN1bHRbIGkgXSA9XG5cdFx0XHRcdFx0dmFsdWVzWyBvZmZzZXQwICsgaSBdICogd2VpZ2h0MCArXG5cdFx0XHRcdFx0dmFsdWVzWyBvZmZzZXQxICsgaSBdICogd2VpZ2h0MTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59XG5cbi8qKlxuICpcbiAqIEludGVycG9sYW50IHRoYXQgZXZhbHVhdGVzIHRvIHRoZSBzYW1wbGUgdmFsdWUgYXQgdGhlIHBvc2l0aW9uIHByZWNlZGluZ1xuICogdGhlIHBhcmFtZXRlci5cbiAqL1xuXG5jbGFzcyBEaXNjcmV0ZUludGVycG9sYW50IGV4dGVuZHMgSW50ZXJwb2xhbnQge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdFx0c3VwZXIoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxuXHR9XG5cblx0aW50ZXJwb2xhdGVfKCBpMSAvKiwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggaTEgLSAxICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIEtleWZyYW1lVHJhY2sge1xuXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayBuYW1lIGlzIHVuZGVmaW5lZCcgKTtcblx0XHRpZiAoIHRpbWVzID09PSB1bmRlZmluZWQgfHwgdGltZXMubGVuZ3RoID09PSAwICkgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogbm8ga2V5ZnJhbWVzIGluIHRyYWNrIG5hbWVkICcgKyBuYW1lICk7XG5cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0dGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdGltZXMsIHRoaXMuVGltZUJ1ZmZlclR5cGUgKTtcblx0XHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdmFsdWVzLCB0aGlzLlZhbHVlQnVmZmVyVHlwZSApO1xuXG5cdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCBpbnRlcnBvbGF0aW9uIHx8IHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKTtcblxuXHR9XG5cblx0Ly8gU2VyaWFsaXphdGlvbiAoaW4gc3RhdGljIGNvbnRleHQsIGJlY2F1c2Ugb2YgY29uc3RydWN0b3IgaW52b2NhdGlvblxuXHQvLyBhbmQgYXV0b21hdGljIGludm9jYXRpb24gb2YgLnRvSlNPTik6XG5cblx0c3RhdGljIHRvSlNPTiggdHJhY2sgKSB7XG5cblx0XHRjb25zdCB0cmFja1R5cGUgPSB0cmFjay5jb25zdHJ1Y3RvcjtcblxuXHRcdGxldCBqc29uO1xuXG5cdFx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgdG9KU09OIG1ldGhvZFxuXHRcdGlmICggdHJhY2tUeXBlLnRvSlNPTiAhPT0gdGhpcy50b0pTT04gKSB7XG5cblx0XHRcdGpzb24gPSB0cmFja1R5cGUudG9KU09OKCB0cmFjayApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYnkgZGVmYXVsdCwgd2UgYXNzdW1lIHRoZSBkYXRhIGNhbiBiZSBzZXJpYWxpemVkIGFzLWlzXG5cdFx0XHRqc29uID0ge1xuXG5cdFx0XHRcdCduYW1lJzogdHJhY2submFtZSxcblx0XHRcdFx0J3RpbWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0cmFjay50aW1lcywgQXJyYXkgKSxcblx0XHRcdFx0J3ZhbHVlcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdHJhY2sudmFsdWVzLCBBcnJheSApXG5cblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IGludGVycG9sYXRpb24gPSB0cmFjay5nZXRJbnRlcnBvbGF0aW9uKCk7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhdGlvbiAhPT0gdHJhY2suRGVmYXVsdEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0anNvbi5pbnRlcnBvbGF0aW9uID0gaW50ZXJwb2xhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0anNvbi50eXBlID0gdHJhY2suVmFsdWVUeXBlTmFtZTsgLy8gbWFuZGF0b3J5XG5cblx0XHRyZXR1cm4ganNvbjtcblxuXHR9XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgRGlzY3JldGVJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH1cblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgTGluZWFySW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IEN1YmljSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9XG5cblx0c2V0SW50ZXJwb2xhdGlvbiggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdGxldCBmYWN0b3J5TWV0aG9kO1xuXG5cdFx0c3dpdGNoICggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZURpc2NyZXRlOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEludGVycG9sYXRlTGluZWFyOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZVNtb290aDpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoIGZhY3RvcnlNZXRob2QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgbWVzc2FnZSA9ICd1bnN1cHBvcnRlZCBpbnRlcnBvbGF0aW9uIGZvciAnICtcblx0XHRcdFx0dGhpcy5WYWx1ZVR5cGVOYW1lICsgJyBrZXlmcmFtZSB0cmFjayBuYW1lZCAnICsgdGhpcy5uYW1lO1xuXG5cdFx0XHRpZiAoIHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBmYWxsIGJhY2sgdG8gZGVmYXVsdCwgdW5sZXNzIHRoZSBkZWZhdWx0IGl0c2VsZiBpcyBtZXNzZWQgdXBcblx0XHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggbWVzc2FnZSApOyAvLyBmYXRhbCwgaW4gdGhpcyBjYXNlXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLktleWZyYW1lVHJhY2s6JywgbWVzc2FnZSApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNyZWF0ZUludGVycG9sYW50ID0gZmFjdG9yeU1ldGhvZDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRJbnRlcnBvbGF0aW9uKCkge1xuXG5cdFx0c3dpdGNoICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCApIHtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZURpc2NyZXRlO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDpcblxuXHRcdFx0XHRyZXR1cm4gSW50ZXJwb2xhdGVTbW9vdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdldFZhbHVlU2l6ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGggLyB0aGlzLnRpbWVzLmxlbmd0aDtcblxuXHR9XG5cblx0Ly8gbW92ZSBhbGwga2V5ZnJhbWVzIGVpdGhlciBmb3J3YXJkcyBvciBiYWNrd2FyZHMgaW4gdGltZVxuXHRzaGlmdCggdGltZU9mZnNldCApIHtcblxuXHRcdGlmICggdGltZU9mZnNldCAhPT0gMC4wICkge1xuXG5cdFx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICs9IHRpbWVPZmZzZXQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvLyBzY2FsZSBhbGwga2V5ZnJhbWUgdGltZXMgYnkgYSBmYWN0b3IgKHVzZWZ1bCBmb3IgZnJhbWUgPC0+IHNlY29uZHMgY29udmVyc2lvbnMpXG5cdHNjYWxlKCB0aW1lU2NhbGUgKSB7XG5cblx0XHRpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkge1xuXG5cdFx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICo9IHRpbWVTY2FsZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIHJlbW92ZXMga2V5ZnJhbWVzIGJlZm9yZSBhbmQgYWZ0ZXIgYW5pbWF0aW9uIHdpdGhvdXQgY2hhbmdpbmcgYW55IHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIFtzdGFydFRpbWUsIGVuZFRpbWVdLlxuXHQvLyBJTVBPUlRBTlQ6IFdlIGRvIG5vdCBzaGlmdCBhcm91bmQga2V5cyB0byB0aGUgc3RhcnQgb2YgdGhlIHRyYWNrIHRpbWUsIGJlY2F1c2UgZm9yIGludGVycG9sYXRlZCBrZXlzIHRoaXMgd2lsbCBjaGFuZ2UgdGhlaXIgdmFsdWVzXG5cdHRyaW0oIHN0YXJ0VGltZSwgZW5kVGltZSApIHtcblxuXHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcyxcblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoO1xuXG5cdFx0bGV0IGZyb20gPSAwLFxuXHRcdFx0dG8gPSBuS2V5cyAtIDE7XG5cblx0XHR3aGlsZSAoIGZyb20gIT09IG5LZXlzICYmIHRpbWVzWyBmcm9tIF0gPCBzdGFydFRpbWUgKSB7XG5cblx0XHRcdCsrIGZyb207XG5cblx0XHR9XG5cblx0XHR3aGlsZSAoIHRvICE9PSAtIDEgJiYgdGltZXNbIHRvIF0gPiBlbmRUaW1lICkge1xuXG5cdFx0XHQtLSB0bztcblxuXHRcdH1cblxuXHRcdCsrIHRvOyAvLyBpbmNsdXNpdmUgLT4gZXhjbHVzaXZlIGJvdW5kXG5cblx0XHRpZiAoIGZyb20gIT09IDAgfHwgdG8gIT09IG5LZXlzICkge1xuXG5cdFx0XHQvLyBlbXB0eSB0cmFja3MgYXJlIGZvcmJpZGRlbiwgc28ga2VlcCBhdCBsZWFzdCBvbmUga2V5ZnJhbWVcblx0XHRcdGlmICggZnJvbSA+PSB0byApIHtcblxuXHRcdFx0XHR0byA9IE1hdGgubWF4KCB0bywgMSApO1xuXHRcdFx0XHRmcm9tID0gdG8gLSAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XG5cdFx0XHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGltZXMsIGZyb20sIHRvICk7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzLCBmcm9tICogc3RyaWRlLCB0byAqIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIGVuc3VyZSB3ZSBkbyBub3QgZ2V0IGEgR2FyYmFnZUluR2FyYmFnZU91dCBzaXR1YXRpb24sIG1ha2Ugc3VyZSB0cmFja3MgYXJlIGF0IGxlYXN0IG1pbmltYWxseSB2aWFibGVcblx0dmFsaWRhdGUoKSB7XG5cblx0XHRsZXQgdmFsaWQgPSB0cnVlO1xuXG5cdFx0Y29uc3QgdmFsdWVTaXplID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogSW52YWxpZCB2YWx1ZSBzaXplIGluIHRyYWNrLicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXMsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcblxuXHRcdFx0bktleXMgPSB0aW1lcy5sZW5ndGg7XG5cblx0XHRpZiAoIG5LZXlzID09PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVHJhY2sgaXMgZW1wdHkuJywgdGhpcyApO1xuXHRcdFx0dmFsaWQgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGxldCBwcmV2VGltZSA9IG51bGw7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5LZXlzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJyVGltZSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdGlmICggdHlwZW9mIGN1cnJUaW1lID09PSAnbnVtYmVyJyAmJiBpc05hTiggY3VyclRpbWUgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVGltZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgY3VyclRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBPdXQgb2Ygb3JkZXIga2V5cy4nLCB0aGlzLCBpLCBjdXJyVGltZSwgcHJldlRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJldlRpbWUgPSBjdXJyVGltZTtcblxuXHRcdH1cblxuXHRcdGlmICggdmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggQW5pbWF0aW9uVXRpbHMuaXNUeXBlZEFycmF5KCB2YWx1ZXMgKSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9XG5cblx0Ly8gcmVtb3ZlcyBlcXVpdmFsZW50IHNlcXVlbnRpYWwga2V5cyBhcyBjb21tb24gaW4gbW9ycGggdGFyZ2V0IHNlcXVlbmNlc1xuXHQvLyAoMCwwLDAsMCwxLDEsMSwwLDAsMCwwLDAsMCwwKSAtLT4gKDAsMCwxLDEsMCwwKVxuXHRvcHRpbWl6ZSgpIHtcblxuXHRcdC8vIHRpbWVzIG9yIHZhbHVlcyBtYXkgYmUgc2hhcmVkIHdpdGggb3RoZXIgdHJhY2tzLCBzbyBvdmVyd3JpdGluZyBpcyB1bnNhZmVcblx0XHRjb25zdCB0aW1lcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudGltZXMgKSxcblx0XHRcdHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzICksXG5cdFx0XHRzdHJpZGUgPSB0aGlzLmdldFZhbHVlU2l6ZSgpLFxuXG5cdFx0XHRzbW9vdGhJbnRlcnBvbGF0aW9uID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uKCkgPT09IEludGVycG9sYXRlU21vb3RoLFxuXG5cdFx0XHRsYXN0SW5kZXggPSB0aW1lcy5sZW5ndGggLSAxO1xuXG5cdFx0bGV0IHdyaXRlSW5kZXggPSAxO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDwgbGFzdEluZGV4OyArKyBpICkge1xuXG5cdFx0XHRsZXQga2VlcCA9IGZhbHNlO1xuXG5cdFx0XHRjb25zdCB0aW1lID0gdGltZXNbIGkgXTtcblx0XHRcdGNvbnN0IHRpbWVOZXh0ID0gdGltZXNbIGkgKyAxIF07XG5cblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcblxuXHRcdFx0aWYgKCB0aW1lICE9PSB0aW1lTmV4dCAmJiAoIGkgIT09IDEgfHwgdGltZSAhPT0gdGltZXNbIDAgXSApICkge1xuXG5cdFx0XHRcdGlmICggISBzbW9vdGhJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIHVubmVjZXNzYXJ5IGtleWZyYW1lcyBzYW1lIGFzIHRoZWlyIG5laWdoYm9yc1xuXG5cdFx0XHRcdFx0Y29uc3Qgb2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXG5cdFx0XHRcdFx0XHRvZmZzZXROID0gb2Zmc2V0ICsgc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gdmFsdWVzWyBvZmZzZXQgKyBqIF07XG5cblx0XHRcdFx0XHRcdGlmICggdmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0UCArIGogXSB8fFxuXHRcdFx0XHRcdFx0XHR2YWx1ZSAhPT0gdmFsdWVzWyBvZmZzZXROICsgaiBdICkge1xuXG5cdFx0XHRcdFx0XHRcdGtlZXAgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRrZWVwID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaW4tcGxhY2UgY29tcGFjdGlvblxuXG5cdFx0XHRpZiAoIGtlZXAgKSB7XG5cblx0XHRcdFx0aWYgKCBpICE9PSB3cml0ZUluZGV4ICkge1xuXG5cdFx0XHRcdFx0dGltZXNbIHdyaXRlSW5kZXggXSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdFx0XHRjb25zdCByZWFkT2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdHdyaXRlT2Zmc2V0ID0gd3JpdGVJbmRleCAqIHN0cmlkZTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHR2YWx1ZXNbIHdyaXRlT2Zmc2V0ICsgaiBdID0gdmFsdWVzWyByZWFkT2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBmbHVzaCBsYXN0IGtleWZyYW1lIChjb21wYWN0aW9uIGxvb2tzIGFoZWFkKVxuXG5cdFx0aWYgKCBsYXN0SW5kZXggPiAwICkge1xuXG5cdFx0XHR0aW1lc1sgd3JpdGVJbmRleCBdID0gdGltZXNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRmb3IgKCBsZXQgcmVhZE9mZnNldCA9IGxhc3RJbmRleCAqIHN0cmlkZSwgd3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlLCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Kysgd3JpdGVJbmRleDtcblxuXHRcdH1cblxuXHRcdGlmICggd3JpdGVJbmRleCAhPT0gdGltZXMubGVuZ3RoICkge1xuXG5cdFx0XHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGltZXMsIDAsIHdyaXRlSW5kZXggKTtcblx0XHRcdHRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdmFsdWVzLCAwLCB3cml0ZUluZGV4ICogc3RyaWRlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnRpbWVzID0gdGltZXM7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IHZhbHVlcztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdGNvbnN0IHRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy50aW1lcywgMCApO1xuXHRcdGNvbnN0IHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzLCAwICk7XG5cblx0XHRjb25zdCBUeXBlZEtleWZyYW1lVHJhY2sgPSB0aGlzLmNvbnN0cnVjdG9yO1xuXHRcdGNvbnN0IHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjayggdGhpcy5uYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cblx0XHQvLyBJbnRlcnBvbGFudCBhcmd1bWVudCB0byBjb25zdHJ1Y3RvciBpcyBub3Qgc2F2ZWQsIHNvIGNvcHkgdGhlIGZhY3RvcnkgbWV0aG9kIGRpcmVjdGx5LlxuXHRcdHRyYWNrLmNyZWF0ZUludGVycG9sYW50ID0gdGhpcy5jcmVhdGVJbnRlcnBvbGFudDtcblxuXHRcdHJldHVybiB0cmFjaztcblxuXHR9XG5cbn1cblxuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVGltZUJ1ZmZlclR5cGUgPSBGbG9hdDMyQXJyYXk7XG5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZUJ1ZmZlclR5cGUgPSBGbG9hdDMyQXJyYXk7XG5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlTGluZWFyO1xuXG4vKipcbiAqIEEgVHJhY2sgb2YgQm9vbGVhbiBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIEJvb2xlYW5LZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7fVxuXG5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdib29sJztcbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZUJ1ZmZlclR5cGUgPSBBcnJheTtcbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlRGlzY3JldGU7XG5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyID0gdW5kZWZpbmVkO1xuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIFRyYWNrIG9mIGtleWZyYW1lIHZhbHVlcyB0aGF0IHJlcHJlc2VudCBjb2xvci5cbiAqL1xuY2xhc3MgQ29sb3JLZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7fVxuXG5Db2xvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnY29sb3InO1xuXG4vKipcbiAqIEEgVHJhY2sgb2YgbnVtZXJpYyBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIE51bWJlcktleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHt9XG5cbk51bWJlcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnbnVtYmVyJztcblxuLyoqXG4gKiBTcGhlcmljYWwgbGluZWFyIHVuaXQgcXVhdGVybmlvbiBpbnRlcnBvbGFudC5cbiAqL1xuXG5jbGFzcyBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQgZXh0ZW5kcyBJbnRlcnBvbGFudCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdH1cblxuXHRpbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdGFscGhhID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApO1xuXG5cdFx0bGV0IG9mZnNldCA9IGkxICogc3RyaWRlO1xuXG5cdFx0Zm9yICggbGV0IGVuZCA9IG9mZnNldCArIHN0cmlkZTsgb2Zmc2V0ICE9PSBlbmQ7IG9mZnNldCArPSA0ICkge1xuXG5cdFx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggcmVzdWx0LCAwLCB2YWx1ZXMsIG9mZnNldCAtIHN0cmlkZSwgdmFsdWVzLCBvZmZzZXQsIGFscGhhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgVHJhY2sgb2YgcXVhdGVybmlvbiBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH1cblxufVxuXG5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdxdWF0ZXJuaW9uJztcbi8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcblF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlTGluZWFyO1xuUXVhdGVybmlvbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIFRyYWNrIHRoYXQgaW50ZXJwb2xhdGVzIFN0cmluZ3NcbiAqL1xuY2xhc3MgU3RyaW5nS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge31cblxuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdzdHJpbmcnO1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVCdWZmZXJUeXBlID0gQXJyYXk7XG5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlRGlzY3JldGU7XG5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIgPSB1bmRlZmluZWQ7XG5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGggPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBUcmFjayBvZiB2ZWN0b3JlZCBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIFZlY3RvcktleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHt9XG5cblZlY3RvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAndmVjdG9yJztcblxuY2xhc3MgQW5pbWF0aW9uQ2xpcCB7XG5cblx0Y29uc3RydWN0b3IoIG5hbWUsIGR1cmF0aW9uID0gLSAxLCB0cmFja3MsIGJsZW5kTW9kZSA9IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0dGhpcy50cmFja3MgPSB0cmFja3M7XG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXHRcdHRoaXMuYmxlbmRNb2RlID0gYmxlbmRNb2RlO1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHQvLyB0aGlzIG1lYW5zIGl0IHNob3VsZCBmaWd1cmUgb3V0IGl0cyBkdXJhdGlvbiBieSBzY2FubmluZyB0aGUgdHJhY2tzXG5cdFx0aWYgKCB0aGlzLmR1cmF0aW9uIDwgMCApIHtcblxuXHRcdFx0dGhpcy5yZXNldER1cmF0aW9uKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cblx0c3RhdGljIHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgdHJhY2tzID0gW10sXG5cdFx0XHRqc29uVHJhY2tzID0ganNvbi50cmFja3MsXG5cdFx0XHRmcmFtZVRpbWUgPSAxLjAgLyAoIGpzb24uZnBzIHx8IDEuMCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0ganNvblRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCBwYXJzZUtleWZyYW1lVHJhY2soIGpzb25UcmFja3NbIGkgXSApLnNjYWxlKCBmcmFtZVRpbWUgKSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2xpcCA9IG5ldyB0aGlzKCBqc29uLm5hbWUsIGpzb24uZHVyYXRpb24sIHRyYWNrcywganNvbi5ibGVuZE1vZGUgKTtcblx0XHRjbGlwLnV1aWQgPSBqc29uLnV1aWQ7XG5cblx0XHRyZXR1cm4gY2xpcDtcblxuXHR9XG5cblx0c3RhdGljIHRvSlNPTiggY2xpcCApIHtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdLFxuXHRcdFx0Y2xpcFRyYWNrcyA9IGNsaXAudHJhY2tzO1xuXG5cdFx0Y29uc3QganNvbiA9IHtcblxuXHRcdFx0J25hbWUnOiBjbGlwLm5hbWUsXG5cdFx0XHQnZHVyYXRpb24nOiBjbGlwLmR1cmF0aW9uLFxuXHRcdFx0J3RyYWNrcyc6IHRyYWNrcyxcblx0XHRcdCd1dWlkJzogY2xpcC51dWlkLFxuXHRcdFx0J2JsZW5kTW9kZSc6IGNsaXAuYmxlbmRNb2RlXG5cblx0XHR9O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gY2xpcFRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCBLZXlmcmFtZVRyYWNrLnRvSlNPTiggY2xpcFRyYWNrc1sgaSBdICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBqc29uO1xuXG5cdH1cblxuXHRzdGF0aWMgQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UoIG5hbWUsIG1vcnBoVGFyZ2V0U2VxdWVuY2UsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0Y29uc3QgbnVtTW9ycGhUYXJnZXRzID0gbW9ycGhUYXJnZXRTZXF1ZW5jZS5sZW5ndGg7XG5cdFx0Y29uc3QgdHJhY2tzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1Nb3JwaFRhcmdldHM7IGkgKysgKSB7XG5cblx0XHRcdGxldCB0aW1lcyA9IFtdO1xuXHRcdFx0bGV0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHR0aW1lcy5wdXNoKFxuXHRcdFx0XHQoIGkgKyBudW1Nb3JwaFRhcmdldHMgLSAxICkgJSBudW1Nb3JwaFRhcmdldHMsXG5cdFx0XHRcdGksXG5cdFx0XHRcdCggaSArIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyApO1xuXG5cdFx0XHR2YWx1ZXMucHVzaCggMCwgMSwgMCApO1xuXG5cdFx0XHRjb25zdCBvcmRlciA9IEFuaW1hdGlvblV0aWxzLmdldEtleWZyYW1lT3JkZXIoIHRpbWVzICk7XG5cdFx0XHR0aW1lcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB0aW1lcywgMSwgb3JkZXIgKTtcblx0XHRcdHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB2YWx1ZXMsIDEsIG9yZGVyICk7XG5cblx0XHRcdC8vIGlmIHRoZXJlIGlzIGEga2V5IGF0IHRoZSBmaXJzdCBmcmFtZSwgZHVwbGljYXRlIGl0IGFzIHRoZVxuXHRcdFx0Ly8gbGFzdCBmcmFtZSBhcyB3ZWxsIGZvciBwZXJmZWN0IGxvb3AuXG5cdFx0XHRpZiAoICEgbm9Mb29wICYmIHRpbWVzWyAwIF0gPT09IDAgKSB7XG5cblx0XHRcdFx0dGltZXMucHVzaCggbnVtTW9ycGhUYXJnZXRzICk7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZXNbIDAgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRyYWNrcy5wdXNoKFxuXHRcdFx0XHRuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayhcblx0XHRcdFx0XHQnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1snICsgbW9ycGhUYXJnZXRTZXF1ZW5jZVsgaSBdLm5hbWUgKyAnXScsXG5cdFx0XHRcdFx0dGltZXMsIHZhbHVlc1xuXHRcdFx0XHQpLnNjYWxlKCAxLjAgLyBmcHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyB0aGlzKCBuYW1lLCAtIDEsIHRyYWNrcyApO1xuXG5cdH1cblxuXHRzdGF0aWMgZmluZEJ5TmFtZSggb2JqZWN0T3JDbGlwQXJyYXksIG5hbWUgKSB7XG5cblx0XHRsZXQgY2xpcEFycmF5ID0gb2JqZWN0T3JDbGlwQXJyYXk7XG5cblx0XHRpZiAoICEgQXJyYXkuaXNBcnJheSggb2JqZWN0T3JDbGlwQXJyYXkgKSApIHtcblxuXHRcdFx0Y29uc3QgbyA9IG9iamVjdE9yQ2xpcEFycmF5O1xuXHRcdFx0Y2xpcEFycmF5ID0gby5nZW9tZXRyeSAmJiBvLmdlb21ldHJ5LmFuaW1hdGlvbnMgfHwgby5hbmltYXRpb25zO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcEFycmF5Lmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBjbGlwQXJyYXlbIGkgXS5uYW1lID09PSBuYW1lICkge1xuXG5cdFx0XHRcdHJldHVybiBjbGlwQXJyYXlbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdHN0YXRpYyBDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlcyggbW9ycGhUYXJnZXRzLCBmcHMsIG5vTG9vcCApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzID0ge307XG5cblx0XHQvLyB0ZXN0ZWQgd2l0aCBodHRwczovL3JlZ2V4MTAxLmNvbS8gb24gdHJpY2sgc2VxdWVuY2VzXG5cdFx0Ly8gc3VjaCBmbGFtaW5nb19mbHlBXzAwMywgZmxhbWluZ29fcnVuMV8wMDMsIGNyZGVhdGgwMDU5XG5cdFx0Y29uc3QgcGF0dGVybiA9IC9eKFtcXHctXSo/KShbXFxkXSspJC87XG5cblx0XHQvLyBzb3J0IG1vcnBoIHRhcmdldCBuYW1lcyBpbnRvIGFuaW1hdGlvbiBncm91cHMgYmFzZWRcblx0XHQvLyBwYXR0ZXJucyBsaWtlIFdhbGtfMDAxLCBXYWxrXzAwMiwgUnVuXzAwMSwgUnVuXzAwMlxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cdFx0XHRjb25zdCBwYXJ0cyA9IG1vcnBoVGFyZ2V0Lm5hbWUubWF0Y2goIHBhdHRlcm4gKTtcblxuXHRcdFx0aWYgKCBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdGNvbnN0IG5hbWUgPSBwYXJ0c1sgMSBdO1xuXG5cdFx0XHRcdGxldCBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggISBhbmltYXRpb25Nb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdID0gYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gW107XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFuaW1hdGlvbk1vcnBoVGFyZ2V0cy5wdXNoKCBtb3JwaFRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBjbGlwcyA9IFtdO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0Y2xpcHMucHVzaCggdGhpcy5DcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSggbmFtZSwgYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXSwgZnBzLCBub0xvb3AgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsaXBzO1xuXG5cdH1cblxuXHQvLyBwYXJzZSB0aGUgYW5pbWF0aW9uLmhpZXJhcmNoeSBmb3JtYXRcblx0c3RhdGljIHBhcnNlQW5pbWF0aW9uKCBhbmltYXRpb24sIGJvbmVzICkge1xuXG5cdFx0aWYgKCAhIGFuaW1hdGlvbiApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbkNsaXA6IE5vIGFuaW1hdGlvbiBpbiBKU09OTG9hZGVyIGRhdGEuJyApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhZGROb25lbXB0eVRyYWNrID0gZnVuY3Rpb24gKCB0cmFja1R5cGUsIHRyYWNrTmFtZSwgYW5pbWF0aW9uS2V5cywgcHJvcGVydHlOYW1lLCBkZXN0VHJhY2tzICkge1xuXG5cdFx0XHQvLyBvbmx5IHJldHVybiB0cmFjayBpZiB0aGVyZSBhcmUgYWN0dWFsbHkga2V5cy5cblx0XHRcdGlmICggYW5pbWF0aW9uS2V5cy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGltZXMgPSBbXTtcblx0XHRcdFx0Y29uc3QgdmFsdWVzID0gW107XG5cblx0XHRcdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGFuaW1hdGlvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHByb3BlcnR5TmFtZSApO1xuXG5cdFx0XHRcdC8vIGVtcHR5IGtleXMgYXJlIGZpbHRlcmVkIG91dCwgc28gY2hlY2sgYWdhaW5cblx0XHRcdFx0aWYgKCB0aW1lcy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdFx0XHRkZXN0VHJhY2tzLnB1c2goIG5ldyB0cmFja1R5cGUoIHRyYWNrTmFtZSwgdGltZXMsIHZhbHVlcyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0Y29uc3QgdHJhY2tzID0gW107XG5cblx0XHRjb25zdCBjbGlwTmFtZSA9IGFuaW1hdGlvbi5uYW1lIHx8ICdkZWZhdWx0Jztcblx0XHRjb25zdCBmcHMgPSBhbmltYXRpb24uZnBzIHx8IDMwO1xuXHRcdGNvbnN0IGJsZW5kTW9kZSA9IGFuaW1hdGlvbi5ibGVuZE1vZGU7XG5cblx0XHQvLyBhdXRvbWF0aWMgbGVuZ3RoIGRldGVybWluYXRpb24gaW4gQW5pbWF0aW9uQ2xpcC5cblx0XHRsZXQgZHVyYXRpb24gPSBhbmltYXRpb24ubGVuZ3RoIHx8IC0gMTtcblxuXHRcdGNvbnN0IGhpZXJhcmNoeVRyYWNrcyA9IGFuaW1hdGlvbi5oaWVyYXJjaHkgfHwgW107XG5cblx0XHRmb3IgKCBsZXQgaCA9IDA7IGggPCBoaWVyYXJjaHlUcmFja3MubGVuZ3RoOyBoICsrICkge1xuXG5cdFx0XHRjb25zdCBhbmltYXRpb25LZXlzID0gaGllcmFyY2h5VHJhY2tzWyBoIF0ua2V5cztcblxuXHRcdFx0Ly8gc2tpcCBlbXB0eSB0cmFja3Ncblx0XHRcdGlmICggISBhbmltYXRpb25LZXlzIHx8IGFuaW1hdGlvbktleXMubGVuZ3RoID09PSAwICkgY29udGludWU7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggdGFyZ2V0c1xuXHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyAwIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdC8vIGZpZ3VyZSBvdXQgYWxsIG1vcnBoIHRhcmdldHMgdXNlZCBpbiB0aGlzIHRyYWNrXG5cdFx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0TmFtZXMgPSB7fTtcblxuXHRcdFx0XHRsZXQgaztcblxuXHRcdFx0XHRmb3IgKCBrID0gMDsgayA8IGFuaW1hdGlvbktleXMubGVuZ3RoOyBrICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgbSA9IDA7IG0gPCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRtb3JwaFRhcmdldE5hbWVzWyBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzWyBtIF0gXSA9IC0gMTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBjcmVhdGUgYSB0cmFjayBmb3IgZWFjaCBtb3JwaCB0YXJnZXQgd2l0aCBhbGwgemVyb1xuXHRcdFx0XHQvLyBtb3JwaFRhcmdldEluZmx1ZW5jZXMgZXhjZXB0IGZvciB0aGUga2V5cyBpbiB3aGljaFxuXHRcdFx0XHQvLyB0aGUgbW9ycGhUYXJnZXQgaXMgbmFtZWQuXG5cdFx0XHRcdGZvciAoIGNvbnN0IG1vcnBoVGFyZ2V0TmFtZSBpbiBtb3JwaFRhcmdldE5hbWVzICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdGltZXMgPSBbXTtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBtID0gMDsgbSAhPT0gYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ICsrIG0gKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGFuaW1hdGlvbktleSA9IGFuaW1hdGlvbktleXNbIGsgXTtcblxuXHRcdFx0XHRcdFx0dGltZXMucHVzaCggYW5pbWF0aW9uS2V5LnRpbWUgKTtcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCAoIGFuaW1hdGlvbktleS5tb3JwaFRhcmdldCA9PT0gbW9ycGhUYXJnZXROYW1lICkgPyAxIDogMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dHJhY2tzLnB1c2goIG5ldyBOdW1iZXJLZXlmcmFtZVRyYWNrKCAnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlWycgKyBtb3JwaFRhcmdldE5hbWUgKyAnXScsIHRpbWVzLCB2YWx1ZXMgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkdXJhdGlvbiA9IG1vcnBoVGFyZ2V0TmFtZXMubGVuZ3RoICogZnBzO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIC4uLmFzc3VtZSBza2VsZXRhbCBhbmltYXRpb25cblxuXHRcdFx0XHRjb25zdCBib25lTmFtZSA9ICcuYm9uZXNbJyArIGJvbmVzWyBoIF0ubmFtZSArICddJztcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5wb3NpdGlvbicsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3BvcycsIHRyYWNrcyApO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0UXVhdGVybmlvbktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5xdWF0ZXJuaW9uJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAncm90JywgdHJhY2tzICk7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRWZWN0b3JLZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcuc2NhbGUnLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdzY2wnLCB0cmFja3MgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0cmFja3MubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGNsaXAgPSBuZXcgdGhpcyggY2xpcE5hbWUsIGR1cmF0aW9uLCB0cmFja3MsIGJsZW5kTW9kZSApO1xuXG5cdFx0cmV0dXJuIGNsaXA7XG5cblx0fVxuXG5cdHJlc2V0RHVyYXRpb24oKSB7XG5cblx0XHRjb25zdCB0cmFja3MgPSB0aGlzLnRyYWNrcztcblx0XHRsZXQgZHVyYXRpb24gPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gdHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgdHJhY2sgPSB0aGlzLnRyYWNrc1sgaSBdO1xuXG5cdFx0XHRkdXJhdGlvbiA9IE1hdGgubWF4KCBkdXJhdGlvbiwgdHJhY2sudGltZXNbIHRyYWNrLnRpbWVzLmxlbmd0aCAtIDEgXSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyaW0oKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudHJhY2tzWyBpIF0udHJpbSggMCwgdGhpcy5kdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHZhbGlkYXRlKCkge1xuXG5cdFx0bGV0IHZhbGlkID0gdHJ1ZTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsaWQgPSB2YWxpZCAmJiB0aGlzLnRyYWNrc1sgaSBdLnZhbGlkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsaWQ7XG5cblx0fVxuXG5cdG9wdGltaXplKCkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRyYWNrc1sgaSBdLm9wdGltaXplKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRjb25zdCB0cmFja3MgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dHJhY2tzLnB1c2goIHRoaXMudHJhY2tzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLm5hbWUsIHRoaXMuZHVyYXRpb24sIHRyYWNrcywgdGhpcy5ibGVuZE1vZGUgKTtcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9KU09OKCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIHR5cGVOYW1lICkge1xuXG5cdHN3aXRjaCAoIHR5cGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cblx0XHRjYXNlICdzY2FsYXInOlxuXHRcdGNhc2UgJ2RvdWJsZSc6XG5cdFx0Y2FzZSAnZmxvYXQnOlxuXHRcdGNhc2UgJ251bWJlcic6XG5cdFx0Y2FzZSAnaW50ZWdlcic6XG5cblx0XHRcdHJldHVybiBOdW1iZXJLZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAndmVjdG9yJzpcblx0XHRjYXNlICd2ZWN0b3IyJzpcblx0XHRjYXNlICd2ZWN0b3IzJzpcblx0XHRjYXNlICd2ZWN0b3I0JzpcblxuXHRcdFx0cmV0dXJuIFZlY3RvcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdjb2xvcic6XG5cblx0XHRcdHJldHVybiBDb2xvcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdxdWF0ZXJuaW9uJzpcblxuXHRcdFx0cmV0dXJuIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAnYm9vbCc6XG5cdFx0Y2FzZSAnYm9vbGVhbic6XG5cblx0XHRcdHJldHVybiBCb29sZWFuS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ3N0cmluZyc6XG5cblx0XHRcdHJldHVybiBTdHJpbmdLZXlmcmFtZVRyYWNrO1xuXG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBVbnN1cHBvcnRlZCB0eXBlTmFtZTogJyArIHR5cGVOYW1lICk7XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VLZXlmcmFtZVRyYWNrKCBqc29uICkge1xuXG5cdGlmICgganNvbi50eXBlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayB0eXBlIHVuZGVmaW5lZCwgY2FuIG5vdCBwYXJzZScgKTtcblxuXHR9XG5cblx0Y29uc3QgdHJhY2tUeXBlID0gZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSgganNvbi50eXBlICk7XG5cblx0aWYgKCBqc29uLnRpbWVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRjb25zdCB0aW1lcyA9IFtdLCB2YWx1ZXMgPSBbXTtcblxuXHRcdEFuaW1hdGlvblV0aWxzLmZsYXR0ZW5KU09OKCBqc29uLmtleXMsIHRpbWVzLCB2YWx1ZXMsICd2YWx1ZScgKTtcblxuXHRcdGpzb24udGltZXMgPSB0aW1lcztcblx0XHRqc29uLnZhbHVlcyA9IHZhbHVlcztcblxuXHR9XG5cblx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgcGFyc2UgbWV0aG9kXG5cdGlmICggdHJhY2tUeXBlLnBhcnNlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyZXR1cm4gdHJhY2tUeXBlLnBhcnNlKCBqc29uICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSBhIGNvbnN0cnVjdG9yIGNvbXBhdGlibGUgd2l0aCB0aGUgYmFzZVxuXHRcdHJldHVybiBuZXcgdHJhY2tUeXBlKCBqc29uLm5hbWUsIGpzb24udGltZXMsIGpzb24udmFsdWVzLCBqc29uLmludGVycG9sYXRpb24gKTtcblxuXHR9XG5cbn1cblxuY29uc3QgQ2FjaGUgPSB7XG5cblx0ZW5hYmxlZDogZmFsc2UsXG5cblx0ZmlsZXM6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCBrZXksIGZpbGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLkNhY2hlJywgJ0FkZGluZyBrZXk6Jywga2V5ICk7XG5cblx0XHR0aGlzLmZpbGVzWyBrZXkgXSA9IGZpbGU7XG5cblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdDaGVja2luZyBrZXk6Jywga2V5ICk7XG5cblx0XHRyZXR1cm4gdGhpcy5maWxlc1sga2V5IF07XG5cblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0ZGVsZXRlIHRoaXMuZmlsZXNbIGtleSBdO1xuXG5cdH0sXG5cblx0Y2xlYXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZmlsZXMgPSB7fTtcblxuXHR9XG5cbn07XG5cbmNsYXNzIExvYWRpbmdNYW5hZ2VyIHtcblxuXHRjb25zdHJ1Y3Rvciggb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0bGV0IGlzTG9hZGluZyA9IGZhbHNlO1xuXHRcdGxldCBpdGVtc0xvYWRlZCA9IDA7XG5cdFx0bGV0IGl0ZW1zVG90YWwgPSAwO1xuXHRcdGxldCB1cmxNb2RpZmllciA9IHVuZGVmaW5lZDtcblx0XHRjb25zdCBoYW5kbGVycyA9IFtdO1xuXG5cdFx0Ly8gUmVmZXIgdG8gIzU2ODkgZm9yIHRoZSByZWFzb24gd2h5IHdlIGRvbid0IHNldCAub25TdGFydFxuXHRcdC8vIGluIHRoZSBjb25zdHJ1Y3RvclxuXG5cdFx0dGhpcy5vblN0YXJ0ID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMub25Mb2FkID0gb25Mb2FkO1xuXHRcdHRoaXMub25Qcm9ncmVzcyA9IG9uUHJvZ3Jlc3M7XG5cdFx0dGhpcy5vbkVycm9yID0gb25FcnJvcjtcblxuXHRcdHRoaXMuaXRlbVN0YXJ0ID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRcdGl0ZW1zVG90YWwgKys7XG5cblx0XHRcdGlmICggaXNMb2FkaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLm9uU3RhcnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHNjb3BlLm9uU3RhcnQoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aXNMb2FkaW5nID0gdHJ1ZTtcblxuXHRcdH07XG5cblx0XHR0aGlzLml0ZW1FbmQgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdFx0aXRlbXNMb2FkZWQgKys7XG5cblx0XHRcdGlmICggc2NvcGUub25Qcm9ncmVzcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLm9uUHJvZ3Jlc3MoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGl0ZW1zTG9hZGVkID09PSBpdGVtc1RvdGFsICkge1xuXG5cdFx0XHRcdGlzTG9hZGluZyA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmICggc2NvcGUub25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRzY29wZS5vbkxvYWQoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHR0aGlzLml0ZW1FcnJvciA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uRXJyb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5vbkVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMucmVzb2x2ZVVSTCA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0XHRpZiAoIHVybE1vZGlmaWVyICkge1xuXG5cdFx0XHRcdHJldHVybiB1cmxNb2RpZmllciggdXJsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVybDtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFVSTE1vZGlmaWVyID0gZnVuY3Rpb24gKCB0cmFuc2Zvcm0gKSB7XG5cblx0XHRcdHVybE1vZGlmaWVyID0gdHJhbnNmb3JtO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0XHR0aGlzLmFkZEhhbmRsZXIgPSBmdW5jdGlvbiAoIHJlZ2V4LCBsb2FkZXIgKSB7XG5cblx0XHRcdGhhbmRsZXJzLnB1c2goIHJlZ2V4LCBsb2FkZXIgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5yZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKCByZWdleCApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKCByZWdleCApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBpbmRleCwgMiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0SGFuZGxlciA9IGZ1bmN0aW9uICggZmlsZSApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlZ2V4ID0gaGFuZGxlcnNbIGkgXTtcblx0XHRcdFx0Y29uc3QgbG9hZGVyID0gaGFuZGxlcnNbIGkgKyAxIF07XG5cblx0XHRcdFx0aWYgKCByZWdleC5nbG9iYWwgKSByZWdleC5sYXN0SW5kZXggPSAwOyAvLyBzZWUgIzE3OTIwXG5cblx0XHRcdFx0aWYgKCByZWdleC50ZXN0KCBmaWxlICkgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbG9hZGVyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH07XG5cblx0fVxuXG59XG5cbmNvbnN0IERlZmF1bHRMb2FkaW5nTWFuYWdlciA9IG5ldyBMb2FkaW5nTWFuYWdlcigpO1xuXG5jbGFzcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG5cdFx0dGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcblx0XHR0aGlzLnBhdGggPSAnJztcblx0XHR0aGlzLnJlc291cmNlUGF0aCA9ICcnO1xuXHRcdHRoaXMucmVxdWVzdEhlYWRlciA9IHt9O1xuXG5cdH1cblxuXHRsb2FkKCAvKiB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciAqLyApIHt9XG5cblx0bG9hZEFzeW5jKCB1cmwsIG9uUHJvZ3Jlc3MgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuXG5cdFx0XHRzY29wZS5sb2FkKCB1cmwsIHJlc29sdmUsIG9uUHJvZ3Jlc3MsIHJlamVjdCApO1xuXG5cdFx0fSApO1xuXG5cdH1cblxuXHRwYXJzZSggLyogZGF0YSAqLyApIHt9XG5cblx0c2V0Q3Jvc3NPcmlnaW4oIGNyb3NzT3JpZ2luICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRXaXRoQ3JlZGVudGlhbHMoIHZhbHVlICkge1xuXG5cdFx0dGhpcy53aXRoQ3JlZGVudGlhbHMgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0UGF0aCggcGF0aCApIHtcblxuXHRcdHRoaXMucGF0aCA9IHBhdGg7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFJlc291cmNlUGF0aCggcmVzb3VyY2VQYXRoICkge1xuXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSByZXNvdXJjZVBhdGg7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFJlcXVlc3RIZWFkZXIoIHJlcXVlc3RIZWFkZXIgKSB7XG5cblx0XHR0aGlzLnJlcXVlc3RIZWFkZXIgPSByZXF1ZXN0SGVhZGVyO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jb25zdCBsb2FkaW5nID0ge307XG5cbmNsYXNzIEZpbGVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCAoKSA9PiB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHRoaXMubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgcmVxdWVzdCBpcyBkdXBsaWNhdGVcblxuXHRcdGlmICggbG9hZGluZ1sgdXJsIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bG9hZGluZ1sgdXJsIF0ucHVzaCgge1xuXG5cdFx0XHRcdG9uTG9hZDogb25Mb2FkLFxuXHRcdFx0XHRvblByb2dyZXNzOiBvblByb2dyZXNzLFxuXHRcdFx0XHRvbkVycm9yOiBvbkVycm9yXG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gSW5pdGlhbGlzZSBhcnJheSBmb3IgZHVwbGljYXRlIHJlcXVlc3RzXG5cdFx0bG9hZGluZ1sgdXJsIF0gPSBbXTtcblxuXHRcdGxvYWRpbmdbIHVybCBdLnB1c2goIHtcblx0XHRcdG9uTG9hZDogb25Mb2FkLFxuXHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcblx0XHRcdG9uRXJyb3I6IG9uRXJyb3IsXG5cdFx0fSApO1xuXG5cdFx0Ly8gY3JlYXRlIHJlcXVlc3Rcblx0XHRjb25zdCByZXEgPSBuZXcgUmVxdWVzdCggdXJsLCB7XG5cdFx0XHRoZWFkZXJzOiBuZXcgSGVhZGVycyggdGhpcy5yZXF1ZXN0SGVhZGVyICksXG5cdFx0XHRjcmVkZW50aWFsczogdGhpcy53aXRoQ3JlZGVudGlhbHMgPyAnaW5jbHVkZScgOiAnc2FtZS1vcmlnaW4nLFxuXHRcdFx0Ly8gQW4gYWJvcnQgY29udHJvbGxlciBjb3VsZCBiZSBhZGRlZCB3aXRoaW4gYSBmdXR1cmUgUFJcblx0XHR9ICk7XG5cblx0XHQvLyByZWNvcmQgc3RhdGVzICggYXZvaWQgZGF0YSByYWNlIClcblx0XHRjb25zdCBtaW1lVHlwZSA9IHRoaXMubWltZVR5cGU7XG5cdFx0Y29uc3QgcmVzcG9uc2VUeXBlID0gdGhpcy5yZXNwb25zZVR5cGU7XG5cblx0XHQvLyBzdGFydCB0aGUgZmV0Y2hcblx0XHRmZXRjaCggcmVxIClcblx0XHRcdC50aGVuKCByZXNwb25zZSA9PiB7XG5cblx0XHRcdFx0aWYgKCByZXNwb25zZS5zdGF0dXMgPT09IDIwMCB8fCByZXNwb25zZS5zdGF0dXMgPT09IDAgKSB7XG5cblx0XHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIHJldHVybiBIVFRQIFN0YXR1cyAwIHdoZW4gdXNpbmcgbm9uLWh0dHAgcHJvdG9jb2xcblx0XHRcdFx0XHQvLyBlLmcuICdmaWxlOi8vJyBvciAnZGF0YTovLycuIEhhbmRsZSBhcyBzdWNjZXNzLlxuXG5cdFx0XHRcdFx0aWYgKCByZXNwb25zZS5zdGF0dXMgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZpbGVMb2FkZXI6IEhUVFAgU3RhdHVzIDAgcmVjZWl2ZWQuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gV29ya2Fyb3VuZDogQ2hlY2tpbmcgaWYgcmVzcG9uc2UuYm9keSA9PT0gdW5kZWZpbmVkIGZvciBBbGlwYXkgYnJvd3NlciAjMjM1NDhcblxuXHRcdFx0XHRcdGlmICggdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSAndW5kZWZpbmVkJyB8fCByZXNwb25zZS5ib2R5ID09PSB1bmRlZmluZWQgfHwgcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cdFx0XHRcdFx0Y29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcblx0XHRcdFx0XHRjb25zdCBjb250ZW50TGVuZ3RoID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoICdDb250ZW50LUxlbmd0aCcgKTtcblx0XHRcdFx0XHRjb25zdCB0b3RhbCA9IGNvbnRlbnRMZW5ndGggPyBwYXJzZUludCggY29udGVudExlbmd0aCApIDogMDtcblx0XHRcdFx0XHRjb25zdCBsZW5ndGhDb21wdXRhYmxlID0gdG90YWwgIT09IDA7XG5cdFx0XHRcdFx0bGV0IGxvYWRlZCA9IDA7XG5cblx0XHRcdFx0XHQvLyBwZXJpb2RpY2FsbHkgcmVhZCBkYXRhIGludG8gdGhlIG5ldyBzdHJlYW0gdHJhY2tpbmcgd2hpbGUgZG93bmxvYWQgcHJvZ3Jlc3Ncblx0XHRcdFx0XHRjb25zdCBzdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oIHtcblx0XHRcdFx0XHRcdHN0YXJ0KCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlYWREYXRhKCk7XG5cblx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24gcmVhZERhdGEoKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRyZWFkZXIucmVhZCgpLnRoZW4oICggeyBkb25lLCB2YWx1ZSB9ICkgPT4ge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRvbmUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29udHJvbGxlci5jbG9zZSgpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxvYWRlZCArPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGV2ZW50ID0gbmV3IFByb2dyZXNzRXZlbnQoICdwcm9ncmVzcycsIHsgbGVuZ3RoQ29tcHV0YWJsZSwgbG9hZGVkLCB0b3RhbCB9ICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25Qcm9ncmVzcyApIGNhbGxiYWNrLm9uUHJvZ3Jlc3MoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZSggdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVhZERhdGEoKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBSZXNwb25zZSggc3RyZWFtICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IEVycm9yKCBgZmV0Y2ggZm9yIFwiJHtyZXNwb25zZS51cmx9XCIgcmVzcG9uZGVkIHdpdGggJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApXG5cdFx0XHQudGhlbiggcmVzcG9uc2UgPT4ge1xuXG5cdFx0XHRcdHN3aXRjaCAoIHJlc3BvbnNlVHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ2FycmF5YnVmZmVyJzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG5cblx0XHRcdFx0XHRjYXNlICdibG9iJzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcblxuXHRcdFx0XHRcdGNhc2UgJ2RvY3VtZW50JzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRleHQoKVxuXHRcdFx0XHRcdFx0XHQudGhlbiggdGV4dCA9PiB7XG5cblx0XHRcdFx0XHRcdFx0XHRjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoIHRleHQsIG1pbWVUeXBlICk7XG5cblx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0Y2FzZSAnanNvbic6XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRpZiAoIG1pbWVUeXBlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBzbmlmZiBlbmNvZGluZ1xuXHRcdFx0XHRcdFx0XHRjb25zdCByZSA9IC9jaGFyc2V0PVwiPyhbXjtcIlxcc10qKVwiPy9pO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBleGVjID0gcmUuZXhlYyggbWltZVR5cGUgKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbGFiZWwgPSBleGVjICYmIGV4ZWNbIDEgXSA/IGV4ZWNbIDEgXS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCBsYWJlbCApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKCBhYiA9PiBkZWNvZGVyLmRlY29kZSggYWIgKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IClcblx0XHRcdC50aGVuKCBkYXRhID0+IHtcblxuXHRcdFx0XHQvLyBBZGQgdG8gY2FjaGUgb25seSBvbiBIVFRQIHN1Y2Nlc3MsIHNvIHRoYXQgd2UgZG8gbm90IGNhY2hlXG5cdFx0XHRcdC8vIGVycm9yIHJlc3BvbnNlIGJvZGllcyBhcyBwcm9wZXIgcmVzcG9uc2VzIHRvIHJlcXVlc3RzLlxuXHRcdFx0XHRDYWNoZS5hZGQoIHVybCwgZGF0YSApO1xuXG5cdFx0XHRcdGNvbnN0IGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkxvYWQgKSBjYWxsYmFjay5vbkxvYWQoIGRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKVxuXHRcdFx0LmNhdGNoKCBlcnIgPT4ge1xuXG5cdFx0XHRcdC8vIEFib3J0IGVycm9ycyBhbmQgb3RoZXIgZXJyb3JzIGFyZSBoYW5kbGVkIHRoZSBzYW1lXG5cblx0XHRcdFx0Y29uc3QgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0aWYgKCBjYWxsYmFja3MgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIFdoZW4gb25Mb2FkIHdhcyBjYWxsZWQgYW5kIHVybCB3YXMgZGVsZXRlZCBpbiBgbG9hZGluZ2Bcblx0XHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0XHR0aHJvdyBlcnI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSBjYWxsYmFjay5vbkVycm9yKCBlcnIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cblx0XHRcdH0gKVxuXHRcdFx0LmZpbmFsbHkoICgpID0+IHtcblxuXHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdHRoaXMubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdH1cblxuXHRzZXRSZXNwb25zZVR5cGUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXNwb25zZVR5cGUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0TWltZVR5cGUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5taW1lVHlwZSA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jbGFzcyBBbmltYXRpb25Mb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5zZXRSZXF1ZXN0SGVhZGVyKCB0aGlzLnJlcXVlc3RIZWFkZXIgKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0aGlzLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0YW5pbWF0aW9ucy5wdXNoKCBjbGlwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGJsb2NrIGJhc2VkIHRleHR1cmVzIGxvYWRlciAoZGRzLCBwdnIsIC4uLilcbiAqXG4gKiBTdWIgY2xhc3NlcyBoYXZlIHRvIGltcGxlbWVudCB0aGUgcGFyc2UoKSBtZXRob2Qgd2hpY2ggd2lsbCBiZSB1c2VkIGluIGxvYWQoKS5cbiAqL1xuXG5jbGFzcyBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGltYWdlcyA9IFtdO1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBDb21wcmVzc2VkVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXG5cdFx0bGV0IGxvYWRlZCA9IDA7XG5cblx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggaSApIHtcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybFsgaSBdLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpbWFnZXNbIGkgXSA9IHtcblx0XHRcdFx0XHR3aWR0aDogdGV4RGF0YXMud2lkdGgsXG5cdFx0XHRcdFx0aGVpZ2h0OiB0ZXhEYXRhcy5oZWlnaHQsXG5cdFx0XHRcdFx0Zm9ybWF0OiB0ZXhEYXRhcy5mb3JtYXQsXG5cdFx0XHRcdFx0bWlwbWFwczogdGV4RGF0YXMubWlwbWFwc1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGxvYWRlZCArPSAxO1xuXG5cdFx0XHRcdGlmICggbG9hZGVkID09PSA2ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSApIHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlcztcblx0XHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdXJsLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xuXG5cdFx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNvbXByZXNzZWQgY3ViZW1hcCB0ZXh0dXJlIHN0b3JlZCBpbiBhIHNpbmdsZSBERFMgZmlsZVxuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLmlzQ3ViZW1hcCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGZhY2VzID0gdGV4RGF0YXMubWlwbWFwcy5sZW5ndGggLyB0ZXhEYXRhcy5taXBtYXBDb3VudDtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBmID0gMDsgZiA8IGZhY2VzOyBmICsrICkge1xuXG5cdFx0XHRcdFx0XHRpbWFnZXNbIGYgXSA9IHsgbWlwbWFwczogW10gfTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4RGF0YXMubWlwbWFwQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0ubWlwbWFwcy5wdXNoKCB0ZXhEYXRhcy5taXBtYXBzWyBmICogdGV4RGF0YXMubWlwbWFwQ291bnQgKyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS53aWR0aCA9IHRleERhdGFzLndpZHRoO1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5oZWlnaHQgPSB0ZXhEYXRhcy5oZWlnaHQ7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2UgPSBpbWFnZXM7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcblx0XHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhcy5taXBtYXBzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn1cblxuY2xhc3MgSW1hZ2VMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCAwICk7XG5cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbWFnZSA9IGNyZWF0ZUVsZW1lbnROUyggJ2ltZycgKTtcblxuXHRcdGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkge1xuXG5cdFx0XHRyZW1vdmVFdmVudExpc3RlbmVycygpO1xuXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgdGhpcyApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGhpcyApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUVycm9yKCBldmVudCApIHtcblxuXHRcdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcblxuXHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuXG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApO1xuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRpZiAoIHVybC5zbGljZSggMCwgNSApICE9PSAnZGF0YTonICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuY3Jvc3NPcmlnaW4gIT09IHVuZGVmaW5lZCApIGltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5jcm9zc09yaWdpbjtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdGltYWdlLnNyYyA9IHVybDtcblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cbn1cblxuY2xhc3MgQ3ViZVRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJscywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cblx0XHRsZXQgbG9hZGVkID0gMDtcblxuXHRcdGZ1bmN0aW9uIGxvYWRUZXh0dXJlKCBpICkge1xuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsc1sgaSBdLCBmdW5jdGlvbiAoIGltYWdlICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2VzWyBpIF0gPSBpbWFnZTtcblxuXHRcdFx0XHRsb2FkZWQgKys7XG5cblx0XHRcdFx0aWYgKCBsb2FkZWQgPT09IDYgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCB1bmRlZmluZWQsIG9uRXJyb3IgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHRsb2FkVGV4dHVyZSggaSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQWJzdHJhY3QgQmFzZSBjbGFzcyB0byBsb2FkIGdlbmVyaWMgYmluYXJ5IHRleHR1cmVzIGZvcm1hdHMgKHJnYmUsIGhkciwgLi4uKVxuICpcbiAqIFN1YiBjbGFzc2VzIGhhdmUgdG8gaW1wbGVtZW50IHRoZSBwYXJzZSgpIG1ldGhvZCB3aGljaCB3aWxsIGJlIHVzZWQgaW4gbG9hZCgpLlxuICovXG5cbmNsYXNzIERhdGFUZXh0dXJlTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHRjb25zdCB0ZXhEYXRhID0gc2NvcGUucGFyc2UoIGJ1ZmZlciApO1xuXG5cdFx0XHRpZiAoICEgdGV4RGF0YSApIHJldHVybjtcblxuXHRcdFx0aWYgKCB0ZXhEYXRhLmltYWdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IHRleERhdGEuaW1hZ2U7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleERhdGEuZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhLndpZHRoO1xuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGEuaGVpZ2h0O1xuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmRhdGEgPSB0ZXhEYXRhLmRhdGE7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZS53cmFwUyA9IHRleERhdGEud3JhcFMgIT09IHVuZGVmaW5lZCA/IHRleERhdGEud3JhcFMgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXHRcdFx0dGV4dHVyZS53cmFwVCA9IHRleERhdGEud3JhcFQgIT09IHVuZGVmaW5lZCA/IHRleERhdGEud3JhcFQgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0XHR0ZXh0dXJlLm1hZ0ZpbHRlciA9IHRleERhdGEubWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1hZ0ZpbHRlciA6IExpbmVhckZpbHRlcjtcblx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gdGV4RGF0YS5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IHRleERhdGEubWluRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXG5cdFx0XHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSB0ZXhEYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCA/IHRleERhdGEuYW5pc290cm9weSA6IDE7XG5cblx0XHRcdGlmICggdGV4RGF0YS5lbmNvZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuZW5jb2RpbmcgPSB0ZXhEYXRhLmVuY29kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuZmxpcFkgPSB0ZXhEYXRhLmZsaXBZO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGEuZm9ybWF0O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS50eXBlID0gdGV4RGF0YS50eXBlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YS5taXBtYXBzO1xuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhck1pcG1hcExpbmVhckZpbHRlcjsgLy8gcHJlc3VtYWJseS4uLlxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBDb3VudCA9PT0gMSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleERhdGEuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB0ZXhEYXRhLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUsIHRleERhdGEgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG59XG5cbmNsYXNzIFRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBpbWFnZSApIHtcblxuXHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlO1xuXHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0b25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxufVxuXG5jbGFzcyBMaWdodCBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpZ2h0JztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBpbnRlbnNpdHk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHQvLyBFbXB0eSBoZXJlIGluIGJhc2UgY2xhc3M7IHNvbWUgc3ViY2xhc3NlcyBvdmVycmlkZS5cblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHRcdHRoaXMuaW50ZW5zaXR5ID0gc291cmNlLmludGVuc2l0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7XG5cdFx0ZGF0YS5vYmplY3QuaW50ZW5zaXR5ID0gdGhpcy5pbnRlbnNpdHk7XG5cblx0XHRpZiAoIHRoaXMuZ3JvdW5kQ29sb3IgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0Lmdyb3VuZENvbG9yID0gdGhpcy5ncm91bmRDb2xvci5nZXRIZXgoKTtcblxuXHRcdGlmICggdGhpcy5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGlzdGFuY2UgPSB0aGlzLmRpc3RhbmNlO1xuXHRcdGlmICggdGhpcy5hbmdsZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuYW5nbGUgPSB0aGlzLmFuZ2xlO1xuXHRcdGlmICggdGhpcy5kZWNheSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGVjYXkgPSB0aGlzLmRlY2F5O1xuXHRcdGlmICggdGhpcy5wZW51bWJyYSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QucGVudW1icmEgPSB0aGlzLnBlbnVtYnJhO1xuXG5cdFx0aWYgKCB0aGlzLnNoYWRvdyAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3Quc2hhZG93ID0gdGhpcy5zaGFkb3cudG9KU09OKCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuTGlnaHQucHJvdG90eXBlLmlzTGlnaHQgPSB0cnVlO1xuXG5jbGFzcyBIZW1pc3BoZXJlTGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIHNreUNvbG9yLCBncm91bmRDb2xvciwgaW50ZW5zaXR5ICkge1xuXG5cdFx0c3VwZXIoIHNreUNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdIZW1pc3BoZXJlTGlnaHQnO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5ncm91bmRDb2xvciA9IG5ldyBDb2xvciggZ3JvdW5kQ29sb3IgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmdyb3VuZENvbG9yLmNvcHkoIHNvdXJjZS5ncm91bmRDb2xvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGUuaXNIZW1pc3BoZXJlTGlnaHQgPSB0cnVlO1xuXG5jb25zdCBfcHJvalNjcmVlbk1hdHJpeCQxID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2xpZ2h0UG9zaXRpb25Xb3JsZCQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2xvb2tUYXJnZXQkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgTGlnaHRTaGFkb3cge1xuXG5cdGNvbnN0cnVjdG9yKCBjYW1lcmEgKSB7XG5cblx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdHRoaXMuYmlhcyA9IDA7XG5cdFx0dGhpcy5ub3JtYWxCaWFzID0gMDtcblx0XHR0aGlzLnJhZGl1cyA9IDE7XG5cdFx0dGhpcy5ibHVyU2FtcGxlcyA9IDg7XG5cblx0XHR0aGlzLm1hcFNpemUgPSBuZXcgVmVjdG9yMiggNTEyLCA1MTIgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblx0XHR0aGlzLm1hcFBhc3MgPSBudWxsO1xuXHRcdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XG5cdFx0dGhpcy5fZnJhbWVFeHRlbnRzID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSAxO1xuXG5cdFx0dGhpcy5fdmlld3BvcnRzID0gW1xuXG5cdFx0XHRuZXcgVmVjdG9yNCggMCwgMCwgMSwgMSApXG5cblx0XHRdO1xuXG5cdH1cblxuXHRnZXRWaWV3cG9ydENvdW50KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0Q291bnQ7XG5cblx0fVxuXG5cdGdldEZydXN0dW0oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJ1c3R1bTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cmljZXMoIGxpZ2h0ICkge1xuXG5cdFx0Y29uc3Qgc2hhZG93Q2FtZXJhID0gdGhpcy5jYW1lcmE7XG5cdFx0Y29uc3Qgc2hhZG93TWF0cml4ID0gdGhpcy5tYXRyaXg7XG5cblx0XHRfbGlnaHRQb3NpdGlvbldvcmxkJDEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdHNoYWRvd0NhbWVyYS5wb3NpdGlvbi5jb3B5KCBfbGlnaHRQb3NpdGlvbldvcmxkJDEgKTtcblxuXHRcdF9sb29rVGFyZ2V0JDEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRzaGFkb3dDYW1lcmEubG9va0F0KCBfbG9va1RhcmdldCQxICk7XG5cdFx0c2hhZG93Q2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeCQxLm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0dGhpcy5fZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXgkMSApO1xuXG5cdFx0c2hhZG93TWF0cml4LnNldChcblx0XHRcdDAuNSwgMC4wLCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC41LCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjUsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMFxuXHRcdCk7XG5cblx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0c2hhZG93TWF0cml4Lm11bHRpcGx5KCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0fVxuXG5cdGdldFZpZXdwb3J0KCB2aWV3cG9ydEluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0c1sgdmlld3BvcnRJbmRleCBdO1xuXG5cdH1cblxuXHRnZXRGcmFtZUV4dGVudHMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJhbWVFeHRlbnRzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0aWYgKCB0aGlzLm1hcCApIHtcblxuXHRcdFx0dGhpcy5tYXAuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hcFBhc3MgKSB7XG5cblx0XHRcdHRoaXMubWFwUGFzcy5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuY2FtZXJhID0gc291cmNlLmNhbWVyYS5jbG9uZSgpO1xuXG5cdFx0dGhpcy5iaWFzID0gc291cmNlLmJpYXM7XG5cdFx0dGhpcy5yYWRpdXMgPSBzb3VyY2UucmFkaXVzO1xuXG5cdFx0dGhpcy5tYXBTaXplLmNvcHkoIHNvdXJjZS5tYXBTaXplICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IG9iamVjdCA9IHt9O1xuXG5cdFx0aWYgKCB0aGlzLmJpYXMgIT09IDAgKSBvYmplY3QuYmlhcyA9IHRoaXMuYmlhcztcblx0XHRpZiAoIHRoaXMubm9ybWFsQmlhcyAhPT0gMCApIG9iamVjdC5ub3JtYWxCaWFzID0gdGhpcy5ub3JtYWxCaWFzO1xuXHRcdGlmICggdGhpcy5yYWRpdXMgIT09IDEgKSBvYmplY3QucmFkaXVzID0gdGhpcy5yYWRpdXM7XG5cdFx0aWYgKCB0aGlzLm1hcFNpemUueCAhPT0gNTEyIHx8IHRoaXMubWFwU2l6ZS55ICE9PSA1MTIgKSBvYmplY3QubWFwU2l6ZSA9IHRoaXMubWFwU2l6ZS50b0FycmF5KCk7XG5cblx0XHRvYmplY3QuY2FtZXJhID0gdGhpcy5jYW1lcmEudG9KU09OKCBmYWxzZSApLm9iamVjdDtcblx0XHRkZWxldGUgb2JqZWN0LmNhbWVyYS5tYXRyaXg7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxufVxuXG5jbGFzcyBTcG90TGlnaHRTaGFkb3cgZXh0ZW5kcyBMaWdodFNoYWRvdyB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA1MCwgMSwgMC41LCA1MDAgKSApO1xuXG5cdFx0dGhpcy5mb2N1cyA9IDE7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpY2VzKCBsaWdodCApIHtcblxuXHRcdGNvbnN0IGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xuXG5cdFx0Y29uc3QgZm92ID0gUkFEMkRFRyAqIDIgKiBsaWdodC5hbmdsZSAqIHRoaXMuZm9jdXM7XG5cdFx0Y29uc3QgYXNwZWN0ID0gdGhpcy5tYXBTaXplLndpZHRoIC8gdGhpcy5tYXBTaXplLmhlaWdodDtcblx0XHRjb25zdCBmYXIgPSBsaWdodC5kaXN0YW5jZSB8fCBjYW1lcmEuZmFyO1xuXG5cdFx0aWYgKCBmb3YgIT09IGNhbWVyYS5mb3YgfHwgYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0IHx8IGZhciAhPT0gY2FtZXJhLmZhciApIHtcblxuXHRcdFx0Y2FtZXJhLmZvdiA9IGZvdjtcblx0XHRcdGNhbWVyYS5hc3BlY3QgPSBhc3BlY3Q7XG5cdFx0XHRjYW1lcmEuZmFyID0gZmFyO1xuXHRcdFx0Y2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdH1cblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpY2VzKCBsaWdodCApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZm9jdXMgPSBzb3VyY2UuZm9jdXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuU3BvdExpZ2h0U2hhZG93LnByb3RvdHlwZS5pc1Nwb3RMaWdodFNoYWRvdyA9IHRydWU7XG5cbmNsYXNzIFNwb3RMaWdodCBleHRlbmRzIExpZ2h0IHtcblxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSwgZGlzdGFuY2UgPSAwLCBhbmdsZSA9IE1hdGguUEkgLyAzLCBwZW51bWJyYSA9IDAsIGRlY2F5ID0gMSApIHtcblxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3BvdExpZ2h0JztcblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuRGVmYXVsdFVwICk7XG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cdFx0dGhpcy5hbmdsZSA9IGFuZ2xlO1xuXHRcdHRoaXMucGVudW1icmEgPSBwZW51bWJyYTtcblx0XHR0aGlzLmRlY2F5ID0gZGVjYXk7IC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cblxuXHRcdHRoaXMuc2hhZG93ID0gbmV3IFNwb3RMaWdodFNoYWRvdygpO1xuXG5cdH1cblxuXHRnZXQgcG93ZXIoKSB7XG5cblx0XHQvLyBjb21wdXRlIHRoZSBsaWdodCdzIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpIGZyb20gaXRzIGludGVuc2l0eSAoaW4gY2FuZGVsYSlcblx0XHQvLyBieSBjb252ZW50aW9uIGZvciBhIHNwb3RsaWdodCwgbHVtaW5vdXMgcG93ZXIgKGxtKSA9IM+AICogbHVtaW5vdXMgaW50ZW5zaXR5IChjZClcblx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiBNYXRoLlBJO1xuXG5cdH1cblxuXHRzZXQgcG93ZXIoIHBvd2VyICkge1xuXG5cdFx0Ly8gc2V0IHRoZSBsaWdodCdzIGludGVuc2l0eSAoaW4gY2FuZGVsYSkgZnJvbSB0aGUgZGVzaXJlZCBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKVxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyBNYXRoLlBJO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5zaGFkb3cuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBzb3VyY2UuZGlzdGFuY2U7XG5cdFx0dGhpcy5hbmdsZSA9IHNvdXJjZS5hbmdsZTtcblx0XHR0aGlzLnBlbnVtYnJhID0gc291cmNlLnBlbnVtYnJhO1xuXHRcdHRoaXMuZGVjYXkgPSBzb3VyY2UuZGVjYXk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblNwb3RMaWdodC5wcm90b3R5cGUuaXNTcG90TGlnaHQgPSB0cnVlO1xuXG5jb25zdCBfcHJvalNjcmVlbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9saWdodFBvc2l0aW9uV29ybGQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbG9va1RhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgUG9pbnRMaWdodFNoYWRvdyBleHRlbmRzIExpZ2h0U2hhZG93IHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIDkwLCAxLCAwLjUsIDUwMCApICk7XG5cblx0XHR0aGlzLl9mcmFtZUV4dGVudHMgPSBuZXcgVmVjdG9yMiggNCwgMiApO1xuXG5cdFx0dGhpcy5fdmlld3BvcnRDb3VudCA9IDY7XG5cblx0XHR0aGlzLl92aWV3cG9ydHMgPSBbXG5cdFx0XHQvLyBUaGVzZSB2aWV3cG9ydHMgbWFwIGEgY3ViZS1tYXAgb250byBhIDJEIHRleHR1cmUgd2l0aCB0aGVcblx0XHRcdC8vIGZvbGxvd2luZyBvcmllbnRhdGlvbjpcblx0XHRcdC8vXG5cdFx0XHQvLyAgeHpYWlxuXHRcdFx0Ly8gICB5IFlcblx0XHRcdC8vXG5cdFx0XHQvLyBYIC0gUG9zaXRpdmUgeCBkaXJlY3Rpb25cblx0XHRcdC8vIHggLSBOZWdhdGl2ZSB4IGRpcmVjdGlvblxuXHRcdFx0Ly8gWSAtIFBvc2l0aXZlIHkgZGlyZWN0aW9uXG5cdFx0XHQvLyB5IC0gTmVnYXRpdmUgeSBkaXJlY3Rpb25cblx0XHRcdC8vIFogLSBQb3NpdGl2ZSB6IGRpcmVjdGlvblxuXHRcdFx0Ly8geiAtIE5lZ2F0aXZlIHogZGlyZWN0aW9uXG5cblx0XHRcdC8vIHBvc2l0aXZlIFhcblx0XHRcdG5ldyBWZWN0b3I0KCAyLCAxLCAxLCAxICksXG5cdFx0XHQvLyBuZWdhdGl2ZSBYXG5cdFx0XHRuZXcgVmVjdG9yNCggMCwgMSwgMSwgMSApLFxuXHRcdFx0Ly8gcG9zaXRpdmUgWlxuXHRcdFx0bmV3IFZlY3RvcjQoIDMsIDEsIDEsIDEgKSxcblx0XHRcdC8vIG5lZ2F0aXZlIFpcblx0XHRcdG5ldyBWZWN0b3I0KCAxLCAxLCAxLCAxICksXG5cdFx0XHQvLyBwb3NpdGl2ZSBZXG5cdFx0XHRuZXcgVmVjdG9yNCggMywgMCwgMSwgMSApLFxuXHRcdFx0Ly8gbmVnYXRpdmUgWVxuXHRcdFx0bmV3IFZlY3RvcjQoIDEsIDAsIDEsIDEgKVxuXHRcdF07XG5cblx0XHR0aGlzLl9jdWJlRGlyZWN0aW9ucyA9IFtcblx0XHRcdG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcblx0XHRcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIC0gMSwgMCApXG5cdFx0XTtcblxuXHRcdHRoaXMuX2N1YmVVcHMgPSBbXG5cdFx0XHRuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLFxuXHRcdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKVxuXHRcdF07XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpY2VzKCBsaWdodCwgdmlld3BvcnRJbmRleCA9IDAgKSB7XG5cblx0XHRjb25zdCBjYW1lcmEgPSB0aGlzLmNhbWVyYTtcblx0XHRjb25zdCBzaGFkb3dNYXRyaXggPSB0aGlzLm1hdHJpeDtcblxuXHRcdGNvbnN0IGZhciA9IGxpZ2h0LmRpc3RhbmNlIHx8IGNhbWVyYS5mYXI7XG5cblx0XHRpZiAoIGZhciAhPT0gY2FtZXJhLmZhciApIHtcblxuXHRcdFx0Y2FtZXJhLmZhciA9IGZhcjtcblx0XHRcdGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHR9XG5cblx0XHRfbGlnaHRQb3NpdGlvbldvcmxkLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRjYW1lcmEucG9zaXRpb24uY29weSggX2xpZ2h0UG9zaXRpb25Xb3JsZCApO1xuXG5cdFx0X2xvb2tUYXJnZXQuY29weSggY2FtZXJhLnBvc2l0aW9uICk7XG5cdFx0X2xvb2tUYXJnZXQuYWRkKCB0aGlzLl9jdWJlRGlyZWN0aW9uc1sgdmlld3BvcnRJbmRleCBdICk7XG5cdFx0Y2FtZXJhLnVwLmNvcHkoIHRoaXMuX2N1YmVVcHNbIHZpZXdwb3J0SW5kZXggXSApO1xuXHRcdGNhbWVyYS5sb29rQXQoIF9sb29rVGFyZ2V0ICk7XG5cdFx0Y2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRzaGFkb3dNYXRyaXgubWFrZVRyYW5zbGF0aW9uKCAtIF9saWdodFBvc2l0aW9uV29ybGQueCwgLSBfbGlnaHRQb3NpdGlvbldvcmxkLnksIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC56ICk7XG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdHRoaXMuX2ZydXN0dW0uc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0fVxuXG59XG5cblBvaW50TGlnaHRTaGFkb3cucHJvdG90eXBlLmlzUG9pbnRMaWdodFNoYWRvdyA9IHRydWU7XG5cbmNsYXNzIFBvaW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlID0gMCwgZGVjYXkgPSAxICkge1xuXG5cdFx0c3VwZXIoIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0JztcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHR0aGlzLmRlY2F5ID0gZGVjYXk7IC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cblxuXHRcdHRoaXMuc2hhZG93ID0gbmV3IFBvaW50TGlnaHRTaGFkb3coKTtcblxuXHR9XG5cblx0Z2V0IHBvd2VyKCkge1xuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbGlnaHQncyBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKSBmcm9tIGl0cyBpbnRlbnNpdHkgKGluIGNhbmRlbGEpXG5cdFx0Ly8gZm9yIGFuIGlzb3Ryb3BpYyBsaWdodCBzb3VyY2UsIGx1bWlub3VzIHBvd2VyIChsbSkgPSA0IM+AIGx1bWlub3VzIGludGVuc2l0eSAoY2QpXG5cdFx0cmV0dXJuIHRoaXMuaW50ZW5zaXR5ICogNCAqIE1hdGguUEk7XG5cblx0fVxuXG5cdHNldCBwb3dlciggcG93ZXIgKSB7XG5cblx0XHQvLyBzZXQgdGhlIGxpZ2h0J3MgaW50ZW5zaXR5IChpbiBjYW5kZWxhKSBmcm9tIHRoZSBkZXNpcmVkIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggNCAqIE1hdGguUEkgKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZG93LmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xuXHRcdHRoaXMuZGVjYXkgPSBzb3VyY2UuZGVjYXk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5Qb2ludExpZ2h0LnByb3RvdHlwZS5pc1BvaW50TGlnaHQgPSB0cnVlO1xuXG5jbGFzcyBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGV4dGVuZHMgTGlnaHRTaGFkb3cge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIC0gNSwgNSwgNSwgLSA1LCAwLjUsIDUwMCApICk7XG5cblx0fVxuXG59XG5cbkRpcmVjdGlvbmFsTGlnaHRTaGFkb3cucHJvdG90eXBlLmlzRGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IHRydWU7XG5cbmNsYXNzIERpcmVjdGlvbmFsTGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0RpcmVjdGlvbmFsTGlnaHQnO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gbmV3IERpcmVjdGlvbmFsTGlnaHRTaGFkb3coKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZG93LmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5EaXJlY3Rpb25hbExpZ2h0LnByb3RvdHlwZS5pc0RpcmVjdGlvbmFsTGlnaHQgPSB0cnVlO1xuXG5jbGFzcyBBbWJpZW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0FtYmllbnRMaWdodCc7XG5cblx0fVxuXG59XG5cbkFtYmllbnRMaWdodC5wcm90b3R5cGUuaXNBbWJpZW50TGlnaHQgPSB0cnVlO1xuXG5jbGFzcyBSZWN0QXJlYUxpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgaW50ZW5zaXR5LCB3aWR0aCA9IDEwLCBoZWlnaHQgPSAxMCApIHtcblxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUmVjdEFyZWFMaWdodCc7XG5cblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0fVxuXG5cdGdldCBwb3dlcigpIHtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIGxpZ2h0J3MgbHVtaW5vdXMgcG93ZXIgKGluIGx1bWVucykgZnJvbSBpdHMgaW50ZW5zaXR5IChpbiBuaXRzKVxuXHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCAqIE1hdGguUEk7XG5cblx0fVxuXG5cdHNldCBwb3dlciggcG93ZXIgKSB7XG5cblx0XHQvLyBzZXQgdGhlIGxpZ2h0J3MgaW50ZW5zaXR5IChpbiBuaXRzKSBmcm9tIHRoZSBkZXNpcmVkIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0ICogTWF0aC5QSSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LndpZHRoID0gdGhpcy53aWR0aDtcblx0XHRkYXRhLm9iamVjdC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5SZWN0QXJlYUxpZ2h0LnByb3RvdHlwZS5pc1JlY3RBcmVhTGlnaHQgPSB0cnVlO1xuXG4vKipcbiAqIFByaW1hcnkgcmVmZXJlbmNlOlxuICogICBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcbiAqXG4gKiBTZWNvbmRhcnkgcmVmZXJlbmNlOlxuICogICBodHRwczovL3d3dy5wcHNsb2FuLm9yZy9wdWJsaWNhdGlvbnMvU3R1cGlkU0gzNi5wZGZcbiAqL1xuXG4vLyAzLWJhbmQgU0ggZGVmaW5lZCBieSA5IGNvZWZmaWNpZW50c1xuXG5jbGFzcyBTcGhlcmljYWxIYXJtb25pY3MzIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuY29lZmZpY2llbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50cy5wdXNoKCBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldCggY29lZmZpY2llbnRzICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5jb3B5KCBjb2VmZmljaWVudHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHplcm8oKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLnNldCggMCwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIGdldCB0aGUgcmFkaWFuY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXG5cdC8vIHRhcmdldCBpcyBhIFZlY3RvcjNcblx0Z2V0QXQoIG5vcm1hbCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGhcblxuXHRcdGNvbnN0IHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XG5cblx0XHRjb25zdCBjb2VmZiA9IHRoaXMuY29lZmZpY2llbnRzO1xuXG5cdFx0Ly8gYmFuZCAwXG5cdFx0dGFyZ2V0LmNvcHkoIGNvZWZmWyAwIF0gKS5tdWx0aXBseVNjYWxhciggMC4yODIwOTUgKTtcblxuXHRcdC8vIGJhbmQgMVxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAxIF0sIDAuNDg4NjAzICogeSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAyIF0sIDAuNDg4NjAzICogeiApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAzIF0sIDAuNDg4NjAzICogeCApO1xuXG5cdFx0Ly8gYmFuZCAyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDQgXSwgMS4wOTI1NDggKiAoIHggKiB5ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNSBdLCAxLjA5MjU0OCAqICggeSAqIHogKSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA2IF0sIDAuMzE1MzkyICogKCAzLjAgKiB6ICogeiAtIDEuMCApICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDcgXSwgMS4wOTI1NDggKiAoIHggKiB6ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgOCBdLCAwLjU0NjI3NCAqICggeCAqIHggLSB5ICogeSApICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHQvLyBnZXQgdGhlIGlycmFkaWFuY2UgKHJhZGlhbmNlIGNvbnZvbHZlZCB3aXRoIGNvc2luZSBsb2JlKSBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBub3JtYWxcblx0Ly8gdGFyZ2V0IGlzIGEgVmVjdG9yM1xuXHQvLyBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcblx0Z2V0SXJyYWRpYW5jZUF0KCBub3JtYWwsIHRhcmdldCApIHtcblxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoXG5cblx0XHRjb25zdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xuXG5cdFx0Y29uc3QgY29lZmYgPSB0aGlzLmNvZWZmaWNpZW50cztcblxuXHRcdC8vIGJhbmQgMFxuXHRcdHRhcmdldC5jb3B5KCBjb2VmZlsgMCBdICkubXVsdGlwbHlTY2FsYXIoIDAuODg2MjI3ICk7IC8vIM+AICogMC4yODIwOTVcblxuXHRcdC8vIGJhbmQgMVxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAxIF0sIDIuMCAqIDAuNTExNjY0ICogeSApOyAvLyAoIDIgKiDPgCAvIDMgKSAqIDAuNDg4NjAzXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDIgXSwgMi4wICogMC41MTE2NjQgKiB6ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDMgXSwgMi4wICogMC41MTE2NjQgKiB4ICk7XG5cblx0XHQvLyBiYW5kIDJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNCBdLCAyLjAgKiAwLjQyOTA0MyAqIHggKiB5ICk7IC8vICggz4AgLyA0ICkgKiAxLjA5MjU0OFxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA1IF0sIDIuMCAqIDAuNDI5MDQzICogeSAqIHogKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNiBdLCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTsgLy8gKCDPgCAvIDQgKSAqIDAuMzE1MzkyICogM1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA3IF0sIDIuMCAqIDAuNDI5MDQzICogeCAqIHogKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgOCBdLCAwLjQyOTA0MyAqICggeCAqIHggLSB5ICogeSApICk7IC8vICggz4AgLyA0ICkgKiAwLjU0NjI3NFxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0YWRkKCBzaCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uYWRkKCBzaC5jb2VmZmljaWVudHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxlZFNIKCBzaCwgcyApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uYWRkU2NhbGVkVmVjdG9yKCBzaC5jb2VmZmljaWVudHNbIGkgXSwgcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNjYWxlKCBzICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5tdWx0aXBseVNjYWxhciggcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnAoIHNoLCBhbHBoYSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0ubGVycCggc2guY29lZmZpY2llbnRzWyBpIF0sIGFscGhhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBzaCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGlmICggISB0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmVxdWFscyggc2guY29lZmZpY2llbnRzWyBpIF0gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRjb3B5KCBzaCApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldCggc2guY29lZmZpY2llbnRzICk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgY29lZmZpY2llbnRzID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRjb2VmZmljaWVudHNbIGkgXS5mcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgKyAoIGkgKiAzICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgY29lZmZpY2llbnRzID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRjb2VmZmljaWVudHNbIGkgXS50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICsgKCBpICogMyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdC8vIGV2YWx1YXRlIHRoZSBiYXNpcyBmdW5jdGlvbnNcblx0Ly8gc2hCYXNpcyBpcyBhbiBBcnJheVsgOSBdXG5cdHN0YXRpYyBnZXRCYXNpc0F0KCBub3JtYWwsIHNoQmFzaXMgKSB7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxuXG5cdFx0Y29uc3QgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblxuXHRcdC8vIGJhbmQgMFxuXHRcdHNoQmFzaXNbIDAgXSA9IDAuMjgyMDk1O1xuXG5cdFx0Ly8gYmFuZCAxXG5cdFx0c2hCYXNpc1sgMSBdID0gMC40ODg2MDMgKiB5O1xuXHRcdHNoQmFzaXNbIDIgXSA9IDAuNDg4NjAzICogejtcblx0XHRzaEJhc2lzWyAzIF0gPSAwLjQ4ODYwMyAqIHg7XG5cblx0XHQvLyBiYW5kIDJcblx0XHRzaEJhc2lzWyA0IF0gPSAxLjA5MjU0OCAqIHggKiB5O1xuXHRcdHNoQmFzaXNbIDUgXSA9IDEuMDkyNTQ4ICogeSAqIHo7XG5cdFx0c2hCYXNpc1sgNiBdID0gMC4zMTUzOTIgKiAoIDMgKiB6ICogeiAtIDEgKTtcblx0XHRzaEJhc2lzWyA3IF0gPSAxLjA5MjU0OCAqIHggKiB6O1xuXHRcdHNoQmFzaXNbIDggXSA9IDAuNTQ2Mjc0ICogKCB4ICogeCAtIHkgKiB5ICk7XG5cblx0fVxuXG59XG5cblNwaGVyaWNhbEhhcm1vbmljczMucHJvdG90eXBlLmlzU3BoZXJpY2FsSGFybW9uaWNzMyA9IHRydWU7XG5cbmNsYXNzIExpZ2h0UHJvYmUgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIHNoID0gbmV3IFNwaGVyaWNhbEhhcm1vbmljczMoKSwgaW50ZW5zaXR5ID0gMSApIHtcblxuXHRcdHN1cGVyKCB1bmRlZmluZWQsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy5zaCA9IHNoO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuc2guY29weSggc291cmNlLnNoICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHR0aGlzLmludGVuc2l0eSA9IGpzb24uaW50ZW5zaXR5OyAvLyBUT0RPOiBNb3ZlIHRoaXMgYml0IHRvIExpZ2h0LmZyb21KU09OKCk7XG5cdFx0dGhpcy5zaC5mcm9tQXJyYXkoIGpzb24uc2ggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5zaCA9IHRoaXMuc2gudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbkxpZ2h0UHJvYmUucHJvdG90eXBlLmlzTGlnaHRQcm9iZSA9IHRydWU7XG5cbmNsYXNzIE1hdGVyaWFsTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cdFx0dGhpcy50ZXh0dXJlcyA9IHt9O1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHNjb3BlLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggc2NvcGUucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSB0aGlzLnRleHR1cmVzO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dHVyZSggbmFtZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWxMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBNYXRlcmlhbC5mcm9tVHlwZSgganNvbi50eXBlICk7XG5cblx0XHRpZiAoIGpzb24udXVpZCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXVpZCA9IGpzb24udXVpZDtcblx0XHRpZiAoIGpzb24ubmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubmFtZSA9IGpzb24ubmFtZTtcblx0XHRpZiAoIGpzb24uY29sb3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5jb2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29sb3Iuc2V0SGV4KCBqc29uLmNvbG9yICk7XG5cdFx0aWYgKCBqc29uLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucm91Z2huZXNzID0ganNvbi5yb3VnaG5lc3M7XG5cdFx0aWYgKCBqc29uLm1ldGFsbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWV0YWxuZXNzID0ganNvbi5tZXRhbG5lc3M7XG5cdFx0aWYgKCBqc29uLnNoZWVuICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGVlbiA9IGpzb24uc2hlZW47XG5cdFx0aWYgKCBqc29uLnNoZWVuQ29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuQ29sb3IgPSBuZXcgQ29sb3IoKS5zZXRIZXgoIGpzb24uc2hlZW5Db2xvciApO1xuXHRcdGlmICgganNvbi5zaGVlblJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgPSBqc29uLnNoZWVuUm91Z2huZXNzO1xuXHRcdGlmICgganNvbi5lbWlzc2l2ZSAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLmVtaXNzaXZlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZS5zZXRIZXgoIGpzb24uZW1pc3NpdmUgKTtcblx0XHRpZiAoIGpzb24uc3BlY3VsYXIgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5zcGVjdWxhciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXIuc2V0SGV4KCBqc29uLnNwZWN1bGFyICk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFySW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eSA9IGpzb24uc3BlY3VsYXJJbnRlbnNpdHk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyQ29sb3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLnNldEhleCgganNvbi5zcGVjdWxhckNvbG9yICk7XG5cdFx0aWYgKCBqc29uLnNoaW5pbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hpbmluZXNzID0ganNvbi5zaGluaW5lc3M7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0ID0ganNvbi5jbGVhcmNvYXQ7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0ganNvbi5jbGVhcmNvYXRSb3VnaG5lc3M7XG5cdFx0aWYgKCBqc29uLnRyYW5zbWlzc2lvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudHJhbnNtaXNzaW9uID0ganNvbi50cmFuc21pc3Npb247XG5cdFx0aWYgKCBqc29uLnRoaWNrbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudGhpY2tuZXNzID0ganNvbi50aGlja25lc3M7XG5cdFx0aWYgKCBqc29uLmF0dGVudWF0aW9uRGlzdGFuY2UgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmF0dGVudWF0aW9uRGlzdGFuY2UgPSBqc29uLmF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdFx0aWYgKCBqc29uLmF0dGVudWF0aW9uQ29sb3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yLnNldEhleCgganNvbi5hdHRlbnVhdGlvbkNvbG9yICk7XG5cdFx0aWYgKCBqc29uLmZvZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZm9nID0ganNvbi5mb2c7XG5cdFx0aWYgKCBqc29uLmZsYXRTaGFkaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mbGF0U2hhZGluZyA9IGpzb24uZmxhdFNoYWRpbmc7XG5cdFx0aWYgKCBqc29uLmJsZW5kaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZGluZyA9IGpzb24uYmxlbmRpbmc7XG5cdFx0aWYgKCBqc29uLmNvbWJpbmUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbWJpbmUgPSBqc29uLmNvbWJpbmU7XG5cdFx0aWYgKCBqc29uLnNpZGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpZGUgPSBqc29uLnNpZGU7XG5cdFx0aWYgKCBqc29uLnNoYWRvd1NpZGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoYWRvd1NpZGUgPSBqc29uLnNoYWRvd1NpZGU7XG5cdFx0aWYgKCBqc29uLm9wYWNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm9wYWNpdHkgPSBqc29uLm9wYWNpdHk7XG5cdFx0aWYgKCBqc29uLnRyYW5zcGFyZW50ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50cmFuc3BhcmVudCA9IGpzb24udHJhbnNwYXJlbnQ7XG5cdFx0aWYgKCBqc29uLmFscGhhVGVzdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYWxwaGFUZXN0ID0ganNvbi5hbHBoYVRlc3Q7XG5cdFx0aWYgKCBqc29uLmRlcHRoVGVzdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVwdGhUZXN0ID0ganNvbi5kZXB0aFRlc3Q7XG5cdFx0aWYgKCBqc29uLmRlcHRoV3JpdGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlcHRoV3JpdGUgPSBqc29uLmRlcHRoV3JpdGU7XG5cdFx0aWYgKCBqc29uLmNvbG9yV3JpdGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbG9yV3JpdGUgPSBqc29uLmNvbG9yV3JpdGU7XG5cblx0XHRpZiAoIGpzb24uc3RlbmNpbFdyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsV3JpdGUgPSBqc29uLnN0ZW5jaWxXcml0ZTtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFdyaXRlTWFzayAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayA9IGpzb24uc3RlbmNpbFdyaXRlTWFzaztcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZ1bmMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGdW5jID0ganNvbi5zdGVuY2lsRnVuYztcblx0XHRpZiAoIGpzb24uc3RlbmNpbFJlZiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFJlZiA9IGpzb24uc3RlbmNpbFJlZjtcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZ1bmNNYXNrICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2sgPSBqc29uLnN0ZW5jaWxGdW5jTWFzaztcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZhaWwgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGYWlsID0ganNvbi5zdGVuY2lsRmFpbDtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFpGYWlsICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsWkZhaWwgPSBqc29uLnN0ZW5jaWxaRmFpbDtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFpQYXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsWlBhc3MgPSBqc29uLnN0ZW5jaWxaUGFzcztcblxuXHRcdGlmICgganNvbi53aXJlZnJhbWUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZSA9IGpzb24ud2lyZWZyYW1lO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5ld2lkdGggIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCA9IGpzb24ud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5lY2FwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5lY2FwID0ganNvbi53aXJlZnJhbWVMaW5lY2FwO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5lam9pbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWpvaW4gPSBqc29uLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0aWYgKCBqc29uLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3RhdGlvbiA9IGpzb24ucm90YXRpb247XG5cblx0XHRpZiAoIGpzb24ubGluZXdpZHRoICE9PSAxICkgbWF0ZXJpYWwubGluZXdpZHRoID0ganNvbi5saW5ld2lkdGg7XG5cdFx0aWYgKCBqc29uLmRhc2hTaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kYXNoU2l6ZSA9IGpzb24uZGFzaFNpemU7XG5cdFx0aWYgKCBqc29uLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmdhcFNpemUgPSBqc29uLmdhcFNpemU7XG5cdFx0aWYgKCBqc29uLnNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zY2FsZSA9IGpzb24uc2NhbGU7XG5cblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldCA9IGpzb24ucG9seWdvbk9mZnNldDtcblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldEZhY3RvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldEZhY3RvciA9IGpzb24ucG9seWdvbk9mZnNldEZhY3Rvcjtcblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldFVuaXRzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBqc29uLnBvbHlnb25PZmZzZXRVbml0cztcblxuXHRcdGlmICgganNvbi5kaXRoZXJpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpdGhlcmluZyA9IGpzb24uZGl0aGVyaW5nO1xuXG5cdFx0aWYgKCBqc29uLmFscGhhVG9Db3ZlcmFnZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID0ganNvbi5hbHBoYVRvQ292ZXJhZ2U7XG5cdFx0aWYgKCBqc29uLnByZW11bHRpcGxpZWRBbHBoYSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhID0ganNvbi5wcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHRpZiAoIGpzb24udmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmlzaWJsZSA9IGpzb24udmlzaWJsZTtcblxuXHRcdGlmICgganNvbi50b25lTWFwcGVkICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50b25lTWFwcGVkID0ganNvbi50b25lTWFwcGVkO1xuXG5cdFx0aWYgKCBqc29uLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7XG5cblx0XHRpZiAoIGpzb24udmVydGV4Q29sb3JzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGpzb24udmVydGV4Q29sb3JzID09PSAnbnVtYmVyJyApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSAoIGpzb24udmVydGV4Q29sb3JzID4gMCApID8gdHJ1ZSA6IGZhbHNlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IGpzb24udmVydGV4Q29sb3JzO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBTaGFkZXIgTWF0ZXJpYWxcblxuXHRcdGlmICgganNvbi51bmlmb3JtcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGpzb24udW5pZm9ybXMgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybSA9IGpzb24udW5pZm9ybXNbIG5hbWUgXTtcblxuXHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdID0ge307XG5cblx0XHRcdFx0c3dpdGNoICggdW5pZm9ybS50eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSAndCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gZ2V0VGV4dHVyZSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdjJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgQ29sb3IoKS5zZXRIZXgoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndjInOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3YzJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd2NCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnbTMnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXgzKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ200Jzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgTWF0cml4NCgpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IHVuaWZvcm0udmFsdWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24uZGVmaW5lcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVmaW5lcyA9IGpzb24uZGVmaW5lcztcblx0XHRpZiAoIGpzb24udmVydGV4U2hhZGVyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXIgPSBqc29uLnZlcnRleFNoYWRlcjtcblx0XHRpZiAoIGpzb24uZnJhZ21lbnRTaGFkZXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyID0ganNvbi5mcmFnbWVudFNoYWRlcjtcblxuXHRcdGlmICgganNvbi5leHRlbnNpb25zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBqc29uLmV4dGVuc2lvbnMgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwuZXh0ZW5zaW9uc1sga2V5IF0gPSBqc29uLmV4dGVuc2lvbnNbIGtleSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBEZXByZWNhdGVkXG5cblx0XHRpZiAoIGpzb24uc2hhZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSBqc29uLnNoYWRpbmcgPT09IDE7IC8vIFRIUkVFLkZsYXRTaGFkaW5nXG5cblx0XHQvLyBmb3IgUG9pbnRzTWF0ZXJpYWxcblxuXHRcdGlmICgganNvbi5zaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplID0ganNvbi5zaXplO1xuXHRcdGlmICgganNvbi5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9IGpzb24uc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0Ly8gbWFwc1xuXG5cdFx0aWYgKCBqc29uLm1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZSgganNvbi5tYXAgKTtcblx0XHRpZiAoIGpzb24ubWF0Y2FwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tYXRjYXAgPSBnZXRUZXh0dXJlKCBqc29uLm1hdGNhcCApO1xuXG5cdFx0aWYgKCBqc29uLmFscGhhTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYU1hcCA9IGdldFRleHR1cmUoIGpzb24uYWxwaGFNYXAgKTtcblxuXHRcdGlmICgganNvbi5idW1wTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5idW1wTWFwID0gZ2V0VGV4dHVyZSgganNvbi5idW1wTWFwICk7XG5cdFx0aWYgKCBqc29uLmJ1bXBTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcFNjYWxlID0ganNvbi5idW1wU2NhbGU7XG5cblx0XHRpZiAoIGpzb24ubm9ybWFsTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXAgPSBnZXRUZXh0dXJlKCBqc29uLm5vcm1hbE1hcCApO1xuXHRcdGlmICgganNvbi5ub3JtYWxNYXBUeXBlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID0ganNvbi5ub3JtYWxNYXBUeXBlO1xuXHRcdGlmICgganNvbi5ub3JtYWxTY2FsZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsZXQgbm9ybWFsU2NhbGUgPSBqc29uLm5vcm1hbFNjYWxlO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5vcm1hbFNjYWxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIEJsZW5kZXIgZXhwb3J0ZXIgdXNlZCB0byBleHBvcnQgYSBzY2FsYXIuIFNlZSAjNzQ1OVxuXG5cdFx0XHRcdG5vcm1hbFNjYWxlID0gWyBub3JtYWxTY2FsZSwgbm9ybWFsU2NhbGUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCBub3JtYWxTY2FsZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwID0gZ2V0VGV4dHVyZSgganNvbi5kaXNwbGFjZW1lbnRNYXAgKTtcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50U2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlID0ganNvbi5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50QmlhcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcyA9IGpzb24uZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdGlmICgganNvbi5yb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdWdobmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ucm91Z2huZXNzTWFwICk7XG5cdFx0aWYgKCBqc29uLm1ldGFsbmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWV0YWxuZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5tZXRhbG5lc3NNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbWlzc2l2ZU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmVtaXNzaXZlTWFwICk7XG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSA9IGpzb24uZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uc3BlY3VsYXJNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zcGVjdWxhck1hcCApO1xuXHRcdGlmICgganNvbi5zcGVjdWxhckludGVuc2l0eU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFySW50ZW5zaXR5TWFwICk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyQ29sb3JNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFyQ29sb3JNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbnZNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVudk1hcCA9IGdldFRleHR1cmUoIGpzb24uZW52TWFwICk7XG5cdFx0aWYgKCBqc29uLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5ID0ganNvbi5lbnZNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24ucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZsZWN0aXZpdHkgPSBqc29uLnJlZmxlY3Rpdml0eTtcblx0XHRpZiAoIGpzb24ucmVmcmFjdGlvblJhdGlvICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8gPSBqc29uLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdGlmICgganNvbi5saWdodE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmxpZ2h0TWFwICk7XG5cdFx0aWYgKCBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eSA9IGpzb24ubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uYW9NYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFvTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hb01hcCApO1xuXHRcdGlmICgganNvbi5hb01hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSBqc29uLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLmdyYWRpZW50TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ncmFkaWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZ3JhZGllbnRNYXAgKTtcblxuXHRcdGlmICgganNvbi5jbGVhcmNvYXRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdE1hcCA9IGdldFRleHR1cmUoIGpzb24uY2xlYXJjb2F0TWFwICk7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdFJvdWdobmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKTtcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0Tm9ybWFsTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmNsZWFyY29hdE5vcm1hbE1hcCApO1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXROb3JtYWxTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSgganNvbi5jbGVhcmNvYXROb3JtYWxTY2FsZSApO1xuXG5cdFx0aWYgKCBqc29uLnRyYW5zbWlzc2lvbk1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwID0gZ2V0VGV4dHVyZSgganNvbi50cmFuc21pc3Npb25NYXAgKTtcblx0XHRpZiAoIGpzb24udGhpY2tuZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50aGlja25lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnRoaWNrbmVzc01hcCApO1xuXG5cdFx0aWYgKCBqc29uLnNoZWVuQ29sb3JNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNoZWVuQ29sb3JNYXAgKTtcblx0XHRpZiAoIGpzb24uc2hlZW5Sb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zaGVlblJvdWdobmVzc01hcCApO1xuXG5cdFx0cmV0dXJuIG1hdGVyaWFsO1xuXG5cdH1cblxuXHRzZXRUZXh0dXJlcyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVzID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIExvYWRlclV0aWxzIHtcblxuXHRzdGF0aWMgZGVjb2RlVGV4dCggYXJyYXkgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoIGFycmF5ICk7XG5cblx0XHR9XG5cblx0XHQvLyBBdm9pZCB0aGUgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcnJheSkgc2hvcnRjdXQsIHdoaWNoXG5cdFx0Ly8gdGhyb3dzIGEgXCJtYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiIGVycm9yIGZvciBsYXJnZSBhcnJheXMuXG5cblx0XHRsZXQgcyA9ICcnO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHQvLyBJbXBsaWNpdGx5IGFzc3VtZXMgbGl0dGxlLWVuZGlhbi5cblx0XHRcdHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggYXJyYXlbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Ly8gbWVyZ2VzIG11bHRpLWJ5dGUgdXRmLTggY2hhcmFjdGVycy5cblxuXHRcdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCggZXNjYXBlKCBzICkgKTtcblxuXHRcdH0gY2F0Y2ggKCBlICkgeyAvLyBzZWUgIzE2MzU4XG5cblx0XHRcdHJldHVybiBzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzdGF0aWMgZXh0cmFjdFVybEJhc2UoIHVybCApIHtcblxuXHRcdGNvbnN0IGluZGV4ID0gdXJsLmxhc3RJbmRleE9mKCAnLycgKTtcblxuXHRcdGlmICggaW5kZXggPT09IC0gMSApIHJldHVybiAnLi8nO1xuXG5cdFx0cmV0dXJuIHVybC5zbGljZSggMCwgaW5kZXggKyAxICk7XG5cblx0fVxuXG5cdHN0YXRpYyByZXNvbHZlVVJMKCB1cmwsIHBhdGggKSB7XG5cblx0XHQvLyBJbnZhbGlkIFVSTFxuXHRcdGlmICggdHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdXJsID09PSAnJyApIHJldHVybiAnJztcblxuXHRcdC8vIEhvc3QgUmVsYXRpdmUgVVJMXG5cdFx0aWYgKCAvXmh0dHBzPzpcXC9cXC8vaS50ZXN0KCBwYXRoICkgJiYgL15cXC8vLnRlc3QoIHVybCApICkge1xuXG5cdFx0XHRwYXRoID0gcGF0aC5yZXBsYWNlKCAvKF5odHRwcz86XFwvXFwvW15cXC9dKykuKi9pLCAnJDEnICk7XG5cblx0XHR9XG5cblx0XHQvLyBBYnNvbHV0ZSBVUkwgaHR0cDovLyxodHRwczovLywvL1xuXHRcdGlmICggL14oaHR0cHM/Oik/XFwvXFwvL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuXG5cdFx0Ly8gRGF0YSBVUklcblx0XHRpZiAoIC9eZGF0YTouKiwuKiQvaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG5cblx0XHQvLyBCbG9iIFVSTFxuXHRcdGlmICggL15ibG9iOi4qJC9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcblxuXHRcdC8vIFJlbGF0aXZlIFVSTFxuXHRcdHJldHVybiBwYXRoICsgdXJsO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknO1xuXHRcdHRoaXMuaW5zdGFuY2VDb3VudCA9IEluZmluaXR5O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuaW5zdGFuY2VDb3VudCA9IHNvdXJjZS5pbnN0YW5jZUNvdW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCB0aGlzICk7XG5cblx0XHRkYXRhLmluc3RhbmNlQ291bnQgPSB0aGlzLmluc3RhbmNlQ291bnQ7XG5cblx0XHRkYXRhLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID0gdHJ1ZTtcblxuY2xhc3MgQnVmZmVyR2VvbWV0cnlMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHNjb3BlLnJlcXVlc3RIZWFkZXIgKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCBzY29wZS53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICkge1xuXG5cdFx0XHRcdFx0b25FcnJvciggZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxuXHRwYXJzZSgganNvbiApIHtcblxuXHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyTWFwID0ge307XG5cdFx0Y29uc3QgYXJyYXlCdWZmZXJNYXAgPSB7fTtcblxuXHRcdGZ1bmN0aW9uIGdldEludGVybGVhdmVkQnVmZmVyKCBqc29uLCB1dWlkICkge1xuXG5cdFx0XHRpZiAoIGludGVybGVhdmVkQnVmZmVyTWFwWyB1dWlkIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBpbnRlcmxlYXZlZEJ1ZmZlck1hcFsgdXVpZCBdO1xuXG5cdFx0XHRjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlcnMgPSBqc29uLmludGVybGVhdmVkQnVmZmVycztcblx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyID0gaW50ZXJsZWF2ZWRCdWZmZXJzWyB1dWlkIF07XG5cblx0XHRcdGNvbnN0IGJ1ZmZlciA9IGdldEFycmF5QnVmZmVyKCBqc29uLCBpbnRlcmxlYXZlZEJ1ZmZlci5idWZmZXIgKTtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBnZXRUeXBlZEFycmF5KCBpbnRlcmxlYXZlZEJ1ZmZlci50eXBlLCBidWZmZXIgKTtcblx0XHRcdGNvbnN0IGliID0gbmV3IEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgaW50ZXJsZWF2ZWRCdWZmZXIuc3RyaWRlICk7XG5cdFx0XHRpYi51dWlkID0gaW50ZXJsZWF2ZWRCdWZmZXIudXVpZDtcblxuXHRcdFx0aW50ZXJsZWF2ZWRCdWZmZXJNYXBbIHV1aWQgXSA9IGliO1xuXG5cdFx0XHRyZXR1cm4gaWI7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRBcnJheUJ1ZmZlcigganNvbiwgdXVpZCApIHtcblxuXHRcdFx0aWYgKCBhcnJheUJ1ZmZlck1hcFsgdXVpZCBdICE9PSB1bmRlZmluZWQgKSByZXR1cm4gYXJyYXlCdWZmZXJNYXBbIHV1aWQgXTtcblxuXHRcdFx0Y29uc3QgYXJyYXlCdWZmZXJzID0ganNvbi5hcnJheUJ1ZmZlcnM7XG5cdFx0XHRjb25zdCBhcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyc1sgdXVpZCBdO1xuXG5cdFx0XHRjb25zdCBhYiA9IG5ldyBVaW50MzJBcnJheSggYXJyYXlCdWZmZXIgKS5idWZmZXI7XG5cblx0XHRcdGFycmF5QnVmZmVyTWFwWyB1dWlkIF0gPSBhYjtcblxuXHRcdFx0cmV0dXJuIGFiO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBqc29uLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgPyBuZXcgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkoKSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBqc29uLmRhdGEuaW5kZXg7XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IHR5cGVkQXJyYXkgPSBnZXRUeXBlZEFycmF5KCBpbmRleC50eXBlLCBpbmRleC5hcnJheSApO1xuXHRcdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGpzb24uZGF0YS5hdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0bGV0IGJ1ZmZlckF0dHJpYnV0ZTtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlciA9IGdldEludGVybGVhdmVkQnVmZmVyKCBqc29uLmRhdGEsIGF0dHJpYnV0ZS5kYXRhICk7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm9mZnNldCwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCB0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheSggYXR0cmlidXRlLnR5cGUsIGF0dHJpYnV0ZS5hcnJheSApO1xuXHRcdFx0XHRjb25zdCBidWZmZXJBdHRyaWJ1dGVDb25zdHIgPSBhdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgOiBCdWZmZXJBdHRyaWJ1dGU7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBidWZmZXJBdHRyaWJ1dGVDb25zdHIoIHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5uYW1lICE9PSB1bmRlZmluZWQgKSBidWZmZXJBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZS5uYW1lO1xuXHRcdFx0aWYgKCBhdHRyaWJ1dGUudXNhZ2UgIT09IHVuZGVmaW5lZCApIGJ1ZmZlckF0dHJpYnV0ZS5zZXRVc2FnZSggYXR0cmlidXRlLnVzYWdlICk7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLnVwZGF0ZVJhbmdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YnVmZmVyQXR0cmlidXRlLnVwZGF0ZVJhbmdlLm9mZnNldCA9IGF0dHJpYnV0ZS51cGRhdGVSYW5nZS5vZmZzZXQ7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZS51cGRhdGVSYW5nZS5jb3VudCA9IGF0dHJpYnV0ZS51cGRhdGVSYW5nZS5jb3VudDtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoIGtleSwgYnVmZmVyQXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBqc29uLmRhdGEubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlQXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleSBdO1xuXG5cdFx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlQXJyYXlbIGkgXTtcblx0XHRcdFx0XHRsZXQgYnVmZmVyQXR0cmlidXRlO1xuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXIgPSBnZXRJbnRlcmxlYXZlZEJ1ZmZlcigganNvbi5kYXRhLCBhdHRyaWJ1dGUuZGF0YSApO1xuXHRcdFx0XHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUub2Zmc2V0LCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdHlwZWRBcnJheSA9IGdldFR5cGVkQXJyYXkoIGF0dHJpYnV0ZS50eXBlLCBhdHRyaWJ1dGUuYXJyYXkgKTtcblx0XHRcdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09IHVuZGVmaW5lZCApIGJ1ZmZlckF0dHJpYnV0ZS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cdFx0XHRcdFx0YXJyYXkucHVzaCggYnVmZmVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1sga2V5IF0gPSBhcnJheTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzUmVsYXRpdmUgPSBqc29uLmRhdGEubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHRpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRnZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBncm91cHMgPSBqc29uLmRhdGEuZ3JvdXBzIHx8IGpzb24uZGF0YS5kcmF3Y2FsbHMgfHwganNvbi5kYXRhLm9mZnNldHM7XG5cblx0XHRpZiAoIGdyb3VwcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBncm91cHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdFx0Z2VvbWV0cnkuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBib3VuZGluZ1NwaGVyZSA9IGpzb24uZGF0YS5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0aWYgKCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjZW50ZXIuZnJvbUFycmF5KCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoIGNlbnRlciwgYm91bmRpbmdTcGhlcmUucmFkaXVzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24ubmFtZSApIGdlb21ldHJ5Lm5hbWUgPSBqc29uLm5hbWU7XG5cdFx0aWYgKCBqc29uLnVzZXJEYXRhICkgZ2VvbWV0cnkudXNlckRhdGEgPSBqc29uLnVzZXJEYXRhO1xuXG5cdFx0cmV0dXJuIGdlb21ldHJ5O1xuXG5cdH1cblxufVxuXG5jbGFzcyBPYmplY3RMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBwYXRoID0gKCB0aGlzLnBhdGggPT09ICcnICkgPyBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiB0aGlzLnBhdGg7XG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSB0aGlzLnJlc291cmNlUGF0aCB8fCBwYXRoO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdGxldCBqc29uID0gbnVsbDtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICE9PSB1bmRlZmluZWQgKSBvbkVycm9yKCBlcnJvciApO1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRTpPYmplY3RMb2FkZXI6IENhblxcJ3QgcGFyc2UgJyArIHVybCArICcuJywgZXJyb3IubWVzc2FnZSApO1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBtZXRhZGF0YSA9IGpzb24ubWV0YWRhdGE7XG5cblx0XHRcdGlmICggbWV0YWRhdGEgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZ2VvbWV0cnknICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3RMb2FkZXI6IENhblxcJ3QgbG9hZCAnICsgdXJsICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRzY29wZS5wYXJzZSgganNvbiwgb25Mb2FkICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdGFzeW5jIGxvYWRBc3luYyggdXJsLCBvblByb2dyZXNzICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgcGF0aCA9ICggdGhpcy5wYXRoID09PSAnJyApID8gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApIDogdGhpcy5wYXRoO1xuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aDtcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHRoaXMud2l0aENyZWRlbnRpYWxzICk7XG5cblx0XHRjb25zdCB0ZXh0ID0gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggdXJsLCBvblByb2dyZXNzICk7XG5cblx0XHRjb25zdCBqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0Y29uc3QgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXG5cdFx0aWYgKCBtZXRhZGF0YSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdnZW9tZXRyeScgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhd2FpdCBzY29wZS5wYXJzZUFzeW5jKCBqc29uICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uLCBvbkxvYWQgKSB7XG5cblx0XHRjb25zdCBhbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoIGpzb24uYW5pbWF0aW9ucyApO1xuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyc2VTaGFwZXMoIGpzb24uc2hhcGVzICk7XG5cdFx0Y29uc3QgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xuXG5cdFx0Y29uc3QgaW1hZ2VzID0gdGhpcy5wYXJzZUltYWdlcygganNvbi5pbWFnZXMsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIG9uTG9hZCggb2JqZWN0ICk7XG5cblx0XHR9ICk7XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHRoaXMucGFyc2VUZXh0dXJlcygganNvbi50ZXh0dXJlcywgaW1hZ2VzICk7XG5cdFx0Y29uc3QgbWF0ZXJpYWxzID0gdGhpcy5wYXJzZU1hdGVyaWFscygganNvbi5tYXRlcmlhbHMsIHRleHR1cmVzICk7XG5cblx0XHRjb25zdCBvYmplY3QgPSB0aGlzLnBhcnNlT2JqZWN0KCBqc29uLm9iamVjdCwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLCB0ZXh0dXJlcywgYW5pbWF0aW9ucyApO1xuXHRcdGNvbnN0IHNrZWxldG9ucyA9IHRoaXMucGFyc2VTa2VsZXRvbnMoIGpzb24uc2tlbGV0b25zLCBvYmplY3QgKTtcblxuXHRcdHRoaXMuYmluZFNrZWxldG9ucyggb2JqZWN0LCBza2VsZXRvbnMgKTtcblxuXHRcdC8vXG5cblx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsZXQgaGFzSW1hZ2VzID0gZmFsc2U7XG5cblx0XHRcdGZvciAoIGNvbnN0IHV1aWQgaW4gaW1hZ2VzICkge1xuXG5cdFx0XHRcdGlmICggaW1hZ2VzWyB1dWlkIF0gaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkge1xuXG5cdFx0XHRcdFx0aGFzSW1hZ2VzID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNJbWFnZXMgPT09IGZhbHNlICkgb25Mb2FkKCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG5cdGFzeW5jIHBhcnNlQXN5bmMoIGpzb24gKSB7XG5cblx0XHRjb25zdCBhbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoIGpzb24uYW5pbWF0aW9ucyApO1xuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyc2VTaGFwZXMoIGpzb24uc2hhcGVzICk7XG5cdFx0Y29uc3QgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xuXG5cdFx0Y29uc3QgaW1hZ2VzID0gYXdhaXQgdGhpcy5wYXJzZUltYWdlc0FzeW5jKCBqc29uLmltYWdlcyApO1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSB0aGlzLnBhcnNlVGV4dHVyZXMoIGpzb24udGV4dHVyZXMsIGltYWdlcyApO1xuXHRcdGNvbnN0IG1hdGVyaWFscyA9IHRoaXMucGFyc2VNYXRlcmlhbHMoIGpzb24ubWF0ZXJpYWxzLCB0ZXh0dXJlcyApO1xuXG5cdFx0Y29uc3Qgb2JqZWN0ID0gdGhpcy5wYXJzZU9iamVjdCgganNvbi5vYmplY3QsIGdlb21ldHJpZXMsIG1hdGVyaWFscywgdGV4dHVyZXMsIGFuaW1hdGlvbnMgKTtcblx0XHRjb25zdCBza2VsZXRvbnMgPSB0aGlzLnBhcnNlU2tlbGV0b25zKCBqc29uLnNrZWxldG9ucywgb2JqZWN0ICk7XG5cblx0XHR0aGlzLmJpbmRTa2VsZXRvbnMoIG9iamVjdCwgc2tlbGV0b25zICk7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxuXHRwYXJzZVNoYXBlcygganNvbiApIHtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFwZSA9IG5ldyBTaGFwZSgpLmZyb21KU09OKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0XHRzaGFwZXNbIHNoYXBlLnV1aWQgXSA9IHNoYXBlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxuXHRwYXJzZVNrZWxldG9ucygganNvbiwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3Qgc2tlbGV0b25zID0ge307XG5cdFx0Y29uc3QgYm9uZXMgPSB7fTtcblxuXHRcdC8vIGdlbmVyYXRlIGJvbmUgbG9va3VwIHRhYmxlXG5cblx0XHRvYmplY3QudHJhdmVyc2UoIGZ1bmN0aW9uICggY2hpbGQgKSB7XG5cblx0XHRcdGlmICggY2hpbGQuaXNCb25lICkgYm9uZXNbIGNoaWxkLnV1aWQgXSA9IGNoaWxkO1xuXG5cdFx0fSApO1xuXG5cdFx0Ly8gY3JlYXRlIHNrZWxldG9uc1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBza2VsZXRvbiA9IG5ldyBTa2VsZXRvbigpLmZyb21KU09OKCBqc29uWyBpIF0sIGJvbmVzICk7XG5cblx0XHRcdFx0c2tlbGV0b25zWyBza2VsZXRvbi51dWlkIF0gPSBza2VsZXRvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNrZWxldG9ucztcblxuXHR9XG5cblx0cGFyc2VHZW9tZXRyaWVzKCBqc29uLCBzaGFwZXMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyaWVzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgYnVmZmVyR2VvbWV0cnlMb2FkZXIgPSBuZXcgQnVmZmVyR2VvbWV0cnlMb2FkZXIoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBnZW9tZXRyeTtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdCdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IGJ1ZmZlckdlb21ldHJ5TG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBUaGUgbGVnYWN5IEdlb21ldHJ5IHR5cGUgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4nICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhLnR5cGUgaW4gR2VvbWV0cmllcyApIHtcblxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeSA9IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdLmZyb21KU09OKCBkYXRhLCBzaGFwZXMgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oIGBUSFJFRS5PYmplY3RMb2FkZXI6IFVuc3VwcG9ydGVkIGdlb21ldHJ5IHR5cGUgXCIkeyBkYXRhLnR5cGUgfVwiYCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5LnV1aWQgPSBkYXRhLnV1aWQ7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIGdlb21ldHJ5Lm5hbWUgPSBkYXRhLm5hbWU7XG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSA9PT0gdHJ1ZSAmJiBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBnZW9tZXRyeS51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XG5cblx0XHRcdFx0Z2VvbWV0cmllc1sgZGF0YS51dWlkIF0gPSBnZW9tZXRyeTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdlb21ldHJpZXM7XG5cblx0fVxuXG5cdHBhcnNlTWF0ZXJpYWxzKCBqc29uLCB0ZXh0dXJlcyApIHtcblxuXHRcdGNvbnN0IGNhY2hlID0ge307IC8vIE11bHRpTWF0ZXJpYWxcblx0XHRjb25zdCBtYXRlcmlhbHMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBsb2FkZXIgPSBuZXcgTWF0ZXJpYWxMb2FkZXIoKTtcblx0XHRcdGxvYWRlci5zZXRUZXh0dXJlcyggdGV4dHVyZXMgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0aWYgKCBkYXRhLnR5cGUgPT09ICdNdWx0aU1hdGVyaWFsJyApIHtcblxuXHRcdFx0XHRcdC8vIERlcHJlY2F0ZWRcblxuXHRcdFx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBkYXRhLm1hdGVyaWFscy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gZGF0YS5tYXRlcmlhbHNbIGogXTtcblxuXHRcdFx0XHRcdFx0aWYgKCBjYWNoZVsgbWF0ZXJpYWwudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGVbIG1hdGVyaWFsLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRhcnJheS5wdXNoKCBjYWNoZVsgbWF0ZXJpYWwudXVpZCBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtYXRlcmlhbHNbIGRhdGEudXVpZCBdID0gYXJyYXk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggY2FjaGVbIGRhdGEudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNhY2hlWyBkYXRhLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGNhY2hlWyBkYXRhLnV1aWQgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRlcmlhbHM7XG5cblx0fVxuXG5cdHBhcnNlQW5pbWF0aW9ucygganNvbiApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGNvbnN0IGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0YW5pbWF0aW9uc1sgY2xpcC51dWlkIF0gPSBjbGlwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9XG5cblx0cGFyc2VJbWFnZXMoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblx0XHRjb25zdCBpbWFnZXMgPSB7fTtcblxuXHRcdGxldCBsb2FkZXI7XG5cblx0XHRmdW5jdGlvbiBsb2FkSW1hZ2UoIHVybCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRyZXR1cm4gbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZTtcblxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcblxuXHRcdFx0XHRyZXR1cm4gbG9hZEltYWdlKCBwYXRoICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRhdGE6IGdldFR5cGVkQXJyYXkoIGltYWdlLnR5cGUsIGltYWdlLmRhdGEgKSxcblx0XHRcdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcblx0XHRcdFx0XHRcdGhlaWdodDogaW1hZ2UuaGVpZ2h0XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCAmJiBqc29uLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IG1hbmFnZXIgPSBuZXcgTG9hZGluZ01hbmFnZXIoIG9uTG9hZCApO1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKTtcblx0XHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0ganNvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbWFnZSA9IGpzb25bIGkgXTtcblx0XHRcdFx0Y29uc3QgdXJsID0gaW1hZ2UudXJsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIGFycmF5IG9mIGltYWdlcyBlLmcgQ3ViZVRleHR1cmVcblxuXHRcdFx0XHRcdGNvbnN0IGltYWdlQXJyYXkgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB1cmwubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRVcmwgPSB1cmxbIGogXTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBjdXJyZW50VXJsICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGVzZXJpYWxpemVkSW1hZ2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBkZXNlcmlhbGl6ZWRJbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpbWFnZUFycmF5LnB1c2goIGRlc2VyaWFsaXplZEltYWdlICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNwZWNpYWwgY2FzZTogaGFuZGxlIGFycmF5IG9mIGRhdGEgdGV4dHVyZXMgZm9yIGN1YmUgdGV4dHVyZXNcblxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggbmV3IERhdGFUZXh0dXJlKCBkZXNlcmlhbGl6ZWRJbWFnZS5kYXRhLCBkZXNlcmlhbGl6ZWRJbWFnZS53aWR0aCwgZGVzZXJpYWxpemVkSW1hZ2UuaGVpZ2h0ICkgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggaW1hZ2VBcnJheSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIHNpbmdsZSBpbWFnZVxuXG5cdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBpbWFnZS51cmwgKTtcblx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXSA9IG5ldyBTb3VyY2UoIGRlc2VyaWFsaXplZEltYWdlICk7XG5cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fVxuXG5cdGFzeW5jIHBhcnNlSW1hZ2VzQXN5bmMoIGpzb24gKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cdFx0Y29uc3QgaW1hZ2VzID0ge307XG5cblx0XHRsZXQgbG9hZGVyO1xuXG5cdFx0YXN5bmMgZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZTtcblxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcblxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggcGF0aCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRkYXRhOiBnZXRUeXBlZEFycmF5KCBpbWFnZS50eXBlLCBpbWFnZS5kYXRhICksXG5cdFx0XHRcdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgJiYganNvbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBqc29uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGltYWdlID0ganNvblsgaSBdO1xuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZS51cmw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgYXJyYXkgb2YgaW1hZ2VzIGUuZyBDdWJlVGV4dHVyZVxuXG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2VBcnJheSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHVybC5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgY3VycmVudFVybCA9IHVybFsgaiBdO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGF3YWl0IGRlc2VyaWFsaXplSW1hZ2UoIGN1cnJlbnRVcmwgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkZXNlcmlhbGl6ZWRJbWFnZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGRlc2VyaWFsaXplZEltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggZGVzZXJpYWxpemVkSW1hZ2UgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc3BlY2lhbCBjYXNlOiBoYW5kbGUgYXJyYXkgb2YgZGF0YSB0ZXh0dXJlcyBmb3IgY3ViZSB0ZXh0dXJlc1xuXG5cdFx0XHRcdFx0XHRcdFx0aW1hZ2VBcnJheS5wdXNoKCBuZXcgRGF0YVRleHR1cmUoIGRlc2VyaWFsaXplZEltYWdlLmRhdGEsIGRlc2VyaWFsaXplZEltYWdlLndpZHRoLCBkZXNlcmlhbGl6ZWRJbWFnZS5oZWlnaHQgKSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBuZXcgU291cmNlKCBpbWFnZUFycmF5ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgc2luZ2xlIGltYWdlXG5cblx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGF3YWl0IGRlc2VyaWFsaXplSW1hZ2UoIGltYWdlLnVybCApO1xuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggZGVzZXJpYWxpemVkSW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fVxuXG5cdHBhcnNlVGV4dHVyZXMoIGpzb24sIGltYWdlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHBhcnNlQ29uc3RhbnQoIHZhbHVlLCB0eXBlICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSByZXR1cm4gdmFsdWU7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlci5wYXJzZVRleHR1cmU6IENvbnN0YW50IHNob3VsZCBiZSBpbiBudW1lcmljIGZvcm0uJywgdmFsdWUgKTtcblxuXHRcdFx0cmV0dXJuIHR5cGVbIHZhbHVlIF07XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGlmICggZGF0YS5pbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsIGRhdGEudXVpZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGltYWdlc1sgZGF0YS5pbWFnZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZScsIGRhdGEuaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3Qgc291cmNlID0gaW1hZ2VzWyBkYXRhLmltYWdlIF07XG5cdFx0XHRcdGNvbnN0IGltYWdlID0gc291cmNlLmRhdGE7XG5cblx0XHRcdFx0bGV0IHRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZSApICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZS5sZW5ndGggPT09IDYgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZSAmJiBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaW1hZ2UgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gdGV4dHVyZXMgY2FuIGhhdmUgdW5kZWZpbmVkIGltYWdlIGRhdGFcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHRcdFx0dGV4dHVyZS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm5hbWUgPSBkYXRhLm5hbWU7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1hcHBpbmcgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFwcGluZyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFwcGluZywgVEVYVFVSRV9NQVBQSU5HICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm9mZnNldCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5vZmZzZXQuZnJvbUFycmF5KCBkYXRhLm9mZnNldCApO1xuXHRcdFx0XHRpZiAoIGRhdGEucmVwZWF0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJlcGVhdC5mcm9tQXJyYXkoIGRhdGEucmVwZWF0ICk7XG5cdFx0XHRcdGlmICggZGF0YS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY2VudGVyLmZyb21BcnJheSggZGF0YS5jZW50ZXIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJvdGF0aW9uID0gZGF0YS5yb3RhdGlvbjtcblxuXHRcdFx0XHRpZiAoIGRhdGEud3JhcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwUyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMCBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwVCA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMSBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZm9ybWF0ID0gZGF0YS5mb3JtYXQ7XG5cdFx0XHRcdGlmICggZGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnR5cGUgPSBkYXRhLnR5cGU7XG5cdFx0XHRcdGlmICggZGF0YS5lbmNvZGluZyAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5lbmNvZGluZyA9IGRhdGEuZW5jb2Rpbmc7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5taW5GaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1pbkZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5tYWdGaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1hZ0ZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuYW5pc290cm9weSA9IGRhdGEuYW5pc290cm9weTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuZmxpcFkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZmxpcFkgPSBkYXRhLmZsaXBZO1xuXG5cdFx0XHRcdGlmICggZGF0YS5wcmVtdWx0aXBseUFscGhhICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPSBkYXRhLnByZW11bHRpcGx5QWxwaGE7XG5cdFx0XHRcdGlmICggZGF0YS51bnBhY2tBbGlnbm1lbnQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ID0gZGF0YS51bnBhY2tBbGlnbm1lbnQ7XG5cblx0XHRcdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblxuXHRcdFx0XHR0ZXh0dXJlc1sgZGF0YS51dWlkIF0gPSB0ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZXM7XG5cblx0fVxuXG5cdHBhcnNlT2JqZWN0KCBkYXRhLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMsIHRleHR1cmVzLCBhbmltYXRpb25zICkge1xuXG5cdFx0bGV0IG9iamVjdDtcblxuXHRcdGZ1bmN0aW9uIGdldEdlb21ldHJ5KCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJpZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGdlb21ldHJ5JywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBnZW9tZXRyaWVzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRNYXRlcmlhbCggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblxuXHRcdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHV1aWQgPSBuYW1lWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsc1sgdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgdXVpZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWxzWyB1dWlkIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGFycmF5O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRUZXh0dXJlKCB1dWlkICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmVzWyB1dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgdXVpZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgdXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGdlb21ldHJ5LCBtYXRlcmlhbDtcblxuXHRcdHN3aXRjaCAoIGRhdGEudHlwZSApIHtcblxuXHRcdFx0Y2FzZSAnU2NlbmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTY2VuZSgpO1xuXG5cdFx0XHRcdGlmICggZGF0YS5iYWNrZ3JvdW5kICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIE51bWJlci5pc0ludGVnZXIoIGRhdGEuYmFja2dyb3VuZCApICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IG5ldyBDb2xvciggZGF0YS5iYWNrZ3JvdW5kICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IGdldFRleHR1cmUoIGRhdGEuYmFja2dyb3VuZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRhdGEuZW52aXJvbm1lbnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5lbnZpcm9ubWVudCA9IGdldFRleHR1cmUoIGRhdGEuZW52aXJvbm1lbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy50eXBlID09PSAnRm9nJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2coIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5uZWFyLCBkYXRhLmZvZy5mYXIgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2dFeHAyJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2dFeHAyKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cuZGVuc2l0eSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUGVyc3BlY3RpdmVDYW1lcmEnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZGF0YS5mb3YsIGRhdGEuYXNwZWN0LCBkYXRhLm5lYXIsIGRhdGEuZmFyICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvY3VzICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZm9jdXMgPSBkYXRhLmZvY3VzO1xuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XG5cdFx0XHRcdGlmICggZGF0YS5maWxtR2F1Z2UgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtR2F1Z2UgPSBkYXRhLmZpbG1HYXVnZTtcblx0XHRcdFx0aWYgKCBkYXRhLmZpbG1PZmZzZXQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtT2Zmc2V0ID0gZGF0YS5maWxtT2Zmc2V0O1xuXHRcdFx0XHRpZiAoIGRhdGEudmlldyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgZGF0YS52aWV3ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ09ydGhvZ3JhcGhpY0NhbWVyYSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggZGF0YS5sZWZ0LCBkYXRhLnJpZ2h0LCBkYXRhLnRvcCwgZGF0YS5ib3R0b20sIGRhdGEubmVhciwgZGF0YS5mYXIgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XG5cdFx0XHRcdGlmICggZGF0YS52aWV3ICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCBkYXRhLnZpZXcgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQW1iaWVudExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgQW1iaWVudExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdEaXJlY3Rpb25hbExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgRGlyZWN0aW9uYWxMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBvaW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmRlY2F5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBSZWN0QXJlYUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3BvdExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3BvdExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS5kaXN0YW5jZSwgZGF0YS5hbmdsZSwgZGF0YS5wZW51bWJyYSwgZGF0YS5kZWNheSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdIZW1pc3BoZXJlTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBIZW1pc3BoZXJlTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuZ3JvdW5kQ29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpZ2h0UHJvYmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaWdodFByb2JlKCkuZnJvbUpTT04oIGRhdGEgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU2tpbm5lZE1lc2gnOlxuXG5cdFx0XHRcdGdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKTtcblx0XHRcdCBcdG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5iaW5kTW9kZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmJpbmRNb2RlID0gZGF0YS5iaW5kTW9kZTtcblx0XHRcdFx0aWYgKCBkYXRhLmJpbmRNYXRyaXggIT09IHVuZGVmaW5lZCApIG9iamVjdC5iaW5kTWF0cml4LmZyb21BcnJheSggZGF0YS5iaW5kTWF0cml4ICk7XG5cdFx0XHRcdGlmICggZGF0YS5za2VsZXRvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNrZWxldG9uID0gZGF0YS5za2VsZXRvbjtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTWVzaCc6XG5cblx0XHRcdFx0Z2VvbWV0cnkgPSBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApO1xuXHRcdFx0XHRtYXRlcmlhbCA9IGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICk7XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdJbnN0YW5jZWRNZXNoJzpcblxuXHRcdFx0XHRnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XG5cdFx0XHRcdG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcblx0XHRcdFx0Y29uc3QgY291bnQgPSBkYXRhLmNvdW50O1xuXHRcdFx0XHRjb25zdCBpbnN0YW5jZU1hdHJpeCA9IGRhdGEuaW5zdGFuY2VNYXRyaXg7XG5cdFx0XHRcdGNvbnN0IGluc3RhbmNlQ29sb3IgPSBkYXRhLmluc3RhbmNlQ29sb3I7XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEluc3RhbmNlZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCwgY291bnQgKTtcblx0XHRcdFx0b2JqZWN0Lmluc3RhbmNlTWF0cml4ID0gbmV3IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggaW5zdGFuY2VNYXRyaXguYXJyYXkgKSwgMTYgKTtcblx0XHRcdFx0aWYgKCBpbnN0YW5jZUNvbG9yICE9PSB1bmRlZmluZWQgKSBvYmplY3QuaW5zdGFuY2VDb2xvciA9IG5ldyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIGluc3RhbmNlQ29sb3IuYXJyYXkgKSwgaW5zdGFuY2VDb2xvci5pdGVtU2l6ZSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMT0QnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMT0QoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExpbmUoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZUxvb3AnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lTG9vcCggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaW5lU2VnbWVudHMnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lU2VnbWVudHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRDbG91ZCc6XG5cdFx0XHRjYXNlICdQb2ludHMnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQb2ludHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3ByaXRlJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3ByaXRlKCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0dyb3VwJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgR3JvdXAoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQm9uZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEJvbmUoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdH1cblxuXHRcdG9iamVjdC51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5uYW1lID0gZGF0YS5uYW1lO1xuXG5cdFx0aWYgKCBkYXRhLm1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRvYmplY3QubWF0cml4LmZyb21BcnJheSggZGF0YS5tYXRyaXggKTtcblxuXHRcdFx0aWYgKCBkYXRhLm1hdHJpeEF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZGF0YS5tYXRyaXhBdXRvVXBkYXRlO1xuXHRcdFx0aWYgKCBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSApIG9iamVjdC5tYXRyaXguZGVjb21wb3NlKCBvYmplY3QucG9zaXRpb24sIG9iamVjdC5xdWF0ZXJuaW9uLCBvYmplY3Quc2NhbGUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggZGF0YS5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnBvc2l0aW9uLmZyb21BcnJheSggZGF0YS5wb3NpdGlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3Qucm90YXRpb24uZnJvbUFycmF5KCBkYXRhLnJvdGF0aW9uICk7XG5cdFx0XHRpZiAoIGRhdGEucXVhdGVybmlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnF1YXRlcm5pb24uZnJvbUFycmF5KCBkYXRhLnF1YXRlcm5pb24gKTtcblx0XHRcdGlmICggZGF0YS5zY2FsZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNjYWxlLmZyb21BcnJheSggZGF0YS5zY2FsZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLmNhc3RTaGFkb3cgIT09IHVuZGVmaW5lZCApIG9iamVjdC5jYXN0U2hhZG93ID0gZGF0YS5jYXN0U2hhZG93O1xuXHRcdGlmICggZGF0YS5yZWNlaXZlU2hhZG93ICE9PSB1bmRlZmluZWQgKSBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IGRhdGEucmVjZWl2ZVNoYWRvdztcblxuXHRcdGlmICggZGF0YS5zaGFkb3cgKSB7XG5cblx0XHRcdGlmICggZGF0YS5zaGFkb3cuYmlhcyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5iaWFzID0gZGF0YS5zaGFkb3cuYmlhcztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cubm9ybWFsQmlhcyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5ub3JtYWxCaWFzID0gZGF0YS5zaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cucmFkaXVzICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LnJhZGl1cyA9IGRhdGEuc2hhZG93LnJhZGl1cztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cubWFwU2l6ZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5tYXBTaXplLmZyb21BcnJheSggZGF0YS5zaGFkb3cubWFwU2l6ZSApO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5jYW1lcmEgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cuY2FtZXJhID0gdGhpcy5wYXJzZU9iamVjdCggZGF0YS5zaGFkb3cuY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEudmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpc2libGUgPSBkYXRhLnZpc2libGU7XG5cdFx0aWYgKCBkYXRhLmZydXN0dW1DdWxsZWQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5mcnVzdHVtQ3VsbGVkID0gZGF0YS5mcnVzdHVtQ3VsbGVkO1xuXHRcdGlmICggZGF0YS5yZW5kZXJPcmRlciAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJlbmRlck9yZGVyID0gZGF0YS5yZW5kZXJPcmRlcjtcblx0XHRpZiAoIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIG9iamVjdC51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XG5cdFx0aWYgKCBkYXRhLmxheWVycyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmxheWVycy5tYXNrID0gZGF0YS5sYXllcnM7XG5cblx0XHRpZiAoIGRhdGEuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgY2hpbGRyZW4gPSBkYXRhLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmFkZCggdGhpcy5wYXJzZU9iamVjdCggY2hpbGRyZW5bIGkgXSwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLCB0ZXh0dXJlcywgYW5pbWF0aW9ucyApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS5hbmltYXRpb25zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdEFuaW1hdGlvbnMgPSBkYXRhLmFuaW1hdGlvbnM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEFuaW1hdGlvbnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHV1aWQgPSBvYmplY3RBbmltYXRpb25zWyBpIF07XG5cblx0XHRcdFx0b2JqZWN0LmFuaW1hdGlvbnMucHVzaCggYW5pbWF0aW9uc1sgdXVpZCBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS50eXBlID09PSAnTE9EJyApIHtcblxuXHRcdFx0aWYgKCBkYXRhLmF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5hdXRvVXBkYXRlID0gZGF0YS5hdXRvVXBkYXRlO1xuXG5cdFx0XHRjb25zdCBsZXZlbHMgPSBkYXRhLmxldmVscztcblxuXHRcdFx0Zm9yICggbGV0IGwgPSAwOyBsIDwgbGV2ZWxzLmxlbmd0aDsgbCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgbCBdO1xuXHRcdFx0XHRjb25zdCBjaGlsZCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KCAndXVpZCcsIGxldmVsLm9iamVjdCApO1xuXG5cdFx0XHRcdGlmICggY2hpbGQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5hZGRMZXZlbCggY2hpbGQsIGxldmVsLmRpc3RhbmNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxuXHRiaW5kU2tlbGV0b25zKCBvYmplY3QsIHNrZWxldG9ucyApIHtcblxuXHRcdGlmICggT2JqZWN0LmtleXMoIHNrZWxldG9ucyApLmxlbmd0aCA9PT0gMCApIHJldHVybjtcblxuXHRcdG9iamVjdC50cmF2ZXJzZSggZnVuY3Rpb24gKCBjaGlsZCApIHtcblxuXHRcdFx0aWYgKCBjaGlsZC5pc1NraW5uZWRNZXNoID09PSB0cnVlICYmIGNoaWxkLnNrZWxldG9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2tlbGV0b24gPSBza2VsZXRvbnNbIGNoaWxkLnNrZWxldG9uIF07XG5cblx0XHRcdFx0aWYgKCBza2VsZXRvbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBza2VsZXRvbiBmb3VuZCB3aXRoIFVVSUQ6JywgY2hpbGQuc2tlbGV0b24gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y2hpbGQuYmluZCggc2tlbGV0b24sIGNoaWxkLmJpbmRNYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9XG5cblx0LyogREVQUkVDQVRFRCAqL1xuXG5cdHNldFRleHR1cmVQYXRoKCB2YWx1ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogLnNldFRleHR1cmVQYXRoKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0UmVzb3VyY2VQYXRoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldFJlc291cmNlUGF0aCggdmFsdWUgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgVEVYVFVSRV9NQVBQSU5HID0ge1xuXHRVVk1hcHBpbmc6IFVWTWFwcGluZyxcblx0Q3ViZVJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVSZWZyYWN0aW9uTWFwcGluZzogQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLFxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZzogRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nXG59O1xuXG5jb25zdCBURVhUVVJFX1dSQVBQSU5HID0ge1xuXHRSZXBlYXRXcmFwcGluZzogUmVwZWF0V3JhcHBpbmcsXG5cdENsYW1wVG9FZGdlV3JhcHBpbmc6IENsYW1wVG9FZGdlV3JhcHBpbmcsXG5cdE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmdcbn07XG5cbmNvbnN0IFRFWFRVUkVfRklMVEVSID0ge1xuXHROZWFyZXN0RmlsdGVyOiBOZWFyZXN0RmlsdGVyLFxuXHROZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcjogTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXI6IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhckZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyOiBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLFxuXHRMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI6IExpbmVhck1pcG1hcExpbmVhckZpbHRlclxufTtcblxuY2xhc3MgSW1hZ2VCaXRtYXBMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHRcdGlmICggdHlwZW9mIGNyZWF0ZUltYWdlQml0bWFwID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGNyZWF0ZUltYWdlQml0bWFwKCkgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiBmZXRjaCA9PT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlQml0bWFwTG9hZGVyOiBmZXRjaCgpIG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5vcHRpb25zID0geyBwcmVtdWx0aXBseUFscGhhOiAnbm9uZScgfTtcblxuXHR9XG5cblx0c2V0T3B0aW9ucyggb3B0aW9ucyApIHtcblxuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCAwICk7XG5cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cblx0XHR9XG5cblx0XHRjb25zdCBmZXRjaE9wdGlvbnMgPSB7fTtcblx0XHRmZXRjaE9wdGlvbnMuY3JlZGVudGlhbHMgPSAoIHRoaXMuY3Jvc3NPcmlnaW4gPT09ICdhbm9ueW1vdXMnICkgPyAnc2FtZS1vcmlnaW4nIDogJ2luY2x1ZGUnO1xuXHRcdGZldGNoT3B0aW9ucy5oZWFkZXJzID0gdGhpcy5yZXF1ZXN0SGVhZGVyO1xuXG5cdFx0ZmV0Y2goIHVybCwgZmV0Y2hPcHRpb25zICkudGhlbiggZnVuY3Rpb24gKCByZXMgKSB7XG5cblx0XHRcdHJldHVybiByZXMuYmxvYigpO1xuXG5cdFx0fSApLnRoZW4oIGZ1bmN0aW9uICggYmxvYiApIHtcblxuXHRcdFx0cmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKCBibG9iLCBPYmplY3QuYXNzaWduKCBzY29wZS5vcHRpb25zLCB7IGNvbG9yU3BhY2VDb252ZXJzaW9uOiAnbm9uZScgfSApICk7XG5cblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCBpbWFnZUJpdG1hcCApIHtcblxuXHRcdFx0Q2FjaGUuYWRkKCB1cmwsIGltYWdlQml0bWFwICk7XG5cblx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBpbWFnZUJpdG1hcCApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fSApLmNhdGNoKCBmdW5jdGlvbiAoIGUgKSB7XG5cblx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGUgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH0gKTtcblxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHR9XG5cbn1cblxuSW1hZ2VCaXRtYXBMb2FkZXIucHJvdG90eXBlLmlzSW1hZ2VCaXRtYXBMb2FkZXIgPSB0cnVlO1xuXG5sZXQgX2NvbnRleHQ7XG5cbmNvbnN0IEF1ZGlvQ29udGV4dCA9IHtcblxuXHRnZXRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIF9jb250ZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9jb250ZXh0ID0gbmV3ICggd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0ICkoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBfY29udGV4dDtcblxuXHR9LFxuXG5cdHNldENvbnRleHQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRfY29udGV4dCA9IHZhbHVlO1xuXG5cdH1cblxufTtcblxuY2xhc3MgQXVkaW9Mb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHQvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBidWZmZXIuIFRoZSBgZGVjb2RlQXVkaW9EYXRhYCBtZXRob2Rcblx0XHRcdFx0Ly8gZGV0YWNoZXMgdGhlIGJ1ZmZlciB3aGVuIGNvbXBsZXRlLCBwcmV2ZW50aW5nIHJldXNlLlxuXHRcdFx0XHRjb25zdCBidWZmZXJDb3B5ID0gYnVmZmVyLnNsaWNlKCAwICk7XG5cblx0XHRcdFx0Y29uc3QgY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cdFx0XHRcdGNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKCBidWZmZXJDb3B5LCBmdW5jdGlvbiAoIGF1ZGlvQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0b25Mb2FkKCBhdWRpb0J1ZmZlciApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICkge1xuXG5cdFx0XHRcdFx0b25FcnJvciggZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBIZW1pc3BoZXJlTGlnaHRQcm9iZSBleHRlbmRzIExpZ2h0UHJvYmUge1xuXG5cdGNvbnN0cnVjdG9yKCBza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSA9IDEgKSB7XG5cblx0XHRzdXBlciggdW5kZWZpbmVkLCBpbnRlbnNpdHkgKTtcblxuXHRcdGNvbnN0IGNvbG9yMSA9IG5ldyBDb2xvcigpLnNldCggc2t5Q29sb3IgKTtcblx0XHRjb25zdCBjb2xvcjIgPSBuZXcgQ29sb3IoKS5zZXQoIGdyb3VuZENvbG9yICk7XG5cblx0XHRjb25zdCBza3kgPSBuZXcgVmVjdG9yMyggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApO1xuXHRcdGNvbnN0IGdyb3VuZCA9IG5ldyBWZWN0b3IzKCBjb2xvcjIuciwgY29sb3IyLmcsIGNvbG9yMi5iICk7XG5cblx0XHQvLyB3aXRob3V0IGV4dHJhIGZhY3RvciBvZiBQSSBpbiB0aGUgc2hhZGVyLCBzaG91bGQgPSAxIC8gTWF0aC5zcXJ0KCBNYXRoLlBJICk7XG5cdFx0Y29uc3QgYzAgPSBNYXRoLnNxcnQoIE1hdGguUEkgKTtcblx0XHRjb25zdCBjMSA9IGMwICogTWF0aC5zcXJ0KCAwLjc1ICk7XG5cblx0XHR0aGlzLnNoLmNvZWZmaWNpZW50c1sgMCBdLmNvcHkoIHNreSApLmFkZCggZ3JvdW5kICkubXVsdGlwbHlTY2FsYXIoIGMwICk7XG5cdFx0dGhpcy5zaC5jb2VmZmljaWVudHNbIDEgXS5jb3B5KCBza3kgKS5zdWIoIGdyb3VuZCApLm11bHRpcGx5U2NhbGFyKCBjMSApO1xuXG5cdH1cblxufVxuXG5IZW1pc3BoZXJlTGlnaHRQcm9iZS5wcm90b3R5cGUuaXNIZW1pc3BoZXJlTGlnaHRQcm9iZSA9IHRydWU7XG5cbmNsYXNzIEFtYmllbnRMaWdodFByb2JlIGV4dGVuZHMgTGlnaHRQcm9iZSB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgPSAxICkge1xuXG5cdFx0c3VwZXIoIHVuZGVmaW5lZCwgaW50ZW5zaXR5ICk7XG5cblx0XHRjb25zdCBjb2xvcjEgPSBuZXcgQ29sb3IoKS5zZXQoIGNvbG9yICk7XG5cblx0XHQvLyB3aXRob3V0IGV4dHJhIGZhY3RvciBvZiBQSSBpbiB0aGUgc2hhZGVyLCB3b3VsZCBiZSAyIC8gTWF0aC5zcXJ0KCBNYXRoLlBJICk7XG5cdFx0dGhpcy5zaC5jb2VmZmljaWVudHNbIDAgXS5zZXQoIGNvbG9yMS5yLCBjb2xvcjEuZywgY29sb3IxLmIgKS5tdWx0aXBseVNjYWxhciggMiAqIE1hdGguc3FydCggTWF0aC5QSSApICk7XG5cblx0fVxuXG59XG5cbkFtYmllbnRMaWdodFByb2JlLnByb3RvdHlwZS5pc0FtYmllbnRMaWdodFByb2JlID0gdHJ1ZTtcblxuY29uc3QgX2V5ZVJpZ2h0ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2V5ZUxlZnQgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcHJvamVjdGlvbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuY2xhc3MgU3RlcmVvQ2FtZXJhIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMudHlwZSA9ICdTdGVyZW9DYW1lcmEnO1xuXG5cdFx0dGhpcy5hc3BlY3QgPSAxO1xuXG5cdFx0dGhpcy5leWVTZXAgPSAwLjA2NDtcblxuXHRcdHRoaXMuY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdHRoaXMuY2FtZXJhTC5sYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0dGhpcy5jYW1lcmFMLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdHRoaXMuY2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cdFx0dGhpcy5jYW1lcmFSLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuX2NhY2hlID0ge1xuXHRcdFx0Zm9jdXM6IG51bGwsXG5cdFx0XHRmb3Y6IG51bGwsXG5cdFx0XHRhc3BlY3Q6IG51bGwsXG5cdFx0XHRuZWFyOiBudWxsLFxuXHRcdFx0ZmFyOiBudWxsLFxuXHRcdFx0em9vbTogbnVsbCxcblx0XHRcdGV5ZVNlcDogbnVsbFxuXHRcdH07XG5cblx0fVxuXG5cdHVwZGF0ZSggY2FtZXJhICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZTtcblxuXHRcdGNvbnN0IG5lZWRzVXBkYXRlID0gY2FjaGUuZm9jdXMgIT09IGNhbWVyYS5mb2N1cyB8fCBjYWNoZS5mb3YgIT09IGNhbWVyYS5mb3YgfHxcblx0XHRcdGNhY2hlLmFzcGVjdCAhPT0gY2FtZXJhLmFzcGVjdCAqIHRoaXMuYXNwZWN0IHx8IGNhY2hlLm5lYXIgIT09IGNhbWVyYS5uZWFyIHx8XG5cdFx0XHRjYWNoZS5mYXIgIT09IGNhbWVyYS5mYXIgfHwgY2FjaGUuem9vbSAhPT0gY2FtZXJhLnpvb20gfHwgY2FjaGUuZXllU2VwICE9PSB0aGlzLmV5ZVNlcDtcblxuXHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdGNhY2hlLmZvY3VzID0gY2FtZXJhLmZvY3VzO1xuXHRcdFx0Y2FjaGUuZm92ID0gY2FtZXJhLmZvdjtcblx0XHRcdGNhY2hlLmFzcGVjdCA9IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdDtcblx0XHRcdGNhY2hlLm5lYXIgPSBjYW1lcmEubmVhcjtcblx0XHRcdGNhY2hlLmZhciA9IGNhbWVyYS5mYXI7XG5cdFx0XHRjYWNoZS56b29tID0gY2FtZXJhLnpvb207XG5cdFx0XHRjYWNoZS5leWVTZXAgPSB0aGlzLmV5ZVNlcDtcblxuXHRcdFx0Ly8gT2ZmLWF4aXMgc3RlcmVvc2NvcGljIGVmZmVjdCBiYXNlZCBvblxuXHRcdFx0Ly8gaHR0cDovL3BhdWxib3Vya2UubmV0L3N0ZXJlb2dyYXBoaWNzL3N0ZXJlb3JlbmRlci9cblxuXHRcdFx0X3Byb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdGNvbnN0IGV5ZVNlcEhhbGYgPSBjYWNoZS5leWVTZXAgLyAyO1xuXHRcdFx0Y29uc3QgZXllU2VwT25Qcm9qZWN0aW9uID0gZXllU2VwSGFsZiAqIGNhY2hlLm5lYXIgLyBjYWNoZS5mb2N1cztcblx0XHRcdGNvbnN0IHltYXggPSAoIGNhY2hlLm5lYXIgKiBNYXRoLnRhbiggREVHMlJBRCAqIGNhY2hlLmZvdiAqIDAuNSApICkgLyBjYWNoZS56b29tO1xuXHRcdFx0bGV0IHhtaW4sIHhtYXg7XG5cblx0XHRcdC8vIHRyYW5zbGF0ZSB4T2Zmc2V0XG5cblx0XHRcdF9leWVMZWZ0LmVsZW1lbnRzWyAxMiBdID0gLSBleWVTZXBIYWxmO1xuXHRcdFx0X2V5ZVJpZ2h0LmVsZW1lbnRzWyAxMiBdID0gZXllU2VwSGFsZjtcblxuXHRcdFx0Ly8gZm9yIGxlZnQgZXllXG5cblx0XHRcdHhtaW4gPSAtIHltYXggKiBjYWNoZS5hc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247XG5cdFx0XHR4bWF4ID0geW1heCAqIGNhY2hlLmFzcGVjdCArIGV5ZVNlcE9uUHJvamVjdGlvbjtcblxuXHRcdFx0X3Byb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDAgXSA9IDIgKiBjYWNoZS5uZWFyIC8gKCB4bWF4IC0geG1pbiApO1xuXHRcdFx0X3Byb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDggXSA9ICggeG1heCArIHhtaW4gKSAvICggeG1heCAtIHhtaW4gKTtcblxuXHRcdFx0dGhpcy5jYW1lcmFMLnByb2plY3Rpb25NYXRyaXguY29weSggX3Byb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdFx0Ly8gZm9yIHJpZ2h0IGV5ZVxuXG5cdFx0XHR4bWluID0gLSB5bWF4ICogY2FjaGUuYXNwZWN0IC0gZXllU2VwT25Qcm9qZWN0aW9uO1xuXHRcdFx0eG1heCA9IHltYXggKiBjYWNoZS5hc3BlY3QgLSBleWVTZXBPblByb2plY3Rpb247XG5cblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogY2FjaGUubmVhciAvICggeG1heCAtIHhtaW4gKTtcblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA4IF0gPSAoIHhtYXggKyB4bWluICkgLyAoIHhtYXggLSB4bWluICk7XG5cblx0XHRcdHRoaXMuY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIF9wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhbWVyYUwubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkubXVsdGlwbHkoIF9leWVMZWZ0ICk7XG5cdFx0dGhpcy5jYW1lcmFSLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLm11bHRpcGx5KCBfZXllUmlnaHQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgQ2xvY2sge1xuXG5cdGNvbnN0cnVjdG9yKCBhdXRvU3RhcnQgPSB0cnVlICkge1xuXG5cdFx0dGhpcy5hdXRvU3RhcnQgPSBhdXRvU3RhcnQ7XG5cblx0XHR0aGlzLnN0YXJ0VGltZSA9IDA7XG5cdFx0dGhpcy5vbGRUaW1lID0gMDtcblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblxuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG5cdH1cblxuXHRzdGFydCgpIHtcblxuXHRcdHRoaXMuc3RhcnRUaW1lID0gbm93KCk7XG5cblx0XHR0aGlzLm9sZFRpbWUgPSB0aGlzLnN0YXJ0VGltZTtcblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXG5cdH1cblxuXHRzdG9wKCkge1xuXG5cdFx0dGhpcy5nZXRFbGFwc2VkVGltZSgpO1xuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0b1N0YXJ0ID0gZmFsc2U7XG5cblx0fVxuXG5cdGdldEVsYXBzZWRUaW1lKCkge1xuXG5cdFx0dGhpcy5nZXREZWx0YSgpO1xuXHRcdHJldHVybiB0aGlzLmVsYXBzZWRUaW1lO1xuXG5cdH1cblxuXHRnZXREZWx0YSgpIHtcblxuXHRcdGxldCBkaWZmID0gMDtcblxuXHRcdGlmICggdGhpcy5hdXRvU3RhcnQgJiYgISB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHRcdHJldHVybiAwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdGNvbnN0IG5ld1RpbWUgPSBub3coKTtcblxuXHRcdFx0ZGlmZiA9ICggbmV3VGltZSAtIHRoaXMub2xkVGltZSApIC8gMTAwMDtcblx0XHRcdHRoaXMub2xkVGltZSA9IG5ld1RpbWU7XG5cblx0XHRcdHRoaXMuZWxhcHNlZFRpbWUgKz0gZGlmZjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkaWZmO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBub3coKSB7XG5cblx0cmV0dXJuICggdHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/IERhdGUgOiBwZXJmb3JtYW5jZSApLm5vdygpOyAvLyBzZWUgIzEwNzMyXG5cbn1cblxuY29uc3QgX3Bvc2l0aW9uJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcXVhdGVybmlvbiQxID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xuY29uc3QgX3NjYWxlJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfb3JpZW50YXRpb24kMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgQXVkaW9MaXN0ZW5lciBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQXVkaW9MaXN0ZW5lcic7XG5cblx0XHR0aGlzLmNvbnRleHQgPSBBdWRpb0NvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG5cdFx0dGhpcy5nYWluID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0XHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR0aGlzLmZpbHRlciA9IG51bGw7XG5cblx0XHR0aGlzLnRpbWVEZWx0YSA9IDA7XG5cblx0XHQvLyBwcml2YXRlXG5cblx0XHR0aGlzLl9jbG9jayA9IG5ldyBDbG9jaygpO1xuXG5cdH1cblxuXHRnZXRJbnB1dCgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW47XG5cblx0fVxuXG5cdHJlbW92ZUZpbHRlcigpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cdFx0XHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cdFx0XHR0aGlzLmZpbHRlciA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0RmlsdGVyKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyO1xuXG5cdH1cblxuXHRzZXRGaWx0ZXIoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlciAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5nYWluLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyICk7XG5cdFx0XHR0aGlzLmZpbHRlci5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZmlsdGVyID0gdmFsdWU7XG5cdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuZmlsdGVyICk7XG5cdFx0dGhpcy5maWx0ZXIuY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0TWFzdGVyVm9sdW1lKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xuXG5cdH1cblxuXHRzZXRNYXN0ZXJWb2x1bWUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0XHRjb25zdCBsaXN0ZW5lciA9IHRoaXMuY29udGV4dC5saXN0ZW5lcjtcblx0XHRjb25zdCB1cCA9IHRoaXMudXA7XG5cblx0XHR0aGlzLnRpbWVEZWx0YSA9IHRoaXMuX2Nsb2NrLmdldERlbHRhKCk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uJDEsIF9xdWF0ZXJuaW9uJDEsIF9zY2FsZSQxICk7XG5cblx0XHRfb3JpZW50YXRpb24kMS5zZXQoIDAsIDAsIC0gMSApLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24kMSApO1xuXG5cdFx0aWYgKCBsaXN0ZW5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIChzZWUgIzE0MzkzKVxuXG5cdFx0XHRjb25zdCBlbmRUaW1lID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgdGhpcy50aW1lRGVsdGE7XG5cblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uJDEueCwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIucG9zaXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMS55LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci5wb3NpdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbiQxLnosIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLmZvcndhcmRYLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS54LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci5mb3J3YXJkWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uJDEueSwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIuZm9yd2FyZFoubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbiQxLnosIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnVwWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueCwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIudXBZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC55LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci51cFoubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLnosIGVuZFRpbWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGxpc3RlbmVyLnNldFBvc2l0aW9uKCBfcG9zaXRpb24kMS54LCBfcG9zaXRpb24kMS55LCBfcG9zaXRpb24kMS56ICk7XG5cdFx0XHRsaXN0ZW5lci5zZXRPcmllbnRhdGlvbiggX29yaWVudGF0aW9uJDEueCwgX29yaWVudGF0aW9uJDEueSwgX29yaWVudGF0aW9uJDEueiwgdXAueCwgdXAueSwgdXAueiApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jbGFzcyBBdWRpbyBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggbGlzdGVuZXIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0F1ZGlvJztcblxuXHRcdHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcblx0XHR0aGlzLmNvbnRleHQgPSBsaXN0ZW5lci5jb250ZXh0O1xuXG5cdFx0dGhpcy5nYWluID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0XHR0aGlzLmdhaW4uY29ubmVjdCggbGlzdGVuZXIuZ2V0SW5wdXQoKSApO1xuXG5cdFx0dGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5idWZmZXIgPSBudWxsO1xuXHRcdHRoaXMuZGV0dW5lID0gMDtcblx0XHR0aGlzLmxvb3AgPSBmYWxzZTtcblx0XHR0aGlzLmxvb3BTdGFydCA9IDA7XG5cdFx0dGhpcy5sb29wRW5kID0gMDtcblx0XHR0aGlzLm9mZnNldCA9IDA7XG5cdFx0dGhpcy5kdXJhdGlvbiA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnBsYXliYWNrUmF0ZSA9IDE7XG5cdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IHRydWU7XG5cdFx0dGhpcy5zb3VyY2UgPSBudWxsO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdlbXB0eSc7XG5cblx0XHR0aGlzLl9zdGFydGVkQXQgPSAwO1xuXHRcdHRoaXMuX3Byb2dyZXNzID0gMDtcblx0XHR0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcblxuXHRcdHRoaXMuZmlsdGVycyA9IFtdO1xuXG5cdH1cblxuXHRnZXRPdXRwdXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluO1xuXG5cdH1cblxuXHRzZXROb2RlU291cmNlKCBhdWRpb05vZGUgKSB7XG5cblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdhdWRpb05vZGUnO1xuXHRcdHRoaXMuc291cmNlID0gYXVkaW9Ob2RlO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldE1lZGlhRWxlbWVudFNvdXJjZSggbWVkaWFFbGVtZW50ICkge1xuXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFOb2RlJztcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoIG1lZGlhRWxlbWVudCApO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldE1lZGlhU3RyZWFtU291cmNlKCBtZWRpYVN0cmVhbSApIHtcblxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ21lZGlhU3RyZWFtTm9kZSc7XG5cdFx0dGhpcy5zb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UoIG1lZGlhU3RyZWFtICk7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0QnVmZmVyKCBhdWRpb0J1ZmZlciApIHtcblxuXHRcdHRoaXMuYnVmZmVyID0gYXVkaW9CdWZmZXI7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2J1ZmZlcic7XG5cblx0XHRpZiAoIHRoaXMuYXV0b3BsYXkgKSB0aGlzLnBsYXkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRwbGF5KCBkZWxheSA9IDAgKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogQXVkaW8gaXMgYWxyZWFkeSBwbGF5aW5nLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLl9zdGFydGVkQXQgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyBkZWxheTtcblxuXHRcdGNvbnN0IHNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblx0XHRzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdFx0c291cmNlLmxvb3AgPSB0aGlzLmxvb3A7XG5cdFx0c291cmNlLmxvb3BTdGFydCA9IHRoaXMubG9vcFN0YXJ0O1xuXHRcdHNvdXJjZS5sb29wRW5kID0gdGhpcy5sb29wRW5kO1xuXHRcdHNvdXJjZS5vbmVuZGVkID0gdGhpcy5vbkVuZGVkLmJpbmQoIHRoaXMgKTtcblx0XHRzb3VyY2Uuc3RhcnQoIHRoaXMuX3N0YXJ0ZWRBdCwgdGhpcy5fcHJvZ3Jlc3MgKyB0aGlzLm9mZnNldCwgdGhpcy5kdXJhdGlvbiApO1xuXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHR0aGlzLnNldERldHVuZSggdGhpcy5kZXR1bmUgKTtcblx0XHR0aGlzLnNldFBsYXliYWNrUmF0ZSggdGhpcy5wbGF5YmFja1JhdGUgKTtcblxuXHRcdHJldHVybiB0aGlzLmNvbm5lY3QoKTtcblxuXHR9XG5cblx0cGF1c2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Ly8gdXBkYXRlIGN1cnJlbnQgcHJvZ3Jlc3NcblxuXHRcdFx0dGhpcy5fcHJvZ3Jlc3MgKz0gTWF0aC5tYXgoIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSAtIHRoaXMuX3N0YXJ0ZWRBdCwgMCApICogdGhpcy5wbGF5YmFja1JhdGU7XG5cblx0XHRcdGlmICggdGhpcy5sb29wID09PSB0cnVlICkge1xuXG5cdFx0XHRcdC8vIGVuc3VyZSBfcHJvZ3Jlc3MgZG9lcyBub3QgZXhjZWVkIGR1cmF0aW9uIHdpdGggbG9vcGVkIGF1ZGlvc1xuXG5cdFx0XHRcdHRoaXMuX3Byb2dyZXNzID0gdGhpcy5fcHJvZ3Jlc3MgJSAoIHRoaXMuZHVyYXRpb24gfHwgdGhpcy5idWZmZXIuZHVyYXRpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNvdXJjZS5zdG9wKCk7XG5cdFx0XHR0aGlzLnNvdXJjZS5vbmVuZGVkID0gbnVsbDtcblxuXHRcdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdG9wKCkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3Byb2dyZXNzID0gMDtcblxuXHRcdHRoaXMuc291cmNlLnN0b3AoKTtcblx0XHR0aGlzLnNvdXJjZS5vbmVuZGVkID0gbnVsbDtcblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbm5lY3QoKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5jb25uZWN0KCB0aGlzLmZpbHRlcnNbIDAgXSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmZpbHRlcnNbIGkgLSAxIF0uY29ubmVjdCggdGhpcy5maWx0ZXJzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmZpbHRlcnNbIHRoaXMuZmlsdGVycy5sZW5ndGggLSAxIF0uY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fY29ubmVjdGVkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXNjb25uZWN0KCkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuZGlzY29ubmVjdCggdGhpcy5maWx0ZXJzWyAwIF0gKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxLCBsID0gdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5maWx0ZXJzWyBpIC0gMSBdLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5maWx0ZXJzWyB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMSBdLmRpc2Nvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmRpc2Nvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldEZpbHRlcnMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJzO1xuXG5cdH1cblxuXHRzZXRGaWx0ZXJzKCB2YWx1ZSApIHtcblxuXHRcdGlmICggISB2YWx1ZSApIHZhbHVlID0gW107XG5cblx0XHRpZiAoIHRoaXMuX2Nvbm5lY3RlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5kaXNjb25uZWN0KCk7XG5cdFx0XHR0aGlzLmZpbHRlcnMgPSB2YWx1ZS5zbGljZSgpO1xuXHRcdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmZpbHRlcnMgPSB2YWx1ZS5zbGljZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldERldHVuZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmRldHVuZSA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLnNvdXJjZS5kZXR1bmUgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gb25seSBzZXQgZGV0dW5lIHdoZW4gYXZhaWxhYmxlXG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kZXR1bmUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLmRldHVuZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0RGV0dW5lKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGV0dW5lO1xuXG5cdH1cblxuXHRnZXRGaWx0ZXIoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRGaWx0ZXJzKClbIDAgXTtcblxuXHR9XG5cblx0c2V0RmlsdGVyKCBmaWx0ZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGaWx0ZXJzKCBmaWx0ZXIgPyBbIGZpbHRlciBdIDogW10gKTtcblxuXHR9XG5cblx0c2V0UGxheWJhY2tSYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLnBsYXliYWNrUmF0ZSA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnNldFRhcmdldEF0VGltZSggdGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFBsYXliYWNrUmF0ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBsYXliYWNrUmF0ZTtcblxuXHR9XG5cblx0b25FbmRlZCgpIHtcblxuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0fVxuXG5cdGdldExvb3AoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubG9vcDtcblxuXHR9XG5cblx0c2V0TG9vcCggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5sb29wID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5sb29wID0gdGhpcy5sb29wO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldExvb3BTdGFydCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmxvb3BTdGFydCA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldExvb3BFbmQoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5sb29wRW5kID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Vm9sdW1lKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xuXG5cdH1cblxuXHRzZXRWb2x1bWUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuY29uc3QgX3Bvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3F1YXRlcm5pb24gPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5jb25zdCBfc2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfb3JpZW50YXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIFBvc2l0aW9uYWxBdWRpbyBleHRlbmRzIEF1ZGlvIHtcblxuXHRjb25zdHJ1Y3RvciggbGlzdGVuZXIgKSB7XG5cblx0XHRzdXBlciggbGlzdGVuZXIgKTtcblxuXHRcdHRoaXMucGFubmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVBhbm5lcigpO1xuXHRcdHRoaXMucGFubmVyLnBhbm5pbmdNb2RlbCA9ICdIUlRGJztcblx0XHR0aGlzLnBhbm5lci5jb25uZWN0KCB0aGlzLmdhaW4gKTtcblxuXHR9XG5cblx0ZGlzY29ubmVjdCgpIHtcblxuXHRcdHN1cGVyLmRpc2Nvbm5lY3QoKTtcblxuXHRcdHRoaXMucGFubmVyLmRpc2Nvbm5lY3QoIHRoaXMuZ2FpbiApO1xuXG5cdH1cblxuXHRnZXRPdXRwdXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXI7XG5cblx0fVxuXG5cdGdldFJlZkRpc3RhbmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLnJlZkRpc3RhbmNlO1xuXG5cdH1cblxuXHRzZXRSZWZEaXN0YW5jZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yZWZEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFJvbGxvZmZGYWN0b3IoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucm9sbG9mZkZhY3RvcjtcblxuXHR9XG5cblx0c2V0Um9sbG9mZkZhY3RvciggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0RGlzdGFuY2VNb2RlbCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsO1xuXG5cdH1cblxuXHRzZXREaXN0YW5jZU1vZGVsKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWwgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRNYXhEaXN0YW5jZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5tYXhEaXN0YW5jZTtcblxuXHR9XG5cblx0c2V0TWF4RGlzdGFuY2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIubWF4RGlzdGFuY2UgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXREaXJlY3Rpb25hbENvbmUoIGNvbmVJbm5lckFuZ2xlLCBjb25lT3V0ZXJBbmdsZSwgY29uZU91dGVyR2FpbiApIHtcblxuXHRcdHRoaXMucGFubmVyLmNvbmVJbm5lckFuZ2xlID0gY29uZUlubmVyQW5nbGU7XG5cdFx0dGhpcy5wYW5uZXIuY29uZU91dGVyQW5nbGUgPSBjb25lT3V0ZXJBbmdsZTtcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJHYWluID0gY29uZU91dGVyR2FpbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IHRydWUgJiYgdGhpcy5pc1BsYXlpbmcgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiwgX3F1YXRlcm5pb24sIF9zY2FsZSApO1xuXG5cdFx0X29yaWVudGF0aW9uLnNldCggMCwgMCwgMSApLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24gKTtcblxuXHRcdGNvbnN0IHBhbm5lciA9IHRoaXMucGFubmVyO1xuXG5cdFx0aWYgKCBwYW5uZXIucG9zaXRpb25YICkge1xuXG5cdFx0XHQvLyBjb2RlIHBhdGggZm9yIENocm9tZSBhbmQgRmlyZWZveCAoc2VlICMxNDM5MylcblxuXHRcdFx0Y29uc3QgZW5kVGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIHRoaXMubGlzdGVuZXIudGltZURlbHRhO1xuXG5cdFx0XHRwYW5uZXIucG9zaXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0cGFubmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdHBhbm5lci5wb3NpdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbi56LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIub3JpZW50YXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdHBhbm5lci5vcmllbnRhdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbi56LCBlbmRUaW1lICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwYW5uZXIuc2V0UG9zaXRpb24oIF9wb3NpdGlvbi54LCBfcG9zaXRpb24ueSwgX3Bvc2l0aW9uLnogKTtcblx0XHRcdHBhbm5lci5zZXRPcmllbnRhdGlvbiggX29yaWVudGF0aW9uLngsIF9vcmllbnRhdGlvbi55LCBfb3JpZW50YXRpb24ueiApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jbGFzcyBBdWRpb0FuYWx5c2VyIHtcblxuXHRjb25zdHJ1Y3RvciggYXVkaW8sIGZmdFNpemUgPSAyMDQ4ICkge1xuXG5cdFx0dGhpcy5hbmFseXNlciA9IGF1ZGlvLmNvbnRleHQuY3JlYXRlQW5hbHlzZXIoKTtcblx0XHR0aGlzLmFuYWx5c2VyLmZmdFNpemUgPSBmZnRTaXplO1xuXG5cdFx0dGhpcy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoIHRoaXMuYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQgKTtcblxuXHRcdGF1ZGlvLmdldE91dHB1dCgpLmNvbm5lY3QoIHRoaXMuYW5hbHlzZXIgKTtcblxuXHR9XG5cblxuXHRnZXRGcmVxdWVuY3lEYXRhKCkge1xuXG5cdFx0dGhpcy5hbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YSggdGhpcy5kYXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhO1xuXG5cdH1cblxuXHRnZXRBdmVyYWdlRnJlcXVlbmN5KCkge1xuXG5cdFx0bGV0IHZhbHVlID0gMDtcblx0XHRjb25zdCBkYXRhID0gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsdWUgKz0gZGF0YVsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlIC8gZGF0YS5sZW5ndGg7XG5cblx0fVxuXG59XG5cbmNsYXNzIFByb3BlcnR5TWl4ZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBiaW5kaW5nLCB0eXBlTmFtZSwgdmFsdWVTaXplICkge1xuXG5cdFx0dGhpcy5iaW5kaW5nID0gYmluZGluZztcblx0XHR0aGlzLnZhbHVlU2l6ZSA9IHZhbHVlU2l6ZTtcblxuXHRcdGxldCBtaXhGdW5jdGlvbixcblx0XHRcdG1peEZ1bmN0aW9uQWRkaXRpdmUsXG5cdFx0XHRzZXRJZGVudGl0eTtcblxuXHRcdC8vIGJ1ZmZlciBsYXlvdXQ6IFsgaW5jb21pbmcgfCBhY2N1MCB8IGFjY3UxIHwgb3JpZyB8IGFkZEFjY3UgfCAob3B0aW9uYWwgd29yaykgXVxuXHRcdC8vXG5cdFx0Ly8gaW50ZXJwb2xhdG9ycyBjYW4gdXNlIC5idWZmZXIgYXMgdGhlaXIgLnJlc3VsdFxuXHRcdC8vIHRoZSBkYXRhIHRoZW4gZ29lcyB0byAnaW5jb21pbmcnXG5cdFx0Ly9cblx0XHQvLyAnYWNjdTAnIGFuZCAnYWNjdTEnIGFyZSB1c2VkIGZyYW1lLWludGVybGVhdmVkIGZvclxuXHRcdC8vIHRoZSBjdW11bGF0aXZlIHJlc3VsdCBhbmQgYXJlIGNvbXBhcmVkIHRvIGRldGVjdFxuXHRcdC8vIGNoYW5nZXNcblx0XHQvL1xuXHRcdC8vICdvcmlnJyBzdG9yZXMgdGhlIG9yaWdpbmFsIHN0YXRlIG9mIHRoZSBwcm9wZXJ0eVxuXHRcdC8vXG5cdFx0Ly8gJ2FkZCcgaXMgdXNlZCBmb3IgYWRkaXRpdmUgY3VtdWxhdGl2ZSByZXN1bHRzXG5cdFx0Ly9cblx0XHQvLyAnd29yaycgaXMgb3B0aW9uYWwgYW5kIGlzIG9ubHkgcHJlc2VudCBmb3IgcXVhdGVybmlvbiB0eXBlcy4gSXQgaXMgdXNlZFxuXHRcdC8vIHRvIHN0b3JlIGludGVybWVkaWF0ZSBxdWF0ZXJuaW9uIG11bHRpcGxpY2F0aW9uIHJlc3VsdHNcblxuXHRcdHN3aXRjaCAoIHR5cGVOYW1lICkge1xuXG5cdFx0XHRjYXNlICdxdWF0ZXJuaW9uJzpcblx0XHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9zbGVycDtcblx0XHRcdFx0bWl4RnVuY3Rpb25BZGRpdGl2ZSA9IHRoaXMuX3NsZXJwQWRkaXRpdmU7XG5cdFx0XHRcdHNldElkZW50aXR5ID0gdGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eVF1YXRlcm5pb247XG5cblx0XHRcdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQ2NEFycmF5KCB2YWx1ZVNpemUgKiA2ICk7XG5cdFx0XHRcdHRoaXMuX3dvcmtJbmRleCA9IDU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdzdHJpbmcnOlxuXHRcdFx0Y2FzZSAnYm9vbCc6XG5cdFx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fc2VsZWN0O1xuXG5cdFx0XHRcdC8vIFVzZSB0aGUgcmVndWxhciBtaXggZnVuY3Rpb24gYW5kIGZvciBhZGRpdGl2ZSBvbiB0aGVzZSB0eXBlcyxcblx0XHRcdFx0Ly8gYWRkaXRpdmUgaXMgbm90IHJlbGV2YW50IGZvciBub24tbnVtZXJpYyB0eXBlc1xuXHRcdFx0XHRtaXhGdW5jdGlvbkFkZGl0aXZlID0gdGhpcy5fc2VsZWN0O1xuXG5cdFx0XHRcdHNldElkZW50aXR5ID0gdGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eU90aGVyO1xuXG5cdFx0XHRcdHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KCB2YWx1ZVNpemUgKiA1ICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX2xlcnA7XG5cdFx0XHRcdG1peEZ1bmN0aW9uQWRkaXRpdmUgPSB0aGlzLl9sZXJwQWRkaXRpdmU7XG5cdFx0XHRcdHNldElkZW50aXR5ID0gdGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWM7XG5cblx0XHRcdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQ2NEFycmF5KCB2YWx1ZVNpemUgKiA1ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24gPSBtaXhGdW5jdGlvbjtcblx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb25BZGRpdGl2ZSA9IG1peEZ1bmN0aW9uQWRkaXRpdmU7XG5cdFx0dGhpcy5fc2V0SWRlbnRpdHkgPSBzZXRJZGVudGl0eTtcblx0XHR0aGlzLl9vcmlnSW5kZXggPSAzO1xuXHRcdHRoaXMuX2FkZEluZGV4ID0gNDtcblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgPSAwO1xuXG5cdFx0dGhpcy51c2VDb3VudCA9IDA7XG5cdFx0dGhpcy5yZWZlcmVuY2VDb3VudCA9IDA7XG5cblx0fVxuXG5cdC8vIGFjY3VtdWxhdGUgZGF0YSBpbiB0aGUgJ2luY29taW5nJyByZWdpb24gaW50byAnYWNjdTxpPidcblx0YWNjdW11bGF0ZSggYWNjdUluZGV4LCB3ZWlnaHQgKSB7XG5cblx0XHQvLyBub3RlOiBoYXBwaWx5IGFjY3VtdWxhdGluZyBub3RoaW5nIHdoZW4gd2VpZ2h0ID0gMCwgdGhlIGNhbGxlciBrbm93c1xuXHRcdC8vIHRoZSB3ZWlnaHQgYW5kIHNob3VsZG4ndCBoYXZlIG1hZGUgdGhlIGNhbGwgaW4gdGhlIGZpcnN0IHBsYWNlXG5cblx0XHRjb25zdCBidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0b2Zmc2V0ID0gYWNjdUluZGV4ICogc3RyaWRlICsgc3RyaWRlO1xuXG5cdFx0bGV0IGN1cnJlbnRXZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQ7XG5cblx0XHRpZiAoIGN1cnJlbnRXZWlnaHQgPT09IDAgKSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGluY29taW5nICogd2VpZ2h0XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgaSBdID0gYnVmZmVyWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudFdlaWdodCA9IHdlaWdodDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGFjY3VOICsgaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdFx0Y3VycmVudFdlaWdodCArPSB3ZWlnaHQ7XG5cdFx0XHRjb25zdCBtaXggPSB3ZWlnaHQgLyBjdXJyZW50V2VpZ2h0O1xuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKCBidWZmZXIsIG9mZnNldCwgMCwgbWl4LCBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IGN1cnJlbnRXZWlnaHQ7XG5cblx0fVxuXG5cdC8vIGFjY3VtdWxhdGUgZGF0YSBpbiB0aGUgJ2luY29taW5nJyByZWdpb24gaW50byAnYWRkJ1xuXHRhY2N1bXVsYXRlQWRkaXRpdmUoIHdlaWdodCApIHtcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRvZmZzZXQgPSBzdHJpZGUgKiB0aGlzLl9hZGRJbmRleDtcblxuXHRcdGlmICggdGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgPT09IDAgKSB7XG5cblx0XHRcdC8vIGFkZCA9IGlkZW50aXR5XG5cblx0XHRcdHRoaXMuX3NldElkZW50aXR5KCk7XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgOj0gYWRkICsgaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlKCBidWZmZXIsIG9mZnNldCwgMCwgd2VpZ2h0LCBzdHJpZGUgKTtcblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSArPSB3ZWlnaHQ7XG5cblx0fVxuXG5cdC8vIGFwcGx5IHRoZSBzdGF0ZSBvZiAnYWNjdTxpPicgdG8gdGhlIGJpbmRpbmcgd2hlbiBhY2N1cyBkaWZmZXJcblx0YXBwbHkoIGFjY3VJbmRleCApIHtcblxuXHRcdGNvbnN0IHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0YnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGUsXG5cblx0XHRcdHdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodCxcblx0XHRcdHdlaWdodEFkZGl0aXZlID0gdGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUsXG5cblx0XHRcdGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlID0gMDtcblxuXHRcdGlmICggd2VpZ2h0IDwgMSApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBvcmlnaW5hbCAqICggMSAtIGN1bXVsYXRpdmVXZWlnaHQgKVxuXG5cdFx0XHRjb25zdCBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogdGhpcy5fb3JpZ0luZGV4O1xuXG5cdFx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24oXG5cdFx0XHRcdGJ1ZmZlciwgb2Zmc2V0LCBvcmlnaW5hbFZhbHVlT2Zmc2V0LCAxIC0gd2VpZ2h0LCBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggd2VpZ2h0QWRkaXRpdmUgPiAwICkge1xuXG5cdFx0XHQvLyBhY2N1TiA6PSBhY2N1TiArIGFkZGl0aXZlIGFjY3VOXG5cblx0XHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlKCBidWZmZXIsIG9mZnNldCwgdGhpcy5fYWRkSW5kZXggKiBzdHJpZGUsIDEsIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSBzdHJpZGUsIGUgPSBzdHJpZGUgKyBzdHJpZGU7IGkgIT09IGU7ICsrIGkgKSB7XG5cblx0XHRcdGlmICggYnVmZmVyWyBpIF0gIT09IGJ1ZmZlclsgaSArIHN0cmlkZSBdICkge1xuXG5cdFx0XHRcdC8vIHZhbHVlIGhhcyBjaGFuZ2VkIC0+IHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0XHRcdGJpbmRpbmcuc2V0VmFsdWUoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIHJlbWVtYmVyIHRoZSBzdGF0ZSBvZiB0aGUgYm91bmQgcHJvcGVydHkgYW5kIGNvcHkgaXQgdG8gYm90aCBhY2N1c1xuXHRzYXZlT3JpZ2luYWxTdGF0ZSgpIHtcblxuXHRcdGNvbnN0IGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XG5cblx0XHRjb25zdCBidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogdGhpcy5fb3JpZ0luZGV4O1xuXG5cdFx0YmluZGluZy5nZXRWYWx1ZSggYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7XG5cblx0XHQvLyBhY2N1WzAuLjFdIDo9IG9yaWcgLS0gaW5pdGlhbGx5IGRldGVjdCBjaGFuZ2VzIGFnYWluc3QgdGhlIG9yaWdpbmFsXG5cdFx0Zm9yICggbGV0IGkgPSBzdHJpZGUsIGUgPSBvcmlnaW5hbFZhbHVlT2Zmc2V0OyBpICE9PSBlOyArKyBpICkge1xuXG5cdFx0XHRidWZmZXJbIGkgXSA9IGJ1ZmZlclsgb3JpZ2luYWxWYWx1ZU9mZnNldCArICggaSAlIHN0cmlkZSApIF07XG5cblx0XHR9XG5cblx0XHQvLyBBZGQgdG8gaWRlbnRpdHkgZm9yIGFkZGl0aXZlXG5cdFx0dGhpcy5fc2V0SWRlbnRpdHkoKTtcblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgPSAwO1xuXG5cdH1cblxuXHQvLyBhcHBseSB0aGUgc3RhdGUgcHJldmlvdXNseSB0YWtlbiB2aWEgJ3NhdmVPcmlnaW5hbFN0YXRlJyB0byB0aGUgYmluZGluZ1xuXHRyZXN0b3JlT3JpZ2luYWxTdGF0ZSgpIHtcblxuXHRcdGNvbnN0IG9yaWdpbmFsVmFsdWVPZmZzZXQgPSB0aGlzLnZhbHVlU2l6ZSAqIDM7XG5cdFx0dGhpcy5iaW5kaW5nLnNldFZhbHVlKCB0aGlzLmJ1ZmZlciwgb3JpZ2luYWxWYWx1ZU9mZnNldCApO1xuXG5cdH1cblxuXHRfc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWMoKSB7XG5cblx0XHRjb25zdCBzdGFydEluZGV4ID0gdGhpcy5fYWRkSW5kZXggKiB0aGlzLnZhbHVlU2l6ZTtcblx0XHRjb25zdCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyB0aGlzLnZhbHVlU2l6ZTtcblxuXHRcdGZvciAoIGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmJ1ZmZlclsgaSBdID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0X3NldEFkZGl0aXZlSWRlbnRpdHlRdWF0ZXJuaW9uKCkge1xuXG5cdFx0dGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWMoKTtcblx0XHR0aGlzLmJ1ZmZlclsgdGhpcy5fYWRkSW5kZXggKiB0aGlzLnZhbHVlU2l6ZSArIDMgXSA9IDE7XG5cblx0fVxuXG5cdF9zZXRBZGRpdGl2ZUlkZW50aXR5T3RoZXIoKSB7XG5cblx0XHRjb25zdCBzdGFydEluZGV4ID0gdGhpcy5fb3JpZ0luZGV4ICogdGhpcy52YWx1ZVNpemU7XG5cdFx0Y29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLl9hZGRJbmRleCAqIHRoaXMudmFsdWVTaXplO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZVNpemU7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYnVmZmVyWyB0YXJnZXRJbmRleCArIGkgXSA9IHRoaXMuYnVmZmVyWyBzdGFydEluZGV4ICsgaSBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXG5cdC8vIG1peCBmdW5jdGlvbnNcblxuXHRfc2VsZWN0KCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRpZiAoIHQgPj0gMC41ICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0XHRidWZmZXJbIGRzdE9mZnNldCArIGkgXSA9IGJ1ZmZlclsgc3JjT2Zmc2V0ICsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdF9zbGVycCggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCApIHtcblxuXHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgc3JjT2Zmc2V0LCB0ICk7XG5cblx0fVxuXG5cdF9zbGVycEFkZGl0aXZlKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRjb25zdCB3b3JrT2Zmc2V0ID0gdGhpcy5fd29ya0luZGV4ICogc3RyaWRlO1xuXG5cdFx0Ly8gU3RvcmUgcmVzdWx0IGluIGludGVybWVkaWF0ZSBidWZmZXIgb2Zmc2V0XG5cdFx0UXVhdGVybmlvbi5tdWx0aXBseVF1YXRlcm5pb25zRmxhdCggYnVmZmVyLCB3b3JrT2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBzcmNPZmZzZXQgKTtcblxuXHRcdC8vIFNsZXJwIHRvIHRoZSBpbnRlcm1lZGlhdGUgcmVzdWx0XG5cdFx0UXVhdGVybmlvbi5zbGVycEZsYXQoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCB3b3JrT2Zmc2V0LCB0ICk7XG5cblx0fVxuXG5cdF9sZXJwKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRjb25zdCBzID0gMSAtIHQ7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgaiA9IGRzdE9mZnNldCArIGk7XG5cblx0XHRcdGJ1ZmZlclsgaiBdID0gYnVmZmVyWyBqIF0gKiBzICsgYnVmZmVyWyBzcmNPZmZzZXQgKyBpIF0gKiB0O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfbGVycEFkZGl0aXZlKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgaiA9IGRzdE9mZnNldCArIGk7XG5cblx0XHRcdGJ1ZmZlclsgaiBdID0gYnVmZmVyWyBqIF0gKyBidWZmZXJbIHNyY09mZnNldCArIGkgXSAqIHQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIENoYXJhY3RlcnMgW10uOi8gYXJlIHJlc2VydmVkIGZvciB0cmFjayBiaW5kaW5nIHN5bnRheC5cbmNvbnN0IF9SRVNFUlZFRF9DSEFSU19SRSA9ICdcXFxcW1xcXFxdXFxcXC46XFxcXC8nO1xuY29uc3QgX3Jlc2VydmVkUmUgPSBuZXcgUmVnRXhwKCAnWycgKyBfUkVTRVJWRURfQ0hBUlNfUkUgKyAnXScsICdnJyApO1xuXG4vLyBBdHRlbXB0cyB0byBhbGxvdyBub2RlIG5hbWVzIGZyb20gYW55IGxhbmd1YWdlLiBFUzUncyBgXFx3YCByZWdleHAgbWF0Y2hlc1xuLy8gb25seSBsYXRpbiBjaGFyYWN0ZXJzLCBhbmQgdGhlIHVuaWNvZGUgXFxwe0x9IGlzIG5vdCB5ZXQgc3VwcG9ydGVkLiBTb1xuLy8gaW5zdGVhZCwgd2UgZXhjbHVkZSByZXNlcnZlZCBjaGFyYWN0ZXJzIGFuZCBtYXRjaCBldmVyeXRoaW5nIGVsc2UuXG5jb25zdCBfd29yZENoYXIgPSAnW14nICsgX1JFU0VSVkVEX0NIQVJTX1JFICsgJ10nO1xuY29uc3QgX3dvcmRDaGFyT3JEb3QgPSAnW14nICsgX1JFU0VSVkVEX0NIQVJTX1JFLnJlcGxhY2UoICdcXFxcLicsICcnICkgKyAnXSc7XG5cbi8vIFBhcmVudCBkaXJlY3RvcmllcywgZGVsaW1pdGVkIGJ5ICcvJyBvciAnOicuIEN1cnJlbnRseSB1bnVzZWQsIGJ1dCBtdXN0XG4vLyBiZSBtYXRjaGVkIHRvIHBhcnNlIHRoZSByZXN0IG9mIHRoZSB0cmFjayBuYW1lLlxuY29uc3QgX2RpcmVjdG9yeVJlID0gLygoPzpXQytbXFwvOl0pKikvLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTtcblxuLy8gVGFyZ2V0IG5vZGUuIE1heSBjb250YWluIHdvcmQgY2hhcmFjdGVycyAoYS16QS1aMC05XykgYW5kICcuJyBvciAnLScuXG5jb25zdCBfbm9kZVJlID0gLyhXQ09EKyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDT0QnLCBfd29yZENoYXJPckRvdCApO1xuXG4vLyBPYmplY3Qgb24gdGFyZ2V0IG5vZGUsIGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkXG4vLyBjaGFyYWN0ZXJzLiBBY2Nlc3NvciBtYXkgY29udGFpbiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBjbG9zaW5nIGJyYWNrZXQuXG5jb25zdCBfb2JqZWN0UmUgPSAvKD86XFwuKFdDKykoPzpcXFsoLispXFxdKT8pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApO1xuXG4vLyBQcm9wZXJ0eSBhbmQgYWNjZXNzb3IuIE1heSBub3QgY29udGFpbiByZXNlcnZlZCBjaGFyYWN0ZXJzLiBBY2Nlc3NvciBtYXlcbi8vIGNvbnRhaW4gYW55IG5vbi1icmFja2V0IGNoYXJhY3RlcnMuXG5jb25zdCBfcHJvcGVydHlSZSA9IC9cXC4oV0MrKSg/OlxcWyguKylcXF0pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApO1xuXG5jb25zdCBfdHJhY2tSZSA9IG5ldyBSZWdFeHAoICcnXG5cdCsgJ14nXG5cdCsgX2RpcmVjdG9yeVJlXG5cdCsgX25vZGVSZVxuXHQrIF9vYmplY3RSZVxuXHQrIF9wcm9wZXJ0eVJlXG5cdCsgJyQnXG4pO1xuXG5jb25zdCBfc3VwcG9ydGVkT2JqZWN0TmFtZXMgPSBbICdtYXRlcmlhbCcsICdtYXRlcmlhbHMnLCAnYm9uZXMnIF07XG5cbmNsYXNzIENvbXBvc2l0ZSB7XG5cblx0Y29uc3RydWN0b3IoIHRhcmdldEdyb3VwLCBwYXRoLCBvcHRpb25hbFBhcnNlZFBhdGggKSB7XG5cblx0XHRjb25zdCBwYXJzZWRQYXRoID0gb3B0aW9uYWxQYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApO1xuXG5cdFx0dGhpcy5fdGFyZ2V0R3JvdXAgPSB0YXJnZXRHcm91cDtcblx0XHR0aGlzLl9iaW5kaW5ncyA9IHRhcmdldEdyb3VwLnN1YnNjcmliZV8oIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHR9XG5cblx0Z2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTsgLy8gYmluZCBhbGwgYmluZGluZ1xuXG5cdFx0Y29uc3QgZmlyc3RWYWxpZEluZGV4ID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0YmluZGluZyA9IHRoaXMuX2JpbmRpbmdzWyBmaXJzdFZhbGlkSW5kZXggXTtcblxuXHRcdC8vIGFuZCBvbmx5IGNhbGwgLmdldFZhbHVlIG9uIHRoZSBmaXJzdFxuXHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkgYmluZGluZy5nZXRWYWx1ZSggYXJyYXksIG9mZnNldCApO1xuXG5cdH1cblxuXHRzZXRWYWx1ZSggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRmb3IgKCBsZXQgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS5zZXRWYWx1ZSggYXJyYXksIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRiaW5kKCkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIGxldCBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLmJpbmQoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dW5iaW5kKCkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIGxldCBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLnVuYmluZCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vLyBOb3RlOiBUaGlzIGNsYXNzIHVzZXMgYSBTdGF0ZSBwYXR0ZXJuIG9uIGEgcGVyLW1ldGhvZCBiYXNpczpcbi8vICdiaW5kJyBzZXRzICd0aGlzLmdldFZhbHVlJyAvICdzZXRWYWx1ZScgYW5kIHNoYWRvd3MgdGhlXG4vLyBwcm90b3R5cGUgdmVyc2lvbiBvZiB0aGVzZSBtZXRob2RzIHdpdGggb25lIHRoYXQgcmVwcmVzZW50c1xuLy8gdGhlIGJvdW5kIHN0YXRlLiBXaGVuIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQsIHRoZSBtZXRob2RzXG4vLyBiZWNvbWUgbm8tb3BzLlxuY2xhc3MgUHJvcGVydHlCaW5kaW5nIHtcblxuXHRjb25zdHJ1Y3Rvciggcm9vdE5vZGUsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHR0aGlzLnBhdGggPSBwYXRoO1xuXHRcdHRoaXMucGFyc2VkUGF0aCA9IHBhcnNlZFBhdGggfHwgUHJvcGVydHlCaW5kaW5nLnBhcnNlVHJhY2tOYW1lKCBwYXRoICk7XG5cblx0XHR0aGlzLm5vZGUgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHJvb3ROb2RlLCB0aGlzLnBhcnNlZFBhdGgubm9kZU5hbWUgKSB8fCByb290Tm9kZTtcblxuXHRcdHRoaXMucm9vdE5vZGUgPSByb290Tm9kZTtcblxuXHRcdC8vIGluaXRpYWwgc3RhdGUgb2YgdGhlc2UgbWV0aG9kcyB0aGF0IGNhbGxzICdiaW5kJ1xuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmJvdW5kO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmJvdW5kO1xuXG5cdH1cblxuXG5cdHN0YXRpYyBjcmVhdGUoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHRpZiAoICEgKCByb290ICYmIHJvb3QuaXNBbmltYXRpb25PYmplY3RHcm91cCApICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZyggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyBzcGFjZXMgd2l0aCB1bmRlcnNjb3JlcyBhbmQgcmVtb3ZlcyB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzIGZyb21cblx0ICogbm9kZSBuYW1lcywgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBwYXJzZVRyYWNrTmFtZSgpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOb2RlIG5hbWUgdG8gYmUgc2FuaXRpemVkLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRzdGF0aWMgc2FuaXRpemVOb2RlTmFtZSggbmFtZSApIHtcblxuXHRcdHJldHVybiBuYW1lLnJlcGxhY2UoIC9cXHMvZywgJ18nICkucmVwbGFjZSggX3Jlc2VydmVkUmUsICcnICk7XG5cblx0fVxuXG5cdHN0YXRpYyBwYXJzZVRyYWNrTmFtZSggdHJhY2tOYW1lICkge1xuXG5cdFx0Y29uc3QgbWF0Y2hlcyA9IF90cmFja1JlLmV4ZWMoIHRyYWNrTmFtZSApO1xuXG5cdFx0aWYgKCBtYXRjaGVzID09PSBudWxsICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdQcm9wZXJ0eUJpbmRpbmc6IENhbm5vdCBwYXJzZSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHJlc3VsdHMgPSB7XG5cdFx0XHQvLyBkaXJlY3RvcnlOYW1lOiBtYXRjaGVzWyAxIF0sIC8vICh0c2NodykgY3VycmVudGx5IHVudXNlZFxuXHRcdFx0bm9kZU5hbWU6IG1hdGNoZXNbIDIgXSxcblx0XHRcdG9iamVjdE5hbWU6IG1hdGNoZXNbIDMgXSxcblx0XHRcdG9iamVjdEluZGV4OiBtYXRjaGVzWyA0IF0sXG5cdFx0XHRwcm9wZXJ0eU5hbWU6IG1hdGNoZXNbIDUgXSwgLy8gcmVxdWlyZWRcblx0XHRcdHByb3BlcnR5SW5kZXg6IG1hdGNoZXNbIDYgXVxuXHRcdH07XG5cblx0XHRjb25zdCBsYXN0RG90ID0gcmVzdWx0cy5ub2RlTmFtZSAmJiByZXN1bHRzLm5vZGVOYW1lLmxhc3RJbmRleE9mKCAnLicgKTtcblxuXHRcdGlmICggbGFzdERvdCAhPT0gdW5kZWZpbmVkICYmIGxhc3REb3QgIT09IC0gMSApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0TmFtZSA9IHJlc3VsdHMubm9kZU5hbWUuc3Vic3RyaW5nKCBsYXN0RG90ICsgMSApO1xuXG5cdFx0XHQvLyBPYmplY3QgbmFtZXMgbXVzdCBiZSBjaGVja2VkIGFnYWluc3QgYW4gYWxsb3dsaXN0LiBPdGhlcndpc2UsIHRoZXJlXG5cdFx0XHQvLyBpcyBubyB3YXkgdG8gcGFyc2UgJ2Zvby5iYXIuYmF6JzogJ2JheicgbXVzdCBiZSBhIHByb3BlcnR5LCBidXRcblx0XHRcdC8vICdiYXInIGNvdWxkIGJlIHRoZSBvYmplY3ROYW1lLCBvciBwYXJ0IG9mIGEgbm9kZU5hbWUgKHdoaWNoIGNhblxuXHRcdFx0Ly8gaW5jbHVkZSAnLicgY2hhcmFjdGVycykuXG5cdFx0XHRpZiAoIF9zdXBwb3J0ZWRPYmplY3ROYW1lcy5pbmRleE9mKCBvYmplY3ROYW1lICkgIT09IC0gMSApIHtcblxuXHRcdFx0XHRyZXN1bHRzLm5vZGVOYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIDAsIGxhc3REb3QgKTtcblx0XHRcdFx0cmVzdWx0cy5vYmplY3ROYW1lID0gb2JqZWN0TmFtZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCByZXN1bHRzLnByb3BlcnR5TmFtZSA9PT0gbnVsbCB8fCByZXN1bHRzLnByb3BlcnR5TmFtZS5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Byb3BlcnR5QmluZGluZzogY2FuIG5vdCBwYXJzZSBwcm9wZXJ0eU5hbWUgZnJvbSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHRzO1xuXG5cdH1cblxuXHRzdGF0aWMgZmluZE5vZGUoIHJvb3QsIG5vZGVOYW1lICkge1xuXG5cdFx0aWYgKCBub2RlTmFtZSA9PT0gdW5kZWZpbmVkIHx8IG5vZGVOYW1lID09PSAnJyB8fCBub2RlTmFtZSA9PT0gJy4nIHx8IG5vZGVOYW1lID09PSAtIDEgfHwgbm9kZU5hbWUgPT09IHJvb3QubmFtZSB8fCBub2RlTmFtZSA9PT0gcm9vdC51dWlkICkge1xuXG5cdFx0XHRyZXR1cm4gcm9vdDtcblxuXHRcdH1cblxuXHRcdC8vIHNlYXJjaCBpbnRvIHNrZWxldG9uIGJvbmVzLlxuXHRcdGlmICggcm9vdC5za2VsZXRvbiApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IHJvb3Quc2tlbGV0b24uZ2V0Qm9uZUJ5TmFtZSggbm9kZU5hbWUgKTtcblxuXHRcdFx0aWYgKCBib25lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGJvbmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHNlYXJjaCBpbnRvIG5vZGUgc3VidHJlZS5cblx0XHRpZiAoIHJvb3QuY2hpbGRyZW4gKSB7XG5cblx0XHRcdGNvbnN0IHNlYXJjaE5vZGVTdWJ0cmVlID0gZnVuY3Rpb24gKCBjaGlsZHJlbiApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBjaGlsZE5vZGUgPSBjaGlsZHJlblsgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCBjaGlsZE5vZGUubmFtZSA9PT0gbm9kZU5hbWUgfHwgY2hpbGROb2RlLnV1aWQgPT09IG5vZGVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gY2hpbGROb2RlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gc2VhcmNoTm9kZVN1YnRyZWUoIGNoaWxkTm9kZS5jaGlsZHJlbiApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXN1bHQgKSByZXR1cm4gcmVzdWx0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3Qgc3ViVHJlZU5vZGUgPSBzZWFyY2hOb2RlU3VidHJlZSggcm9vdC5jaGlsZHJlbiApO1xuXG5cdFx0XHRpZiAoIHN1YlRyZWVOb2RlICkge1xuXG5cdFx0XHRcdHJldHVybiBzdWJUcmVlTm9kZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdC8vIHRoZXNlIGFyZSB1c2VkIHRvIFwiYmluZFwiIGEgbm9uZXhpc3RlbnQgcHJvcGVydHlcblx0X2dldFZhbHVlX3VuYXZhaWxhYmxlKCkge31cblx0X3NldFZhbHVlX3VuYXZhaWxhYmxlKCkge31cblxuXHQvLyBHZXR0ZXJzXG5cblx0X2dldFZhbHVlX2RpcmVjdCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRidWZmZXJbIG9mZnNldCBdID0gdGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF07XG5cblx0fVxuXG5cdF9nZXRWYWx1ZV9hcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzb3VyY2UubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRidWZmZXJbIG9mZnNldCArKyBdID0gc291cmNlWyBpIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdF9nZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0YnVmZmVyWyBvZmZzZXQgXSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF07XG5cblx0fVxuXG5cdF9nZXRWYWx1ZV90b0FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS50b0FycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXG5cdH1cblxuXHQvLyBEaXJlY3RcblxuXHRfc2V0VmFsdWVfZGlyZWN0KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2RpcmVjdF9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvLyBFbnRpcmVBcnJheVxuXG5cdF9zZXRWYWx1ZV9hcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRjb25zdCBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9hcnJheV9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRjb25zdCBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdGNvbnN0IGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdH1cblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvLyBBcnJheUVsZW1lbnRcblxuXHRfc2V0VmFsdWVfYXJyYXlFbGVtZW50KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvLyBIYXNUb0Zyb21BcnJheVxuXG5cdF9zZXRWYWx1ZV9mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2Zyb21BcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdF9nZXRWYWx1ZV91bmJvdW5kKCB0YXJnZXRBcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7XG5cdFx0dGhpcy5nZXRWYWx1ZSggdGFyZ2V0QXJyYXksIG9mZnNldCApO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfdW5ib3VuZCggc291cmNlQXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpO1xuXHRcdHRoaXMuc2V0VmFsdWUoIHNvdXJjZUFycmF5LCBvZmZzZXQgKTtcblxuXHR9XG5cblx0Ly8gY3JlYXRlIGdldHRlciAvIHNldHRlciBwYWlyIGZvciBhIHByb3BlcnR5IGluIHRoZSBzY2VuZSBncmFwaFxuXHRiaW5kKCkge1xuXG5cdFx0bGV0IHRhcmdldE9iamVjdCA9IHRoaXMubm9kZTtcblx0XHRjb25zdCBwYXJzZWRQYXRoID0gdGhpcy5wYXJzZWRQYXRoO1xuXG5cdFx0Y29uc3Qgb2JqZWN0TmFtZSA9IHBhcnNlZFBhdGgub2JqZWN0TmFtZTtcblx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSBwYXJzZWRQYXRoLnByb3BlcnR5TmFtZTtcblx0XHRsZXQgcHJvcGVydHlJbmRleCA9IHBhcnNlZFBhdGgucHJvcGVydHlJbmRleDtcblxuXHRcdGlmICggISB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdHRhcmdldE9iamVjdCA9IFByb3BlcnR5QmluZGluZy5maW5kTm9kZSggdGhpcy5yb290Tm9kZSwgcGFyc2VkUGF0aC5ub2RlTmFtZSApIHx8IHRoaXMucm9vdE5vZGU7XG5cblx0XHRcdHRoaXMubm9kZSA9IHRhcmdldE9iamVjdDtcblxuXHRcdH1cblxuXHRcdC8vIHNldCBmYWlsIHN0YXRlIHNvIHdlIGNhbiBqdXN0ICdyZXR1cm4nIG9uIGVycm9yXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlX3VuYXZhaWxhYmxlO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmF2YWlsYWJsZTtcblxuXHRcdC8vIGVuc3VyZSB0aGVyZSBpcyBhIHZhbHVlIG5vZGVcblx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0ICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIG5vZGUgZm9yIHRyYWNrOiAnICsgdGhpcy5wYXRoICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3ROYW1lICkge1xuXG5cdFx0XHRsZXQgb2JqZWN0SW5kZXggPSBwYXJzZWRQYXRoLm9iamVjdEluZGV4O1xuXG5cdFx0XHQvLyBzcGVjaWFsIGNhc2VzIHdlcmUgd2UgbmVlZCB0byByZWFjaCBkZWVwZXIgaW50byB0aGUgaGllcmFyY2h5IHRvIGdldCB0aGUgZmFjZSBtYXRlcmlhbHMuLi4uXG5cdFx0XHRzd2l0Y2ggKCBvYmplY3ROYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ21hdGVyaWFscyc6XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWwuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXRlcmlhbHMgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWxzIGFycmF5LicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHM7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdib25lcyc6XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0LnNrZWxldG9uICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gYm9uZXMgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgc2tlbGV0b24uJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gcG90ZW50aWFsIGZ1dHVyZSBvcHRpbWl6YXRpb246IHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlclxuXHRcdFx0XHRcdC8vIGFuZCBjb252ZXJ0IHRoZSBpbnRlZ2VyIHN0cmluZyB0byBhIHRydWUgaW50ZWdlci5cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5za2VsZXRvbi5ib25lcztcblxuXHRcdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0YXJnZXRPYmplY3QubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgaSBdLm5hbWUgPT09IG9iamVjdEluZGV4ICkge1xuXG5cdFx0XHRcdFx0XHRcdG9iamVjdEluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBvYmplY3ROYW1lIG9mIG5vZGUgdW5kZWZpbmVkLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0aWYgKCBvYmplY3RJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBvYmplY3RJbmRleCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gYmluZCB0byBvYmplY3RJbmRleCBvZiBvYmplY3ROYW1lLCBidXQgaXMgdW5kZWZpbmVkLicsIHRoaXMsIHRhcmdldE9iamVjdCApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0WyBvYmplY3RJbmRleCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXNvbHZlIHByb3BlcnR5XG5cdFx0Y29uc3Qgbm9kZVByb3BlcnR5ID0gdGFyZ2V0T2JqZWN0WyBwcm9wZXJ0eU5hbWUgXTtcblxuXHRcdGlmICggbm9kZVByb3BlcnR5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG5vZGVOYW1lID0gcGFyc2VkUGF0aC5ub2RlTmFtZTtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIHVwZGF0ZSBwcm9wZXJ0eSBmb3IgdHJhY2s6ICcgKyBub2RlTmFtZSArXG5cdFx0XHRcdCcuJyArIHByb3BlcnR5TmFtZSArICcgYnV0IGl0IHdhc25cXCd0IGZvdW5kLicsIHRhcmdldE9iamVjdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZGV0ZXJtaW5lIHZlcnNpb25pbmcgc2NoZW1lXG5cdFx0bGV0IHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTm9uZTtcblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0O1xuXG5cdFx0aWYgKCB0YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgIT09IHVuZGVmaW5lZCApIHsgLy8gbWF0ZXJpYWxcblxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5OZWVkc1VwZGF0ZTtcblxuXHRcdH0gZWxzZSBpZiAoIHRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlICE9PSB1bmRlZmluZWQgKSB7IC8vIG5vZGUgdHJhbnNmb3JtXG5cblx0XHRcdHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTWF0cml4V29ybGROZWVkc1VwZGF0ZTtcblxuXHRcdH1cblxuXHRcdC8vIGRldGVybWluZSBob3cgdGhlIHByb3BlcnR5IGdldHMgYm91bmRcblx0XHRsZXQgYmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkRpcmVjdDtcblxuXHRcdGlmICggcHJvcGVydHlJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBhY2Nlc3MgYSBzdWIgZWxlbWVudCBvZiB0aGUgcHJvcGVydHkgYXJyYXkgKG9ubHkgcHJpbWl0aXZlcyBhcmUgc3VwcG9ydGVkIHJpZ2h0IG5vdylcblxuXHRcdFx0aWYgKCBwcm9wZXJ0eU5hbWUgPT09ICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnICkge1xuXG5cdFx0XHRcdC8vIHBvdGVudGlhbCBvcHRpbWl6YXRpb24sIHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlciwgYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxuXG5cdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5nZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3QubW9ycGhUYXJnZXREaWN0aW9uYXJ5WyBwcm9wZXJ0eUluZGV4IF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IHRhcmdldE9iamVjdC5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHByb3BlcnR5SW5kZXggXTtcblxuXHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIG9uIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuQXJyYXlFbGVtZW50O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cdFx0XHR0aGlzLnByb3BlcnR5SW5kZXggPSBwcm9wZXJ0eUluZGV4O1xuXG5cdFx0fSBlbHNlIGlmICggbm9kZVByb3BlcnR5LmZyb21BcnJheSAhPT0gdW5kZWZpbmVkICYmIG5vZGVQcm9wZXJ0eS50b0FycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG11c3QgdXNlIGNvcHkgZm9yIE9iamVjdDNELkV1bGVyL1F1YXRlcm5pb25cblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkhhc0Zyb21Ub0FycmF5O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cblx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCBub2RlUHJvcGVydHkgKSApIHtcblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkVudGlyZUFycmF5O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcblxuXHRcdH1cblxuXHRcdC8vIHNlbGVjdCBnZXR0ZXIgLyBzZXR0ZXJcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5HZXR0ZXJCeUJpbmRpbmdUeXBlWyBiaW5kaW5nVHlwZSBdO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nWyBiaW5kaW5nVHlwZSBdWyB2ZXJzaW9uaW5nIF07XG5cblx0fVxuXG5cdHVuYmluZCgpIHtcblxuXHRcdHRoaXMubm9kZSA9IG51bGw7XG5cblx0XHQvLyBiYWNrIHRvIHRoZSBwcm90b3R5cGUgdmVyc2lvbiBvZiBnZXRWYWx1ZSAvIHNldFZhbHVlXG5cdFx0Ly8gbm90ZTogYXZvaWRpbmcgdG8gbXV0YXRlIHRoZSBzaGFwZSBvZiAndGhpcycgdmlhICdkZWxldGUnXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlX3VuYm91bmQ7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYm91bmQ7XG5cblx0fVxuXG59XG5cblByb3BlcnR5QmluZGluZy5Db21wb3NpdGUgPSBDb21wb3NpdGU7XG5cblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuQmluZGluZ1R5cGUgPSB7XG5cdERpcmVjdDogMCxcblx0RW50aXJlQXJyYXk6IDEsXG5cdEFycmF5RWxlbWVudDogMixcblx0SGFzRnJvbVRvQXJyYXk6IDNcbn07XG5cblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuVmVyc2lvbmluZyA9IHtcblx0Tm9uZTogMCxcblx0TmVlZHNVcGRhdGU6IDEsXG5cdE1hdHJpeFdvcmxkTmVlZHNVcGRhdGU6IDJcbn07XG5cblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuR2V0dGVyQnlCaW5kaW5nVHlwZSA9IFtcblxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV9kaXJlY3QsXG5cdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX2dldFZhbHVlX2FycmF5LFxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV9hcnJheUVsZW1lbnQsXG5cdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX2dldFZhbHVlX3RvQXJyYXksXG5cbl07XG5cblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmcgPSBbXG5cblx0W1xuXHRcdC8vIERpcmVjdFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2RpcmVjdCxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9kaXJlY3Rfc2V0TmVlZHNVcGRhdGUsXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXG5cblx0XSwgW1xuXG5cdFx0Ly8gRW50aXJlQXJyYXlcblxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5LFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5X3NldE5lZWRzVXBkYXRlLFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXG5cblx0XSwgW1xuXG5cdFx0Ly8gQXJyYXlFbGVtZW50XG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfYXJyYXlFbGVtZW50LFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXROZWVkc1VwZGF0ZSxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSxcblxuXHRdLCBbXG5cblx0XHQvLyBIYXNUb0Zyb21BcnJheVxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2Zyb21BcnJheSxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TmVlZHNVcGRhdGUsXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXG5cblx0XVxuXG5dO1xuXG4vKipcbiAqXG4gKiBBIGdyb3VwIG9mIG9iamVjdHMgdGhhdCByZWNlaXZlcyBhIHNoYXJlZCBhbmltYXRpb24gc3RhdGUuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogIC0gQWRkIG9iamVjdHMgeW91IHdvdWxkIG90aGVyd2lzZSBwYXNzIGFzICdyb290JyB0byB0aGVcbiAqICAgIGNvbnN0cnVjdG9yIG9yIHRoZSAuY2xpcEFjdGlvbiBtZXRob2Qgb2YgQW5pbWF0aW9uTWl4ZXIuXG4gKlxuICogIC0gSW5zdGVhZCBwYXNzIHRoaXMgb2JqZWN0IGFzICdyb290Jy5cbiAqXG4gKiAgLSBZb3UgY2FuIGFsc28gYWRkIGFuZCByZW1vdmUgb2JqZWN0cyBsYXRlciB3aGVuIHRoZSBtaXhlclxuICogICAgaXMgcnVubmluZy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgIE9iamVjdHMgb2YgdGhpcyBjbGFzcyBhcHBlYXIgYXMgb25lIG9iamVjdCB0byB0aGUgbWl4ZXIsXG4gKiAgICBzbyBjYWNoZSBjb250cm9sIG9mIHRoZSBpbmRpdmlkdWFsIG9iamVjdHMgbXVzdCBiZSBkb25lXG4gKiAgICBvbiB0aGUgZ3JvdXAuXG4gKlxuICogTGltaXRhdGlvbjpcbiAqXG4gKiAgLSBUaGUgYW5pbWF0ZWQgcHJvcGVydGllcyBtdXN0IGJlIGNvbXBhdGlibGUgYW1vbmcgdGhlXG4gKiAgICBhbGwgb2JqZWN0cyBpbiB0aGUgZ3JvdXAuXG4gKlxuICogIC0gQSBzaW5nbGUgcHJvcGVydHkgY2FuIGVpdGhlciBiZSBjb250cm9sbGVkIHRocm91Z2ggYVxuICogICAgdGFyZ2V0IGdyb3VwIG9yIGRpcmVjdGx5LCBidXQgbm90IGJvdGguXG4gKi9cblxuY2xhc3MgQW5pbWF0aW9uT2JqZWN0R3JvdXAge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHQvLyBjYWNoZWQgb2JqZWN0cyBmb2xsb3dlZCBieSB0aGUgYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9vYmplY3RzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSAwOyAvLyB0aHJlc2hvbGRcblx0XHQvLyBub3RlOiByZWFkIGJ5IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGVcblxuXHRcdGNvbnN0IGluZGljZXMgPSB7fTtcblx0XHR0aGlzLl9pbmRpY2VzQnlVVUlEID0gaW5kaWNlczsgLy8gZm9yIGJvb2trZWVwaW5nXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRpbmRpY2VzWyBhcmd1bWVudHNbIGkgXS51dWlkIF0gPSBpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcGF0aHMgPSBbXTsgLy8gaW5zaWRlOiBzdHJpbmdcblx0XHR0aGlzLl9wYXJzZWRQYXRocyA9IFtdOyAvLyBpbnNpZGU6IHsgd2UgZG9uJ3QgY2FyZSwgaGVyZSB9XG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gaW5zaWRlOiBBcnJheTwgUHJvcGVydHlCaW5kaW5nID5cblx0XHR0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGggPSB7fTsgLy8gaW5zaWRlOiBpbmRpY2VzIGluIHRoZXNlIGFycmF5c1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dGhpcy5zdGF0cyA9IHtcblxuXHRcdFx0b2JqZWN0czoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX29iamVjdHMubGVuZ3RoO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRcdHJldHVybiB0aGlzLnRvdGFsIC0gc2NvcGUubkNhY2hlZE9iamVjdHNfO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRnZXQgYmluZGluZ3NQZXJPYmplY3QoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHNjb3BlLl9iaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdGFkZCgpIHtcblxuXHRcdGNvbnN0IG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRsZXQga25vd25PYmplY3QgPSB1bmRlZmluZWQsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQ7XG5cdFx0XHRsZXQgaW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyB1bmtub3duIG9iamVjdCAtPiBhZGQgaXQgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHRpbmRleCA9IG5PYmplY3RzICsrO1xuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0cy5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0YmluZGluZ3NbIGogXS5wdXNoKCBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGhzWyBqIF0sIHBhcnNlZFBhdGhzWyBqIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHRrbm93bk9iamVjdCA9IG9iamVjdHNbIGluZGV4IF07XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHRjb25zdCBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsXG5cdFx0XHRcdFx0bGFzdENhY2hlZE9iamVjdCA9IG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXTtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0Q2FjaGVkT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRvYmplY3RzWyBpbmRleCBdID0gbGFzdENhY2hlZE9iamVjdDtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBmaXJzdEFjdGl2ZUluZGV4O1xuXHRcdFx0XHRvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBvYmplY3Q7XG5cblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sXG5cdFx0XHRcdFx0XHRsYXN0Q2FjaGVkID0gYmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRcdFx0XHRsZXQgYmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XG5cblx0XHRcdFx0XHRpZiAoIGJpbmRpbmcgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gc2luY2Ugd2UgZG8gbm90IGJvdGhlciB0byBjcmVhdGUgbmV3IGJpbmRpbmdzXG5cdFx0XHRcdFx0XHQvLyBmb3Igb2JqZWN0cyB0aGF0IGFyZSBjYWNoZWQsIHRoZSBiaW5kaW5nIG1heVxuXHRcdFx0XHRcdFx0Ly8gb3IgbWF5IG5vdCBleGlzdFxuXG5cdFx0XHRcdFx0XHRiaW5kaW5nID0gbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoc1sgaiBdLCBwYXJzZWRQYXRoc1sgaiBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3RzWyBpbmRleCBdICE9PSBrbm93bk9iamVjdCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQW5pbWF0aW9uT2JqZWN0R3JvdXA6IERpZmZlcmVudCBvYmplY3RzIHdpdGggdGhlIHNhbWUgVVVJRCAnICtcblx0XHRcdFx0XHQnZGV0ZWN0ZWQuIENsZWFuIHRoZSBjYWNoZXMgb3IgcmVjcmVhdGUgeW91ciBpbmZyYXN0cnVjdHVyZSB3aGVuIHJlbG9hZGluZyBzY2VuZXMuJyApO1xuXG5cdFx0XHR9IC8vIGVsc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IHdoZXJlIHdlIHdhbnQgaXQgdG8gYmVcblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9XG5cblx0cmVtb3ZlKCkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRsZXQgbkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPj0gbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgaW50byB0aGUgQ0FDSEVEIHJlZ2lvblxuXG5cdFx0XHRcdGNvbnN0IGxhc3RDYWNoZWRJbmRleCA9IG5DYWNoZWRPYmplY3RzICsrLFxuXHRcdFx0XHRcdGZpcnN0QWN0aXZlT2JqZWN0ID0gb2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgZmlyc3RBY3RpdmVPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZU9iamVjdDtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBsYXN0Q2FjaGVkSW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGxhc3RDYWNoZWRJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRjb25zdCBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0Zmlyc3RBY3RpdmUgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdLFxuXHRcdFx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGZpcnN0QWN0aXZlO1xuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH1cblxuXHQvLyByZW1vdmUgJiBmb3JnZXRcblx0dW5jYWNoZSgpIHtcblxuXHRcdGNvbnN0IG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0bGV0IG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRkZWxldGUgaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdCBpcyBjYWNoZWQsIHNocmluayB0aGUgQ0FDSEVEIHJlZ2lvblxuXG5cdFx0XHRcdFx0Y29uc3QgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdENhY2hlZE9iamVjdCA9IG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdGxhc3RJbmRleCA9IC0tIG5PYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdE9iamVjdCA9IG9iamVjdHNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0Ly8gbGFzdCBjYWNoZWQgb2JqZWN0IHRha2VzIHRoaXMgb2JqZWN0J3MgcGxhY2Vcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0Q2FjaGVkT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0Q2FjaGVkT2JqZWN0O1xuXG5cdFx0XHRcdFx0Ly8gbGFzdCBvYmplY3QgZ29lcyB0byB0aGUgYWN0aXZhdGVkIHNsb3QgYW5kIHBvcFxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RPYmplY3QudXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0XHRvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0T2JqZWN0O1xuXHRcdFx0XHRcdG9iamVjdHMucG9wKCk7XG5cblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sXG5cdFx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdFx0bGFzdCA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3Q7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdCBpcyBhY3RpdmUsIGp1c3Qgc3dhcCB3aXRoIHRoZSBsYXN0IGFuZCBwb3BcblxuXHRcdFx0XHRcdGNvbnN0IGxhc3RJbmRleCA9IC0tIG5PYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdE9iamVjdCA9IG9iamVjdHNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0aWYgKCBsYXN0SW5kZXggPiAwICkge1xuXG5cdFx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RPYmplY3Q7XG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXTtcblxuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpbmRleCBdID0gYmluZGluZ3NGb3JQYXRoWyBsYXN0SW5kZXggXTtcblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aC5wb3AoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IC8vIGNhY2hlZCBvciBhY3RpdmVcblxuXHRcdFx0fSAvLyBpZiBvYmplY3QgaXMga25vd25cblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9XG5cblx0Ly8gSW50ZXJuYWwgaW50ZXJmYWNlIHVzZWQgYnkgYmVmcmllbmRlZCBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlOlxuXG5cdHN1YnNjcmliZV8oIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHQvLyByZXR1cm5zIGFuIGFycmF5IG9mIGJpbmRpbmdzIGZvciB0aGUgZ2l2ZW4gcGF0aCB0aGF0IGlzIGNoYW5nZWRcblx0XHQvLyBhY2NvcmRpbmcgdG8gdGhlIGNvbnRhaW5lZCBvYmplY3RzIGluIHRoZSBncm91cFxuXG5cdFx0Y29uc3QgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aDtcblx0XHRsZXQgaW5kZXggPSBpbmRpY2VzQnlQYXRoWyBwYXRoIF07XG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHJldHVybiBiaW5kaW5nc1sgaW5kZXggXTtcblxuXHRcdGNvbnN0IHBhdGhzID0gdGhpcy5fcGF0aHMsXG5cdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0b2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGJpbmRpbmdzRm9yUGF0aCA9IG5ldyBBcnJheSggbk9iamVjdHMgKTtcblxuXHRcdGluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0aW5kaWNlc0J5UGF0aFsgcGF0aCBdID0gaW5kZXg7XG5cblx0XHRwYXRocy5wdXNoKCBwYXRoICk7XG5cdFx0cGFyc2VkUGF0aHMucHVzaCggcGFyc2VkUGF0aCApO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmdzRm9yUGF0aCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSBuQ2FjaGVkT2JqZWN0cywgbiA9IG9iamVjdHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBvYmplY3QgPSBvYmplY3RzWyBpIF07XG5cdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGkgXSA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJpbmRpbmdzRm9yUGF0aDtcblxuXHR9XG5cblx0dW5zdWJzY3JpYmVfKCBwYXRoICkge1xuXG5cdFx0Ly8gdGVsbHMgdGhlIGdyb3VwIHRvIGZvcmdldCBhYm91dCBhIHByb3BlcnR5IHBhdGggYW5kIG5vIGxvbmdlclxuXHRcdC8vIHVwZGF0ZSB0aGUgYXJyYXkgcHJldmlvdXNseSBvYnRhaW5lZCB3aXRoICdzdWJzY3JpYmVfJ1xuXG5cdFx0Y29uc3QgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCxcblx0XHRcdGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NJbmRleCA9IGJpbmRpbmdzLmxlbmd0aCAtIDEsXG5cdFx0XHRcdGxhc3RCaW5kaW5ncyA9IGJpbmRpbmdzWyBsYXN0QmluZGluZ3NJbmRleCBdLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NQYXRoID0gcGF0aFsgbGFzdEJpbmRpbmdzSW5kZXggXTtcblxuXHRcdFx0aW5kaWNlc0J5UGF0aFsgbGFzdEJpbmRpbmdzUGF0aCBdID0gaW5kZXg7XG5cblx0XHRcdGJpbmRpbmdzWyBpbmRleCBdID0gbGFzdEJpbmRpbmdzO1xuXHRcdFx0YmluZGluZ3MucG9wKCk7XG5cblx0XHRcdHBhcnNlZFBhdGhzWyBpbmRleCBdID0gcGFyc2VkUGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXJzZWRQYXRocy5wb3AoKTtcblxuXHRcdFx0cGF0aHNbIGluZGV4IF0gPSBwYXRoc1sgbGFzdEJpbmRpbmdzSW5kZXggXTtcblx0XHRcdHBhdGhzLnBvcCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5BbmltYXRpb25PYmplY3RHcm91cC5wcm90b3R5cGUuaXNBbmltYXRpb25PYmplY3RHcm91cCA9IHRydWU7XG5cbmNsYXNzIEFuaW1hdGlvbkFjdGlvbiB7XG5cblx0Y29uc3RydWN0b3IoIG1peGVyLCBjbGlwLCBsb2NhbFJvb3QgPSBudWxsLCBibGVuZE1vZGUgPSBjbGlwLmJsZW5kTW9kZSApIHtcblxuXHRcdHRoaXMuX21peGVyID0gbWl4ZXI7XG5cdFx0dGhpcy5fY2xpcCA9IGNsaXA7XG5cdFx0dGhpcy5fbG9jYWxSb290ID0gbG9jYWxSb290O1xuXHRcdHRoaXMuYmxlbmRNb2RlID0gYmxlbmRNb2RlO1xuXG5cdFx0Y29uc3QgdHJhY2tzID0gY2xpcC50cmFja3MsXG5cdFx0XHRuVHJhY2tzID0gdHJhY2tzLmxlbmd0aCxcblx0XHRcdGludGVycG9sYW50cyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xuXG5cdFx0Y29uc3QgaW50ZXJwb2xhbnRTZXR0aW5ncyA9IHtcblx0XHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxuXHRcdFx0ZW5kaW5nRW5kOiBaZXJvQ3VydmF0dXJlRW5kaW5nXG5cdFx0fTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgaW50ZXJwb2xhbnQgPSB0cmFja3NbIGkgXS5jcmVhdGVJbnRlcnBvbGFudCggbnVsbCApO1xuXHRcdFx0aW50ZXJwb2xhbnRzWyBpIF0gPSBpbnRlcnBvbGFudDtcblx0XHRcdGludGVycG9sYW50LnNldHRpbmdzID0gaW50ZXJwb2xhbnRTZXR0aW5ncztcblxuXHRcdH1cblxuXHRcdHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdFx0dGhpcy5faW50ZXJwb2xhbnRzID0gaW50ZXJwb2xhbnRzOyAvLyBib3VuZCBieSB0aGUgbWl4ZXJcblxuXHRcdC8vIGluc2lkZTogUHJvcGVydHlNaXhlciAobWFuYWdlZCBieSB0aGUgbWl4ZXIpXG5cdFx0dGhpcy5fcHJvcGVydHlCaW5kaW5ncyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xuXG5cdFx0dGhpcy5fY2FjaGVJbmRleCA9IG51bGw7IC8vIGZvciB0aGUgbWVtb3J5IG1hbmFnZXJcblx0XHR0aGlzLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxuXG5cdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gbnVsbDtcblxuXHRcdHRoaXMubG9vcCA9IExvb3BSZXBlYXQ7XG5cdFx0dGhpcy5fbG9vcENvdW50ID0gLSAxO1xuXG5cdFx0Ly8gZ2xvYmFsIG1peGVyIHRpbWUgd2hlbiB0aGUgYWN0aW9uIGlzIHRvIGJlIHN0YXJ0ZWRcblx0XHQvLyBpdCdzIHNldCBiYWNrIHRvICdudWxsJyB1cG9uIHN0YXJ0IG9mIHRoZSBhY3Rpb25cblx0XHR0aGlzLl9zdGFydFRpbWUgPSBudWxsO1xuXG5cdFx0Ly8gc2NhbGVkIGxvY2FsIHRpbWUgb2YgdGhlIGFjdGlvblxuXHRcdC8vIGdldHMgY2xhbXBlZCBvciB3cmFwcGVkIHRvIDAuLmNsaXAuZHVyYXRpb24gYWNjb3JkaW5nIHRvIGxvb3Bcblx0XHR0aGlzLnRpbWUgPSAwO1xuXG5cdFx0dGhpcy50aW1lU2NhbGUgPSAxO1xuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IDE7XG5cblx0XHR0aGlzLndlaWdodCA9IDE7XG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gMTtcblxuXHRcdHRoaXMucmVwZXRpdGlvbnMgPSBJbmZpbml0eTsgLy8gbm8uIG9mIHJlcGV0aXRpb25zIHdoZW4gbG9vcGluZ1xuXG5cdFx0dGhpcy5wYXVzZWQgPSBmYWxzZTsgLy8gdHJ1ZSAtPiB6ZXJvIGVmZmVjdGl2ZSB0aW1lIHNjYWxlXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTsgLy8gZmFsc2UgLT4gemVybyBlZmZlY3RpdmUgd2VpZ2h0XG5cblx0XHR0aGlzLmNsYW1wV2hlbkZpbmlzaGVkID0gZmFsc2U7Ly8ga2VlcCBmZWVkaW5nIHRoZSBsYXN0IGZyYW1lP1xuXG5cdFx0dGhpcy56ZXJvU2xvcGVBdFN0YXJ0ID0gdHJ1ZTsvLyBmb3Igc21vb3RoIGludGVycG9sYXRpb24gdy9vIHNlcGFyYXRlXG5cdFx0dGhpcy56ZXJvU2xvcGVBdEVuZCA9IHRydWU7Ly8gY2xpcHMgZm9yIHN0YXJ0LCBsb29wIGFuZCBlbmRcblxuXHR9XG5cblx0Ly8gU3RhdGUgJiBTY2hlZHVsaW5nXG5cblx0cGxheSgpIHtcblxuXHRcdHRoaXMuX21peGVyLl9hY3RpdmF0ZUFjdGlvbiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0b3AoKSB7XG5cblx0XHR0aGlzLl9taXhlci5fZGVhY3RpdmF0ZUFjdGlvbiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVzZXQoKTtcblxuXHR9XG5cblx0cmVzZXQoKSB7XG5cblx0XHR0aGlzLnBhdXNlZCA9IGZhbHNlO1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0XHR0aGlzLnRpbWUgPSAwOyAvLyByZXN0YXJ0IGNsaXBcblx0XHR0aGlzLl9sb29wQ291bnQgPSAtIDE7Ly8gZm9yZ2V0IHByZXZpb3VzIGxvb3BzXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDsvLyBmb3JnZXQgc2NoZWR1bGluZ1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcEZhZGluZygpLnN0b3BXYXJwaW5nKCk7XG5cblx0fVxuXG5cdGlzUnVubmluZygpIHtcblxuXHRcdHJldHVybiB0aGlzLmVuYWJsZWQgJiYgISB0aGlzLnBhdXNlZCAmJiB0aGlzLnRpbWVTY2FsZSAhPT0gMCAmJlxuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID09PSBudWxsICYmIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbiggdGhpcyApO1xuXG5cdH1cblxuXHQvLyByZXR1cm4gdHJ1ZSB3aGVuIHBsYXkgaGFzIGJlZW4gY2FsbGVkXG5cdGlzU2NoZWR1bGVkKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbiggdGhpcyApO1xuXG5cdH1cblxuXHRzdGFydEF0KCB0aW1lICkge1xuXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gdGltZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRMb29wKCBtb2RlLCByZXBldGl0aW9ucyApIHtcblxuXHRcdHRoaXMubG9vcCA9IG1vZGU7XG5cdFx0dGhpcy5yZXBldGl0aW9ucyA9IHJlcGV0aXRpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIFdlaWdodFxuXG5cdC8vIHNldCB0aGUgd2VpZ2h0IHN0b3BwaW5nIGFueSBzY2hlZHVsZWQgZmFkaW5nXG5cdC8vIGFsdGhvdWdoIC5lbmFibGVkID0gZmFsc2UgeWllbGRzIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgemVybywgdGhpc1xuXHQvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLmVuYWJsZWQsIGJlY2F1c2UgaXQgd291bGQgYmUgY29uZnVzaW5nXG5cdHNldEVmZmVjdGl2ZVdlaWdodCggd2VpZ2h0ICkge1xuXG5cdFx0dGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XG5cblx0XHQvLyBub3RlOiBzYW1lIGxvZ2ljIGFzIHdoZW4gdXBkYXRlZCBhdCBydW50aW1lXG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gdGhpcy5lbmFibGVkID8gd2VpZ2h0IDogMDtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BGYWRpbmcoKTtcblxuXHR9XG5cblx0Ly8gcmV0dXJuIHRoZSB3ZWlnaHQgY29uc2lkZXJpbmcgZmFkaW5nIGFuZCAuZW5hYmxlZFxuXHRnZXRFZmZlY3RpdmVXZWlnaHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlV2VpZ2h0O1xuXG5cdH1cblxuXHRmYWRlSW4oIGR1cmF0aW9uICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKCBkdXJhdGlvbiwgMCwgMSApO1xuXG5cdH1cblxuXHRmYWRlT3V0KCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDEsIDAgKTtcblxuXHR9XG5cblx0Y3Jvc3NGYWRlRnJvbSggZmFkZU91dEFjdGlvbiwgZHVyYXRpb24sIHdhcnAgKSB7XG5cblx0XHRmYWRlT3V0QWN0aW9uLmZhZGVPdXQoIGR1cmF0aW9uICk7XG5cdFx0dGhpcy5mYWRlSW4oIGR1cmF0aW9uICk7XG5cblx0XHRpZiAoIHdhcnAgKSB7XG5cblx0XHRcdGNvbnN0IGZhZGVJbkR1cmF0aW9uID0gdGhpcy5fY2xpcC5kdXJhdGlvbixcblx0XHRcdFx0ZmFkZU91dER1cmF0aW9uID0gZmFkZU91dEFjdGlvbi5fY2xpcC5kdXJhdGlvbixcblxuXHRcdFx0XHRzdGFydEVuZFJhdGlvID0gZmFkZU91dER1cmF0aW9uIC8gZmFkZUluRHVyYXRpb24sXG5cdFx0XHRcdGVuZFN0YXJ0UmF0aW8gPSBmYWRlSW5EdXJhdGlvbiAvIGZhZGVPdXREdXJhdGlvbjtcblxuXHRcdFx0ZmFkZU91dEFjdGlvbi53YXJwKCAxLjAsIHN0YXJ0RW5kUmF0aW8sIGR1cmF0aW9uICk7XG5cdFx0XHR0aGlzLndhcnAoIGVuZFN0YXJ0UmF0aW8sIDEuMCwgZHVyYXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjcm9zc0ZhZGVUbyggZmFkZUluQWN0aW9uLCBkdXJhdGlvbiwgd2FycCApIHtcblxuXHRcdHJldHVybiBmYWRlSW5BY3Rpb24uY3Jvc3NGYWRlRnJvbSggdGhpcywgZHVyYXRpb24sIHdhcnAgKTtcblxuXHR9XG5cblx0c3RvcEZhZGluZygpIHtcblxuXHRcdGNvbnN0IHdlaWdodEludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIHdlaWdodEludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHdlaWdodEludGVycG9sYW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gVGltZSBTY2FsZSBDb250cm9sXG5cblx0Ly8gc2V0IHRoZSB0aW1lIHNjYWxlIHN0b3BwaW5nIGFueSBzY2hlZHVsZWQgd2FycGluZ1xuXHQvLyBhbHRob3VnaCAucGF1c2VkID0gdHJ1ZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHRpbWUgc2NhbGUgb2YgemVybywgdGhpc1xuXHQvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLnBhdXNlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcblx0c2V0RWZmZWN0aXZlVGltZVNjYWxlKCB0aW1lU2NhbGUgKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHR0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSB0aGlzLnBhdXNlZCA/IDAgOiB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH1cblxuXHQvLyByZXR1cm4gdGhlIHRpbWUgc2NhbGUgY29uc2lkZXJpbmcgd2FycGluZyBhbmQgLnBhdXNlZFxuXHRnZXRFZmZlY3RpdmVUaW1lU2NhbGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlO1xuXG5cdH1cblxuXHRzZXREdXJhdGlvbiggZHVyYXRpb24gKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRoaXMuX2NsaXAuZHVyYXRpb24gLyBkdXJhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fVxuXG5cdHN5bmNXaXRoKCBhY3Rpb24gKSB7XG5cblx0XHR0aGlzLnRpbWUgPSBhY3Rpb24udGltZTtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IGFjdGlvbi50aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH1cblxuXHRoYWx0KCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLndhcnAoIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwgMCwgZHVyYXRpb24gKTtcblxuXHR9XG5cblx0d2FycCggc3RhcnRUaW1lU2NhbGUsIGVuZFRpbWVTY2FsZSwgZHVyYXRpb24gKSB7XG5cblx0XHRjb25zdCBtaXhlciA9IHRoaXMuX21peGVyLFxuXHRcdFx0bm93ID0gbWl4ZXIudGltZSxcblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0bGV0IGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIGludGVycG9sYW50ID09PSBudWxsICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG1peGVyLl9sZW5kQ29udHJvbEludGVycG9sYW50KCk7XG5cdFx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGltZXMgPSBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHR2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7XG5cblx0XHR0aW1lc1sgMCBdID0gbm93O1xuXHRcdHRpbWVzWyAxIF0gPSBub3cgKyBkdXJhdGlvbjtcblxuXHRcdHZhbHVlc1sgMCBdID0gc3RhcnRUaW1lU2NhbGUgLyB0aW1lU2NhbGU7XG5cdFx0dmFsdWVzWyAxIF0gPSBlbmRUaW1lU2NhbGUgLyB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3RvcFdhcnBpbmcoKSB7XG5cblx0XHRjb25zdCB0aW1lU2NhbGVJbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0aWYgKCB0aW1lU2NhbGVJbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCB0aW1lU2NhbGVJbnRlcnBvbGFudCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIE9iamVjdCBBY2Nlc3NvcnNcblxuXHRnZXRNaXhlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcblxuXHR9XG5cblx0Z2V0Q2xpcCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xuXG5cdH1cblxuXHRnZXRSb290KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsUm9vdCB8fCB0aGlzLl9taXhlci5fcm9vdDtcblxuXHR9XG5cblx0Ly8gSW50ZXJuYVxuXG5cdF91cGRhdGUoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICkge1xuXG5cdFx0Ly8gY2FsbGVkIGJ5IHRoZSBtaXhlclxuXG5cdFx0aWYgKCAhIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0Ly8gY2FsbCAuX3VwZGF0ZVdlaWdodCgpIHRvIHVwZGF0ZSAuX2VmZmVjdGl2ZVdlaWdodFxuXG5cdFx0XHR0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHN0YXJ0VGltZSA9IHRoaXMuX3N0YXJ0VGltZTtcblxuXHRcdGlmICggc3RhcnRUaW1lICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBjaGVjayBmb3Igc2NoZWR1bGVkIHN0YXJ0IG9mIGFjdGlvblxuXG5cdFx0XHRjb25zdCB0aW1lUnVubmluZyA9ICggdGltZSAtIHN0YXJ0VGltZSApICogdGltZURpcmVjdGlvbjtcblx0XHRcdGlmICggdGltZVJ1bm5pbmcgPCAwIHx8IHRpbWVEaXJlY3Rpb24gPT09IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuOyAvLyB5ZXQgdG8gY29tZSAvIGRvbid0IGRlY2lkZSB3aGVuIGRlbHRhID0gMFxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHN0YXJ0XG5cblx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7IC8vIHVuc2NoZWR1bGVcblx0XHRcdGRlbHRhVGltZSA9IHRpbWVEaXJlY3Rpb24gKiB0aW1lUnVubmluZztcblxuXHRcdH1cblxuXHRcdC8vIGFwcGx5IHRpbWUgc2NhbGUgYW5kIGFkdmFuY2UgdGltZVxuXG5cdFx0ZGVsdGFUaW1lICo9IHRoaXMuX3VwZGF0ZVRpbWVTY2FsZSggdGltZSApO1xuXHRcdGNvbnN0IGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7XG5cblx0XHQvLyBub3RlOiBfdXBkYXRlVGltZSBtYXkgZGlzYWJsZSB0aGUgYWN0aW9uIHJlc3VsdGluZyBpblxuXHRcdC8vIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgMFxuXG5cdFx0Y29uc3Qgd2VpZ2h0ID0gdGhpcy5fdXBkYXRlV2VpZ2h0KCB0aW1lICk7XG5cblx0XHRpZiAoIHdlaWdodCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IGludGVycG9sYW50cyA9IHRoaXMuX2ludGVycG9sYW50cztcblx0XHRcdGNvbnN0IHByb3BlcnR5TWl4ZXJzID0gdGhpcy5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0c3dpdGNoICggdGhpcy5ibGVuZE1vZGUgKSB7XG5cblx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZTpcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IGludGVycG9sYW50cy5sZW5ndGg7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGludGVycG9sYW50c1sgaiBdLmV2YWx1YXRlKCBjbGlwVGltZSApO1xuXHRcdFx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlQWRkaXRpdmUoIHdlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGU6XG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBpbnRlcnBvbGFudHMubGVuZ3RoOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHRpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTtcblx0XHRcdFx0XHRcdHByb3BlcnR5TWl4ZXJzWyBqIF0uYWNjdW11bGF0ZSggYWNjdUluZGV4LCB3ZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfdXBkYXRlV2VpZ2h0KCB0aW1lICkge1xuXG5cdFx0bGV0IHdlaWdodCA9IDA7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0d2VpZ2h0ID0gdGhpcy53ZWlnaHQ7XG5cdFx0XHRjb25zdCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0d2VpZ2h0ICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BGYWRpbmcoKTtcblxuXHRcdFx0XHRcdGlmICggaW50ZXJwb2xhbnRWYWx1ZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZmFkZWQgb3V0LCBkaXNhYmxlXG5cdFx0XHRcdFx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHdlaWdodDtcblx0XHRyZXR1cm4gd2VpZ2h0O1xuXG5cdH1cblxuXHRfdXBkYXRlVGltZVNjYWxlKCB0aW1lICkge1xuXG5cdFx0bGV0IHRpbWVTY2FsZSA9IDA7XG5cblx0XHRpZiAoICEgdGhpcy5wYXVzZWQgKSB7XG5cblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0XHRjb25zdCBpbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0dGltZVNjYWxlICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIHRpbWVTY2FsZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbW90aW9uIGhhcyBoYWx0ZWQsIHBhdXNlXG5cdFx0XHRcdFx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyB3YXJwIGRvbmUgLSBhcHBseSBmaW5hbCB0aW1lIHNjYWxlXG5cdFx0XHRcdFx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHRyZXR1cm4gdGltZVNjYWxlO1xuXG5cdH1cblxuXHRfdXBkYXRlVGltZSggZGVsdGFUaW1lICkge1xuXG5cdFx0Y29uc3QgZHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uO1xuXHRcdGNvbnN0IGxvb3AgPSB0aGlzLmxvb3A7XG5cblx0XHRsZXQgdGltZSA9IHRoaXMudGltZSArIGRlbHRhVGltZTtcblx0XHRsZXQgbG9vcENvdW50ID0gdGhpcy5fbG9vcENvdW50O1xuXG5cdFx0Y29uc3QgcGluZ1BvbmcgPSAoIGxvb3AgPT09IExvb3BQaW5nUG9uZyApO1xuXG5cdFx0aWYgKCBkZWx0YVRpbWUgPT09IDAgKSB7XG5cblx0XHRcdGlmICggbG9vcENvdW50ID09PSAtIDEgKSByZXR1cm4gdGltZTtcblxuXHRcdFx0cmV0dXJuICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGxvb3AgPT09IExvb3BPbmNlICkge1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdHRoaXMuX2xvb3BDb3VudCA9IDA7XG5cdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIHRydWUsIHRydWUsIGZhbHNlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aGFuZGxlX3N0b3A6IHtcblxuXHRcdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gZHVyYXRpb247XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHRcdGJyZWFrIGhhbmRsZV9zdG9wO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lIDwgMCA/IC0gMSA6IDFcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgeyAvLyByZXBldGl0aXZlIFJlcGVhdCBvciBQaW5nUG9uZ1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdGlmICggZGVsdGFUaW1lID49IDAgKSB7XG5cblx0XHRcdFx0XHRsb29wQ291bnQgPSAwO1xuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdHJ1ZSwgdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gd2hlbiBsb29waW5nIGluIHJldmVyc2UgZGlyZWN0aW9uLCB0aGUgaW5pdGlhbFxuXHRcdFx0XHRcdC8vIHRyYW5zaXRpb24gdGhyb3VnaCB6ZXJvIGNvdW50cyBhcyBhIHJlcGV0aXRpb24sXG5cdFx0XHRcdFx0Ly8gc28gbGVhdmUgbG9vcENvdW50IGF0IC0xXG5cblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCB0cnVlLCBwaW5nUG9uZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gfHwgdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0Ly8gd3JhcCBhcm91bmRcblxuXHRcdFx0XHRjb25zdCBsb29wRGVsdGEgPSBNYXRoLmZsb29yKCB0aW1lIC8gZHVyYXRpb24gKTsgLy8gc2lnbmVkXG5cdFx0XHRcdHRpbWUgLT0gZHVyYXRpb24gKiBsb29wRGVsdGE7XG5cblx0XHRcdFx0bG9vcENvdW50ICs9IE1hdGguYWJzKCBsb29wRGVsdGEgKTtcblxuXHRcdFx0XHRjb25zdCBwZW5kaW5nID0gdGhpcy5yZXBldGl0aW9ucyAtIGxvb3BDb3VudDtcblxuXHRcdFx0XHRpZiAoIHBlbmRpbmcgPD0gMCApIHtcblxuXHRcdFx0XHRcdC8vIGhhdmUgdG8gc3RvcCAoc3dpdGNoIHN0YXRlLCBjbGFtcCB0aW1lLCBmaXJlIGV2ZW50KVxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmNsYW1wV2hlbkZpbmlzaGVkICkgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR0aW1lID0gZGVsdGFUaW1lID4gMCA/IGR1cmF0aW9uIDogMDtcblxuXHRcdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XG5cblx0XHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnZmluaXNoZWQnLCBhY3Rpb246IHRoaXMsXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IGRlbHRhVGltZSA+IDAgPyAxIDogLSAxXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBrZWVwIHJ1bm5pbmdcblxuXHRcdFx0XHRcdGlmICggcGVuZGluZyA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZW50ZXJpbmcgdGhlIGxhc3Qgcm91bmRcblxuXHRcdFx0XHRcdFx0Y29uc3QgYXRTdGFydCA9IGRlbHRhVGltZSA8IDA7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBhdFN0YXJ0LCAhIGF0U3RhcnQsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBmYWxzZSwgZmFsc2UsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSBsb29wQ291bnQ7XG5cblx0XHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2xvb3AnLCBhY3Rpb246IHRoaXMsIGxvb3BEZWx0YTogbG9vcERlbHRhXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gaW52ZXJ0IHRpbWUgZm9yIHRoZSBcInBvbmcgcm91bmRcIlxuXG5cdFx0XHRcdHJldHVybiBkdXJhdGlvbiAtIHRpbWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aW1lO1xuXG5cdH1cblxuXHRfc2V0RW5kaW5ncyggYXRTdGFydCwgYXRFbmQsIHBpbmdQb25nICkge1xuXG5cdFx0Y29uc3Qgc2V0dGluZ3MgPSB0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdFx0aWYgKCBwaW5nUG9uZyApIHtcblxuXHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBaZXJvU2xvcGVFbmRpbmc7XG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSBaZXJvU2xvcGVFbmRpbmc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBhc3N1bWluZyBmb3IgTG9vcE9uY2UgYXRTdGFydCA9PSBhdEVuZCA9PSB0cnVlXG5cblx0XHRcdGlmICggYXRTdGFydCApIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IHRoaXMuemVyb1Nsb3BlQXRTdGFydCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBXcmFwQXJvdW5kRW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXRFbmQgKSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kID0gdGhpcy56ZXJvU2xvcGVBdEVuZCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kIFx0ID0gV3JhcEFyb3VuZEVuZGluZztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCB3ZWlnaHROb3csIHdlaWdodFRoZW4gKSB7XG5cblx0XHRjb25zdCBtaXhlciA9IHRoaXMuX21peGVyLCBub3cgPSBtaXhlci50aW1lO1xuXHRcdGxldCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRpbWVzID0gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zLFxuXHRcdFx0dmFsdWVzID0gaW50ZXJwb2xhbnQuc2FtcGxlVmFsdWVzO1xuXG5cdFx0dGltZXNbIDAgXSA9IG5vdztcblx0XHR2YWx1ZXNbIDAgXSA9IHdlaWdodE5vdztcblx0XHR0aW1lc1sgMSBdID0gbm93ICsgZHVyYXRpb247XG5cdFx0dmFsdWVzWyAxIF0gPSB3ZWlnaHRUaGVuO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIEFuaW1hdGlvbk1peGVyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuXHRjb25zdHJ1Y3Rvciggcm9vdCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9yb290ID0gcm9vdDtcblx0XHR0aGlzLl9pbml0TWVtb3J5TWFuYWdlcigpO1xuXHRcdHRoaXMuX2FjY3VJbmRleCA9IDA7XG5cdFx0dGhpcy50aW1lID0gMDtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IDEuMDtcblxuXHR9XG5cblx0X2JpbmRBY3Rpb24oIGFjdGlvbiwgcHJvdG90eXBlQWN0aW9uICkge1xuXG5cdFx0Y29uc3Qgcm9vdCA9IGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHR0cmFja3MgPSBhY3Rpb24uX2NsaXAudHJhY2tzLFxuXHRcdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXG5cdFx0XHRiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncyxcblx0XHRcdGludGVycG9sYW50cyA9IGFjdGlvbi5faW50ZXJwb2xhbnRzLFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZTtcblxuXHRcdGxldCBiaW5kaW5nc0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nc0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nc0J5TmFtZSA9IHt9O1xuXHRcdFx0YmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0gPSBiaW5kaW5nc0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgdHJhY2sgPSB0cmFja3NbIGkgXSxcblx0XHRcdFx0dHJhY2tOYW1lID0gdHJhY2submFtZTtcblxuXHRcdFx0bGV0IGJpbmRpbmcgPSBiaW5kaW5nc0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cblx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdCsrIGJpbmRpbmcucmVmZXJlbmNlQ291bnQ7XG5cdFx0XHRcdGJpbmRpbmdzWyBpIF0gPSBiaW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gZXhpc3RpbmcgYmluZGluZywgbWFrZSBzdXJlIHRoZSBjYWNoZSBrbm93c1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHQrKyBiaW5kaW5nLnJlZmVyZW5jZUNvdW50O1xuXHRcdFx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgcGF0aCA9IHByb3RvdHlwZUFjdGlvbiAmJiBwcm90b3R5cGVBY3Rpb24uXG5cdFx0XHRcdFx0X3Byb3BlcnR5QmluZGluZ3NbIGkgXS5iaW5kaW5nLnBhcnNlZFBhdGg7XG5cblx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eU1peGVyKFxuXHRcdFx0XHRcdFByb3BlcnR5QmluZGluZy5jcmVhdGUoIHJvb3QsIHRyYWNrTmFtZSwgcGF0aCApLFxuXHRcdFx0XHRcdHRyYWNrLlZhbHVlVHlwZU5hbWUsIHRyYWNrLmdldFZhbHVlU2l6ZSgpICk7XG5cblx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcblx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0YmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0aW50ZXJwb2xhbnRzWyBpIF0ucmVzdWx0QnVmZmVyID0gYmluZGluZy5idWZmZXI7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9hY3RpdmF0ZUFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0aWYgKCAhIHRoaXMuX2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSApIHtcblxuXHRcdFx0aWYgKCBhY3Rpb24uX2NhY2hlSW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBhY3Rpb24gaGFzIGJlZW4gZm9yZ290dGVuIGJ5IHRoZSBjYWNoZSwgYnV0IHRoZSB1c2VyXG5cdFx0XHRcdC8vIGFwcGVhcnMgdG8gYmUgc3RpbGwgdXNpbmcgaXQgLT4gcmViaW5kXG5cblx0XHRcdFx0Y29uc3Qgcm9vdFV1aWQgPSAoIGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QgKS51dWlkLFxuXHRcdFx0XHRcdGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0XHRcdHRoaXMuX2JpbmRBY3Rpb24oIGFjdGlvbixcblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcCAmJiBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnNbIDAgXSApO1xuXG5cdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBpbmNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nLnVzZUNvdW50ICsrID09PSAwICkge1xuXG5cdFx0XHRcdFx0dGhpcy5fbGVuZEJpbmRpbmcoIGJpbmRpbmcgKTtcblx0XHRcdFx0XHRiaW5kaW5nLnNhdmVPcmlnaW5hbFN0YXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2xlbmRBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBkZWNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCAtLSBiaW5kaW5nLnVzZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuX3Rha2VCYWNrQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl90YWtlQmFja0FjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VyXG5cblx0X2luaXRNZW1vcnlNYW5hZ2VyKCkge1xuXG5cdFx0dGhpcy5fYWN0aW9ucyA9IFtdOyAvLyAnbkFjdGl2ZUFjdGlvbnMnIGZvbGxvd2VkIGJ5IGluYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7XG5cblx0XHR0aGlzLl9hY3Rpb25zQnlDbGlwID0ge307XG5cdFx0Ly8gaW5zaWRlOlxuXHRcdC8vIHtcblx0XHQvLyBcdGtub3duQWN0aW9uczogQXJyYXk8IEFuaW1hdGlvbkFjdGlvbiA+IC0gdXNlZCBhcyBwcm90b3R5cGVzXG5cdFx0Ly8gXHRhY3Rpb25CeVJvb3Q6IEFuaW1hdGlvbkFjdGlvbiAtIGxvb2t1cFxuXHRcdC8vIH1cblxuXG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gJ25BY3RpdmVCaW5kaW5ncycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xuXHRcdHRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7XG5cblx0XHR0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPlxuXG5cblx0XHR0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzID0gW107IC8vIHNhbWUgZ2FtZSBhcyBhYm92ZVxuXHRcdHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzID0gMDtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRcdGFjdGlvbnM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9hY3Rpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVBY3Rpb25zO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRiaW5kaW5nczoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Y29udHJvbEludGVycG9sYW50czoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2NvbnRyb2xJbnRlcnBvbGFudHMubGVuZ3RoO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHM7XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzXG5cblx0X2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcblx0XHRyZXR1cm4gaW5kZXggIT09IG51bGwgJiYgaW5kZXggPCB0aGlzLl9uQWN0aXZlQWN0aW9ucztcblxuXHR9XG5cblx0X2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApIHtcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7XG5cblx0XHRsZXQgYWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHtcblxuXHRcdFx0XHRrbm93bkFjdGlvbnM6IFsgYWN0aW9uIF0sXG5cdFx0XHRcdGFjdGlvbkJ5Um9vdDoge31cblxuXHRcdFx0fTtcblxuXHRcdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gMDtcblxuXHRcdFx0YWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSA9IGFjdGlvbnNGb3JDbGlwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qga25vd25BY3Rpb25zID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBrbm93bkFjdGlvbnMubGVuZ3RoO1xuXHRcdFx0a25vd25BY3Rpb25zLnB1c2goIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gYWN0aW9ucy5sZW5ndGg7XG5cdFx0YWN0aW9ucy5wdXNoKCBhY3Rpb24gKTtcblxuXHRcdGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSA9IGFjdGlvbjtcblxuXHR9XG5cblx0X3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdLFxuXHRcdFx0Y2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcblxuXHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdGFjdGlvbnMucG9wKCk7XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXG5cblx0XHRjb25zdCBjbGlwVXVpZCA9IGFjdGlvbi5fY2xpcC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0sXG5cdFx0XHRrbm93bkFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zLFxuXG5cdFx0XHRsYXN0S25vd25BY3Rpb24gPVxuXHRcdFx0XHRrbm93bkFjdGlvbnNGb3JDbGlwWyBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCAtIDEgXSxcblxuXHRcdFx0YnlDbGlwQ2FjaGVJbmRleCA9IGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleDtcblxuXHRcdGxhc3RLbm93bkFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IGJ5Q2xpcENhY2hlSW5kZXg7XG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcFsgYnlDbGlwQ2FjaGVJbmRleCBdID0gbGFzdEtub3duQWN0aW9uO1xuXHRcdGtub3duQWN0aW9uc0ZvckNsaXAucG9wKCk7XG5cblx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xuXG5cblx0XHRjb25zdCBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3QsXG5cdFx0XHRyb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQ7XG5cblx0XHRkZWxldGUgYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0ZGVsZXRlIGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHR9XG5cblx0X3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0aWYgKCAtLSBiaW5kaW5nLnJlZmVyZW5jZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdF9sZW5kQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHwgIGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyA+fCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyAgICAgICAgICAgICAgICAgcyAgICAgICAgYVxuXHRcdC8vICAgICAgICAgICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgICAgICAgICAgYSAgICAgICAgc1xuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXG5cblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVBY3Rpb25zICsrLFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0YWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XG5cblx0XHRmaXJzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUFjdGlvbjtcblxuXHR9XG5cblx0X3Rha2VCYWNrQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyAgfCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHw8IGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyAgICAgICAgYSAgICAgICAgc1xuXHRcdC8vICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgcyAgICAgICAgYVxuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVBY3Rpb25zLFxuXG5cdFx0XHRsYXN0QWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YWN0aW9uc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XG5cblx0XHRsYXN0QWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUFjdGlvbjtcblxuXHR9XG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIFByb3BlcnR5TWl4ZXIgb2JqZWN0c1xuXG5cdF9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRsZXQgYmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nQnlOYW1lID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJpbmRpbmdCeU5hbWUgPSB7fTtcblx0XHRcdGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdID0gYmluZGluZztcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBiaW5kaW5ncy5sZW5ndGg7XG5cdFx0YmluZGluZ3MucHVzaCggYmluZGluZyApO1xuXG5cdH1cblxuXHRfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdHByb3BCaW5kaW5nID0gYmluZGluZy5iaW5kaW5nLFxuXHRcdFx0cm9vdFV1aWQgPSBwcm9wQmluZGluZy5yb290Tm9kZS51dWlkLFxuXHRcdFx0dHJhY2tOYW1lID0gcHJvcEJpbmRpbmcucGF0aCxcblx0XHRcdGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdLFxuXG5cdFx0XHRsYXN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGJpbmRpbmdzLmxlbmd0aCAtIDEgXSxcblx0XHRcdGNhY2hlSW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4O1xuXG5cdFx0bGFzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUJpbmRpbmc7XG5cdFx0YmluZGluZ3MucG9wKCk7XG5cblx0XHRkZWxldGUgYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCBiaW5kaW5nQnlOYW1lICkubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRkZWxldGUgYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdF9sZW5kQmluZGluZyggYmluZGluZyApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRwcmV2SW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQmluZGluZ3MgKyssXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0YmluZGluZy5fY2FjaGVJbmRleCA9IGxhc3RBY3RpdmVJbmRleDtcblx0XHRiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0Zmlyc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0YmluZGluZ3NbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUJpbmRpbmc7XG5cblx0fVxuXG5cdF90YWtlQmFja0JpbmRpbmcoIGJpbmRpbmcgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLFxuXG5cdFx0XHRsYXN0QWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdGxhc3RBY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVCaW5kaW5nO1xuXG5cdH1cblxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VtZW50IG9mIEludGVycG9sYW50cyBmb3Igd2VpZ2h0IGFuZCB0aW1lIHNjYWxlXG5cblx0X2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKSB7XG5cblx0XHRjb25zdCBpbnRlcnBvbGFudHMgPSB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLFxuXHRcdFx0bGFzdEFjdGl2ZUluZGV4ID0gdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgKys7XG5cblx0XHRsZXQgaW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG5ldyBMaW5lYXJJbnRlcnBvbGFudChcblx0XHRcdFx0bmV3IEZsb2F0MzJBcnJheSggMiApLCBuZXcgRmxvYXQzMkFycmF5KCAyICksXG5cdFx0XHRcdDEsIHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgKTtcblxuXHRcdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdFx0aW50ZXJwb2xhbnRzWyBsYXN0QWN0aXZlSW5kZXggXSA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVycG9sYW50O1xuXG5cdH1cblxuXHRfdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIGludGVycG9sYW50ICkge1xuXG5cdFx0Y29uc3QgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cyxcblx0XHRcdHByZXZJbmRleCA9IGludGVycG9sYW50Ll9fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMsXG5cblx0XHRcdGxhc3RBY3RpdmVJbnRlcnBvbGFudCA9IGludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XG5cblx0XHRpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0aW50ZXJwb2xhbnRzWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGludGVycG9sYW50O1xuXG5cdFx0bGFzdEFjdGl2ZUludGVycG9sYW50Ll9fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRpbnRlcnBvbGFudHNbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUludGVycG9sYW50O1xuXG5cdH1cblxuXHQvLyByZXR1cm4gYW4gYWN0aW9uIGZvciBhIGNsaXAgb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSByb290IHRhcmdldFxuXHQvLyBvYmplY3QgKHRoaXMgbWV0aG9kIGFsbG9jYXRlcyBhIGxvdCBvZiBkeW5hbWljIG1lbW9yeSBpbiBjYXNlIGFcblx0Ly8gcHJldmlvdXNseSB1bmtub3duIGNsaXAvcm9vdCBjb21iaW5hdGlvbiBpcyBzcGVjaWZpZWQpXG5cdGNsaXBBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCwgYmxlbmRNb2RlICkge1xuXG5cdFx0Y29uc3Qgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQ7XG5cblx0XHRsZXQgY2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/IEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcDtcblxuXHRcdGNvbnN0IGNsaXBVdWlkID0gY2xpcE9iamVjdCAhPT0gbnVsbCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXA7XG5cblx0XHRjb25zdCBhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cdFx0bGV0IHByb3RvdHlwZUFjdGlvbiA9IG51bGw7XG5cblx0XHRpZiAoIGJsZW5kTW9kZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIGNsaXBPYmplY3QgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0YmxlbmRNb2RlID0gY2xpcE9iamVjdC5ibGVuZE1vZGU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0YmxlbmRNb2RlID0gTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGV4aXN0aW5nQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGV4aXN0aW5nQWN0aW9uICE9PSB1bmRlZmluZWQgJiYgZXhpc3RpbmdBY3Rpb24uYmxlbmRNb2RlID09PSBibGVuZE1vZGUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGV4aXN0aW5nQWN0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHdlIGtub3cgdGhlIGNsaXAsIHNvIHdlIGRvbid0IGhhdmUgdG8gcGFyc2UgYWxsXG5cdFx0XHQvLyB0aGUgYmluZGluZ3MgYWdhaW4gYnV0IGNhbiBqdXN0IGNvcHlcblx0XHRcdHByb3RvdHlwZUFjdGlvbiA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9uc1sgMCBdO1xuXG5cdFx0XHQvLyBhbHNvLCB0YWtlIHRoZSBjbGlwIGZyb20gdGhlIHByb3RvdHlwZSBhY3Rpb25cblx0XHRcdGlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApXG5cdFx0XHRcdGNsaXBPYmplY3QgPSBwcm90b3R5cGVBY3Rpb24uX2NsaXA7XG5cblx0XHR9XG5cblx0XHQvLyBjbGlwIG11c3QgYmUga25vd24gd2hlbiBzcGVjaWZpZWQgdmlhIHN0cmluZ1xuXHRcdGlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gYWxsb2NhdGUgYWxsIHJlc291cmNlcyByZXF1aXJlZCB0byBydW4gaXRcblx0XHRjb25zdCBuZXdBY3Rpb24gPSBuZXcgQW5pbWF0aW9uQWN0aW9uKCB0aGlzLCBjbGlwT2JqZWN0LCBvcHRpb25hbFJvb3QsIGJsZW5kTW9kZSApO1xuXG5cdFx0dGhpcy5fYmluZEFjdGlvbiggbmV3QWN0aW9uLCBwcm90b3R5cGVBY3Rpb24gKTtcblxuXHRcdC8vIGFuZCBtYWtlIHRoZSBhY3Rpb24ga25vd24gdG8gdGhlIG1lbW9yeSBtYW5hZ2VyXG5cdFx0dGhpcy5fYWRkSW5hY3RpdmVBY3Rpb24oIG5ld0FjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICk7XG5cblx0XHRyZXR1cm4gbmV3QWN0aW9uO1xuXG5cdH1cblxuXHQvLyBnZXQgYW4gZXhpc3RpbmcgYWN0aW9uXG5cdGV4aXN0aW5nQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHRjb25zdCByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcblxuXHRcdFx0Y2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcCxcblxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwT2JqZWN0ID8gY2xpcE9iamVjdC51dWlkIDogY2xpcCxcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdIHx8IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0Ly8gZGVhY3RpdmF0ZXMgYWxsIHByZXZpb3VzbHkgc2NoZWR1bGVkIGFjdGlvbnNcblx0c3RvcEFsbEFjdGlvbigpIHtcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucztcblxuXHRcdGZvciAoIGxldCBpID0gbkFjdGlvbnMgLSAxOyBpID49IDA7IC0tIGkgKSB7XG5cblx0XHRcdGFjdGlvbnNbIGkgXS5zdG9wKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gYWR2YW5jZSB0aGUgdGltZSBhbmQgdXBkYXRlIGFwcGx5IHRoZSBhbmltYXRpb25cblx0dXBkYXRlKCBkZWx0YVRpbWUgKSB7XG5cblx0XHRkZWx0YVRpbWUgKj0gdGhpcy50aW1lU2NhbGU7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdG5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXG5cblx0XHRcdHRpbWUgPSB0aGlzLnRpbWUgKz0gZGVsdGFUaW1lLFxuXHRcdFx0dGltZURpcmVjdGlvbiA9IE1hdGguc2lnbiggZGVsdGFUaW1lICksXG5cblx0XHRcdGFjY3VJbmRleCA9IHRoaXMuX2FjY3VJbmRleCBePSAxO1xuXG5cdFx0Ly8gcnVuIGFjdGl2ZSBhY3Rpb25zXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5BY3Rpb25zOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBhY3Rpb24gPSBhY3Rpb25zWyBpIF07XG5cblx0XHRcdGFjdGlvbi5fdXBkYXRlKCB0aW1lLCBkZWx0YVRpbWUsIHRpbWVEaXJlY3Rpb24sIGFjY3VJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuQmluZGluZ3M7ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uYXBwbHkoIGFjY3VJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIEFsbG93cyB5b3UgdG8gc2VlayB0byBhIHNwZWNpZmljIHRpbWUgaW4gYW4gYW5pbWF0aW9uLlxuXHRzZXRUaW1lKCB0aW1lSW5TZWNvbmRzICkge1xuXG5cdFx0dGhpcy50aW1lID0gMDsgLy8gWmVybyBvdXQgdGltZSBhdHRyaWJ1dGUgZm9yIEFuaW1hdGlvbk1peGVyIG9iamVjdDtcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9hY3Rpb25zLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5fYWN0aW9uc1sgaSBdLnRpbWUgPSAwOyAvLyBaZXJvIG91dCB0aW1lIGF0dHJpYnV0ZSBmb3IgYWxsIGFzc29jaWF0ZWQgQW5pbWF0aW9uQWN0aW9uIG9iamVjdHMuXG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoIHRpbWVJblNlY29uZHMgKTsgLy8gVXBkYXRlIHVzZWQgdG8gc2V0IGV4YWN0IHRpbWUuIFJldHVybnMgXCJ0aGlzXCIgQW5pbWF0aW9uTWl4ZXIgb2JqZWN0LlxuXG5cdH1cblxuXHQvLyByZXR1cm4gdGhpcyBtaXhlcidzIHJvb3QgdGFyZ2V0IG9iamVjdFxuXHRnZXRSb290KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3Jvb3Q7XG5cblx0fVxuXG5cdC8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgY2xpcFxuXHR1bmNhY2hlQ2xpcCggY2xpcCApIHtcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwLnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbm90ZToganVzdCBjYWxsaW5nIF9yZW1vdmVJbmFjdGl2ZUFjdGlvbiB3b3VsZCBtZXNzIHVwIHRoZVxuXHRcdFx0Ly8gaXRlcmF0aW9uIHN0YXRlIGFuZCBhbHNvIHJlcXVpcmUgdXBkYXRpbmcgdGhlIHN0YXRlIHdlIGNhblxuXHRcdFx0Ly8ganVzdCB0aHJvdyBhd2F5XG5cblx0XHRcdGNvbnN0IGFjdGlvbnNUb1JlbW92ZSA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9ucztcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYWN0aW9uc1RvUmVtb3ZlLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRjb25zdCBhY3Rpb24gPSBhY3Rpb25zVG9SZW1vdmVbIGkgXTtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0XHRjb25zdCBjYWNoZUluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXHRcdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IG51bGw7XG5cdFx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7XG5cblx0XHRcdFx0bGFzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gY2FjaGVJbmRleDtcblx0XHRcdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdFx0XHRhY3Rpb25zLnBvcCgpO1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBmcmVlIGFsbCByZXNvdXJjZXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIHJvb3QgdGFyZ2V0IG9iamVjdFxuXHR1bmNhY2hlUm9vdCggcm9vdCApIHtcblxuXHRcdGNvbnN0IHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7XG5cblx0XHRmb3IgKCBjb25zdCBjbGlwVXVpZCBpbiBhY3Rpb25zQnlDbGlwICkge1xuXG5cdFx0XHRjb25zdCBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLmFjdGlvbkJ5Um9vdCxcblx0XHRcdFx0YWN0aW9uID0gYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGFjdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nQnlOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IHRyYWNrTmFtZSBpbiBiaW5kaW5nQnlOYW1lICkge1xuXG5cdFx0XHRcdGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcblx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyByZW1vdmUgYSB0YXJnZXRlZCBjbGlwIGZyb20gdGhlIGNhY2hlXG5cdHVuY2FjaGVBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcblxuXHRcdGNvbnN0IGFjdGlvbiA9IHRoaXMuZXhpc3RpbmdBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCApO1xuXG5cdFx0aWYgKCBhY3Rpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5BbmltYXRpb25NaXhlci5wcm90b3R5cGUuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCAxICk7XG5cbmNsYXNzIFVuaWZvcm0ge1xuXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogVHlwZSBwYXJhbWV0ZXIgaXMgbm8gbG9uZ2VyIG5lZWRlZC4nICk7XG5cdFx0XHR2YWx1ZSA9IGFyZ3VtZW50c1sgMSBdO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgVW5pZm9ybSggdGhpcy52YWx1ZS5jbG9uZSA9PT0gdW5kZWZpbmVkID8gdGhpcy52YWx1ZSA6IHRoaXMudmFsdWUuY2xvbmUoKSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciBleHRlbmRzIEludGVybGVhdmVkQnVmZmVyIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIHN0cmlkZSwgbWVzaFBlckF0dHJpYnV0ZSA9IDEgKSB7XG5cblx0XHRzdXBlciggYXJyYXksIHN0cmlkZSApO1xuXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gbWVzaFBlckF0dHJpYnV0ZTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBzb3VyY2UubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSggZGF0YSApIHtcblxuXHRcdGNvbnN0IGliID0gc3VwZXIuY2xvbmUoIGRhdGEgKTtcblxuXHRcdGliLm1lc2hQZXJBdHRyaWJ1dGUgPSB0aGlzLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gaWI7XG5cblx0fVxuXG5cdHRvSlNPTiggZGF0YSApIHtcblxuXHRcdGNvbnN0IGpzb24gPSBzdXBlci50b0pTT04oIGRhdGEgKTtcblxuXHRcdGpzb24uaXNJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciA9IHRydWU7XG5cdFx0anNvbi5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIGpzb247XG5cblx0fVxuXG59XG5cbkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyID0gdHJ1ZTtcblxuY2xhc3MgR0xCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBidWZmZXIsIHR5cGUsIGl0ZW1TaXplLCBlbGVtZW50U2l6ZSwgY291bnQgKSB7XG5cblx0XHR0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0XHR0aGlzLmVsZW1lbnRTaXplID0gZWxlbWVudFNpemU7XG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcblxuXHR9XG5cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG5cdHNldEJ1ZmZlciggYnVmZmVyICkge1xuXG5cdFx0dGhpcy5idWZmZXIgPSBidWZmZXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0VHlwZSggdHlwZSwgZWxlbWVudFNpemUgKSB7XG5cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuZWxlbWVudFNpemUgPSBlbGVtZW50U2l6ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRJdGVtU2l6ZSggaXRlbVNpemUgKSB7XG5cblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Q291bnQoIGNvdW50ICkge1xuXG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkdMQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5pc0dMQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuY2xhc3MgUmF5Y2FzdGVyIHtcblxuXHRjb25zdHJ1Y3Rvciggb3JpZ2luLCBkaXJlY3Rpb24sIG5lYXIgPSAwLCBmYXIgPSBJbmZpbml0eSApIHtcblxuXHRcdHRoaXMucmF5ID0gbmV3IFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKTtcblx0XHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxuXG5cdFx0dGhpcy5uZWFyID0gbmVhcjtcblx0XHR0aGlzLmZhciA9IGZhcjtcblx0XHR0aGlzLmNhbWVyYSA9IG51bGw7XG5cdFx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cblx0XHR0aGlzLnBhcmFtcyA9IHtcblx0XHRcdE1lc2g6IHt9LFxuXHRcdFx0TGluZTogeyB0aHJlc2hvbGQ6IDEgfSxcblx0XHRcdExPRDoge30sXG5cdFx0XHRQb2ludHM6IHsgdGhyZXNob2xkOiAxIH0sXG5cdFx0XHRTcHJpdGU6IHt9XG5cdFx0fTtcblxuXHR9XG5cblx0c2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHRcdC8vIGRpcmVjdGlvbiBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQgKGZvciBhY2N1cmF0ZSBkaXN0YW5jZSBjYWxjdWxhdGlvbnMpXG5cblx0XHR0aGlzLnJheS5zZXQoIG9yaWdpbiwgZGlyZWN0aW9uICk7XG5cblx0fVxuXG5cdHNldEZyb21DYW1lcmEoIGNvb3JkcywgY2FtZXJhICkge1xuXG5cdFx0aWYgKCBjYW1lcmEuaXNQZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0dGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCBjb29yZHMueCwgY29vcmRzLnksIDAuNSApLnVucHJvamVjdCggY2FtZXJhICkuc3ViKCB0aGlzLnJheS5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblx0XHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0fSBlbHNlIGlmICggY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmFcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5SYXljYXN0ZXI6IFVuc3VwcG9ydGVkIGNhbWVyYSB0eXBlOiAnICsgY2FtZXJhLnR5cGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0aW50ZXJzZWN0T2JqZWN0KCBvYmplY3QsIHJlY3Vyc2l2ZSA9IHRydWUsIGludGVyc2VjdHMgPSBbXSApIHtcblxuXHRcdGludGVyc2VjdE9iamVjdCggb2JqZWN0LCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fVxuXG5cdGludGVyc2VjdE9iamVjdHMoIG9iamVjdHMsIHJlY3Vyc2l2ZSA9IHRydWUsIGludGVyc2VjdHMgPSBbXSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0aW50ZXJzZWN0T2JqZWN0KCBvYmplY3RzWyBpIF0sIHRoaXMsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0fVxuXG5cdFx0aW50ZXJzZWN0cy5zb3J0KCBhc2NTb3J0ICk7XG5cblx0XHRyZXR1cm4gaW50ZXJzZWN0cztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gYXNjU29ydCggYSwgYiApIHtcblxuXHRyZXR1cm4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2U7XG5cbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0T2JqZWN0KCBvYmplY3QsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgcmVjdXJzaXZlICkge1xuXG5cdGlmICggb2JqZWN0LmxheWVycy50ZXN0KCByYXljYXN0ZXIubGF5ZXJzICkgKSB7XG5cblx0XHRvYmplY3QucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XG5cblx0fVxuXG5cdGlmICggcmVjdXJzaXZlID09PSB0cnVlICkge1xuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpbnRlcnNlY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdHJ1ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlZjogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BoZXJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXG4gKlxuICogVGhlIHBvbGFyIGFuZ2xlIChwaGkpIGlzIG1lYXN1cmVkIGZyb20gdGhlIHBvc2l0aXZlIHktYXhpcy4gVGhlIHBvc2l0aXZlIHktYXhpcyBpcyB1cC5cbiAqIFRoZSBhemltdXRoYWwgYW5nbGUgKHRoZXRhKSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB6LWF4aXMuXG4gKi9cblxuY2xhc3MgU3BoZXJpY2FsIHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgcGhpID0gMCwgdGhldGEgPSAwICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBwaGk7IC8vIHBvbGFyIGFuZ2xlXG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhOyAvLyBhemltdXRoYWwgYW5nbGVcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXQoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMucGhpID0gcGhpO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMucGhpID0gb3RoZXIucGhpO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBFUFMgYW5kIFBJLUVQU1xuXHRtYWtlU2FmZSgpIHtcblxuXHRcdGNvbnN0IEVQUyA9IDAuMDAwMDAxO1xuXHRcdHRoaXMucGhpID0gTWF0aC5tYXgoIEVQUywgTWF0aC5taW4oIE1hdGguUEkgLSBFUFMsIHRoaXMucGhpICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tVmVjdG9yMyggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTtcblxuXHR9XG5cblx0c2V0RnJvbUNhcnRlc2lhbkNvb3JkcyggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KCB4ICogeCArIHkgKiB5ICsgeiAqIHogKTtcblxuXHRcdGlmICggdGhpcy5yYWRpdXMgPT09IDAgKSB7XG5cblx0XHRcdHRoaXMudGhldGEgPSAwO1xuXHRcdFx0dGhpcy5waGkgPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy50aGV0YSA9IE1hdGguYXRhbjIoIHgsIHogKTtcblx0XHRcdHRoaXMucGhpID0gTWF0aC5hY29zKCBjbGFtcCggeSAvIHRoaXMucmFkaXVzLCAtIDEsIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlZjogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3lsaW5kcmljYWxfY29vcmRpbmF0ZV9zeXN0ZW1cbiAqL1xuXG5jbGFzcyBDeWxpbmRyaWNhbCB7XG5cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHRoZXRhID0gMCwgeSA9IDAgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1czsgLy8gZGlzdGFuY2UgZnJvbSB0aGUgb3JpZ2luIHRvIGEgcG9pbnQgaW4gdGhlIHgteiBwbGFuZVxuXHRcdHRoaXMudGhldGEgPSB0aGV0YTsgLy8gY291bnRlcmNsb2Nrd2lzZSBhbmdsZSBpbiB0aGUgeC16IHBsYW5lIG1lYXN1cmVkIGluIHJhZGlhbnMgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzXG5cdFx0dGhpcy55ID0geTsgLy8gaGVpZ2h0IGFib3ZlIHRoZSB4LXogcGxhbmVcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXQoIHJhZGl1cywgdGhldGEsIHkgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHR0aGlzLnRoZXRhID0gdGhldGE7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblx0XHR0aGlzLnkgPSBvdGhlci55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21WZWN0b3IzKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyggdi54LCB2LnksIHYueiApO1xuXG5cdH1cblxuXHRzZXRGcm9tQ2FydGVzaWFuQ29vcmRzKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeiAqIHogKTtcblx0XHR0aGlzLnRoZXRhID0gTWF0aC5hdGFuMiggeCwgeiApO1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF92ZWN0b3IkNCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcblxuY2xhc3MgQm94MiB7XG5cblx0Y29uc3RydWN0b3IoIG1pbiA9IG5ldyBWZWN0b3IyKCArIEluZmluaXR5LCArIEluZmluaXR5ICksIG1heCA9IG5ldyBWZWN0b3IyKCAtIEluZmluaXR5LCAtIEluZmluaXR5ICkgKSB7XG5cblx0XHR0aGlzLm1pbiA9IG1pbjtcblx0XHR0aGlzLm1heCA9IG1heDtcblxuXHR9XG5cblx0c2V0KCBtaW4sIG1heCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIG1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIG1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Qb2ludHMoIHBvaW50cyApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIHBvaW50c1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdGNvbnN0IGhhbGZTaXplID0gX3ZlY3RvciQ0LmNvcHkoIHNpemUgKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGNlbnRlciApLmFkZCggaGFsZlNpemUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggYm94ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlRW1wdHkoKSB7XG5cblx0XHR0aGlzLm1pbi54ID0gdGhpcy5taW4ueSA9ICsgSW5maW5pdHk7XG5cdFx0dGhpcy5tYXgueCA9IHRoaXMubWF4LnkgPSAtIEluZmluaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGlzRW1wdHkoKSB7XG5cblx0XHQvLyB0aGlzIGlzIGEgbW9yZSByb2J1c3QgY2hlY2sgZm9yIGVtcHR5IHRoYW4gKCB2b2x1bWUgPD0gMCApIGJlY2F1c2Ugdm9sdW1lIGNhbiBnZXQgcG9zaXRpdmUgd2l0aCB0d28gbmVnYXRpdmUgYXhlc1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXgueCA8IHRoaXMubWluLnggKSB8fCAoIHRoaXMubWF4LnkgPCB0aGlzLm1pbi55ICk7XG5cblx0fVxuXG5cdGdldENlbnRlciggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9XG5cblx0Z2V0U2l6ZSggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCApIDogdGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMubWF4LCB0aGlzLm1pbiApO1xuXG5cdH1cblxuXHRleHBhbmRCeVBvaW50KCBwb2ludCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggcG9pbnQgKTtcblx0XHR0aGlzLm1heC5tYXgoIHBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXhwYW5kQnlWZWN0b3IoIHZlY3RvciApIHtcblxuXHRcdHRoaXMubWluLnN1YiggdmVjdG9yICk7XG5cdFx0dGhpcy5tYXguYWRkKCB2ZWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy5taW4uYWRkU2NhbGFyKCAtIHNjYWxhciApO1xuXHRcdHRoaXMubWF4LmFkZFNjYWxhciggc2NhbGFyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gcG9pbnQueCA8IHRoaXMubWluLnggfHwgcG9pbnQueCA+IHRoaXMubWF4LnggfHxcblx0XHRcdHBvaW50LnkgPCB0aGlzLm1pbi55IHx8IHBvaW50LnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH1cblxuXHRjb250YWluc0JveCggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueTtcblxuXHR9XG5cblx0Z2V0UGFyYW1ldGVyKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gVGhpcyBjYW4gcG90ZW50aWFsbHkgaGF2ZSBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBib3hcblx0XHQvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLlxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXG5cdFx0XHQoIHBvaW50LnggLSB0aGlzLm1pbi54ICkgLyAoIHRoaXMubWF4LnggLSB0aGlzLm1pbi54ICksXG5cdFx0XHQoIHBvaW50LnkgLSB0aGlzLm1pbi55ICkgLyAoIHRoaXMubWF4LnkgLSB0aGlzLm1pbi55IClcblx0XHQpO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHQvLyB1c2luZyA0IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9uc1xuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH1cblxuXHRjbGFtcFBvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdGNvbnN0IGNsYW1wZWRQb2ludCA9IF92ZWN0b3IkNC5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblx0XHRyZXR1cm4gY2xhbXBlZFBvaW50LnN1YiggcG9pbnQgKS5sZW5ndGgoKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0KCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5tYXgoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5taW4oIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR1bmlvbiggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWF4KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGQoIG9mZnNldCApO1xuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHMoIHRoaXMubWluICkgJiYgYm94Lm1heC5lcXVhbHMoIHRoaXMubWF4ICk7XG5cblx0fVxuXG59XG5cbkJveDIucHJvdG90eXBlLmlzQm94MiA9IHRydWU7XG5cbmNvbnN0IF9zdGFydFAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfc3RhcnRFbmQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIExpbmUzIHtcblxuXHRjb25zdHJ1Y3Rvciggc3RhcnQgPSBuZXcgVmVjdG9yMygpLCBlbmQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0dGhpcy5zdGFydCA9IHN0YXJ0O1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXG5cdH1cblxuXHRzZXQoIHN0YXJ0LCBlbmQgKSB7XG5cblx0XHR0aGlzLnN0YXJ0LmNvcHkoIHN0YXJ0ICk7XG5cdFx0dGhpcy5lbmQuY29weSggZW5kICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggbGluZSApIHtcblxuXHRcdHRoaXMuc3RhcnQuY29weSggbGluZS5zdGFydCApO1xuXHRcdHRoaXMuZW5kLmNvcHkoIGxpbmUuZW5kICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q2VudGVyKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMuc3RhcnQsIHRoaXMuZW5kICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH1cblxuXHRkZWx0YSggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLmVuZCwgdGhpcy5zdGFydCApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVNxKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuZW5kICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUbyggdGhpcy5lbmQgKTtcblxuXHR9XG5cblx0YXQoIHQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApO1xuXG5cdH1cblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKCBwb2ludCwgY2xhbXBUb0xpbmUgKSB7XG5cblx0XHRfc3RhcnRQLnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLnN0YXJ0ICk7XG5cdFx0X3N0YXJ0RW5kLnN1YlZlY3RvcnMoIHRoaXMuZW5kLCB0aGlzLnN0YXJ0ICk7XG5cblx0XHRjb25zdCBzdGFydEVuZDIgPSBfc3RhcnRFbmQuZG90KCBfc3RhcnRFbmQgKTtcblx0XHRjb25zdCBzdGFydEVuZF9zdGFydFAgPSBfc3RhcnRFbmQuZG90KCBfc3RhcnRQICk7XG5cblx0XHRsZXQgdCA9IHN0YXJ0RW5kX3N0YXJ0UCAvIHN0YXJ0RW5kMjtcblxuXHRcdGlmICggY2xhbXBUb0xpbmUgKSB7XG5cblx0XHRcdHQgPSBjbGFtcCggdCwgMCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHQ7XG5cblx0fVxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQoIHBvaW50LCBjbGFtcFRvTGluZSwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdCA9IHRoaXMuY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciggcG9pbnQsIGNsYW1wVG9MaW5lICk7XG5cblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtYXRyaXggKSB7XG5cblx0XHR0aGlzLnN0YXJ0LmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cdFx0dGhpcy5lbmQuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIGxpbmUgKSB7XG5cblx0XHRyZXR1cm4gbGluZS5zdGFydC5lcXVhbHMoIHRoaXMuc3RhcnQgKSAmJiBsaW5lLmVuZC5lcXVhbHMoIHRoaXMuZW5kICk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yJDMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIFNwb3RMaWdodEhlbHBlciBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggbGlnaHQsIGNvbG9yICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdFx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0dGhpcy5tYXRyaXggPSBsaWdodC5tYXRyaXhXb3JsZDtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHRjb25zdCBwb3NpdGlvbnMgPSBbXG5cdFx0XHQwLCAwLCAwLCBcdDAsIDAsIDEsXG5cdFx0XHQwLCAwLCAwLCBcdDEsIDAsIDEsXG5cdFx0XHQwLCAwLCAwLFx0LSAxLCAwLCAxLFxuXHRcdFx0MCwgMCwgMCwgXHQwLCAxLCAxLFxuXHRcdFx0MCwgMCwgMCwgXHQwLCAtIDEsIDFcblx0XHRdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMSwgbCA9IDMyOyBpIDwgbDsgaSArKywgaiArKyApIHtcblxuXHRcdFx0Y29uc3QgcDEgPSAoIGkgLyBsICkgKiBNYXRoLlBJICogMjtcblx0XHRcdGNvbnN0IHAyID0gKCBqIC8gbCApICogTWF0aC5QSSAqIDI7XG5cblx0XHRcdHBvc2l0aW9ucy5wdXNoKFxuXHRcdFx0XHRNYXRoLmNvcyggcDEgKSwgTWF0aC5zaW4oIHAxICksIDEsXG5cdFx0XHRcdE1hdGguY29zKCBwMiApLCBNYXRoLnNpbiggcDIgKSwgMVxuXHRcdFx0KTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHR0aGlzLmNvbmUgPSBuZXcgTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0XHR0aGlzLmFkZCggdGhpcy5jb25lICk7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5jb25lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRjb25zdCBjb25lTGVuZ3RoID0gdGhpcy5saWdodC5kaXN0YW5jZSA/IHRoaXMubGlnaHQuZGlzdGFuY2UgOiAxMDAwO1xuXHRcdGNvbnN0IGNvbmVXaWR0aCA9IGNvbmVMZW5ndGggKiBNYXRoLnRhbiggdGhpcy5saWdodC5hbmdsZSApO1xuXG5cdFx0dGhpcy5jb25lLnNjYWxlLnNldCggY29uZVdpZHRoLCBjb25lV2lkdGgsIGNvbmVMZW5ndGggKTtcblxuXHRcdF92ZWN0b3IkMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR0aGlzLmNvbmUubG9va0F0KCBfdmVjdG9yJDMgKTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfYm9uZU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9tYXRyaXhXb3JsZEludiA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuXG5jbGFzcyBTa2VsZXRvbkhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IGJvbmVzID0gZ2V0Qm9uZUxpc3QoIG9iamVjdCApO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3QgY29sb3JzID0gW107XG5cblx0XHRjb25zdCBjb2xvcjEgPSBuZXcgQ29sb3IoIDAsIDAsIDEgKTtcblx0XHRjb25zdCBjb2xvcjIgPSBuZXcgQ29sb3IoIDAsIDEsIDAgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IGJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApO1xuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgZGVwdGhUZXN0OiBmYWxzZSwgZGVwdGhXcml0ZTogZmFsc2UsIHRvbmVNYXBwZWQ6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU2tlbGV0b25IZWxwZXInO1xuXHRcdHRoaXMuaXNTa2VsZXRvbkhlbHBlciA9IHRydWU7XG5cblx0XHR0aGlzLnJvb3QgPSBvYmplY3Q7XG5cdFx0dGhpcy5ib25lcyA9IGJvbmVzO1xuXG5cdFx0dGhpcy5tYXRyaXggPSBvYmplY3QubWF0cml4V29ybGQ7XG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdGNvbnN0IGJvbmVzID0gdGhpcy5ib25lcztcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXG5cdFx0X21hdHJpeFdvcmxkSW52LmNvcHkoIHRoaXMucm9vdC5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IGJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xuXG5cdFx0XHRcdF9ib25lTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIF9tYXRyaXhXb3JsZEludiwgYm9uZS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHRfdmVjdG9yJDIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBfYm9uZU1hdHJpeCApO1xuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGosIF92ZWN0b3IkMi54LCBfdmVjdG9yJDIueSwgX3ZlY3RvciQyLnogKTtcblxuXHRcdFx0XHRfYm9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBfbWF0cml4V29ybGRJbnYsIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdF92ZWN0b3IkMi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIF9ib25lTWF0cml4ICk7XG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaiArIDEsIF92ZWN0b3IkMi54LCBfdmVjdG9yJDIueSwgX3ZlY3RvciQyLnogKTtcblxuXHRcdFx0XHRqICs9IDI7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdH1cblxufVxuXG5cbmZ1bmN0aW9uIGdldEJvbmVMaXN0KCBvYmplY3QgKSB7XG5cblx0Y29uc3QgYm9uZUxpc3QgPSBbXTtcblxuXHRpZiAoIG9iamVjdC5pc0JvbmUgPT09IHRydWUgKSB7XG5cblx0XHRib25lTGlzdC5wdXNoKCBvYmplY3QgKTtcblxuXHR9XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGJvbmVMaXN0LnB1c2guYXBwbHkoIGJvbmVMaXN0LCBnZXRCb25lTGlzdCggb2JqZWN0LmNoaWxkcmVuWyBpIF0gKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYm9uZUxpc3Q7XG5cbn1cblxuY2xhc3MgUG9pbnRMaWdodEhlbHBlciBleHRlbmRzIE1lc2gge1xuXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgc3BoZXJlU2l6ZSwgY29sb3IgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBTcGhlcmVHZW9tZXRyeSggc3BoZXJlU2l6ZSwgNCwgMiApO1xuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXHRcdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRcdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0SGVscGVyJztcblxuXHRcdHRoaXMubWF0cml4ID0gdGhpcy5saWdodC5tYXRyaXhXb3JsZDtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblxuXHRcdC8qXG5cdC8vIFRPRE86IGRlbGV0ZSB0aGlzIGNvbW1lbnQ/XG5cdGNvbnN0IGRpc3RhbmNlR2VvbWV0cnkgPSBuZXcgVEhSRUUuSWNvc2FoZWRyb25HZW9tZXRyeSggMSwgMiApO1xuXHRjb25zdCBkaXN0YW5jZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBoZXhDb2xvciwgZm9nOiBmYWxzZSwgd2lyZWZyYW1lOiB0cnVlLCBvcGFjaXR5OiAwLjEsIHRyYW5zcGFyZW50OiB0cnVlIH0gKTtcblxuXHR0aGlzLmxpZ2h0U3BoZXJlID0gbmV3IFRIUkVFLk1lc2goIGJ1bGJHZW9tZXRyeSwgYnVsYk1hdGVyaWFsICk7XG5cdHRoaXMubGlnaHREaXN0YW5jZSA9IG5ldyBUSFJFRS5NZXNoKCBkaXN0YW5jZUdlb21ldHJ5LCBkaXN0YW5jZU1hdGVyaWFsICk7XG5cblx0Y29uc3QgZCA9IGxpZ2h0LmRpc3RhbmNlO1xuXG5cdGlmICggZCA9PT0gMC4wICkge1xuXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSBmYWxzZTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnNjYWxlLnNldCggZCwgZCwgZCApO1xuXG5cdH1cblxuXHR0aGlzLmFkZCggdGhpcy5saWdodERpc3RhbmNlICk7XG5cdCovXG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0dXBkYXRlKCkge1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdC8qXG5cdFx0Y29uc3QgZCA9IHRoaXMubGlnaHQuZGlzdGFuY2U7XG5cblx0XHRpZiAoIGQgPT09IDAuMCApIHtcblxuXHRcdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gdHJ1ZTtcblx0XHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcblxuXHRcdH1cblx0XHQqL1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfY29sb3IxID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcbmNvbnN0IF9jb2xvcjIgPSAvKkBfX1BVUkVfXyovIG5ldyBDb2xvcigpO1xuXG5jbGFzcyBIZW1pc3BoZXJlTGlnaHRIZWxwZXIgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoIGxpZ2h0LCBzaXplLCBjb2xvciApIHtcblxuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXHRcdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBPY3RhaGVkcm9uR2VvbWV0cnkoIHNpemUgKTtcblx0XHRnZW9tZXRyeS5yb3RhdGVZKCBNYXRoLlBJICogMC41ICk7XG5cblx0XHR0aGlzLm1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXHRcdGlmICggdGhpcy5jb2xvciA9PT0gdW5kZWZpbmVkICkgdGhpcy5tYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSB0cnVlO1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblx0XHRjb25zdCBjb2xvcnMgPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvbi5jb3VudCAqIDMgKTtcblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHRcdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKSApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuY2hpbGRyZW5bIDAgXS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5jaGlsZHJlblsgMCBdLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0dXBkYXRlKCkge1xuXG5cdFx0Y29uc3QgbWVzaCA9IHRoaXMuY2hpbGRyZW5bIDAgXTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgY29sb3JzID0gbWVzaC5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdjb2xvcicgKTtcblxuXHRcdFx0X2NvbG9yMS5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cdFx0XHRfY29sb3IyLmNvcHkoIHRoaXMubGlnaHQuZ3JvdW5kQ29sb3IgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY29sb3JzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjb2xvciA9ICggaSA8ICggbCAvIDIgKSApID8gX2NvbG9yMSA6IF9jb2xvcjI7XG5cblx0XHRcdFx0Y29sb3JzLnNldFhZWiggaSwgY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRtZXNoLmxvb2tBdCggX3ZlY3RvciQxLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApLm5lZ2F0ZSgpICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIEdyaWRIZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdGNvbnN0cnVjdG9yKCBzaXplID0gMTAsIGRpdmlzaW9ucyA9IDEwLCBjb2xvcjEgPSAweDQ0NDQ0NCwgY29sb3IyID0gMHg4ODg4ODggKSB7XG5cblx0XHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSApO1xuXHRcdGNvbG9yMiA9IG5ldyBDb2xvciggY29sb3IyICk7XG5cblx0XHRjb25zdCBjZW50ZXIgPSBkaXZpc2lvbnMgLyAyO1xuXHRcdGNvbnN0IHN0ZXAgPSBzaXplIC8gZGl2aXNpb25zO1xuXHRcdGNvbnN0IGhhbGZTaXplID0gc2l6ZSAvIDI7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdLCBjb2xvcnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaiA9IDAsIGsgPSAtIGhhbGZTaXplOyBpIDw9IGRpdmlzaW9uczsgaSArKywgayArPSBzdGVwICkge1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAtIGhhbGZTaXplLCAwLCBrLCBoYWxmU2l6ZSwgMCwgayApO1xuXHRcdFx0dmVydGljZXMucHVzaCggaywgMCwgLSBoYWxmU2l6ZSwgaywgMCwgaGFsZlNpemUgKTtcblxuXHRcdFx0Y29uc3QgY29sb3IgPSBpID09PSBjZW50ZXIgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiB0cnVlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnR3JpZEhlbHBlcic7XG5cblx0fVxuXG59XG5cbmNsYXNzIFBvbGFyR3JpZEhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEwLCByYWRpYWxzID0gMTYsIGNpcmNsZXMgPSA4LCBkaXZpc2lvbnMgPSA2NCwgY29sb3IxID0gMHg0NDQ0NDQsIGNvbG9yMiA9IDB4ODg4ODg4ICkge1xuXG5cdFx0Y29sb3IxID0gbmV3IENvbG9yKCBjb2xvcjEgKTtcblx0XHRjb2xvcjIgPSBuZXcgQ29sb3IoIGNvbG9yMiApO1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBjb2xvcnMgPSBbXTtcblxuXHRcdC8vIGNyZWF0ZSB0aGUgcmFkaWFsc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHJhZGlhbHM7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHYgPSAoIGkgLyByYWRpYWxzICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHRcdGNvbnN0IHggPSBNYXRoLnNpbiggdiApICogcmFkaXVzO1xuXHRcdFx0Y29uc3QgeiA9IE1hdGguY29zKCB2ICkgKiByYWRpdXM7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIDAsIHogKTtcblxuXHRcdFx0Y29uc3QgY29sb3IgPSAoIGkgJiAxICkgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cdFx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY3JlYXRlIHRoZSBjaXJjbGVzXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gY2lyY2xlczsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgY29sb3IgPSAoIGkgJiAxICkgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRcdGNvbnN0IHIgPSByYWRpdXMgLSAoIHJhZGl1cyAvIGNpcmNsZXMgKiBpICk7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IGRpdmlzaW9uczsgaiArKyApIHtcblxuXHRcdFx0XHQvLyBmaXJzdCB2ZXJ0ZXhcblxuXHRcdFx0XHRsZXQgdiA9ICggaiAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHRcdGxldCB4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHRcdGxldCB6ID0gTWF0aC5jb3MoIHYgKSAqIHI7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHRcdC8vIHNlY29uZCB2ZXJ0ZXhcblxuXHRcdFx0XHR2ID0gKCAoIGogKyAxICkgLyBkaXZpc2lvbnMgKSAqICggTWF0aC5QSSAqIDIgKTtcblxuXHRcdFx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHRcdHogPSBNYXRoLmNvcyggdiApICogcjtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQb2xhckdyaWRIZWxwZXInO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIERpcmVjdGlvbmFsTGlnaHRIZWxwZXIgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoIGxpZ2h0LCBzaXplLCBjb2xvciApIHtcblxuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXHRcdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0XHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxO1xuXG5cdFx0bGV0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggW1xuXHRcdFx0LSBzaXplLCBzaXplLCAwLFxuXHRcdFx0c2l6ZSwgc2l6ZSwgMCxcblx0XHRcdHNpemUsIC0gc2l6ZSwgMCxcblx0XHRcdC0gc2l6ZSwgLSBzaXplLCAwLFxuXHRcdFx0LSBzaXplLCBzaXplLCAwXG5cdFx0XSwgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHR0aGlzLmxpZ2h0UGxhbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdFx0dGhpcy5hZGQoIHRoaXMubGlnaHRQbGFuZSApO1xuXG5cdFx0Z2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIDAsIDAsIDAsIDAsIDAsIDEgXSwgMyApICk7XG5cblx0XHR0aGlzLnRhcmdldExpbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdFx0dGhpcy5hZGQoIHRoaXMudGFyZ2V0TGluZSApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMubGlnaHRQbGFuZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHR0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdF92MS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRfdjIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdF92My5zdWJWZWN0b3JzKCBfdjIsIF92MSApO1xuXG5cdFx0dGhpcy5saWdodFBsYW5lLmxvb2tBdCggX3YyICk7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXHRcdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblx0XHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnRhcmdldExpbmUubG9va0F0KCBfdjIgKTtcblx0XHR0aGlzLnRhcmdldExpbmUuc2NhbGUueiA9IF92My5sZW5ndGgoKTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3ZlY3RvciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9jYW1lcmEgPSAvKkBfX1BVUkVfXyovIG5ldyBDYW1lcmEoKTtcblxuLyoqXG4gKlx0LSBzaG93cyBmcnVzdHVtLCBsaW5lIG9mIHNpZ2h0IGFuZCB1cCBvZiB0aGUgY2FtZXJhXG4gKlx0LSBzdWl0YWJsZSBmb3IgZmFzdCB1cGRhdGVzXG4gKiBcdC0gYmFzZWQgb24gZnJ1c3R1bSB2aXN1YWxpemF0aW9uIGluIGxpZ2h0Z2wuanMgc2hhZG93bWFwIGV4YW1wbGVcbiAqXHRcdGh0dHBzOi8vZ2l0aHViLmNvbS9ldmFudy9saWdodGdsLmpzL2Jsb2IvbWFzdGVyL3Rlc3RzL3NoYWRvd21hcC5odG1sXG4gKi9cblxuY2xhc3MgQ2FtZXJhSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcblxuXHRjb25zdHJ1Y3RvciggY2FtZXJhICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYsIHZlcnRleENvbG9yczogdHJ1ZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBjb2xvcnMgPSBbXTtcblxuXHRcdGNvbnN0IHBvaW50TWFwID0ge307XG5cblx0XHQvLyBjb2xvcnNcblxuXHRcdGNvbnN0IGNvbG9yRnJ1c3R1bSA9IG5ldyBDb2xvciggMHhmZmFhMDAgKTtcblx0XHRjb25zdCBjb2xvckNvbmUgPSBuZXcgQ29sb3IoIDB4ZmYwMDAwICk7XG5cdFx0Y29uc3QgY29sb3JVcCA9IG5ldyBDb2xvciggMHgwMGFhZmYgKTtcblx0XHRjb25zdCBjb2xvclRhcmdldCA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblx0XHRjb25zdCBjb2xvckNyb3NzID0gbmV3IENvbG9yKCAweDMzMzMzMyApO1xuXG5cdFx0Ly8gbmVhclxuXG5cdFx0YWRkTGluZSggJ24xJywgJ24yJywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ24yJywgJ240JywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ240JywgJ24zJywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ24zJywgJ24xJywgY29sb3JGcnVzdHVtICk7XG5cblx0XHQvLyBmYXJcblxuXHRcdGFkZExpbmUoICdmMScsICdmMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRcdGFkZExpbmUoICdmMicsICdmNCcsIGNvbG9yRnJ1c3R1bSApO1xuXHRcdGFkZExpbmUoICdmNCcsICdmMycsIGNvbG9yRnJ1c3R1bSApO1xuXHRcdGFkZExpbmUoICdmMycsICdmMScsIGNvbG9yRnJ1c3R1bSApO1xuXG5cdFx0Ly8gc2lkZXNcblxuXHRcdGFkZExpbmUoICduMScsICdmMScsIGNvbG9yRnJ1c3R1bSApO1xuXHRcdGFkZExpbmUoICduMicsICdmMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRcdGFkZExpbmUoICduMycsICdmMycsIGNvbG9yRnJ1c3R1bSApO1xuXHRcdGFkZExpbmUoICduNCcsICdmNCcsIGNvbG9yRnJ1c3R1bSApO1xuXG5cdFx0Ly8gY29uZVxuXG5cdFx0YWRkTGluZSggJ3AnLCAnbjEnLCBjb2xvckNvbmUgKTtcblx0XHRhZGRMaW5lKCAncCcsICduMicsIGNvbG9yQ29uZSApO1xuXHRcdGFkZExpbmUoICdwJywgJ24zJywgY29sb3JDb25lICk7XG5cdFx0YWRkTGluZSggJ3AnLCAnbjQnLCBjb2xvckNvbmUgKTtcblxuXHRcdC8vIHVwXG5cblx0XHRhZGRMaW5lKCAndTEnLCAndTInLCBjb2xvclVwICk7XG5cdFx0YWRkTGluZSggJ3UyJywgJ3UzJywgY29sb3JVcCApO1xuXHRcdGFkZExpbmUoICd1MycsICd1MScsIGNvbG9yVXAgKTtcblxuXHRcdC8vIHRhcmdldFxuXG5cdFx0YWRkTGluZSggJ2MnLCAndCcsIGNvbG9yVGFyZ2V0ICk7XG5cdFx0YWRkTGluZSggJ3AnLCAnYycsIGNvbG9yQ3Jvc3MgKTtcblxuXHRcdC8vIGNyb3NzXG5cblx0XHRhZGRMaW5lKCAnY24xJywgJ2NuMicsIGNvbG9yQ3Jvc3MgKTtcblx0XHRhZGRMaW5lKCAnY24zJywgJ2NuNCcsIGNvbG9yQ3Jvc3MgKTtcblxuXHRcdGFkZExpbmUoICdjZjEnLCAnY2YyJywgY29sb3JDcm9zcyApO1xuXHRcdGFkZExpbmUoICdjZjMnLCAnY2Y0JywgY29sb3JDcm9zcyApO1xuXG5cdFx0ZnVuY3Rpb24gYWRkTGluZSggYSwgYiwgY29sb3IgKSB7XG5cblx0XHRcdGFkZFBvaW50KCBhLCBjb2xvciApO1xuXHRcdFx0YWRkUG9pbnQoIGIsIGNvbG9yICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRQb2ludCggaWQsIGNvbG9yICkge1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHRpZiAoIHBvaW50TWFwWyBpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cG9pbnRNYXBbIGlkIF0gPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwb2ludE1hcFsgaWQgXS5wdXNoKCAoIHZlcnRpY2VzLmxlbmd0aCAvIDMgKSAtIDEgKTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0NhbWVyYUhlbHBlcic7XG5cblx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblx0XHRpZiAoIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXggKSB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHR0aGlzLm1hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZDtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMucG9pbnRNYXAgPSBwb2ludE1hcDtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBwb2ludE1hcCA9IHRoaXMucG9pbnRNYXA7XG5cblx0XHRjb25zdCB3ID0gMSwgaCA9IDE7XG5cblx0XHQvLyB3ZSBuZWVkIGp1c3QgY2FtZXJhIHByb2plY3Rpb24gbWF0cml4IGludmVyc2Vcblx0XHQvLyB3b3JsZCBtYXRyaXggbXVzdCBiZSBpZGVudGl0eVxuXG5cdFx0X2NhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0Ly8gY2VudGVyIC8gdGFyZ2V0XG5cblx0XHRzZXRQb2ludCggJ2MnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndCcsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgMCwgMSApO1xuXG5cdFx0Ly8gbmVhclxuXG5cdFx0c2V0UG9pbnQoICduMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAtIGgsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnbjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCBoLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ240JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCAtIDEgKTtcblxuXHRcdC8vIGZhclxuXG5cdFx0c2V0UG9pbnQoICdmMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAtIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAtIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2YzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2Y0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCAxICk7XG5cblx0XHQvLyB1cFxuXG5cdFx0c2V0UG9pbnQoICd1MScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdyAqIDAuNywgaCAqIDEuMSwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICd1MicsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3ICogMC43LCBoICogMS4xLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ3UzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoICogMiwgLSAxICk7XG5cblx0XHQvLyBjcm9zc1xuXG5cdFx0c2V0UG9pbnQoICdjZjEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgMCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAwLCAxICk7XG5cdFx0c2V0UG9pbnQoICdjZjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIC0gaCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2Y0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoLCAxICk7XG5cblx0XHRzZXRQb2ludCggJ2NuMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAwLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ2NuMicsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdywgMCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGgsIC0gMSApO1xuXG5cdFx0Z2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gc2V0UG9pbnQoIHBvaW50LCBwb2ludE1hcCwgZ2VvbWV0cnksIGNhbWVyYSwgeCwgeSwgeiApIHtcblxuXHRfdmVjdG9yLnNldCggeCwgeSwgeiApLnVucHJvamVjdCggY2FtZXJhICk7XG5cblx0Y29uc3QgcG9pbnRzID0gcG9pbnRNYXBbIHBvaW50IF07XG5cblx0aWYgKCBwb2ludHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cG9zaXRpb24uc2V0WFlaKCBwb2ludHNbIGkgXSwgX3ZlY3Rvci54LCBfdmVjdG9yLnksIF92ZWN0b3IueiApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jb25zdCBfYm94ID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xuXG5jbGFzcyBCb3hIZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIGNvbG9yID0gMHhmZmZmMDAgKSB7XG5cblx0XHRjb25zdCBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KCBbIDAsIDEsIDEsIDIsIDIsIDMsIDMsIDAsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDQsIDAsIDQsIDEsIDUsIDIsIDYsIDMsIDcgXSApO1xuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoIDggKiAzICk7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXG5cdFx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cdFx0dGhpcy50eXBlID0gJ0JveEhlbHBlcic7XG5cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZSggb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBvYmplY3QgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94SGVscGVyOiAudXBkYXRlKCkgaGFzIG5vIGxvbmdlciBhcmd1bWVudHMuJyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfYm94LnNldEZyb21PYmplY3QoIHRoaXMub2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIF9ib3guaXNFbXB0eSgpICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgbWluID0gX2JveC5taW47XG5cdFx0Y29uc3QgbWF4ID0gX2JveC5tYXg7XG5cblx0XHQvKlxuXHRcdFx0NV9fX180XG5cdFx0MS9fX18wL3xcblx0XHR8IDZfX3xfN1xuXHRcdDIvX19fMy9cblxuXHRcdDA6IG1heC54LCBtYXgueSwgbWF4Lnpcblx0XHQxOiBtaW4ueCwgbWF4LnksIG1heC56XG5cdFx0MjogbWluLngsIG1pbi55LCBtYXguelxuXHRcdDM6IG1heC54LCBtaW4ueSwgbWF4Lnpcblx0XHQ0OiBtYXgueCwgbWF4LnksIG1pbi56XG5cdFx0NTogbWluLngsIG1heC55LCBtaW4uelxuXHRcdDY6IG1pbi54LCBtaW4ueSwgbWluLnpcblx0XHQ3OiBtYXgueCwgbWluLnksIG1pbi56XG5cdFx0Ki9cblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGNvbnN0IGFycmF5ID0gcG9zaXRpb24uYXJyYXk7XG5cblx0XHRhcnJheVsgMCBdID0gbWF4Lng7IGFycmF5WyAxIF0gPSBtYXgueTsgYXJyYXlbIDIgXSA9IG1heC56O1xuXHRcdGFycmF5WyAzIF0gPSBtaW4ueDsgYXJyYXlbIDQgXSA9IG1heC55OyBhcnJheVsgNSBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDYgXSA9IG1pbi54OyBhcnJheVsgNyBdID0gbWluLnk7IGFycmF5WyA4IF0gPSBtYXguejtcblx0XHRhcnJheVsgOSBdID0gbWF4Lng7IGFycmF5WyAxMCBdID0gbWluLnk7IGFycmF5WyAxMSBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDEyIF0gPSBtYXgueDsgYXJyYXlbIDEzIF0gPSBtYXgueTsgYXJyYXlbIDE0IF0gPSBtaW4uejtcblx0XHRhcnJheVsgMTUgXSA9IG1pbi54OyBhcnJheVsgMTYgXSA9IG1heC55OyBhcnJheVsgMTcgXSA9IG1pbi56O1xuXHRcdGFycmF5WyAxOCBdID0gbWluLng7IGFycmF5WyAxOSBdID0gbWluLnk7IGFycmF5WyAyMCBdID0gbWluLno7XG5cdFx0YXJyYXlbIDIxIF0gPSBtYXgueDsgYXJyYXlbIDIyIF0gPSBtaW4ueTsgYXJyYXlbIDIzIF0gPSBtaW4uejtcblxuXHRcdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblxuXHR9XG5cblx0c2V0RnJvbU9iamVjdCggb2JqZWN0ICkge1xuXG5cdFx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRMaW5lU2VnbWVudHMucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLm9iamVjdCA9IHNvdXJjZS5vYmplY3Q7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuY2xhc3MgQm94M0hlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIGJveCwgY29sb3IgPSAweGZmZmYwMCApIHtcblxuXHRcdGNvbnN0IGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7XG5cblx0XHRjb25zdCBwb3NpdGlvbnMgPSBbIDEsIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIC0gMSwgMSwgMSwgMSwgLSAxLCAtIDEsIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgMSwgLSAxLCAtIDEgXTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHRnZW9tZXRyeS5zZXRJbmRleCggbmV3IEJ1ZmZlckF0dHJpYnV0ZSggaW5kaWNlcywgMSApICk7XG5cblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcblxuXHRcdHRoaXMuYm94ID0gYm94O1xuXG5cdFx0dGhpcy50eXBlID0gJ0JveDNIZWxwZXInO1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0Y29uc3QgYm94ID0gdGhpcy5ib3g7XG5cblx0XHRpZiAoIGJveC5pc0VtcHR5KCkgKSByZXR1cm47XG5cblx0XHRib3guZ2V0Q2VudGVyKCB0aGlzLnBvc2l0aW9uICk7XG5cblx0XHRib3guZ2V0U2l6ZSggdGhpcy5zY2FsZSApO1xuXG5cdFx0dGhpcy5zY2FsZS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgUGxhbmVIZWxwZXIgZXh0ZW5kcyBMaW5lIHtcblxuXHRjb25zdHJ1Y3RvciggcGxhbmUsIHNpemUgPSAxLCBoZXggPSAweGZmZmYwMCApIHtcblxuXHRcdGNvbnN0IGNvbG9yID0gaGV4O1xuXG5cdFx0Y29uc3QgcG9zaXRpb25zID0gWyAxLCAtIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIC0gMSwgMSwgMSwgMSwgMSwgMCwgMCwgMSwgMCwgMCwgMCBdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQbGFuZUhlbHBlcic7XG5cblx0XHR0aGlzLnBsYW5lID0gcGxhbmU7XG5cblx0XHR0aGlzLnNpemUgPSBzaXplO1xuXG5cdFx0Y29uc3QgcG9zaXRpb25zMiA9IFsgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIC0gMSwgMSBdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkyLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uczIsIDMgKSApO1xuXHRcdGdlb21ldHJ5Mi5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnkyLCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBvcGFjaXR5OiAwLjIsIHRyYW5zcGFyZW50OiB0cnVlLCBkZXB0aFdyaXRlOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApICkgKTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0bGV0IHNjYWxlID0gLSB0aGlzLnBsYW5lLmNvbnN0YW50O1xuXG5cdFx0aWYgKCBNYXRoLmFicyggc2NhbGUgKSA8IDFlLTggKSBzY2FsZSA9IDFlLTg7IC8vIHNpZ24gZG9lcyBub3QgbWF0dGVyXG5cblx0XHR0aGlzLnNjYWxlLnNldCggMC41ICogdGhpcy5zaXplLCAwLjUgKiB0aGlzLnNpemUsIHNjYWxlICk7XG5cblx0XHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuc2lkZSA9ICggc2NhbGUgPCAwICkgPyBCYWNrU2lkZSA6IEZyb250U2lkZTsgLy8gcmVuZGVyZXIgZmxpcHMgc2lkZSB3aGVuIGRldGVybWluYW50IDwgMDsgZmxpcHBpbmcgbm90IHdhbnRlZCBoZXJlXG5cblx0XHR0aGlzLmxvb2tBdCggdGhpcy5wbGFuZS5ub3JtYWwgKTtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfYXhpcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmxldCBfbGluZUdlb21ldHJ5LCBfY29uZUdlb21ldHJ5O1xuXG5jbGFzcyBBcnJvd0hlbHBlciBleHRlbmRzIE9iamVjdDNEIHtcblxuXHQvLyBkaXIgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0Y29uc3RydWN0b3IoIGRpciA9IG5ldyBWZWN0b3IzKCAwLCAwLCAxICksIG9yaWdpbiA9IG5ldyBWZWN0b3IzKCAwLCAwLCAwICksIGxlbmd0aCA9IDEsIGNvbG9yID0gMHhmZmZmMDAsIGhlYWRMZW5ndGggPSBsZW5ndGggKiAwLjIsIGhlYWRXaWR0aCA9IGhlYWRMZW5ndGggKiAwLjIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0Fycm93SGVscGVyJztcblxuXHRcdGlmICggX2xpbmVHZW9tZXRyeSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfbGluZUdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0XHRfbGluZUdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMSwgMCBdLCAzICkgKTtcblxuXHRcdFx0X2NvbmVHZW9tZXRyeSA9IG5ldyBDeWxpbmRlckdlb21ldHJ5KCAwLCAwLjUsIDEsIDUsIDEgKTtcblx0XHRcdF9jb25lR2VvbWV0cnkudHJhbnNsYXRlKCAwLCAtIDAuNSwgMCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBvcmlnaW4gKTtcblxuXHRcdHRoaXMubGluZSA9IG5ldyBMaW5lKCBfbGluZUdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcblx0XHR0aGlzLmxpbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdHRoaXMuYWRkKCB0aGlzLmxpbmUgKTtcblxuXHRcdHRoaXMuY29uZSA9IG5ldyBNZXNoKCBfY29uZUdlb21ldHJ5LCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcblx0XHR0aGlzLmNvbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdHRoaXMuYWRkKCB0aGlzLmNvbmUgKTtcblxuXHRcdHRoaXMuc2V0RGlyZWN0aW9uKCBkaXIgKTtcblx0XHR0aGlzLnNldExlbmd0aCggbGVuZ3RoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcblxuXHR9XG5cblx0c2V0RGlyZWN0aW9uKCBkaXIgKSB7XG5cblx0XHQvLyBkaXIgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHRpZiAoIGRpci55ID4gMC45OTk5OSApIHtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMCwgMCwgMCwgMSApO1xuXG5cdFx0fSBlbHNlIGlmICggZGlyLnkgPCAtIDAuOTk5OTkgKSB7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5zZXQoIDEsIDAsIDAsIDAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9heGlzLnNldCggZGlyLnosIDAsIC0gZGlyLnggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Y29uc3QgcmFkaWFucyA9IE1hdGguYWNvcyggZGlyLnkgKTtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIF9heGlzLCByYWRpYW5zICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldExlbmd0aCggbGVuZ3RoLCBoZWFkTGVuZ3RoID0gbGVuZ3RoICogMC4yLCBoZWFkV2lkdGggPSBoZWFkTGVuZ3RoICogMC4yICkge1xuXG5cdFx0dGhpcy5saW5lLnNjYWxlLnNldCggMSwgTWF0aC5tYXgoIDAuMDAwMSwgbGVuZ3RoIC0gaGVhZExlbmd0aCApLCAxICk7IC8vIHNlZSAjMTc0NThcblx0XHR0aGlzLmxpbmUudXBkYXRlTWF0cml4KCk7XG5cblx0XHR0aGlzLmNvbmUuc2NhbGUuc2V0KCBoZWFkV2lkdGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApO1xuXHRcdHRoaXMuY29uZS5wb3NpdGlvbi55ID0gbGVuZ3RoO1xuXHRcdHRoaXMuY29uZS51cGRhdGVNYXRyaXgoKTtcblxuXHR9XG5cblx0c2V0Q29sb3IoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5saW5lLm1hdGVyaWFsLmNvbG9yLnNldCggY29sb3IgKTtcblx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCBjb2xvciApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIGZhbHNlICk7XG5cblx0XHR0aGlzLmxpbmUuY29weSggc291cmNlLmxpbmUgKTtcblx0XHR0aGlzLmNvbmUuY29weSggc291cmNlLmNvbmUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jbGFzcyBBeGVzSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcblxuXHRjb25zdHJ1Y3Rvciggc2l6ZSA9IDEgKSB7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtcblx0XHRcdDAsIDAsIDAsXHRzaXplLCAwLCAwLFxuXHRcdFx0MCwgMCwgMCxcdDAsIHNpemUsIDAsXG5cdFx0XHQwLCAwLCAwLFx0MCwgMCwgc2l6ZVxuXHRcdF07XG5cblx0XHRjb25zdCBjb2xvcnMgPSBbXG5cdFx0XHQxLCAwLCAwLFx0MSwgMC42LCAwLFxuXHRcdFx0MCwgMSwgMCxcdDAuNiwgMSwgMCxcblx0XHRcdDAsIDAsIDEsXHQwLCAwLjYsIDFcblx0XHRdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0F4ZXNIZWxwZXInO1xuXG5cdH1cblxuXHRzZXRDb2xvcnMoIHhBeGlzQ29sb3IsIHlBeGlzQ29sb3IsIHpBeGlzQ29sb3IgKSB7XG5cblx0XHRjb25zdCBjb2xvciA9IG5ldyBDb2xvcigpO1xuXHRcdGNvbnN0IGFycmF5ID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLmFycmF5O1xuXG5cdFx0Y29sb3Iuc2V0KCB4QXhpc0NvbG9yICk7XG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDAgKTtcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgMyApO1xuXG5cdFx0Y29sb3Iuc2V0KCB5QXhpc0NvbG9yICk7XG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDYgKTtcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgOSApO1xuXG5cdFx0Y29sb3Iuc2V0KCB6QXhpc0NvbG9yICk7XG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDEyICk7XG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDE1ICk7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgU2hhcGVQYXRoIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFwZVBhdGgnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdFx0dGhpcy5zdWJQYXRocyA9IFtdO1xuXHRcdHRoaXMuY3VycmVudFBhdGggPSBudWxsO1xuXG5cdH1cblxuXHRtb3ZlVG8oIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoID0gbmV3IFBhdGgoKTtcblx0XHR0aGlzLnN1YlBhdGhzLnB1c2goIHRoaXMuY3VycmVudFBhdGggKTtcblx0XHR0aGlzLmN1cnJlbnRQYXRoLm1vdmVUbyggeCwgeSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxpbmVUbyggeCwgeSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGgubGluZVRvKCB4LCB5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKCBhQ1B4LCBhQ1B5LCBhWCwgYVkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRiZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5iZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3BsaW5lVGhydSggcHRzICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5zcGxpbmVUaHJ1KCBwdHMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b1NoYXBlcyggaXNDQ1csIG5vSG9sZXMgKSB7XG5cblx0XHRmdW5jdGlvbiB0b1NoYXBlc05vSG9sZXMoIGluU3VicGF0aHMgKSB7XG5cblx0XHRcdGNvbnN0IHNoYXBlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpblN1YnBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdG1wUGF0aCA9IGluU3VicGF0aHNbIGkgXTtcblxuXHRcdFx0XHRjb25zdCB0bXBTaGFwZSA9IG5ldyBTaGFwZSgpO1xuXHRcdFx0XHR0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblxuXHRcdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaXNQb2ludEluc2lkZVBvbHlnb24oIGluUHQsIGluUG9seWdvbiApIHtcblxuXHRcdFx0Y29uc3QgcG9seUxlbiA9IGluUG9seWdvbi5sZW5ndGg7XG5cblx0XHRcdC8vIGluUHQgb24gcG9seWdvbiBjb250b3VyID0+IGltbWVkaWF0ZSBzdWNjZXNzICAgIG9yXG5cdFx0XHQvLyB0b2dnbGluZyBvZiBpbnNpZGUvb3V0c2lkZSBhdCBldmVyeSBzaW5nbGUhIGludGVyc2VjdGlvbiBwb2ludCBvZiBhbiBlZGdlXG5cdFx0XHQvLyAgd2l0aCB0aGUgaG9yaXpvbnRhbCBsaW5lIHRocm91Z2ggaW5QdCwgbGVmdCBvZiBpblB0XG5cdFx0XHQvLyAgbm90IGNvdW50aW5nIGxvd2VyWSBlbmRwb2ludHMgb2YgZWRnZXMgYW5kIHdob2xlIGVkZ2VzIG9uIHRoYXQgbGluZVxuXHRcdFx0bGV0IGluc2lkZSA9IGZhbHNlO1xuXHRcdFx0Zm9yICggbGV0IHAgPSBwb2x5TGVuIC0gMSwgcSA9IDA7IHEgPCBwb2x5TGVuOyBwID0gcSArKyApIHtcblxuXHRcdFx0XHRsZXQgZWRnZUxvd1B0ID0gaW5Qb2x5Z29uWyBwIF07XG5cdFx0XHRcdGxldCBlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBxIF07XG5cblx0XHRcdFx0bGV0IGVkZ2VEeCA9IGVkZ2VIaWdoUHQueCAtIGVkZ2VMb3dQdC54O1xuXHRcdFx0XHRsZXQgZWRnZUR5ID0gZWRnZUhpZ2hQdC55IC0gZWRnZUxvd1B0Lnk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggZWRnZUR5ICkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdC8vIG5vdCBwYXJhbGxlbFxuXHRcdFx0XHRcdGlmICggZWRnZUR5IDwgMCApIHtcblxuXHRcdFx0XHRcdFx0ZWRnZUxvd1B0ID0gaW5Qb2x5Z29uWyBxIF07IGVkZ2VEeCA9IC0gZWRnZUR4O1xuXHRcdFx0XHRcdFx0ZWRnZUhpZ2hQdCA9IGluUG9seWdvblsgcCBdOyBlZGdlRHkgPSAtIGVkZ2VEeTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggKCBpblB0LnkgPCBlZGdlTG93UHQueSApIHx8ICggaW5QdC55ID4gZWRnZUhpZ2hQdC55ICkgKSBcdFx0Y29udGludWU7XG5cblx0XHRcdFx0XHRpZiAoIGluUHQueSA9PT0gZWRnZUxvd1B0LnkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaW5QdC54ID09PSBlZGdlTG93UHQueCApXHRcdHJldHVyblx0dHJ1ZTtcdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cblx0XHRcdFx0XHRcdC8vIGNvbnRpbnVlO1x0XHRcdFx0Ly8gbm8gaW50ZXJzZWN0aW9uIG9yIGVkZ2VMb3dQdCA9PiBkb2Vzbid0IGNvdW50ICEhIVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgcGVycEVkZ2UgPSBlZGdlRHkgKiAoIGluUHQueCAtIGVkZ2VMb3dQdC54ICkgLSBlZGdlRHggKiAoIGluUHQueSAtIGVkZ2VMb3dQdC55ICk7XG5cdFx0XHRcdFx0XHRpZiAoIHBlcnBFZGdlID09PSAwIClcdFx0XHRcdHJldHVyblx0dHJ1ZTtcdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cblx0XHRcdFx0XHRcdGlmICggcGVycEVkZ2UgPCAwICkgXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdGluc2lkZSA9ICEgaW5zaWRlO1x0XHQvLyB0cnVlIGludGVyc2VjdGlvbiBsZWZ0IG9mIGluUHRcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gcGFyYWxsZWwgb3IgY29sbGluZWFyXG5cdFx0XHRcdFx0aWYgKCBpblB0LnkgIT09IGVkZ2VMb3dQdC55ICkgXHRcdGNvbnRpbnVlO1x0XHRcdC8vIHBhcmFsbGVsXG5cdFx0XHRcdFx0Ly8gZWRnZSBsaWVzIG9uIHRoZSBzYW1lIGhvcml6b250YWwgbGluZSBhcyBpblB0XG5cdFx0XHRcdFx0aWYgKCAoICggZWRnZUhpZ2hQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VMb3dQdC54ICkgKSB8fFxuXHRcdFx0XHRcdFx0ICggKCBlZGdlTG93UHQueCA8PSBpblB0LnggKSAmJiAoIGluUHQueCA8PSBlZGdlSGlnaFB0LnggKSApIClcdFx0cmV0dXJuXHR0cnVlO1x0Ly8gaW5QdDogUG9pbnQgb24gY29udG91ciAhXG5cdFx0XHRcdFx0Ly8gY29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVyblx0aW5zaWRlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaXNDbG9ja1dpc2UgPSBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlO1xuXG5cdFx0Y29uc3Qgc3ViUGF0aHMgPSB0aGlzLnN1YlBhdGhzO1xuXHRcdGlmICggc3ViUGF0aHMubGVuZ3RoID09PSAwICkgcmV0dXJuIFtdO1xuXG5cdFx0aWYgKCBub0hvbGVzID09PSB0cnVlIClcdHJldHVyblx0dG9TaGFwZXNOb0hvbGVzKCBzdWJQYXRocyApO1xuXG5cblx0XHRsZXQgc29saWQsIHRtcFBhdGgsIHRtcFNoYXBlO1xuXHRcdGNvbnN0IHNoYXBlcyA9IFtdO1xuXG5cdFx0aWYgKCBzdWJQYXRocy5sZW5ndGggPT09IDEgKSB7XG5cblx0XHRcdHRtcFBhdGggPSBzdWJQYXRoc1sgMCBdO1xuXHRcdFx0dG1wU2hhcGUgPSBuZXcgU2hhcGUoKTtcblx0XHRcdHRtcFNoYXBlLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XG5cdFx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGhvbGVzRmlyc3QgPSAhIGlzQ2xvY2tXaXNlKCBzdWJQYXRoc1sgMCBdLmdldFBvaW50cygpICk7XG5cdFx0aG9sZXNGaXJzdCA9IGlzQ0NXID8gISBob2xlc0ZpcnN0IDogaG9sZXNGaXJzdDtcblxuXHRcdC8vIGNvbnNvbGUubG9nKFwiSG9sZXMgZmlyc3RcIiwgaG9sZXNGaXJzdCk7XG5cblx0XHRjb25zdCBiZXR0ZXJTaGFwZUhvbGVzID0gW107XG5cdFx0Y29uc3QgbmV3U2hhcGVzID0gW107XG5cdFx0bGV0IG5ld1NoYXBlSG9sZXMgPSBbXTtcblx0XHRsZXQgbWFpbklkeCA9IDA7XG5cdFx0bGV0IHRtcFBvaW50cztcblxuXHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdID0gdW5kZWZpbmVkO1xuXHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXSA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc3ViUGF0aHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dG1wUGF0aCA9IHN1YlBhdGhzWyBpIF07XG5cdFx0XHR0bXBQb2ludHMgPSB0bXBQYXRoLmdldFBvaW50cygpO1xuXHRcdFx0c29saWQgPSBpc0Nsb2NrV2lzZSggdG1wUG9pbnRzICk7XG5cdFx0XHRzb2xpZCA9IGlzQ0NXID8gISBzb2xpZCA6IHNvbGlkO1xuXG5cdFx0XHRpZiAoIHNvbGlkICkge1xuXG5cdFx0XHRcdGlmICggKCAhIGhvbGVzRmlyc3QgKSAmJiAoIG5ld1NoYXBlc1sgbWFpbklkeCBdICkgKVx0bWFpbklkeCArKztcblxuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXSA9IHsgczogbmV3IFNoYXBlKCksIHA6IHRtcFBvaW50cyB9O1xuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXS5zLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXG5cdFx0XHRcdGlmICggaG9sZXNGaXJzdCApXHRtYWluSWR4ICsrO1xuXHRcdFx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0gPSBbXTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjdycsIGkpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXS5wdXNoKCB7IGg6IHRtcFBhdGgsIHA6IHRtcFBvaW50c1sgMCBdIH0gKTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjY3cnLCBpKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gb25seSBIb2xlcz8gLT4gcHJvYmFibHkgYWxsIFNoYXBlcyB3aXRoIHdyb25nIG9yaWVudGF0aW9uXG5cdFx0aWYgKCAhIG5ld1NoYXBlc1sgMCBdIClcdHJldHVyblx0dG9TaGFwZXNOb0hvbGVzKCBzdWJQYXRocyApO1xuXG5cblx0XHRpZiAoIG5ld1NoYXBlcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRsZXQgYW1iaWd1b3VzID0gZmFsc2U7XG5cdFx0XHRsZXQgdG9DaGFuZ2UgPSAwO1xuXG5cdFx0XHRmb3IgKCBsZXQgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHtcblxuXHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzSWR4IF0gPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBsZXQgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzaG8gPSBuZXdTaGFwZUhvbGVzWyBzSWR4IF07XG5cblx0XHRcdFx0Zm9yICggbGV0IGhJZHggPSAwOyBoSWR4IDwgc2hvLmxlbmd0aDsgaElkeCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGhvID0gc2hvWyBoSWR4IF07XG5cdFx0XHRcdFx0bGV0IGhvbGVfdW5hc3NpZ25lZCA9IHRydWU7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgczJJZHggPSAwOyBzMklkeCA8IG5ld1NoYXBlcy5sZW5ndGg7IHMySWR4ICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzUG9pbnRJbnNpZGVQb2x5Z29uKCBoby5wLCBuZXdTaGFwZXNbIHMySWR4IF0ucCApICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggc0lkeCAhPT0gczJJZHggKVx0dG9DaGFuZ2UgKys7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBob2xlX3VuYXNzaWduZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRob2xlX3VuYXNzaWduZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzMklkeCBdLnB1c2goIGhvICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGFtYmlndW91cyA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGhvbGVfdW5hc3NpZ25lZCApIHtcblxuXHRcdFx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdLnB1c2goIGhvICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdG9DaGFuZ2UgPiAwICYmIGFtYmlndW91cyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0bmV3U2hhcGVIb2xlcyA9IGJldHRlclNoYXBlSG9sZXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGxldCB0bXBIb2xlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBuZXdTaGFwZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRtcFNoYXBlID0gbmV3U2hhcGVzWyBpIF0ucztcblx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXHRcdFx0dG1wSG9sZXMgPSBuZXdTaGFwZUhvbGVzWyBpIF07XG5cblx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB0bXBIb2xlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR0bXBTaGFwZS5ob2xlcy5wdXNoKCB0bXBIb2xlc1sgaiBdLmggKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9jb25zb2xlLmxvZyhcInNoYXBlXCIsIHNoYXBlcyk7XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxufVxuXG4vLyBGYXN0IEhhbGYgRmxvYXQgQ29udmVyc2lvbnMsIGh0dHA6Ly93d3cuZm94LXRvb2xraXQub3JnL2Z0cC9mYXN0aGFsZmZsb2F0Y29udmVyc2lvbi5wZGZcblxuY2xhc3MgRGF0YVV0aWxzIHtcblxuXHQvLyBmbG9hdDMyIHRvIGZsb2F0MTZcblxuXHRzdGF0aWMgdG9IYWxmRmxvYXQoIHZhbCApIHtcblxuXHRcdGlmICggTWF0aC5hYnMoIHZhbCApID4gNjU1MDQgKSBjb25zb2xlLndhcm4oICdUSFJFRS5EYXRhVXRpbHMudG9IYWxmRmxvYXQoKTogVmFsdWUgb3V0IG9mIHJhbmdlLicgKTtcblxuXHRcdHZhbCA9IGNsYW1wKCB2YWwsIC0gNjU1MDQsIDY1NTA0ICk7XG5cblx0XHRfZmxvYXRWaWV3WyAwIF0gPSB2YWw7XG5cdFx0Y29uc3QgZiA9IF91aW50MzJWaWV3WyAwIF07XG5cdFx0Y29uc3QgZSA9ICggZiA+PiAyMyApICYgMHgxZmY7XG5cdFx0cmV0dXJuIF9iYXNlVGFibGVbIGUgXSArICggKCBmICYgMHgwMDdmZmZmZiApID4+IF9zaGlmdFRhYmxlWyBlIF0gKTtcblxuXHR9XG5cblx0Ly8gZmxvYXQxNiB0byBmbG9hdDMyXG5cblx0c3RhdGljIGZyb21IYWxmRmxvYXQoIHZhbCApIHtcblxuXHRcdGNvbnN0IG0gPSB2YWwgPj4gMTA7XG5cdFx0X3VpbnQzMlZpZXdbIDAgXSA9IF9tYW50aXNzYVRhYmxlWyBfb2Zmc2V0VGFibGVbIG0gXSArICggdmFsICYgMHgzZmYgKSBdICsgX2V4cG9uZW50VGFibGVbIG0gXTtcblx0XHRyZXR1cm4gX2Zsb2F0Vmlld1sgMCBdO1xuXG5cdH1cblxufVxuXG4vLyBmbG9hdDMyIHRvIGZsb2F0MTYgaGVscGVyc1xuXG5jb25zdCBfYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKCA0ICk7XG5jb25zdCBfZmxvYXRWaWV3ID0gbmV3IEZsb2F0MzJBcnJheSggX2J1ZmZlciApO1xuY29uc3QgX3VpbnQzMlZpZXcgPSBuZXcgVWludDMyQXJyYXkoIF9idWZmZXIgKTtcblxuY29uc3QgX2Jhc2VUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggNTEyICk7XG5jb25zdCBfc2hpZnRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggNTEyICk7XG5cbmZvciAoIGxldCBpID0gMDsgaSA8IDI1NjsgKysgaSApIHtcblxuXHRjb25zdCBlID0gaSAtIDEyNztcblxuXHQvLyB2ZXJ5IHNtYWxsIG51bWJlciAoMCwgLTApXG5cblx0aWYgKCBlIDwgLSAyNyApIHtcblxuXHRcdF9iYXNlVGFibGVbIGkgXSA9IDB4MDAwMDtcblx0XHRfYmFzZVRhYmxlWyBpIHwgMHgxMDAgXSA9IDB4ODAwMDtcblx0XHRfc2hpZnRUYWJsZVsgaSBdID0gMjQ7XG5cdFx0X3NoaWZ0VGFibGVbIGkgfCAweDEwMCBdID0gMjQ7XG5cblx0XHQvLyBzbWFsbCBudW1iZXIgKGRlbm9ybSlcblxuXHR9IGVsc2UgaWYgKCBlIDwgLSAxNCApIHtcblxuXHRcdF9iYXNlVGFibGVbIGkgXSA9IDB4MDQwMCA+PiAoIC0gZSAtIDE0ICk7XG5cdFx0X2Jhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAoIDB4MDQwMCA+PiAoIC0gZSAtIDE0ICkgKSB8IDB4ODAwMDtcblx0XHRfc2hpZnRUYWJsZVsgaSBdID0gLSBlIC0gMTtcblx0XHRfc2hpZnRUYWJsZVsgaSB8IDB4MTAwIF0gPSAtIGUgLSAxO1xuXG5cdFx0Ly8gbm9ybWFsIG51bWJlclxuXG5cdH0gZWxzZSBpZiAoIGUgPD0gMTUgKSB7XG5cblx0XHRfYmFzZVRhYmxlWyBpIF0gPSAoIGUgKyAxNSApIDw8IDEwO1xuXHRcdF9iYXNlVGFibGVbIGkgfCAweDEwMCBdID0gKCAoIGUgKyAxNSApIDw8IDEwICkgfCAweDgwMDA7XG5cdFx0X3NoaWZ0VGFibGVbIGkgXSA9IDEzO1xuXHRcdF9zaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDEzO1xuXG5cdFx0Ly8gbGFyZ2UgbnVtYmVyIChJbmZpbml0eSwgLUluZmluaXR5KVxuXG5cdH0gZWxzZSBpZiAoIGUgPCAxMjggKSB7XG5cblx0XHRfYmFzZVRhYmxlWyBpIF0gPSAweDdjMDA7XG5cdFx0X2Jhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAweGZjMDA7XG5cdFx0X3NoaWZ0VGFibGVbIGkgXSA9IDI0O1xuXHRcdF9zaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDI0O1xuXG5cdFx0Ly8gc3RheSAoTmFOLCBJbmZpbml0eSwgLUluZmluaXR5KVxuXG5cdH0gZWxzZSB7XG5cblx0XHRfYmFzZVRhYmxlWyBpIF0gPSAweDdjMDA7XG5cdFx0X2Jhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAweGZjMDA7XG5cdFx0X3NoaWZ0VGFibGVbIGkgXSA9IDEzO1xuXHRcdF9zaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDEzO1xuXG5cdH1cblxufVxuXG4vLyBmbG9hdDE2IHRvIGZsb2F0MzIgaGVscGVyc1xuXG5jb25zdCBfbWFudGlzc2FUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggMjA0OCApO1xuY29uc3QgX2V4cG9uZW50VGFibGUgPSBuZXcgVWludDMyQXJyYXkoIDY0ICk7XG5jb25zdCBfb2Zmc2V0VGFibGUgPSBuZXcgVWludDMyQXJyYXkoIDY0ICk7XG5cbmZvciAoIGxldCBpID0gMTsgaSA8IDEwMjQ7ICsrIGkgKSB7XG5cblx0bGV0IG0gPSBpIDw8IDEzOyAvLyB6ZXJvIHBhZCBtYW50aXNzYSBiaXRzXG5cdGxldCBlID0gMDsgLy8gemVybyBleHBvbmVudFxuXG5cdC8vIG5vcm1hbGl6ZWRcblx0d2hpbGUgKCAoIG0gJiAweDAwODAwMDAwICkgPT09IDAgKSB7XG5cblx0XHRtIDw8PSAxO1xuXHRcdGUgLT0gMHgwMDgwMDAwMDsgLy8gZGVjcmVtZW50IGV4cG9uZW50XG5cblx0fVxuXG5cdG0gJj0gfiAweDAwODAwMDAwOyAvLyBjbGVhciBsZWFkaW5nIDEgYml0XG5cdGUgKz0gMHgzODgwMDAwMDsgLy8gYWRqdXN0IGJpYXNcblxuXHRfbWFudGlzc2FUYWJsZVsgaSBdID0gbSB8IGU7XG5cbn1cblxuZm9yICggbGV0IGkgPSAxMDI0OyBpIDwgMjA0ODsgKysgaSApIHtcblxuXHRfbWFudGlzc2FUYWJsZVsgaSBdID0gMHgzODAwMDAwMCArICggKCBpIC0gMTAyNCApIDw8IDEzICk7XG5cbn1cblxuZm9yICggbGV0IGkgPSAxOyBpIDwgMzE7ICsrIGkgKSB7XG5cblx0X2V4cG9uZW50VGFibGVbIGkgXSA9IGkgPDwgMjM7XG5cbn1cblxuX2V4cG9uZW50VGFibGVbIDMxIF0gPSAweDQ3ODAwMDAwO1xuX2V4cG9uZW50VGFibGVbIDMyIF0gPSAweDgwMDAwMDAwO1xuZm9yICggbGV0IGkgPSAzMzsgaSA8IDYzOyArKyBpICkge1xuXG5cdF9leHBvbmVudFRhYmxlWyBpIF0gPSAweDgwMDAwMDAwICsgKCAoIGkgLSAzMiApIDw8IDIzICk7XG5cbn1cblxuX2V4cG9uZW50VGFibGVbIDYzIF0gPSAweGM3ODAwMDAwO1xuXG5mb3IgKCBsZXQgaSA9IDE7IGkgPCA2NDsgKysgaSApIHtcblxuXHRpZiAoIGkgIT09IDMyICkge1xuXG5cdFx0X29mZnNldFRhYmxlWyBpIF0gPSAxMDI0O1xuXG5cdH1cblxufVxuXG5jb25zdCBMaW5lU3RyaXAgPSAwO1xuY29uc3QgTGluZVBpZWNlcyA9IDE7XG5jb25zdCBOb0NvbG9ycyA9IDA7XG5jb25zdCBGYWNlQ29sb3JzID0gMTtcbmNvbnN0IFZlcnRleENvbG9ycyA9IDI7XG5cbmZ1bmN0aW9uIE1lc2hGYWNlTWF0ZXJpYWwoIG1hdGVyaWFscyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NZXNoRmFjZU1hdGVyaWFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBhbiBBcnJheSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG1hdGVyaWFscztcblxufVxuXG5mdW5jdGlvbiBNdWx0aU1hdGVyaWFsKCBtYXRlcmlhbHMgPSBbXSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NdWx0aU1hdGVyaWFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBhbiBBcnJheSBpbnN0ZWFkLicgKTtcblx0bWF0ZXJpYWxzLmlzTXVsdGlNYXRlcmlhbCA9IHRydWU7XG5cdG1hdGVyaWFscy5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG5cdG1hdGVyaWFscy5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBtYXRlcmlhbHMuc2xpY2UoKTtcblxuXHR9O1xuXG5cdHJldHVybiBtYXRlcmlhbHM7XG5cbn1cblxuY2xhc3MgUG9pbnRDbG91ZCBleHRlbmRzIFBvaW50cyB7XG5cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlBvaW50Q2xvdWQgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHMuJyApO1xuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgUGFydGljbGUgZXh0ZW5kcyBTcHJpdGUge1xuXG5cdGNvbnN0cnVjdG9yKCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhcnRpY2xlIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuU3ByaXRlLicgKTtcblx0XHRzdXBlciggbWF0ZXJpYWwgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgUGFydGljbGVTeXN0ZW0gZXh0ZW5kcyBQb2ludHMge1xuXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZVN5c3RlbSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy4nICk7XG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBQb2ludENsb3VkTWF0ZXJpYWwgZXh0ZW5kcyBQb2ludHNNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdFx0c3VwZXIoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgUGFydGljbGVCYXNpY01hdGVyaWFsIGV4dGVuZHMgUG9pbnRzTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRcdHN1cGVyKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwgZXh0ZW5kcyBQb2ludHNNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRcdHN1cGVyKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFZlcnRleCBleHRlbmRzIFZlY3RvcjMge1xuXG5cdGNvbnN0cnVjdG9yKCB4LCB5LCB6ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVydGV4IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5WZWN0b3IzIGluc3RlYWQuJyApO1xuXHRcdHN1cGVyKCB4LCB5LCB6ICk7XG5cblx0fVxuXG59XG5cbi8vXG5cbmNsYXNzIER5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5EeW5hbWljQnVmZmVyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCkuc2V0VXNhZ2UoIFRIUkVFLkR5bmFtaWNEcmF3VXNhZ2UgKSBpbnN0ZWFkLicgKTtcblx0XHRzdXBlciggYXJyYXksIGl0ZW1TaXplICk7XG5cdFx0dGhpcy5zZXRVc2FnZSggRHluYW1pY0RyYXdVc2FnZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnQ4QXR0cmlidXRlIGV4dGVuZHMgSW50OEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdFx0c3VwZXIoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBVaW50OEF0dHJpYnV0ZSBleHRlbmRzIFVpbnQ4QnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50OEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRcdHN1cGVyKCBhcnJheSwgaXRlbVNpemUgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVWludDhDbGFtcGVkQXR0cmlidXRlIGV4dGVuZHMgVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDhDbGFtcGVkQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdFx0c3VwZXIoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnQxNkF0dHJpYnV0ZSBleHRlbmRzIEludDE2QnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW50MTZBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQxNkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRcdHN1cGVyKCBhcnJheSwgaXRlbVNpemUgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVWludDE2QXR0cmlidXRlIGV4dGVuZHMgVWludDE2QnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdFx0c3VwZXIoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnQzMkF0dHJpYnV0ZSBleHRlbmRzIEludDMyQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRcdHN1cGVyKCBhcnJheSwgaXRlbVNpemUgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVWludDMyQXR0cmlidXRlIGV4dGVuZHMgVWludDMyQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdFx0c3VwZXIoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBGbG9hdDMyQXR0cmlidXRlIGV4dGVuZHMgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdFx0c3VwZXIoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBGbG9hdDY0QXR0cmlidXRlIGV4dGVuZHMgRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0NjRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDY0QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdFx0c3VwZXIoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG5cdH1cblxufVxuXG4vL1xuXG5DdXJ2ZS5jcmVhdGUgPSBmdW5jdGlvbiAoIGNvbnN0cnVjdCwgZ2V0UG9pbnQgKSB7XG5cblx0Y29uc29sZS5sb2coICdUSFJFRS5DdXJ2ZS5jcmVhdGUoKSBoYXMgYmVlbiBkZXByZWNhdGVkJyApO1xuXG5cdGNvbnN0cnVjdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblx0Y29uc3RydWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdDtcblx0Y29uc3RydWN0LnByb3RvdHlwZS5nZXRQb2ludCA9IGdldFBvaW50O1xuXG5cdHJldHVybiBjb25zdHJ1Y3Q7XG5cbn07XG5cbi8vXG5cblBhdGgucHJvdG90eXBlLmZyb21Qb2ludHMgPSBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXRoOiAuZnJvbVBvaW50cygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21Qb2ludHMoKS4nICk7XG5cdHJldHVybiB0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG59O1xuXG4vL1xuXG5jbGFzcyBBeGlzSGVscGVyIGV4dGVuZHMgQXhlc0hlbHBlciB7XG5cblx0Y29uc3RydWN0b3IoIHNpemUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BeGlzSGVscGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuQXhlc0hlbHBlci4nICk7XG5cdFx0c3VwZXIoIHNpemUgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgQm91bmRpbmdCb3hIZWxwZXIgZXh0ZW5kcyBCb3hIZWxwZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIGNvbG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm91bmRpbmdCb3hIZWxwZXIgaGFzIGJlZW4gZGVwcmVjYXRlZC4gQ3JlYXRpbmcgYSBUSFJFRS5Cb3hIZWxwZXIgaW5zdGVhZC4nICk7XG5cdFx0c3VwZXIoIG9iamVjdCwgY29sb3IgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgRWRnZXNIZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIGhleCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkVkZ2VzSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5FZGdlc0dlb21ldHJ5IGluc3RlYWQuJyApO1xuXHRcdHN1cGVyKCBuZXcgRWRnZXNHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9ICkgKTtcblxuXHR9XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUuc2V0Q29sb3JzID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HcmlkSGVscGVyOiBzZXRDb2xvcnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwYXNzIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQuJyApO1xuXG59O1xuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Ta2VsZXRvbkhlbHBlcjogdXBkYXRlKCkgbm8gbG9uZ2VyIG5lZWRzIHRvIGJlIGNhbGxlZC4nICk7XG5cbn07XG5cbmNsYXNzIFdpcmVmcmFtZUhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIG9iamVjdCwgaGV4ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2lyZWZyYW1lSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblx0XHRzdXBlciggbmV3IFdpcmVmcmFtZUdlb21ldHJ5KCBvYmplY3QuZ2VvbWV0cnkgKSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBoZXggIT09IHVuZGVmaW5lZCA/IGhleCA6IDB4ZmZmZmZmIH0gKSApO1xuXG5cdH1cblxufVxuXG4vL1xuXG5Mb2FkZXIucHJvdG90eXBlLmV4dHJhY3RVcmxCYXNlID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyOiAuZXh0cmFjdFVybEJhc2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIExvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCB1cmwgKTtcblxufTtcblxuTG9hZGVyLkhhbmRsZXJzID0ge1xuXG5cdGFkZDogZnVuY3Rpb24gKCAvKiByZWdleCwgbG9hZGVyICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxvYWRlcjogSGFuZGxlcnMuYWRkKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIExvYWRpbmdNYW5hZ2VyLmFkZEhhbmRsZXIoKSBpbnN0ZWFkLicgKTtcblxuXHR9LFxuXG5cdGdldDogZnVuY3Rpb24gKCAvKiBmaWxlICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxvYWRlcjogSGFuZGxlcnMuZ2V0KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIExvYWRpbmdNYW5hZ2VyLmdldEhhbmRsZXIoKSBpbnN0ZWFkLicgKTtcblxuXHR9XG5cbn07XG5cbmNsYXNzIFhIUkxvYWRlciBleHRlbmRzIEZpbGVMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuWEhSTG9hZGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuRmlsZUxvYWRlci4nICk7XG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgQmluYXJ5VGV4dHVyZUxvYWRlciBleHRlbmRzIERhdGFUZXh0dXJlTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJpbmFyeVRleHR1cmVMb2FkZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5EYXRhVGV4dHVyZUxvYWRlci4nICk7XG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cbn1cblxuLy9cblxuQm94Mi5wcm90b3R5cGUuY2VudGVyID0gZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbkJveDIucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5lbXB0eSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmlzRW1wdHkoKS4nICk7XG5cdHJldHVybiB0aGlzLmlzRW1wdHkoKTtcblxufTtcblxuQm94Mi5wcm90b3R5cGUuaXNJbnRlcnNlY3Rpb25Cb3ggPSBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuaXNJbnRlcnNlY3Rpb25Cb3goKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzQm94KCkuJyApO1xuXHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTtcblxufTtcblxuQm94Mi5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLnNpemUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRTaXplKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRTaXplKCBvcHRpb25hbFRhcmdldCApO1xuXG59O1xuXG4vL1xuXG5Cb3gzLnByb3RvdHlwZS5jZW50ZXIgPSBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldENlbnRlciggb3B0aW9uYWxUYXJnZXQgKTtcblxufTtcblxuQm94My5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpO1xuXG59O1xuXG5Cb3gzLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkJveCA9IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nICk7XG5cdHJldHVybiB0aGlzLmludGVyc2VjdHNCb3goIGJveCApO1xuXG59O1xuXG5Cb3gzLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvblNwaGVyZSA9IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvblNwaGVyZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNTcGhlcmUoKS4nICk7XG5cdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApO1xuXG59O1xuXG5Cb3gzLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldFNpemUoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbi8vXG5cbkV1bGVyLnByb3RvdHlwZS50b1ZlY3RvcjMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkV1bGVyOiAudG9WZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMuc2V0RnJvbUV1bGVyKCkgaW5zdGVhZCcgKTtcblxufTtcblxuXG4vL1xuXG5TcGhlcmUucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwaGVyZTogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpO1xuXG59O1xuXG4vL1xuXG5GcnVzdHVtLnByb3RvdHlwZS5zZXRGcm9tTWF0cml4ID0gZnVuY3Rpb24gKCBtICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZydXN0dW06IC5zZXRGcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoKS4nICk7XG5cdHJldHVybiB0aGlzLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBtICk7XG5cbn07XG5cbi8vXG5cbkxpbmUzLnByb3RvdHlwZS5jZW50ZXIgPSBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbi8vXG5cbk1hdHJpeDMucHJvdG90eXBlLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0ID0gZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5mbGF0dGVuVG9BcnJheU9mZnNldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudG9BcnJheSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGhpcy50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICk7XG5cbn07XG5cbk1hdHJpeDMucHJvdG90eXBlLm11bHRpcGx5VmVjdG9yMyA9IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4MyggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXgzKCB0aGlzICk7XG5cbn07XG5cbk1hdHJpeDMucHJvdG90eXBlLm11bHRpcGx5VmVjdG9yM0FycmF5ID0gZnVuY3Rpb24gKCAvKiBhICovICkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXgzOiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuTWF0cml4My5wcm90b3R5cGUuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggYXR0cmlidXRlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGF0dHJpYnV0ZS5hcHBseU1hdHJpeDMoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gYXR0cmlidXRlLmFwcGx5TWF0cml4MyggdGhpcyApO1xuXG59O1xuXG5NYXRyaXgzLnByb3RvdHlwZS5hcHBseVRvVmVjdG9yM0FycmF5ID0gZnVuY3Rpb24gKCAvKiBhcnJheSwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvVmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbk1hdHJpeDMucHJvdG90eXBlLmdldEludmVyc2UgPSBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBtYXRyaXhJbnYuY29weSggbWF0cml4ICkuaW52ZXJ0KCk7IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGhpcy5jb3B5KCBtYXRyaXggKS5pbnZlcnQoKTtcblxufTtcblxuLy9cblxuTWF0cml4NC5wcm90b3R5cGUuZXh0cmFjdFBvc2l0aW9uID0gZnVuY3Rpb24gKCBtICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5leHRyYWN0UG9zaXRpb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5jb3B5UG9zaXRpb24oKS4nICk7XG5cdHJldHVybiB0aGlzLmNvcHlQb3NpdGlvbiggbSApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5mbGF0dGVuVG9BcnJheU9mZnNldCA9IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZmxhdHRlblRvQXJyYXlPZmZzZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnRvQXJyYXkoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMudG9BcnJheSggYXJyYXksIG9mZnNldCApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZ2V0UG9zaXRpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFZlY3RvcjMoKS5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAzICk7XG5cbn07XG5cbk1hdHJpeDQucHJvdG90eXBlLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24gPSBmdW5jdGlvbiAoIHEgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbigpLicgKTtcblx0cmV0dXJuIHRoaXMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUubXVsdGlwbHlUb0FycmF5ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVRvQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3IzID0gZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3I0ID0gZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yNCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3IzQXJyYXkgPSBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVBeGlzID0gZnVuY3Rpb24gKCB2ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0di50cmFuc2Zvcm1EaXJlY3Rpb24oIHRoaXMgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUuY3Jvc3NWZWN0b3IgPSBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuY3Jvc3NWZWN0b3IoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cbn07XG5cbk1hdHJpeDQucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVYID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVZID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVaID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVCeUF4aXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVCeUF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggYXR0cmlidXRlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGF0dHJpYnV0ZS5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gYXR0cmlidXRlLmFwcGx5TWF0cml4NCggdGhpcyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5hcHBseVRvVmVjdG9yM0FycmF5ID0gZnVuY3Rpb24gKCAvKiBhcnJheSwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5hcHBseVRvVmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbk1hdHJpeDQucHJvdG90eXBlLm1ha2VGcnVzdHVtID0gZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubWFrZUZydXN0dW0oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5nZXRJbnZlcnNlID0gZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmdldEludmVyc2UoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbWF0cml4SW52LmNvcHkoIG1hdHJpeCApLmludmVydCgpOyBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMuY29weSggbWF0cml4ICkuaW52ZXJ0KCk7XG5cbn07XG5cbi8vXG5cblBsYW5lLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkxpbmUgPSBmdW5jdGlvbiAoIGxpbmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5pc0ludGVyc2VjdGlvbkxpbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzTGluZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0xpbmUoIGxpbmUgKTtcblxufTtcblxuLy9cblxuUXVhdGVybmlvbi5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3IzID0gZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBpcyBub3cgdmVjdG9yLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbiApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdmVjdG9yLmFwcGx5UXVhdGVybmlvbiggdGhpcyApO1xuXG59O1xuXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5pbnZlcnNlID0gZnVuY3Rpb24gKCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiAuaW52ZXJzZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gaW52ZXJ0KCkuJyApO1xuXHRyZXR1cm4gdGhpcy5pbnZlcnQoKTtcblxufTtcblxuLy9cblxuUmF5LnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkJveCA9IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTtcblx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveCggYm94ICk7XG5cbn07XG5cblJheS5wcm90b3R5cGUuaXNJbnRlcnNlY3Rpb25QbGFuZSA9IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25QbGFuZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNQbGFuZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApO1xuXG59O1xuXG5SYXkucHJvdG90eXBlLmlzSW50ZXJzZWN0aW9uU3BoZXJlID0gZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25TcGhlcmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzU3BoZXJlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxufTtcblxuLy9cblxuVHJpYW5nbGUucHJvdG90eXBlLmFyZWEgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5hcmVhKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QXJlYSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZ2V0QXJlYSgpO1xuXG59O1xuXG5UcmlhbmdsZS5wcm90b3R5cGUuYmFyeWNvb3JkRnJvbVBvaW50ID0gZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0YXJnZXQgKTtcblxufTtcblxuVHJpYW5nbGUucHJvdG90eXBlLm1pZHBvaW50ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5taWRwb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE1pZHBvaW50KCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRNaWRwb2ludCggdGFyZ2V0ICk7XG5cbn07XG5cblRyaWFuZ2xlLnByb3RvdHlwZW5vcm1hbCA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubm9ybWFsKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Tm9ybWFsKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXROb3JtYWwoIHRhcmdldCApO1xuXG59O1xuXG5UcmlhbmdsZS5wcm90b3R5cGUucGxhbmUgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLnBsYW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0UGxhbmUoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldFBsYW5lKCB0YXJnZXQgKTtcblxufTtcblxuVHJpYW5nbGUuYmFyeWNvb3JkRnJvbVBvaW50ID0gZnVuY3Rpb24gKCBwb2ludCwgYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApO1xuXHRyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgdGFyZ2V0ICk7XG5cbn07XG5cblRyaWFuZ2xlLm5vcm1hbCA9IGZ1bmN0aW9uICggYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubm9ybWFsKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Tm9ybWFsKCkuJyApO1xuXHRyZXR1cm4gVHJpYW5nbGUuZ2V0Tm9ybWFsKCBhLCBiLCBjLCB0YXJnZXQgKTtcblxufTtcblxuLy9cblxuU2hhcGUucHJvdG90eXBlLmV4dHJhY3RBbGxQb2ludHMgPSBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZTogLmV4dHJhY3RBbGxQb2ludHMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmV4dHJhY3RQb2ludHMoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMuZXh0cmFjdFBvaW50cyggZGl2aXNpb25zICk7XG5cbn07XG5cblNoYXBlLnByb3RvdHlwZS5leHRydWRlID0gZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAuZXh0cnVkZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFeHRydWRlR2VvbWV0cnkoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBFeHRydWRlR2VvbWV0cnkoIHRoaXMsIG9wdGlvbnMgKTtcblxufTtcblxuU2hhcGUucHJvdG90eXBlLm1ha2VHZW9tZXRyeSA9IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZTogLm1ha2VHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBTaGFwZUdlb21ldHJ5KCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgU2hhcGVHZW9tZXRyeSggdGhpcywgb3B0aW9ucyApO1xuXG59O1xuXG4vL1xuXG5WZWN0b3IyLnByb3RvdHlwZS5mcm9tQXR0cmlidXRlID0gZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKTtcblxufTtcblxuVmVjdG9yMi5wcm90b3R5cGUuZGlzdGFuY2VUb01hbmhhdHRhbiA9IGZ1bmN0aW9uICggdiApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuZGlzdGFuY2VUb01hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkRpc3RhbmNlVG8oKS4nICk7XG5cdHJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKTtcblxufTtcblxuVmVjdG9yMi5wcm90b3R5cGUubGVuZ3RoTWFuaGF0dGFuID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7XG5cdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG59O1xuXG4vL1xuXG5WZWN0b3IzLnByb3RvdHlwZS5zZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGluc3RlYWQuJyApO1xuXG59O1xuXG5WZWN0b3IzLnByb3RvdHlwZS5zZXRFdWxlckZyb21RdWF0ZXJuaW9uID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUXVhdGVybmlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFdWxlci5zZXRGcm9tUXVhdGVybmlvbigpIGluc3RlYWQuJyApO1xuXG59O1xuXG5WZWN0b3IzLnByb3RvdHlwZS5nZXRQb3NpdGlvbkZyb21NYXRyaXggPSBmdW5jdGlvbiAoIG0gKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmdldFBvc2l0aW9uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhQb3NpdGlvbigpLicgKTtcblx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtICk7XG5cbn07XG5cblZlY3RvcjMucHJvdG90eXBlLmdldFNjYWxlRnJvbU1hdHJpeCA9IGZ1bmN0aW9uICggbSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0U2NhbGVGcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFNjYWxlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4U2NhbGUoIG0gKTtcblxufTtcblxuVmVjdG9yMy5wcm90b3R5cGUuZ2V0Q29sdW1uRnJvbU1hdHJpeCA9IGZ1bmN0aW9uICggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0Q29sdW1uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhDb2x1bW4oKS4nICk7XG5cdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG1hdHJpeCwgaW5kZXggKTtcblxufTtcblxuVmVjdG9yMy5wcm90b3R5cGUuYXBwbHlQcm9qZWN0aW9uID0gZnVuY3Rpb24gKCBtICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5hcHBseVByb2plY3Rpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmFwcGx5TWF0cml4NCggbSApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIG0gKTtcblxufTtcblxuVmVjdG9yMy5wcm90b3R5cGUuZnJvbUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cbn07XG5cblZlY3RvcjMucHJvdG90eXBlLmRpc3RhbmNlVG9NYW5oYXR0YW4gPSBmdW5jdGlvbiAoIHYgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmRpc3RhbmNlVG9NYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5EaXN0YW5jZVRvKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICk7XG5cbn07XG5cblZlY3RvcjMucHJvdG90eXBlLmxlbmd0aE1hbmhhdHRhbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcblxufTtcblxuLy9cblxuVmVjdG9yNC5wcm90b3R5cGUuZnJvbUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cbn07XG5cblZlY3RvcjQucHJvdG90eXBlLmxlbmd0aE1hbmhhdHRhbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcblxufTtcblxuLy9cblxuT2JqZWN0M0QucHJvdG90eXBlLmdldENoaWxkQnlOYW1lID0gZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0Q2hpbGRCeU5hbWUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRPYmplY3RCeU5hbWUoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldE9iamVjdEJ5TmFtZSggbmFtZSApO1xuXG59O1xuXG5PYmplY3QzRC5wcm90b3R5cGUucmVuZGVyRGVwdGggPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5yZW5kZXJEZXB0aCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnJlbmRlck9yZGVyLCBpbnN0ZWFkLicgKTtcblxufTtcblxuT2JqZWN0M0QucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uICggZGlzdGFuY2UsIGF4aXMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC50cmFuc2xhdGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApO1xuXG59O1xuXG5PYmplY3QzRC5wcm90b3R5cGUuZ2V0V29ybGRSb3RhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFJvdGF0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk9iamVjdDNELmdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkgaW5zdGVhZC4nICk7XG5cbn07XG5cbk9iamVjdDNELnByb3RvdHlwZS5hcHBseU1hdHJpeCA9IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuYXBwbHlNYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5hcHBseU1hdHJpeDQoKS4nICk7XG5cdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBPYmplY3QzRC5wcm90b3R5cGUsIHtcblxuXHRldWxlck9yZGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnJvdGF0aW9uLm9yZGVyO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTtcblx0XHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0dXNlUXVhdGVybmlvbjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5NZXNoLnByb3RvdHlwZS5zZXREcmF3TW9kZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWVzaDogLnNldERyYXdNb2RlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIHJlbmRlcmVyIG5vdyBhbHdheXMgYXNzdW1lcyBUSFJFRS5UcmlhbmdsZXNEcmF3TW9kZS4gVHJhbnNmb3JtIHlvdXIgZ2VvbWV0cnkgdmlhIEJ1ZmZlckdlb21ldHJ5VXRpbHMudG9UcmlhbmdsZXNEcmF3TW9kZSgpIGlmIG5lY2Vzc2FyeS4nICk7XG5cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBNZXNoLnByb3RvdHlwZSwge1xuXG5cdGRyYXdNb2RlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NZXNoOiAuZHJhd01vZGUgaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIHJlbmRlcmVyIG5vdyBhbHdheXMgYXNzdW1lcyBUSFJFRS5UcmlhbmdsZXNEcmF3TW9kZS4nICk7XG5cdFx0XHRyZXR1cm4gVHJpYW5nbGVzRHJhd01vZGU7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWVzaDogLmRyYXdNb2RlIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSByZW5kZXJlciBub3cgYWx3YXlzIGFzc3VtZXMgVEhSRUUuVHJpYW5nbGVzRHJhd01vZGUuIFRyYW5zZm9ybSB5b3VyIGdlb21ldHJ5IHZpYSBCdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKSBpZiBuZWNlc3NhcnkuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuU2tpbm5lZE1lc2gucHJvdG90eXBlLmluaXRCb25lcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2tpbm5lZE1lc2g6IGluaXRCb25lcygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG4vL1xuXG5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUuc2V0TGVucyA9IGZ1bmN0aW9uICggZm9jYWxMZW5ndGgsIGZpbG1HYXVnZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5zZXRMZW5zIGlzIGRlcHJlY2F0ZWQuICcgK1xuXHRcdFx0J1VzZSAuc2V0Rm9jYWxMZW5ndGggYW5kIC5maWxtR2F1Z2UgZm9yIGEgcGhvdG9ncmFwaGljIHNldHVwLicgKTtcblxuXHRpZiAoIGZpbG1HYXVnZSAhPT0gdW5kZWZpbmVkICkgdGhpcy5maWxtR2F1Z2UgPSBmaWxtR2F1Z2U7XG5cdHRoaXMuc2V0Rm9jYWxMZW5ndGgoIGZvY2FsTGVuZ3RoICk7XG5cbn07XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBMaWdodC5wcm90b3R5cGUsIHtcblx0b25seVNoYWRvdzoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLm9ubHlTaGFkb3cgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUZvdjoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFGb3YgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmZvdi4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEuZm92ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUxlZnQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTGVmdCBpcyBub3cgLnNoYWRvdy5jYW1lcmEubGVmdC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEubGVmdCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFSaWdodDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFSaWdodCBpcyBub3cgLnNoYWRvdy5jYW1lcmEucmlnaHQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYVRvcDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFUb3AgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnRvcC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEudG9wID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUJvdHRvbToge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFCb3R0b20gaXMgbm93IC5zaGFkb3cuY2FtZXJhLmJvdHRvbS4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEuYm90dG9tID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYU5lYXI6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTmVhciBpcyBub3cgLnNoYWRvdy5jYW1lcmEubmVhci4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEubmVhciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFGYXI6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRmFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mYXIuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmZhciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFWaXNpYmxlOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhVmlzaWJsZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkNhbWVyYUhlbHBlciggbGlnaHQuc2hhZG93LmNhbWVyYSApIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dCaWFzOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0JpYXMgaXMgbm93IC5zaGFkb3cuYmlhcy4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5iaWFzID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0RhcmtuZXNzOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93RGFya25lc3MgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd01hcFdpZHRoOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd01hcFdpZHRoIGlzIG5vdyAuc2hhZG93Lm1hcFNpemUud2lkdGguJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBIZWlnaHQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93TWFwSGVpZ2h0IGlzIG5vdyAuc2hhZG93Lm1hcFNpemUuaGVpZ2h0LicgKTtcblx0XHRcdHRoaXMuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH1cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHtcblxuXHRsZW5ndGg6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuY291bnQgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hcnJheS5sZW5ndGg7XG5cblx0XHR9XG5cdH0sXG5cdGR5bmFtaWM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuZHluYW1pYyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnVzYWdlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudXNhZ2UgPT09IER5bmFtaWNEcmF3VXNhZ2U7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuZHluYW1pYyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnVzYWdlIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5zZXRVc2FnZSggRHluYW1pY0RyYXdVc2FnZSApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5zZXREeW5hbWljID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IC5zZXREeW5hbWljKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5zZXRVc2FnZSgpIGluc3RlYWQuJyApO1xuXHR0aGlzLnNldFVzYWdlKCB2YWx1ZSA9PT0gdHJ1ZSA/IER5bmFtaWNEcmF3VXNhZ2UgOiBTdGF0aWNEcmF3VXNhZ2UgKTtcblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29weUluZGljZXNBcnJheSA9IGZ1bmN0aW9uICggLyogaW5kaWNlcyAqLyApIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuY29weUluZGljZXNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59LFxuXG5CdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLnNldEFycmF5ID0gZnVuY3Rpb24gKCAvKiBhcnJheSAqLyApIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuc2V0QXJyYXkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEJ1ZmZlckdlb21ldHJ5IC5zZXRBdHRyaWJ1dGUgdG8gcmVwbGFjZS9yZXNpemUgYXR0cmlidXRlIGJ1ZmZlcnMnICk7XG5cbn07XG5cbi8vXG5cbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5hZGRJbmRleCA9IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRJbmRleCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEluZGV4KCkuJyApO1xuXHR0aGlzLnNldEluZGV4KCBpbmRleCApO1xuXG59O1xuXG5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuYWRkQXR0cmlidXRlID0gZnVuY3Rpb24gKCBuYW1lLCBhdHRyaWJ1dGUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRBdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRBdHRyaWJ1dGUoKS4nICk7XG5cblx0aWYgKCAhICggYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5pc0J1ZmZlckF0dHJpYnV0ZSApICYmICEgKCBhdHRyaWJ1dGUgJiYgYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgbm93IGV4cGVjdHMgKCBuYW1lLCBhdHRyaWJ1dGUgKS4nICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFyZ3VtZW50c1sgMSBdLCBhcmd1bWVudHNbIDIgXSApICk7XG5cblx0fVxuXG5cdGlmICggbmFtZSA9PT0gJ2luZGV4JyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmFkZEF0dHJpYnV0ZTogVXNlIC5zZXRJbmRleCgpIGZvciBpbmRleCBhdHRyaWJ1dGUuJyApO1xuXHRcdHRoaXMuc2V0SW5kZXgoIGF0dHJpYnV0ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzLnNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlICk7XG5cbn07XG5cbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5hZGREcmF3Q2FsbCA9IGZ1bmN0aW9uICggc3RhcnQsIGNvdW50LCBpbmRleE9mZnNldCApIHtcblxuXHRpZiAoIGluZGV4T2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZERyYXdDYWxsKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIGluZGV4T2Zmc2V0LicgKTtcblxuXHR9XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGREcmF3Q2FsbCgpIGlzIG5vdyAuYWRkR3JvdXAoKS4nICk7XG5cdHRoaXMuYWRkR3JvdXAoIHN0YXJ0LCBjb3VudCApO1xuXG59O1xuXG5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY2xlYXJEcmF3Q2FsbHMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jbGVhckRyYXdDYWxscygpIGlzIG5vdyAuY2xlYXJHcm91cHMoKS4nICk7XG5cdHRoaXMuY2xlYXJHcm91cHMoKTtcblxufTtcblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbXB1dGVPZmZzZXRzID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZU9mZnNldHMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLnJlbW92ZUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmRlbGV0ZUF0dHJpYnV0ZSgpLicgKTtcblxuXHRyZXR1cm4gdGhpcy5kZWxldGVBdHRyaWJ1dGUoIG5hbWUgKTtcblxufTtcblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmFwcGx5TWF0cml4ID0gZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hcHBseU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmFwcGx5TWF0cml4NCgpLicgKTtcblx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSwge1xuXG5cdGRyYXdjYWxsczoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5kcmF3Y2FsbHMgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ3JvdXBzLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmdyb3VwcztcblxuXHRcdH1cblx0fSxcblx0b2Zmc2V0czoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLm9mZnNldHMgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ3JvdXBzLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmdyb3VwcztcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbkludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZS5zZXREeW5hbWljID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcjogLnNldER5bmFtaWMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnNldFVzYWdlKCkgaW5zdGVhZC4nICk7XG5cdHRoaXMuc2V0VXNhZ2UoIHZhbHVlID09PSB0cnVlID8gRHluYW1pY0RyYXdVc2FnZSA6IFN0YXRpY0RyYXdVc2FnZSApO1xuXHRyZXR1cm4gdGhpcztcblxufTtcblxuSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLnNldEFycmF5ID0gZnVuY3Rpb24gKCAvKiBhcnJheSAqLyApIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXI6IC5zZXRBcnJheSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgQnVmZmVyR2VvbWV0cnkgLnNldEF0dHJpYnV0ZSB0byByZXBsYWNlL3Jlc2l6ZSBhdHRyaWJ1dGUgYnVmZmVycycgKTtcblxufTtcblxuLy9cblxuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS5nZXRBcnJheXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogLmdldEFycmF5cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmFkZFNoYXBlTGlzdCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiAuYWRkU2hhcGVMaXN0KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUuYWRkU2hhcGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogLmFkZFNoYXBlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbi8vXG5cblNjZW5lLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TY2VuZTogLmRpc3Bvc2UoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuLy9cblxuVW5pZm9ybS5wcm90b3R5cGUub25VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogLm9uVXBkYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1hdGVyaWFsLnByb3RvdHlwZSwge1xuXG5cdHdyYXBBcm91bmQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwQXJvdW5kIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwQXJvdW5kIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXG5cdG92ZXJkcmF3OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAub3ZlcmRyYXcgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLm92ZXJkcmF3IGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXG5cdHdyYXBSR0I6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwUkdCIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXHRcdFx0cmV0dXJuIG5ldyBDb2xvcigpO1xuXG5cdFx0fVxuXHR9LFxuXG5cdHNoYWRpbmc6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5mbGF0U2hhZGluZyA9ICggdmFsdWUgPT09IEZsYXRTaGFkaW5nICk7XG5cblx0XHR9XG5cdH0sXG5cblx0c3RlbmNpbE1hc2s6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zdGVuY2lsTWFzayBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnN0ZW5jaWxGdW5jTWFzayBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnN0ZW5jaWxGdW5jTWFzaztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnN0ZW5jaWxNYXNrIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuc3RlbmNpbEZ1bmNNYXNrIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5zdGVuY2lsRnVuY01hc2sgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblxuXHR2ZXJ0ZXhUYW5nZW50czoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnZlcnRleFRhbmdlbnRzIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC52ZXJ0ZXhUYW5nZW50cyBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH1cblx0fSxcblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0ZGVyaXZhdGl2ZXM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IC5kZXJpdmF0aXZlcyBoYXMgYmVlbiBtb3ZlZCB0byAuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLiBTaGFkZXJNYXRlcmlhbDogLmRlcml2YXRpdmVzIGhhcyBiZWVuIG1vdmVkIHRvIC5leHRlbnNpb25zLmRlcml2YXRpdmVzLicgKTtcblx0XHRcdHRoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuY2xlYXJUYXJnZXQgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgY29sb3IsIGRlcHRoLCBzdGVuY2lsICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5jbGVhclRhcmdldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2V0UmVuZGVyVGFyZ2V0KCkgYW5kIC5jbGVhcigpIGluc3RlYWQuJyApO1xuXHR0aGlzLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdHRoaXMuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5hbmltYXRlID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYW5pbWF0ZSgpIGlzIG5vdyAuc2V0QW5pbWF0aW9uTG9vcCgpLicgKTtcblx0dGhpcy5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0KCkgaXMgbm93IC5nZXRSZW5kZXJUYXJnZXQoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldFJlbmRlclRhcmdldCgpO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5nZXRNYXhBbmlzb3Ryb3B5ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRNYXhBbmlzb3Ryb3B5KCkgaXMgbm93IC5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpLicgKTtcblx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuZ2V0UHJlY2lzaW9uID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRQcmVjaXNpb24oKSBpcyBub3cgLmNhcGFiaWxpdGllcy5wcmVjaXNpb24uJyApO1xuXHRyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5yZXNldEdMU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnJlc2V0R0xTdGF0ZSgpIGlzIG5vdyAuc3RhdGUucmVzZXQoKS4nICk7XG5cdHJldHVybiB0aGlzLnN0YXRlLnJlc2V0KCk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnN1cHBvcnRzRmxvYXRUZXh0dXJlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3RleHR1cmVfZmxvYXRcXCcgKS4nICk7XG5cdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XFwnICkuJyApO1xuXHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnN1cHBvcnRzU3RhbmRhcmREZXJpdmF0aXZlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzXFwnICkuJyApO1xuXHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcXCcgKS4nICk7XG5cdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXFwnICkuJyApO1xuXHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuc3VwcG9ydHNCbGVuZE1pbk1heCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNCbGVuZE1pbk1heCgpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ0VYVF9ibGVuZF9taW5tYXhcXCcgKS4nICk7XG5cdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcygpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzLicgKTtcblx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5zdXBwb3J0c0luc3RhbmNlZEFycmF5cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNJbnN0YW5jZWRBcnJheXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXFwnICkuJyApO1xuXHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLmVuYWJsZVNjaXNzb3JUZXN0ID0gZnVuY3Rpb24gKCBib29sZWFuICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5lbmFibGVTY2lzc29yVGVzdCgpIGlzIG5vdyAuc2V0U2Npc3NvclRlc3QoKS4nICk7XG5cdHRoaXMuc2V0U2Npc3NvclRlc3QoIGJvb2xlYW4gKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuaW5pdE1hdGVyaWFsID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5pbml0TWF0ZXJpYWwoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuYWRkUHJlUGx1Z2luID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5hZGRQcmVQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuYWRkUG9zdFBsdWdpbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUG9zdFBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS51cGRhdGVTaGFkb3dNYXAgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnVwZGF0ZVNoYWRvd01hcCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5zZXRGYWNlQ3VsbGluZyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0RmFjZUN1bGxpbmcoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuYWxsb2NUZXh0dXJlVW5pdCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWxsb2NUZXh0dXJlVW5pdCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5zZXRUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnNldFRleHR1cmUyRCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZTJEKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnNldFRleHR1cmVDdWJlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlQ3ViZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5nZXRBY3RpdmVNaXBNYXBMZXZlbCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0QWN0aXZlTWlwTWFwTGV2ZWwoKSBpcyBub3cgLmdldEFjdGl2ZU1pcG1hcExldmVsKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xSZW5kZXJlci5wcm90b3R5cGUsIHtcblxuXHRzaGFkb3dNYXBFbmFibGVkOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC5lbmFibGVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBFbmFibGVkIGlzIG5vdyAuc2hhZG93TWFwLmVuYWJsZWQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3dNYXAuZW5hYmxlZCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBUeXBlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC50eXBlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBUeXBlIGlzIG5vdyAuc2hhZG93TWFwLnR5cGUuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3dNYXAudHlwZSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBDdWxsRmFjZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBDdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0Y29udGV4dDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuY29udGV4dCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmdldENvbnRleHQoKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmdldENvbnRleHQoKTtcblxuXHRcdH1cblx0fSxcblx0dnI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnZyIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnhyJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMueHI7XG5cblx0XHR9XG5cdH0sXG5cdGdhbW1hSW5wdXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdhbW1hSW5wdXQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IHRoZSBlbmNvZGluZyBmb3IgdGV4dHVyZXMgdmlhIFRleHR1cmUuZW5jb2RpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2FtbWFJbnB1dCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgdGhlIGVuY29kaW5nIGZvciB0ZXh0dXJlcyB2aWEgVGV4dHVyZS5lbmNvZGluZyBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0Z2FtbWFPdXRwdXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdhbW1hT3V0cHV0IGhhcyBiZWVuIHJlbW92ZWQuIFNldCBXZWJHTFJlbmRlcmVyLm91dHB1dEVuY29kaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nYW1tYU91dHB1dCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgV2ViR0xSZW5kZXJlci5vdXRwdXRFbmNvZGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMub3V0cHV0RW5jb2RpbmcgPSAoIHZhbHVlID09PSB0cnVlICkgPyBzUkdCRW5jb2RpbmcgOiBMaW5lYXJFbmNvZGluZztcblxuXHRcdH1cblx0fSxcblx0dG9uZU1hcHBpbmdXaGl0ZVBvaW50OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC50b25lTWFwcGluZ1doaXRlUG9pbnQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cdFx0XHRyZXR1cm4gMS4wO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnRvbmVNYXBwaW5nV2hpdGVQb2ludCBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH1cblx0fSxcblx0Z2FtbWFGYWN0b3I6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdhbW1hRmFjdG9yIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXHRcdFx0cmV0dXJuIDI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2FtbWFGYWN0b3IgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH1cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFdlYkdMU2hhZG93TWFwLnByb3RvdHlwZSwge1xuXG5cdGN1bGxGYWNlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAuY3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogY3VsbEZhY2UgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAuY3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHJlbmRlclJldmVyc2VTaWRlZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0cmVuZGVyU2luZ2xlU2lkZWQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJTaW5nbGVTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclNpbmdsZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuY2xhc3MgV2ViR0xSZW5kZXJUYXJnZXRDdWJlIGV4dGVuZHMgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0Q3ViZSggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIGlzIG5vdyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQoIHNpemUsIG9wdGlvbnMgKS4nICk7XG5cdFx0c3VwZXIoIHdpZHRoLCBvcHRpb25zICk7XG5cblx0fVxuXG59XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUsIHtcblxuXHR3cmFwUzoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLndyYXBTO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFMgaXMgbm93IC50ZXh0dXJlLndyYXBTLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwUyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHR3cmFwVDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLndyYXBUO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFQgaXMgbm93IC50ZXh0dXJlLndyYXBULicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwVCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRtYWdGaWx0ZXI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLm1hZ0ZpbHRlcjtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1hZ0ZpbHRlciBpcyBub3cgLnRleHR1cmUubWFnRmlsdGVyLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0bWluRmlsdGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5taW5GaWx0ZXI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5taW5GaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1pbkZpbHRlci4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdGFuaXNvdHJvcHk6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5hbmlzb3Ryb3B5IGlzIG5vdyAudGV4dHVyZS5hbmlzb3Ryb3B5LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUuYW5pc290cm9weTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLmFuaXNvdHJvcHkgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0b2Zmc2V0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5vZmZzZXQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5vZmZzZXQgaXMgbm93IC50ZXh0dXJlLm9mZnNldC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUub2Zmc2V0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHJlcGVhdDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUucmVwZWF0O1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAucmVwZWF0IGlzIG5vdyAudGV4dHVyZS5yZXBlYXQuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLnJlcGVhdCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRmb3JtYXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5mb3JtYXQgaXMgbm93IC50ZXh0dXJlLmZvcm1hdC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmZvcm1hdDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmZvcm1hdCBpcyBub3cgLnRleHR1cmUuZm9ybWF0LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5mb3JtYXQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0dHlwZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS50eXBlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAudHlwZSBpcyBub3cgLnRleHR1cmUudHlwZS4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUudHlwZSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRnZW5lcmF0ZU1pcG1hcHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmdlbmVyYXRlTWlwbWFwcyBpcyBub3cgLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbkF1ZGlvLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCBmaWxlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiAubG9hZCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQXVkaW9Mb2FkZXIgaW5zdGVhZC4nICk7XG5cdGNvbnN0IHNjb3BlID0gdGhpcztcblx0Y29uc3QgYXVkaW9Mb2FkZXIgPSBuZXcgQXVkaW9Mb2FkZXIoKTtcblx0YXVkaW9Mb2FkZXIubG9hZCggZmlsZSwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRzY29wZS5zZXRCdWZmZXIoIGJ1ZmZlciApO1xuXG5cdH0gKTtcblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblxuQXVkaW9BbmFseXNlci5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpb0FuYWx5c2VyOiAuZ2V0RGF0YSgpIGlzIG5vdyAuZ2V0RnJlcXVlbmN5RGF0YSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpO1xuXG59O1xuXG4vL1xuXG5DdWJlQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVDdWJlTWFwID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3ViZUNhbWVyYTogLnVwZGF0ZUN1YmVNYXAoKSBpcyBub3cgLnVwZGF0ZSgpLicgKTtcblx0cmV0dXJuIHRoaXMudXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKTtcblxufTtcblxuQ3ViZUNhbWVyYS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3ViZUNhbWVyYTogLmNsZWFyKCkgaXMgbm93IC5yZW5kZXJUYXJnZXQuY2xlYXIoKS4nICk7XG5cdHJldHVybiB0aGlzLnJlbmRlclRhcmdldC5jbGVhciggcmVuZGVyZXIsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG59O1xuXG5JbWFnZVV0aWxzLmNyb3NzT3JpZ2luID0gdW5kZWZpbmVkO1xuXG5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKCB1cmwsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5UZXh0dXJlTG9hZGVyKCkgaW5zdGVhZC4nICk7XG5cblx0Y29uc3QgbG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTtcblx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0Y29uc3QgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmwsIG9uTG9hZCwgdW5kZWZpbmVkLCBvbkVycm9yICk7XG5cblx0aWYgKCBtYXBwaW5nICkgdGV4dHVyZS5tYXBwaW5nID0gbWFwcGluZztcblxuXHRyZXR1cm4gdGV4dHVyZTtcblxufTtcblxuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoIHVybHMsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLicgKTtcblxuXHRjb25zdCBsb2FkZXIgPSBuZXcgQ3ViZVRleHR1cmVMb2FkZXIoKTtcblx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0Y29uc3QgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmxzLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdGlmICggbWFwcGluZyApIHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7XG5cblx0cmV0dXJuIHRleHR1cmU7XG5cbn07XG5cbkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuJyApO1xuXG59O1xuXG5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuJyApO1xuXG59O1xuXG4vL1xuXG5mdW5jdGlvbiBDYW52YXNSZW5kZXJlcigpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQ2FudmFzUmVuZGVyZXIgaGFzIGJlZW4gcmVtb3ZlZCcgKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBKU09OTG9hZGVyKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5KU09OTG9hZGVyIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59XG5cbi8vXG5cbmNvbnN0IFNjZW5lVXRpbHMgPSB7XG5cblx0Y3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdDogZnVuY3Rpb24gKCAvKiBnZW9tZXRyeSwgbWF0ZXJpYWxzICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBwYXJlbnQsIHNjZW5lICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0YXR0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBzY2VuZSwgcGFyZW50ICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH1cblxufTtcblxuLy9cblxuZnVuY3Rpb24gTGVuc0ZsYXJlKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5MZW5zRmxhcmUgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS9vYmplY3RzL0xlbnNmbGFyZS5qcycgKTtcblxufVxuXG4vL1xuXG5jbGFzcyBQYXJhbWV0cmljR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUGFyYW1ldHJpY0dlb21ldHJ5IGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qc20vZ2VvbWV0cmllcy9QYXJhbWV0cmljR2VvbWV0cnkuanMnICk7XG5cdFx0c3VwZXIoKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVGV4dEdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlRleHRHZW9tZXRyeSBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanNtL2dlb21ldHJpZXMvVGV4dEdlb21ldHJ5LmpzJyApO1xuXHRcdHN1cGVyKCk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIEZvbnRMb2FkZXIoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkZvbnRMb2FkZXIgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS9sb2FkZXJzL0ZvbnRMb2FkZXIuanMnICk7XG5cbn1cblxuZnVuY3Rpb24gRm9udCgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRm9udCBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanNtL2xvYWRlcnMvRm9udExvYWRlci5qcycgKTtcblxufVxuXG5mdW5jdGlvbiBJbW1lZGlhdGVSZW5kZXJPYmplY3QoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdCBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufVxuXG5jbGFzcyBXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGEgbm9ybWFsIHJlbmRlciB0YXJnZXQgYW5kIHNldCB0aGUgXCJzYW1wbGVzXCIgcHJvcGVydHkgdG8gZ3JlYXRlciAwIHRvIGVuYWJsZSBtdWx0aXNhbXBsaW5nLicgKTtcblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xuXHRcdHRoaXMuc2FtcGxlcyA9IDQ7XG5cblx0fVxuXG59XG5cbmNsYXNzIERhdGFUZXh0dXJlMkRBcnJheSBleHRlbmRzIERhdGFBcnJheVRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkRhdGFUZXh0dXJlMkRBcnJheSBoYXMgYmVlbiByZW5hbWVkIHRvIERhdGFBcnJheVRleHR1cmUuJyApO1xuXHRcdHN1cGVyKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBEYXRhVGV4dHVyZTNEIGV4dGVuZHMgRGF0YTNEVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRGF0YVRleHR1cmUzRCBoYXMgYmVlbiByZW5hbWVkIHRvIERhdGEzRFRleHR1cmUuJyApO1xuXHRcdHN1cGVyKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXG5cdH1cblxufVxuXG5pZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xuXG5cdF9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdyZWdpc3RlcicsIHsgZGV0YWlsOiB7XG5cdFx0cmV2aXNpb246IFJFVklTSU9OLFxuXHR9IH0gKSApO1xuXG59XG5cbmlmICggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0aWYgKCB3aW5kb3cuX19USFJFRV9fICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnV0FSTklORzogTXVsdGlwbGUgaW5zdGFuY2VzIG9mIFRocmVlLmpzIGJlaW5nIGltcG9ydGVkLicgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0d2luZG93Ll9fVEhSRUVfXyA9IFJFVklTSU9OO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBBQ0VTRmlsbWljVG9uZU1hcHBpbmcsIEFkZEVxdWF0aW9uLCBBZGRPcGVyYXRpb24sIEFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlLCBBZGRpdGl2ZUJsZW5kaW5nLCBBbHBoYUZvcm1hdCwgQWx3YXlzRGVwdGgsIEFsd2F5c1N0ZW5jaWxGdW5jLCBBbWJpZW50TGlnaHQsIEFtYmllbnRMaWdodFByb2JlLCBBbmltYXRpb25DbGlwLCBBbmltYXRpb25Mb2FkZXIsIEFuaW1hdGlvbk1peGVyLCBBbmltYXRpb25PYmplY3RHcm91cCwgQW5pbWF0aW9uVXRpbHMsIEFyY0N1cnZlLCBBcnJheUNhbWVyYSwgQXJyb3dIZWxwZXIsIEF1ZGlvLCBBdWRpb0FuYWx5c2VyLCBBdWRpb0NvbnRleHQsIEF1ZGlvTGlzdGVuZXIsIEF1ZGlvTG9hZGVyLCBBeGVzSGVscGVyLCBBeGlzSGVscGVyLCBCYWNrU2lkZSwgQmFzaWNEZXB0aFBhY2tpbmcsIEJhc2ljU2hhZG93TWFwLCBCaW5hcnlUZXh0dXJlTG9hZGVyLCBCb25lLCBCb29sZWFuS2V5ZnJhbWVUcmFjaywgQm91bmRpbmdCb3hIZWxwZXIsIEJveDIsIEJveDMsIEJveDNIZWxwZXIsIEJveEdlb21ldHJ5IGFzIEJveEJ1ZmZlckdlb21ldHJ5LCBCb3hHZW9tZXRyeSwgQm94SGVscGVyLCBCdWZmZXJBdHRyaWJ1dGUsIEJ1ZmZlckdlb21ldHJ5LCBCdWZmZXJHZW9tZXRyeUxvYWRlciwgQnl0ZVR5cGUsIENhY2hlLCBDYW1lcmEsIENhbWVyYUhlbHBlciwgQ2FudmFzUmVuZGVyZXIsIENhbnZhc1RleHR1cmUsIENhcHN1bGVHZW9tZXRyeSBhcyBDYXBzdWxlQnVmZmVyR2VvbWV0cnksIENhcHN1bGVHZW9tZXRyeSwgQ2F0bXVsbFJvbUN1cnZlMywgQ2luZW9uVG9uZU1hcHBpbmcsIENpcmNsZUdlb21ldHJ5IGFzIENpcmNsZUJ1ZmZlckdlb21ldHJ5LCBDaXJjbGVHZW9tZXRyeSwgQ2xhbXBUb0VkZ2VXcmFwcGluZywgQ2xvY2ssIENvbG9yLCBDb2xvcktleWZyYW1lVHJhY2ssIENvbG9yTWFuYWdlbWVudCwgQ29tcHJlc3NlZFRleHR1cmUsIENvbXByZXNzZWRUZXh0dXJlTG9hZGVyLCBDb25lR2VvbWV0cnkgYXMgQ29uZUJ1ZmZlckdlb21ldHJ5LCBDb25lR2VvbWV0cnksIEN1YmVDYW1lcmEsIEN1YmVSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLCBDdWJlVGV4dHVyZSwgQ3ViZVRleHR1cmVMb2FkZXIsIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLCBDdWJpY0JlemllckN1cnZlLCBDdWJpY0JlemllckN1cnZlMywgQ3ViaWNJbnRlcnBvbGFudCwgQ3VsbEZhY2VCYWNrLCBDdWxsRmFjZUZyb250LCBDdWxsRmFjZUZyb250QmFjaywgQ3VsbEZhY2VOb25lLCBDdXJ2ZSwgQ3VydmVQYXRoLCBDdXN0b21CbGVuZGluZywgQ3VzdG9tVG9uZU1hcHBpbmcsIEN5bGluZGVyR2VvbWV0cnkgYXMgQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSwgQ3lsaW5kZXJHZW9tZXRyeSwgQ3lsaW5kcmljYWwsIERhdGEzRFRleHR1cmUsIERhdGFBcnJheVRleHR1cmUsIERhdGFUZXh0dXJlLCBEYXRhVGV4dHVyZTJEQXJyYXksIERhdGFUZXh0dXJlM0QsIERhdGFUZXh0dXJlTG9hZGVyLCBEYXRhVXRpbHMsIERlY3JlbWVudFN0ZW5jaWxPcCwgRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCwgRGVmYXVsdExvYWRpbmdNYW5hZ2VyLCBEZXB0aEZvcm1hdCwgRGVwdGhTdGVuY2lsRm9ybWF0LCBEZXB0aFRleHR1cmUsIERpcmVjdGlvbmFsTGlnaHQsIERpcmVjdGlvbmFsTGlnaHRIZWxwZXIsIERpc2NyZXRlSW50ZXJwb2xhbnQsIERvZGVjYWhlZHJvbkdlb21ldHJ5IGFzIERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBEb2RlY2FoZWRyb25HZW9tZXRyeSwgRG91YmxlU2lkZSwgRHN0QWxwaGFGYWN0b3IsIERzdENvbG9yRmFjdG9yLCBEeW5hbWljQnVmZmVyQXR0cmlidXRlLCBEeW5hbWljQ29weVVzYWdlLCBEeW5hbWljRHJhd1VzYWdlLCBEeW5hbWljUmVhZFVzYWdlLCBFZGdlc0dlb21ldHJ5LCBFZGdlc0hlbHBlciwgRWxsaXBzZUN1cnZlLCBFcXVhbERlcHRoLCBFcXVhbFN0ZW5jaWxGdW5jLCBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZywgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcsIEV1bGVyLCBFdmVudERpc3BhdGNoZXIsIEV4dHJ1ZGVHZW9tZXRyeSBhcyBFeHRydWRlQnVmZmVyR2VvbWV0cnksIEV4dHJ1ZGVHZW9tZXRyeSwgRmFjZUNvbG9ycywgRmlsZUxvYWRlciwgRmxhdFNoYWRpbmcsIEZsb2F0MTZCdWZmZXJBdHRyaWJ1dGUsIEZsb2F0MzJBdHRyaWJ1dGUsIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUsIEZsb2F0NjRBdHRyaWJ1dGUsIEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUsIEZsb2F0VHlwZSwgRm9nLCBGb2dFeHAyLCBGb250LCBGb250TG9hZGVyLCBGcmFtZWJ1ZmZlclRleHR1cmUsIEZyb250U2lkZSwgRnJ1c3R1bSwgR0xCdWZmZXJBdHRyaWJ1dGUsIEdMU0wxLCBHTFNMMywgR3JlYXRlckRlcHRoLCBHcmVhdGVyRXF1YWxEZXB0aCwgR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmMsIEdyZWF0ZXJTdGVuY2lsRnVuYywgR3JpZEhlbHBlciwgR3JvdXAsIEhhbGZGbG9hdFR5cGUsIEhlbWlzcGhlcmVMaWdodCwgSGVtaXNwaGVyZUxpZ2h0SGVscGVyLCBIZW1pc3BoZXJlTGlnaHRQcm9iZSwgSWNvc2FoZWRyb25HZW9tZXRyeSBhcyBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBJY29zYWhlZHJvbkdlb21ldHJ5LCBJbWFnZUJpdG1hcExvYWRlciwgSW1hZ2VMb2FkZXIsIEltYWdlVXRpbHMsIEltbWVkaWF0ZVJlbmRlck9iamVjdCwgSW5jcmVtZW50U3RlbmNpbE9wLCBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wLCBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUsIEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LCBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciwgSW5zdGFuY2VkTWVzaCwgSW50MTZBdHRyaWJ1dGUsIEludDE2QnVmZmVyQXR0cmlidXRlLCBJbnQzMkF0dHJpYnV0ZSwgSW50MzJCdWZmZXJBdHRyaWJ1dGUsIEludDhBdHRyaWJ1dGUsIEludDhCdWZmZXJBdHRyaWJ1dGUsIEludFR5cGUsIEludGVybGVhdmVkQnVmZmVyLCBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSwgSW50ZXJwb2xhbnQsIEludGVycG9sYXRlRGlzY3JldGUsIEludGVycG9sYXRlTGluZWFyLCBJbnRlcnBvbGF0ZVNtb290aCwgSW52ZXJ0U3RlbmNpbE9wLCBKU09OTG9hZGVyLCBLZWVwU3RlbmNpbE9wLCBLZXlmcmFtZVRyYWNrLCBMT0QsIExhdGhlR2VvbWV0cnkgYXMgTGF0aGVCdWZmZXJHZW9tZXRyeSwgTGF0aGVHZW9tZXRyeSwgTGF5ZXJzLCBMZW5zRmxhcmUsIExlc3NEZXB0aCwgTGVzc0VxdWFsRGVwdGgsIExlc3NFcXVhbFN0ZW5jaWxGdW5jLCBMZXNzU3RlbmNpbEZ1bmMsIExpZ2h0LCBMaWdodFByb2JlLCBMaW5lLCBMaW5lMywgTGluZUJhc2ljTWF0ZXJpYWwsIExpbmVDdXJ2ZSwgTGluZUN1cnZlMywgTGluZURhc2hlZE1hdGVyaWFsLCBMaW5lTG9vcCwgTGluZVBpZWNlcywgTGluZVNlZ21lbnRzLCBMaW5lU3RyaXAsIExpbmVhckVuY29kaW5nLCBMaW5lYXJGaWx0ZXIsIExpbmVhckludGVycG9sYW50LCBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIsIExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciwgTGluZWFyU1JHQkNvbG9yU3BhY2UsIExpbmVhclRvbmVNYXBwaW5nLCBMb2FkZXIsIExvYWRlclV0aWxzLCBMb2FkaW5nTWFuYWdlciwgTG9vcE9uY2UsIExvb3BQaW5nUG9uZywgTG9vcFJlcGVhdCwgTHVtaW5hbmNlQWxwaGFGb3JtYXQsIEx1bWluYW5jZUZvcm1hdCwgTU9VU0UsIE1hdGVyaWFsLCBNYXRlcmlhbExvYWRlciwgTWF0aFV0aWxzIGFzIE1hdGgsIE1hdGhVdGlscywgTWF0cml4MywgTWF0cml4NCwgTWF4RXF1YXRpb24sIE1lc2gsIE1lc2hCYXNpY01hdGVyaWFsLCBNZXNoRGVwdGhNYXRlcmlhbCwgTWVzaERpc3RhbmNlTWF0ZXJpYWwsIE1lc2hGYWNlTWF0ZXJpYWwsIE1lc2hMYW1iZXJ0TWF0ZXJpYWwsIE1lc2hNYXRjYXBNYXRlcmlhbCwgTWVzaE5vcm1hbE1hdGVyaWFsLCBNZXNoUGhvbmdNYXRlcmlhbCwgTWVzaFBoeXNpY2FsTWF0ZXJpYWwsIE1lc2hTdGFuZGFyZE1hdGVyaWFsLCBNZXNoVG9vbk1hdGVyaWFsLCBNaW5FcXVhdGlvbiwgTWlycm9yZWRSZXBlYXRXcmFwcGluZywgTWl4T3BlcmF0aW9uLCBNdWx0aU1hdGVyaWFsLCBNdWx0aXBseUJsZW5kaW5nLCBNdWx0aXBseU9wZXJhdGlvbiwgTmVhcmVzdEZpbHRlciwgTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciwgTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLCBOZXZlckRlcHRoLCBOZXZlclN0ZW5jaWxGdW5jLCBOb0JsZW5kaW5nLCBOb0NvbG9yU3BhY2UsIE5vQ29sb3JzLCBOb1RvbmVNYXBwaW5nLCBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGUsIE5vcm1hbEJsZW5kaW5nLCBOb3RFcXVhbERlcHRoLCBOb3RFcXVhbFN0ZW5jaWxGdW5jLCBOdW1iZXJLZXlmcmFtZVRyYWNrLCBPYmplY3QzRCwgT2JqZWN0TG9hZGVyLCBPYmplY3RTcGFjZU5vcm1hbE1hcCwgT2N0YWhlZHJvbkdlb21ldHJ5IGFzIE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSwgT2N0YWhlZHJvbkdlb21ldHJ5LCBPbmVGYWN0b3IsIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IsIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IsIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IsIE9ydGhvZ3JhcGhpY0NhbWVyYSwgUENGU2hhZG93TWFwLCBQQ0ZTb2Z0U2hhZG93TWFwLCBQTVJFTUdlbmVyYXRvciwgUGFyYW1ldHJpY0dlb21ldHJ5LCBQYXJ0aWNsZSwgUGFydGljbGVCYXNpY01hdGVyaWFsLCBQYXJ0aWNsZVN5c3RlbSwgUGFydGljbGVTeXN0ZW1NYXRlcmlhbCwgUGF0aCwgUGVyc3BlY3RpdmVDYW1lcmEsIFBsYW5lLCBQbGFuZUdlb21ldHJ5IGFzIFBsYW5lQnVmZmVyR2VvbWV0cnksIFBsYW5lR2VvbWV0cnksIFBsYW5lSGVscGVyLCBQb2ludENsb3VkLCBQb2ludENsb3VkTWF0ZXJpYWwsIFBvaW50TGlnaHQsIFBvaW50TGlnaHRIZWxwZXIsIFBvaW50cywgUG9pbnRzTWF0ZXJpYWwsIFBvbGFyR3JpZEhlbHBlciwgUG9seWhlZHJvbkdlb21ldHJ5IGFzIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSwgUG9seWhlZHJvbkdlb21ldHJ5LCBQb3NpdGlvbmFsQXVkaW8sIFByb3BlcnR5QmluZGluZywgUHJvcGVydHlNaXhlciwgUXVhZHJhdGljQmV6aWVyQ3VydmUsIFF1YWRyYXRpY0JlemllckN1cnZlMywgUXVhdGVybmlvbiwgUXVhdGVybmlvbktleWZyYW1lVHJhY2ssIFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCwgUkVWSVNJT04sIFJHQkFEZXB0aFBhY2tpbmcsIFJHQkFGb3JtYXQsIFJHQkFJbnRlZ2VyRm9ybWF0LCBSR0JBX0FTVENfMTB4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTB4NV9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDhfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0LCBSR0JBX0FTVENfNHg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDVfRm9ybWF0LCBSR0JBX0FTVENfNng1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDVfRm9ybWF0LCBSR0JBX0FTVENfOHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4OF9Gb3JtYXQsIFJHQkFfQlBUQ19Gb3JtYXQsIFJHQkFfRVRDMl9FQUNfRm9ybWF0LCBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDFfRm9ybWF0LCBSR0JBX1MzVENfRFhUM19Gb3JtYXQsIFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCwgUkdCRm9ybWF0LCBSR0JfRVRDMV9Gb3JtYXQsIFJHQl9FVEMyX0Zvcm1hdCwgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCwgUkdGb3JtYXQsIFJHSW50ZWdlckZvcm1hdCwgUmF3U2hhZGVyTWF0ZXJpYWwsIFJheSwgUmF5Y2FzdGVyLCBSZWN0QXJlYUxpZ2h0LCBSZWRGb3JtYXQsIFJlZEludGVnZXJGb3JtYXQsIFJlaW5oYXJkVG9uZU1hcHBpbmcsIFJlcGVhdFdyYXBwaW5nLCBSZXBsYWNlU3RlbmNpbE9wLCBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiwgUmluZ0dlb21ldHJ5IGFzIFJpbmdCdWZmZXJHZW9tZXRyeSwgUmluZ0dlb21ldHJ5LCBTUkdCQ29sb3JTcGFjZSwgU2NlbmUsIFNjZW5lVXRpbHMsIFNoYWRlckNodW5rLCBTaGFkZXJMaWIsIFNoYWRlck1hdGVyaWFsLCBTaGFkb3dNYXRlcmlhbCwgU2hhcGUsIFNoYXBlR2VvbWV0cnkgYXMgU2hhcGVCdWZmZXJHZW9tZXRyeSwgU2hhcGVHZW9tZXRyeSwgU2hhcGVQYXRoLCBTaGFwZVV0aWxzLCBTaG9ydFR5cGUsIFNrZWxldG9uLCBTa2VsZXRvbkhlbHBlciwgU2tpbm5lZE1lc2gsIFNtb290aFNoYWRpbmcsIFNvdXJjZSwgU3BoZXJlLCBTcGhlcmVHZW9tZXRyeSBhcyBTcGhlcmVCdWZmZXJHZW9tZXRyeSwgU3BoZXJlR2VvbWV0cnksIFNwaGVyaWNhbCwgU3BoZXJpY2FsSGFybW9uaWNzMywgU3BsaW5lQ3VydmUsIFNwb3RMaWdodCwgU3BvdExpZ2h0SGVscGVyLCBTcHJpdGUsIFNwcml0ZU1hdGVyaWFsLCBTcmNBbHBoYUZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgU3JjQ29sb3JGYWN0b3IsIFN0YXRpY0NvcHlVc2FnZSwgU3RhdGljRHJhd1VzYWdlLCBTdGF0aWNSZWFkVXNhZ2UsIFN0ZXJlb0NhbWVyYSwgU3RyZWFtQ29weVVzYWdlLCBTdHJlYW1EcmF3VXNhZ2UsIFN0cmVhbVJlYWRVc2FnZSwgU3RyaW5nS2V5ZnJhbWVUcmFjaywgU3VidHJhY3RFcXVhdGlvbiwgU3VidHJhY3RpdmVCbGVuZGluZywgVE9VQ0gsIFRhbmdlbnRTcGFjZU5vcm1hbE1hcCwgVGV0cmFoZWRyb25HZW9tZXRyeSBhcyBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBUZXRyYWhlZHJvbkdlb21ldHJ5LCBUZXh0R2VvbWV0cnksIFRleHR1cmUsIFRleHR1cmVMb2FkZXIsIFRvcnVzR2VvbWV0cnkgYXMgVG9ydXNCdWZmZXJHZW9tZXRyeSwgVG9ydXNHZW9tZXRyeSwgVG9ydXNLbm90R2VvbWV0cnkgYXMgVG9ydXNLbm90QnVmZmVyR2VvbWV0cnksIFRvcnVzS25vdEdlb21ldHJ5LCBUcmlhbmdsZSwgVHJpYW5nbGVGYW5EcmF3TW9kZSwgVHJpYW5nbGVTdHJpcERyYXdNb2RlLCBUcmlhbmdsZXNEcmF3TW9kZSwgVHViZUdlb21ldHJ5IGFzIFR1YmVCdWZmZXJHZW9tZXRyeSwgVHViZUdlb21ldHJ5LCBVVk1hcHBpbmcsIFVpbnQxNkF0dHJpYnV0ZSwgVWludDE2QnVmZmVyQXR0cmlidXRlLCBVaW50MzJBdHRyaWJ1dGUsIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSwgVWludDhBdHRyaWJ1dGUsIFVpbnQ4QnVmZmVyQXR0cmlidXRlLCBVaW50OENsYW1wZWRBdHRyaWJ1dGUsIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSwgVW5pZm9ybSwgVW5pZm9ybXNMaWIsIFVuaWZvcm1zVXRpbHMsIFVuc2lnbmVkQnl0ZVR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSwgVW5zaWduZWRJbnRUeXBlLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRTaG9ydFR5cGUsIFZTTVNoYWRvd01hcCwgVmVjdG9yMiwgVmVjdG9yMywgVmVjdG9yNCwgVmVjdG9yS2V5ZnJhbWVUcmFjaywgVmVydGV4LCBWZXJ0ZXhDb2xvcnMsIFZpZGVvVGV4dHVyZSwgV2ViR0wxUmVuZGVyZXIsIFdlYkdMM0RSZW5kZXJUYXJnZXQsIFdlYkdMQXJyYXlSZW5kZXJUYXJnZXQsIFdlYkdMQ3ViZVJlbmRlclRhcmdldCwgV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMsIFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQsIFdlYkdMUmVuZGVyVGFyZ2V0LCBXZWJHTFJlbmRlclRhcmdldEN1YmUsIFdlYkdMUmVuZGVyZXIsIFdlYkdMVXRpbHMsIFdpcmVmcmFtZUdlb21ldHJ5LCBXaXJlZnJhbWVIZWxwZXIsIFdyYXBBcm91bmRFbmRpbmcsIFhIUkxvYWRlciwgWmVyb0N1cnZhdHVyZUVuZGluZywgWmVyb0ZhY3RvciwgWmVyb1Nsb3BlRW5kaW5nLCBaZXJvU3RlbmNpbE9wLCBfU1JHQkFGb3JtYXQsIHNSR0JFbmNvZGluZyB9O1xuIiwiaW1wb3J0IHsgQm94R2VvbWV0cnksIE1lc2gsIE1lc2hCYXNpY01hdGVyaWFsLCBPYmplY3QzRCwgVGV4dHVyZUxvYWRlciB9IGZyb20gXCJ0aHJlZVwiO1xyXG5mdW5jdGlvbiBidWlsZEpvaW50KCkge1xyXG4gICAgcmV0dXJuIG5ldyBPYmplY3QzRCgpO1xyXG59XHJcbmZ1bmN0aW9uIGJ1aWxkUGFydChwYXJ0KSB7XHJcbiAgICB2YXIgbG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTtcclxuICAgIHZhciBnZW9tZXRyeSA9IG5ldyBCb3hHZW9tZXRyeShwYXJ0LndpZHRoLCBwYXJ0LmhlaWdodCwgMCk7XHJcbiAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICAgIG1hcDogbG9hZGVyLmxvYWQoXCIuL2ltYWdlcy9cIi5jb25jYXQocGFydC5uYW1lLCBcIi5wbmdcIikpLFxyXG4gICAgICAgIHRyYW5zcGFyZW50OiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuZXcgTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZE93bCgpIHtcclxuICAgIHZhciB0b3JzbyA9IGJ1aWxkUGFydCh7XHJcbiAgICAgICAgbmFtZTogJ3RvcnNvJyxcclxuICAgICAgICBoZWlnaHQ6IDY5LjIyNSxcclxuICAgICAgICB3aWR0aDogNTguNDIzXHJcbiAgICB9KTtcclxuICAgIHZhciBuZWNrID0gYnVpbGRKb2ludCgpO1xyXG4gICAgdmFyIGhlYWQgPSBidWlsZFBhcnQoe1xyXG4gICAgICAgIG5hbWU6ICdoZWFkJyxcclxuICAgICAgICBoZWlnaHQ6IDY4LjEyNSxcclxuICAgICAgICB3aWR0aDogODMuNTQ3XHJcbiAgICB9KTtcclxuICAgIHZhciBsZWZ0SGlwID0gYnVpbGRKb2ludCgpO1xyXG4gICAgdmFyIGxlZnRMZWcgPSBidWlsZFBhcnQoe1xyXG4gICAgICAgIG5hbWU6ICdsZWZ0LWxlZycsXHJcbiAgICAgICAgd2lkdGg6IDM5LjQxNCxcclxuICAgICAgICBoZWlnaHQ6IDQxLjQzN1xyXG4gICAgfSk7XHJcbiAgICB2YXIgcmlnaHRIaXAgPSBidWlsZEpvaW50KCk7XHJcbiAgICB2YXIgcmlnaHRMZWcgPSBidWlsZFBhcnQoe1xyXG4gICAgICAgIG5hbWU6ICdyaWdodC1sZWcnLFxyXG4gICAgICAgIHdpZHRoOiAzOS40MTQsXHJcbiAgICAgICAgaGVpZ2h0OiA0MS40MzdcclxuICAgIH0pO1xyXG4gICAgdmFyIGxlZnRTaG91bGRlciA9IGJ1aWxkSm9pbnQoKTtcclxuICAgIHZhciBsZWZ0VXBwZXJXaW5nID0gYnVpbGRQYXJ0KHtcclxuICAgICAgICBuYW1lOiAnbGVmdC11cHBlci13aW5nJyxcclxuICAgICAgICB3aWR0aDogMjUuOTYwLFxyXG4gICAgICAgIGhlaWdodDogMzYuNTY1XHJcbiAgICB9KTtcclxuICAgIHZhciBsZWZ0RWxib3cgPSBidWlsZEpvaW50KCk7XHJcbiAgICB2YXIgbGVmdExvd2VyV2luZyA9IGJ1aWxkUGFydCh7XHJcbiAgICAgICAgbmFtZTogJ2xlZnQtbG93ZXItd2luZycsXHJcbiAgICAgICAgd2lkdGg6IDQ0LjkyMCxcclxuICAgICAgICBoZWlnaHQ6IDM0LjcxMVxyXG4gICAgfSk7XHJcbiAgICB2YXIgcmlnaHRTaG91bGRlciA9IGJ1aWxkSm9pbnQoKTtcclxuICAgIHZhciByaWdodFVwcGVyV2luZyA9IGJ1aWxkUGFydCh7XHJcbiAgICAgICAgbmFtZTogJ3JpZ2h0LXVwcGVyLXdpbmcnLFxyXG4gICAgICAgIHdpZHRoOiAyNS45NjAsXHJcbiAgICAgICAgaGVpZ2h0OiAzNi41NjVcclxuICAgIH0pO1xyXG4gICAgdmFyIHJpZ2h0RWxib3cgPSBidWlsZEpvaW50KCk7XHJcbiAgICB2YXIgcmlnaHRMb3dlcldpbmcgPSBidWlsZFBhcnQoe1xyXG4gICAgICAgIG5hbWU6ICdyaWdodC1sb3dlci13aW5nJyxcclxuICAgICAgICB3aWR0aDogNDQuOTIwLFxyXG4gICAgICAgIGhlaWdodDogMzQuNzExXHJcbiAgICB9KTtcclxuICAgIHRvcnNvLmFkZChuZWNrKTtcclxuICAgIG5lY2sucG9zaXRpb24ueSA9IDM1O1xyXG4gICAgbmVjay5wb3NpdGlvbi56ID0gMTtcclxuICAgIG5lY2suYWRkKGhlYWQpO1xyXG4gICAgaGVhZC5wb3NpdGlvbi55ID0gMjU7XHJcbiAgICB0b3Jzby5hZGQobGVmdEhpcCk7XHJcbiAgICBsZWZ0SGlwLnBvc2l0aW9uLnggPSAyMDtcclxuICAgIGxlZnRIaXAucG9zaXRpb24ueSA9IC0yMDtcclxuICAgIGxlZnRIaXAucG9zaXRpb24ueiA9IC0xO1xyXG4gICAgbGVmdEhpcC5hZGQobGVmdExlZyk7XHJcbiAgICBsZWZ0TGVnLnBvc2l0aW9uLnggPSAtNTtcclxuICAgIGxlZnRMZWcucG9zaXRpb24ueSA9IC03O1xyXG4gICAgbGVmdExlZy5wb3NpdGlvbi56ID0gLTE7XHJcbiAgICB0b3Jzby5hZGQocmlnaHRIaXApO1xyXG4gICAgcmlnaHRIaXAucG9zaXRpb24ueCA9IC0yMDtcclxuICAgIHJpZ2h0SGlwLnBvc2l0aW9uLnkgPSAtMjA7XHJcbiAgICByaWdodEhpcC5wb3NpdGlvbi56ID0gLTE7XHJcbiAgICByaWdodEhpcC5hZGQocmlnaHRMZWcpO1xyXG4gICAgcmlnaHRMZWcucG9zaXRpb24ueCA9IDI7XHJcbiAgICByaWdodExlZy5wb3NpdGlvbi55ID0gLTc7XHJcbiAgICByaWdodExlZy5wb3NpdGlvbi56ID0gLTE7XHJcbiAgICB0b3Jzby5hZGQobGVmdFNob3VsZGVyKTtcclxuICAgIGxlZnRTaG91bGRlci5wb3NpdGlvbi54ID0gMjI7XHJcbiAgICBsZWZ0U2hvdWxkZXIucG9zaXRpb24ueSA9IDE3O1xyXG4gICAgbGVmdFNob3VsZGVyLmFkZChsZWZ0VXBwZXJXaW5nKTtcclxuICAgIGxlZnRVcHBlcldpbmcucG9zaXRpb24ueCA9IDEwO1xyXG4gICAgbGVmdFVwcGVyV2luZy5wb3NpdGlvbi55ID0gMjtcclxuICAgIGxlZnRVcHBlcldpbmcucG9zaXRpb24ueiA9IC0xO1xyXG4gICAgbGVmdFVwcGVyV2luZy5hZGQobGVmdEVsYm93KTtcclxuICAgIGxlZnRFbGJvdy5wb3NpdGlvbi54ID0gNztcclxuICAgIGxlZnRFbGJvdy5wb3NpdGlvbi55ID0gMTI7XHJcbiAgICBsZWZ0RWxib3cucG9zaXRpb24ueiA9IDE7XHJcbiAgICBsZWZ0RWxib3cuYWRkKGxlZnRMb3dlcldpbmcpO1xyXG4gICAgbGVmdExvd2VyV2luZy5wb3NpdGlvbi54ID0gMjA7XHJcbiAgICBsZWZ0TG93ZXJXaW5nLnBvc2l0aW9uLnkgPSAtODtcclxuICAgIGxlZnRMb3dlcldpbmcucG9zaXRpb24ueiA9IC0xO1xyXG4gICAgdG9yc28uYWRkKHJpZ2h0U2hvdWxkZXIpO1xyXG4gICAgcmlnaHRTaG91bGRlci5wb3NpdGlvbi54ID0gLTIzO1xyXG4gICAgcmlnaHRTaG91bGRlci5wb3NpdGlvbi55ID0gMTc7XHJcbiAgICByaWdodFNob3VsZGVyLmFkZChyaWdodFVwcGVyV2luZyk7XHJcbiAgICByaWdodFVwcGVyV2luZy5wb3NpdGlvbi54ID0gLTEwO1xyXG4gICAgcmlnaHRVcHBlcldpbmcucG9zaXRpb24ueSA9IDI7XHJcbiAgICByaWdodFVwcGVyV2luZy5wb3NpdGlvbi56ID0gLTE7XHJcbiAgICByaWdodFVwcGVyV2luZy5hZGQocmlnaHRFbGJvdyk7XHJcbiAgICByaWdodEVsYm93LnBvc2l0aW9uLnggPSAtNztcclxuICAgIHJpZ2h0RWxib3cucG9zaXRpb24ueSA9IDEyO1xyXG4gICAgcmlnaHRFbGJvdy5wb3NpdGlvbi56ID0gMTtcclxuICAgIHJpZ2h0RWxib3cuYWRkKHJpZ2h0TG93ZXJXaW5nKTtcclxuICAgIHJpZ2h0TG93ZXJXaW5nLnBvc2l0aW9uLnggPSAtMjA7XHJcbiAgICByaWdodExvd2VyV2luZy5wb3NpdGlvbi55ID0gLTg7XHJcbiAgICByaWdodExvd2VyV2luZy5wb3NpdGlvbi56ID0gLTE7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFuY2hvcjogdG9yc28sXHJcbiAgICAgICAgdG9yc286IHRvcnNvLFxyXG4gICAgICAgIG5lY2s6IG5lY2ssXHJcbiAgICAgICAgaGVhZDogaGVhZCxcclxuICAgICAgICBsZWZ0SGlwOiBsZWZ0SGlwLFxyXG4gICAgICAgIGxlZnRMZWc6IGxlZnRMZWcsXHJcbiAgICAgICAgcmlnaHRIaXA6IHJpZ2h0SGlwLFxyXG4gICAgICAgIHJpZ2h0TGVnOiByaWdodExlZyxcclxuICAgICAgICBsZWZ0U2hvdWxkZXI6IGxlZnRTaG91bGRlcixcclxuICAgICAgICBsZWZ0VXBwZXJXaW5nOiBsZWZ0VXBwZXJXaW5nLFxyXG4gICAgICAgIGxlZnRFbGJvdzogbGVmdEVsYm93LFxyXG4gICAgICAgIGxlZnRMb3dlcldpbmc6IGxlZnRMb3dlcldpbmcsXHJcbiAgICAgICAgcmlnaHRTaG91bGRlcjogcmlnaHRTaG91bGRlcixcclxuICAgICAgICByaWdodFVwcGVyV2luZzogcmlnaHRVcHBlcldpbmcsXHJcbiAgICAgICAgcmlnaHRFbGJvdzogcmlnaHRFbGJvdyxcclxuICAgICAgICByaWdodExvd2VyV2luZzogcmlnaHRMb3dlcldpbmcsXHJcbiAgICB9O1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRDZW50ZXIobGFuZG1hcmtzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHg6IGxhbmRtYXJrcy5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgbCkgeyByZXR1cm4gbC54ICsgc3VtOyB9LCAwKSAvIGxhbmRtYXJrcy5sZW5ndGgsXHJcbiAgICAgICAgeTogbGFuZG1hcmtzLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBsKSB7IHJldHVybiBsLnkgKyBzdW07IH0sIDApIC8gbGFuZG1hcmtzLmxlbmd0aCxcclxuICAgICAgICB6OiBsYW5kbWFya3MucmVkdWNlKGZ1bmN0aW9uIChzdW0sIGwpIHsgcmV0dXJuIGwueiArIHN1bTsgfSwgMCkgLyBsYW5kbWFya3MubGVuZ3RoLFxyXG4gICAgfTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5nbGUoYSwgYikge1xyXG4gICAgcmV0dXJuIE1hdGguYXRhbjIoYi55IC0gYS55LCBiLnggLSBhLngpO1xyXG59XHJcbiIsImltcG9ydCB7XG5cdEV2ZW50RGlzcGF0Y2hlcixcblx0TU9VU0UsXG5cdFF1YXRlcm5pb24sXG5cdFNwaGVyaWNhbCxcblx0VE9VQ0gsXG5cdFZlY3RvcjIsXG5cdFZlY3RvcjNcbn0gZnJvbSAndGhyZWUnO1xuXG4vLyBUaGlzIHNldCBvZiBjb250cm9scyBwZXJmb3JtcyBvcmJpdGluZywgZG9sbHlpbmcgKHpvb21pbmcpLCBhbmQgcGFubmluZy5cbi8vIFVubGlrZSBUcmFja2JhbGxDb250cm9scywgaXQgbWFpbnRhaW5zIHRoZSBcInVwXCIgZGlyZWN0aW9uIG9iamVjdC51cCAoK1kgYnkgZGVmYXVsdCkuXG4vL1xuLy8gICAgT3JiaXQgLSBsZWZ0IG1vdXNlIC8gdG91Y2g6IG9uZS1maW5nZXIgbW92ZVxuLy8gICAgWm9vbSAtIG1pZGRsZSBtb3VzZSwgb3IgbW91c2V3aGVlbCAvIHRvdWNoOiB0d28tZmluZ2VyIHNwcmVhZCBvciBzcXVpc2hcbi8vICAgIFBhbiAtIHJpZ2h0IG1vdXNlLCBvciBsZWZ0IG1vdXNlICsgY3RybC9tZXRhL3NoaWZ0S2V5LCBvciBhcnJvdyBrZXlzIC8gdG91Y2g6IHR3by1maW5nZXIgbW92ZVxuXG5jb25zdCBfY2hhbmdlRXZlbnQgPSB7IHR5cGU6ICdjaGFuZ2UnIH07XG5jb25zdCBfc3RhcnRFdmVudCA9IHsgdHlwZTogJ3N0YXJ0JyB9O1xuY29uc3QgX2VuZEV2ZW50ID0geyB0eXBlOiAnZW5kJyB9O1xuXG5jbGFzcyBPcmJpdENvbnRyb2xzIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuXHRjb25zdHJ1Y3Rvciggb2JqZWN0LCBkb21FbGVtZW50ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdGlmICggZG9tRWxlbWVudCA9PT0gdW5kZWZpbmVkICkgY29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogVGhlIHNlY29uZCBwYXJhbWV0ZXIgXCJkb21FbGVtZW50XCIgaXMgbm93IG1hbmRhdG9yeS4nICk7XG5cdFx0aWYgKCBkb21FbGVtZW50ID09PSBkb2N1bWVudCApIGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PcmJpdENvbnRyb2xzOiBcImRvY3VtZW50XCIgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHRoZSB0YXJnZXQgXCJkb21FbGVtZW50XCIuIFBsZWFzZSB1c2UgXCJyZW5kZXJlci5kb21FbGVtZW50XCIgaW5zdGVhZC4nICk7XG5cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblx0XHR0aGlzLmRvbUVsZW1lbnQgPSBkb21FbGVtZW50O1xuXHRcdHRoaXMuZG9tRWxlbWVudC5zdHlsZS50b3VjaEFjdGlvbiA9ICdub25lJzsgLy8gZGlzYWJsZSB0b3VjaCBzY3JvbGxcblxuXHRcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0XHQvLyBcInRhcmdldFwiIHNldHMgdGhlIGxvY2F0aW9uIG9mIGZvY3VzLCB3aGVyZSB0aGUgb2JqZWN0IG9yYml0cyBhcm91bmRcblx0XHR0aGlzLnRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgaW4gYW5kIG91dCAoIFBlcnNwZWN0aXZlQ2FtZXJhIG9ubHkgKVxuXHRcdHRoaXMubWluRGlzdGFuY2UgPSAwO1xuXHRcdHRoaXMubWF4RGlzdGFuY2UgPSBJbmZpbml0eTtcblxuXHRcdC8vIEhvdyBmYXIgeW91IGNhbiB6b29tIGluIGFuZCBvdXQgKCBPcnRob2dyYXBoaWNDYW1lcmEgb25seSApXG5cdFx0dGhpcy5taW5ab29tID0gMDtcblx0XHR0aGlzLm1heFpvb20gPSBJbmZpbml0eTtcblxuXHRcdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCB2ZXJ0aWNhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxuXHRcdC8vIFJhbmdlIGlzIDAgdG8gTWF0aC5QSSByYWRpYW5zLlxuXHRcdHRoaXMubWluUG9sYXJBbmdsZSA9IDA7IC8vIHJhZGlhbnNcblx0XHR0aGlzLm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJOyAvLyByYWRpYW5zXG5cblx0XHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxuXHRcdC8vIElmIHNldCwgdGhlIGludGVydmFsIFsgbWluLCBtYXggXSBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIFsgLSAyIFBJLCAyIFBJIF0sIHdpdGggKCBtYXggLSBtaW4gPCAyIFBJIClcblx0XHR0aGlzLm1pbkF6aW11dGhBbmdsZSA9IC0gSW5maW5pdHk7IC8vIHJhZGlhbnNcblx0XHR0aGlzLm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5OyAvLyByYWRpYW5zXG5cblx0XHQvLyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSlcblx0XHQvLyBJZiBkYW1waW5nIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxuXHRcdHRoaXMuZW5hYmxlRGFtcGluZyA9IGZhbHNlO1xuXHRcdHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMDU7XG5cblx0XHQvLyBUaGlzIG9wdGlvbiBhY3R1YWxseSBlbmFibGVzIGRvbGx5aW5nIGluIGFuZCBvdXQ7IGxlZnQgYXMgXCJ6b29tXCIgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuXHRcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmdcblx0XHR0aGlzLmVuYWJsZVpvb20gPSB0cnVlO1xuXHRcdHRoaXMuem9vbVNwZWVkID0gMS4wO1xuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcm90YXRpbmdcblx0XHR0aGlzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcblxuXHRcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHBhbm5pbmdcblx0XHR0aGlzLmVuYWJsZVBhbiA9IHRydWU7XG5cdFx0dGhpcy5wYW5TcGVlZCA9IDEuMDtcblx0XHR0aGlzLnNjcmVlblNwYWNlUGFubmluZyA9IHRydWU7IC8vIGlmIGZhbHNlLCBwYW4gb3J0aG9nb25hbCB0byB3b3JsZC1zcGFjZSBkaXJlY3Rpb24gY2FtZXJhLnVwXG5cdFx0dGhpcy5rZXlQYW5TcGVlZCA9IDcuMDtcdC8vIHBpeGVscyBtb3ZlZCBwZXIgYXJyb3cga2V5IHB1c2hcblxuXHRcdC8vIFNldCB0byB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgcm90YXRlIGFyb3VuZCB0aGUgdGFyZ2V0XG5cdFx0Ly8gSWYgYXV0by1yb3RhdGUgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXG5cdFx0dGhpcy5hdXRvUm90YXRlID0gZmFsc2U7XG5cdFx0dGhpcy5hdXRvUm90YXRlU3BlZWQgPSAyLjA7IC8vIDMwIHNlY29uZHMgcGVyIG9yYml0IHdoZW4gZnBzIGlzIDYwXG5cblx0XHQvLyBUaGUgZm91ciBhcnJvdyBrZXlzXG5cdFx0dGhpcy5rZXlzID0geyBMRUZUOiAnQXJyb3dMZWZ0JywgVVA6ICdBcnJvd1VwJywgUklHSFQ6ICdBcnJvd1JpZ2h0JywgQk9UVE9NOiAnQXJyb3dEb3duJyB9O1xuXG5cdFx0Ly8gTW91c2UgYnV0dG9uc1xuXHRcdHRoaXMubW91c2VCdXR0b25zID0geyBMRUZUOiBNT1VTRS5ST1RBVEUsIE1JRERMRTogTU9VU0UuRE9MTFksIFJJR0hUOiBNT1VTRS5QQU4gfTtcblxuXHRcdC8vIFRvdWNoIGZpbmdlcnNcblx0XHR0aGlzLnRvdWNoZXMgPSB7IE9ORTogVE9VQ0guUk9UQVRFLCBUV086IFRPVUNILkRPTExZX1BBTiB9O1xuXG5cdFx0Ly8gZm9yIHJlc2V0XG5cdFx0dGhpcy50YXJnZXQwID0gdGhpcy50YXJnZXQuY2xvbmUoKTtcblx0XHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XG5cdFx0dGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XG5cblx0XHQvLyB0aGUgdGFyZ2V0IERPTSBlbGVtZW50IGZvciBrZXkgZXZlbnRzXG5cdFx0dGhpcy5fZG9tRWxlbWVudEtleUV2ZW50cyA9IG51bGw7XG5cblx0XHQvL1xuXHRcdC8vIHB1YmxpYyBtZXRob2RzXG5cdFx0Ly9cblxuXHRcdHRoaXMuZ2V0UG9sYXJBbmdsZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNwaGVyaWNhbC5waGk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRBemltdXRoYWxBbmdsZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNwaGVyaWNhbC50aGV0YTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldERpc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5vYmplY3QucG9zaXRpb24uZGlzdGFuY2VUbyggdGhpcy50YXJnZXQgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmxpc3RlblRvS2V5RXZlbnRzID0gZnVuY3Rpb24gKCBkb21FbGVtZW50ICkge1xuXG5cdFx0XHRkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgb25LZXlEb3duICk7XG5cdFx0XHR0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gZG9tRWxlbWVudDtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNhdmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0c2NvcGUudGFyZ2V0MC5jb3B5KCBzY29wZS50YXJnZXQgKTtcblx0XHRcdHNjb3BlLnBvc2l0aW9uMC5jb3B5KCBzY29wZS5vYmplY3QucG9zaXRpb24gKTtcblx0XHRcdHNjb3BlLnpvb20wID0gc2NvcGUub2JqZWN0Lnpvb207XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0c2NvcGUudGFyZ2V0LmNvcHkoIHNjb3BlLnRhcmdldDAgKTtcblx0XHRcdHNjb3BlLm9iamVjdC5wb3NpdGlvbi5jb3B5KCBzY29wZS5wb3NpdGlvbjAgKTtcblx0XHRcdHNjb3BlLm9iamVjdC56b29tID0gc2NvcGUuem9vbTA7XG5cblx0XHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBfY2hhbmdlRXZlbnQgKTtcblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdH07XG5cblx0XHQvLyB0aGlzIG1ldGhvZCBpcyBleHBvc2VkLCBidXQgcGVyaGFwcyBpdCB3b3VsZCBiZSBiZXR0ZXIgaWYgd2UgY2FuIG1ha2UgaXQgcHJpdmF0ZS4uLlxuXHRcdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zdCBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBzbyBjYW1lcmEudXAgaXMgdGhlIG9yYml0IGF4aXNcblx0XHRcdGNvbnN0IHF1YXQgPSBuZXcgUXVhdGVybmlvbigpLnNldEZyb21Vbml0VmVjdG9ycyggb2JqZWN0LnVwLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApICk7XG5cdFx0XHRjb25zdCBxdWF0SW52ZXJzZSA9IHF1YXQuY2xvbmUoKS5pbnZlcnQoKTtcblxuXHRcdFx0Y29uc3QgbGFzdFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IGxhc3RRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdFx0Y29uc3QgdHdvUEkgPSAyICogTWF0aC5QSTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcblxuXHRcdFx0XHRvZmZzZXQuY29weSggcG9zaXRpb24gKS5zdWIoIHNjb3BlLnRhcmdldCApO1xuXG5cdFx0XHRcdC8vIHJvdGF0ZSBvZmZzZXQgdG8gXCJ5LWF4aXMtaXMtdXBcIiBzcGFjZVxuXHRcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ICk7XG5cblx0XHRcdFx0Ly8gYW5nbGUgZnJvbSB6LWF4aXMgYXJvdW5kIHktYXhpc1xuXHRcdFx0XHRzcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMoIG9mZnNldCApO1xuXG5cdFx0XHRcdGlmICggc2NvcGUuYXV0b1JvdGF0ZSAmJiBzdGF0ZSA9PT0gU1RBVEUuTk9ORSApIHtcblxuXHRcdFx0XHRcdHJvdGF0ZUxlZnQoIGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVEYW1waW5nICkge1xuXG5cdFx0XHRcdFx0c3BoZXJpY2FsLnRoZXRhICs9IHNwaGVyaWNhbERlbHRhLnRoZXRhICogc2NvcGUuZGFtcGluZ0ZhY3Rvcjtcblx0XHRcdFx0XHRzcGhlcmljYWwucGhpICs9IHNwaGVyaWNhbERlbHRhLnBoaSAqIHNjb3BlLmRhbXBpbmdGYWN0b3I7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNwaGVyaWNhbC50aGV0YSArPSBzcGhlcmljYWxEZWx0YS50aGV0YTtcblx0XHRcdFx0XHRzcGhlcmljYWwucGhpICs9IHNwaGVyaWNhbERlbHRhLnBoaTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gcmVzdHJpY3QgdGhldGEgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xuXG5cdFx0XHRcdGxldCBtaW4gPSBzY29wZS5taW5BemltdXRoQW5nbGU7XG5cdFx0XHRcdGxldCBtYXggPSBzY29wZS5tYXhBemltdXRoQW5nbGU7XG5cblx0XHRcdFx0aWYgKCBpc0Zpbml0ZSggbWluICkgJiYgaXNGaW5pdGUoIG1heCApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBtaW4gPCAtIE1hdGguUEkgKSBtaW4gKz0gdHdvUEk7IGVsc2UgaWYgKCBtaW4gPiBNYXRoLlBJICkgbWluIC09IHR3b1BJO1xuXG5cdFx0XHRcdFx0aWYgKCBtYXggPCAtIE1hdGguUEkgKSBtYXggKz0gdHdvUEk7IGVsc2UgaWYgKCBtYXggPiBNYXRoLlBJICkgbWF4IC09IHR3b1BJO1xuXG5cdFx0XHRcdFx0aWYgKCBtaW4gPD0gbWF4ICkge1xuXG5cdFx0XHRcdFx0XHRzcGhlcmljYWwudGhldGEgPSBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBzcGhlcmljYWwudGhldGEgKSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0c3BoZXJpY2FsLnRoZXRhID0gKCBzcGhlcmljYWwudGhldGEgPiAoIG1pbiArIG1heCApIC8gMiApID9cblx0XHRcdFx0XHRcdFx0TWF0aC5tYXgoIG1pbiwgc3BoZXJpY2FsLnRoZXRhICkgOlxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggbWF4LCBzcGhlcmljYWwudGhldGEgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcblx0XHRcdFx0c3BoZXJpY2FsLnBoaSA9IE1hdGgubWF4KCBzY29wZS5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbiggc2NvcGUubWF4UG9sYXJBbmdsZSwgc3BoZXJpY2FsLnBoaSApICk7XG5cblx0XHRcdFx0c3BoZXJpY2FsLm1ha2VTYWZlKCk7XG5cblxuXHRcdFx0XHRzcGhlcmljYWwucmFkaXVzICo9IHNjYWxlO1xuXG5cdFx0XHRcdC8vIHJlc3RyaWN0IHJhZGl1cyB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cdFx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgPSBNYXRoLm1heCggc2NvcGUubWluRGlzdGFuY2UsIE1hdGgubWluKCBzY29wZS5tYXhEaXN0YW5jZSwgc3BoZXJpY2FsLnJhZGl1cyApICk7XG5cblx0XHRcdFx0Ly8gbW92ZSB0YXJnZXQgdG8gcGFubmVkIGxvY2F0aW9uXG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVEYW1waW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0c2NvcGUudGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggcGFuT2Zmc2V0LCBzY29wZS5kYW1waW5nRmFjdG9yICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNjb3BlLnRhcmdldC5hZGQoIHBhbk9mZnNldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvZmZzZXQuc2V0RnJvbVNwaGVyaWNhbCggc3BoZXJpY2FsICk7XG5cblx0XHRcdFx0Ly8gcm90YXRlIG9mZnNldCBiYWNrIHRvIFwiY2FtZXJhLXVwLXZlY3Rvci1pcy11cFwiIHNwYWNlXG5cdFx0XHRcdG9mZnNldC5hcHBseVF1YXRlcm5pb24oIHF1YXRJbnZlcnNlICk7XG5cblx0XHRcdFx0cG9zaXRpb24uY29weSggc2NvcGUudGFyZ2V0ICkuYWRkKCBvZmZzZXQgKTtcblxuXHRcdFx0XHRzY29wZS5vYmplY3QubG9va0F0KCBzY29wZS50YXJnZXQgKTtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZURhbXBpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRzcGhlcmljYWxEZWx0YS50aGV0YSAqPSAoIDEgLSBzY29wZS5kYW1waW5nRmFjdG9yICk7XG5cdFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEucGhpICo9ICggMSAtIHNjb3BlLmRhbXBpbmdGYWN0b3IgKTtcblxuXHRcdFx0XHRcdHBhbk9mZnNldC5tdWx0aXBseVNjYWxhciggMSAtIHNjb3BlLmRhbXBpbmdGYWN0b3IgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdFx0XHRwYW5PZmZzZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjYWxlID0gMTtcblxuXHRcdFx0XHQvLyB1cGRhdGUgY29uZGl0aW9uIGlzOlxuXHRcdFx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcblx0XHRcdFx0Ly8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEgLSB4XjIgLyA4XG5cblx0XHRcdFx0aWYgKCB6b29tQ2hhbmdlZCB8fFxuXHRcdFx0XHRcdGxhc3RQb3NpdGlvbi5kaXN0YW5jZVRvU3F1YXJlZCggc2NvcGUub2JqZWN0LnBvc2l0aW9uICkgPiBFUFMgfHxcblx0XHRcdFx0XHQ4ICogKCAxIC0gbGFzdFF1YXRlcm5pb24uZG90KCBzY29wZS5vYmplY3QucXVhdGVybmlvbiApICkgPiBFUFMgKSB7XG5cblx0XHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBfY2hhbmdlRXZlbnQgKTtcblxuXHRcdFx0XHRcdGxhc3RQb3NpdGlvbi5jb3B5KCBzY29wZS5vYmplY3QucG9zaXRpb24gKTtcblx0XHRcdFx0XHRsYXN0UXVhdGVybmlvbi5jb3B5KCBzY29wZS5vYmplY3QucXVhdGVybmlvbiApO1xuXHRcdFx0XHRcdHpvb21DaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9O1xuXG5cdFx0fSgpO1xuXG5cdFx0dGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIG9uQ29udGV4dE1lbnUgKTtcblxuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcmRvd24nLCBvblBvaW50ZXJEb3duICk7XG5cdFx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdwb2ludGVyY2FuY2VsJywgb25Qb2ludGVyQ2FuY2VsICk7XG5cdFx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uTW91c2VXaGVlbCApO1xuXG5cdFx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdwb2ludGVybW92ZScsIG9uUG9pbnRlck1vdmUgKTtcblx0XHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJ1cCcsIG9uUG9pbnRlclVwICk7XG5cblxuXHRcdFx0aWYgKCBzY29wZS5fZG9tRWxlbWVudEtleUV2ZW50cyAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRzY29wZS5fZG9tRWxlbWVudEtleUV2ZW50cy5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIG9uS2V5RG93biApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vc2NvcGUuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApOyAvLyBzaG91bGQgdGhpcyBiZSBhZGRlZCBoZXJlP1xuXG5cdFx0fTtcblxuXHRcdC8vXG5cdFx0Ly8gaW50ZXJuYWxzXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IFNUQVRFID0ge1xuXHRcdFx0Tk9ORTogLSAxLFxuXHRcdFx0Uk9UQVRFOiAwLFxuXHRcdFx0RE9MTFk6IDEsXG5cdFx0XHRQQU46IDIsXG5cdFx0XHRUT1VDSF9ST1RBVEU6IDMsXG5cdFx0XHRUT1VDSF9QQU46IDQsXG5cdFx0XHRUT1VDSF9ET0xMWV9QQU46IDUsXG5cdFx0XHRUT1VDSF9ET0xMWV9ST1RBVEU6IDZcblx0XHR9O1xuXG5cdFx0bGV0IHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdGNvbnN0IEVQUyA9IDAuMDAwMDAxO1xuXG5cdFx0Ly8gY3VycmVudCBwb3NpdGlvbiBpbiBzcGhlcmljYWwgY29vcmRpbmF0ZXNcblx0XHRjb25zdCBzcGhlcmljYWwgPSBuZXcgU3BoZXJpY2FsKCk7XG5cdFx0Y29uc3Qgc3BoZXJpY2FsRGVsdGEgPSBuZXcgU3BoZXJpY2FsKCk7XG5cblx0XHRsZXQgc2NhbGUgPSAxO1xuXHRcdGNvbnN0IHBhbk9mZnNldCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0bGV0IHpvb21DaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRjb25zdCByb3RhdGVTdGFydCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0Y29uc3Qgcm90YXRlRW5kID0gbmV3IFZlY3RvcjIoKTtcblx0XHRjb25zdCByb3RhdGVEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRjb25zdCBwYW5TdGFydCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0Y29uc3QgcGFuRW5kID0gbmV3IFZlY3RvcjIoKTtcblx0XHRjb25zdCBwYW5EZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRjb25zdCBkb2xseVN0YXJ0ID0gbmV3IFZlY3RvcjIoKTtcblx0XHRjb25zdCBkb2xseUVuZCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0Y29uc3QgZG9sbHlEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRjb25zdCBwb2ludGVycyA9IFtdO1xuXHRcdGNvbnN0IHBvaW50ZXJQb3NpdGlvbnMgPSB7fTtcblxuXHRcdGZ1bmN0aW9uIGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkge1xuXG5cdFx0XHRyZXR1cm4gMiAqIE1hdGguUEkgLyA2MCAvIDYwICogc2NvcGUuYXV0b1JvdGF0ZVNwZWVkO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Wm9vbVNjYWxlKCkge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5wb3coIDAuOTUsIHNjb3BlLnpvb21TcGVlZCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcm90YXRlTGVmdCggYW5nbGUgKSB7XG5cblx0XHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcm90YXRlVXAoIGFuZ2xlICkge1xuXG5cdFx0XHRzcGhlcmljYWxEZWx0YS5waGkgLT0gYW5nbGU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwYW5MZWZ0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zdCB2ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbkxlZnQoIGRpc3RhbmNlLCBvYmplY3RNYXRyaXggKSB7XG5cblx0XHRcdFx0di5zZXRGcm9tTWF0cml4Q29sdW1uKCBvYmplY3RNYXRyaXgsIDAgKTsgLy8gZ2V0IFggY29sdW1uIG9mIG9iamVjdE1hdHJpeFxuXHRcdFx0XHR2Lm11bHRpcGx5U2NhbGFyKCAtIGRpc3RhbmNlICk7XG5cblx0XHRcdFx0cGFuT2Zmc2V0LmFkZCggdiApO1xuXG5cdFx0XHR9O1xuXG5cdFx0fSgpO1xuXG5cdFx0Y29uc3QgcGFuVXAgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnN0IHYgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gcGFuVXAoIGRpc3RhbmNlLCBvYmplY3RNYXRyaXggKSB7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5zY3JlZW5TcGFjZVBhbm5pbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMCApO1xuXHRcdFx0XHRcdHYuY3Jvc3NWZWN0b3JzKCBzY29wZS5vYmplY3QudXAsIHYgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0di5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKTtcblxuXHRcdFx0XHRwYW5PZmZzZXQuYWRkKCB2ICk7XG5cblx0XHRcdH07XG5cblx0XHR9KCk7XG5cblx0XHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcblx0XHRjb25zdCBwYW4gPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnN0IG9mZnNldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiBwYW4oIGRlbHRhWCwgZGVsdGFZICkge1xuXG5cdFx0XHRcdGNvbnN0IGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50O1xuXG5cdFx0XHRcdGlmICggc2NvcGUub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0XHQvLyBwZXJzcGVjdGl2ZVxuXHRcdFx0XHRcdGNvbnN0IHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xuXHRcdFx0XHRcdG9mZnNldC5jb3B5KCBwb3NpdGlvbiApLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG5cdFx0XHRcdFx0bGV0IHRhcmdldERpc3RhbmNlID0gb2Zmc2V0Lmxlbmd0aCgpO1xuXG5cdFx0XHRcdFx0Ly8gaGFsZiBvZiB0aGUgZm92IGlzIGNlbnRlciB0byB0b3Agb2Ygc2NyZWVuXG5cdFx0XHRcdFx0dGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oICggc2NvcGUub2JqZWN0LmZvdiAvIDIgKSAqIE1hdGguUEkgLyAxODAuMCApO1xuXG5cdFx0XHRcdFx0Ly8gd2UgdXNlIG9ubHkgY2xpZW50SGVpZ2h0IGhlcmUgc28gYXNwZWN0IHJhdGlvIGRvZXMgbm90IGRpc3RvcnQgc3BlZWRcblx0XHRcdFx0XHRwYW5MZWZ0KCAyICogZGVsdGFYICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCApO1xuXHRcdFx0XHRcdHBhblVwKCAyICogZGVsdGFZICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHNjb3BlLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0XHRcdC8vIG9ydGhvZ3JhcGhpY1xuXHRcdFx0XHRcdHBhbkxlZnQoIGRlbHRhWCAqICggc2NvcGUub2JqZWN0LnJpZ2h0IC0gc2NvcGUub2JqZWN0LmxlZnQgKSAvIHNjb3BlLm9iamVjdC56b29tIC8gZWxlbWVudC5jbGllbnRXaWR0aCwgc2NvcGUub2JqZWN0Lm1hdHJpeCApO1xuXHRcdFx0XHRcdHBhblVwKCBkZWx0YVkgKiAoIHNjb3BlLm9iamVjdC50b3AgLSBzY29wZS5vYmplY3QuYm90dG9tICkgLyBzY29wZS5vYmplY3Quem9vbSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGNhbWVyYSBuZWl0aGVyIG9ydGhvZ3JhcGhpYyBub3IgcGVyc3BlY3RpdmVcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBwYW4gZGlzYWJsZWQuJyApO1xuXHRcdFx0XHRcdHNjb3BlLmVuYWJsZVBhbiA9IGZhbHNlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fTtcblxuXHRcdH0oKTtcblxuXHRcdGZ1bmN0aW9uIGRvbGx5T3V0KCBkb2xseVNjYWxlICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHRcdHNjYWxlIC89IGRvbGx5U2NhbGU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHNjb3BlLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0XHRzY29wZS5vYmplY3Quem9vbSA9IE1hdGgubWF4KCBzY29wZS5taW5ab29tLCBNYXRoLm1pbiggc2NvcGUubWF4Wm9vbSwgc2NvcGUub2JqZWN0Lnpvb20gKiBkb2xseVNjYWxlICkgKTtcblx0XHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdFx0em9vbUNoYW5nZWQgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJyApO1xuXHRcdFx0XHRzY29wZS5lbmFibGVab29tID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGRvbGx5SW4oIGRvbGx5U2NhbGUgKSB7XG5cblx0XHRcdGlmICggc2NvcGUub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0c2NhbGUgKj0gZG9sbHlTY2FsZTtcblxuXHRcdFx0fSBlbHNlIGlmICggc2NvcGUub2JqZWN0LmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHRcdHNjb3BlLm9iamVjdC56b29tID0gTWF0aC5tYXgoIHNjb3BlLm1pblpvb20sIE1hdGgubWluKCBzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAvIGRvbGx5U2NhbGUgKSApO1xuXHRcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXHRcdFx0XHR6b29tQ2hhbmdlZCA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gZG9sbHkvem9vbSBkaXNhYmxlZC4nICk7XG5cdFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblx0XHQvLyBldmVudCBjYWxsYmFja3MgLSB1cGRhdGUgdGhlIG9iamVjdCBzdGF0ZVxuXHRcdC8vXG5cblx0XHRmdW5jdGlvbiBoYW5kbGVNb3VzZURvd25Sb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0XHRyb3RhdGVTdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApIHtcblxuXHRcdFx0ZG9sbHlTdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKSB7XG5cblx0XHRcdHBhblN0YXJ0LnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlUm90YXRlKCBldmVudCApIHtcblxuXHRcdFx0cm90YXRlRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0XHRyb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRcdGNvbnN0IGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50O1xuXG5cdFx0XHRyb3RhdGVMZWZ0KCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnggLyBlbGVtZW50LmNsaWVudEhlaWdodCApOyAvLyB5ZXMsIGhlaWdodFxuXG5cdFx0XHRyb3RhdGVVcCggMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS55IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuXHRcdFx0cm90YXRlU3RhcnQuY29weSggcm90YXRlRW5kICk7XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlRG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0XHRkb2xseUVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdFx0ZG9sbHlEZWx0YS5zdWJWZWN0b3JzKCBkb2xseUVuZCwgZG9sbHlTdGFydCApO1xuXG5cdFx0XHRpZiAoIGRvbGx5RGVsdGEueSA+IDAgKSB7XG5cblx0XHRcdFx0ZG9sbHlPdXQoIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGRvbGx5RGVsdGEueSA8IDAgKSB7XG5cblx0XHRcdFx0ZG9sbHlJbiggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkb2xseVN0YXJ0LmNvcHkoIGRvbGx5RW5kICk7XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlUGFuKCBldmVudCApIHtcblxuXHRcdFx0cGFuRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0XHRwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHNjb3BlLnBhblNwZWVkICk7XG5cblx0XHRcdHBhbiggcGFuRGVsdGEueCwgcGFuRGVsdGEueSApO1xuXG5cdFx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVNb3VzZVdoZWVsKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBldmVudC5kZWx0YVkgPCAwICkge1xuXG5cdFx0XHRcdGRvbGx5SW4oIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGV2ZW50LmRlbHRhWSA+IDAgKSB7XG5cblx0XHRcdFx0ZG9sbHlPdXQoIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVLZXlEb3duKCBldmVudCApIHtcblxuXHRcdFx0bGV0IG5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdHN3aXRjaCAoIGV2ZW50LmNvZGUgKSB7XG5cblx0XHRcdFx0Y2FzZSBzY29wZS5rZXlzLlVQOlxuXHRcdFx0XHRcdHBhbiggMCwgc2NvcGUua2V5UGFuU3BlZWQgKTtcblx0XHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBzY29wZS5rZXlzLkJPVFRPTTpcblx0XHRcdFx0XHRwYW4oIDAsIC0gc2NvcGUua2V5UGFuU3BlZWQgKTtcblx0XHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBzY29wZS5rZXlzLkxFRlQ6XG5cdFx0XHRcdFx0cGFuKCBzY29wZS5rZXlQYW5TcGVlZCwgMCApO1xuXHRcdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIHNjb3BlLmtleXMuUklHSFQ6XG5cdFx0XHRcdFx0cGFuKCAtIHNjb3BlLmtleVBhblNwZWVkLCAwICk7XG5cdFx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdFx0Ly8gcHJldmVudCB0aGUgYnJvd3NlciBmcm9tIHNjcm9sbGluZyBvbiBjdXJzb3Iga2V5c1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0XHR9XG5cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoKSB7XG5cblx0XHRcdGlmICggcG9pbnRlcnMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHRcdHJvdGF0ZVN0YXJ0LnNldCggcG9pbnRlcnNbIDAgXS5wYWdlWCwgcG9pbnRlcnNbIDAgXS5wYWdlWSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IHggPSAwLjUgKiAoIHBvaW50ZXJzWyAwIF0ucGFnZVggKyBwb2ludGVyc1sgMSBdLnBhZ2VYICk7XG5cdFx0XHRcdGNvbnN0IHkgPSAwLjUgKiAoIHBvaW50ZXJzWyAwIF0ucGFnZVkgKyBwb2ludGVyc1sgMSBdLnBhZ2VZICk7XG5cblx0XHRcdFx0cm90YXRlU3RhcnQuc2V0KCB4LCB5ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRQYW4oKSB7XG5cblx0XHRcdGlmICggcG9pbnRlcnMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHRcdHBhblN0YXJ0LnNldCggcG9pbnRlcnNbIDAgXS5wYWdlWCwgcG9pbnRlcnNbIDAgXS5wYWdlWSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IHggPSAwLjUgKiAoIHBvaW50ZXJzWyAwIF0ucGFnZVggKyBwb2ludGVyc1sgMSBdLnBhZ2VYICk7XG5cdFx0XHRcdGNvbnN0IHkgPSAwLjUgKiAoIHBvaW50ZXJzWyAwIF0ucGFnZVkgKyBwb2ludGVyc1sgMSBdLnBhZ2VZICk7XG5cblx0XHRcdFx0cGFuU3RhcnQuc2V0KCB4LCB5ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnREb2xseSgpIHtcblxuXHRcdFx0Y29uc3QgZHggPSBwb2ludGVyc1sgMCBdLnBhZ2VYIC0gcG9pbnRlcnNbIDEgXS5wYWdlWDtcblx0XHRcdGNvbnN0IGR5ID0gcG9pbnRlcnNbIDAgXS5wYWdlWSAtIHBvaW50ZXJzWyAxIF0ucGFnZVk7XG5cblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG5cdFx0XHRkb2xseVN0YXJ0LnNldCggMCwgZGlzdGFuY2UgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnREb2xseVBhbigpIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVab29tICkgaGFuZGxlVG91Y2hTdGFydERvbGx5KCk7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuICkgaGFuZGxlVG91Y2hTdGFydFBhbigpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlKCkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gKSBoYW5kbGVUb3VjaFN0YXJ0RG9sbHkoKTtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgKSBoYW5kbGVUb3VjaFN0YXJ0Um90YXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0XHRpZiAoIHBvaW50ZXJzLmxlbmd0aCA9PSAxICkge1xuXG5cdFx0XHRcdHJvdGF0ZUVuZC5zZXQoIGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IHBvc2l0aW9uID0gZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApO1xuXG5cdFx0XHRcdGNvbnN0IHggPSAwLjUgKiAoIGV2ZW50LnBhZ2VYICsgcG9zaXRpb24ueCApO1xuXHRcdFx0XHRjb25zdCB5ID0gMC41ICogKCBldmVudC5wYWdlWSArIHBvc2l0aW9uLnkgKTtcblxuXHRcdFx0XHRyb3RhdGVFbmQuc2V0KCB4LCB5ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cm90YXRlRGVsdGEuc3ViVmVjdG9ycyggcm90YXRlRW5kLCByb3RhdGVTdGFydCApLm11bHRpcGx5U2NhbGFyKCBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0XHRjb25zdCBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudDtcblxuXHRcdFx0cm90YXRlTGVmdCggMiAqIE1hdGguUEkgKiByb3RhdGVEZWx0YS54IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTsgLy8geWVzLCBoZWlnaHRcblxuXHRcdFx0cm90YXRlVXAoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBwb2ludGVycy5sZW5ndGggPT09IDEgKSB7XG5cblx0XHRcdFx0cGFuRW5kLnNldCggZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oIGV2ZW50ICk7XG5cblx0XHRcdFx0Y29uc3QgeCA9IDAuNSAqICggZXZlbnQucGFnZVggKyBwb3NpdGlvbi54ICk7XG5cdFx0XHRcdGNvbnN0IHkgPSAwLjUgKiAoIGV2ZW50LnBhZ2VZICsgcG9zaXRpb24ueSApO1xuXG5cdFx0XHRcdHBhbkVuZC5zZXQoIHgsIHkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHNjb3BlLnBhblNwZWVkICk7XG5cblx0XHRcdHBhbiggcGFuRGVsdGEueCwgcGFuRGVsdGEueSApO1xuXG5cdFx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZURvbGx5KCBldmVudCApIHtcblxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oIGV2ZW50ICk7XG5cblx0XHRcdGNvbnN0IGR4ID0gZXZlbnQucGFnZVggLSBwb3NpdGlvbi54O1xuXHRcdFx0Y29uc3QgZHkgPSBldmVudC5wYWdlWSAtIHBvc2l0aW9uLnk7XG5cblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG5cdFx0XHRkb2xseUVuZC5zZXQoIDAsIGRpc3RhbmNlICk7XG5cblx0XHRcdGRvbGx5RGVsdGEuc2V0KCAwLCBNYXRoLnBvdyggZG9sbHlFbmQueSAvIGRvbGx5U3RhcnQueSwgc2NvcGUuem9vbVNwZWVkICkgKTtcblxuXHRcdFx0ZG9sbHlPdXQoIGRvbGx5RGVsdGEueSApO1xuXG5cdFx0XHRkb2xseVN0YXJ0LmNvcHkoIGRvbGx5RW5kICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmVEb2xseVBhbiggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSApIGhhbmRsZVRvdWNoTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiApIGhhbmRsZVRvdWNoTW92ZVBhbiggZXZlbnQgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZURvbGx5Um90YXRlKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVab29tICkgaGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlICkgaGFuZGxlVG91Y2hNb3ZlUm90YXRlKCBldmVudCApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblx0XHQvLyBldmVudCBoYW5kbGVycyAtIEZTTTogbGlzdGVuIGZvciBldmVudHMgYW5kIHJlc2V0IHN0YXRlXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oIGV2ZW50ICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoIHBvaW50ZXJzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRzY29wZS5kb21FbGVtZW50LnNldFBvaW50ZXJDYXB0dXJlKCBldmVudC5wb2ludGVySWQgKTtcblxuXHRcdFx0XHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVybW92ZScsIG9uUG9pbnRlck1vdmUgKTtcblx0XHRcdFx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncG9pbnRlcnVwJywgb25Qb2ludGVyVXAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRhZGRQb2ludGVyKCBldmVudCApO1xuXG5cdFx0XHRpZiAoIGV2ZW50LnBvaW50ZXJUeXBlID09PSAndG91Y2gnICkge1xuXG5cdFx0XHRcdG9uVG91Y2hTdGFydCggZXZlbnQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRvbk1vdXNlRG93biggZXZlbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Qb2ludGVyTW92ZSggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGlmICggZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgKSB7XG5cblx0XHRcdFx0b25Ub3VjaE1vdmUoIGV2ZW50ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0b25Nb3VzZU1vdmUoIGV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uUG9pbnRlclVwKCBldmVudCApIHtcblxuXHRcdCAgICByZW1vdmVQb2ludGVyKCBldmVudCApO1xuXG5cdFx0ICAgIGlmICggcG9pbnRlcnMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0ICAgICAgICBzY29wZS5kb21FbGVtZW50LnJlbGVhc2VQb2ludGVyQ2FwdHVyZSggZXZlbnQucG9pbnRlcklkICk7XG5cblx0XHQgICAgICAgIHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJtb3ZlJywgb25Qb2ludGVyTW92ZSApO1xuXHRcdCAgICAgICAgc2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcnVwJywgb25Qb2ludGVyVXAgKTtcblxuXHRcdCAgICB9XG5cblx0XHQgICAgc2NvcGUuZGlzcGF0Y2hFdmVudCggX2VuZEV2ZW50ICk7XG5cblx0XHQgICAgc3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Qb2ludGVyQ2FuY2VsKCBldmVudCApIHtcblxuXHRcdFx0cmVtb3ZlUG9pbnRlciggZXZlbnQgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uTW91c2VEb3duKCBldmVudCApIHtcblxuXHRcdFx0bGV0IG1vdXNlQWN0aW9uO1xuXG5cdFx0XHRzd2l0Y2ggKCBldmVudC5idXR0b24gKSB7XG5cblx0XHRcdFx0Y2FzZSAwOlxuXG5cdFx0XHRcdFx0bW91c2VBY3Rpb24gPSBzY29wZS5tb3VzZUJ1dHRvbnMuTEVGVDtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDE6XG5cblx0XHRcdFx0XHRtb3VzZUFjdGlvbiA9IHNjb3BlLm1vdXNlQnV0dG9ucy5NSURETEU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAyOlxuXG5cdFx0XHRcdFx0bW91c2VBY3Rpb24gPSBzY29wZS5tb3VzZUJ1dHRvbnMuUklHSFQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdG1vdXNlQWN0aW9uID0gLSAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCAoIG1vdXNlQWN0aW9uICkge1xuXG5cdFx0XHRcdGNhc2UgTU9VU0UuRE9MTFk6XG5cblx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0aGFuZGxlTW91c2VEb3duRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLkRPTExZO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNT1VTRS5ST1RBVEU6XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuUEFOO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVNb3VzZURvd25Sb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuUk9UQVRFO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNT1VTRS5QQU46XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVNb3VzZURvd25Sb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuUk9UQVRFO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuUEFOO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHN0YXRlICE9PSBTVEFURS5OT05FICkge1xuXG5cdFx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIF9zdGFydEV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uTW91c2VNb3ZlKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0c3dpdGNoICggc3RhdGUgKSB7XG5cblx0XHRcdFx0Y2FzZSBTVEFURS5ST1RBVEU6XG5cblx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFNUQVRFLkRPTExZOlxuXG5cdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVab29tID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdGhhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBTVEFURS5QQU46XG5cblx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVQYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Nb3VzZVdoZWVsKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVab29tID09PSBmYWxzZSB8fCBzdGF0ZSAhPT0gU1RBVEUuTk9ORSApIHJldHVybjtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggX3N0YXJ0RXZlbnQgKTtcblxuXHRcdFx0aGFuZGxlTW91c2VXaGVlbCggZXZlbnQgKTtcblxuXHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggX2VuZEV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbktleURvd24oIGV2ZW50ICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGhhbmRsZUtleURvd24oIGV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblRvdWNoU3RhcnQoIGV2ZW50ICkge1xuXG5cdFx0XHR0cmFja1BvaW50ZXIoIGV2ZW50ICk7XG5cblx0XHRcdHN3aXRjaCAoIHBvaW50ZXJzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRjYXNlIDE6XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBzY29wZS50b3VjaGVzLk9ORSApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSBUT1VDSC5ST1RBVEU6XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRcdGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoKTtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX1JPVEFURTtcblxuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBUT1VDSC5QQU46XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRcdGhhbmRsZVRvdWNoU3RhcnRQYW4oKTtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX1BBTjtcblxuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDI6XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBzY29wZS50b3VjaGVzLlRXTyApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSBUT1VDSC5ET0xMWV9QQU46XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVab29tID09PSBmYWxzZSAmJiBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRcdGhhbmRsZVRvdWNoU3RhcnREb2xseVBhbigpO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuVE9VQ0hfRE9MTFlfUEFOO1xuXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFRPVUNILkRPTExZX1JPVEFURTpcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRcdFx0aGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlKCk7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5UT1VDSF9ET0xMWV9ST1RBVEU7XG5cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHN0YXRlICE9PSBTVEFURS5OT05FICkge1xuXG5cdFx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIF9zdGFydEV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKCBldmVudCApIHtcblxuXHRcdFx0dHJhY2tQb2ludGVyKCBldmVudCApO1xuXG5cdFx0XHRzd2l0Y2ggKCBzdGF0ZSApIHtcblxuXHRcdFx0XHRjYXNlIFNUQVRFLlRPVUNIX1JPVEFURTpcblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdGhhbmRsZVRvdWNoTW92ZVJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBTVEFURS5UT1VDSF9QQU46XG5cblx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRoYW5kbGVUb3VjaE1vdmVQYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgU1RBVEUuVE9VQ0hfRE9MTFlfUEFOOlxuXG5cdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVab29tID09PSBmYWxzZSAmJiBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlRG9sbHlQYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgU1RBVEUuVE9VQ0hfRE9MTFlfUk9UQVRFOlxuXG5cdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVab29tID09PSBmYWxzZSAmJiBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlRG9sbHlSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uQ29udGV4dE1lbnUoIGV2ZW50ICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWRkUG9pbnRlciggZXZlbnQgKSB7XG5cblx0XHRcdHBvaW50ZXJzLnB1c2goIGV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiByZW1vdmVQb2ludGVyKCBldmVudCApIHtcblxuXHRcdFx0ZGVsZXRlIHBvaW50ZXJQb3NpdGlvbnNbIGV2ZW50LnBvaW50ZXJJZCBdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb2ludGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBwb2ludGVyc1sgaSBdLnBvaW50ZXJJZCA9PSBldmVudC5wb2ludGVySWQgKSB7XG5cblx0XHRcdFx0XHRwb2ludGVycy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiB0cmFja1BvaW50ZXIoIGV2ZW50ICkge1xuXG5cdFx0XHRsZXQgcG9zaXRpb24gPSBwb2ludGVyUG9zaXRpb25zWyBldmVudC5wb2ludGVySWQgXTtcblxuXHRcdFx0aWYgKCBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcblx0XHRcdFx0cG9pbnRlclBvc2l0aW9uc1sgZXZlbnQucG9pbnRlcklkIF0gPSBwb3NpdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0XHRwb3NpdGlvbi5zZXQoIGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Y29uc3QgcG9pbnRlciA9ICggZXZlbnQucG9pbnRlcklkID09PSBwb2ludGVyc1sgMCBdLnBvaW50ZXJJZCApID8gcG9pbnRlcnNbIDEgXSA6IHBvaW50ZXJzWyAwIF07XG5cblx0XHRcdHJldHVybiBwb2ludGVyUG9zaXRpb25zWyBwb2ludGVyLnBvaW50ZXJJZCBdO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NvbnRleHRtZW51Jywgb25Db250ZXh0TWVudSApO1xuXG5cdFx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncG9pbnRlcmRvd24nLCBvblBvaW50ZXJEb3duICk7XG5cdFx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncG9pbnRlcmNhbmNlbCcsIG9uUG9pbnRlckNhbmNlbCApO1xuXHRcdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgb25Nb3VzZVdoZWVsLCB7IHBhc3NpdmU6IGZhbHNlIH0gKTtcblxuXHRcdC8vIGZvcmNlIGFuIHVwZGF0ZSBhdCBzdGFydFxuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cbn1cblxuXG4vLyBUaGlzIHNldCBvZiBjb250cm9scyBwZXJmb3JtcyBvcmJpdGluZywgZG9sbHlpbmcgKHpvb21pbmcpLCBhbmQgcGFubmluZy5cbi8vIFVubGlrZSBUcmFja2JhbGxDb250cm9scywgaXQgbWFpbnRhaW5zIHRoZSBcInVwXCIgZGlyZWN0aW9uIG9iamVjdC51cCAoK1kgYnkgZGVmYXVsdCkuXG4vLyBUaGlzIGlzIHZlcnkgc2ltaWxhciB0byBPcmJpdENvbnRyb2xzLCBhbm90aGVyIHNldCBvZiB0b3VjaCBiZWhhdmlvclxuLy9cbi8vICAgIE9yYml0IC0gcmlnaHQgbW91c2UsIG9yIGxlZnQgbW91c2UgKyBjdHJsL21ldGEvc2hpZnRLZXkgLyB0b3VjaDogdHdvLWZpbmdlciByb3RhdGVcbi8vICAgIFpvb20gLSBtaWRkbGUgbW91c2UsIG9yIG1vdXNld2hlZWwgLyB0b3VjaDogdHdvLWZpbmdlciBzcHJlYWQgb3Igc3F1aXNoXG4vLyAgICBQYW4gLSBsZWZ0IG1vdXNlLCBvciBhcnJvdyBrZXlzIC8gdG91Y2g6IG9uZS1maW5nZXIgbW92ZVxuXG5jbGFzcyBNYXBDb250cm9scyBleHRlbmRzIE9yYml0Q29udHJvbHMge1xuXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIGRvbUVsZW1lbnQgKSB7XG5cblx0XHRzdXBlciggb2JqZWN0LCBkb21FbGVtZW50ICk7XG5cblx0XHR0aGlzLnNjcmVlblNwYWNlUGFubmluZyA9IGZhbHNlOyAvLyBwYW4gb3J0aG9nb25hbCB0byB3b3JsZC1zcGFjZSBkaXJlY3Rpb24gY2FtZXJhLnVwXG5cblx0XHR0aGlzLm1vdXNlQnV0dG9ucy5MRUZUID0gTU9VU0UuUEFOO1xuXHRcdHRoaXMubW91c2VCdXR0b25zLlJJR0hUID0gTU9VU0UuUk9UQVRFO1xuXG5cdFx0dGhpcy50b3VjaGVzLk9ORSA9IFRPVUNILlBBTjtcblx0XHR0aGlzLnRvdWNoZXMuVFdPID0gVE9VQ0guRE9MTFlfUk9UQVRFO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBPcmJpdENvbnRyb2xzLCBNYXBDb250cm9scyB9O1xuIiwiaW1wb3J0IHsgQ29sb3IsIFBlcnNwZWN0aXZlQ2FtZXJhLCBTY2VuZSwgV2ViR0xSZW5kZXJlciB9IGZyb20gXCJ0aHJlZVwiO1xyXG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzXCI7XHJcbnZhciBCYXNlU2NlbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCYXNlU2NlbmUoY2FudmFzKSB7XHJcbiAgICAgICAgdGhpcy5zY2VuZSA9IG5ldyBTY2VuZSgpO1xyXG4gICAgICAgIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBDb2xvcignd2hpdGUnKTtcclxuICAgICAgICB2YXIgX2EgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFdlYkdMUmVuZGVyZXIoeyBjYW52YXM6IGNhbnZhcyB9KTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcclxuICAgICAgICB0aGlzLmNhbWVyYS5hc3BlY3QgPSB3aWR0aCAvIGhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICAgICAgdGhpcy5jb250cm9scyA9IG5ldyBPcmJpdENvbnRyb2xzKHRoaXMuY2FtZXJhLCBjYW52YXMpO1xyXG4gICAgfVxyXG4gICAgQmFzZVNjZW5lLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jb250cm9scy51cGRhdGUoKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJhc2VTY2VuZTtcclxufSgpKTtcclxuZXhwb3J0IHsgQmFzZVNjZW5lIH07XHJcbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5pbXBvcnQgeyBQT1NFX0xBTkRNQVJLUywgUE9TRV9MQU5ETUFSS1NfTEVGVCwgUE9TRV9MQU5ETUFSS1NfUklHSFQgfSBmcm9tIFwiQG1lZGlhcGlwZS9wb3NlXCI7XHJcbmltcG9ydCB7IGJ1aWxkT3dsIH0gZnJvbSBcIi4vb3dsXCI7XHJcbmltcG9ydCB7IGdldEFuZ2xlLCBnZXRDZW50ZXIgfSBmcm9tIFwiLi4vY29yZS9tYXRoXCI7XHJcbmltcG9ydCB7IEJhc2VTY2VuZSB9IGZyb20gXCIuLi9jb3JlL2Jhc2Utc2NlbmVcIjtcclxudmFyIE93bFNjZW5lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE93bFNjZW5lLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gT3dsU2NlbmUoY2FudmFzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY2FudmFzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLm93bCA9IG51bGw7XHJcbiAgICAgICAgX3RoaXMuYnVpbGQoKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPd2xTY2VuZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcclxuICAgICAgICB2YXIgb3dsID0gdGhpcy5vd2w7XHJcbiAgICAgICAgaWYgKCFvd2wgfHwgIXJlc3VsdHMucG9zZUxhbmRtYXJrcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwb3NlID0gcmVzdWx0cy5wb3NlTGFuZG1hcmtzLm1hcChmdW5jdGlvbiAocCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgeDogcC54ICogMTAwIC0gNTAsXHJcbiAgICAgICAgICAgICAgICB5OiAtKHAueSAqIDEwMCAtIDUwKSxcclxuICAgICAgICAgICAgICAgIHo6IHAueiAqIDEwMCAtIDUwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBiZXR3ZWVuU2hvdWxkZXJzID0gZ2V0Q2VudGVyKFtcclxuICAgICAgICAgICAgcG9zZVtQT1NFX0xBTkRNQVJLUy5MRUZUX1NIT1VMREVSXSxcclxuICAgICAgICAgICAgcG9zZVtQT1NFX0xBTkRNQVJLUy5SSUdIVF9TSE9VTERFUl1cclxuICAgICAgICBdKTtcclxuICAgICAgICB2YXIgYmV0d2VlbkhpcHMgPSBnZXRDZW50ZXIoW1xyXG4gICAgICAgICAgICBwb3NlW1BPU0VfTEFORE1BUktTLkxFRlRfSElQXSxcclxuICAgICAgICAgICAgcG9zZVtQT1NFX0xBTkRNQVJLUy5SSUdIVF9ISVBdXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgb3dsLnRvcnNvLnJvdGF0aW9uLnogPSBNYXRoLlBJIC8gMiArIGdldEFuZ2xlKGJldHdlZW5TaG91bGRlcnMsIGJldHdlZW5IaXBzKTtcclxuICAgICAgICBvd2wubmVjay5yb3RhdGlvbi56ID0gLU1hdGguUEkgLyAyICsgZ2V0QW5nbGUoYmV0d2VlblNob3VsZGVycywgcG9zZVtQT1NFX0xBTkRNQVJLUy5OT1NFXSkgLSBvd2wudG9yc28ucm90YXRpb24uejtcclxuICAgICAgICBvd2wubGVmdFNob3VsZGVyLnJvdGF0aW9uLnogPSAtLjcgKyBnZXRBbmdsZShwb3NlW1BPU0VfTEFORE1BUktTLkxFRlRfU0hPVUxERVJdLCBwb3NlW1BPU0VfTEFORE1BUktTLkxFRlRfRUxCT1ddKSAtIG93bC50b3Jzby5yb3RhdGlvbi56O1xyXG4gICAgICAgIG93bC5sZWZ0RWxib3cucm90YXRpb24ueiA9IE1hdGguUEkgLyA0ICsgZ2V0QW5nbGUocG9zZVtQT1NFX0xBTkRNQVJLUy5MRUZUX0VMQk9XXSwgcG9zZVtQT1NFX0xBTkRNQVJLUy5MRUZUX1dSSVNUXSkgLSBvd2wubGVmdFNob3VsZGVyLnJvdGF0aW9uLnogLSBvd2wudG9yc28ucm90YXRpb24uejtcclxuICAgICAgICBvd2wucmlnaHRTaG91bGRlci5yb3RhdGlvbi56ID0gLjcgKyBNYXRoLlBJICsgZ2V0QW5nbGUocG9zZVtQT1NFX0xBTkRNQVJLUy5SSUdIVF9TSE9VTERFUl0sIHBvc2VbUE9TRV9MQU5ETUFSS1MuUklHSFRfRUxCT1ddKSAtIG93bC50b3Jzby5yb3RhdGlvbi56O1xyXG4gICAgICAgIG93bC5yaWdodEVsYm93LnJvdGF0aW9uLnogPSAtLjcgKyBNYXRoLlBJICsgZ2V0QW5nbGUocG9zZVtQT1NFX0xBTkRNQVJLUy5SSUdIVF9FTEJPV10sIHBvc2VbUE9TRV9MQU5ETUFSS1MuUklHSFRfV1JJU1RdKSAtIG93bC5yaWdodFNob3VsZGVyLnJvdGF0aW9uLnogLSBvd2wudG9yc28ucm90YXRpb24uejtcclxuICAgICAgICBvd2wubGVmdEhpcC5yb3RhdGlvbi56ID0gTWF0aC5QSSAvIDIgKyBnZXRBbmdsZShwb3NlW1BPU0VfTEFORE1BUktTLkxFRlRfSElQXSwgcG9zZVtQT1NFX0xBTkRNQVJLU19MRUZULkxFRlRfS05FRV0pIC0gb3dsLnRvcnNvLnJvdGF0aW9uLno7XHJcbiAgICAgICAgb3dsLnJpZ2h0SGlwLnJvdGF0aW9uLnogPSBNYXRoLlBJIC8gMiArIGdldEFuZ2xlKHBvc2VbUE9TRV9MQU5ETUFSS1MuUklHSFRfSElQXSwgcG9zZVtQT1NFX0xBTkRNQVJLU19SSUdIVC5SSUdIVF9LTkVFXSkgLSBvd2wudG9yc28ucm90YXRpb24uejtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfTtcclxuICAgIE93bFNjZW5lLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLm93bCA9IGJ1aWxkT3dsKCk7XHJcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5vd2wuYW5jaG9yKTtcclxuICAgICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gMjUwO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPd2xTY2VuZTtcclxufShCYXNlU2NlbmUpKTtcclxuZXhwb3J0IHsgT3dsU2NlbmUgfTtcclxuIiwiaW1wb3J0IHsgUG9zZSB9IGZyb20gXCJAbWVkaWFwaXBlL3Bvc2VcIjtcclxuaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSBcIkBtZWRpYXBpcGUvY2FtZXJhX3V0aWxzXCI7XHJcbnZhciBQb3NlRXN0aW1hdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUG9zZUVzdGltYXRvcihoZWlnaHQsIHdpZHRoKSB7XHJcbiAgICAgICAgaWYgKGhlaWdodCA9PT0gdm9pZCAwKSB7IGhlaWdodCA9IDM2MDsgfVxyXG4gICAgICAgIGlmICh3aWR0aCA9PT0gdm9pZCAwKSB7IHdpZHRoID0gNjQwOyB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgIHZhciB2aWRlb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xyXG4gICAgICAgIHRoaXMucG9zZSA9IG5ldyBQb3NlKHtcclxuICAgICAgICAgICAgbG9jYXRlRmlsZTogZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQG1lZGlhcGlwZS9wb3NlL1wiLmNvbmNhdChmaWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucG9zZS5zZXRPcHRpb25zKHtcclxuICAgICAgICAgICAgbW9kZWxDb21wbGV4aXR5OiAxLFxyXG4gICAgICAgICAgICBzbW9vdGhMYW5kbWFya3M6IHRydWUsXHJcbiAgICAgICAgICAgIGVuYWJsZVNlZ21lbnRhdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgc21vb3RoU2VnbWVudGF0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICBtaW5EZXRlY3Rpb25Db25maWRlbmNlOiAwLjUsXHJcbiAgICAgICAgICAgIG1pblRyYWNraW5nQ29uZmlkZW5jZTogMC41XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wb3NlLm9uUmVzdWx0cyhmdW5jdGlvbiAocmVzdWx0cykgeyByZXR1cm4gX3RoaXMubm90aWZ5TGlzdGVuZXJzKHJlc3VsdHMpOyB9KTtcclxuICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEodmlkZW9FbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG9uRnJhbWU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnBvc2Uuc2VuZCh7IGltYWdlOiB2aWRlb0VsZW1lbnQgfSk7IH0sXHJcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFBvc2VFc3RpbWF0b3IucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLnN0YXJ0KCk7XHJcbiAgICB9O1xyXG4gICAgUG9zZUVzdGltYXRvci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNhbWVyYS5zdG9wKCk7XHJcbiAgICB9O1xyXG4gICAgUG9zZUVzdGltYXRvci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH07XHJcbiAgICBQb3NlRXN0aW1hdG9yLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZSh0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XHJcbiAgICB9O1xyXG4gICAgUG9zZUVzdGltYXRvci5wcm90b3R5cGUubm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4ocmVzdWx0cyk7IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQb3NlRXN0aW1hdG9yO1xyXG59KCkpO1xyXG5leHBvcnQgeyBQb3NlRXN0aW1hdG9yIH07XHJcbiIsImltcG9ydCB7IFBPU0VfQ09OTkVDVElPTlMgfSBmcm9tIFwiQG1lZGlhcGlwZS9wb3NlXCI7XHJcbmltcG9ydCB7IGRyYXdDb25uZWN0b3JzLCBkcmF3TGFuZG1hcmtzIH0gZnJvbSBcIkBtZWRpYXBpcGUvZHJhd2luZ191dGlsc1wiO1xyXG52YXIgVmlkZW9TY2VuZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZGVvU2NlbmUoY2FudmFzKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICB9XHJcbiAgICBWaWRlb1NjZW5lLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAocmVzdWx0cykge1xyXG4gICAgICAgIHZhciBjYW52YXNDdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIGNhbnZhc0N0eC5kcmF3SW1hZ2UocmVzdWx0cy5pbWFnZSwgMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgY2FudmFzQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XHJcbiAgICAgICAgZHJhd0Nvbm5lY3RvcnMoY2FudmFzQ3R4LCByZXN1bHRzLnBvc2VMYW5kbWFya3MsIFBPU0VfQ09OTkVDVElPTlMsIHsgY29sb3I6ICcjMDAwMGZmJywgbGluZVdpZHRoOiAuMiB9KTtcclxuICAgICAgICBkcmF3TGFuZG1hcmtzKGNhbnZhc0N0eCwgcmVzdWx0cy5wb3NlTGFuZG1hcmtzLCB7IGNvbG9yOiAnIzAwZmYwMCcsIHJhZGl1czogLjUgfSk7XHJcbiAgICAgICAgY2FudmFzQ3R4LnJlc3RvcmUoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVmlkZW9TY2VuZTtcclxufSgpKTtcclxuZXhwb3J0IHsgVmlkZW9TY2VuZSB9O1xyXG4iLCJpbXBvcnQgeyBPd2xTY2VuZSB9IGZyb20gXCIuL293bC1zY2VuZS9vd2wtc2NlbmVcIjtcclxuaW1wb3J0IHsgUG9zZUVzdGltYXRvciB9IGZyb20gXCIuL2NvcmUvcG9zZS1lc3RpbWF0b3JcIjtcclxuaW1wb3J0IHsgVmlkZW9TY2VuZSB9IGZyb20gXCIuL3ZpZGVvLXNjZW5lL3ZpZGVvLXNjZW5lXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBtYWluKCkge1xyXG4gICAgdmFyIGN1cnJlbnRSZXN1bHRzID0gbnVsbDtcclxuICAgIHZhciBwb3NlRXN0aW1hdG9yID0gbmV3IFBvc2VFc3RpbWF0b3IoKTtcclxuICAgIHBvc2VFc3RpbWF0b3IuYWRkTGlzdGVuZXIoZnVuY3Rpb24gKHJlc3VsdHMpIHsgcmV0dXJuIGN1cnJlbnRSZXN1bHRzID0gcmVzdWx0czsgfSk7XHJcbiAgICBwb3NlRXN0aW1hdG9yLnN0YXJ0KCk7XHJcbiAgICB2YXIgc2NlbmVzID0gW1xyXG4gICAgICAgIG5ldyBWaWRlb1NjZW5lKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWRlby1jYW52YXMnKSksXHJcbiAgICAgICAgLy9uZXcgU3RpY2tGaWd1cmVTY2VuZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RpY2stZmlndXJlLWNhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50KSxcclxuICAgICAgICBuZXcgT3dsU2NlbmUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ293bC1jYW52YXMnKSksXHJcbiAgICBdO1xyXG4gICAgZnVuY3Rpb24gYW5pbWF0ZSgpIHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRSZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHNjZW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChzY2VuZSkgeyByZXR1cm4gc2NlbmUudXBkYXRlKGN1cnJlbnRSZXN1bHRzKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYW5pbWF0ZSgpO1xyXG59XHJcbm1haW4oKTtcclxuIl0sIm5hbWVzIjpbIm4iLCJhIiwiYiIsImxlbmd0aCIsImRvbmUiLCJ2YWx1ZSIsInEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJ1IiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnIiwiTWF0aCIsIkVycm9yIiwidCIsInRoaXMiLCJ2Iiwic3BsaXQiLCJmIiwiaCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidyIsIm5leHQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIngiLCJjYWxsIiwieSIsImkiLCJvIiwiaiIsIm0iLCJ6IiwiVHlwZUVycm9yIiwiQSIsIkYiLCJHIiwiQiIsIkQiLCJsIiwiYyIsIkgiLCJyZXR1cm4iLCJJIiwidGhyb3ciLCJDIiwiSiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInRvU3RyaW5nIiwicmFuZG9tIiwiZCIsInJlamVjdCIsInB1c2giLCJzZXRUaW1lb3V0IiwiayIsImNvbnNvbGUiLCJlcnJvciIsIkN1c3RvbUV2ZW50IiwiRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY2FuY2VsYWJsZSIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJwcm9taXNlIiwicmVhc29uIiwicyIsInAiLCJyIiwiRSIsImNhdGNoIiwicmFjZSIsImFsbCIsIksiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJoYXNPd25Qcm9wZXJ0eSIsIkwiLCJNIiwiZmFjaW5nTW9kZSIsIndpZHRoIiwiaGVpZ2h0IiwiTiIsInZpZGVvIiwiUCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBhdXNlZCIsImN1cnJlbnRUaW1lIiwib25GcmFtZSIsIlEiLCJzdG9wIiwiZ2V0VHJhY2tzIiwic3RhcnQiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJhbGVydCIsInNyY09iamVjdCIsIm9ubG9hZGVkbWV0YWRhdGEiLCJwbGF5IiwiTyIsIlQiLCJSIiwiUyIsImV4ZWNTY3JpcHQiLCJzaGlmdCIsImZpbGwiLCJtYXgiLCJOdW1iZXIiLCJjb2xvciIsImxpbmVXaWR0aCIsInJhZGl1cyIsInZpc2liaWxpdHlNaW4iLCJmaWxsQ29sb3IiLCJGdW5jdGlvbiIsIm1pbiIsInNhdmUiLCJjYW52YXMiLCJ2aXNpYmlsaXR5IiwiZmlsbFN0eWxlIiwiaW5kZXgiLCJmcm9tIiwic3Ryb2tlU3R5bGUiLCJQYXRoMkQiLCJhcmMiLCJQSSIsInN0cm9rZSIsInJlc3RvcmUiLCJiZWdpblBhdGgiLCJ0byIsIm1vdmVUbyIsImxpbmVUbyIsInRyYW5zbGF0ZSIsInhDZW50ZXIiLCJ5Q2VudGVyIiwicm90YXRlIiwicm90YXRpb24iLCJyZWN0IiwiYWEiLCJiYSIsImNhIiwiZGEiLCJlYSIsImhhIiwiZmEiLCJjcmVhdGUiLCJzZXRQcm90b3R5cGVPZiIsImlhIiwia2EiLCJfX3Byb3RvX18iLCJsYSIsImNvbnN0cnVjdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibWEiLCJuYSIsIm9hIiwiVSIsIlYiLCJwYSIsInJhIiwic2EiLCJxYSIsInRhIiwidmEiLCJTdHJpbmciLCJpcyIsIlJlZ0V4cCIsImluZGV4T2YiLCJ1YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsIkJhIiwiRGEiLCJDYSIsIlRleHREZWNvZGVyIiwiRWEiLCJUZXh0RW5jb2RlciIsIkZhIiwiZW5jb2RlIiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJzdWJhcnJheSIsIkdhIiwiSGEiLCJJYSIsImZsb29yIiwiam9pbiIsIkphIiwiY2hhckF0IiwidGVzdCIsIkthIiwiY29uY2F0IiwiTWEiLCJMYSIsIk5hIiwidG9KU09OIiwiT2EiLCJzbGljZSIsIlBhIiwiUmEiLCJTYSIsIkFycmF5QnVmZmVyIiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJRYSIsInJlc2V0IiwiVGEiLCJVYSIsImNlaWwiLCJzZXQiLCJWYSIsInBvcCIsIldhIiwiWGEiLCJZYSIsImVuZCIsIlphIiwiJGEiLCJhYiIsImJiIiwibGIiLCJjYiIsImRiIiwiaXNGcm96ZW4iLCJlbnVtZXJhYmxlIiwiZWIiLCJmYiIsImlzQXJyYXkiLCJnYiIsImhiIiwiaWIiLCJpc0Zpbml0ZSIsImpiIiwia2IiLCJNQVhfVkFMVUUiLCJtYiIsIm5iIiwiRGIiLCJJYiIsImZyZWV6ZSIsIm9iIiwiVyIsInBiIiwicWIiLCJzcGxpY2UiLCJYIiwicmIiLCJzYiIsInRiIiwidWIiLCJ2YiIsIndiIiwieGIiLCJZIiwiaXNOYU4iLCJyb3VuZCIsInBvdyIsImxvZyIsIkxOMiIsIloiLCJOYU4iLCJJbmZpbml0eSIsInliIiwiemIiLCJBYiIsImZhdGFsIiwiZGVjb2RlIiwiQmIiLCJDYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSmIiLCJhZGRDbGFzc2lmaWNhdGlvbiIsIkxiIiwiUWIiLCJLYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUmIiLCJUYiIsIlNiIiwiVWIiLCJhYnMiLCJWYiIsIldiIiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsIkZSQUdNRU5UX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImdldFNoYWRlckluZm9Mb2ciLCJYYiIsIm1hcCIsImxhYmVsIiwiZGlzcGxheU5hbWUiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwidXNlUHJvZ3JhbSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsImdldEF0dHJpYkxvY2F0aW9uIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsIkZMT0FUIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwidW5pZm9ybTFpIiwidmlld3BvcnQiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJiaW5kVGV4dHVyZTJkIiwiZ2xOYW1lIiwiYmluZEZyYW1lYnVmZmVyIiwiRFJBV19GUkFNRUJVRkZFUiIsIkZSQU1FQlVGRkVSIiwiY2xlYXJDb2xvciIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsImNvbG9yTWFzayIsImRyYXdBcnJheXMiLCJUUklBTkdMRV9GQU4iLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJiYyIsInRyYW5zZmVyVG9JbWFnZUJpdG1hcCIsImNyZWF0ZUltYWdlQml0bWFwIiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJjYyIsImRjIiwiZWMiLCJmYyIsImljIiwibGlzdGVuZXJzIiwibG9jYXRlRmlsZSIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsIm9wdGlvbnMiLCJrZXlzIiwiZGVmYXVsdCIsImtjIiwiZmV0Y2giLCJhcnJheUJ1ZmZlciIsIm1jIiwibmFtZSIsIndhbnRzIiwiU3RyaW5nTGlzdCIsInB1c2hfYmFjayIsIlBhY2tldExpc3RlbmVyIiwiaW1wbGVtZW50Iiwib25SZXN1bHRzIiwiZ2V0IiwidHlwZSIsInN0cmVhbSIsIlVpbnQ4QmxvYkxpc3QiLCJUZXh0dXJlMmREYXRhT3V0IiwicGMiLCJnZXRSZWN0TGlzdCIsImdldExhbmRtYXJrc0xpc3QiLCJnZXRDbGFzc2lmaWNhdGlvbnNMaXN0Iiwic2l6ZSIsImRlbGV0ZSIsInRyYW5zZm9ybSIsIm9jIiwib3V0cyIsImF0dGFjaE11bHRpTGlzdGVuZXIiLCJxYyIsInJjIiwiZmlsZXMiLCJ1cmwiLCJzaW1kIiwiZGF0YSIsIm1vZGVsQ29tcGxleGl0eSIsImdyYXBoIiwiaW1hZ2UiLCJwb3NlTGFuZG1hcmtzIiwicG9zZVdvcmxkTGFuZG1hcmtzIiwic2VnbWVudGF0aW9uTWFzayIsImlucHV0cyIsInVzZUNwdUluZmVyZW5jZSIsImdyYXBoT3B0aW9uWHJlZiIsImNhbGN1bGF0b3JUeXBlIiwiZmllbGROYW1lIiwiaW5jbHVkZXMiLCJwbGF0Zm9ybSIsInVzZXJBZ2VudCIsInNlbGZpZU1vZGUiLCJjYWxjdWxhdG9ySW5kZXgiLCJjYWxjdWxhdG9yTmFtZSIsIm9uQ2hhbmdlIiwib3ZlcnJpZGVGaWxlIiwic21vb3RoTGFuZG1hcmtzIiwiZW5hYmxlU2VnbWVudGF0aW9uIiwic21vb3RoU2VnbWVudGF0aW9uIiwibWluRGV0ZWN0aW9uQ29uZmlkZW5jZSIsIm1pblRyYWNraW5nQ29uZmlkZW5jZSIsImNsb3NlIiwic2V0T3B0aW9ucyIsInZhbHVlTnVtYmVyIiwidmFsdWVCb29sZWFuIiwidmFsdWVTdHJpbmciLCJpbml0aWFsaXplIiwiV2ViQXNzZW1ibHkiLCJpbnN0YW50aWF0ZSIsImZpbHRlciIsInBhdGgiLCJzZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZ2MiLCJjcmVhdGVNZWRpYXBpcGVTb2x1dGlvbnNXYXNtIiwiY3JlYXRlTWVkaWFwaXBlU29sdXRpb25zUGFja2VkQXNzZXRzIiwiaW1wb3J0U2NyaXB0cyIsIk1vZHVsZSIsIk9mZnNjcmVlbkNhbnZhcyIsIkdMIiwiY3JlYXRlQ29udGV4dCIsImFudGlhbGlhcyIsImFscGhhIiwiV2ViR0wyUmVuZGVyaW5nQ29udGV4dCIsIm1ha2VDb250ZXh0Q3VycmVudCIsIlNvbHV0aW9uV2FzbSIsImpjIiwibG9hZEdyYXBoIiwibGMiLCJHcmFwaE9wdGlvbkNoYW5nZVJlcXVlc3RMaXN0IiwiY2hhbmdlT3B0aW9ucyIsIm5jIiwiY2xlYXJPdmVycmlkZGVuRmlsZXMiLCJzZW5kIiwicGVyZm9ybWFuY2UiLCJub3ciLCJQYWNrZXREYXRhTGlzdCIsImNyZWF0ZVRleHR1cmUiLCJIVE1MVmlkZW9FbGVtZW50IiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwiSFRNTEltYWdlRWxlbWVudCIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJ0ZXhJbWFnZTJEIiwiVEVYVFVSRV8yRCIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwiRGV0ZWN0aW9uTGlzdERhdGEiLCJzZXRCb3VuZGluZ0JveCIsImFkZE5vcm1hbGl6ZWRMYW5kbWFyayIsInB1c2hUZXh0dXJlMmQiLCJ0aW1lc3RhbXAiLCJwdXNoRGV0ZWN0aW9uTGlzdCIsIkJPT0wiLCJOVU1CRVIiLCIkIiwiTk9TRSIsIkxFRlRfRVlFX0lOTkVSIiwiTEVGVF9FWUUiLCJMRUZUX0VZRV9PVVRFUiIsIlJJR0hUX0VZRV9JTk5FUiIsIlJJR0hUX0VZRSIsIlJJR0hUX0VZRV9PVVRFUiIsIkxFRlRfRUFSIiwiUklHSFRfRUFSIiwiTEVGVF9SSUdIVCIsIlJJR0hUX0xFRlQiLCJMRUZUX1NIT1VMREVSIiwiUklHSFRfU0hPVUxERVIiLCJMRUZUX0VMQk9XIiwiUklHSFRfRUxCT1ciLCJMRUZUX1dSSVNUIiwiUklHSFRfV1JJU1QiLCJMRUZUX1BJTktZIiwiUklHSFRfUElOS1kiLCJMRUZUX0lOREVYIiwiUklHSFRfSU5ERVgiLCJMRUZUX1RIVU1CIiwiUklHSFRfVEhVTUIiLCJMRUZUX0hJUCIsIlJJR0hUX0hJUCIsIkxFRlRfS05FRSIsIlJJR0hUX0tORUUiLCJMRUZUX0FOS0xFIiwiUklHSFRfQU5LTEUiLCJMRUZUX0hFRUwiLCJSSUdIVF9IRUVMIiwiTEVGVF9GT09UX0lOREVYIiwiUklHSFRfRk9PVF9JTkRFWCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiQWRkRXF1YXRpb24iLCJDdWJlUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlUmVmcmFjdGlvbk1hcHBpbmciLCJDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyIsIlJlcGVhdFdyYXBwaW5nIiwiQ2xhbXBUb0VkZ2VXcmFwcGluZyIsIk1pcnJvcmVkUmVwZWF0V3JhcHBpbmciLCJOZWFyZXN0RmlsdGVyIiwiTGluZWFyRmlsdGVyIiwiTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIiwiVW5zaWduZWRCeXRlVHlwZSIsIlVuc2lnbmVkU2hvcnRUeXBlIiwiVW5zaWduZWRJbnRUeXBlIiwiRmxvYXRUeXBlIiwiSGFsZkZsb2F0VHlwZSIsIlVuc2lnbmVkSW50MjQ4VHlwZSIsIlJHQkFGb3JtYXQiLCJEZXB0aEZvcm1hdCIsIkRlcHRoU3RlbmNpbEZvcm1hdCIsIlJHQl9TM1RDX0RYVDFfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDFfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDNfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDVfRm9ybWF0IiwiSW50ZXJwb2xhdGVEaXNjcmV0ZSIsIkludGVycG9sYXRlTGluZWFyIiwiSW50ZXJwb2xhdGVTbW9vdGgiLCJaZXJvQ3VydmF0dXJlRW5kaW5nIiwiWmVyb1Nsb3BlRW5kaW5nIiwiV3JhcEFyb3VuZEVuZGluZyIsIkxpbmVhckVuY29kaW5nIiwic1JHQkVuY29kaW5nIiwiU1JHQkNvbG9yU3BhY2UiLCJMaW5lYXJTUkdCQ29sb3JTcGFjZSIsIktlZXBTdGVuY2lsT3AiLCJTdGF0aWNEcmF3VXNhZ2UiLCJEeW5hbWljRHJhd1VzYWdlIiwiR0xTTDMiLCJfU1JHQkFGb3JtYXQiLCJFdmVudERpc3BhdGNoZXIiLCJsaXN0ZW5lciIsIl9saXN0ZW5lcnMiLCJoYXNFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyQXJyYXkiLCJldmVudCIsInRhcmdldCIsImFycmF5IiwiX2x1dCIsIkRFRzJSQUQiLCJSQUQyREVHIiwiZ2VuZXJhdGVVVUlEIiwiZDAiLCJkMSIsImQyIiwiZDMiLCJ0b0xvd2VyQ2FzZSIsImNsYW1wIiwibGVycCIsImlzUG93ZXJPZlR3byIsImZsb29yUG93ZXJPZlR3byIsIlZlY3RvcjIiLCJzZXRTY2FsYXIiLCJzY2FsYXIiLCJzZXRYIiwic2V0WSIsInNldENvbXBvbmVudCIsImdldENvbXBvbmVudCIsImNsb25lIiwiY29weSIsImFkZCIsIndhcm4iLCJhZGRWZWN0b3JzIiwiYWRkU2NhbGFyIiwiYWRkU2NhbGVkVmVjdG9yIiwic3ViIiwic3ViVmVjdG9ycyIsInN1YlNjYWxhciIsIm11bHRpcGx5IiwibXVsdGlwbHlTY2FsYXIiLCJkaXZpZGUiLCJkaXZpZGVTY2FsYXIiLCJhcHBseU1hdHJpeDMiLCJlbGVtZW50cyIsImNsYW1wU2NhbGFyIiwibWluVmFsIiwibWF4VmFsIiwiY2xhbXBMZW5ndGgiLCJyb3VuZFRvWmVybyIsIm5lZ2F0ZSIsImRvdCIsImNyb3NzIiwibGVuZ3RoU3EiLCJzcXJ0IiwibWFuaGF0dGFuTGVuZ3RoIiwibm9ybWFsaXplIiwiYW5nbGUiLCJhdGFuMiIsImRpc3RhbmNlVG8iLCJkaXN0YW5jZVRvU3F1YXJlZCIsImR4IiwiZHkiLCJtYW5oYXR0YW5EaXN0YW5jZVRvIiwic2V0TGVuZ3RoIiwibGVycFZlY3RvcnMiLCJ2MSIsInYyIiwiZXF1YWxzIiwiZnJvbUFycmF5Iiwib2Zmc2V0IiwidG9BcnJheSIsImZyb21CdWZmZXJBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJnZXRYIiwiZ2V0WSIsInJvdGF0ZUFyb3VuZCIsImNlbnRlciIsImNvcyIsInNpbiIsImlzVmVjdG9yMiIsIk1hdHJpeDMiLCJuMTEiLCJuMTIiLCJuMTMiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMzEiLCJuMzIiLCJuMzMiLCJ0ZSIsImlkZW50aXR5IiwibWUiLCJleHRyYWN0QmFzaXMiLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJzZXRGcm9tTWF0cml4M0NvbHVtbiIsInNldEZyb21NYXRyaXg0IiwibXVsdGlwbHlNYXRyaWNlcyIsInByZW11bHRpcGx5IiwiYWUiLCJiZSIsImExMSIsImExMiIsImExMyIsImEyMSIsImEyMiIsImEyMyIsImEzMSIsImEzMiIsImEzMyIsImIxMSIsImIxMiIsImIxMyIsImIyMSIsImIyMiIsImIyMyIsImIzMSIsImIzMiIsImIzMyIsImRldGVybWluYW50IiwiaW52ZXJ0IiwidDExIiwidDEyIiwidDEzIiwiZGV0IiwiZGV0SW52IiwidHJhbnNwb3NlIiwidG1wIiwiZ2V0Tm9ybWFsTWF0cml4IiwibWF0cml4NCIsInRyYW5zcG9zZUludG9BcnJheSIsInNldFV2VHJhbnNmb3JtIiwidHgiLCJ0eSIsInN4Iiwic3kiLCJjeCIsImN5Iiwic2NhbGUiLCJ0aGV0YSIsIm1hdHJpeCIsImFycmF5TmVlZHNVaW50MzIiLCJjcmVhdGVFbGVtZW50TlMiLCJTUkdCVG9MaW5lYXIiLCJMaW5lYXJUb1NSR0IiLCJpc01hdHJpeDMiLCJJbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkZOIiwiQ29sb3JNYW5hZ2VtZW50IiwibGVnYWN5TW9kZSIsIndvcmtpbmdDb2xvclNwYWNlIiwiY29sb3JTcGFjZSIsImNvbnZlcnQiLCJzb3VyY2VDb2xvclNwYWNlIiwidGFyZ2V0Q29sb3JTcGFjZSIsImZuIiwiZnJvbVdvcmtpbmdDb2xvclNwYWNlIiwidG9Xb3JraW5nQ29sb3JTcGFjZSIsIl9jb2xvcktleXdvcmRzIiwiX3JnYiIsIl9oc2xBIiwiX2hzbEIiLCJodWUycmdiIiwidG9Db21wb25lbnRzIiwic291cmNlIiwiQ29sb3IiLCJzZXRSR0IiLCJpc0NvbG9yIiwic2V0SGV4Iiwic2V0U3R5bGUiLCJoZXgiLCJzZXRIU0wiLCJzdHlsZSIsImhhbmRsZUFscGhhIiwic3RyaW5nIiwicGFyc2VGbG9hdCIsImV4ZWMiLCJjb21wb25lbnRzIiwicGFyc2VJbnQiLCJzZXRDb2xvck5hbWUiLCJjb3B5U1JHQlRvTGluZWFyIiwiY29weUxpbmVhclRvU1JHQiIsImNvbnZlcnRTUkdCVG9MaW5lYXIiLCJjb252ZXJ0TGluZWFyVG9TUkdCIiwiZ2V0SGV4IiwiZ2V0SGV4U3RyaW5nIiwiZ2V0SFNMIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImRlbHRhIiwiZ2V0UkdCIiwiZ2V0U3R5bGUiLCJvZmZzZXRIU0wiLCJhZGRDb2xvcnMiLCJjb2xvcjEiLCJjb2xvcjIiLCJsZXJwQ29sb3JzIiwibGVycEhTTCIsImdldFoiLCJub3JtYWxpemVkIiwiX2NhbnZhcyIsIk5BTUVTIiwiSW1hZ2VVdGlscyIsInN0YXRpYyIsInNyYyIsIkhUTUxDYW52YXNFbGVtZW50IiwiY29udGV4dCIsIkltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsInRvRGF0YVVSTCIsIkltYWdlQml0bWFwIiwiaW1hZ2VEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwiU291cmNlIiwidXVpZCIsInZlcnNpb24iLCJuZWVkc1VwZGF0ZSIsIm1ldGEiLCJpc1Jvb3RPYmplY3QiLCJpbWFnZXMiLCJvdXRwdXQiLCJpc0RhdGFUZXh0dXJlIiwic2VyaWFsaXplSW1hZ2UiLCJnZXREYXRhVVJMIiwiaXNTb3VyY2UiLCJ0ZXh0dXJlSWQiLCJUZXh0dXJlIiwiREVGQVVMVF9JTUFHRSIsIm1hcHBpbmciLCJERUZBVUxUX01BUFBJTkciLCJ3cmFwUyIsIndyYXBUIiwibWFnRmlsdGVyIiwibWluRmlsdGVyIiwiZm9ybWF0IiwiYW5pc290cm9weSIsImVuY29kaW5nIiwic3VwZXIiLCJtaXBtYXBzIiwiaW50ZXJuYWxGb3JtYXQiLCJyZXBlYXQiLCJtYXRyaXhBdXRvVXBkYXRlIiwiZ2VuZXJhdGVNaXBtYXBzIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwidXNlckRhdGEiLCJvblVwZGF0ZSIsImlzUmVuZGVyVGFyZ2V0VGV4dHVyZSIsIm5lZWRzUE1SRU1VcGRhdGUiLCJ1cGRhdGVNYXRyaXgiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJ0ZXh0dXJlcyIsIm1ldGFkYXRhIiwiZ2VuZXJhdG9yIiwid3JhcCIsImRpc3Bvc2UiLCJ0cmFuc2Zvcm1VdiIsInV2IiwiaXNUZXh0dXJlIiwiVmVjdG9yNCIsInNldFoiLCJzZXRXIiwiYXBwbHlNYXRyaXg0Iiwic2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb24iLCJhY29zIiwic2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4IiwiZXBzaWxvbiIsImVwc2lsb24yIiwibTExIiwibTEyIiwibTEzIiwibTIxIiwibTIyIiwibTIzIiwibTMxIiwibTMyIiwibTMzIiwieHgiLCJ5eSIsInp6IiwieHkiLCJ4eiIsInl6IiwiZ2V0VyIsImlzVmVjdG9yNCIsIldlYkdMUmVuZGVyVGFyZ2V0IiwiZGVwdGgiLCJzY2lzc29yIiwic2Npc3NvclRlc3QiLCJ0ZXh0dXJlIiwiZGVwdGhCdWZmZXIiLCJzdGVuY2lsQnVmZmVyIiwiZGVwdGhUZXh0dXJlIiwic2FtcGxlcyIsInNldFNpemUiLCJpc1dlYkdMUmVuZGVyVGFyZ2V0IiwiRGF0YUFycmF5VGV4dHVyZSIsIndyYXBSIiwiaXNEYXRhQXJyYXlUZXh0dXJlIiwiaXNXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IiwiRGF0YTNEVGV4dHVyZSIsImlzRGF0YTNEVGV4dHVyZSIsImlzV2ViR0wzRFJlbmRlclRhcmdldCIsImNvdW50IiwiaWwiLCJpc1dlYkdMTXVsdGlwbGVSZW5kZXJUYXJnZXRzIiwiUXVhdGVybmlvbiIsIl94IiwiX3kiLCJfeiIsIl93IiwicW0iLCJzbGVycFF1YXRlcm5pb25zIiwiZHN0IiwiZHN0T2Zmc2V0Iiwic3JjMCIsInNyY09mZnNldDAiLCJzcmMxIiwic3JjT2Zmc2V0MSIsIngwIiwieTAiLCJ6MCIsIncwIiwieDEiLCJ5MSIsInoxIiwidzEiLCJkaXIiLCJzcXJTaW4iLCJFUFNJTE9OIiwibGVuIiwidERpciIsIl9vbkNoYW5nZUNhbGxiYWNrIiwicXVhdGVybmlvbiIsInNldEZyb21FdWxlciIsImV1bGVyIiwidXBkYXRlIiwiaXNFdWxlciIsIm9yZGVyIiwiX29yZGVyIiwiYzEiLCJjMiIsImMzIiwiczEiLCJzMiIsInMzIiwic2V0RnJvbUF4aXNBbmdsZSIsImF4aXMiLCJoYWxmQW5nbGUiLCJzZXRGcm9tUm90YXRpb25NYXRyaXgiLCJ0cmFjZSIsInNldEZyb21Vbml0VmVjdG9ycyIsInZGcm9tIiwidlRvIiwiYW5nbGVUbyIsInJvdGF0ZVRvd2FyZHMiLCJzdGVwIiwic2xlcnAiLCJjb25qdWdhdGUiLCJtdWx0aXBseVF1YXRlcm5pb25zIiwicWF4IiwicWF5IiwicWF6IiwicWF3IiwicWJ4IiwicWJ5IiwicWJ6IiwicWJ3IiwiY29zSGFsZlRoZXRhIiwic3FyU2luSGFsZlRoZXRhIiwic2luSGFsZlRoZXRhIiwiaGFsZlRoZXRhIiwicmF0aW9BIiwicmF0aW9CIiwidTEiLCJzcXJ0MXUxIiwic3FydHUxIiwidTIiLCJ1MyIsIl9vbkNoYW5nZSIsImNhbGxiYWNrIiwiaXNRdWF0ZXJuaW9uIiwiVmVjdG9yMyIsIm11bHRpcGx5VmVjdG9ycyIsImFwcGx5RXVsZXIiLCJhcHBseVF1YXRlcm5pb24iLCJfcXVhdGVybmlvbiQ0IiwiYXBwbHlBeGlzQW5nbGUiLCJhcHBseU5vcm1hbE1hdHJpeCIsInF4IiwicXkiLCJxeiIsInF3IiwiaXgiLCJpeSIsIml6IiwiaXciLCJwcm9qZWN0IiwiY2FtZXJhIiwibWF0cml4V29ybGRJbnZlcnNlIiwicHJvamVjdGlvbk1hdHJpeCIsInVucHJvamVjdCIsInByb2plY3Rpb25NYXRyaXhJbnZlcnNlIiwibWF0cml4V29ybGQiLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJjcm9zc1ZlY3RvcnMiLCJheCIsImF5IiwiYXoiLCJieCIsImJ5IiwiYnoiLCJwcm9qZWN0T25WZWN0b3IiLCJkZW5vbWluYXRvciIsInByb2plY3RPblBsYW5lIiwicGxhbmVOb3JtYWwiLCJfdmVjdG9yJGMiLCJyZWZsZWN0Iiwibm9ybWFsIiwiZHoiLCJzZXRGcm9tU3BoZXJpY2FsIiwic2V0RnJvbVNwaGVyaWNhbENvb3JkcyIsInBoaSIsInNpblBoaVJhZGl1cyIsInNldEZyb21DeWxpbmRyaWNhbCIsInNldEZyb21DeWxpbmRyaWNhbENvb3JkcyIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsInNldEZyb21NYXRyaXhTY2FsZSIsInNldEZyb21NYXRyaXhDb2x1bW4iLCJzeiIsInJhbmRvbURpcmVjdGlvbiIsImlzVmVjdG9yMyIsIkJveDMiLCJzZXRGcm9tQXJyYXkiLCJtaW5YIiwibWluWSIsIm1pbloiLCJtYXhYIiwibWF4WSIsIm1heFoiLCJzZXRGcm9tQnVmZmVyQXR0cmlidXRlIiwic2V0RnJvbVBvaW50cyIsInBvaW50cyIsIm1ha2VFbXB0eSIsImV4cGFuZEJ5UG9pbnQiLCJzZXRGcm9tQ2VudGVyQW5kU2l6ZSIsImhhbGZTaXplIiwiX3ZlY3RvciRiIiwic2V0RnJvbU9iamVjdCIsIm9iamVjdCIsInByZWNpc2UiLCJleHBhbmRCeU9iamVjdCIsImJveCIsImlzRW1wdHkiLCJnZXRDZW50ZXIiLCJnZXRTaXplIiwicG9pbnQiLCJleHBhbmRCeVZlY3RvciIsInZlY3RvciIsImV4cGFuZEJ5U2NhbGFyIiwidXBkYXRlV29ybGRNYXRyaXgiLCJnZW9tZXRyeSIsImF0dHJpYnV0ZXMiLCJwb3NpdGlvbiIsImJvdW5kaW5nQm94IiwiY29tcHV0ZUJvdW5kaW5nQm94IiwiX2JveCQzIiwidW5pb24iLCJjaGlsZHJlbiIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImludGVyc2VjdHNCb3giLCJpbnRlcnNlY3RzU3BoZXJlIiwic3BoZXJlIiwiY2xhbXBQb2ludCIsImludGVyc2VjdHNQbGFuZSIsInBsYW5lIiwiY29uc3RhbnQiLCJpbnRlcnNlY3RzVHJpYW5nbGUiLCJ0cmlhbmdsZSIsIl9jZW50ZXIiLCJfZXh0ZW50cyIsIl92MCQyIiwiX3YxJDciLCJfdjIkMyIsIl9mMCIsIl9mMSIsIl9mMiIsImF4ZXMiLCJzYXRGb3JBeGVzIiwiX3RyaWFuZ2xlTm9ybWFsIiwiZGlzdGFuY2VUb1BvaW50IiwiZ2V0Qm91bmRpbmdTcGhlcmUiLCJpbnRlcnNlY3QiLCJfcG9pbnRzIiwiaXNCb3gzIiwiX3Rlc3RBeGlzIiwidjAiLCJleHRlbnRzIiwicDAiLCJwMSIsInAyIiwiX2JveCQyIiwiX3YxJDYiLCJfdG9GYXJ0aGVzdFBvaW50IiwiX3RvUG9pbnQiLCJTcGhlcmUiLCJvcHRpb25hbENlbnRlciIsIm1heFJhZGl1c1NxIiwicmFkaXVzU3VtIiwiZGVsdGFMZW5ndGhTcSIsImdldEJvdW5kaW5nQm94IiwiZ2V0TWF4U2NhbGVPbkF4aXMiLCJtaXNzaW5nUmFkaXVzSGFsZiIsIl92ZWN0b3IkYSIsIl9zZWdDZW50ZXIiLCJfc2VnRGlyIiwiX2RpZmYiLCJfZWRnZTEiLCJfZWRnZTIiLCJfbm9ybWFsJDEiLCJSYXkiLCJvcmlnaW4iLCJkaXJlY3Rpb24iLCJyYXkiLCJhdCIsImxvb2tBdCIsInJlY2FzdCIsImNsb3Nlc3RQb2ludFRvUG9pbnQiLCJkaXJlY3Rpb25EaXN0YW5jZSIsImRpc3RhbmNlU3FUb1BvaW50IiwiZGlzdGFuY2VTcVRvU2VnbWVudCIsIm9wdGlvbmFsUG9pbnRPblJheSIsIm9wdGlvbmFsUG9pbnRPblNlZ21lbnQiLCJzZWdFeHRlbnQiLCJhMDEiLCJiMCIsImIxIiwiczAiLCJzcXJEaXN0IiwiZXh0RGV0IiwiaW52RGV0IiwiaW50ZXJzZWN0U3BoZXJlIiwidGNhIiwicmFkaXVzMiIsInRoYyIsInQwIiwidDEiLCJkaXN0YW5jZVRvUGxhbmUiLCJpbnRlcnNlY3RQbGFuZSIsImRpc3RUb1BvaW50IiwiaW50ZXJzZWN0Qm94IiwidG1pbiIsInRtYXgiLCJ0eW1pbiIsInR5bWF4IiwidHptaW4iLCJ0em1heCIsImludmRpcngiLCJpbnZkaXJ5IiwiaW52ZGlyeiIsImludGVyc2VjdFRyaWFuZ2xlIiwiYmFja2ZhY2VDdWxsaW5nIiwic2lnbiIsIkRkTiIsIkRkUXhFMiIsIkRkRTF4USIsIlFkTiIsIk1hdHJpeDQiLCJuMTQiLCJuMjQiLCJuMzQiLCJuNDEiLCJuNDIiLCJuNDMiLCJuNDQiLCJjb3B5UG9zaXRpb24iLCJzZXRGcm9tTWF0cml4MyIsIm1ha2VCYXNpcyIsImV4dHJhY3RSb3RhdGlvbiIsInNjYWxlWCIsIl92MSQ1Iiwic2NhbGVZIiwic2NhbGVaIiwibWFrZVJvdGF0aW9uRnJvbUV1bGVyIiwiYWYiLCJiZiIsImNlIiwiY2YiLCJkZSIsImRmIiwiYWQiLCJiZCIsIm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwiY29tcG9zZSIsIl96ZXJvIiwiX29uZSIsImV5ZSIsInVwIiwiYTE0IiwiYTI0IiwiYTM0IiwiYTQxIiwiYTQyIiwiYTQzIiwiYTQ0IiwiYjE0IiwiYjI0IiwiYjM0IiwiYjQxIiwiYjQyIiwiYjQzIiwiYjQ0Iiwic2V0UG9zaXRpb24iLCJ0MTQiLCJzY2FsZVhTcSIsInNjYWxlWVNxIiwic2NhbGVaU3EiLCJtYWtlVHJhbnNsYXRpb24iLCJtYWtlUm90YXRpb25YIiwibWFrZVJvdGF0aW9uWSIsIm1ha2VSb3RhdGlvbloiLCJtYWtlUm90YXRpb25BeGlzIiwibWFrZVNjYWxlIiwibWFrZVNoZWFyIiwieXgiLCJ6eCIsInp5IiwieDIiLCJ5MiIsInoyIiwid3giLCJ3eSIsInd6IiwiZGVjb21wb3NlIiwiX20xJDIiLCJpbnZTWCIsImludlNZIiwiaW52U1oiLCJtYWtlUGVyc3BlY3RpdmUiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJuZWFyIiwiZmFyIiwibWFrZU9ydGhvZ3JhcGhpYyIsImlzTWF0cml4NCIsIl9tYXRyaXgkMSIsIl9xdWF0ZXJuaW9uJDMiLCJFdWxlciIsIkRlZmF1bHRPcmRlciIsImFzaW4iLCJzZXRGcm9tUXVhdGVybmlvbiIsInNldEZyb21WZWN0b3IzIiwicmVvcmRlciIsIm5ld09yZGVyIiwiUm90YXRpb25PcmRlcnMiLCJMYXllcnMiLCJtYXNrIiwiY2hhbm5lbCIsImVuYWJsZSIsImVuYWJsZUFsbCIsInRvZ2dsZSIsImRpc2FibGUiLCJkaXNhYmxlQWxsIiwibGF5ZXJzIiwiaXNFbmFibGVkIiwiX29iamVjdDNESWQiLCJfdjEkNCIsIl9xMSIsIl9tMSQxIiwiX3RhcmdldCIsIl9wb3NpdGlvbiQzIiwiX3NjYWxlJDIiLCJfcXVhdGVybmlvbiQyIiwiX3hBeGlzIiwiX3lBeGlzIiwiX3pBeGlzIiwiX2FkZGVkRXZlbnQiLCJfcmVtb3ZlZEV2ZW50IiwiT2JqZWN0M0QiLCJwYXJlbnQiLCJEZWZhdWx0VXAiLCJtb2RlbFZpZXdNYXRyaXgiLCJub3JtYWxNYXRyaXgiLCJEZWZhdWx0TWF0cml4QXV0b1VwZGF0ZSIsIm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJ2aXNpYmxlIiwiY2FzdFNoYWRvdyIsInJlY2VpdmVTaGFkb3ciLCJmcnVzdHVtQ3VsbGVkIiwicmVuZGVyT3JkZXIiLCJhbmltYXRpb25zIiwib25CZWZvcmVSZW5kZXIiLCJvbkFmdGVyUmVuZGVyIiwic2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlIiwic2V0Um90YXRpb25Gcm9tRXVsZXIiLCJzZXRSb3RhdGlvbkZyb21NYXRyaXgiLCJzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwicm90YXRlT25BeGlzIiwicm90YXRlT25Xb3JsZEF4aXMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJ0cmFuc2xhdGVPbkF4aXMiLCJkaXN0YW5jZSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWiIsImxvY2FsVG9Xb3JsZCIsIndvcmxkVG9Mb2NhbCIsImlzQ2FtZXJhIiwiaXNMaWdodCIsImlzT2JqZWN0M0QiLCJyZW1vdmUiLCJyZW1vdmVGcm9tUGFyZW50IiwiYXR0YWNoIiwiZ2V0T2JqZWN0QnlJZCIsImlkIiwiZ2V0T2JqZWN0QnlQcm9wZXJ0eSIsImdldE9iamVjdEJ5TmFtZSIsImdldFdvcmxkUG9zaXRpb24iLCJnZXRXb3JsZFF1YXRlcm5pb24iLCJnZXRXb3JsZFNjYWxlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJyYXljYXN0IiwidHJhdmVyc2UiLCJ0cmF2ZXJzZVZpc2libGUiLCJ0cmF2ZXJzZUFuY2VzdG9ycyIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiZm9yY2UiLCJ1cGRhdGVQYXJlbnRzIiwidXBkYXRlQ2hpbGRyZW4iLCJnZW9tZXRyaWVzIiwibWF0ZXJpYWxzIiwic2hhcGVzIiwic2tlbGV0b25zIiwibm9kZXMiLCJzZXJpYWxpemUiLCJsaWJyYXJ5IiwiZWxlbWVudCIsImlzSW5zdGFuY2VkTWVzaCIsImluc3RhbmNlTWF0cml4IiwiaW5zdGFuY2VDb2xvciIsImlzU2NlbmUiLCJiYWNrZ3JvdW5kIiwiZW52aXJvbm1lbnQiLCJpc01lc2giLCJpc0xpbmUiLCJpc1BvaW50cyIsInBhcmFtZXRlcnMiLCJzaGFwZSIsImlzU2tpbm5lZE1lc2giLCJiaW5kTW9kZSIsImJpbmRNYXRyaXgiLCJza2VsZXRvbiIsIm1hdGVyaWFsIiwidXVpZHMiLCJhbmltYXRpb24iLCJleHRyYWN0RnJvbUNhY2hlIiwiY2FjaGUiLCJ2YWx1ZXMiLCJrZXkiLCJyZWN1cnNpdmUiLCJjaGlsZCIsIl92MCQxIiwiX3YxJDMiLCJfdjIkMiIsIl92MyQxIiwiX3ZhYiIsIl92YWMiLCJfdmJjIiwiX3ZhcCIsIl92YnAiLCJfdmNwIiwiVHJpYW5nbGUiLCJ0YXJnZXRMZW5ndGhTcSIsImRvdDAwIiwiZG90MDEiLCJkb3QwMiIsImRvdDExIiwiZG90MTIiLCJkZW5vbSIsImludkRlbm9tIiwiZ2V0QmFyeWNvb3JkIiwicDMiLCJ1djEiLCJ1djIiLCJ1djMiLCJzZXRGcm9tUG9pbnRzQW5kSW5kaWNlcyIsImkwIiwiaTEiLCJpMiIsInNldEZyb21BdHRyaWJ1dGVBbmRJbmRpY2VzIiwiZ2V0QXJlYSIsImdldE1pZHBvaW50IiwiZ2V0Tm9ybWFsIiwiZ2V0UGxhbmUiLCJzZXRGcm9tQ29wbGFuYXJQb2ludHMiLCJnZXRVViIsImlzRnJvbnRGYWNpbmciLCJkNCIsInZjIiwiZDUiLCJkNiIsIm1hdGVyaWFsSWQiLCJNYXRlcmlhbCIsImZvZyIsImJsZW5kaW5nIiwic2lkZSIsInZlcnRleENvbG9ycyIsIm9wYWNpdHkiLCJ0cmFuc3BhcmVudCIsImJsZW5kU3JjIiwiYmxlbmREc3QiLCJibGVuZEVxdWF0aW9uIiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZEVxdWF0aW9uQWxwaGEiLCJkZXB0aEZ1bmMiLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwic3RlbmNpbFdyaXRlTWFzayIsInN0ZW5jaWxGdW5jIiwic3RlbmNpbFJlZiIsInN0ZW5jaWxGdW5jTWFzayIsInN0ZW5jaWxGYWlsIiwic3RlbmNpbFpGYWlsIiwic3RlbmNpbFpQYXNzIiwic3RlbmNpbFdyaXRlIiwiY2xpcHBpbmdQbGFuZXMiLCJjbGlwSW50ZXJzZWN0aW9uIiwiY2xpcFNoYWRvd3MiLCJzaGFkb3dTaWRlIiwiY29sb3JXcml0ZSIsInByZWNpc2lvbiIsInBvbHlnb25PZmZzZXQiLCJwb2x5Z29uT2Zmc2V0RmFjdG9yIiwicG9seWdvbk9mZnNldFVuaXRzIiwiZGl0aGVyaW5nIiwiYWxwaGFUb0NvdmVyYWdlIiwicHJlbXVsdGlwbGllZEFscGhhIiwidG9uZU1hcHBlZCIsIl9hbHBoYVRlc3QiLCJhbHBoYVRlc3QiLCJvbkJ1aWxkIiwib25CZWZvcmVDb21waWxlIiwiY3VzdG9tUHJvZ3JhbUNhY2hlS2V5Iiwic2V0VmFsdWVzIiwibmV3VmFsdWUiLCJmbGF0U2hhZGluZyIsImN1cnJlbnRWYWx1ZSIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsInNoZWVuIiwic2hlZW5Db2xvciIsInNoZWVuUm91Z2huZXNzIiwiZW1pc3NpdmUiLCJlbWlzc2l2ZUludGVuc2l0eSIsInNwZWN1bGFyIiwic3BlY3VsYXJJbnRlbnNpdHkiLCJzcGVjdWxhckNvbG9yIiwic2hpbmluZXNzIiwiY2xlYXJjb2F0IiwiY2xlYXJjb2F0Um91Z2huZXNzIiwiY2xlYXJjb2F0TWFwIiwiY2xlYXJjb2F0Um91Z2huZXNzTWFwIiwiY2xlYXJjb2F0Tm9ybWFsTWFwIiwiY2xlYXJjb2F0Tm9ybWFsU2NhbGUiLCJtYXRjYXAiLCJhbHBoYU1hcCIsImxpZ2h0TWFwIiwibGlnaHRNYXBJbnRlbnNpdHkiLCJhb01hcCIsImFvTWFwSW50ZW5zaXR5IiwiYnVtcE1hcCIsImJ1bXBTY2FsZSIsIm5vcm1hbE1hcCIsIm5vcm1hbE1hcFR5cGUiLCJub3JtYWxTY2FsZSIsImRpc3BsYWNlbWVudE1hcCIsImRpc3BsYWNlbWVudFNjYWxlIiwiZGlzcGxhY2VtZW50QmlhcyIsInJvdWdobmVzc01hcCIsIm1ldGFsbmVzc01hcCIsImVtaXNzaXZlTWFwIiwic3BlY3VsYXJNYXAiLCJzcGVjdWxhckludGVuc2l0eU1hcCIsInNwZWN1bGFyQ29sb3JNYXAiLCJlbnZNYXAiLCJjb21iaW5lIiwiZW52TWFwSW50ZW5zaXR5IiwicmVmbGVjdGl2aXR5IiwicmVmcmFjdGlvblJhdGlvIiwiZ3JhZGllbnRNYXAiLCJ0cmFuc21pc3Npb24iLCJ0cmFuc21pc3Npb25NYXAiLCJ0aGlja25lc3MiLCJ0aGlja25lc3NNYXAiLCJhdHRlbnVhdGlvbkRpc3RhbmNlIiwiYXR0ZW51YXRpb25Db2xvciIsInNpemVBdHRlbnVhdGlvbiIsImxpbmV3aWR0aCIsImRhc2hTaXplIiwiZ2FwU2l6ZSIsIndpcmVmcmFtZSIsIndpcmVmcmFtZUxpbmV3aWR0aCIsIndpcmVmcmFtZUxpbmVjYXAiLCJ3aXJlZnJhbWVMaW5lam9pbiIsInNyY1BsYW5lcyIsImRzdFBsYW5lcyIsImlzTWF0ZXJpYWwiLCJmcm9tVHlwZSIsIk1lc2hCYXNpY01hdGVyaWFsIiwiaXNNZXNoQmFzaWNNYXRlcmlhbCIsIl92ZWN0b3IkOSIsIl92ZWN0b3IyJDEiLCJCdWZmZXJBdHRyaWJ1dGUiLCJpdGVtU2l6ZSIsInVzYWdlIiwidXBkYXRlUmFuZ2UiLCJvblVwbG9hZENhbGxiYWNrIiwic2V0VXNhZ2UiLCJjb3B5QXQiLCJpbmRleDEiLCJpbmRleDIiLCJjb3B5QXJyYXkiLCJjb3B5Q29sb3JzQXJyYXkiLCJjb2xvcnMiLCJjb3B5VmVjdG9yMnNBcnJheSIsInZlY3RvcnMiLCJjb3B5VmVjdG9yM3NBcnJheSIsImNvcHlWZWN0b3I0c0FycmF5Iiwic2V0WFkiLCJzZXRYWVoiLCJzZXRYWVpXIiwib25VcGxvYWQiLCJpc0J1ZmZlckF0dHJpYnV0ZSIsIlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSIsImlzRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUiLCJfaWQkMSIsIl9tMSIsIl9vYmoiLCJfb2Zmc2V0IiwiX2JveCQxIiwiX2JveE1vcnBoVGFyZ2V0cyIsIl92ZWN0b3IkOCIsIkJ1ZmZlckdlb21ldHJ5IiwibW9ycGhBdHRyaWJ1dGVzIiwibW9ycGhUYXJnZXRzUmVsYXRpdmUiLCJncm91cHMiLCJib3VuZGluZ1NwaGVyZSIsImRyYXdSYW5nZSIsImdldEluZGV4Iiwic2V0SW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJkZWxldGVBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJhZGRHcm91cCIsIm1hdGVyaWFsSW5kZXgiLCJjbGVhckdyb3VwcyIsInNldERyYXdSYW5nZSIsInRhbmdlbnQiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiIsImlzR0xCdWZmZXJBdHRyaWJ1dGUiLCJtb3JwaEF0dHJpYnV0ZSIsImpsIiwiY29tcHV0ZVRhbmdlbnRzIiwiaW5kaWNlcyIsInBvc2l0aW9ucyIsIm5vcm1hbHMiLCJ1dnMiLCJuVmVydGljZXMiLCJ0YW5nZW50cyIsInRhbjEiLCJ0YW4yIiwidkEiLCJ2QiIsInZDIiwidXZBIiwidXZCIiwidXZDIiwic2RpciIsInRkaXIiLCJoYW5kbGVUcmlhbmdsZSIsImdyb3VwIiwidG1wMiIsIm4yIiwiaGFuZGxlVmVydGV4IiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJwb3NpdGlvbkF0dHJpYnV0ZSIsIm5vcm1hbEF0dHJpYnV0ZSIsInBBIiwicEIiLCJwQyIsIm5BIiwibkIiLCJuQyIsIm5vcm1hbGl6ZU5vcm1hbHMiLCJtZXJnZSIsImlzQnVmZmVyR2VvbWV0cnkiLCJhdHRyaWJ1dGVBcnJheTEiLCJhdHRyaWJ1dGUyIiwiYXR0cmlidXRlQXJyYXkyIiwiYXR0cmlidXRlT2Zmc2V0IiwidG9Ob25JbmRleGVkIiwiY29udmVydEJ1ZmZlckF0dHJpYnV0ZSIsImFycmF5MiIsImlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUiLCJzdHJpZGUiLCJnZW9tZXRyeTIiLCJuZXdBdHRyaWJ1dGUiLCJtb3JwaEFycmF5IiwiaGFzTW9ycGhBdHRyaWJ1dGVzIiwiYXR0cmlidXRlQXJyYXkiLCJfaW52ZXJzZU1hdHJpeCQyIiwiX3JheSQyIiwiX3NwaGVyZSQzIiwiX3ZBJDEiLCJfdkIkMSIsIl92QyQxIiwiX3RlbXBBIiwiX3RlbXBCIiwiX3RlbXBDIiwiX21vcnBoQSIsIl9tb3JwaEIiLCJfbW9ycGhDIiwiX3V2QSQxIiwiX3V2QiQxIiwiX3V2QyQxIiwiX2ludGVyc2VjdGlvblBvaW50IiwiX2ludGVyc2VjdGlvblBvaW50V29ybGQiLCJNZXNoIiwidXBkYXRlTW9ycGhUYXJnZXRzIiwibW9ycGhUYXJnZXRJbmZsdWVuY2VzIiwibW9ycGhUYXJnZXREaWN0aW9uYXJ5IiwibWwiLCJtb3JwaFRhcmdldHMiLCJyYXljYXN0ZXIiLCJpbnRlcnNlY3RzIiwiaW50ZXJzZWN0aW9uIiwibW9ycGhQb3NpdGlvbiIsImdyb3VwTWF0ZXJpYWwiLCJjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uIiwiZmFjZUluZGV4IiwiZmFjZSIsImlzR2VvbWV0cnkiLCJtb3JwaEluZmx1ZW5jZXMiLCJpbmZsdWVuY2UiLCJib25lVHJhbnNmb3JtIiwiY2hlY2tJbnRlcnNlY3Rpb24iLCJCb3hHZW9tZXRyeSIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsImRlcHRoU2VnbWVudHMiLCJzY29wZSIsInZlcnRpY2VzIiwibnVtYmVyT2ZWZXJ0aWNlcyIsImdyb3VwU3RhcnQiLCJidWlsZFBsYW5lIiwidWRpciIsInZkaXIiLCJncmlkWCIsImdyaWRZIiwic2VnbWVudFdpZHRoIiwic2VnbWVudEhlaWdodCIsIndpZHRoSGFsZiIsImhlaWdodEhhbGYiLCJkZXB0aEhhbGYiLCJncmlkWDEiLCJncmlkWTEiLCJ2ZXJ0ZXhDb3VudGVyIiwiZ3JvdXBDb3VudCIsImNsb25lVW5pZm9ybXMiLCJwcm9wZXJ0eSIsIm1lcmdlVW5pZm9ybXMiLCJ1bmlmb3JtcyIsIm1lcmdlZCIsIlVuaWZvcm1zVXRpbHMiLCJTaGFkZXJNYXRlcmlhbCIsImRlZmluZXMiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImxpZ2h0cyIsImNsaXBwaW5nIiwiZXh0ZW5zaW9ucyIsImRlcml2YXRpdmVzIiwiZnJhZ0RlcHRoIiwiZHJhd0J1ZmZlcnMiLCJzaGFkZXJUZXh0dXJlTE9EIiwiZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsImluZGV4MEF0dHJpYnV0ZU5hbWUiLCJ1bmlmb3Jtc05lZWRVcGRhdGUiLCJnbHNsVmVyc2lvbiIsImlzU2hhZGVyTWF0ZXJpYWwiLCJDYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImZvdiIsImFzcGVjdCIsInpvb20iLCJmb2N1cyIsInZpZXciLCJmaWxtR2F1Z2UiLCJmaWxtT2Zmc2V0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInNldEZvY2FsTGVuZ3RoIiwiZm9jYWxMZW5ndGgiLCJ2RXh0ZW50U2xvcGUiLCJnZXRGaWxtSGVpZ2h0IiwiYXRhbiIsImdldEZvY2FsTGVuZ3RoIiwidGFuIiwiZ2V0RWZmZWN0aXZlRk9WIiwiZ2V0RmlsbVdpZHRoIiwic2V0Vmlld09mZnNldCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJlbmFibGVkIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjbGVhclZpZXdPZmZzZXQiLCJza2V3IiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsIkN1YmVDYW1lcmEiLCJyZW5kZXJUYXJnZXQiLCJpc1dlYkdMQ3ViZVJlbmRlclRhcmdldCIsImNhbWVyYVBYIiwiY2FtZXJhTlgiLCJjYW1lcmFQWSIsImNhbWVyYU5ZIiwiY2FtZXJhUFoiLCJjYW1lcmFOWiIsInJlbmRlcmVyIiwic2NlbmUiLCJjdXJyZW50UmVuZGVyVGFyZ2V0IiwiZ2V0UmVuZGVyVGFyZ2V0IiwiY3VycmVudE91dHB1dEVuY29kaW5nIiwib3V0cHV0RW5jb2RpbmciLCJjdXJyZW50VG9uZU1hcHBpbmciLCJ0b25lTWFwcGluZyIsImN1cnJlbnRYckVuYWJsZWQiLCJ4ciIsInNldFJlbmRlclRhcmdldCIsInJlbmRlciIsIkN1YmVUZXh0dXJlIiwiaXNDdWJlVGV4dHVyZSIsIldlYkdMQ3ViZVJlbmRlclRhcmdldCIsImZyb21FcXVpcmVjdGFuZ3VsYXJUZXh0dXJlIiwic2hhZGVyIiwidEVxdWlyZWN0IiwibWVzaCIsImN1cnJlbnRNaW5GaWx0ZXIiLCJzdGVuY2lsIiwiX3ZlY3RvcjEiLCJfdmVjdG9yMiIsIl9ub3JtYWxNYXRyaXgiLCJQbGFuZSIsInNldENvbXBvbmVudHMiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsImludmVyc2VOb3JtYWxMZW5ndGgiLCJkaXN0YW5jZVRvU3BoZXJlIiwicHJvamVjdFBvaW50IiwiaW50ZXJzZWN0TGluZSIsImxpbmUiLCJpbnRlcnNlY3RzTGluZSIsInN0YXJ0U2lnbiIsImVuZFNpZ24iLCJjb3BsYW5hclBvaW50Iiwib3B0aW9uYWxOb3JtYWxNYXRyaXgiLCJyZWZlcmVuY2VQb2ludCIsImlzUGxhbmUiLCJfc3BoZXJlJDIiLCJfdmVjdG9yJDciLCJGcnVzdHVtIiwicDQiLCJwNSIsInBsYW5lcyIsImZydXN0dW0iLCJzZXRGcm9tUHJvamVjdGlvbk1hdHJpeCIsIm1lMCIsIm1lMSIsIm1lMiIsIm1lMyIsIm1lNCIsIm1lNSIsIm1lNiIsIm1lNyIsIm1lOCIsIm1lOSIsIm1lMTAiLCJtZTExIiwibWUxMiIsIm1lMTMiLCJtZTE0IiwibWUxNSIsImludGVyc2VjdHNPYmplY3QiLCJpbnRlcnNlY3RzU3ByaXRlIiwic3ByaXRlIiwibmVnUmFkaXVzIiwiV2ViR0xBbmltYXRpb24iLCJpc0FuaW1hdGluZyIsImFuaW1hdGlvbkxvb3AiLCJyZXF1ZXN0SWQiLCJvbkFuaW1hdGlvbkZyYW1lIiwidGltZSIsImZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzZXRBbmltYXRpb25Mb29wIiwic2V0Q29udGV4dCIsIldlYkdMQXR0cmlidXRlcyIsImdsIiwiY2FwYWJpbGl0aWVzIiwiaXNXZWJHTDIiLCJidWZmZXJzIiwiV2Vha01hcCIsImRlbGV0ZUJ1ZmZlciIsImJ1ZmZlclR5cGUiLCJjYWNoZWQiLCJieXRlc1BlckVsZW1lbnQiLCJlbGVtZW50U2l6ZSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiYnVmZmVyU3ViRGF0YSIsInVwZGF0ZUJ1ZmZlciIsIlBsYW5lR2VvbWV0cnkiLCJ3aWR0aF9oYWxmIiwiaGVpZ2h0X2hhbGYiLCJzZWdtZW50X3dpZHRoIiwic2VnbWVudF9oZWlnaHQiLCJTaGFkZXJDaHVuayIsImFscGhhbWFwX2ZyYWdtZW50IiwiYWxwaGFtYXBfcGFyc19mcmFnbWVudCIsImFscGhhdGVzdF9mcmFnbWVudCIsImFscGhhdGVzdF9wYXJzX2ZyYWdtZW50IiwiYW9tYXBfZnJhZ21lbnQiLCJhb21hcF9wYXJzX2ZyYWdtZW50IiwiYmVnaW5fdmVydGV4IiwiYmVnaW5ub3JtYWxfdmVydGV4IiwiYnNkZnMiLCJidW1wbWFwX3BhcnNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCIsImNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgiLCJjb2xvcl9mcmFnbWVudCIsImNvbG9yX3BhcnNfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX3ZlcnRleCIsImNvbG9yX3ZlcnRleCIsImNvbW1vbiIsImN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudCIsImRlZmF1bHRub3JtYWxfdmVydGV4IiwiZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4IiwiZGlzcGxhY2VtZW50bWFwX3ZlcnRleCIsImVtaXNzaXZlbWFwX2ZyYWdtZW50IiwiZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCIsImVuY29kaW5nc19mcmFnbWVudCIsImVuY29kaW5nc19wYXJzX2ZyYWdtZW50IiwiZW52bWFwX2ZyYWdtZW50IiwiZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfcGFyc192ZXJ0ZXgiLCJlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImVudm1hcF92ZXJ0ZXgiLCJmb2dfdmVydGV4IiwiZm9nX3BhcnNfdmVydGV4IiwiZm9nX2ZyYWdtZW50IiwiZm9nX3BhcnNfZnJhZ21lbnQiLCJncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRtYXBfZnJhZ21lbnQiLCJsaWdodG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX2xhbWJlcnRfdmVydGV4IiwibGlnaHRzX3BhcnNfYmVnaW4iLCJsaWdodHNfdG9vbl9mcmFnbWVudCIsImxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGhvbmdfZnJhZ21lbnQiLCJsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCIsImxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCIsImxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX2ZyYWdtZW50X2JlZ2luIiwibGlnaHRzX2ZyYWdtZW50X21hcHMiLCJsaWdodHNfZnJhZ21lbnRfZW5kIiwibG9nZGVwdGhidWZfZnJhZ21lbnQiLCJsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgiLCJsb2dkZXB0aGJ1Zl92ZXJ0ZXgiLCJtYXBfZnJhZ21lbnQiLCJtYXBfcGFyc19mcmFnbWVudCIsIm1hcF9wYXJ0aWNsZV9mcmFnbWVudCIsIm1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50IiwibWV0YWxuZXNzbWFwX2ZyYWdtZW50IiwibWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQiLCJtb3JwaGNvbG9yX3ZlcnRleCIsIm1vcnBobm9ybWFsX3ZlcnRleCIsIm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4IiwibW9ycGh0YXJnZXRfdmVydGV4Iiwibm9ybWFsX2ZyYWdtZW50X2JlZ2luIiwibm9ybWFsX2ZyYWdtZW50X21hcHMiLCJub3JtYWxfcGFyc19mcmFnbWVudCIsIm5vcm1hbF9wYXJzX3ZlcnRleCIsIm5vcm1hbF92ZXJ0ZXgiLCJub3JtYWxtYXBfcGFyc19mcmFnbWVudCIsImNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4iLCJjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHMiLCJjbGVhcmNvYXRfcGFyc19mcmFnbWVudCIsIm91dHB1dF9mcmFnbWVudCIsInBhY2tpbmciLCJwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50IiwicHJvamVjdF92ZXJ0ZXgiLCJkaXRoZXJpbmdfZnJhZ21lbnQiLCJkaXRoZXJpbmdfcGFyc19mcmFnbWVudCIsInJvdWdobmVzc21hcF9mcmFnbWVudCIsInJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50Iiwic2hhZG93bWFwX3BhcnNfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc192ZXJ0ZXgiLCJzaGFkb3dtYXBfdmVydGV4Iiwic2hhZG93bWFza19wYXJzX2ZyYWdtZW50Iiwic2tpbmJhc2VfdmVydGV4Iiwic2tpbm5pbmdfcGFyc192ZXJ0ZXgiLCJza2lubmluZ192ZXJ0ZXgiLCJza2lubm9ybWFsX3ZlcnRleCIsInNwZWN1bGFybWFwX2ZyYWdtZW50Iiwic3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCIsInRvbmVtYXBwaW5nX2ZyYWdtZW50IiwidG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCIsInRyYW5zbWlzc2lvbl9mcmFnbWVudCIsInRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50IiwidXZfcGFyc19mcmFnbWVudCIsInV2X3BhcnNfdmVydGV4IiwidXZfdmVydGV4IiwidXYyX3BhcnNfZnJhZ21lbnQiLCJ1djJfcGFyc192ZXJ0ZXgiLCJ1djJfdmVydGV4Iiwid29ybGRwb3NfdmVydGV4IiwiYmFja2dyb3VuZF92ZXJ0IiwiYmFja2dyb3VuZF9mcmFnIiwiY3ViZV92ZXJ0IiwiY3ViZV9mcmFnIiwiZGVwdGhfdmVydCIsImRlcHRoX2ZyYWciLCJkaXN0YW5jZVJHQkFfdmVydCIsImRpc3RhbmNlUkdCQV9mcmFnIiwiZXF1aXJlY3RfdmVydCIsImVxdWlyZWN0X2ZyYWciLCJsaW5lZGFzaGVkX3ZlcnQiLCJsaW5lZGFzaGVkX2ZyYWciLCJtZXNoYmFzaWNfdmVydCIsIm1lc2hiYXNpY19mcmFnIiwibWVzaGxhbWJlcnRfdmVydCIsIm1lc2hsYW1iZXJ0X2ZyYWciLCJtZXNobWF0Y2FwX3ZlcnQiLCJtZXNobWF0Y2FwX2ZyYWciLCJtZXNobm9ybWFsX3ZlcnQiLCJtZXNobm9ybWFsX2ZyYWciLCJtZXNocGhvbmdfdmVydCIsIm1lc2hwaG9uZ19mcmFnIiwibWVzaHBoeXNpY2FsX3ZlcnQiLCJtZXNocGh5c2ljYWxfZnJhZyIsIm1lc2h0b29uX3ZlcnQiLCJtZXNodG9vbl9mcmFnIiwicG9pbnRzX3ZlcnQiLCJwb2ludHNfZnJhZyIsInNoYWRvd192ZXJ0Iiwic2hhZG93X2ZyYWciLCJzcHJpdGVfdmVydCIsInNwcml0ZV9mcmFnIiwiVW5pZm9ybXNMaWIiLCJkaWZmdXNlIiwidXZUcmFuc2Zvcm0iLCJ1djJUcmFuc2Zvcm0iLCJzcGVjdWxhcm1hcCIsImVudm1hcCIsImZsaXBFbnZNYXAiLCJpb3IiLCJhb21hcCIsImxpZ2h0bWFwIiwiZW1pc3NpdmVtYXAiLCJidW1wbWFwIiwibm9ybWFsbWFwIiwiZGlzcGxhY2VtZW50bWFwIiwicm91Z2huZXNzbWFwIiwibWV0YWxuZXNzbWFwIiwiZ3JhZGllbnRtYXAiLCJmb2dEZW5zaXR5IiwiZm9nTmVhciIsImZvZ0ZhciIsImZvZ0NvbG9yIiwiYW1iaWVudExpZ2h0Q29sb3IiLCJsaWdodFByb2JlIiwiZGlyZWN0aW9uYWxMaWdodHMiLCJwcm9wZXJ0aWVzIiwiZGlyZWN0aW9uYWxMaWdodFNoYWRvd3MiLCJzaGFkb3dCaWFzIiwic2hhZG93Tm9ybWFsQmlhcyIsInNoYWRvd1JhZGl1cyIsInNoYWRvd01hcFNpemUiLCJkaXJlY3Rpb25hbFNoYWRvd01hcCIsImRpcmVjdGlvbmFsU2hhZG93TWF0cml4Iiwic3BvdExpZ2h0cyIsImNvbmVDb3MiLCJwZW51bWJyYUNvcyIsImRlY2F5Iiwic3BvdExpZ2h0U2hhZG93cyIsInNwb3RTaGFkb3dNYXAiLCJzcG90U2hhZG93TWF0cml4IiwicG9pbnRMaWdodHMiLCJwb2ludExpZ2h0U2hhZG93cyIsInNoYWRvd0NhbWVyYU5lYXIiLCJzaGFkb3dDYW1lcmFGYXIiLCJwb2ludFNoYWRvd01hcCIsInBvaW50U2hhZG93TWF0cml4IiwiaGVtaXNwaGVyZUxpZ2h0cyIsInNreUNvbG9yIiwiZ3JvdW5kQ29sb3IiLCJyZWN0QXJlYUxpZ2h0cyIsImx0Y18xIiwibHRjXzIiLCJTaGFkZXJMaWIiLCJiYXNpYyIsImxhbWJlcnQiLCJwaG9uZyIsInN0YW5kYXJkIiwidG9vbiIsImRhc2hlZCIsInRvdGFsU2l6ZSIsInQyRCIsImN1YmUiLCJlcXVpcmVjdCIsImRpc3RhbmNlUkdCQSIsInJlZmVyZW5jZVBvc2l0aW9uIiwibmVhckRpc3RhbmNlIiwiZmFyRGlzdGFuY2UiLCJzaGFkb3ciLCJXZWJHTEJhY2tncm91bmQiLCJjdWJlbWFwcyIsInN0YXRlIiwib2JqZWN0cyIsInBsYW5lTWVzaCIsImJveE1lc2giLCJjbGVhckFscGhhIiwiY3VycmVudEJhY2tncm91bmQiLCJjdXJyZW50QmFja2dyb3VuZFZlcnNpb24iLCJjdXJyZW50VG9uZW1hcHBpbmciLCJzZXRDbGVhciIsImdldENsZWFyQ29sb3IiLCJzZXRDbGVhckNvbG9yIiwiZ2V0Q2xlYXJBbHBoYSIsInNldENsZWFyQWxwaGEiLCJyZW5kZXJMaXN0IiwiZm9yY2VDbGVhciIsInNlc3Npb24iLCJnZXRTZXNzaW9uIiwiZW52aXJvbm1lbnRCbGVuZE1vZGUiLCJhdXRvQ2xlYXIiLCJhdXRvQ2xlYXJDb2xvciIsImF1dG9DbGVhckRlcHRoIiwiYXV0b0NsZWFyU3RlbmNpbCIsInVuc2hpZnQiLCJXZWJHTEJpbmRpbmdTdGF0ZXMiLCJtYXhWZXJ0ZXhBdHRyaWJ1dGVzIiwiZXh0ZW5zaW9uIiwidmFvQXZhaWxhYmxlIiwiYmluZGluZ1N0YXRlcyIsImRlZmF1bHRTdGF0ZSIsImNyZWF0ZUJpbmRpbmdTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiYmluZFZlcnRleEFycmF5T2JqZWN0IiwidmFvIiwiYmluZFZlcnRleEFycmF5IiwiYmluZFZlcnRleEFycmF5T0VTIiwiZGVsZXRlVmVydGV4QXJyYXlPYmplY3QiLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZVZlcnRleEFycmF5T0VTIiwibmV3QXR0cmlidXRlcyIsImVuYWJsZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlRGl2aXNvcnMiLCJwcm9ncmFtIiwiaW5pdEF0dHJpYnV0ZXMiLCJlbmFibGVBdHRyaWJ1dGUiLCJlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yIiwibWVzaFBlckF0dHJpYnV0ZSIsImRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzIiwidmVydGV4QXR0cmliSVBvaW50ZXIiLCJyZXNldERlZmF1bHRTdGF0ZSIsInNldHVwIiwidXBkYXRlQnVmZmVycyIsInByb2dyYW1NYXAiLCJzdGF0ZU1hcCIsImNyZWF0ZVZlcnRleEFycmF5IiwiY3JlYXRlVmVydGV4QXJyYXlPRVMiLCJnZXRCaW5kaW5nU3RhdGUiLCJjYWNoZWRBdHRyaWJ1dGVzIiwiZ2VvbWV0cnlBdHRyaWJ1dGVzIiwiYXR0cmlidXRlc051bSIsImNhY2hlZEF0dHJpYnV0ZSIsImdlb21ldHJ5QXR0cmlidXRlIiwic2F2ZUNhY2hlIiwiaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsInByb2dyYW1BdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlcyIsIm1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsInByb2dyYW1BdHRyaWJ1dGUiLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwibG9jYXRpb25TaXplIiwiX21heEluc3RhbmNlQ291bnQiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsInZlcnRleEF0dHJpYjFmdiIsInNldHVwVmVydGV4QXR0cmlidXRlcyIsImdlb21ldHJ5SWQiLCJwcm9ncmFtSWQiLCJyZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSIsInJlbGVhc2VTdGF0ZXNPZlByb2dyYW0iLCJXZWJHTEJ1ZmZlclJlbmRlcmVyIiwiaW5mbyIsIm1vZGUiLCJzZXRNb2RlIiwicmVuZGVySW5zdGFuY2VzIiwicHJpbWNvdW50IiwibWV0aG9kTmFtZSIsIldlYkdMQ2FwYWJpbGl0aWVzIiwibWF4QW5pc290cm9weSIsImdldE1heFByZWNpc2lvbiIsImdldFNoYWRlclByZWNpc2lvbkZvcm1hdCIsIldlYkdMMkNvbXB1dGVSZW5kZXJpbmdDb250ZXh0IiwibWF4UHJlY2lzaW9uIiwiaGFzIiwibG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciIsIm1heFRleHR1cmVzIiwibWF4VmVydGV4VGV4dHVyZXMiLCJtYXhUZXh0dXJlU2l6ZSIsIm1heEN1YmVtYXBTaXplIiwibWF4QXR0cmlidXRlcyIsIm1heFZlcnRleFVuaWZvcm1zIiwibWF4VmFyeWluZ3MiLCJtYXhGcmFnbWVudFVuaWZvcm1zIiwidmVydGV4VGV4dHVyZXMiLCJmbG9hdEZyYWdtZW50VGV4dHVyZXMiLCJnZXRNYXhBbmlzb3Ryb3B5IiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiZmxvYXRWZXJ0ZXhUZXh0dXJlcyIsIm1heFNhbXBsZXMiLCJXZWJHTENsaXBwaW5nIiwiZ2xvYmFsU3RhdGUiLCJudW1HbG9iYWxQbGFuZXMiLCJsb2NhbENsaXBwaW5nRW5hYmxlZCIsInJlbmRlcmluZ1NoYWRvd3MiLCJ2aWV3Tm9ybWFsTWF0cml4IiwidW5pZm9ybSIsInJlc2V0R2xvYmFsU3RhdGUiLCJudW1QbGFuZXMiLCJudW1JbnRlcnNlY3Rpb24iLCJwcm9qZWN0UGxhbmVzIiwic2tpcFRyYW5zZm9ybSIsIm5QbGFuZXMiLCJkc3RBcnJheSIsImZsYXRTaXplIiwidmlld01hdHJpeCIsImk0IiwiaW5pdCIsImVuYWJsZUxvY2FsQ2xpcHBpbmciLCJiZWdpblNoYWRvd3MiLCJlbmRTaGFkb3dzIiwic2V0U3RhdGUiLCJ1c2VDYWNoZSIsIm1hdGVyaWFsUHJvcGVydGllcyIsIm5HbG9iYWwiLCJsR2xvYmFsIiwiY2xpcHBpbmdTdGF0ZSIsIldlYkdMQ3ViZU1hcHMiLCJtYXBUZXh0dXJlTWFwcGluZyIsIm9uVGV4dHVyZURpc3Bvc2UiLCJjdWJlbWFwIiwicGh5c2ljYWwiLCJzaGVlbkNvbG9yTWFwIiwic2hlZW5Sb3VnaG5lc3NNYXAiLCJ0cmFuc21pc3Npb25TYW1wbGVyU2l6ZSIsInRyYW5zbWlzc2lvblNhbXBsZXJNYXAiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJzY2FsZVciLCJzY2FsZUgiLCJpc09ydGhvZ3JhcGhpY0NhbWVyYSIsIkVYVFJBX0xPRF9TSUdNQSIsIl9mbGF0Q2FtZXJhIiwiX2NsZWFyQ29sb3IiLCJfb2xkVGFyZ2V0IiwiUEhJIiwiSU5WX1BISSIsIl9heGlzRGlyZWN0aW9ucyIsIlBNUkVNR2VuZXJhdG9yIiwiX3JlbmRlcmVyIiwiX3BpbmdQb25nUmVuZGVyVGFyZ2V0IiwiX2xvZE1heCIsIl9jdWJlU2l6ZSIsIl9sb2RQbGFuZXMiLCJfc2l6ZUxvZHMiLCJfc2lnbWFzIiwiX2JsdXJNYXRlcmlhbCIsIl9jdWJlbWFwTWF0ZXJpYWwiLCJfZXF1aXJlY3RNYXRlcmlhbCIsIl9jb21waWxlTWF0ZXJpYWwiLCJmcm9tU2NlbmUiLCJzaWdtYSIsIl9zZXRTaXplIiwiY3ViZVVWUmVuZGVyVGFyZ2V0IiwiX2FsbG9jYXRlVGFyZ2V0cyIsIl9zY2VuZVRvQ3ViZVVWIiwiX2JsdXIiLCJfYXBwbHlQTVJFTSIsIl9jbGVhbnVwIiwiZnJvbUVxdWlyZWN0YW5ndWxhciIsImVxdWlyZWN0YW5ndWxhciIsIl9mcm9tVGV4dHVyZSIsImZyb21DdWJlbWFwIiwiY29tcGlsZUN1YmVtYXBTaGFkZXIiLCJfZ2V0Q3ViZW1hcE1hdGVyaWFsIiwiY29tcGlsZUVxdWlyZWN0YW5ndWxhclNoYWRlciIsIl9nZXRFcXVpcmVjdE1hdGVyaWFsIiwiX2Rpc3Bvc2UiLCJjdWJlU2l6ZSIsImxvZzIiLCJvdXRwdXRUYXJnZXQiLCJfc2V0Vmlld3BvcnQiLCJfdGV4dHVyZVRvQ3ViZVVWIiwicGFyYW1zIiwiX2NyZWF0ZVJlbmRlclRhcmdldCIsInNpemVMb2RzIiwibG9kUGxhbmVzIiwic2lnbWFzIiwibG9kTWF4IiwibG9kIiwidG90YWxMb2RzIiwic2l6ZUxvZCIsInRleGVsU2l6ZSIsImN1YmVGYWNlcyIsInBvc2l0aW9uU2l6ZSIsInV2U2l6ZSIsImZhY2VJbmRleFNpemUiLCJjb29yZGluYXRlcyIsIl9jcmVhdGVQbGFuZXMiLCJ3ZWlnaHRzIiwicG9sZUF4aXMiLCJfZ2V0Qmx1clNoYWRlciIsInRtcE1lc2giLCJjb21waWxlIiwiY3ViZUNhbWVyYSIsInVwU2lnbiIsImZvcndhcmRTaWduIiwib3JpZ2luYWxBdXRvQ2xlYXIiLCJiYWNrZ3JvdW5kTWF0ZXJpYWwiLCJiYWNrZ3JvdW5kQm94IiwidXNlU29saWRDb2xvciIsImNvbCIsImxvZEluIiwibG9kT3V0IiwicGluZ1BvbmdSZW5kZXJUYXJnZXQiLCJfaGFsZkJsdXIiLCJ0YXJnZXRJbiIsInRhcmdldE91dCIsInNpZ21hUmFkaWFucyIsImJsdXJNYXRlcmlhbCIsImJsdXJNZXNoIiwiYmx1clVuaWZvcm1zIiwicGl4ZWxzIiwicmFkaWFuc1BlclBpeGVsIiwic2lnbWFQaXhlbHMiLCJzdW0iLCJ3ZWlnaHQiLCJleHAiLCJvdXRwdXRTaXplIiwiV2ViR0xDdWJlVVZNYXBzIiwiY3ViZVVWbWFwcyIsInBtcmVtR2VuZXJhdG9yIiwiY3ViZW1hcFVWIiwiaXNFcXVpcmVjdE1hcCIsImlzQ3ViZU1hcCIsImlzQ3ViZVRleHR1cmVDb21wbGV0ZSIsIldlYkdMRXh0ZW5zaW9ucyIsImdldEV4dGVuc2lvbiIsIldlYkdMR2VvbWV0cmllcyIsIndpcmVmcmFtZUF0dHJpYnV0ZXMiLCJvbkdlb21ldHJ5RGlzcG9zZSIsIm1lbW9yeSIsInVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZSIsImdlb21ldHJ5SW5kZXgiLCJnZW9tZXRyeVBvc2l0aW9uIiwicHJldmlvdXNBdHRyaWJ1dGUiLCJnZXRXaXJlZnJhbWVBdHRyaWJ1dGUiLCJjdXJyZW50QXR0cmlidXRlIiwiV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJkcmF3RWxlbWVudHMiLCJXZWJHTEluZm8iLCJjYWxscyIsInRyaWFuZ2xlcyIsImxpbmVzIiwicHJvZ3JhbXMiLCJhdXRvUmVzZXQiLCJpbnN0YW5jZUNvdW50IiwibnVtZXJpY2FsU29ydCIsImFic051bWVyaWNhbFNvcnQiLCJkZW5vcm1hbGl6ZSIsIm1vcnBoIiwiV2ViR0xNb3JwaHRhcmdldHMiLCJpbmZsdWVuY2VzTGlzdCIsIm1vcnBoVGV4dHVyZXMiLCJ3b3JrSW5mbHVlbmNlcyIsIm9iamVjdEluZmx1ZW5jZXMiLCJtb3JwaFRhcmdldHNDb3VudCIsImVudHJ5IiwiaGFzTW9ycGhQb3NpdGlvbiIsImhhc01vcnBoTm9ybWFscyIsImhhc01vcnBoQ29sb3JzIiwibW9ycGhOb3JtYWxzIiwibW9ycGhDb2xvcnMiLCJ2ZXJ0ZXhEYXRhQ291bnQiLCJ2ZXJ0ZXhEYXRhU3RyaWRlIiwibW9ycGhUYXJnZXQiLCJtb3JwaE5vcm1hbCIsIm1vcnBoQ29sb3IiLCJkaXNwb3NlVGV4dHVyZSIsIm1vcnBoSW5mbHVlbmNlc1N1bSIsIm1vcnBoQmFzZUluZmx1ZW5jZSIsImdldFVuaWZvcm1zIiwic2V0VmFsdWUiLCJpbmZsdWVuY2VzIiwic29ydCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJXZWJHTE9iamVjdHMiLCJ1cGRhdGVNYXAiLCJvbkluc3RhbmNlZE1lc2hEaXNwb3NlIiwiaW5zdGFuY2VkTWVzaCIsImJ1ZmZlcmdlb21ldHJ5IiwiZW1wdHlUZXh0dXJlIiwiZW1wdHlBcnJheVRleHR1cmUiLCJlbXB0eTNkVGV4dHVyZSIsImVtcHR5Q3ViZVRleHR1cmUiLCJhcnJheUNhY2hlRjMyIiwiYXJyYXlDYWNoZUkzMiIsIm1hdDRhcnJheSIsIm1hdDNhcnJheSIsIm1hdDJhcnJheSIsImZsYXR0ZW4iLCJuQmxvY2tzIiwiYmxvY2tTaXplIiwiZmlyc3RFbGVtIiwiYXJyYXlzRXF1YWwiLCJhbGxvY1RleFVuaXRzIiwiYWxsb2NhdGVUZXh0dXJlVW5pdCIsInNldFZhbHVlVjFmIiwidW5pZm9ybTFmIiwiYWRkciIsInNldFZhbHVlVjJmIiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlVjNmIiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlVjRmIiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlTTIiLCJ1bmlmb3JtTWF0cml4MmZ2Iiwic2V0VmFsdWVNMyIsInVuaWZvcm1NYXRyaXgzZnYiLCJzZXRWYWx1ZU00IiwidW5pZm9ybU1hdHJpeDRmdiIsInNldFZhbHVlVjFpIiwic2V0VmFsdWVWMmkiLCJ1bmlmb3JtMml2Iiwic2V0VmFsdWVWM2kiLCJ1bmlmb3JtM2l2Iiwic2V0VmFsdWVWNGkiLCJ1bmlmb3JtNGl2Iiwic2V0VmFsdWVWMXVpIiwidW5pZm9ybTF1aSIsInNldFZhbHVlVjJ1aSIsInVuaWZvcm0ydWl2Iiwic2V0VmFsdWVWM3VpIiwidW5pZm9ybTN1aXYiLCJzZXRWYWx1ZVY0dWkiLCJ1bmlmb3JtNHVpdiIsInNldFZhbHVlVDEiLCJ1bml0Iiwic2V0VGV4dHVyZTJEIiwic2V0VmFsdWVUM0QxIiwic2V0VGV4dHVyZTNEIiwic2V0VmFsdWVUNiIsInNldFRleHR1cmVDdWJlIiwic2V0VmFsdWVUMkRBcnJheTEiLCJzZXRUZXh0dXJlMkRBcnJheSIsInNldFZhbHVlVjFmQXJyYXkiLCJ1bmlmb3JtMWZ2Iiwic2V0VmFsdWVWMmZBcnJheSIsInNldFZhbHVlVjNmQXJyYXkiLCJzZXRWYWx1ZVY0ZkFycmF5Iiwic2V0VmFsdWVNMkFycmF5Iiwic2V0VmFsdWVNM0FycmF5Iiwic2V0VmFsdWVNNEFycmF5Iiwic2V0VmFsdWVWMWlBcnJheSIsInVuaWZvcm0xaXYiLCJzZXRWYWx1ZVYyaUFycmF5Iiwic2V0VmFsdWVWM2lBcnJheSIsInNldFZhbHVlVjRpQXJyYXkiLCJzZXRWYWx1ZVYxdWlBcnJheSIsInVuaWZvcm0xdWl2Iiwic2V0VmFsdWVWMnVpQXJyYXkiLCJzZXRWYWx1ZVYzdWlBcnJheSIsInNldFZhbHVlVjR1aUFycmF5Iiwic2V0VmFsdWVUMUFycmF5IiwidW5pdHMiLCJzZXRWYWx1ZVQzREFycmF5Iiwic2V0VmFsdWVUNkFycmF5Iiwic2V0VmFsdWVUMkRBcnJheUFycmF5IiwiU2luZ2xlVW5pZm9ybSIsImFjdGl2ZUluZm8iLCJnZXRTaW5ndWxhclNldHRlciIsIlB1cmVBcnJheVVuaWZvcm0iLCJnZXRQdXJlQXJyYXlTZXR0ZXIiLCJTdHJ1Y3R1cmVkVW5pZm9ybSIsInNlcSIsInVwZGF0ZUNhY2hlIiwiUmVQYXRoUGFydCIsImFkZFVuaWZvcm0iLCJjb250YWluZXIiLCJ1bmlmb3JtT2JqZWN0IiwicGFyc2VVbmlmb3JtIiwicGF0aExlbmd0aCIsImxhc3RJbmRleCIsIm1hdGNoIiwibWF0Y2hFbmQiLCJpZElzSW5kZXgiLCJzdWJzY3JpcHQiLCJXZWJHTFVuaWZvcm1zIiwiZ2V0QWN0aXZlVW5pZm9ybSIsIldlYkdMU2hhZGVyIiwic2V0T3B0aW9uYWwiLCJ1cGxvYWQiLCJzZXFXaXRoVmFsdWUiLCJwcm9ncmFtSWRDb3VudCIsImdldFNoYWRlckVycm9ycyIsInN0YXR1cyIsImVycm9ycyIsInRyaW0iLCJlcnJvckxpbmUiLCJ0b1VwcGVyQ2FzZSIsImxpbmVzMiIsImhhbmRsZVNvdXJjZSIsImdldFNoYWRlclNvdXJjZSIsImdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiIsImZ1bmN0aW9uTmFtZSIsImdldEVuY29kaW5nQ29tcG9uZW50cyIsImdldFRvbmVNYXBwaW5nRnVuY3Rpb24iLCJ0b25lTWFwcGluZ05hbWUiLCJmaWx0ZXJFbXB0eUxpbmUiLCJyZXBsYWNlTGlnaHROdW1zIiwicmVwbGFjZSIsIm51bURpckxpZ2h0cyIsIm51bVNwb3RMaWdodHMiLCJudW1SZWN0QXJlYUxpZ2h0cyIsIm51bVBvaW50TGlnaHRzIiwibnVtSGVtaUxpZ2h0cyIsIm51bURpckxpZ2h0U2hhZG93cyIsIm51bVNwb3RMaWdodFNoYWRvd3MiLCJudW1Qb2ludExpZ2h0U2hhZG93cyIsInJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyIsIm51bUNsaXBwaW5nUGxhbmVzIiwibnVtQ2xpcEludGVyc2VjdGlvbiIsImluY2x1ZGVQYXR0ZXJuIiwicmVzb2x2ZUluY2x1ZGVzIiwiaW5jbHVkZVJlcGxhY2VyIiwiaW5jbHVkZSIsImRlcHJlY2F0ZWRVbnJvbGxMb29wUGF0dGVybiIsInVucm9sbExvb3BQYXR0ZXJuIiwidW5yb2xsTG9vcHMiLCJsb29wUmVwbGFjZXIiLCJkZXByZWNhdGVkTG9vcFJlcGxhY2VyIiwic25pcHBldCIsImdlbmVyYXRlUHJlY2lzaW9uIiwicHJlY2lzaW9uc3RyaW5nIiwiV2ViR0xQcm9ncmFtIiwiY2FjaGVLZXkiLCJzaGFkb3dNYXBUeXBlRGVmaW5lIiwic2hhZG93TWFwVHlwZSIsImdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSIsImVudk1hcFR5cGVEZWZpbmUiLCJlbnZNYXBNb2RlIiwiZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lIiwiZW52TWFwTW9kZURlZmluZSIsImdlbmVyYXRlRW52TWFwTW9kZURlZmluZSIsImVudk1hcEJsZW5kaW5nRGVmaW5lIiwiZ2VuZXJhdGVFbnZNYXBCbGVuZGluZ0RlZmluZSIsImVudk1hcEN1YmVVVlNpemUiLCJpbWFnZUhlaWdodCIsImVudk1hcEN1YmVVVkhlaWdodCIsIm1heE1pcCIsInRleGVsSGVpZ2h0IiwidGV4ZWxXaWR0aCIsImdlbmVyYXRlQ3ViZVVWU2l6ZSIsImN1c3RvbUV4dGVuc2lvbnMiLCJleHRlbnNpb25EZXJpdmF0aXZlcyIsInRhbmdlbnRTcGFjZU5vcm1hbE1hcCIsInNoYWRlcklEIiwiZXh0ZW5zaW9uRnJhZ0RlcHRoIiwicmVuZGVyZXJFeHRlbnNpb25GcmFnRGVwdGgiLCJleHRlbnNpb25EcmF3QnVmZmVycyIsInJlbmRlcmVyRXh0ZW5zaW9uRHJhd0J1ZmZlcnMiLCJleHRlbnNpb25TaGFkZXJUZXh0dXJlTE9EIiwicmVuZGVyZXJFeHRlbnNpb25TaGFkZXJUZXh0dXJlTG9kIiwiZ2VuZXJhdGVFeHRlbnNpb25zIiwiY3VzdG9tRGVmaW5lcyIsImNodW5rcyIsImdlbmVyYXRlRGVmaW5lcyIsInByZWZpeFZlcnRleCIsInByZWZpeEZyYWdtZW50IiwidmVyc2lvblN0cmluZyIsImlzUmF3U2hhZGVyTWF0ZXJpYWwiLCJzaGFkZXJOYW1lIiwiaW5zdGFuY2luZyIsImluc3RhbmNpbmdDb2xvciIsInN1cHBvcnRzVmVydGV4VGV4dHVyZXMiLCJtYXhCb25lcyIsInVzZUZvZyIsImZvZ0V4cDIiLCJvYmplY3RTcGFjZU5vcm1hbE1hcCIsInZlcnRleFRhbmdlbnRzIiwidmVydGV4QWxwaGFzIiwidmVydGV4VXZzIiwidXZzVmVydGV4T25seSIsInNraW5uaW5nIiwidXNlVmVydGV4VGV4dHVyZSIsIm1vcnBoVGV4dHVyZVN0cmlkZSIsImRvdWJsZVNpZGVkIiwiZmxpcFNpZGVkIiwic2hhZG93TWFwRW5hYmxlZCIsImRlY29kZVZpZGVvVGV4dHVyZSIsInBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzIiwib3BhcXVlIiwiZGVwdGhQYWNraW5nIiwiZnJhZ21lbnRHbHNsIiwiZ2xWZXJ0ZXhTaGFkZXIiLCJnbEZyYWdtZW50U2hhZGVyIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwiZGVidWciLCJjaGVja1NoYWRlckVycm9ycyIsInByb2dyYW1Mb2ciLCJ2ZXJ0ZXhMb2ciLCJmcmFnbWVudExvZyIsInJ1bm5hYmxlIiwiaGF2ZURpYWdub3N0aWNzIiwidmVydGV4RXJyb3JzIiwiZnJhZ21lbnRFcnJvcnMiLCJnZXRFcnJvciIsImRpYWdub3N0aWNzIiwicHJlZml4IiwiY2FjaGVkVW5pZm9ybXMiLCJkZWxldGVTaGFkZXIiLCJnZXRBY3RpdmVBdHRyaWIiLCJmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyIsImRlc3Ryb3kiLCJkZWxldGVQcm9ncmFtIiwidXNlZFRpbWVzIiwiX2lkIiwiV2ViR0xTaGFkZXJDYWNoZSIsInNoYWRlckNhY2hlIiwiTWFwIiwibWF0ZXJpYWxDYWNoZSIsInZlcnRleFNoYWRlclN0YWdlIiwiX2dldFNoYWRlclN0YWdlIiwiZnJhZ21lbnRTaGFkZXJTdGFnZSIsIm1hdGVyaWFsU2hhZGVycyIsIl9nZXRTaGFkZXJDYWNoZUZvck1hdGVyaWFsIiwic2hhZGVyU3RhZ2UiLCJjb2RlIiwiZ2V0VmVydGV4U2hhZGVySUQiLCJnZXRGcmFnbWVudFNoYWRlcklEIiwiU2V0Iiwic3RhZ2UiLCJXZWJHTFNoYWRlclN0YWdlIiwiV2ViR0xQcm9ncmFtcyIsImN1YmV1dm1hcHMiLCJfcHJvZ3JhbUxheWVycyIsIl9jdXN0b21TaGFkZXJzIiwic2hhZGVySURzIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJNZXNoRGlzdGFuY2VNYXRlcmlhbCIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJNZXNoUGhvbmdNYXRlcmlhbCIsIk1lc2hUb29uTWF0ZXJpYWwiLCJNZXNoU3RhbmRhcmRNYXRlcmlhbCIsIk1lc2hQaHlzaWNhbE1hdGVyaWFsIiwiTWVzaE1hdGNhcE1hdGVyaWFsIiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJMaW5lRGFzaGVkTWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsIlNoYWRvd01hdGVyaWFsIiwiU3ByaXRlTWF0ZXJpYWwiLCJnZXRQYXJhbWV0ZXJzIiwic2hhZG93cyIsImlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJib25lcyIsIm5WZXJ0ZXhVbmlmb3JtcyIsIm5WZXJ0ZXhNYXRyaWNlcyIsImdldE1heEJvbmVzIiwiY3VzdG9tVmVydGV4U2hhZGVySUQiLCJjdXN0b21GcmFnbWVudFNoYWRlcklEIiwidXNlQWxwaGFUZXN0IiwidXNlQ2xlYXJjb2F0IiwiaXNYUlJlbmRlclRhcmdldCIsImlzVmlkZW9UZXh0dXJlIiwiaXNGb2dFeHAyIiwiZGlyZWN0aW9uYWwiLCJzcG90IiwicmVjdEFyZWEiLCJoZW1pIiwic2hhZG93TWFwIiwiZ2V0UHJvZ3JhbUNhY2hlS2V5IiwibW9ycGhBdHRyaWJ1dGVDb3VudCIsImdldFByb2dyYW1DYWNoZUtleVBhcmFtZXRlcnMiLCJnZXRQcm9ncmFtQ2FjaGVLZXlCb29sZWFucyIsImFjcXVpcmVQcm9ncmFtIiwicGwiLCJwcmVleGlzdGluZ1Byb2dyYW0iLCJyZWxlYXNlUHJvZ3JhbSIsInJlbGVhc2VTaGFkZXJDYWNoZSIsIldlYkdMUHJvcGVydGllcyIsInBhaW50ZXJTb3J0U3RhYmxlIiwiZ3JvdXBPcmRlciIsInJldmVyc2VQYWludGVyU29ydFN0YWJsZSIsIldlYkdMUmVuZGVyTGlzdCIsInJlbmRlckl0ZW1zIiwicmVuZGVySXRlbXNJbmRleCIsInRyYW5zbWlzc2l2ZSIsImdldE5leHRSZW5kZXJJdGVtIiwicmVuZGVySXRlbSIsImZpbmlzaCIsImN1c3RvbU9wYXF1ZVNvcnQiLCJjdXN0b21UcmFuc3BhcmVudFNvcnQiLCJXZWJHTFJlbmRlckxpc3RzIiwibGlzdHMiLCJyZW5kZXJDYWxsRGVwdGgiLCJsaXN0IiwiVW5pZm9ybXNDYWNoZSIsImxpZ2h0IiwiaGFsZldpZHRoIiwiaGFsZkhlaWdodCIsIm5leHRWZXJzaW9uIiwic2hhZG93Q2FzdGluZ0xpZ2h0c0ZpcnN0IiwibGlnaHRBIiwibGlnaHRCIiwiV2ViR0xMaWdodHMiLCJzaGFkb3dDYWNoZSIsIlNoYWRvd1VuaWZvcm1zQ2FjaGUiLCJoYXNoIiwiZGlyZWN0aW9uYWxMZW5ndGgiLCJwb2ludExlbmd0aCIsInNwb3RMZW5ndGgiLCJyZWN0QXJlYUxlbmd0aCIsImhlbWlMZW5ndGgiLCJudW1EaXJlY3Rpb25hbFNoYWRvd3MiLCJudW1Qb2ludFNoYWRvd3MiLCJudW1TcG90U2hhZG93cyIsImFtYmllbnQiLCJwcm9iZSIsImRpcmVjdGlvbmFsU2hhZG93Iiwic3BvdFNoYWRvdyIsInJlY3RBcmVhTFRDMSIsInJlY3RBcmVhTFRDMiIsInBvaW50U2hhZG93IiwidmVjdG9yMyIsIm1hdHJpeDQyIiwic2NhbGVGYWN0b3IiLCJpbnRlbnNpdHkiLCJpc0FtYmllbnRMaWdodCIsImlzTGlnaHRQcm9iZSIsInNoIiwiY29lZmZpY2llbnRzIiwiaXNEaXJlY3Rpb25hbExpZ2h0Iiwic2hhZG93VW5pZm9ybXMiLCJiaWFzIiwibm9ybWFsQmlhcyIsIm1hcFNpemUiLCJpc1Nwb3RMaWdodCIsInBlbnVtYnJhIiwiaXNSZWN0QXJlYUxpZ2h0IiwiaXNQb2ludExpZ2h0IiwiaXNIZW1pc3BoZXJlTGlnaHQiLCJMVENfRkxPQVRfMSIsIkxUQ19GTE9BVF8yIiwiTFRDX0hBTEZfMSIsIkxUQ19IQUxGXzIiLCJzZXR1cFZpZXciLCJXZWJHTFJlbmRlclN0YXRlIiwibGlnaHRzQXJyYXkiLCJzaGFkb3dzQXJyYXkiLCJzZXR1cExpZ2h0cyIsInNldHVwTGlnaHRzVmlldyIsInB1c2hMaWdodCIsInB1c2hTaGFkb3ciLCJzaGFkb3dMaWdodCIsIldlYkdMUmVuZGVyU3RhdGVzIiwicmVuZGVyU3RhdGVzIiwicmVuZGVyU3RhdGUiLCJpc01lc2hEZXB0aE1hdGVyaWFsIiwiV2ViR0xTaGFkb3dNYXAiLCJfb2JqZWN0cyIsIl9jYXBhYmlsaXRpZXMiLCJfZnJ1c3R1bSIsIl9zaGFkb3dNYXBTaXplIiwiX3ZpZXdwb3J0U2l6ZSIsIl92aWV3cG9ydCIsIl9kZXB0aE1hdGVyaWFsIiwiX2Rpc3RhbmNlTWF0ZXJpYWwiLCJfbWF0ZXJpYWxDYWNoZSIsIl9tYXhUZXh0dXJlU2l6ZSIsInNoYWRvd01hdGVyaWFsVmVydGljYWwiLCJWU01fU0FNUExFUyIsInNoYWRvd19wYXNzIiwicmVzb2x1dGlvbiIsInNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbCIsIkhPUklaT05UQUxfUEFTUyIsImZ1bGxTY3JlZW5UcmkiLCJmdWxsU2NyZWVuTWVzaCIsIlZTTVBhc3MiLCJibHVyU2FtcGxlcyIsIm1hcFBhc3MiLCJyZW5kZXJCdWZmZXJEaXJlY3QiLCJnZXREZXB0aE1hdGVyaWFsIiwicmVzdWx0IiwiY3VzdG9tTWF0ZXJpYWwiLCJjdXN0b21EaXN0YW5jZU1hdGVyaWFsIiwiY3VzdG9tRGVwdGhNYXRlcmlhbCIsImtleUEiLCJrZXlCIiwibWF0ZXJpYWxzRm9yVmFyaWFudCIsImNhY2hlZE1hdGVyaWFsIiwiaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCIsInJlbmRlck9iamVjdCIsInNoYWRvd0NhbWVyYSIsImtsIiwiZGVwdGhNYXRlcmlhbCIsImF1dG9VcGRhdGUiLCJhY3RpdmVDdWJlRmFjZSIsImdldEFjdGl2ZUN1YmVGYWNlIiwiYWN0aXZlTWlwbWFwTGV2ZWwiLCJnZXRBY3RpdmVNaXBtYXBMZXZlbCIsIl9zdGF0ZSIsInNldEJsZW5kaW5nIiwic2V0VGVzdCIsInNldFNjaXNzb3JUZXN0Iiwic2hhZG93RnJhbWVFeHRlbnRzIiwiZ2V0RnJhbWVFeHRlbnRzIiwiaXNQb2ludExpZ2h0U2hhZG93IiwicGFycyIsInZpZXdwb3J0Q291bnQiLCJnZXRWaWV3cG9ydENvdW50IiwidnAiLCJnZXRWaWV3cG9ydCIsInVwZGF0ZU1hdHJpY2VzIiwiZ2V0RnJ1c3R1bSIsIldlYkdMU3RhdGUiLCJjb2xvckJ1ZmZlciIsImxvY2tlZCIsImN1cnJlbnRDb2xvck1hc2siLCJjdXJyZW50Q29sb3JDbGVhciIsInNldE1hc2siLCJzZXRMb2NrZWQiLCJsb2NrIiwiY3VycmVudERlcHRoTWFzayIsImN1cnJlbnREZXB0aEZ1bmMiLCJjdXJyZW50RGVwdGhDbGVhciIsImRlcHRoTWFzayIsInNldEZ1bmMiLCJjbGVhckRlcHRoIiwiY3VycmVudFN0ZW5jaWxNYXNrIiwiY3VycmVudFN0ZW5jaWxGdW5jIiwiY3VycmVudFN0ZW5jaWxSZWYiLCJjdXJyZW50U3RlbmNpbEZ1bmNNYXNrIiwiY3VycmVudFN0ZW5jaWxGYWlsIiwiY3VycmVudFN0ZW5jaWxaRmFpbCIsImN1cnJlbnRTdGVuY2lsWlBhc3MiLCJjdXJyZW50U3RlbmNpbENsZWFyIiwic3RlbmNpbFRlc3QiLCJzdGVuY2lsTWFzayIsInNldE9wIiwic3RlbmNpbE9wIiwiY2xlYXJTdGVuY2lsIiwiZW5hYmxlZENhcGFiaWxpdGllcyIsImN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyIsImN1cnJlbnREcmF3YnVmZmVycyIsImRlZmF1bHREcmF3YnVmZmVycyIsImN1cnJlbnRQcm9ncmFtIiwiY3VycmVudEJsZW5kaW5nRW5hYmxlZCIsImN1cnJlbnRCbGVuZGluZyIsImN1cnJlbnRCbGVuZEVxdWF0aW9uIiwiY3VycmVudEJsZW5kU3JjIiwiY3VycmVudEJsZW5kRHN0IiwiY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSIsImN1cnJlbnRCbGVuZFNyY0FscGhhIiwiY3VycmVudEJsZW5kRHN0QWxwaGEiLCJjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEiLCJjdXJyZW50RmxpcFNpZGVkIiwiY3VycmVudEN1bGxGYWNlIiwiY3VycmVudExpbmVXaWR0aCIsImN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yIiwiY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyIsImxpbmVXaWR0aEF2YWlsYWJsZSIsImdsVmVyc2lvbiIsImN1cnJlbnRUZXh0dXJlU2xvdCIsImN1cnJlbnRCb3VuZFRleHR1cmVzIiwic2Npc3NvclBhcmFtIiwidmlld3BvcnRQYXJhbSIsImN1cnJlbnRTY2lzc29yIiwiY3VycmVudFZpZXdwb3J0IiwiYmluZFRleHR1cmUiLCJ0ZXhQYXJhbWV0ZXJpIiwiZW1wdHlUZXh0dXJlcyIsInNldEZsaXBTaWRlZCIsInNldEN1bGxGYWNlIiwiZXF1YXRpb25Ub0dMIiwiTUlOX0VYVCIsIk1BWF9FWFQiLCJmYWN0b3JUb0dMIiwiYmxlbmRFcXVhdGlvblNlcGFyYXRlIiwiYmxlbmRGdW5jU2VwYXJhdGUiLCJibGVuZEZ1bmMiLCJmcm9udEZhY2UiLCJjdWxsRmFjZSIsInNldFBvbHlnb25PZmZzZXQiLCJmYWN0b3IiLCJ3ZWJnbFNsb3QiLCJmcmFtZWJ1ZmZlciIsImRyYXdCdWZmZXJzV0VCR0wiLCJzZXRNYXRlcmlhbCIsImZyb250RmFjZUNXIiwic2V0TGluZVdpZHRoIiwid2ViZ2xUeXBlIiwid2ViZ2xUZXh0dXJlIiwiYm91bmRUZXh0dXJlIiwidW5iaW5kVGV4dHVyZSIsImNvbXByZXNzZWRUZXhJbWFnZTJEIiwidGV4SW1hZ2UzRCIsInRleFN0b3JhZ2UyRCIsInRleFN0b3JhZ2UzRCIsInRleFN1YkltYWdlMkQiLCJ0ZXhTdWJJbWFnZTNEIiwiY29tcHJlc3NlZFRleFN1YkltYWdlMkQiLCJXZWJHTFRleHR1cmVzIiwiX2dsIiwidXRpbHMiLCJtdWx0aXNhbXBsZWRSVFRFeHQiLCJzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciIsIl92aWRlb1RleHR1cmVzIiwiX3NvdXJjZXMiLCJ1c2VPZmZzY3JlZW5DYW52YXMiLCJlcnIiLCJjcmVhdGVDYW52YXMiLCJyZXNpemVJbWFnZSIsIm5lZWRzUG93ZXJPZlR3byIsIm5lZWRzTmV3Q2FudmFzIiwibWF4U2l6ZSIsImlzUG93ZXJPZlR3byQxIiwidGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzIiwic3VwcG9ydHNNaXBzIiwiZ2VuZXJhdGVNaXBtYXAiLCJnZXRJbnRlcm5hbEZvcm1hdCIsImludGVybmFsRm9ybWF0TmFtZSIsImdsRm9ybWF0IiwiZ2xUeXBlIiwiZ2V0TWlwTGV2ZWxzIiwiaXNGcmFtZWJ1ZmZlclRleHR1cmUiLCJpc0NvbXByZXNzZWRUZXh0dXJlIiwiZmlsdGVyRmFsbGJhY2siLCJ0ZXh0dXJlUHJvcGVydGllcyIsIl9fd2ViZ2xJbml0Iiwid2ViZ2xUZXh0dXJlcyIsIl9fY2FjaGVLZXkiLCJkZWxldGVUZXh0dXJlIiwiZGVhbGxvY2F0ZVRleHR1cmUiLCJvblJlbmRlclRhcmdldERpc3Bvc2UiLCJyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzIiwiX193ZWJnbFRleHR1cmUiLCJkZWxldGVGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xEZXB0aGJ1ZmZlciIsImRlbGV0ZVJlbmRlcmJ1ZmZlciIsIl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciIsIl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciIsImF0dGFjaG1lbnRQcm9wZXJ0aWVzIiwiZGVhbGxvY2F0ZVJlbmRlclRhcmdldCIsInRleHR1cmVVbml0cyIsInNsb3QiLCJ1cGRhdGVWaWRlb1RleHR1cmUiLCJfX3ZlcnNpb24iLCJjb21wbGV0ZSIsInVwbG9hZFRleHR1cmUiLCJ3cmFwcGluZ1RvR0wiLCJmaWx0ZXJUb0dMIiwic2V0VGV4dHVyZVBhcmFtZXRlcnMiLCJ0ZXh0dXJlVHlwZSIsIl9fY3VycmVudEFuaXNvdHJvcHkiLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJpbml0VGV4dHVyZSIsImZvcmNlVXBsb2FkIiwidGV4dHVyZUNhY2hlS2V5IiwiZ2V0VGV4dHVyZUNhY2hlS2V5IiwiX19jdXJyZW50VmVyc2lvbiIsInBpeGVsU3RvcmVpIiwidGV4dHVyZU5lZWRzUG93ZXJPZlR3byIsInZlcmlmeUNvbG9yU3BhY2UiLCJtaXBtYXAiLCJnbEludGVybmFsRm9ybWF0IiwidXNlVGV4U3RvcmFnZSIsImFsbG9jYXRlTWVtb3J5IiwibGV2ZWxzIiwiaXNEZXB0aFRleHR1cmUiLCJzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSIsImF0dGFjaG1lbnQiLCJ0ZXh0dXJlVGFyZ2V0IiwiX19oYXNFeHRlcm5hbFRleHR1cmVzIiwidXNlTXVsdGlzYW1wbGVkUlRUIiwiZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCIsImdldFJlbmRlclRhcmdldFNhbXBsZXMiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsInNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSIsInJlbmRlcmJ1ZmZlciIsImlzTXVsdGlzYW1wbGUiLCJiaW5kUmVuZGVyYnVmZmVyIiwicmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlRVhUIiwicmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlIiwicmVuZGVyYnVmZmVyU3RvcmFnZSIsImZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyIiwic2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciIsImlzQ3ViZSIsIl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIiLCJ3ZWJnbERlcHRoVGV4dHVyZSIsInNldHVwRGVwdGhUZXh0dXJlIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiX191c2VSZW5kZXJUb1RleHR1cmUiLCJzUkdCVG9MaW5lYXIiLCJ0ZXh0dXJlVW5pdCIsInJlc2V0VGV4dHVyZVVuaXRzIiwiaXNDb21wcmVzc2VkIiwiY3ViZUltYWdlIiwibWlwbWFwSW1hZ2UiLCJ1cGxvYWRDdWJlVGV4dHVyZSIsInJlYmluZFRleHR1cmVzIiwiY29sb3JUZXh0dXJlIiwic2V0dXBSZW5kZXJUYXJnZXQiLCJpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiZ2xUZXh0dXJlVHlwZSIsInVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCIsInVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IiwiaW52YWxpZGF0aW9uQXJyYXkiLCJkZXB0aFN0eWxlIiwiaWdub3JlRGVwdGhWYWx1ZXMiLCJfX2lnbm9yZURlcHRoVmFsdWVzIiwiaW52YWxpZGF0ZUZyYW1lYnVmZmVyIiwiYmxpdEZyYW1lYnVmZmVyIiwiV2ViR0xVdGlscyIsIkhBTEZfRkxPQVRfT0VTIiwiU1JHQl9BTFBIQV9FWFQiLCJDT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUM19FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMIiwiQ09NUFJFU1NFRF9TUkdCOF9FVEMyIiwiQ09NUFJFU1NFRF9SR0I4X0VUQzIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQyIsIkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUMiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDRfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzV4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ182eDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ184eDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDhfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4OF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEyX0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUiIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9CUFRDX1VOT1JNX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9CUFRDX1VOT1JNX0VYVCIsIlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMIiwiQXJyYXlDYW1lcmEiLCJjYW1lcmFzIiwiaXNBcnJheUNhbWVyYSIsIkdyb3VwIiwiaXNHcm91cCIsIl9tb3ZlRXZlbnQiLCJXZWJYUkNvbnRyb2xsZXIiLCJfdGFyZ2V0UmF5IiwiX2dyaXAiLCJfaGFuZCIsImdldEhhbmRTcGFjZSIsImpvaW50cyIsImlucHV0U3RhdGUiLCJwaW5jaGluZyIsImdldFRhcmdldFJheVNwYWNlIiwiaGFzTGluZWFyVmVsb2NpdHkiLCJsaW5lYXJWZWxvY2l0eSIsImhhc0FuZ3VsYXJWZWxvY2l0eSIsImFuZ3VsYXJWZWxvY2l0eSIsImdldEdyaXBTcGFjZSIsImRpc2Nvbm5lY3QiLCJpbnB1dFNvdXJjZSIsInJlZmVyZW5jZVNwYWNlIiwiaW5wdXRQb3NlIiwiZ3JpcFBvc2UiLCJoYW5kUG9zZSIsInRhcmdldFJheSIsImdyaXAiLCJoYW5kIiwidmlzaWJpbGl0eVN0YXRlIiwiZ2V0UG9zZSIsInRhcmdldFJheVNwYWNlIiwiaW5wdXRqb2ludCIsImpvaW50UG9zZSIsImdldEpvaW50UG9zZSIsImpvaW50TmFtZSIsImpvaW50Iiwiam9pbnRSYWRpdXMiLCJpbmRleFRpcCIsInRodW1iVGlwIiwiZGlzdGFuY2VUb1BpbmNoIiwidGhyZXNob2xkIiwiaGFuZGVkbmVzcyIsImdyaXBTcGFjZSIsIkRlcHRoVGV4dHVyZSIsIldlYlhSTWFuYWdlciIsImZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJyZWZlcmVuY2VTcGFjZVR5cGUiLCJwb3NlIiwiZ2xCaW5kaW5nIiwiZ2xQcm9qTGF5ZXIiLCJnbEJhc2VMYXllciIsInhyRnJhbWUiLCJnZXRDb250ZXh0QXR0cmlidXRlcyIsImluaXRpYWxSZW5kZXJUYXJnZXQiLCJuZXdSZW5kZXJUYXJnZXQiLCJjb250cm9sbGVycyIsImlucHV0U291cmNlc01hcCIsImNhbWVyYUwiLCJjYW1lcmFSIiwiY2FtZXJhVlIiLCJfY3VycmVudERlcHRoTmVhciIsIl9jdXJyZW50RGVwdGhGYXIiLCJvblNlc3Npb25FdmVudCIsImNvbnRyb2xsZXIiLCJvblNlc3Npb25FbmQiLCJmb3JFYWNoIiwiaXNQcmVzZW50aW5nIiwib25JbnB1dFNvdXJjZXNDaGFuZ2UiLCJpbnB1dFNvdXJjZXMiLCJyZW1vdmVkIiwiYWRkZWQiLCJjYW1lcmFBdXRvVXBkYXRlIiwiZ2V0Q29udHJvbGxlciIsImdldENvbnRyb2xsZXJHcmlwIiwiZ2V0SGFuZCIsInNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJzZXRSZWZlcmVuY2VTcGFjZVR5cGUiLCJnZXRSZWZlcmVuY2VTcGFjZSIsImdldEJhc2VMYXllciIsImdldEJpbmRpbmciLCJnZXRGcmFtZSIsInNldFNlc3Npb24iLCJhc3luYyIsInhyQ29tcGF0aWJsZSIsIm1ha2VYUkNvbXBhdGlibGUiLCJsYXllckluaXQiLCJYUldlYkdMTGF5ZXIiLCJ1cGRhdGVSZW5kZXJTdGF0ZSIsImJhc2VMYXllciIsImZyYW1lYnVmZmVyV2lkdGgiLCJmcmFtZWJ1ZmZlckhlaWdodCIsImRlcHRoRm9ybWF0IiwiZGVwdGhUeXBlIiwiZ2xEZXB0aEZvcm1hdCIsInByb2plY3Rpb25sYXllckluaXQiLCJjb2xvckZvcm1hdCIsIlhSV2ViR0xCaW5kaW5nIiwiY3JlYXRlUHJvamVjdGlvbkxheWVyIiwidGV4dHVyZVdpZHRoIiwidGV4dHVyZUhlaWdodCIsInNldEZvdmVhdGlvbiIsInJlcXVlc3RSZWZlcmVuY2VTcGFjZSIsImNhbWVyYUxQb3MiLCJjYW1lcmFSUG9zIiwidXBkYXRlQ2FtZXJhIiwiZGVwdGhOZWFyIiwiZGVwdGhGYXIiLCJpcGQiLCJwcm9qTCIsInByb2pSIiwidG9wRm92IiwiYm90dG9tRm92IiwibGVmdEZvdiIsInJpZ2h0Rm92Iiwiek9mZnNldCIsInhPZmZzZXQiLCJuZWFyMiIsImZhcjIiLCJsZWZ0MiIsInJpZ2h0MiIsInRvcDIiLCJib3R0b20yIiwic2V0UHJvamVjdGlvbkZyb21VbmlvbiIsImdldENhbWVyYSIsImdldEZvdmVhdGlvbiIsImZpeGVkRm92ZWF0aW9uIiwiZm92ZWF0aW9uIiwib25BbmltYXRpb25GcmFtZUNhbGxiYWNrIiwiZ2V0Vmlld2VyUG9zZSIsInZpZXdzIiwic2V0UmVuZGVyVGFyZ2V0RnJhbWVidWZmZXIiLCJjYW1lcmFWUk5lZWRzVXBkYXRlIiwiZ2xTdWJJbWFnZSIsImdldFZpZXdTdWJJbWFnZSIsInNldFJlbmRlclRhcmdldFRleHR1cmVzIiwiZGVwdGhTdGVuY2lsVGV4dHVyZSIsIldlYkdMTWF0ZXJpYWxzIiwicmVmcmVzaFVuaWZvcm1zQ29tbW9uIiwidXZTY2FsZU1hcCIsInV2MlNjYWxlTWFwIiwicmVmcmVzaEZvZ1VuaWZvcm1zIiwiaXNGb2ciLCJkZW5zaXR5IiwicmVmcmVzaE1hdGVyaWFsVW5pZm9ybXMiLCJwaXhlbFJhdGlvIiwidHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0IiwiaXNNZXNoTGFtYmVydE1hdGVyaWFsIiwiaXNNZXNoVG9vbk1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zVG9vbiIsImlzTWVzaFBob25nTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQaG9uZyIsInJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkIiwiaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsIiwiaXNNZXNoTWF0Y2FwTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNNYXRjYXAiLCJyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSIsImlzTWVzaE5vcm1hbE1hdGVyaWFsIiwiaXNMaW5lQmFzaWNNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0xpbmUiLCJpc0xpbmVEYXNoZWRNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0Rhc2giLCJpc1BvaW50c01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zUG9pbnRzIiwiaXNTcHJpdGVNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMiLCJpc1NoYWRvd01hdGVyaWFsIiwiV2ViR0xSZW5kZXJlciIsImRpc3BsYXkiLCJjcmVhdGVDYW52YXNFbGVtZW50IiwiX2NvbnRleHQiLCJfZGVwdGgiLCJfc3RlbmNpbCIsIl9hbnRpYWxpYXMiLCJfcHJlbXVsdGlwbGllZEFscGhhIiwiX3ByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsIl9wb3dlclByZWZlcmVuY2UiLCJwb3dlclByZWZlcmVuY2UiLCJfZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCIsImZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJfYWxwaGEiLCJjdXJyZW50UmVuZGVyTGlzdCIsImN1cnJlbnRSZW5kZXJTdGF0ZSIsInJlbmRlckxpc3RTdGFjayIsInJlbmRlclN0YXRlU3RhY2siLCJkb21FbGVtZW50Iiwic29ydE9iamVjdHMiLCJ0b25lTWFwcGluZ0V4cG9zdXJlIiwiX3RoaXMiLCJfaXNDb250ZXh0TG9zdCIsIl9jdXJyZW50QWN0aXZlQ3ViZUZhY2UiLCJfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsIiwiX2N1cnJlbnRSZW5kZXJUYXJnZXQiLCJfY3VycmVudE1hdGVyaWFsSWQiLCJfY3VycmVudENhbWVyYSIsIl9jdXJyZW50Vmlld3BvcnQiLCJfY3VycmVudFNjaXNzb3IiLCJfY3VycmVudFNjaXNzb3JUZXN0IiwiX3dpZHRoIiwiX2hlaWdodCIsIl9waXhlbFJhdGlvIiwiX29wYXF1ZVNvcnQiLCJfdHJhbnNwYXJlbnRTb3J0IiwiX3NjaXNzb3IiLCJfc2Npc3NvclRlc3QiLCJfY2xpcHBpbmdFbmFibGVkIiwiX2xvY2FsQ2xpcHBpbmdFbmFibGVkIiwiX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldCIsIl9wcm9qU2NyZWVuTWF0cml4IiwiX3ZlY3RvcjMiLCJfZW1wdHlTY2VuZSIsIm92ZXJyaWRlTWF0ZXJpYWwiLCJnZXRUYXJnZXRQaXhlbFJhdGlvIiwicHJvZ3JhbUNhY2hlIiwicmVuZGVyTGlzdHMiLCJtb3JwaHRhcmdldHMiLCJidWZmZXJSZW5kZXJlciIsImluZGV4ZWRCdWZmZXJSZW5kZXJlciIsImNvbnRleHROYW1lcyIsImNvbnRleHRBdHRyaWJ1dGVzIiwiY29udGV4dE5hbWUiLCJvbkNvbnRleHRMb3N0Iiwib25Db250ZXh0UmVzdG9yZSIsImlzV2ViR0wxUmVuZGVyZXIiLCJtZXNzYWdlIiwiaW5pdEdMQ29udGV4dCIsInByZXZlbnREZWZhdWx0IiwiaW5mb0F1dG9SZXNldCIsInNoYWRvd01hcEF1dG9VcGRhdGUiLCJzaGFkb3dNYXBOZWVkc1VwZGF0ZSIsIm9uTWF0ZXJpYWxEaXNwb3NlIiwicmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZXMiLCJkZWFsbG9jYXRlTWF0ZXJpYWwiLCJmb3JjZUNvbnRleHRMb3NzIiwibG9zZUNvbnRleHQiLCJmb3JjZUNvbnRleHRSZXN0b3JlIiwicmVzdG9yZUNvbnRleHQiLCJnZXRQaXhlbFJhdGlvIiwic2V0UGl4ZWxSYXRpbyIsInVwZGF0ZVN0eWxlIiwic2V0Vmlld3BvcnQiLCJnZXREcmF3aW5nQnVmZmVyU2l6ZSIsInNldERyYXdpbmdCdWZmZXJTaXplIiwiZ2V0Q3VycmVudFZpZXdwb3J0IiwiZ2V0U2Npc3NvciIsInNldFNjaXNzb3IiLCJnZXRTY2lzc29yVGVzdCIsImJvb2xlYW4iLCJzZXRPcGFxdWVTb3J0IiwibWV0aG9kIiwic2V0VHJhbnNwYXJlbnRTb3J0IiwiYml0cyIsIm9uWFJTZXNzaW9uU3RhcnQiLCJvblhSU2Vzc2lvbkVuZCIsIm5lZWRzUHJvZ3JhbUNoYW5nZSIsIm5lZWRzTGlnaHRzIiwibGlnaHRzU3RhdGVWZXJzaW9uIiwiZ2V0UHJvZ3JhbSIsInJlZnJlc2hQcm9ncmFtIiwicmVmcmVzaE1hdGVyaWFsIiwicmVmcmVzaExpZ2h0cyIsInBfdW5pZm9ybXMiLCJtX3VuaWZvcm1zIiwidUNhbVBvcyIsImNhbWVyYVBvc2l0aW9uIiwiYm9uZVRleHR1cmUiLCJjb21wdXRlQm9uZVRleHR1cmUiLCJib25lVGV4dHVyZVNpemUiLCJ1bmlmb3Jtc0xpc3QiLCJzZXRQcm9ncmFtIiwicmFuZ2VGYWN0b3IiLCJkYXRhQ291bnQiLCJyYW5nZVN0YXJ0IiwicmFuZ2VDb3VudCIsImRyYXdTdGFydCIsImRyYXdFbmQiLCJkcmF3Q291bnQiLCJpc0xpbmVTZWdtZW50cyIsImlzTGluZUxvb3AiLCJpc1Nwcml0ZSIsInByb2plY3RPYmplY3QiLCJpc0xPRCIsInJlbmRlclNjZW5lIiwib3BhcXVlT2JqZWN0cyIsInRyYW5zbWlzc2l2ZU9iamVjdHMiLCJ0cmFuc3BhcmVudE9iamVjdHMiLCJyZW5kZXJPYmplY3RzIiwicmVuZGVyVHJhbnNtaXNzaW9uUGFzcyIsInByb2dyYW1DYWNoZUtleSIsInVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyIsIm1hdGVyaWFsTmVlZHNMaWdodHMiLCJwcm9nVW5pZm9ybXMiLCJjYW1lcmEyIiwiZGVmYXVsdEZyYW1lYnVmZmVyIiwiX191c2VEZWZhdWx0RnJhbWVidWZmZXIiLCJ1c2VEZWZhdWx0RnJhbWVidWZmZXIiLCJpc1JlbmRlclRhcmdldDNEIiwibGF5ZXIiLCJmcmFtZWJ1ZmZlclRleHR1cmVMYXllciIsInJlYWRSZW5kZXJUYXJnZXRQaXhlbHMiLCJhY3RpdmVDdWJlRmFjZUluZGV4IiwidGV4dHVyZUZvcm1hdCIsImhhbGZGbG9hdFN1cHBvcnRlZEJ5RXh0IiwicmVhZFBpeGVscyIsImNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSIsImxldmVsIiwibGV2ZWxTY2FsZSIsImNvcHlUZXhTdWJJbWFnZTJEIiwiY29weVRleHR1cmVUb1RleHR1cmUiLCJzcmNUZXh0dXJlIiwiZHN0VGV4dHVyZSIsImNvcHlUZXh0dXJlVG9UZXh0dXJlM0QiLCJzb3VyY2VCb3giLCJnbFRhcmdldCIsInVucGFja1Jvd0xlbiIsInVucGFja0ltYWdlSGVpZ2h0IiwidW5wYWNrU2tpcFBpeGVscyIsInVucGFja1NraXBSb3dzIiwidW5wYWNrU2tpcEltYWdlcyIsImNvbXByZXNzZWRUZXhTdWJJbWFnZTNEIiwicmVzZXRTdGF0ZSIsIl9fVEhSRUVfREVWVE9PTFNfXyIsImRldGFpbCIsImlzV2ViR0xSZW5kZXJlciIsIkZvZ0V4cDIiLCJGb2ciLCJTY2VuZSIsIkludGVybGVhdmVkQnVmZmVyIiwiYXJyYXlCdWZmZXJzIiwiX3V1aWQiLCJpc0ludGVybGVhdmVkQnVmZmVyIiwiX3ZlY3RvciQ2IiwiSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUiLCJpbnRlcmxlYXZlZEJ1ZmZlciIsImludGVybGVhdmVkQnVmZmVycyIsIl9nZW9tZXRyeSIsIl9pbnRlcnNlY3RQb2ludCIsIl93b3JsZFNjYWxlIiwiX212UG9zaXRpb24iLCJfYWxpZ25lZFBvc2l0aW9uIiwiX3JvdGF0ZWRQb3NpdGlvbiIsIl92aWV3V29ybGRNYXRyaXgiLCJfdkEiLCJfdkIiLCJfdkMiLCJfdXZBIiwiX3V2QiIsIl91dkMiLCJ0cmFuc2Zvcm1WZXJ0ZXgiLCJ2ZXJ0ZXhQb3NpdGlvbiIsIm12UG9zaXRpb24iLCJmbG9hdDMyQXJyYXkiLCJfYmFzZVBvc2l0aW9uIiwiX3NraW5JbmRleCIsIl9za2luV2VpZ2h0IiwiX3ZlY3RvciQ1IiwiX21hdHJpeCIsIlNraW5uZWRNZXNoIiwiYmluZE1hdHJpeEludmVyc2UiLCJiaW5kIiwiY2FsY3VsYXRlSW52ZXJzZXMiLCJub3JtYWxpemVTa2luV2VpZ2h0cyIsInNraW5XZWlnaHQiLCJza2luSW5kZXgiLCJib25lSW5kZXgiLCJib25lSW52ZXJzZXMiLCJpc0JvbmUiLCJJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJfaW5zdGFuY2VMb2NhbE1hdHJpeCIsIl9pbnN0YW5jZVdvcmxkTWF0cml4IiwiX2luc3RhbmNlSW50ZXJzZWN0cyIsIl9tZXNoIiwiZ2V0Q29sb3JBdCIsImdldE1hdHJpeEF0IiwicmF5Y2FzdFRpbWVzIiwiaW5zdGFuY2VJZCIsInNldENvbG9yQXQiLCJzZXRNYXRyaXhBdCIsImxpbmVjYXAiLCJsaW5lam9pbiIsIl9zdGFydCQxIiwiX2VuZCQxIiwiX2ludmVyc2VNYXRyaXgkMSIsIl9yYXkkMSIsIl9zcGhlcmUkMSIsIkxpbmUiLCJjb21wdXRlTGluZURpc3RhbmNlcyIsImxpbmVEaXN0YW5jZXMiLCJsb2NhbFRocmVzaG9sZCIsImxvY2FsVGhyZXNob2xkU3EiLCJ2U3RhcnQiLCJ2RW5kIiwiaW50ZXJTZWdtZW50IiwiaW50ZXJSYXkiLCJfc3RhcnQiLCJfZW5kIiwiTGluZVNlZ21lbnRzIiwiX2ludmVyc2VNYXRyaXgiLCJfcmF5IiwiX3NwaGVyZSIsIl9wb3NpdGlvbiQyIiwidGVzdFBvaW50IiwicmF5UG9pbnREaXN0YW5jZVNxIiwiaW50ZXJzZWN0UG9pbnQiLCJkaXN0YW5jZVRvUmF5IiwiUG9pbnRzIiwicmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjayIsInVwZGF0ZVZpZGVvIiwicmVhZHlTdGF0ZSIsIkhBVkVfQ1VSUkVOVF9EQVRBIiwiaXNDYW52YXNUZXh0dXJlIiwiQ3VydmUiLCJhcmNMZW5ndGhEaXZpc2lvbnMiLCJnZXRQb2ludCIsImdldFBvaW50QXQiLCJvcHRpb25hbFRhcmdldCIsImdldFV0b1RtYXBwaW5nIiwiZ2V0UG9pbnRzIiwiZGl2aXNpb25zIiwiZ2V0U3BhY2VkUG9pbnRzIiwiZ2V0TGVuZ3RoIiwibGVuZ3RocyIsImdldExlbmd0aHMiLCJjYWNoZUFyY0xlbmd0aHMiLCJjdXJyZW50IiwibGFzdCIsInVwZGF0ZUFyY0xlbmd0aHMiLCJhcmNMZW5ndGhzIiwidGFyZ2V0QXJjTGVuZ3RoIiwiY29tcGFyaXNvbiIsImxvdyIsImhpZ2giLCJsZW5ndGhCZWZvcmUiLCJnZXRUYW5nZW50IiwidDIiLCJwdDEiLCJwdDIiLCJnZXRUYW5nZW50QXQiLCJjb21wdXRlRnJlbmV0RnJhbWVzIiwic2VnbWVudHMiLCJjbG9zZWQiLCJiaW5vcm1hbHMiLCJ2ZWMiLCJtYXQiLCJ0eiIsImZyb21KU09OIiwianNvbiIsIkVsbGlwc2VDdXJ2ZSIsImFYIiwiYVkiLCJ4UmFkaXVzIiwieVJhZGl1cyIsImFTdGFydEFuZ2xlIiwiYUVuZEFuZ2xlIiwiYUNsb2Nrd2lzZSIsImFSb3RhdGlvbiIsInR3b1BpIiwiZGVsdGFBbmdsZSIsInNhbWVQb2ludHMiLCJpc0VsbGlwc2VDdXJ2ZSIsIkFyY0N1cnZlIiwiYVJhZGl1cyIsIkN1YmljUG9seSIsImMwIiwiaW5pdENhdG11bGxSb20iLCJ4MyIsInRlbnNpb24iLCJpbml0Tm9udW5pZm9ybUNhdG11bGxSb20iLCJkdDAiLCJkdDEiLCJkdDIiLCJjYWxjIiwiaXNBcmNDdXJ2ZSIsInB4IiwicHkiLCJweiIsIkNhdG11bGxSb21DdXJ2ZTMiLCJjdXJ2ZVR5cGUiLCJpbnRQb2ludCIsIkNhdG11bGxSb20iLCJRdWFkcmF0aWNCZXppZXIiLCJRdWFkcmF0aWNCZXppZXJQMCIsIlF1YWRyYXRpY0JlemllclAxIiwiUXVhZHJhdGljQmV6aWVyUDIiLCJDdWJpY0JlemllciIsIkN1YmljQmV6aWVyUDAiLCJDdWJpY0JlemllclAxIiwiQ3ViaWNCZXppZXJQMiIsIkN1YmljQmV6aWVyUDMiLCJpc0NhdG11bGxSb21DdXJ2ZTMiLCJDdWJpY0JlemllckN1cnZlIiwidjMiLCJpc0N1YmljQmV6aWVyQ3VydmUiLCJDdWJpY0JlemllckN1cnZlMyIsImlzQ3ViaWNCZXppZXJDdXJ2ZTMiLCJMaW5lQ3VydmUiLCJpc0xpbmVDdXJ2ZSIsIlF1YWRyYXRpY0JlemllckN1cnZlIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZSIsIlF1YWRyYXRpY0JlemllckN1cnZlMyIsImlzUXVhZHJhdGljQmV6aWVyQ3VydmUzIiwiU3BsaW5lQ3VydmUiLCJpc1NwbGluZUN1cnZlIiwiQ3VydmVzIiwiTGluZUN1cnZlMyIsImlzTGluZUN1cnZlMyIsIkN1cnZlUGF0aCIsImN1cnZlcyIsImF1dG9DbG9zZSIsImN1cnZlIiwiY2xvc2VQYXRoIiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwiY3VydmVMZW5ndGhzIiwiZ2V0Q3VydmVMZW5ndGhzIiwiZGlmZiIsInNlZ21lbnRMZW5ndGgiLCJsZW5zIiwiY2FjaGVMZW5ndGhzIiwic3VtcyIsInB0cyIsIlBhdGgiLCJjdXJyZW50UG9pbnQiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiYUNQeCIsImFDUHkiLCJiZXppZXJDdXJ2ZVRvIiwiYUNQMXgiLCJhQ1AxeSIsImFDUDJ4IiwiYUNQMnkiLCJzcGxpbmVUaHJ1IiwibnB0cyIsImFic2FyYyIsImFic2VsbGlwc2UiLCJlbGxpcHNlIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsIlNoYXBlIiwiaG9sZXMiLCJnZXRQb2ludHNIb2xlcyIsImhvbGVzUHRzIiwiZXh0cmFjdFBvaW50cyIsImhvbGUiLCJsaW5rZWRMaXN0IiwiZGltIiwiY2xvY2t3aXNlIiwic2lnbmVkQXJlYSIsImluc2VydE5vZGUiLCJyZW1vdmVOb2RlIiwiZmlsdGVyUG9pbnRzIiwiYWdhaW4iLCJzdGVpbmVyIiwicHJldiIsImVhcmN1dExpbmtlZCIsImVhciIsImludlNpemUiLCJwYXNzIiwiek9yZGVyIiwicHJldloiLCJuZXh0WiIsInRhaWwiLCJudW1NZXJnZXMiLCJwU2l6ZSIsInFTaXplIiwiaW5TaXplIiwic29ydExpbmtlZCIsImluZGV4Q3VydmUiLCJpc0Vhckhhc2hlZCIsImlzRWFyIiwiY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyIsInNwbGl0RWFyY3V0IiwicG9pbnRJblRyaWFuZ2xlIiwibWluVFgiLCJtaW5UWSIsIm1heFRYIiwibWF4VFkiLCJsb2NhbGx5SW5zaWRlIiwiaXNWYWxpZERpYWdvbmFsIiwic3BsaXRQb2x5Z29uIiwiY29tcGFyZVgiLCJlbGltaW5hdGVIb2xlIiwib3V0ZXJOb2RlIiwiaHgiLCJoeSIsIm14IiwibXkiLCJ0YW5NaW4iLCJzZWN0b3JDb250YWluc1NlY3RvciIsImZpbmRIb2xlQnJpZGdlIiwiZ2V0TGVmdG1vc3QiLCJsZWZ0bW9zdCIsImludGVyc2VjdHNQb2x5Z29uIiwiaW5zaWRlIiwibWlkZGxlSW5zaWRlIiwicTEiLCJxMiIsIm8xIiwibzIiLCJvMyIsIm80Iiwib25TZWdtZW50IiwibnVtIiwiYTIiLCJOb2RlIiwiYjIiLCJhbiIsImJwIiwiU2hhcGVVdGlscyIsImNvbnRvdXIiLCJhcmVhIiwiaG9sZUluZGljZXMiLCJmYWNlcyIsInJlbW92ZUR1cEVuZFB0cyIsImFkZENvbnRvdXIiLCJob2xlSW5kZXgiLCJoYXNIb2xlcyIsIm91dGVyTGVuIiwicXVldWUiLCJlbGltaW5hdGVIb2xlcyIsIkVhcmN1dCIsIkV4dHJ1ZGVHZW9tZXRyeSIsInZlcnRpY2VzQXJyYXkiLCJ1dkFycmF5IiwiYWRkU2hhcGUiLCJwbGFjZWhvbGRlciIsImN1cnZlU2VnbWVudHMiLCJzdGVwcyIsImJldmVsRW5hYmxlZCIsImJldmVsVGhpY2tuZXNzIiwiYmV2ZWxTaXplIiwiYmV2ZWxPZmZzZXQiLCJiZXZlbFNlZ21lbnRzIiwiZXh0cnVkZVBhdGgiLCJ1dmdlbiIsIlVWR2VuZXJhdG9yIiwiV29ybGRVVkdlbmVyYXRvciIsImFtb3VudCIsImV4dHJ1ZGVQdHMiLCJzcGxpbmVUdWJlIiwiYmlub3JtYWwiLCJwb3NpdGlvbjIiLCJleHRydWRlQnlQYXRoIiwic2hhcGVQb2ludHMiLCJpc0Nsb2NrV2lzZSIsInJldmVyc2UiLCJobCIsImFob2xlIiwidHJpYW5ndWxhdGVTaGFwZSIsInNjYWxlUHQyIiwicHQiLCJ2bGVuIiwiZmxlbiIsImdldEJldmVsVmVjIiwiaW5QdCIsImluUHJldiIsImluTmV4dCIsInZfdHJhbnNfeCIsInZfdHJhbnNfeSIsInNocmlua19ieSIsInZfcHJldl94Iiwidl9wcmV2X3kiLCJ2X25leHRfeCIsInZfbmV4dF95Iiwidl9wcmV2X2xlbnNxIiwiY29sbGluZWFyMCIsInZfcHJldl9sZW4iLCJ2X25leHRfbGVuIiwicHRQcmV2U2hpZnRfeCIsInB0UHJldlNoaWZ0X3kiLCJzZiIsInZfdHJhbnNfbGVuc3EiLCJkaXJlY3Rpb25fZXEiLCJjb250b3VyTW92ZW1lbnRzIiwiaG9sZXNNb3ZlbWVudHMiLCJvbmVIb2xlTW92ZW1lbnRzIiwidmVydGljZXNNb3ZlbWVudHMiLCJicyIsInZlcnQiLCJzaWRld2FsbHMiLCJsYXllcm9mZnNldCIsInNsIiwic2xlbjEiLCJzbGVuMiIsImY0IiwiZjMiLCJhZGRWZXJ0ZXgiLCJuZXh0SW5kZXgiLCJnZW5lcmF0ZVRvcFVWIiwiYWRkVVYiLCJnZW5lcmF0ZVNpZGVXYWxsVVYiLCJ2ZWN0b3IyIiwiYnVpbGRMaWRGYWNlcyIsImJ1aWxkU2lkZUZhY2VzIiwidG9KU09OJDEiLCJnZW9tZXRyeVNoYXBlcyIsImluZGV4QSIsImluZGV4QiIsImluZGV4QyIsImFfeCIsImFfeSIsImJfeCIsImJfeSIsImNfeCIsImNfeSIsImluZGV4RCIsImFfeiIsImJfeiIsImNfeiIsImRfeCIsImRfeSIsImRfeiIsIlNoYXBlR2VvbWV0cnkiLCJpbmRleE9mZnNldCIsInNoYXBlVmVydGljZXMiLCJzaGFwZUhvbGVzIiwic2hhcGVIb2xlIiwidmVydGV4IiwiUmF3U2hhZGVyTWF0ZXJpYWwiLCJfc2hlZW4iLCJfY2xlYXJjb2F0IiwiX3RyYW5zbWlzc2lvbiIsIm1hdGVyaWFsTGliIiwiQW5pbWF0aW9uVXRpbHMiLCJhcnJheVNsaWNlIiwiaXNUeXBlZEFycmF5IiwiY29udmVydEFycmF5IiwiZm9yY2VDbG9uZSIsImlzVmlldyIsIkRhdGFWaWV3IiwiZ2V0S2V5ZnJhbWVPcmRlciIsInRpbWVzIiwic29ydGVkQXJyYXkiLCJuVmFsdWVzIiwic3JjT2Zmc2V0IiwiZmxhdHRlbkpTT04iLCJqc29uS2V5cyIsInZhbHVlUHJvcGVydHlOYW1lIiwic3ViY2xpcCIsInNvdXJjZUNsaXAiLCJzdGFydEZyYW1lIiwiZW5kRnJhbWUiLCJmcHMiLCJjbGlwIiwidHJhY2tzIiwidHJhY2siLCJ2YWx1ZVNpemUiLCJnZXRWYWx1ZVNpemUiLCJtaW5TdGFydFRpbWUiLCJyZXNldER1cmF0aW9uIiwibWFrZUNsaXBBZGRpdGl2ZSIsInRhcmdldENsaXAiLCJyZWZlcmVuY2VGcmFtZSIsInJlZmVyZW5jZUNsaXAiLCJudW1UcmFja3MiLCJyZWZlcmVuY2VUaW1lIiwicmVmZXJlbmNlVHJhY2siLCJyZWZlcmVuY2VUcmFja1R5cGUiLCJWYWx1ZVR5cGVOYW1lIiwidGFyZ2V0VHJhY2siLCJmaW5kIiwicmVmZXJlbmNlT2Zmc2V0IiwicmVmZXJlbmNlVmFsdWVTaXplIiwiY3JlYXRlSW50ZXJwb2xhbnQiLCJpc0ludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZSIsInRhcmdldE9mZnNldCIsInRhcmdldFZhbHVlU2l6ZSIsInJlZmVyZW5jZVZhbHVlIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiaW50ZXJwb2xhbnQiLCJldmFsdWF0ZSIsInJlc3VsdEJ1ZmZlciIsIm51bVRpbWVzIiwidmFsdWVTdGFydCIsIm11bHRpcGx5UXVhdGVybmlvbnNGbGF0IiwidmFsdWVFbmQiLCJibGVuZE1vZGUiLCJJbnRlcnBvbGFudCIsInBhcmFtZXRlclBvc2l0aW9ucyIsInNhbXBsZVZhbHVlcyIsInNhbXBsZVNpemUiLCJfY2FjaGVkSW5kZXgiLCJzZXR0aW5ncyIsIkRlZmF1bHRTZXR0aW5nc18iLCJwcCIsInZhbGlkYXRlX2ludGVydmFsIiwic2VlayIsImxpbmVhcl9zY2FuIiwiZm9yd2FyZF9zY2FuIiwiZ2l2ZVVwQXQiLCJhZnRlckVuZF8iLCJ0MWdsb2JhbCIsImJlZm9yZVN0YXJ0XyIsIm1pZCIsImludGVydmFsQ2hhbmdlZF8iLCJpbnRlcnBvbGF0ZV8iLCJnZXRTZXR0aW5nc18iLCJjb3B5U2FtcGxlVmFsdWVfIiwiQ3ViaWNJbnRlcnBvbGFudCIsIl93ZWlnaHRQcmV2IiwiX29mZnNldFByZXYiLCJfd2VpZ2h0TmV4dCIsIl9vZmZzZXROZXh0IiwiZW5kaW5nU3RhcnQiLCJlbmRpbmdFbmQiLCJpUHJldiIsImlOZXh0IiwidFByZXYiLCJ0TmV4dCIsImhhbGZEdCIsIm8wIiwib1AiLCJvTiIsIndQIiwid04iLCJwcHAiLCJzUCIsInNOIiwiTGluZWFySW50ZXJwb2xhbnQiLCJvZmZzZXQxIiwib2Zmc2V0MCIsIndlaWdodDEiLCJ3ZWlnaHQwIiwiRGlzY3JldGVJbnRlcnBvbGFudCIsIktleWZyYW1lVHJhY2siLCJpbnRlcnBvbGF0aW9uIiwiVGltZUJ1ZmZlclR5cGUiLCJWYWx1ZUJ1ZmZlclR5cGUiLCJzZXRJbnRlcnBvbGF0aW9uIiwiRGVmYXVsdEludGVycG9sYXRpb24iLCJ0cmFja1R5cGUiLCJnZXRJbnRlcnBvbGF0aW9uIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGgiLCJmYWN0b3J5TWV0aG9kIiwidGltZU9mZnNldCIsInRpbWVTY2FsZSIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJuS2V5cyIsInZhbGlkYXRlIiwidmFsaWQiLCJwcmV2VGltZSIsImN1cnJUaW1lIiwib3B0aW1pemUiLCJzbW9vdGhJbnRlcnBvbGF0aW9uIiwid3JpdGVJbmRleCIsImtlZXAiLCJvZmZzZXRQIiwib2Zmc2V0TiIsInJlYWRPZmZzZXQiLCJ3cml0ZU9mZnNldCIsIlR5cGVkS2V5ZnJhbWVUcmFjayIsIkJvb2xlYW5LZXlmcmFtZVRyYWNrIiwiQ29sb3JLZXlmcmFtZVRyYWNrIiwiTnVtYmVyS2V5ZnJhbWVUcmFjayIsIlF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCIsInNsZXJwRmxhdCIsIlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIiwiU3RyaW5nS2V5ZnJhbWVUcmFjayIsIlZlY3RvcktleWZyYW1lVHJhY2siLCJBbmltYXRpb25DbGlwIiwiZHVyYXRpb24iLCJOb3JtYWxBbmltYXRpb25CbGVuZE1vZGUiLCJqc29uVHJhY2tzIiwiZnJhbWVUaW1lIiwicGFyc2VLZXlmcmFtZVRyYWNrIiwiY2xpcFRyYWNrcyIsIm1vcnBoVGFyZ2V0U2VxdWVuY2UiLCJub0xvb3AiLCJudW1Nb3JwaFRhcmdldHMiLCJvYmplY3RPckNsaXBBcnJheSIsImNsaXBBcnJheSIsImFuaW1hdGlvblRvTW9ycGhUYXJnZXRzIiwicGF0dGVybiIsInBhcnRzIiwiYW5pbWF0aW9uTW9ycGhUYXJnZXRzIiwiY2xpcHMiLCJDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSIsImFkZE5vbmVtcHR5VHJhY2siLCJ0cmFja05hbWUiLCJhbmltYXRpb25LZXlzIiwicHJvcGVydHlOYW1lIiwiZGVzdFRyYWNrcyIsImNsaXBOYW1lIiwiaGllcmFyY2h5VHJhY2tzIiwiaGllcmFyY2h5IiwibW9ycGhUYXJnZXROYW1lcyIsIm1vcnBoVGFyZ2V0TmFtZSIsImFuaW1hdGlvbktleSIsImJvbmVOYW1lIiwidHlwZU5hbWUiLCJnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lIiwiQ2FjaGUiLCJmaWxlIiwiRGVmYXVsdExvYWRpbmdNYW5hZ2VyIiwib25Mb2FkIiwib25Qcm9ncmVzcyIsIm9uRXJyb3IiLCJ1cmxNb2RpZmllciIsImlzTG9hZGluZyIsIml0ZW1zTG9hZGVkIiwiaXRlbXNUb3RhbCIsImhhbmRsZXJzIiwib25TdGFydCIsIml0ZW1TdGFydCIsIml0ZW1FbmQiLCJpdGVtRXJyb3IiLCJyZXNvbHZlVVJMIiwic2V0VVJMTW9kaWZpZXIiLCJhZGRIYW5kbGVyIiwicmVnZXgiLCJsb2FkZXIiLCJyZW1vdmVIYW5kbGVyIiwiZ2V0SGFuZGxlciIsImdsb2JhbCIsIkxvYWRlciIsIm1hbmFnZXIiLCJjcm9zc09yaWdpbiIsIndpdGhDcmVkZW50aWFscyIsInJlc291cmNlUGF0aCIsInJlcXVlc3RIZWFkZXIiLCJsb2FkIiwibG9hZEFzeW5jIiwic2V0Q3Jvc3NPcmlnaW4iLCJzZXRXaXRoQ3JlZGVudGlhbHMiLCJzZXRQYXRoIiwic2V0UmVzb3VyY2VQYXRoIiwic2V0UmVxdWVzdEhlYWRlciIsImxvYWRpbmciLCJGaWxlTG9hZGVyIiwicmVxIiwiUmVxdWVzdCIsImhlYWRlcnMiLCJIZWFkZXJzIiwiY3JlZGVudGlhbHMiLCJtaW1lVHlwZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlIiwiUmVhZGFibGVTdHJlYW0iLCJnZXRSZWFkZXIiLCJjYWxsYmFja3MiLCJyZWFkZXIiLCJjb250ZW50TGVuZ3RoIiwidG90YWwiLCJsZW5ndGhDb21wdXRhYmxlIiwibG9hZGVkIiwicmVhZERhdGEiLCJyZWFkIiwiUHJvZ3Jlc3NFdmVudCIsImVucXVldWUiLCJSZXNwb25zZSIsInN0YXR1c1RleHQiLCJibG9iIiwidGV4dCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImRlY29kZXIiLCJmaW5hbGx5Iiwic2V0UmVzcG9uc2VUeXBlIiwic2V0TWltZVR5cGUiLCJJbWFnZUxvYWRlciIsIm9uSW1hZ2VMb2FkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJvbkltYWdlRXJyb3IiLCJDdWJlVGV4dHVyZUxvYWRlciIsInVybHMiLCJsb2FkVGV4dHVyZSIsIlRleHR1cmVMb2FkZXIiLCJMaWdodCIsIl9wcm9qU2NyZWVuTWF0cml4JDEiLCJfbGlnaHRQb3NpdGlvbldvcmxkJDEiLCJfbG9va1RhcmdldCQxIiwiTGlnaHRTaGFkb3ciLCJfZnJhbWVFeHRlbnRzIiwiX3ZpZXdwb3J0Q291bnQiLCJfdmlld3BvcnRzIiwic2hhZG93TWF0cml4Iiwidmlld3BvcnRJbmRleCIsIlNwb3RMaWdodFNoYWRvdyIsImlzU3BvdExpZ2h0U2hhZG93IiwicG93ZXIiLCJfbGlnaHRQb3NpdGlvbldvcmxkIiwiX2xvb2tUYXJnZXQiLCJQb2ludExpZ2h0U2hhZG93IiwiX2N1YmVEaXJlY3Rpb25zIiwiX2N1YmVVcHMiLCJEaXJlY3Rpb25hbExpZ2h0U2hhZG93IiwiaXNEaXJlY3Rpb25hbExpZ2h0U2hhZG93IiwiU3BoZXJpY2FsSGFybW9uaWNzMyIsInplcm8iLCJnZXRBdCIsImNvZWZmIiwiZ2V0SXJyYWRpYW5jZUF0IiwiYWRkU2NhbGVkU0giLCJzaEJhc2lzIiwiaXNTcGhlcmljYWxIYXJtb25pY3MzIiwiTGlnaHRQcm9iZSIsImZldGNoT3B0aW9ucyIsInJlcyIsImNvbG9yU3BhY2VDb252ZXJzaW9uIiwiaW1hZ2VCaXRtYXAiLCJpc0ltYWdlQml0bWFwTG9hZGVyIiwiQXVkaW9Mb2FkZXIiLCJidWZmZXJDb3B5IiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiZGVjb2RlQXVkaW9EYXRhIiwiYXVkaW9CdWZmZXIiLCJza3kiLCJncm91bmQiLCJpc0hlbWlzcGhlcmVMaWdodFByb2JlIiwiaXNBbWJpZW50TGlnaHRQcm9iZSIsIlByb3BlcnR5TWl4ZXIiLCJiaW5kaW5nIiwibWl4RnVuY3Rpb24iLCJtaXhGdW5jdGlvbkFkZGl0aXZlIiwic2V0SWRlbnRpdHkiLCJfc2xlcnAiLCJfc2xlcnBBZGRpdGl2ZSIsIl9zZXRBZGRpdGl2ZUlkZW50aXR5UXVhdGVybmlvbiIsIl93b3JrSW5kZXgiLCJfc2VsZWN0IiwiX3NldEFkZGl0aXZlSWRlbnRpdHlPdGhlciIsIl9sZXJwIiwiX2xlcnBBZGRpdGl2ZSIsIl9zZXRBZGRpdGl2ZUlkZW50aXR5TnVtZXJpYyIsIl9taXhCdWZmZXJSZWdpb24iLCJfbWl4QnVmZmVyUmVnaW9uQWRkaXRpdmUiLCJfc2V0SWRlbnRpdHkiLCJfb3JpZ0luZGV4IiwiX2FkZEluZGV4IiwiY3VtdWxhdGl2ZVdlaWdodCIsImN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSIsInVzZUNvdW50IiwicmVmZXJlbmNlQ291bnQiLCJhY2N1bXVsYXRlIiwiYWNjdUluZGV4IiwiY3VycmVudFdlaWdodCIsIm1peCIsImFjY3VtdWxhdGVBZGRpdGl2ZSIsIndlaWdodEFkZGl0aXZlIiwib3JpZ2luYWxWYWx1ZU9mZnNldCIsInNhdmVPcmlnaW5hbFN0YXRlIiwiZ2V0VmFsdWUiLCJyZXN0b3JlT3JpZ2luYWxTdGF0ZSIsInRhcmdldEluZGV4Iiwid29ya09mZnNldCIsIl9yZXNlcnZlZFJlIiwiX3dvcmRDaGFyIiwiX3dvcmRDaGFyT3JEb3QiLCJfZGlyZWN0b3J5UmUiLCJfbm9kZVJlIiwiX29iamVjdFJlIiwiX3Byb3BlcnR5UmUiLCJfdHJhY2tSZSIsIl9zdXBwb3J0ZWRPYmplY3ROYW1lcyIsIlByb3BlcnR5QmluZGluZyIsInJvb3ROb2RlIiwicGFyc2VkUGF0aCIsInBhcnNlVHJhY2tOYW1lIiwibm9kZSIsImZpbmROb2RlIiwibm9kZU5hbWUiLCJfZ2V0VmFsdWVfdW5ib3VuZCIsIl9zZXRWYWx1ZV91bmJvdW5kIiwicm9vdCIsImlzQW5pbWF0aW9uT2JqZWN0R3JvdXAiLCJDb21wb3NpdGUiLCJtYXRjaGVzIiwicmVzdWx0cyIsIm9iamVjdE5hbWUiLCJvYmplY3RJbmRleCIsInByb3BlcnR5SW5kZXgiLCJsYXN0RG90IiwiYm9uZSIsImdldEJvbmVCeU5hbWUiLCJzZWFyY2hOb2RlU3VidHJlZSIsImNoaWxkTm9kZSIsInN1YlRyZWVOb2RlIiwiX2dldFZhbHVlX3VuYXZhaWxhYmxlIiwiX3NldFZhbHVlX3VuYXZhaWxhYmxlIiwiX2dldFZhbHVlX2RpcmVjdCIsInRhcmdldE9iamVjdCIsIl9nZXRWYWx1ZV9hcnJheSIsInJlc29sdmVkUHJvcGVydHkiLCJfZ2V0VmFsdWVfYXJyYXlFbGVtZW50IiwiX2dldFZhbHVlX3RvQXJyYXkiLCJfc2V0VmFsdWVfZGlyZWN0IiwiX3NldFZhbHVlX2RpcmVjdF9zZXROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9kaXJlY3Rfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9hcnJheSIsImRlc3QiLCJfc2V0VmFsdWVfYXJyYXlfc2V0TmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfYXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9hcnJheUVsZW1lbnQiLCJfc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2Zyb21BcnJheSIsIl9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJ0YXJnZXRBcnJheSIsInNvdXJjZUFycmF5Iiwibm9kZVByb3BlcnR5IiwidmVyc2lvbmluZyIsIlZlcnNpb25pbmciLCJOb25lIiwiTmVlZHNVcGRhdGUiLCJNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiYmluZGluZ1R5cGUiLCJCaW5kaW5nVHlwZSIsIkRpcmVjdCIsIkFycmF5RWxlbWVudCIsIkhhc0Zyb21Ub0FycmF5IiwiRW50aXJlQXJyYXkiLCJHZXR0ZXJCeUJpbmRpbmdUeXBlIiwiU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmciLCJ1bmJpbmQiLCJ0YXJnZXRHcm91cCIsIm9wdGlvbmFsUGFyc2VkUGF0aCIsIl90YXJnZXRHcm91cCIsIl9iaW5kaW5ncyIsInN1YnNjcmliZV8iLCJmaXJzdFZhbGlkSW5kZXgiLCJuQ2FjaGVkT2JqZWN0c18iLCJiaW5kaW5ncyIsIkFuaW1hdGlvbkFjdGlvbiIsIm1peGVyIiwibG9jYWxSb290IiwiX21peGVyIiwiX2NsaXAiLCJfbG9jYWxSb290IiwiblRyYWNrcyIsImludGVycG9sYW50cyIsImludGVycG9sYW50U2V0dGluZ3MiLCJfaW50ZXJwb2xhbnRTZXR0aW5ncyIsIl9pbnRlcnBvbGFudHMiLCJfcHJvcGVydHlCaW5kaW5ncyIsIl9jYWNoZUluZGV4IiwiX2J5Q2xpcENhY2hlSW5kZXgiLCJfdGltZVNjYWxlSW50ZXJwb2xhbnQiLCJfd2VpZ2h0SW50ZXJwb2xhbnQiLCJsb29wIiwiX2xvb3BDb3VudCIsIl9zdGFydFRpbWUiLCJfZWZmZWN0aXZlVGltZVNjYWxlIiwiX2VmZmVjdGl2ZVdlaWdodCIsInJlcGV0aXRpb25zIiwiY2xhbXBXaGVuRmluaXNoZWQiLCJ6ZXJvU2xvcGVBdFN0YXJ0IiwiemVyb1Nsb3BlQXRFbmQiLCJfYWN0aXZhdGVBY3Rpb24iLCJfZGVhY3RpdmF0ZUFjdGlvbiIsInN0b3BGYWRpbmciLCJzdG9wV2FycGluZyIsImlzUnVubmluZyIsIl9pc0FjdGl2ZUFjdGlvbiIsImlzU2NoZWR1bGVkIiwic3RhcnRBdCIsInNldExvb3AiLCJzZXRFZmZlY3RpdmVXZWlnaHQiLCJnZXRFZmZlY3RpdmVXZWlnaHQiLCJmYWRlSW4iLCJfc2NoZWR1bGVGYWRpbmciLCJmYWRlT3V0IiwiY3Jvc3NGYWRlRnJvbSIsImZhZGVPdXRBY3Rpb24iLCJ3YXJwIiwiZmFkZUluRHVyYXRpb24iLCJmYWRlT3V0RHVyYXRpb24iLCJzdGFydEVuZFJhdGlvIiwiZW5kU3RhcnRSYXRpbyIsImNyb3NzRmFkZVRvIiwiZmFkZUluQWN0aW9uIiwid2VpZ2h0SW50ZXJwb2xhbnQiLCJfdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQiLCJzZXRFZmZlY3RpdmVUaW1lU2NhbGUiLCJnZXRFZmZlY3RpdmVUaW1lU2NhbGUiLCJzZXREdXJhdGlvbiIsInN5bmNXaXRoIiwiYWN0aW9uIiwiaGFsdCIsInN0YXJ0VGltZVNjYWxlIiwiZW5kVGltZVNjYWxlIiwiX2xlbmRDb250cm9sSW50ZXJwb2xhbnQiLCJ0aW1lU2NhbGVJbnRlcnBvbGFudCIsImdldE1peGVyIiwiZ2V0Q2xpcCIsImdldFJvb3QiLCJfcm9vdCIsIl91cGRhdGUiLCJkZWx0YVRpbWUiLCJ0aW1lRGlyZWN0aW9uIiwiX3VwZGF0ZVdlaWdodCIsInRpbWVSdW5uaW5nIiwiX3VwZGF0ZVRpbWVTY2FsZSIsImNsaXBUaW1lIiwiX3VwZGF0ZVRpbWUiLCJwcm9wZXJ0eU1peGVycyIsImludGVycG9sYW50VmFsdWUiLCJsb29wQ291bnQiLCJwaW5nUG9uZyIsIl9zZXRFbmRpbmdzIiwiaGFuZGxlX3N0b3AiLCJsb29wRGVsdGEiLCJwZW5kaW5nIiwiYXRTdGFydCIsImF0RW5kIiwid2VpZ2h0Tm93Iiwid2VpZ2h0VGhlbiIsIl9pbml0TWVtb3J5TWFuYWdlciIsIl9hY2N1SW5kZXgiLCJfYmluZEFjdGlvbiIsInByb3RvdHlwZUFjdGlvbiIsInJvb3RVdWlkIiwiYmluZGluZ3NCeVJvb3QiLCJfYmluZGluZ3NCeVJvb3RBbmROYW1lIiwiYmluZGluZ3NCeU5hbWUiLCJfYWRkSW5hY3RpdmVCaW5kaW5nIiwiY2xpcFV1aWQiLCJhY3Rpb25zRm9yQ2xpcCIsIl9hY3Rpb25zQnlDbGlwIiwia25vd25BY3Rpb25zIiwiX2FkZEluYWN0aXZlQWN0aW9uIiwiX2xlbmRCaW5kaW5nIiwiX2xlbmRBY3Rpb24iLCJfdGFrZUJhY2tCaW5kaW5nIiwiX3Rha2VCYWNrQWN0aW9uIiwiX2FjdGlvbnMiLCJfbkFjdGl2ZUFjdGlvbnMiLCJfbkFjdGl2ZUJpbmRpbmdzIiwiX2NvbnRyb2xJbnRlcnBvbGFudHMiLCJfbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMiLCJzdGF0cyIsImFjdGlvbnMiLCJpblVzZSIsImNvbnRyb2xJbnRlcnBvbGFudHMiLCJhY3Rpb25zQnlDbGlwIiwiYWN0aW9uQnlSb290IiwiX3JlbW92ZUluYWN0aXZlQWN0aW9uIiwibGFzdEluYWN0aXZlQWN0aW9uIiwiY2FjaGVJbmRleCIsImtub3duQWN0aW9uc0ZvckNsaXAiLCJsYXN0S25vd25BY3Rpb24iLCJieUNsaXBDYWNoZUluZGV4IiwiX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24iLCJfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nIiwicHJldkluZGV4IiwibGFzdEFjdGl2ZUluZGV4IiwiZmlyc3RJbmFjdGl2ZUFjdGlvbiIsImZpcnN0SW5hY3RpdmVJbmRleCIsImxhc3RBY3RpdmVBY3Rpb24iLCJiaW5kaW5nQnlOYW1lIiwicHJvcEJpbmRpbmciLCJsYXN0SW5hY3RpdmVCaW5kaW5nIiwiZmlyc3RJbmFjdGl2ZUJpbmRpbmciLCJsYXN0QWN0aXZlQmluZGluZyIsIl9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyIiwiX19jYWNoZUluZGV4IiwibGFzdEFjdGl2ZUludGVycG9sYW50IiwiY2xpcEFjdGlvbiIsIm9wdGlvbmFsUm9vdCIsImNsaXBPYmplY3QiLCJmaW5kQnlOYW1lIiwiZXhpc3RpbmdBY3Rpb24iLCJuZXdBY3Rpb24iLCJzdG9wQWxsQWN0aW9uIiwibkFjdGlvbnMiLCJuQmluZGluZ3MiLCJzZXRUaW1lIiwidGltZUluU2Vjb25kcyIsInVuY2FjaGVDbGlwIiwiYWN0aW9uc1RvUmVtb3ZlIiwidW5jYWNoZVJvb3QiLCJ1bmNhY2hlQWN0aW9uIiwiVW5pZm9ybSIsIlNwaGVyaWNhbCIsIm90aGVyIiwibWFrZVNhZmUiLCJFUFMiLCJzZXRGcm9tQ2FydGVzaWFuQ29vcmRzIiwiX3ZlY3RvciQ0IiwiQm94MiIsImlzQm94MiIsIl92ZWN0b3IkMiIsIl9ib25lTWF0cml4IiwiX21hdHJpeFdvcmxkSW52IiwiZ2V0Qm9uZUxpc3QiLCJib25lTGlzdCIsIl9idWZmZXIiLCJfYmFzZVRhYmxlIiwiX3NoaWZ0VGFibGUiLCJfbWFudGlzc2FUYWJsZSIsIl9leHBvbmVudFRhYmxlIiwiX29mZnNldFRhYmxlIiwiYnVpbGRKb2ludCIsImJ1aWxkUGFydCIsInBhcnQiLCJsYW5kbWFya3MiLCJyZWR1Y2UiLCJnZXRBbmdsZSIsImNvbnN0cnVjdCIsImZyb21Qb2ludHMiLCJzZXRDb2xvcnMiLCJpc1NrZWxldG9uSGVscGVyIiwiZXh0cmFjdFVybEJhc2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJIYW5kbGVycyIsImVtcHR5IiwiaXNJbnRlcnNlY3Rpb25Cb3giLCJpc0ludGVyc2VjdGlvblNwaGVyZSIsInRvVmVjdG9yMyIsInNldEZyb21NYXRyaXgiLCJmbGF0dGVuVG9BcnJheU9mZnNldCIsIm11bHRpcGx5VmVjdG9yMyIsIm11bHRpcGx5VmVjdG9yM0FycmF5IiwiYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSIsImFwcGx5VG9WZWN0b3IzQXJyYXkiLCJnZXRJbnZlcnNlIiwiZXh0cmFjdFBvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJtdWx0aXBseVRvQXJyYXkiLCJtdWx0aXBseVZlY3RvcjQiLCJyb3RhdGVBeGlzIiwiY3Jvc3NWZWN0b3IiLCJyb3RhdGVCeUF4aXMiLCJtYWtlRnJ1c3R1bSIsImlzSW50ZXJzZWN0aW9uTGluZSIsImludmVyc2UiLCJpc0ludGVyc2VjdGlvblBsYW5lIiwiYmFyeWNvb3JkRnJvbVBvaW50IiwibWlkcG9pbnQiLCJwcm90b3R5cGVub3JtYWwiLCJleHRyYWN0QWxsUG9pbnRzIiwiZXh0cnVkZSIsIm1ha2VHZW9tZXRyeSIsImZyb21BdHRyaWJ1dGUiLCJkaXN0YW5jZVRvTWFuaGF0dGFuIiwibGVuZ3RoTWFuaGF0dGFuIiwic2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgiLCJzZXRFdWxlckZyb21RdWF0ZXJuaW9uIiwiZ2V0UG9zaXRpb25Gcm9tTWF0cml4IiwiZ2V0U2NhbGVGcm9tTWF0cml4IiwiZ2V0Q29sdW1uRnJvbU1hdHJpeCIsImFwcGx5UHJvamVjdGlvbiIsImdldENoaWxkQnlOYW1lIiwicmVuZGVyRGVwdGgiLCJnZXRXb3JsZFJvdGF0aW9uIiwiYXBwbHlNYXRyaXgiLCJldWxlck9yZGVyIiwidXNlUXVhdGVybmlvbiIsInNldERyYXdNb2RlIiwiZHJhd01vZGUiLCJpbml0Qm9uZXMiLCJzZXRMZW5zIiwib25seVNoYWRvdyIsInNoYWRvd0NhbWVyYUZvdiIsInNoYWRvd0NhbWVyYUxlZnQiLCJzaGFkb3dDYW1lcmFSaWdodCIsInNoYWRvd0NhbWVyYVRvcCIsInNoYWRvd0NhbWVyYUJvdHRvbSIsInNoYWRvd0NhbWVyYVZpc2libGUiLCJzaGFkb3dEYXJrbmVzcyIsInNoYWRvd01hcFdpZHRoIiwic2hhZG93TWFwSGVpZ2h0IiwiZHluYW1pYyIsInNldER5bmFtaWMiLCJjb3B5SW5kaWNlc0FycmF5Iiwic2V0QXJyYXkiLCJhZGRJbmRleCIsImFkZEF0dHJpYnV0ZSIsImFkZERyYXdDYWxsIiwiY2xlYXJEcmF3Q2FsbHMiLCJjb21wdXRlT2Zmc2V0cyIsInJlbW92ZUF0dHJpYnV0ZSIsImRyYXdjYWxscyIsIm9mZnNldHMiLCJnZXRBcnJheXMiLCJhZGRTaGFwZUxpc3QiLCJ3cmFwQXJvdW5kIiwib3ZlcmRyYXciLCJ3cmFwUkdCIiwic2hhZGluZyIsImNsZWFyVGFyZ2V0IiwiYW5pbWF0ZSIsImdldEN1cnJlbnRSZW5kZXJUYXJnZXQiLCJnZXRQcmVjaXNpb24iLCJyZXNldEdMU3RhdGUiLCJzdXBwb3J0c0Zsb2F0VGV4dHVyZXMiLCJzdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzIiwic3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzIiwic3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEMiLCJzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUFZSVEMiLCJzdXBwb3J0c0JsZW5kTWluTWF4Iiwic3VwcG9ydHNJbnN0YW5jZWRBcnJheXMiLCJlbmFibGVTY2lzc29yVGVzdCIsImluaXRNYXRlcmlhbCIsImFkZFByZVBsdWdpbiIsImFkZFBvc3RQbHVnaW4iLCJ1cGRhdGVTaGFkb3dNYXAiLCJzZXRGYWNlQ3VsbGluZyIsImFsbG9jVGV4dHVyZVVuaXQiLCJzZXRUZXh0dXJlIiwiZ2V0QWN0aXZlTWlwTWFwTGV2ZWwiLCJzaGFkb3dNYXBDdWxsRmFjZSIsInZyIiwiZ2FtbWFJbnB1dCIsImdhbW1hT3V0cHV0IiwidG9uZU1hcHBpbmdXaGl0ZVBvaW50IiwiZ2FtbWFGYWN0b3IiLCJyZW5kZXJSZXZlcnNlU2lkZWQiLCJyZW5kZXJTaW5nbGVTaWRlZCIsImdhaW4iLCJjcmVhdGVHYWluIiwiY29ubmVjdCIsImdldElucHV0IiwiYXV0b3BsYXkiLCJkZXR1bmUiLCJsb29wU3RhcnQiLCJsb29wRW5kIiwicGxheWJhY2tSYXRlIiwiaXNQbGF5aW5nIiwiaGFzUGxheWJhY2tDb250cm9sIiwic291cmNlVHlwZSIsIl9zdGFydGVkQXQiLCJfcHJvZ3Jlc3MiLCJfY29ubmVjdGVkIiwiZmlsdGVycyIsImdldE91dHB1dCIsInNldE5vZGVTb3VyY2UiLCJhdWRpb05vZGUiLCJzZXRNZWRpYUVsZW1lbnRTb3VyY2UiLCJtZWRpYUVsZW1lbnQiLCJjcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UiLCJzZXRNZWRpYVN0cmVhbVNvdXJjZSIsIm1lZGlhU3RyZWFtIiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJzZXRCdWZmZXIiLCJkZWxheSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsIm9uZW5kZWQiLCJvbkVuZGVkIiwic2V0RGV0dW5lIiwic2V0UGxheWJhY2tSYXRlIiwicGF1c2UiLCJnZXRGaWx0ZXJzIiwic2V0RmlsdGVycyIsInNldFRhcmdldEF0VGltZSIsImdldERldHVuZSIsImdldEZpbHRlciIsInNldEZpbHRlciIsImdldFBsYXliYWNrUmF0ZSIsImdldExvb3AiLCJzZXRMb29wU3RhcnQiLCJzZXRMb29wRW5kIiwiZ2V0Vm9sdW1lIiwic2V0Vm9sdW1lIiwidXBkYXRlQ3ViZU1hcCIsImxvYWRUZXh0dXJlQ3ViZSIsImxvYWRDb21wcmVzc2VkVGV4dHVyZSIsImxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUiLCJyZXZpc2lvbiIsIl9fVEhSRUVfXyIsIl9jaGFuZ2VFdmVudCIsIl9zdGFydEV2ZW50IiwiX2VuZEV2ZW50IiwiT3JiaXRDb250cm9scyIsInRvdWNoQWN0aW9uIiwibWluRGlzdGFuY2UiLCJtYXhEaXN0YW5jZSIsIm1pblpvb20iLCJtYXhab29tIiwibWluUG9sYXJBbmdsZSIsIm1heFBvbGFyQW5nbGUiLCJtaW5BemltdXRoQW5nbGUiLCJtYXhBemltdXRoQW5nbGUiLCJlbmFibGVEYW1waW5nIiwiZGFtcGluZ0ZhY3RvciIsImVuYWJsZVpvb20iLCJ6b29tU3BlZWQiLCJlbmFibGVSb3RhdGUiLCJyb3RhdGVTcGVlZCIsImVuYWJsZVBhbiIsInBhblNwZWVkIiwic2NyZWVuU3BhY2VQYW5uaW5nIiwia2V5UGFuU3BlZWQiLCJhdXRvUm90YXRlIiwiYXV0b1JvdGF0ZVNwZWVkIiwiTEVGVCIsIlVQIiwiUklHSFQiLCJCT1RUT00iLCJtb3VzZUJ1dHRvbnMiLCJNSURETEUiLCJ0b3VjaGVzIiwiT05FIiwiVFdPIiwidGFyZ2V0MCIsInBvc2l0aW9uMCIsInpvb20wIiwiX2RvbUVsZW1lbnRLZXlFdmVudHMiLCJnZXRQb2xhckFuZ2xlIiwic3BoZXJpY2FsIiwiZ2V0QXppbXV0aGFsQW5nbGUiLCJnZXREaXN0YW5jZSIsImxpc3RlblRvS2V5RXZlbnRzIiwib25LZXlEb3duIiwic2F2ZVN0YXRlIiwiU1RBVEUiLCJOT05FIiwicXVhdCIsInF1YXRJbnZlcnNlIiwibGFzdFBvc2l0aW9uIiwibGFzdFF1YXRlcm5pb24iLCJ0d29QSSIsInJvdGF0ZUxlZnQiLCJzcGhlcmljYWxEZWx0YSIsInBhbk9mZnNldCIsInpvb21DaGFuZ2VkIiwib25Db250ZXh0TWVudSIsIm9uUG9pbnRlckRvd24iLCJvblBvaW50ZXJDYW5jZWwiLCJvbk1vdXNlV2hlZWwiLCJvblBvaW50ZXJNb3ZlIiwib25Qb2ludGVyVXAiLCJST1RBVEUiLCJET0xMWSIsIlBBTiIsIlRPVUNIX1JPVEFURSIsIlRPVUNIX1BBTiIsIlRPVUNIX0RPTExZX1BBTiIsIlRPVUNIX0RPTExZX1JPVEFURSIsInJvdGF0ZVN0YXJ0Iiwicm90YXRlRW5kIiwicm90YXRlRGVsdGEiLCJwYW5TdGFydCIsInBhbkVuZCIsInBhbkRlbHRhIiwiZG9sbHlTdGFydCIsImRvbGx5RW5kIiwiZG9sbHlEZWx0YSIsInBvaW50ZXJzIiwicG9pbnRlclBvc2l0aW9ucyIsImdldFpvb21TY2FsZSIsInJvdGF0ZVVwIiwicGFuTGVmdCIsIm9iamVjdE1hdHJpeCIsInBhblVwIiwicGFuIiwiZGVsdGFYIiwiZGVsdGFZIiwidGFyZ2V0RGlzdGFuY2UiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsImRvbGx5T3V0IiwiZG9sbHlTY2FsZSIsImRvbGx5SW4iLCJoYW5kbGVNb3VzZURvd25Sb3RhdGUiLCJjbGllbnRYIiwiY2xpZW50WSIsImhhbmRsZU1vdXNlRG93blBhbiIsImhhbmRsZVRvdWNoU3RhcnRSb3RhdGUiLCJwYWdlWCIsInBhZ2VZIiwiaGFuZGxlVG91Y2hTdGFydFBhbiIsImhhbmRsZVRvdWNoU3RhcnREb2xseSIsImhhbmRsZVRvdWNoTW92ZVJvdGF0ZSIsImdldFNlY29uZFBvaW50ZXJQb3NpdGlvbiIsImhhbmRsZVRvdWNoTW92ZVBhbiIsImhhbmRsZVRvdWNoTW92ZURvbGx5Iiwic2V0UG9pbnRlckNhcHR1cmUiLCJwb2ludGVySWQiLCJhZGRQb2ludGVyIiwicG9pbnRlclR5cGUiLCJ0cmFja1BvaW50ZXIiLCJvblRvdWNoU3RhcnQiLCJtb3VzZUFjdGlvbiIsImJ1dHRvbiIsImhhbmRsZU1vdXNlRG93bkRvbGx5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsIm9uTW91c2VEb3duIiwiaGFuZGxlVG91Y2hNb3ZlRG9sbHlQYW4iLCJoYW5kbGVUb3VjaE1vdmVEb2xseVJvdGF0ZSIsIm9uVG91Y2hNb3ZlIiwiaGFuZGxlTW91c2VNb3ZlUm90YXRlIiwiaGFuZGxlTW91c2VNb3ZlRG9sbHkiLCJoYW5kbGVNb3VzZU1vdmVQYW4iLCJvbk1vdXNlTW92ZSIsInJlbW92ZVBvaW50ZXIiLCJyZWxlYXNlUG9pbnRlckNhcHR1cmUiLCJoYW5kbGVNb3VzZVdoZWVsIiwiaGFuZGxlS2V5RG93biIsInBvaW50ZXIiLCJwYXNzaXZlIiwiZXh0ZW5kU3RhdGljcyIsIkJhc2VTY2VuZSIsIl9hIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY29udHJvbHMiLCJfX2V4dGVuZHMiLCJfXyIsIk93bFNjZW5lIiwiX3N1cGVyIiwib3dsIiwiYnVpbGQiLCJiZXR3ZWVuU2hvdWxkZXJzIiwiUE9TRV9MQU5ETUFSS1MiLCJiZXR3ZWVuSGlwcyIsInRvcnNvIiwibmVjayIsImxlZnRTaG91bGRlciIsImxlZnRFbGJvdyIsInJpZ2h0U2hvdWxkZXIiLCJyaWdodEVsYm93IiwibGVmdEhpcCIsIlBPU0VfTEFORE1BUktTX0xFRlQiLCJyaWdodEhpcCIsIlBPU0VfTEFORE1BUktTX1JJR0hUIiwiaGVhZCIsImxlZnRMZWciLCJyaWdodExlZyIsImxlZnRVcHBlcldpbmciLCJsZWZ0TG93ZXJXaW5nIiwicmlnaHRVcHBlcldpbmciLCJyaWdodExvd2VyV2luZyIsImFuY2hvciIsIlBvc2VFc3RpbWF0b3IiLCJ2aWRlb0VsZW1lbnQiLCJQb3NlIiwibm90aWZ5TGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIlZpZGVvU2NlbmUiLCJjYW52YXNDdHgiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJkcmF3Q29ubmVjdG9ycyIsIlBPU0VfQ09OTkVDVElPTlMiLCJkcmF3TGFuZG1hcmtzIiwiY3VycmVudFJlc3VsdHMiLCJwb3NlRXN0aW1hdG9yIiwic2NlbmVzIiwiZ2V0RWxlbWVudEJ5SWQiLCJtYWluIl0sInNvdXJjZVJvb3QiOiIifQ==